
MQTTClientRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000165e8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000038d4  080167e8  080167e8  000267e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a0bc  0801a0bc  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  0801a0bc  0801a0bc  0002a0bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a0c4  0801a0c4  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a0c4  0801a0c4  0002a0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a0c8  0801a0c8  0002a0c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0801a0cc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000aac8  20000080  0801a14c  00030080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000ab48  0801a14c  0003ab48  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00042602  00000000  00000000  000300ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007ed7  00000000  00000000  000726b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021c8  00000000  00000000  0007a588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000020d0  00000000  00000000  0007c750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037b0f  00000000  00000000  0007e820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033fcf  00000000  00000000  000b632f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00121ce3  00000000  00000000  000ea2fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0020bfe1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009524  00000000  00000000  0020c034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	080167d0 	.word	0x080167d0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	080167d0 	.word	0x080167d0

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	60f8      	str	r0, [r7, #12]
 8000610:	60b9      	str	r1, [r7, #8]
 8000612:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	4a07      	ldr	r2, [pc, #28]	; (8000634 <vApplicationGetIdleTaskMemory+0x2c>)
 8000618:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	4a06      	ldr	r2, [pc, #24]	; (8000638 <vApplicationGetIdleTaskMemory+0x30>)
 800061e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2280      	movs	r2, #128	; 0x80
 8000624:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000626:	bf00      	nop
 8000628:	3714      	adds	r7, #20
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	2000009c 	.word	0x2000009c
 8000638:	200000f0 	.word	0x200000f0

0800063c <mqtt_pub_request_cb>:
void StartDefaultTask(void const * argument);

/* USER CODE BEGIN PFP */

static void mqtt_pub_request_cb(void *arg, err_t result)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	460b      	mov	r3, r1
 8000646:	70fb      	strb	r3, [r7, #3]
  if(result != ERR_OK) {
 8000648:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d005      	beq.n	800065c <mqtt_pub_request_cb+0x20>
    printf("Publish result: %d\n", result);
 8000650:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000654:	4619      	mov	r1, r3
 8000656:	4803      	ldr	r0, [pc, #12]	; (8000664 <mqtt_pub_request_cb+0x28>)
 8000658:	f014 fe6c 	bl	8015334 <iprintf>
  }
}
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	080167f4 	.word	0x080167f4

08000668 <example_publish>:


void example_publish(mqtt_client_t *client, void *arg)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08a      	sub	sp, #40	; 0x28
 800066c:	af04      	add	r7, sp, #16
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	6039      	str	r1, [r7, #0]
   char message[10];
  snprintf(message,10,"HOLA\n");
 8000672:	f107 030c 	add.w	r3, r7, #12
 8000676:	4a1b      	ldr	r2, [pc, #108]	; (80006e4 <example_publish+0x7c>)
 8000678:	210a      	movs	r1, #10
 800067a:	4618      	mov	r0, r3
 800067c:	f014 ff28 	bl	80154d0 <sniprintf>

  err_t err;
  u8_t qos = 0; /* 0 1 or 2, see MQTT specification */
 8000680:	2300      	movs	r3, #0
 8000682:	75fb      	strb	r3, [r7, #23]
  u8_t retain = 0; /* No don't retain such crappy payload... */
 8000684:	2300      	movs	r3, #0
 8000686:	75bb      	strb	r3, [r7, #22]
  err = mqtt_publish(client, "pub_topic", message, 10, qos, retain, mqtt_pub_request_cb, arg);
 8000688:	f107 020c 	add.w	r2, r7, #12
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	9303      	str	r3, [sp, #12]
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <example_publish+0x80>)
 8000692:	9302      	str	r3, [sp, #8]
 8000694:	7dbb      	ldrb	r3, [r7, #22]
 8000696:	9301      	str	r3, [sp, #4]
 8000698:	7dfb      	ldrb	r3, [r7, #23]
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	230a      	movs	r3, #10
 800069e:	4913      	ldr	r1, [pc, #76]	; (80006ec <example_publish+0x84>)
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f009 f9d1 	bl	8009a48 <mqtt_publish>
 80006a6:	4603      	mov	r3, r0
 80006a8:	72fb      	strb	r3, [r7, #11]
  if(err != ERR_OK) {
 80006aa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d011      	beq.n	80006d6 <example_publish+0x6e>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80006b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006b6:	480e      	ldr	r0, [pc, #56]	; (80006f0 <example_publish+0x88>)
 80006b8:	f002 f96d 	bl	8002996 <HAL_GPIO_TogglePin>
	  HAL_UART_Transmit(&huart3, &err,1,100);
 80006bc:	f107 010b 	add.w	r1, r7, #11
 80006c0:	2364      	movs	r3, #100	; 0x64
 80006c2:	2201      	movs	r2, #1
 80006c4:	480b      	ldr	r0, [pc, #44]	; (80006f4 <example_publish+0x8c>)
 80006c6:	f003 fe19 	bl	80042fc <HAL_UART_Transmit>
    printf("Publish err: %d\n", err);
 80006ca:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80006ce:	4619      	mov	r1, r3
 80006d0:	4809      	ldr	r0, [pc, #36]	; (80006f8 <example_publish+0x90>)
 80006d2:	f014 fe2f 	bl	8015334 <iprintf>
  }
  mqtt_disconnect(client);
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f009 fe0a 	bl	800a2f0 <mqtt_disconnect>
}
 80006dc:	bf00      	nop
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	08016808 	.word	0x08016808
 80006e8:	0800063d 	.word	0x0800063d
 80006ec:	08016810 	.word	0x08016810
 80006f0:	40020400 	.word	0x40020400
 80006f4:	200041e8 	.word	0x200041e8
 80006f8:	0801681c 	.word	0x0801681c

080006fc <mqtt_incoming_publish_cb>:
   If RAM and CPU budget allows it, the easiest implementation might be to just take a copy of
   the topic string and use it in mqtt_incoming_data_cb
*/
static int inpub_id;
static void mqtt_incoming_publish_cb(void *arg, const char *topic, u32_t tot_len)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
  printf("Incoming publish at topic %s with total length %u\n", topic, (unsigned int)tot_len);
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	68b9      	ldr	r1, [r7, #8]
 800070c:	480e      	ldr	r0, [pc, #56]	; (8000748 <mqtt_incoming_publish_cb+0x4c>)
 800070e:	f014 fe11 	bl	8015334 <iprintf>

  /* Decode topic string into a user defined reference */
  if(strcmp(topic, "print_payload") == 0) {
 8000712:	490e      	ldr	r1, [pc, #56]	; (800074c <mqtt_incoming_publish_cb+0x50>)
 8000714:	68b8      	ldr	r0, [r7, #8]
 8000716:	f7ff fd93 	bl	8000240 <strcmp>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d103      	bne.n	8000728 <mqtt_incoming_publish_cb+0x2c>
    inpub_id = 0;
 8000720:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <mqtt_incoming_publish_cb+0x54>)
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
    inpub_id = 1;
  } else {
    /* For all other topics */
    inpub_id = 2;
  }
}
 8000726:	e00a      	b.n	800073e <mqtt_incoming_publish_cb+0x42>
  } else if(topic[0] == 'A') {
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b41      	cmp	r3, #65	; 0x41
 800072e:	d103      	bne.n	8000738 <mqtt_incoming_publish_cb+0x3c>
    inpub_id = 1;
 8000730:	4b07      	ldr	r3, [pc, #28]	; (8000750 <mqtt_incoming_publish_cb+0x54>)
 8000732:	2201      	movs	r2, #1
 8000734:	601a      	str	r2, [r3, #0]
}
 8000736:	e002      	b.n	800073e <mqtt_incoming_publish_cb+0x42>
    inpub_id = 2;
 8000738:	4b05      	ldr	r3, [pc, #20]	; (8000750 <mqtt_incoming_publish_cb+0x54>)
 800073a:	2202      	movs	r2, #2
 800073c:	601a      	str	r2, [r3, #0]
}
 800073e:	bf00      	nop
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	08016830 	.word	0x08016830
 800074c:	08016864 	.word	0x08016864
 8000750:	200002f0 	.word	0x200002f0

08000754 <mqtt_incoming_data_cb>:

static void mqtt_incoming_data_cb(void *arg, const u8_t *data, u16_t len, u8_t flags)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	4611      	mov	r1, r2
 8000760:	461a      	mov	r2, r3
 8000762:	460b      	mov	r3, r1
 8000764:	80fb      	strh	r3, [r7, #6]
 8000766:	4613      	mov	r3, r2
 8000768:	717b      	strb	r3, [r7, #5]
  printf("Incoming publish payload with length %d, flags %u\n", len, (unsigned int)flags);
 800076a:	88fb      	ldrh	r3, [r7, #6]
 800076c:	797a      	ldrb	r2, [r7, #5]
 800076e:	4619      	mov	r1, r3
 8000770:	4811      	ldr	r0, [pc, #68]	; (80007b8 <mqtt_incoming_data_cb+0x64>)
 8000772:	f014 fddf 	bl	8015334 <iprintf>

  if(flags & MQTT_DATA_FLAG_LAST) {
 8000776:	797b      	ldrb	r3, [r7, #5]
 8000778:	f003 0301 	and.w	r3, r3, #1
 800077c:	2b00      	cmp	r3, #0
 800077e:	d016      	beq.n	80007ae <mqtt_incoming_data_cb+0x5a>
    /* Last fragment of payload received (or whole part if payload fits receive buffer
       See MQTT_VAR_HEADER_BUFFER_LEN)  */

    /* Call function or do action depending on reference, in this case inpub_id */
    if(inpub_id == 0) {
 8000780:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <mqtt_incoming_data_cb+0x68>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d10b      	bne.n	80007a0 <mqtt_incoming_data_cb+0x4c>
      /* Don't trust the publisher, check zero termination */
      if(data[len-1] == 0) {
 8000788:	88fb      	ldrh	r3, [r7, #6]
 800078a:	3b01      	subs	r3, #1
 800078c:	68ba      	ldr	r2, [r7, #8]
 800078e:	4413      	add	r3, r2
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d10b      	bne.n	80007ae <mqtt_incoming_data_cb+0x5a>
        printf("mqtt_incoming_data_cb: %s\n", (const char *)data);
 8000796:	68b9      	ldr	r1, [r7, #8]
 8000798:	4809      	ldr	r0, [pc, #36]	; (80007c0 <mqtt_incoming_data_cb+0x6c>)
 800079a:	f014 fdcb 	bl	8015334 <iprintf>
      printf("mqtt_incoming_data_cb: Ignoring payload...\n");
    }
  } else {
    /* Handle fragmented payload, store in buffer, write to file or whatever */
  }
}
 800079e:	e006      	b.n	80007ae <mqtt_incoming_data_cb+0x5a>
    } else if(inpub_id == 1) {
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <mqtt_incoming_data_cb+0x68>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d002      	beq.n	80007ae <mqtt_incoming_data_cb+0x5a>
      printf("mqtt_incoming_data_cb: Ignoring payload...\n");
 80007a8:	4806      	ldr	r0, [pc, #24]	; (80007c4 <mqtt_incoming_data_cb+0x70>)
 80007aa:	f014 fe49 	bl	8015440 <puts>
}
 80007ae:	bf00      	nop
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	08016874 	.word	0x08016874
 80007bc:	200002f0 	.word	0x200002f0
 80007c0:	080168a8 	.word	0x080168a8
 80007c4:	080168c4 	.word	0x080168c4

080007c8 <mqtt_sub_request_cb>:

static void mqtt_sub_request_cb(void *arg, err_t result)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	460b      	mov	r3, r1
 80007d2:	70fb      	strb	r3, [r7, #3]
  /* Just print the result code here for simplicity,
     normal behaviour would be to take some action if subscribe fails like
     notifying user, retry subscribe or disconnect from server */
  printf("Subscribe result: %d\n", result);
 80007d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80007d8:	4619      	mov	r1, r3
 80007da:	4803      	ldr	r0, [pc, #12]	; (80007e8 <mqtt_sub_request_cb+0x20>)
 80007dc:	f014 fdaa 	bl	8015334 <iprintf>
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	080168f0 	.word	0x080168f0

080007ec <mqtt_connection_cb>:


static void mqtt_connection_cb(mqtt_client_t *client, void *arg, mqtt_connection_status_t status)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b088      	sub	sp, #32
 80007f0:	af02      	add	r7, sp, #8
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	4613      	mov	r3, r2
 80007f8:	80fb      	strh	r3, [r7, #6]
  err_t err;
  if(status == MQTT_CONNECT_ACCEPTED) {
 80007fa:	88fb      	ldrh	r3, [r7, #6]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d11f      	bne.n	8000840 <mqtt_connection_cb+0x54>
    printf("mqtt_connection_cb: Successfully connected\n");
 8000800:	4815      	ldr	r0, [pc, #84]	; (8000858 <mqtt_connection_cb+0x6c>)
 8000802:	f014 fe1d 	bl	8015440 <puts>

    /* Setup callback for incoming publish requests */
    mqtt_set_inpub_callback(client, mqtt_incoming_publish_cb, mqtt_incoming_data_cb, arg);
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	4a14      	ldr	r2, [pc, #80]	; (800085c <mqtt_connection_cb+0x70>)
 800080a:	4915      	ldr	r1, [pc, #84]	; (8000860 <mqtt_connection_cb+0x74>)
 800080c:	68f8      	ldr	r0, [r7, #12]
 800080e:	f009 fac5 	bl	8009d9c <mqtt_set_inpub_callback>

    /* Subscribe to a topic named "subtopic" with QoS level 1, call mqtt_sub_request_cb with result */
    err = mqtt_subscribe(client, "subtopic", 1, mqtt_sub_request_cb, arg);
 8000812:	2301      	movs	r3, #1
 8000814:	9301      	str	r3, [sp, #4]
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	4b12      	ldr	r3, [pc, #72]	; (8000864 <mqtt_connection_cb+0x78>)
 800081c:	2201      	movs	r2, #1
 800081e:	4912      	ldr	r1, [pc, #72]	; (8000868 <mqtt_connection_cb+0x7c>)
 8000820:	68f8      	ldr	r0, [r7, #12]
 8000822:	f009 f9e5 	bl	8009bf0 <mqtt_sub_unsub>
 8000826:	4603      	mov	r3, r0
 8000828:	75fb      	strb	r3, [r7, #23]

    if(err != ERR_OK) {
 800082a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d00e      	beq.n	8000850 <mqtt_connection_cb+0x64>
      printf("mqtt_subscribe return: %d\n", err);
 8000832:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000836:	4619      	mov	r1, r3
 8000838:	480c      	ldr	r0, [pc, #48]	; (800086c <mqtt_connection_cb+0x80>)
 800083a:	f014 fd7b 	bl	8015334 <iprintf>
    printf("mqtt_connection_cb: Disconnected, reason: %d\n", status);

    /* Its more nice to be connected, so try to reconnect */
    example_do_connect(client);
  }
}
 800083e:	e007      	b.n	8000850 <mqtt_connection_cb+0x64>
    printf("mqtt_connection_cb: Disconnected, reason: %d\n", status);
 8000840:	88fb      	ldrh	r3, [r7, #6]
 8000842:	4619      	mov	r1, r3
 8000844:	480a      	ldr	r0, [pc, #40]	; (8000870 <mqtt_connection_cb+0x84>)
 8000846:	f014 fd75 	bl	8015334 <iprintf>
    example_do_connect(client);
 800084a:	68f8      	ldr	r0, [r7, #12]
 800084c:	f000 f812 	bl	8000874 <example_do_connect>
}
 8000850:	bf00      	nop
 8000852:	3718      	adds	r7, #24
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	08016908 	.word	0x08016908
 800085c:	08000755 	.word	0x08000755
 8000860:	080006fd 	.word	0x080006fd
 8000864:	080007c9 	.word	0x080007c9
 8000868:	08016934 	.word	0x08016934
 800086c:	08016940 	.word	0x08016940
 8000870:	0801695c 	.word	0x0801695c

08000874 <example_do_connect>:



void example_do_connect(mqtt_client_t *client)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08c      	sub	sp, #48	; 0x30
 8000878:	af02      	add	r7, sp, #8
 800087a:	6078      	str	r0, [r7, #4]
  struct mqtt_connect_client_info_t ci;
  err_t err;

  /* Setup an empty client info structure */
  memset(&ci, 0, sizeof(ci));
 800087c:	f107 0308 	add.w	r3, r7, #8
 8000880:	221c      	movs	r2, #28
 8000882:	2100      	movs	r1, #0
 8000884:	4618      	mov	r0, r3
 8000886:	f014 fd4d 	bl	8015324 <memset>

  /* Minimal amount of information required is client identifier, so set it here */
  ci.client_id = "lwip_test";
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <example_do_connect+0x54>)
 800088c:	60bb      	str	r3, [r7, #8]
  /* Initiate client and connect to server, if this fails immediately an error code is returned
     otherwise mqtt_connection_cb will be called with connection result after attempting
     to establish a connection with the server.
     For now MQTT version 3.1.1 is always used */

  err = mqtt_client_connect(client, &ip_addr, MQTT_PORT, mqtt_connection_cb, 0, &ci);
 800088e:	f107 0308 	add.w	r3, r7, #8
 8000892:	9301      	str	r3, [sp, #4]
 8000894:	2300      	movs	r3, #0
 8000896:	9300      	str	r3, [sp, #0]
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <example_do_connect+0x58>)
 800089a:	f240 725b 	movw	r2, #1883	; 0x75b
 800089e:	490c      	ldr	r1, [pc, #48]	; (80008d0 <example_do_connect+0x5c>)
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f009 faa9 	bl	8009df8 <mqtt_client_connect>
 80008a6:	4603      	mov	r3, r0
 80008a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27



  if(err != ERR_OK) {
 80008ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d005      	beq.n	80008c0 <example_do_connect+0x4c>
    printf("mqtt_connect return %d\n", err);
 80008b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80008b8:	4619      	mov	r1, r3
 80008ba:	4806      	ldr	r0, [pc, #24]	; (80008d4 <example_do_connect+0x60>)
 80008bc:	f014 fd3a 	bl	8015334 <iprintf>
  }
}
 80008c0:	bf00      	nop
 80008c2:	3728      	adds	r7, #40	; 0x28
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	0801698c 	.word	0x0801698c
 80008cc:	080007ed 	.word	0x080007ed
 80008d0:	2000426c 	.word	0x2000426c
 80008d4:	08016998 	.word	0x08016998

080008d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d8:	b5b0      	push	{r4, r5, r7, lr}
 80008da:	b088      	sub	sp, #32
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008de:	f000 fbde 	bl	800109e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e2:	f000 f81d 	bl	8000920 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e6:	f000 f8df 	bl	8000aa8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80008ea:	f000 f8ad 	bl	8000a48 <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80008ee:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <main+0x40>)
 80008f0:	1d3c      	adds	r4, r7, #4
 80008f2:	461d      	mov	r5, r3
 80008f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	2100      	movs	r1, #0
 8000904:	4618      	mov	r0, r3
 8000906:	f004 ff18 	bl	800573a <osThreadCreate>
 800090a:	4603      	mov	r3, r0
 800090c:	4a03      	ldr	r2, [pc, #12]	; (800091c <main+0x44>)
 800090e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000910:	f004 fefc 	bl	800570c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000914:	e7fe      	b.n	8000914 <main+0x3c>
 8000916:	bf00      	nop
 8000918:	080169b0 	.word	0x080169b0
 800091c:	200041e4 	.word	0x200041e4

08000920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b0b8      	sub	sp, #224	; 0xe0
 8000924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000926:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800092a:	2234      	movs	r2, #52	; 0x34
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f014 fcf8 	bl	8015324 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000934:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000944:	f107 0308 	add.w	r3, r7, #8
 8000948:	2290      	movs	r2, #144	; 0x90
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f014 fce9 	bl	8015324 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000952:	f002 f83b 	bl	80029cc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	4b3a      	ldr	r3, [pc, #232]	; (8000a40 <SystemClock_Config+0x120>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	4a39      	ldr	r2, [pc, #228]	; (8000a40 <SystemClock_Config+0x120>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000960:	6413      	str	r3, [r2, #64]	; 0x40
 8000962:	4b37      	ldr	r3, [pc, #220]	; (8000a40 <SystemClock_Config+0x120>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800096e:	4b35      	ldr	r3, [pc, #212]	; (8000a44 <SystemClock_Config+0x124>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000976:	4a33      	ldr	r2, [pc, #204]	; (8000a44 <SystemClock_Config+0x124>)
 8000978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800097c:	6013      	str	r3, [r2, #0]
 800097e:	4b31      	ldr	r3, [pc, #196]	; (8000a44 <SystemClock_Config+0x124>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800098a:	2302      	movs	r3, #2
 800098c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000990:	2301      	movs	r3, #1
 8000992:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000996:	2310      	movs	r3, #16
 8000998:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099c:	2302      	movs	r3, #2
 800099e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009a2:	2300      	movs	r3, #0
 80009a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009a8:	2308      	movs	r3, #8
 80009aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 80009ae:	2360      	movs	r3, #96	; 0x60
 80009b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009b4:	2302      	movs	r3, #2
 80009b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009ba:	2304      	movs	r3, #4
 80009bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80009c4:	4618      	mov	r0, r3
 80009c6:	f002 f861 	bl	8002a8c <HAL_RCC_OscConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80009d0:	f000 f96c 	bl	8000cac <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009d4:	f002 f80a 	bl	80029ec <HAL_PWREx_EnableOverDrive>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009de:	f000 f965 	bl	8000cac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e2:	230f      	movs	r3, #15
 80009e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e8:	2302      	movs	r3, #2
 80009ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ee:	2300      	movs	r3, #0
 80009f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009fc:	2300      	movs	r3, #0
 80009fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a02:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000a06:	2103      	movs	r1, #3
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f002 faed 	bl	8002fe8 <HAL_RCC_ClockConfig>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000a14:	f000 f94a 	bl	8000cac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a1c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a22:	f107 0308 	add.w	r3, r7, #8
 8000a26:	4618      	mov	r0, r3
 8000a28:	f002 fd12 	bl	8003450 <HAL_RCCEx_PeriphCLKConfig>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <SystemClock_Config+0x116>
  {
    Error_Handler();
 8000a32:	f000 f93b 	bl	8000cac <Error_Handler>
  }
}
 8000a36:	bf00      	nop
 8000a38:	37e0      	adds	r7, #224	; 0xe0
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40007000 	.word	0x40007000

08000a48 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a4e:	4a15      	ldr	r2, [pc, #84]	; (8000aa4 <MX_USART3_UART_Init+0x5c>)
 8000a50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a6e:	220c      	movs	r2, #12
 8000a70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a72:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a78:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a7e:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a8a:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a8c:	f003 fbe8 	bl	8004260 <HAL_UART_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a96:	f000 f909 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200041e8 	.word	0x200041e8
 8000aa4:	40004800 	.word	0x40004800

08000aa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08c      	sub	sp, #48	; 0x30
 8000aac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000abe:	4b55      	ldr	r3, [pc, #340]	; (8000c14 <MX_GPIO_Init+0x16c>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a54      	ldr	r2, [pc, #336]	; (8000c14 <MX_GPIO_Init+0x16c>)
 8000ac4:	f043 0304 	orr.w	r3, r3, #4
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b52      	ldr	r3, [pc, #328]	; (8000c14 <MX_GPIO_Init+0x16c>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0304 	and.w	r3, r3, #4
 8000ad2:	61bb      	str	r3, [r7, #24]
 8000ad4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad6:	4b4f      	ldr	r3, [pc, #316]	; (8000c14 <MX_GPIO_Init+0x16c>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a4e      	ldr	r2, [pc, #312]	; (8000c14 <MX_GPIO_Init+0x16c>)
 8000adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b4c      	ldr	r3, [pc, #304]	; (8000c14 <MX_GPIO_Init+0x16c>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aea:	617b      	str	r3, [r7, #20]
 8000aec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	4b49      	ldr	r3, [pc, #292]	; (8000c14 <MX_GPIO_Init+0x16c>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a48      	ldr	r2, [pc, #288]	; (8000c14 <MX_GPIO_Init+0x16c>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b46      	ldr	r3, [pc, #280]	; (8000c14 <MX_GPIO_Init+0x16c>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b06:	4b43      	ldr	r3, [pc, #268]	; (8000c14 <MX_GPIO_Init+0x16c>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a42      	ldr	r2, [pc, #264]	; (8000c14 <MX_GPIO_Init+0x16c>)
 8000b0c:	f043 0302 	orr.w	r3, r3, #2
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b40      	ldr	r3, [pc, #256]	; (8000c14 <MX_GPIO_Init+0x16c>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0302 	and.w	r3, r3, #2
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b1e:	4b3d      	ldr	r3, [pc, #244]	; (8000c14 <MX_GPIO_Init+0x16c>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a3c      	ldr	r2, [pc, #240]	; (8000c14 <MX_GPIO_Init+0x16c>)
 8000b24:	f043 0308 	orr.w	r3, r3, #8
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b3a      	ldr	r3, [pc, #232]	; (8000c14 <MX_GPIO_Init+0x16c>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0308 	and.w	r3, r3, #8
 8000b32:	60bb      	str	r3, [r7, #8]
 8000b34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b36:	4b37      	ldr	r3, [pc, #220]	; (8000c14 <MX_GPIO_Init+0x16c>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a36      	ldr	r2, [pc, #216]	; (8000c14 <MX_GPIO_Init+0x16c>)
 8000b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b34      	ldr	r3, [pc, #208]	; (8000c14 <MX_GPIO_Init+0x16c>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b54:	4830      	ldr	r0, [pc, #192]	; (8000c18 <MX_GPIO_Init+0x170>)
 8000b56:	f001 ff05 	bl	8002964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2140      	movs	r1, #64	; 0x40
 8000b5e:	482f      	ldr	r0, [pc, #188]	; (8000c1c <MX_GPIO_Init+0x174>)
 8000b60:	f001 ff00 	bl	8002964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b6a:	4b2d      	ldr	r3, [pc, #180]	; (8000c20 <MX_GPIO_Init+0x178>)
 8000b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	4619      	mov	r1, r3
 8000b78:	482a      	ldr	r0, [pc, #168]	; (8000c24 <MX_GPIO_Init+0x17c>)
 8000b7a:	f001 fd47 	bl	800260c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b7e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b84:	2301      	movs	r3, #1
 8000b86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b90:	f107 031c 	add.w	r3, r7, #28
 8000b94:	4619      	mov	r1, r3
 8000b96:	4820      	ldr	r0, [pc, #128]	; (8000c18 <MX_GPIO_Init+0x170>)
 8000b98:	f001 fd38 	bl	800260c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b9c:	2340      	movs	r3, #64	; 0x40
 8000b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bac:	f107 031c 	add.w	r3, r7, #28
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	481a      	ldr	r0, [pc, #104]	; (8000c1c <MX_GPIO_Init+0x174>)
 8000bb4:	f001 fd2a 	bl	800260c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bb8:	2380      	movs	r3, #128	; 0x80
 8000bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bc4:	f107 031c 	add.w	r3, r7, #28
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4814      	ldr	r0, [pc, #80]	; (8000c1c <MX_GPIO_Init+0x174>)
 8000bcc:	f001 fd1e 	bl	800260c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bd0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bde:	2303      	movs	r3, #3
 8000be0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000be2:	230a      	movs	r3, #10
 8000be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be6:	f107 031c 	add.w	r3, r7, #28
 8000bea:	4619      	mov	r1, r3
 8000bec:	480e      	ldr	r0, [pc, #56]	; (8000c28 <MX_GPIO_Init+0x180>)
 8000bee:	f001 fd0d 	bl	800260c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000bf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c00:	f107 031c 	add.w	r3, r7, #28
 8000c04:	4619      	mov	r1, r3
 8000c06:	4808      	ldr	r0, [pc, #32]	; (8000c28 <MX_GPIO_Init+0x180>)
 8000c08:	f001 fd00 	bl	800260c <HAL_GPIO_Init>

}
 8000c0c:	bf00      	nop
 8000c0e:	3730      	adds	r7, #48	; 0x30
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40020400 	.word	0x40020400
 8000c1c:	40021800 	.word	0x40021800
 8000c20:	10110000 	.word	0x10110000
 8000c24:	40020800 	.word	0x40020800
 8000c28:	40020000 	.word	0x40020000

08000c2c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000c34:	f003 ffc0 	bl	8004bb8 <MX_LWIP_Init>

  /* USER CODE BEGIN 5 */
static const char mqtt_server[13] ={'1','9','2','.','1','6','8','.','0','.','1','0','6'};
client = mqtt_client_new();
 8000c38:	f009 f8d4 	bl	8009de4 <mqtt_client_new>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	4a0f      	ldr	r2, [pc, #60]	; (8000c7c <StartDefaultTask+0x50>)
 8000c40:	6013      	str	r3, [r2, #0]
ipaddr_aton(mqtt_server,&ip_addr);
 8000c42:	490f      	ldr	r1, [pc, #60]	; (8000c80 <StartDefaultTask+0x54>)
 8000c44:	480f      	ldr	r0, [pc, #60]	; (8000c84 <StartDefaultTask+0x58>)
 8000c46:	f013 f9c5 	bl	8013fd4 <ip4addr_aton>
  //IP_ADDR4( ip_addr,192,168,0,106);

    if(client != NULL) {
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <StartDefaultTask+0x50>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d004      	beq.n	8000c5c <StartDefaultTask+0x30>
      example_do_connect(client);
 8000c52:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <StartDefaultTask+0x50>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fe0c 	bl	8000874 <example_do_connect>
    }

  /* Infinite loop */
  for(;;)
  {
	  example_publish(client, NULL);
 8000c5c:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <StartDefaultTask+0x50>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff fd00 	bl	8000668 <example_publish>

	  example_do_connect(client);
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <StartDefaultTask+0x50>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fe01 	bl	8000874 <example_do_connect>
	  osDelay(1000);
 8000c72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c76:	f004 fdac 	bl	80057d2 <osDelay>
	  example_publish(client, NULL);
 8000c7a:	e7ef      	b.n	8000c5c <StartDefaultTask+0x30>
 8000c7c:	20004270 	.word	0x20004270
 8000c80:	2000426c 	.word	0x2000426c
 8000c84:	08019d18 	.word	0x08019d18

08000c88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d101      	bne.n	8000c9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c9a:	f000 fa0d 	bl	80010b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40000400 	.word	0x40000400

08000cac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb0:	b672      	cpsid	i
}
 8000cb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <Error_Handler+0x8>
	...

08000cb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <HAL_MspInit+0x4c>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	4a10      	ldr	r2, [pc, #64]	; (8000d04 <HAL_MspInit+0x4c>)
 8000cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <HAL_MspInit+0x4c>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <HAL_MspInit+0x4c>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cda:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <HAL_MspInit+0x4c>)
 8000cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <HAL_MspInit+0x4c>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	210f      	movs	r1, #15
 8000cf2:	f06f 0001 	mvn.w	r0, #1
 8000cf6:	f000 fadb 	bl	80012b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40023800 	.word	0x40023800

08000d08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	; 0x28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a17      	ldr	r2, [pc, #92]	; (8000d84 <HAL_UART_MspInit+0x7c>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d128      	bne.n	8000d7c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d2a:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <HAL_UART_MspInit+0x80>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	4a16      	ldr	r2, [pc, #88]	; (8000d88 <HAL_UART_MspInit+0x80>)
 8000d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d34:	6413      	str	r3, [r2, #64]	; 0x40
 8000d36:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <HAL_UART_MspInit+0x80>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <HAL_UART_MspInit+0x80>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a10      	ldr	r2, [pc, #64]	; (8000d88 <HAL_UART_MspInit+0x80>)
 8000d48:	f043 0308 	orr.w	r3, r3, #8
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <HAL_UART_MspInit+0x80>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0308 	and.w	r3, r3, #8
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
 8000d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d6c:	2307      	movs	r3, #7
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	4805      	ldr	r0, [pc, #20]	; (8000d8c <HAL_UART_MspInit+0x84>)
 8000d78:	f001 fc48 	bl	800260c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d7c:	bf00      	nop
 8000d7e:	3728      	adds	r7, #40	; 0x28
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40004800 	.word	0x40004800
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020c00 	.word	0x40020c00

08000d90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08c      	sub	sp, #48	; 0x30
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8000da0:	2200      	movs	r2, #0
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	201d      	movs	r0, #29
 8000da6:	f000 fa83 	bl	80012b0 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000daa:	201d      	movs	r0, #29
 8000dac:	f000 fa9c 	bl	80012e8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000db0:	4b1f      	ldr	r3, [pc, #124]	; (8000e30 <HAL_InitTick+0xa0>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db4:	4a1e      	ldr	r2, [pc, #120]	; (8000e30 <HAL_InitTick+0xa0>)
 8000db6:	f043 0302 	orr.w	r3, r3, #2
 8000dba:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbc:	4b1c      	ldr	r3, [pc, #112]	; (8000e30 <HAL_InitTick+0xa0>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc0:	f003 0302 	and.w	r3, r3, #2
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dc8:	f107 0210 	add.w	r2, r7, #16
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	4611      	mov	r1, r2
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f002 fb0a 	bl	80033ec <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000dd8:	f002 fae0 	bl	800339c <HAL_RCC_GetPCLK1Freq>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000de4:	4a13      	ldr	r2, [pc, #76]	; (8000e34 <HAL_InitTick+0xa4>)
 8000de6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dea:	0c9b      	lsrs	r3, r3, #18
 8000dec:	3b01      	subs	r3, #1
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_InitTick+0xa8>)
 8000df2:	4a12      	ldr	r2, [pc, #72]	; (8000e3c <HAL_InitTick+0xac>)
 8000df4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000df6:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <HAL_InitTick+0xa8>)
 8000df8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dfc:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000dfe:	4a0e      	ldr	r2, [pc, #56]	; (8000e38 <HAL_InitTick+0xa8>)
 8000e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e02:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <HAL_InitTick+0xa8>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <HAL_InitTick+0xa8>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8000e10:	4809      	ldr	r0, [pc, #36]	; (8000e38 <HAL_InitTick+0xa8>)
 8000e12:	f002 ff45 	bl	8003ca0 <HAL_TIM_Base_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d104      	bne.n	8000e26 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8000e1c:	4806      	ldr	r0, [pc, #24]	; (8000e38 <HAL_InitTick+0xa8>)
 8000e1e:	f002 ffa1 	bl	8003d64 <HAL_TIM_Base_Start_IT>
 8000e22:	4603      	mov	r3, r0
 8000e24:	e000      	b.n	8000e28 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3730      	adds	r7, #48	; 0x30
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40023800 	.word	0x40023800
 8000e34:	431bde83 	.word	0x431bde83
 8000e38:	20004274 	.word	0x20004274
 8000e3c:	40000400 	.word	0x40000400

08000e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <NMI_Handler+0x4>

08000e46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <HardFault_Handler+0x4>

08000e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <MemManage_Handler+0x4>

08000e52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <BusFault_Handler+0x4>

08000e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <UsageFault_Handler+0x4>

08000e5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e70:	4802      	ldr	r0, [pc, #8]	; (8000e7c <TIM3_IRQHandler+0x10>)
 8000e72:	f002 ffef 	bl	8003e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20004274 	.word	0x20004274

08000e80 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000e84:	4802      	ldr	r0, [pc, #8]	; (8000e90 <ETH_IRQHandler+0x10>)
 8000e86:	f000 fe1f 	bl	8001ac8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20005be8 	.word	0x20005be8

08000e94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
	return 1;
 8000e98:	2301      	movs	r3, #1
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <_kill>:

int _kill(int pid, int sig)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000eae:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <_kill+0x20>)
 8000eb0:	2216      	movs	r2, #22
 8000eb2:	601a      	str	r2, [r3, #0]
	return -1;
 8000eb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	2000ab34 	.word	0x2000ab34

08000ec8 <_exit>:

void _exit (int status)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff ffe5 	bl	8000ea4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000eda:	e7fe      	b.n	8000eda <_exit+0x12>

08000edc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	e00a      	b.n	8000f04 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000eee:	f3af 8000 	nop.w
 8000ef2:	4601      	mov	r1, r0
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	1c5a      	adds	r2, r3, #1
 8000ef8:	60ba      	str	r2, [r7, #8]
 8000efa:	b2ca      	uxtb	r2, r1
 8000efc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	3301      	adds	r3, #1
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	697a      	ldr	r2, [r7, #20]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	dbf0      	blt.n	8000eee <_read+0x12>
	}

return len;
 8000f0c:	687b      	ldr	r3, [r7, #4]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b086      	sub	sp, #24
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	60f8      	str	r0, [r7, #12]
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
 8000f26:	e009      	b.n	8000f3c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	1c5a      	adds	r2, r3, #1
 8000f2c:	60ba      	str	r2, [r7, #8]
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	697a      	ldr	r2, [r7, #20]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	dbf1      	blt.n	8000f28 <_write+0x12>
	}
	return len;
 8000f44:	687b      	ldr	r3, [r7, #4]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <_close>:

int _close(int file)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	b083      	sub	sp, #12
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
	return -1;
 8000f56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
 8000f6e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f76:	605a      	str	r2, [r3, #4]
	return 0;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <_isatty>:

int _isatty(int file)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
	return 1;
 8000f8e:	2301      	movs	r3, #1
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
	return 0;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b087      	sub	sp, #28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc0:	4a14      	ldr	r2, [pc, #80]	; (8001014 <_sbrk+0x5c>)
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <_sbrk+0x60>)
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fcc:	4b13      	ldr	r3, [pc, #76]	; (800101c <_sbrk+0x64>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d102      	bne.n	8000fda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd4:	4b11      	ldr	r3, [pc, #68]	; (800101c <_sbrk+0x64>)
 8000fd6:	4a12      	ldr	r2, [pc, #72]	; (8001020 <_sbrk+0x68>)
 8000fd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <_sbrk+0x64>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d205      	bcs.n	8000ff4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000fe8:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <_sbrk+0x6c>)
 8000fea:	220c      	movs	r2, #12
 8000fec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff2:	e009      	b.n	8001008 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ff4:	4b09      	ldr	r3, [pc, #36]	; (800101c <_sbrk+0x64>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ffa:	4b08      	ldr	r3, [pc, #32]	; (800101c <_sbrk+0x64>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	4a06      	ldr	r2, [pc, #24]	; (800101c <_sbrk+0x64>)
 8001004:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001006:	68fb      	ldr	r3, [r7, #12]
}
 8001008:	4618      	mov	r0, r3
 800100a:	371c      	adds	r7, #28
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	20080000 	.word	0x20080000
 8001018:	00000400 	.word	0x00000400
 800101c:	200002f4 	.word	0x200002f4
 8001020:	2000ab48 	.word	0x2000ab48
 8001024:	2000ab34 	.word	0x2000ab34

08001028 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <SystemInit+0x20>)
 800102e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001032:	4a05      	ldr	r2, [pc, #20]	; (8001048 <SystemInit+0x20>)
 8001034:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001038:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800104c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001084 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001050:	480d      	ldr	r0, [pc, #52]	; (8001088 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001052:	490e      	ldr	r1, [pc, #56]	; (800108c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001054:	4a0e      	ldr	r2, [pc, #56]	; (8001090 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001058:	e002      	b.n	8001060 <LoopCopyDataInit>

0800105a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800105c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105e:	3304      	adds	r3, #4

08001060 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001060:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001062:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001064:	d3f9      	bcc.n	800105a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001066:	4a0b      	ldr	r2, [pc, #44]	; (8001094 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001068:	4c0b      	ldr	r4, [pc, #44]	; (8001098 <LoopFillZerobss+0x26>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800106c:	e001      	b.n	8001072 <LoopFillZerobss>

0800106e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001070:	3204      	adds	r2, #4

08001072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001072:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001074:	d3fb      	bcc.n	800106e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001076:	f7ff ffd7 	bl	8001028 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800107a:	f014 f8f9 	bl	8015270 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800107e:	f7ff fc2b 	bl	80008d8 <main>
  bx  lr    
 8001082:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001084:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001088:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800108c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001090:	0801a0cc 	.word	0x0801a0cc
  ldr r2, =_sbss
 8001094:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001098:	2000ab48 	.word	0x2000ab48

0800109c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800109c:	e7fe      	b.n	800109c <ADC_IRQHandler>

0800109e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a2:	2003      	movs	r0, #3
 80010a4:	f000 f8f9 	bl	800129a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010a8:	2000      	movs	r0, #0
 80010aa:	f7ff fe71 	bl	8000d90 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80010ae:	f7ff fe03 	bl	8000cb8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_IncTick+0x20>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_IncTick+0x24>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4413      	add	r3, r2
 80010c8:	4a04      	ldr	r2, [pc, #16]	; (80010dc <HAL_IncTick+0x24>)
 80010ca:	6013      	str	r3, [r2, #0]
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	20000008 	.word	0x20000008
 80010dc:	200042c0 	.word	0x200042c0

080010e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return uwTick;
 80010e4:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <HAL_GetTick+0x14>)
 80010e6:	681b      	ldr	r3, [r3, #0]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	200042c0 	.word	0x200042c0

080010f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001100:	f7ff ffee 	bl	80010e0 <HAL_GetTick>
 8001104:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001110:	d005      	beq.n	800111e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <HAL_Delay+0x44>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	461a      	mov	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4413      	add	r3, r2
 800111c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800111e:	bf00      	nop
 8001120:	f7ff ffde 	bl	80010e0 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	429a      	cmp	r2, r3
 800112e:	d8f7      	bhi.n	8001120 <HAL_Delay+0x28>
  {
  }
}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000008 	.word	0x20000008

08001140 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001150:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <__NVIC_SetPriorityGrouping+0x40>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800115c:	4013      	ands	r3, r2
 800115e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <__NVIC_SetPriorityGrouping+0x44>)
 800116a:	4313      	orrs	r3, r2
 800116c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800116e:	4a04      	ldr	r2, [pc, #16]	; (8001180 <__NVIC_SetPriorityGrouping+0x40>)
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	60d3      	str	r3, [r2, #12]
}
 8001174:	bf00      	nop
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00
 8001184:	05fa0000 	.word	0x05fa0000

08001188 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800118c:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <__NVIC_GetPriorityGrouping+0x18>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	0a1b      	lsrs	r3, r3, #8
 8001192:	f003 0307 	and.w	r3, r3, #7
}
 8001196:	4618      	mov	r0, r3
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	db0b      	blt.n	80011ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	f003 021f 	and.w	r2, r3, #31
 80011bc:	4907      	ldr	r1, [pc, #28]	; (80011dc <__NVIC_EnableIRQ+0x38>)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	095b      	lsrs	r3, r3, #5
 80011c4:	2001      	movs	r0, #1
 80011c6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000e100 	.word	0xe000e100

080011e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	db0a      	blt.n	800120a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	490c      	ldr	r1, [pc, #48]	; (800122c <__NVIC_SetPriority+0x4c>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	0112      	lsls	r2, r2, #4
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	440b      	add	r3, r1
 8001204:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001208:	e00a      	b.n	8001220 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4908      	ldr	r1, [pc, #32]	; (8001230 <__NVIC_SetPriority+0x50>)
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	3b04      	subs	r3, #4
 8001218:	0112      	lsls	r2, r2, #4
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	440b      	add	r3, r1
 800121e:	761a      	strb	r2, [r3, #24]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000e100 	.word	0xe000e100
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001234:	b480      	push	{r7}
 8001236:	b089      	sub	sp, #36	; 0x24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f1c3 0307 	rsb	r3, r3, #7
 800124e:	2b04      	cmp	r3, #4
 8001250:	bf28      	it	cs
 8001252:	2304      	movcs	r3, #4
 8001254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3304      	adds	r3, #4
 800125a:	2b06      	cmp	r3, #6
 800125c:	d902      	bls.n	8001264 <NVIC_EncodePriority+0x30>
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3b03      	subs	r3, #3
 8001262:	e000      	b.n	8001266 <NVIC_EncodePriority+0x32>
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001268:	f04f 32ff 	mov.w	r2, #4294967295
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43da      	mvns	r2, r3
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	401a      	ands	r2, r3
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800127c:	f04f 31ff 	mov.w	r1, #4294967295
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	fa01 f303 	lsl.w	r3, r1, r3
 8001286:	43d9      	mvns	r1, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	4313      	orrs	r3, r2
         );
}
 800128e:	4618      	mov	r0, r3
 8001290:	3724      	adds	r7, #36	; 0x24
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ff4c 	bl	8001140 <__NVIC_SetPriorityGrouping>
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
 80012bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012c2:	f7ff ff61 	bl	8001188 <__NVIC_GetPriorityGrouping>
 80012c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	68b9      	ldr	r1, [r7, #8]
 80012cc:	6978      	ldr	r0, [r7, #20]
 80012ce:	f7ff ffb1 	bl	8001234 <NVIC_EncodePriority>
 80012d2:	4602      	mov	r2, r0
 80012d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d8:	4611      	mov	r1, r2
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff ff80 	bl	80011e0 <__NVIC_SetPriority>
}
 80012e0:	bf00      	nop
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff ff54 	bl	80011a4 <__NVIC_EnableIRQ>
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b088      	sub	sp, #32
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001314:	4ba9      	ldr	r3, [pc, #676]	; (80015bc <HAL_ETH_Init+0x2b8>)
 8001316:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800131c:	2300      	movs	r3, #0
 800131e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e181      	b.n	800162e <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d106      	bne.n	8001344 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f003 fd98 	bl	8004e74 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001344:	4b9e      	ldr	r3, [pc, #632]	; (80015c0 <HAL_ETH_Init+0x2bc>)
 8001346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001348:	4a9d      	ldr	r2, [pc, #628]	; (80015c0 <HAL_ETH_Init+0x2bc>)
 800134a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800134e:	6453      	str	r3, [r2, #68]	; 0x44
 8001350:	4b9b      	ldr	r3, [pc, #620]	; (80015c0 <HAL_ETH_Init+0x2bc>)
 8001352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001354:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800135c:	4b99      	ldr	r3, [pc, #612]	; (80015c4 <HAL_ETH_Init+0x2c0>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	4a98      	ldr	r2, [pc, #608]	; (80015c4 <HAL_ETH_Init+0x2c0>)
 8001362:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001366:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001368:	4b96      	ldr	r3, [pc, #600]	; (80015c4 <HAL_ETH_Init+0x2c0>)
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a1b      	ldr	r3, [r3, #32]
 8001370:	4994      	ldr	r1, [pc, #592]	; (80015c4 <HAL_ETH_Init+0x2c0>)
 8001372:	4313      	orrs	r3, r2
 8001374:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f042 0201 	orr.w	r2, r2, #1
 8001388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800138c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800138e:	f7ff fea7 	bl	80010e0 <HAL_GetTick>
 8001392:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001394:	e011      	b.n	80013ba <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001396:	f7ff fea3 	bl	80010e0 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013a4:	d909      	bls.n	80013ba <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2203      	movs	r2, #3
 80013aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e139      	b.n	800162e <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1e4      	bne.n	8001396 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f023 031c 	bic.w	r3, r3, #28
 80013da:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80013dc:	f001 ffd2 	bl	8003384 <HAL_RCC_GetHCLKFreq>
 80013e0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	4a78      	ldr	r2, [pc, #480]	; (80015c8 <HAL_ETH_Init+0x2c4>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d908      	bls.n	80013fc <HAL_ETH_Init+0xf8>
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	4a77      	ldr	r2, [pc, #476]	; (80015cc <HAL_ETH_Init+0x2c8>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d804      	bhi.n	80013fc <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	f043 0308 	orr.w	r3, r3, #8
 80013f8:	61fb      	str	r3, [r7, #28]
 80013fa:	e027      	b.n	800144c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	4a73      	ldr	r2, [pc, #460]	; (80015cc <HAL_ETH_Init+0x2c8>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d908      	bls.n	8001416 <HAL_ETH_Init+0x112>
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	4a6d      	ldr	r2, [pc, #436]	; (80015bc <HAL_ETH_Init+0x2b8>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d204      	bcs.n	8001416 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	f043 030c 	orr.w	r3, r3, #12
 8001412:	61fb      	str	r3, [r7, #28]
 8001414:	e01a      	b.n	800144c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	4a68      	ldr	r2, [pc, #416]	; (80015bc <HAL_ETH_Init+0x2b8>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d303      	bcc.n	8001426 <HAL_ETH_Init+0x122>
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	4a6b      	ldr	r2, [pc, #428]	; (80015d0 <HAL_ETH_Init+0x2cc>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d911      	bls.n	800144a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	4a69      	ldr	r2, [pc, #420]	; (80015d0 <HAL_ETH_Init+0x2cc>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d908      	bls.n	8001440 <HAL_ETH_Init+0x13c>
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	4a68      	ldr	r2, [pc, #416]	; (80015d4 <HAL_ETH_Init+0x2d0>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d804      	bhi.n	8001440 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	f043 0304 	orr.w	r3, r3, #4
 800143c:	61fb      	str	r3, [r7, #28]
 800143e:	e005      	b.n	800144c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f043 0310 	orr.w	r3, r3, #16
 8001446:	61fb      	str	r3, [r7, #28]
 8001448:	e000      	b.n	800144c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800144a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	69fa      	ldr	r2, [r7, #28]
 8001452:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001454:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001458:	2100      	movs	r1, #0
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f000 fc17 	bl	8001c8e <HAL_ETH_WritePHYRegister>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00b      	beq.n	800147e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800146a:	6939      	ldr	r1, [r7, #16]
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f000 fdcd 	bl	800200c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2201      	movs	r2, #1
 8001476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e0d7      	b.n	800162e <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800147e:	20ff      	movs	r0, #255	; 0xff
 8001480:	f7ff fe3a 	bl	80010f8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 80a5 	beq.w	80015d8 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800148e:	f7ff fe27 	bl	80010e0 <HAL_GetTick>
 8001492:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001494:	f107 030c 	add.w	r3, r7, #12
 8001498:	461a      	mov	r2, r3
 800149a:	2101      	movs	r1, #1
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f000 fb8e 	bl	8001bbe <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80014a2:	f7ff fe1d 	bl	80010e0 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d90f      	bls.n	80014d4 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80014b8:	6939      	ldr	r1, [r7, #16]
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 fda6 	bl	800200c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2201      	movs	r2, #1
 80014c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e0ac      	b.n	800162e <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f003 0304 	and.w	r3, r3, #4
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0da      	beq.n	8001494 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80014de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014e2:	2100      	movs	r1, #0
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f000 fbd2 	bl	8001c8e <HAL_ETH_WritePHYRegister>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d00b      	beq.n	8001508 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80014f4:	6939      	ldr	r1, [r7, #16]
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 fd88 	bl	800200c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001504:	2301      	movs	r3, #1
 8001506:	e092      	b.n	800162e <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001508:	f7ff fdea 	bl	80010e0 <HAL_GetTick>
 800150c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800150e:	f107 030c 	add.w	r3, r7, #12
 8001512:	461a      	mov	r2, r3
 8001514:	2101      	movs	r1, #1
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f000 fb51 	bl	8001bbe <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800151c:	f7ff fde0 	bl	80010e0 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	f241 3288 	movw	r2, #5000	; 0x1388
 800152a:	4293      	cmp	r3, r2
 800152c:	d90f      	bls.n	800154e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001532:	6939      	ldr	r1, [r7, #16]
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f000 fd69 	bl	800200c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2201      	movs	r2, #1
 800153e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e06f      	b.n	800162e <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f003 0320 	and.w	r3, r3, #32
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0da      	beq.n	800150e <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001558:	f107 030c 	add.w	r3, r7, #12
 800155c:	461a      	mov	r2, r3
 800155e:	2110      	movs	r1, #16
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f000 fb2c 	bl	8001bbe <HAL_ETH_ReadPHYRegister>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d00b      	beq.n	8001584 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001570:	6939      	ldr	r1, [r7, #16]
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f000 fd4a 	bl	800200c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001580:	2301      	movs	r3, #1
 8001582:	e054      	b.n	800162e <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f003 0304 	and.w	r3, r3, #4
 800158a:	2b00      	cmp	r3, #0
 800158c:	d004      	beq.n	8001598 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	e002      	b.n	800159e <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d003      	beq.n	80015b0 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	e035      	b.n	800161c <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	e030      	b.n	800161c <HAL_ETH_Init+0x318>
 80015ba:	bf00      	nop
 80015bc:	03938700 	.word	0x03938700
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40013800 	.word	0x40013800
 80015c8:	01312cff 	.word	0x01312cff
 80015cc:	02160ebf 	.word	0x02160ebf
 80015d0:	05f5e0ff 	.word	0x05f5e0ff
 80015d4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	08db      	lsrs	r3, r3, #3
 80015de:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	085b      	lsrs	r3, r3, #1
 80015e6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80015e8:	4313      	orrs	r3, r2
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	461a      	mov	r2, r3
 80015ee:	2100      	movs	r1, #0
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 fb4c 	bl	8001c8e <HAL_ETH_WritePHYRegister>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d00b      	beq.n	8001614 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001600:	6939      	ldr	r1, [r7, #16]
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f000 fd02 	bl	800200c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e00c      	b.n	800162e <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001614:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001618:	f7ff fd6e 	bl	80010f8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800161c:	6939      	ldr	r1, [r7, #16]
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 fcf4 	bl	800200c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2201      	movs	r2, #1
 8001628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3720      	adds	r7, #32
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop

08001638 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001638:	b480      	push	{r7}
 800163a:	b087      	sub	sp, #28
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
 8001644:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001650:	2b01      	cmp	r3, #1
 8001652:	d101      	bne.n	8001658 <HAL_ETH_DMATxDescListInit+0x20>
 8001654:	2302      	movs	r3, #2
 8001656:	e052      	b.n	80016fe <HAL_ETH_DMATxDescListInit+0xc6>
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2202      	movs	r2, #2
 8001664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	68ba      	ldr	r2, [r7, #8]
 800166c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	e030      	b.n	80016d6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	015b      	lsls	r3, r3, #5
 8001678:	68ba      	ldr	r2, [r7, #8]
 800167a:	4413      	add	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001684:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800168c:	fb02 f303 	mul.w	r3, r2, r3
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	4413      	add	r3, r2
 8001694:	461a      	mov	r2, r3
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d105      	bne.n	80016ae <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	3b01      	subs	r3, #1
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d208      	bcs.n	80016ca <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	3301      	adds	r3, #1
 80016bc:	015b      	lsls	r3, r3, #5
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	4413      	add	r3, r2
 80016c2:	461a      	mov	r2, r3
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	60da      	str	r2, [r3, #12]
 80016c8:	e002      	b.n	80016d0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	3301      	adds	r3, #1
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d3ca      	bcc.n	8001674 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6819      	ldr	r1, [r3, #0]
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	f241 0310 	movw	r3, #4112	; 0x1010
 80016e8:	440b      	add	r3, r1
 80016ea:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	371c      	adds	r7, #28
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800170a:	b480      	push	{r7}
 800170c:	b087      	sub	sp, #28
 800170e:	af00      	add	r7, sp, #0
 8001710:	60f8      	str	r0, [r7, #12]
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	607a      	str	r2, [r7, #4]
 8001716:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001722:	2b01      	cmp	r3, #1
 8001724:	d101      	bne.n	800172a <HAL_ETH_DMARxDescListInit+0x20>
 8001726:	2302      	movs	r3, #2
 8001728:	e056      	b.n	80017d8 <HAL_ETH_DMARxDescListInit+0xce>
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2202      	movs	r2, #2
 8001736:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	68ba      	ldr	r2, [r7, #8]
 800173e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
 8001744:	e034      	b.n	80017b0 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	015b      	lsls	r3, r3, #5
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	4413      	add	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001756:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800175e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001766:	fb02 f303 	mul.w	r3, r2, r3
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	4413      	add	r3, r2
 800176e:	461a      	mov	r2, r3
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d105      	bne.n	8001788 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	3b01      	subs	r3, #1
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	429a      	cmp	r2, r3
 8001790:	d208      	bcs.n	80017a4 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	3301      	adds	r3, #1
 8001796:	015b      	lsls	r3, r3, #5
 8001798:	68ba      	ldr	r2, [r7, #8]
 800179a:	4413      	add	r3, r2
 800179c:	461a      	mov	r2, r3
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	e002      	b.n	80017aa <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80017a4:	68ba      	ldr	r2, [r7, #8]
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	3301      	adds	r3, #1
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d3c6      	bcc.n	8001746 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6819      	ldr	r1, [r3, #0]
 80017bc:	68ba      	ldr	r2, [r7, #8]
 80017be:	f241 030c 	movw	r3, #4108	; 0x100c
 80017c2:	440b      	add	r3, r1
 80017c4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2201      	movs	r2, #1
 80017ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	371c      	adds	r7, #28
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b087      	sub	sp, #28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001800:	2b01      	cmp	r3, #1
 8001802:	d101      	bne.n	8001808 <HAL_ETH_TransmitFrame+0x24>
 8001804:	2302      	movs	r3, #2
 8001806:	e0cd      	b.n	80019a4 <HAL_ETH_TransmitFrame+0x1c0>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2202      	movs	r2, #2
 8001814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d109      	bne.n	8001832 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2201      	movs	r2, #1
 8001822:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800182e:	2301      	movs	r3, #1
 8001830:	e0b8      	b.n	80019a4 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	da09      	bge.n	8001850 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2212      	movs	r2, #18
 8001840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e0a9      	b.n	80019a4 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001856:	4293      	cmp	r3, r2
 8001858:	d915      	bls.n	8001886 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	4a54      	ldr	r2, [pc, #336]	; (80019b0 <HAL_ETH_TransmitFrame+0x1cc>)
 800185e:	fba2 2303 	umull	r2, r3, r2, r3
 8001862:	0a9b      	lsrs	r3, r3, #10
 8001864:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	4b51      	ldr	r3, [pc, #324]	; (80019b0 <HAL_ETH_TransmitFrame+0x1cc>)
 800186a:	fba3 1302 	umull	r1, r3, r3, r2
 800186e:	0a9b      	lsrs	r3, r3, #10
 8001870:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001874:	fb01 f303 	mul.w	r3, r1, r3
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d005      	beq.n	800188a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	3301      	adds	r3, #1
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	e001      	b.n	800188a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8001886:	2301      	movs	r3, #1
 8001888:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d11c      	bne.n	80018ca <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800189e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80018aa:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018ba:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	461a      	mov	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80018c8:	e04b      	b.n	8001962 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	e044      	b.n	800195a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018da:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018de:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d107      	bne.n	80018f6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018f4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80018fe:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	3b01      	subs	r3, #1
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	429a      	cmp	r2, r3
 8001908:	d116      	bne.n	8001938 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001914:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001918:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	4a25      	ldr	r2, [pc, #148]	; (80019b4 <HAL_ETH_TransmitFrame+0x1d0>)
 800191e:	fb02 f203 	mul.w	r2, r2, r3
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	4413      	add	r3, r2
 8001926:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800192a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001936:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001942:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001946:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	461a      	mov	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	3301      	adds	r3, #1
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	429a      	cmp	r2, r3
 8001960:	d3b6      	bcc.n	80018d0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	f241 0314 	movw	r3, #4116	; 0x1014
 800196a:	4413      	add	r3, r2
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00d      	beq.n	8001992 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	f241 0314 	movw	r3, #4116	; 0x1014
 800197e:	4413      	add	r3, r2
 8001980:	2204      	movs	r2, #4
 8001982:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	f241 0304 	movw	r3, #4100	; 0x1004
 800198c:	4413      	add	r3, r2
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	371c      	adds	r7, #28
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	ac02b00b 	.word	0xac02b00b
 80019b4:	fffffa0c 	.word	0xfffffa0c

080019b8 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d101      	bne.n	80019d2 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e074      	b.n	8001abc <HAL_ETH_GetReceivedFrame_IT+0x104>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2202      	movs	r2, #2
 80019de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80019e2:	e05a      	b.n	8001a9a <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	3301      	adds	r3, #1
 80019e8:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019f8:	d10d      	bne.n	8001a16 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2201      	movs	r2, #1
 8001a06:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	629a      	str	r2, [r3, #40]	; 0x28
 8001a14:	e041      	b.n	8001a9a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d10b      	bne.n	8001a3c <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a28:	1c5a      	adds	r2, r3, #1
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	461a      	mov	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	629a      	str	r2, [r3, #40]	; 0x28
 8001a3a:	e02e      	b.n	8001a9a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a48:	1c5a      	adds	r2, r3, #1
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d103      	bne.n	8001a5e <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	0c1b      	lsrs	r3, r3, #16
 8001a66:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001a6a:	1f1a      	subs	r2, r3, #4
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a74:	689a      	ldr	r2, [r3, #8]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	461a      	mov	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001a96:	2300      	movs	r3, #0
 8001a98:	e010      	b.n	8001abc <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	db02      	blt.n	8001aaa <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2b03      	cmp	r3, #3
 8001aa8:	d99c      	bls.n	80019e4 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3714      	adds	r7, #20
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	f241 0314 	movw	r3, #4116	; 0x1014
 8001ad8:	4413      	add	r3, r2
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ae0:	2b40      	cmp	r3, #64	; 0x40
 8001ae2:	d112      	bne.n	8001b0a <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f003 fa85 	bl	8004ff4 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	f241 0314 	movw	r3, #4116	; 0x1014
 8001af2:	4413      	add	r3, r2
 8001af4:	2240      	movs	r2, #64	; 0x40
 8001af6:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b08:	e01b      	b.n	8001b42 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001b12:	4413      	add	r3, r2
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d111      	bne.n	8001b42 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 f839 	bl	8001b96 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	f241 0314 	movw	r3, #4116	; 0x1014
 8001b2c:	4413      	add	r3, r2
 8001b2e:	2201      	movs	r2, #1
 8001b30:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	f241 0314 	movw	r3, #4116	; 0x1014
 8001b4a:	4413      	add	r3, r2
 8001b4c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b50:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	f241 0314 	movw	r3, #4116	; 0x1014
 8001b5a:	4413      	add	r3, r2
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b66:	d112      	bne.n	8001b8e <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f81e 	bl	8001baa <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	f241 0314 	movw	r3, #4116	; 0x1014
 8001b76:	4413      	add	r3, r2
 8001b78:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b7c:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b086      	sub	sp, #24
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	60f8      	str	r0, [r7, #12]
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	607a      	str	r2, [r7, #4]
 8001bca:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b82      	cmp	r3, #130	; 0x82
 8001bde:	d101      	bne.n	8001be4 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001be0:	2302      	movs	r3, #2
 8001be2:	e050      	b.n	8001c86 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2282      	movs	r2, #130	; 0x82
 8001be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	f003 031c 	and.w	r3, r3, #28
 8001bfa:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8a1b      	ldrh	r3, [r3, #16]
 8001c00:	02db      	lsls	r3, r3, #11
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	697a      	ldr	r2, [r7, #20]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001c0a:	897b      	ldrh	r3, [r7, #10]
 8001c0c:	019b      	lsls	r3, r3, #6
 8001c0e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f023 0302 	bic.w	r3, r3, #2
 8001c1e:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001c30:	f7ff fa56 	bl	80010e0 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c36:	e015      	b.n	8001c64 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001c38:	f7ff fa52 	bl	80010e0 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c46:	d309      	bcc.n	8001c5c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e014      	b.n	8001c86 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1e4      	bne.n	8001c38 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	695b      	ldr	r3, [r3, #20]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	461a      	mov	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b086      	sub	sp, #24
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	60f8      	str	r0, [r7, #12]
 8001c96:	460b      	mov	r3, r1
 8001c98:	607a      	str	r2, [r7, #4]
 8001c9a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b42      	cmp	r3, #66	; 0x42
 8001cae:	d101      	bne.n	8001cb4 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	e04e      	b.n	8001d52 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2242      	movs	r2, #66	; 0x42
 8001cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f003 031c 	and.w	r3, r3, #28
 8001cca:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	8a1b      	ldrh	r3, [r3, #16]
 8001cd0:	02db      	lsls	r3, r3, #11
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001cda:	897b      	ldrh	r3, [r7, #10]
 8001cdc:	019b      	lsls	r3, r3, #6
 8001cde:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	f043 0302 	orr.w	r3, r3, #2
 8001cee:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d0a:	f7ff f9e9 	bl	80010e0 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d10:	e015      	b.n	8001d3e <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001d12:	f7ff f9e5 	bl	80010e0 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d20:	d309      	bcc.n	8001d36 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e00d      	b.n	8001d52 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1e4      	bne.n	8001d12 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d101      	bne.n	8001d70 <HAL_ETH_Start+0x16>
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	e01f      	b.n	8001db0 <HAL_ETH_Start+0x56>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 fb45 	bl	8002410 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 fb7c 	bl	8002484 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 fc13 	bl	80025b8 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 fbb0 	bl	80024f8 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 fbdd 	bl	8002558 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d101      	bne.n	8001dce <HAL_ETH_Stop+0x16>
 8001dca:	2302      	movs	r3, #2
 8001dcc:	e01f      	b.n	8001e0e <HAL_ETH_Stop+0x56>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2202      	movs	r2, #2
 8001dda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 fba2 	bl	8002528 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 fbcf 	bl	8002588 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 fb67 	bl	80024be <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 fbe1 	bl	80025b8 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 fb27 	bl	800244a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d101      	bne.n	8001e34 <HAL_ETH_ConfigMAC+0x1c>
 8001e30:	2302      	movs	r3, #2
 8001e32:	e0e4      	b.n	8001ffe <HAL_ETH_ConfigMAC+0x1e6>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 80b1 	beq.w	8001fae <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	4b6c      	ldr	r3, [pc, #432]	; (8002008 <HAL_ETH_ConfigMAC+0x1f0>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001e64:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001e6a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001e70:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001e76:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001e7c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001e82:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001e88:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001e8e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001e94:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001e9a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001ea0:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001ea6:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	f7ff f91a 	bl	80010f8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001ed4:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001eda:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001ee0:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001ee6:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001eec:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001ef2:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001efe:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001f00:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f0a:	2001      	movs	r0, #1
 8001f0c:	f7ff f8f4 	bl	80010f8 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001f20:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f2a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f42:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001f48:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001f4e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001f54:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001f5a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001f60:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f78:	2001      	movs	r0, #1
 8001f7a:	f7ff f8bd 	bl	80010f8 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f9e:	2001      	movs	r0, #1
 8001fa0:	f7ff f8aa 	bl	80010f8 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	61da      	str	r2, [r3, #28]
 8001fac:	e01e      	b.n	8001fec <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001fbc:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689a      	ldr	r2, [r3, #8]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fde:	2001      	movs	r0, #1
 8001fe0:	f7ff f88a 	bl	80010f8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	ff20810f 	.word	0xff20810f

0800200c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b0b0      	sub	sp, #192	; 0xc0
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002016:	2300      	movs	r3, #0
 8002018:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d007      	beq.n	8002032 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002028:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002030:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002032:	2300      	movs	r3, #0
 8002034:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002036:	2300      	movs	r3, #0
 8002038:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800203a:	2300      	movs	r3, #0
 800203c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800203e:	2300      	movs	r3, #0
 8002040:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002042:	2300      	movs	r3, #0
 8002044:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002046:	2300      	movs	r3, #0
 8002048:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d103      	bne.n	800205a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002052:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002056:	663b      	str	r3, [r7, #96]	; 0x60
 8002058:	e001      	b.n	800205e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800205a:	2300      	movs	r3, #0
 800205c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800205e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002062:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002064:	2300      	movs	r3, #0
 8002066:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002068:	2300      	movs	r3, #0
 800206a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800206c:	2300      	movs	r3, #0
 800206e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002070:	2300      	movs	r3, #0
 8002072:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002074:	2300      	movs	r3, #0
 8002076:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002078:	2340      	movs	r3, #64	; 0x40
 800207a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800207c:	2300      	movs	r3, #0
 800207e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002082:	2300      	movs	r3, #0
 8002084:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002088:	2300      	movs	r3, #0
 800208a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800208e:	2300      	movs	r3, #0
 8002090:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002094:	2300      	movs	r3, #0
 8002096:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 800209a:	2300      	movs	r3, #0
 800209c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80020a0:	2300      	movs	r3, #0
 80020a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80020ac:	2380      	movs	r3, #128	; 0x80
 80020ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80020b2:	2300      	movs	r3, #0
 80020b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80020b8:	2300      	movs	r3, #0
 80020ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80020be:	2300      	movs	r3, #0
 80020c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80020c4:	2300      	movs	r3, #0
 80020c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80020ca:	2300      	movs	r3, #0
 80020cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80020d0:	2300      	movs	r3, #0
 80020d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80020e0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020e4:	4bab      	ldr	r3, [pc, #684]	; (8002394 <ETH_MACDMAConfig+0x388>)
 80020e6:	4013      	ands	r3, r2
 80020e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80020ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80020ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80020f0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80020f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80020f4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80020f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80020f8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80020fe:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002100:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002102:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002104:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002106:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800210c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800210e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002110:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002112:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002114:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002116:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002118:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800211a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800211c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800211e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002120:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002122:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002126:	4313      	orrs	r3, r2
 8002128:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002134:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002140:	2001      	movs	r0, #1
 8002142:	f7fe ffd9 	bl	80010f8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800214e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002150:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002152:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002154:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002156:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002158:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800215a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800215e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002160:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002164:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002166:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800216a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800216c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002170:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002174:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800217c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800217e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800218a:	2001      	movs	r0, #1
 800218c:	f7fe ffb4 	bl	80010f8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002198:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80021a2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80021ac:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80021b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021bc:	f64f 7341 	movw	r3, #65345	; 0xff41
 80021c0:	4013      	ands	r3, r2
 80021c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80021c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021ca:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80021cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80021d0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80021d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80021d6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80021d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80021dc:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80021de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80021e2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80021e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80021e8:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80021ea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021ee:	4313      	orrs	r3, r2
 80021f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021fc:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002208:	2001      	movs	r0, #1
 800220a:	f7fe ff75 	bl	80010f8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002216:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002218:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800221c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002232:	2001      	movs	r0, #1
 8002234:	f7fe ff60 	bl	80010f8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002240:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002242:	2300      	movs	r3, #0
 8002244:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002246:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800224a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800224c:	2300      	movs	r3, #0
 800224e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002250:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002254:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002256:	2300      	movs	r3, #0
 8002258:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800225a:	2300      	movs	r3, #0
 800225c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800225e:	2300      	movs	r3, #0
 8002260:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002262:	2300      	movs	r3, #0
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002266:	2304      	movs	r3, #4
 8002268:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800226a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800226e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002270:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002274:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002276:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800227a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800227c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002280:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002282:	2380      	movs	r3, #128	; 0x80
 8002284:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002286:	2300      	movs	r3, #0
 8002288:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800228a:	2300      	movs	r3, #0
 800228c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	f241 0318 	movw	r3, #4120	; 0x1018
 8002296:	4413      	add	r3, r2
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800229e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022a2:	4b3d      	ldr	r3, [pc, #244]	; (8002398 <ETH_MACDMAConfig+0x38c>)
 80022a4:	4013      	ands	r3, r2
 80022a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80022aa:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80022ac:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80022ae:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80022b0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80022b2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80022b4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80022b6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80022b8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80022ba:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80022bc:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80022be:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80022c0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80022c2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80022c6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80022c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80022ca:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80022cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022d0:	4313      	orrs	r3, r2
 80022d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	f241 0318 	movw	r3, #4120	; 0x1018
 80022de:	4413      	add	r3, r2
 80022e0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022e4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	f241 0318 	movw	r3, #4120	; 0x1018
 80022ee:	4413      	add	r3, r2
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022f6:	2001      	movs	r0, #1
 80022f8:	f7fe fefe 	bl	80010f8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	f241 0318 	movw	r3, #4120	; 0x1018
 8002304:	4413      	add	r3, r2
 8002306:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800230a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800230c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800230e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002310:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002314:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002318:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800231a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800231c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800231e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002320:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002322:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002326:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002334:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002344:	2001      	movs	r0, #1
 8002346:	f7fe fed7 	bl	80010f8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002352:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002356:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d10d      	bne.n	800237c <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	f241 031c 	movw	r3, #4124	; 0x101c
 8002368:	4413      	add	r3, r2
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6811      	ldr	r1, [r2, #0]
 8002370:	4a0a      	ldr	r2, [pc, #40]	; (800239c <ETH_MACDMAConfig+0x390>)
 8002372:	431a      	orrs	r2, r3
 8002374:	f241 031c 	movw	r3, #4124	; 0x101c
 8002378:	440b      	add	r3, r1
 800237a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	461a      	mov	r2, r3
 8002382:	2100      	movs	r1, #0
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 f80b 	bl	80023a0 <ETH_MACAddressConfig>
}
 800238a:	bf00      	nop
 800238c:	37c0      	adds	r7, #192	; 0xc0
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	ff20810f 	.word	0xff20810f
 8002398:	f8de3f23 	.word	0xf8de3f23
 800239c:	00010040 	.word	0x00010040

080023a0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b087      	sub	sp, #28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3305      	adds	r3, #5
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	021b      	lsls	r3, r3, #8
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	3204      	adds	r2, #4
 80023b8:	7812      	ldrb	r2, [r2, #0]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	4b11      	ldr	r3, [pc, #68]	; (8002408 <ETH_MACAddressConfig+0x68>)
 80023c2:	4413      	add	r3, r2
 80023c4:	461a      	mov	r2, r3
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	3303      	adds	r3, #3
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	061a      	lsls	r2, r3, #24
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3302      	adds	r3, #2
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	041b      	lsls	r3, r3, #16
 80023da:	431a      	orrs	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3301      	adds	r3, #1
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	021b      	lsls	r3, r3, #8
 80023e4:	4313      	orrs	r3, r2
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	7812      	ldrb	r2, [r2, #0]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	4b06      	ldr	r3, [pc, #24]	; (800240c <ETH_MACAddressConfig+0x6c>)
 80023f2:	4413      	add	r3, r2
 80023f4:	461a      	mov	r2, r3
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	6013      	str	r3, [r2, #0]
}
 80023fa:	bf00      	nop
 80023fc:	371c      	adds	r7, #28
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40028040 	.word	0x40028040
 800240c:	40028044 	.word	0x40028044

08002410 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002418:	2300      	movs	r3, #0
 800241a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f042 0208 	orr.w	r2, r2, #8
 800242a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002434:	2001      	movs	r0, #1
 8002436:	f7fe fe5f 	bl	80010f8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	601a      	str	r2, [r3, #0]
}
 8002442:	bf00      	nop
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800244a:	b580      	push	{r7, lr}
 800244c:	b084      	sub	sp, #16
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002452:	2300      	movs	r3, #0
 8002454:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 0208 	bic.w	r2, r2, #8
 8002464:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800246e:	2001      	movs	r0, #1
 8002470:	f7fe fe42 	bl	80010f8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	601a      	str	r2, [r3, #0]
}
 800247c:	bf00      	nop
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800248c:	2300      	movs	r3, #0
 800248e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 0204 	orr.w	r2, r2, #4
 800249e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024a8:	2001      	movs	r0, #1
 80024aa:	f7fe fe25 	bl	80010f8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	601a      	str	r2, [r3, #0]
}
 80024b6:	bf00      	nop
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80024be:	b580      	push	{r7, lr}
 80024c0:	b084      	sub	sp, #16
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 0204 	bic.w	r2, r2, #4
 80024d8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024e2:	2001      	movs	r0, #1
 80024e4:	f7fe fe08 	bl	80010f8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	601a      	str	r2, [r3, #0]
}
 80024f0:	bf00      	nop
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	f241 0318 	movw	r3, #4120	; 0x1018
 8002508:	4413      	add	r3, r2
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6811      	ldr	r1, [r2, #0]
 8002510:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002514:	f241 0318 	movw	r3, #4120	; 0x1018
 8002518:	440b      	add	r3, r1
 800251a:	601a      	str	r2, [r3, #0]
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	f241 0318 	movw	r3, #4120	; 0x1018
 8002538:	4413      	add	r3, r2
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6811      	ldr	r1, [r2, #0]
 8002540:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002544:	f241 0318 	movw	r3, #4120	; 0x1018
 8002548:	440b      	add	r3, r1
 800254a:	601a      	str	r2, [r3, #0]
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	f241 0318 	movw	r3, #4120	; 0x1018
 8002568:	4413      	add	r3, r2
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6811      	ldr	r1, [r2, #0]
 8002570:	f043 0202 	orr.w	r2, r3, #2
 8002574:	f241 0318 	movw	r3, #4120	; 0x1018
 8002578:	440b      	add	r3, r1
 800257a:	601a      	str	r2, [r3, #0]
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	f241 0318 	movw	r3, #4120	; 0x1018
 8002598:	4413      	add	r3, r2
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6811      	ldr	r1, [r2, #0]
 80025a0:	f023 0202 	bic.w	r2, r3, #2
 80025a4:	f241 0318 	movw	r3, #4120	; 0x1018
 80025a8:	440b      	add	r3, r1
 80025aa:	601a      	str	r2, [r3, #0]
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	f241 0318 	movw	r3, #4120	; 0x1018
 80025cc:	4413      	add	r3, r2
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6811      	ldr	r1, [r2, #0]
 80025d4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80025d8:	f241 0318 	movw	r3, #4120	; 0x1018
 80025dc:	440b      	add	r3, r1
 80025de:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	f241 0318 	movw	r3, #4120	; 0x1018
 80025e8:	4413      	add	r3, r2
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025ee:	2001      	movs	r0, #1
 80025f0:	f7fe fd82 	bl	80010f8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6819      	ldr	r1, [r3, #0]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	f241 0318 	movw	r3, #4120	; 0x1018
 80025fe:	440b      	add	r3, r1
 8002600:	601a      	str	r2, [r3, #0]
}
 8002602:	bf00      	nop
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800260c:	b480      	push	{r7}
 800260e:	b089      	sub	sp, #36	; 0x24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800261e:	2300      	movs	r3, #0
 8002620:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002622:	2300      	movs	r3, #0
 8002624:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002626:	2300      	movs	r3, #0
 8002628:	61fb      	str	r3, [r7, #28]
 800262a:	e175      	b.n	8002918 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800262c:	2201      	movs	r2, #1
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	4013      	ands	r3, r2
 800263e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	429a      	cmp	r2, r3
 8002646:	f040 8164 	bne.w	8002912 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d00b      	beq.n	800266a <HAL_GPIO_Init+0x5e>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b02      	cmp	r3, #2
 8002658:	d007      	beq.n	800266a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800265e:	2b11      	cmp	r3, #17
 8002660:	d003      	beq.n	800266a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b12      	cmp	r3, #18
 8002668:	d130      	bne.n	80026cc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	2203      	movs	r2, #3
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	43db      	mvns	r3, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4013      	ands	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4313      	orrs	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026a0:	2201      	movs	r2, #1
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	091b      	lsrs	r3, r3, #4
 80026b6:	f003 0201 	and.w	r2, r3, #1
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	2203      	movs	r2, #3
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b02      	cmp	r3, #2
 8002702:	d003      	beq.n	800270c <HAL_GPIO_Init+0x100>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b12      	cmp	r3, #18
 800270a:	d123      	bne.n	8002754 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	08da      	lsrs	r2, r3, #3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3208      	adds	r2, #8
 8002714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	220f      	movs	r2, #15
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	43db      	mvns	r3, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4013      	ands	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	691a      	ldr	r2, [r3, #16]
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	08da      	lsrs	r2, r3, #3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3208      	adds	r2, #8
 800274e:	69b9      	ldr	r1, [r7, #24]
 8002750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	2203      	movs	r2, #3
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f003 0203 	and.w	r2, r3, #3
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 80be 	beq.w	8002912 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002796:	4b66      	ldr	r3, [pc, #408]	; (8002930 <HAL_GPIO_Init+0x324>)
 8002798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279a:	4a65      	ldr	r2, [pc, #404]	; (8002930 <HAL_GPIO_Init+0x324>)
 800279c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027a0:	6453      	str	r3, [r2, #68]	; 0x44
 80027a2:	4b63      	ldr	r3, [pc, #396]	; (8002930 <HAL_GPIO_Init+0x324>)
 80027a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80027ae:	4a61      	ldr	r2, [pc, #388]	; (8002934 <HAL_GPIO_Init+0x328>)
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	089b      	lsrs	r3, r3, #2
 80027b4:	3302      	adds	r3, #2
 80027b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	220f      	movs	r2, #15
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	43db      	mvns	r3, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4013      	ands	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a58      	ldr	r2, [pc, #352]	; (8002938 <HAL_GPIO_Init+0x32c>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d037      	beq.n	800284a <HAL_GPIO_Init+0x23e>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a57      	ldr	r2, [pc, #348]	; (800293c <HAL_GPIO_Init+0x330>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d031      	beq.n	8002846 <HAL_GPIO_Init+0x23a>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a56      	ldr	r2, [pc, #344]	; (8002940 <HAL_GPIO_Init+0x334>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d02b      	beq.n	8002842 <HAL_GPIO_Init+0x236>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a55      	ldr	r2, [pc, #340]	; (8002944 <HAL_GPIO_Init+0x338>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d025      	beq.n	800283e <HAL_GPIO_Init+0x232>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a54      	ldr	r2, [pc, #336]	; (8002948 <HAL_GPIO_Init+0x33c>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d01f      	beq.n	800283a <HAL_GPIO_Init+0x22e>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a53      	ldr	r2, [pc, #332]	; (800294c <HAL_GPIO_Init+0x340>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d019      	beq.n	8002836 <HAL_GPIO_Init+0x22a>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a52      	ldr	r2, [pc, #328]	; (8002950 <HAL_GPIO_Init+0x344>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d013      	beq.n	8002832 <HAL_GPIO_Init+0x226>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a51      	ldr	r2, [pc, #324]	; (8002954 <HAL_GPIO_Init+0x348>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d00d      	beq.n	800282e <HAL_GPIO_Init+0x222>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a50      	ldr	r2, [pc, #320]	; (8002958 <HAL_GPIO_Init+0x34c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d007      	beq.n	800282a <HAL_GPIO_Init+0x21e>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a4f      	ldr	r2, [pc, #316]	; (800295c <HAL_GPIO_Init+0x350>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d101      	bne.n	8002826 <HAL_GPIO_Init+0x21a>
 8002822:	2309      	movs	r3, #9
 8002824:	e012      	b.n	800284c <HAL_GPIO_Init+0x240>
 8002826:	230a      	movs	r3, #10
 8002828:	e010      	b.n	800284c <HAL_GPIO_Init+0x240>
 800282a:	2308      	movs	r3, #8
 800282c:	e00e      	b.n	800284c <HAL_GPIO_Init+0x240>
 800282e:	2307      	movs	r3, #7
 8002830:	e00c      	b.n	800284c <HAL_GPIO_Init+0x240>
 8002832:	2306      	movs	r3, #6
 8002834:	e00a      	b.n	800284c <HAL_GPIO_Init+0x240>
 8002836:	2305      	movs	r3, #5
 8002838:	e008      	b.n	800284c <HAL_GPIO_Init+0x240>
 800283a:	2304      	movs	r3, #4
 800283c:	e006      	b.n	800284c <HAL_GPIO_Init+0x240>
 800283e:	2303      	movs	r3, #3
 8002840:	e004      	b.n	800284c <HAL_GPIO_Init+0x240>
 8002842:	2302      	movs	r3, #2
 8002844:	e002      	b.n	800284c <HAL_GPIO_Init+0x240>
 8002846:	2301      	movs	r3, #1
 8002848:	e000      	b.n	800284c <HAL_GPIO_Init+0x240>
 800284a:	2300      	movs	r3, #0
 800284c:	69fa      	ldr	r2, [r7, #28]
 800284e:	f002 0203 	and.w	r2, r2, #3
 8002852:	0092      	lsls	r2, r2, #2
 8002854:	4093      	lsls	r3, r2
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4313      	orrs	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800285c:	4935      	ldr	r1, [pc, #212]	; (8002934 <HAL_GPIO_Init+0x328>)
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	089b      	lsrs	r3, r3, #2
 8002862:	3302      	adds	r3, #2
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800286a:	4b3d      	ldr	r3, [pc, #244]	; (8002960 <HAL_GPIO_Init+0x354>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	43db      	mvns	r3, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4013      	ands	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	4313      	orrs	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800288e:	4a34      	ldr	r2, [pc, #208]	; (8002960 <HAL_GPIO_Init+0x354>)
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002894:	4b32      	ldr	r3, [pc, #200]	; (8002960 <HAL_GPIO_Init+0x354>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	43db      	mvns	r3, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4013      	ands	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028b8:	4a29      	ldr	r2, [pc, #164]	; (8002960 <HAL_GPIO_Init+0x354>)
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028be:	4b28      	ldr	r3, [pc, #160]	; (8002960 <HAL_GPIO_Init+0x354>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	43db      	mvns	r3, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4013      	ands	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	4313      	orrs	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028e2:	4a1f      	ldr	r2, [pc, #124]	; (8002960 <HAL_GPIO_Init+0x354>)
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028e8:	4b1d      	ldr	r3, [pc, #116]	; (8002960 <HAL_GPIO_Init+0x354>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	43db      	mvns	r3, r3
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4013      	ands	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d003      	beq.n	800290c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	4313      	orrs	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800290c:	4a14      	ldr	r2, [pc, #80]	; (8002960 <HAL_GPIO_Init+0x354>)
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	3301      	adds	r3, #1
 8002916:	61fb      	str	r3, [r7, #28]
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	2b0f      	cmp	r3, #15
 800291c:	f67f ae86 	bls.w	800262c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002920:	bf00      	nop
 8002922:	bf00      	nop
 8002924:	3724      	adds	r7, #36	; 0x24
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	40023800 	.word	0x40023800
 8002934:	40013800 	.word	0x40013800
 8002938:	40020000 	.word	0x40020000
 800293c:	40020400 	.word	0x40020400
 8002940:	40020800 	.word	0x40020800
 8002944:	40020c00 	.word	0x40020c00
 8002948:	40021000 	.word	0x40021000
 800294c:	40021400 	.word	0x40021400
 8002950:	40021800 	.word	0x40021800
 8002954:	40021c00 	.word	0x40021c00
 8002958:	40022000 	.word	0x40022000
 800295c:	40022400 	.word	0x40022400
 8002960:	40013c00 	.word	0x40013c00

08002964 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	807b      	strh	r3, [r7, #2]
 8002970:	4613      	mov	r3, r2
 8002972:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002974:	787b      	ldrb	r3, [r7, #1]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800297a:	887a      	ldrh	r2, [r7, #2]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002980:	e003      	b.n	800298a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002982:	887b      	ldrh	r3, [r7, #2]
 8002984:	041a      	lsls	r2, r3, #16
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	619a      	str	r2, [r3, #24]
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002996:	b480      	push	{r7}
 8002998:	b085      	sub	sp, #20
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	460b      	mov	r3, r1
 80029a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029a8:	887a      	ldrh	r2, [r7, #2]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	4013      	ands	r3, r2
 80029ae:	041a      	lsls	r2, r3, #16
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	43d9      	mvns	r1, r3
 80029b4:	887b      	ldrh	r3, [r7, #2]
 80029b6:	400b      	ands	r3, r1
 80029b8:	431a      	orrs	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	619a      	str	r2, [r3, #24]
}
 80029be:	bf00      	nop
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
	...

080029cc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029d0:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a04      	ldr	r2, [pc, #16]	; (80029e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029da:	6013      	str	r3, [r2, #0]
}
 80029dc:	bf00      	nop
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40007000 	.word	0x40007000

080029ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80029f2:	2300      	movs	r3, #0
 80029f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80029f6:	4b23      	ldr	r3, [pc, #140]	; (8002a84 <HAL_PWREx_EnableOverDrive+0x98>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	4a22      	ldr	r2, [pc, #136]	; (8002a84 <HAL_PWREx_EnableOverDrive+0x98>)
 80029fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a00:	6413      	str	r3, [r2, #64]	; 0x40
 8002a02:	4b20      	ldr	r3, [pc, #128]	; (8002a84 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0a:	603b      	str	r3, [r7, #0]
 8002a0c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a0e:	4b1e      	ldr	r3, [pc, #120]	; (8002a88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a1d      	ldr	r2, [pc, #116]	; (8002a88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a18:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a1a:	f7fe fb61 	bl	80010e0 <HAL_GetTick>
 8002a1e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a20:	e009      	b.n	8002a36 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a22:	f7fe fb5d 	bl	80010e0 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a30:	d901      	bls.n	8002a36 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e022      	b.n	8002a7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a36:	4b14      	ldr	r3, [pc, #80]	; (8002a88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a42:	d1ee      	bne.n	8002a22 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002a44:	4b10      	ldr	r3, [pc, #64]	; (8002a88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a0f      	ldr	r2, [pc, #60]	; (8002a88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a4e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a50:	f7fe fb46 	bl	80010e0 <HAL_GetTick>
 8002a54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a56:	e009      	b.n	8002a6c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a58:	f7fe fb42 	bl	80010e0 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a66:	d901      	bls.n	8002a6c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e007      	b.n	8002a7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a6c:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a78:	d1ee      	bne.n	8002a58 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40023800 	.word	0x40023800
 8002a88:	40007000 	.word	0x40007000

08002a8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002a94:	2300      	movs	r3, #0
 8002a96:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e29b      	b.n	8002fda <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 8087 	beq.w	8002bbe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ab0:	4b96      	ldr	r3, [pc, #600]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 030c 	and.w	r3, r3, #12
 8002ab8:	2b04      	cmp	r3, #4
 8002aba:	d00c      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002abc:	4b93      	ldr	r3, [pc, #588]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 030c 	and.w	r3, r3, #12
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	d112      	bne.n	8002aee <HAL_RCC_OscConfig+0x62>
 8002ac8:	4b90      	ldr	r3, [pc, #576]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ad0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ad4:	d10b      	bne.n	8002aee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad6:	4b8d      	ldr	r3, [pc, #564]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d06c      	beq.n	8002bbc <HAL_RCC_OscConfig+0x130>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d168      	bne.n	8002bbc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e275      	b.n	8002fda <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af6:	d106      	bne.n	8002b06 <HAL_RCC_OscConfig+0x7a>
 8002af8:	4b84      	ldr	r3, [pc, #528]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a83      	ldr	r2, [pc, #524]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b02:	6013      	str	r3, [r2, #0]
 8002b04:	e02e      	b.n	8002b64 <HAL_RCC_OscConfig+0xd8>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10c      	bne.n	8002b28 <HAL_RCC_OscConfig+0x9c>
 8002b0e:	4b7f      	ldr	r3, [pc, #508]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a7e      	ldr	r2, [pc, #504]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002b14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	4b7c      	ldr	r3, [pc, #496]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a7b      	ldr	r2, [pc, #492]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002b20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	e01d      	b.n	8002b64 <HAL_RCC_OscConfig+0xd8>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b30:	d10c      	bne.n	8002b4c <HAL_RCC_OscConfig+0xc0>
 8002b32:	4b76      	ldr	r3, [pc, #472]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a75      	ldr	r2, [pc, #468]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002b38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	4b73      	ldr	r3, [pc, #460]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a72      	ldr	r2, [pc, #456]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	e00b      	b.n	8002b64 <HAL_RCC_OscConfig+0xd8>
 8002b4c:	4b6f      	ldr	r3, [pc, #444]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a6e      	ldr	r2, [pc, #440]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b56:	6013      	str	r3, [r2, #0]
 8002b58:	4b6c      	ldr	r3, [pc, #432]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a6b      	ldr	r2, [pc, #428]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002b5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d013      	beq.n	8002b94 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6c:	f7fe fab8 	bl	80010e0 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b74:	f7fe fab4 	bl	80010e0 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b64      	cmp	r3, #100	; 0x64
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e229      	b.n	8002fda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b86:	4b61      	ldr	r3, [pc, #388]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0f0      	beq.n	8002b74 <HAL_RCC_OscConfig+0xe8>
 8002b92:	e014      	b.n	8002bbe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b94:	f7fe faa4 	bl	80010e0 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b9c:	f7fe faa0 	bl	80010e0 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b64      	cmp	r3, #100	; 0x64
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e215      	b.n	8002fda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bae:	4b57      	ldr	r3, [pc, #348]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f0      	bne.n	8002b9c <HAL_RCC_OscConfig+0x110>
 8002bba:	e000      	b.n	8002bbe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d069      	beq.n	8002c9e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bca:	4b50      	ldr	r3, [pc, #320]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 030c 	and.w	r3, r3, #12
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00b      	beq.n	8002bee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bd6:	4b4d      	ldr	r3, [pc, #308]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 030c 	and.w	r3, r3, #12
 8002bde:	2b08      	cmp	r3, #8
 8002be0:	d11c      	bne.n	8002c1c <HAL_RCC_OscConfig+0x190>
 8002be2:	4b4a      	ldr	r3, [pc, #296]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d116      	bne.n	8002c1c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bee:	4b47      	ldr	r3, [pc, #284]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d005      	beq.n	8002c06 <HAL_RCC_OscConfig+0x17a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d001      	beq.n	8002c06 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e1e9      	b.n	8002fda <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c06:	4b41      	ldr	r3, [pc, #260]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	493d      	ldr	r1, [pc, #244]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c1a:	e040      	b.n	8002c9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d023      	beq.n	8002c6c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c24:	4b39      	ldr	r3, [pc, #228]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a38      	ldr	r2, [pc, #224]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002c2a:	f043 0301 	orr.w	r3, r3, #1
 8002c2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c30:	f7fe fa56 	bl	80010e0 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c38:	f7fe fa52 	bl	80010e0 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e1c7      	b.n	8002fda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4a:	4b30      	ldr	r3, [pc, #192]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c56:	4b2d      	ldr	r3, [pc, #180]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	4929      	ldr	r1, [pc, #164]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	600b      	str	r3, [r1, #0]
 8002c6a:	e018      	b.n	8002c9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c6c:	4b27      	ldr	r3, [pc, #156]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a26      	ldr	r2, [pc, #152]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002c72:	f023 0301 	bic.w	r3, r3, #1
 8002c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c78:	f7fe fa32 	bl	80010e0 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c80:	f7fe fa2e 	bl	80010e0 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e1a3      	b.n	8002fda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c92:	4b1e      	ldr	r3, [pc, #120]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d038      	beq.n	8002d1c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d019      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cb2:	4b16      	ldr	r3, [pc, #88]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002cb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cb6:	4a15      	ldr	r2, [pc, #84]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002cb8:	f043 0301 	orr.w	r3, r3, #1
 8002cbc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cbe:	f7fe fa0f 	bl	80010e0 <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cc6:	f7fe fa0b 	bl	80010e0 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e180      	b.n	8002fda <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0f0      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x23a>
 8002ce4:	e01a      	b.n	8002d1c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ce6:	4b09      	ldr	r3, [pc, #36]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cea:	4a08      	ldr	r2, [pc, #32]	; (8002d0c <HAL_RCC_OscConfig+0x280>)
 8002cec:	f023 0301 	bic.w	r3, r3, #1
 8002cf0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf2:	f7fe f9f5 	bl	80010e0 <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cf8:	e00a      	b.n	8002d10 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cfa:	f7fe f9f1 	bl	80010e0 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d903      	bls.n	8002d10 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e166      	b.n	8002fda <HAL_RCC_OscConfig+0x54e>
 8002d0c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d10:	4b92      	ldr	r3, [pc, #584]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1ee      	bne.n	8002cfa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 80a4 	beq.w	8002e72 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d2a:	4b8c      	ldr	r3, [pc, #560]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10d      	bne.n	8002d52 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d36:	4b89      	ldr	r3, [pc, #548]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	4a88      	ldr	r2, [pc, #544]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d40:	6413      	str	r3, [r2, #64]	; 0x40
 8002d42:	4b86      	ldr	r3, [pc, #536]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	60bb      	str	r3, [r7, #8]
 8002d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d52:	4b83      	ldr	r3, [pc, #524]	; (8002f60 <HAL_RCC_OscConfig+0x4d4>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d118      	bne.n	8002d90 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002d5e:	4b80      	ldr	r3, [pc, #512]	; (8002f60 <HAL_RCC_OscConfig+0x4d4>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a7f      	ldr	r2, [pc, #508]	; (8002f60 <HAL_RCC_OscConfig+0x4d4>)
 8002d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d6a:	f7fe f9b9 	bl	80010e0 <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d72:	f7fe f9b5 	bl	80010e0 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b64      	cmp	r3, #100	; 0x64
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e12a      	b.n	8002fda <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d84:	4b76      	ldr	r3, [pc, #472]	; (8002f60 <HAL_RCC_OscConfig+0x4d4>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0f0      	beq.n	8002d72 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d106      	bne.n	8002da6 <HAL_RCC_OscConfig+0x31a>
 8002d98:	4b70      	ldr	r3, [pc, #448]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9c:	4a6f      	ldr	r2, [pc, #444]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002d9e:	f043 0301 	orr.w	r3, r3, #1
 8002da2:	6713      	str	r3, [r2, #112]	; 0x70
 8002da4:	e02d      	b.n	8002e02 <HAL_RCC_OscConfig+0x376>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10c      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x33c>
 8002dae:	4b6b      	ldr	r3, [pc, #428]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db2:	4a6a      	ldr	r2, [pc, #424]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002db4:	f023 0301 	bic.w	r3, r3, #1
 8002db8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dba:	4b68      	ldr	r3, [pc, #416]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbe:	4a67      	ldr	r2, [pc, #412]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002dc0:	f023 0304 	bic.w	r3, r3, #4
 8002dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc6:	e01c      	b.n	8002e02 <HAL_RCC_OscConfig+0x376>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	2b05      	cmp	r3, #5
 8002dce:	d10c      	bne.n	8002dea <HAL_RCC_OscConfig+0x35e>
 8002dd0:	4b62      	ldr	r3, [pc, #392]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd4:	4a61      	ldr	r2, [pc, #388]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002dd6:	f043 0304 	orr.w	r3, r3, #4
 8002dda:	6713      	str	r3, [r2, #112]	; 0x70
 8002ddc:	4b5f      	ldr	r3, [pc, #380]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de0:	4a5e      	ldr	r2, [pc, #376]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002de2:	f043 0301 	orr.w	r3, r3, #1
 8002de6:	6713      	str	r3, [r2, #112]	; 0x70
 8002de8:	e00b      	b.n	8002e02 <HAL_RCC_OscConfig+0x376>
 8002dea:	4b5c      	ldr	r3, [pc, #368]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dee:	4a5b      	ldr	r2, [pc, #364]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002df0:	f023 0301 	bic.w	r3, r3, #1
 8002df4:	6713      	str	r3, [r2, #112]	; 0x70
 8002df6:	4b59      	ldr	r3, [pc, #356]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfa:	4a58      	ldr	r2, [pc, #352]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002dfc:	f023 0304 	bic.w	r3, r3, #4
 8002e00:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d015      	beq.n	8002e36 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0a:	f7fe f969 	bl	80010e0 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e10:	e00a      	b.n	8002e28 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e12:	f7fe f965 	bl	80010e0 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e0d8      	b.n	8002fda <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e28:	4b4c      	ldr	r3, [pc, #304]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0ee      	beq.n	8002e12 <HAL_RCC_OscConfig+0x386>
 8002e34:	e014      	b.n	8002e60 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e36:	f7fe f953 	bl	80010e0 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e3c:	e00a      	b.n	8002e54 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e3e:	f7fe f94f 	bl	80010e0 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e0c2      	b.n	8002fda <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e54:	4b41      	ldr	r3, [pc, #260]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1ee      	bne.n	8002e3e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e60:	7dfb      	ldrb	r3, [r7, #23]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d105      	bne.n	8002e72 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e66:	4b3d      	ldr	r3, [pc, #244]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	4a3c      	ldr	r2, [pc, #240]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002e6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e70:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f000 80ae 	beq.w	8002fd8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e7c:	4b37      	ldr	r3, [pc, #220]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f003 030c 	and.w	r3, r3, #12
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d06d      	beq.n	8002f64 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d14b      	bne.n	8002f28 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e90:	4b32      	ldr	r3, [pc, #200]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a31      	ldr	r2, [pc, #196]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002e96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9c:	f7fe f920 	bl	80010e0 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea4:	f7fe f91c 	bl	80010e0 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e091      	b.n	8002fda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb6:	4b29      	ldr	r3, [pc, #164]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1f0      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69da      	ldr	r2, [r3, #28]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	019b      	lsls	r3, r3, #6
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed8:	085b      	lsrs	r3, r3, #1
 8002eda:	3b01      	subs	r3, #1
 8002edc:	041b      	lsls	r3, r3, #16
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee4:	061b      	lsls	r3, r3, #24
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eec:	071b      	lsls	r3, r3, #28
 8002eee:	491b      	ldr	r1, [pc, #108]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ef4:	4b19      	ldr	r3, [pc, #100]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a18      	ldr	r2, [pc, #96]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002efa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002efe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f00:	f7fe f8ee 	bl	80010e0 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f08:	f7fe f8ea 	bl	80010e0 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e05f      	b.n	8002fda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f1a:	4b10      	ldr	r3, [pc, #64]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCC_OscConfig+0x47c>
 8002f26:	e057      	b.n	8002fd8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f28:	4b0c      	ldr	r3, [pc, #48]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a0b      	ldr	r2, [pc, #44]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002f2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f34:	f7fe f8d4 	bl	80010e0 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f3c:	f7fe f8d0 	bl	80010e0 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e045      	b.n	8002fda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f4e:	4b03      	ldr	r3, [pc, #12]	; (8002f5c <HAL_RCC_OscConfig+0x4d0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f0      	bne.n	8002f3c <HAL_RCC_OscConfig+0x4b0>
 8002f5a:	e03d      	b.n	8002fd8 <HAL_RCC_OscConfig+0x54c>
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002f64:	4b1f      	ldr	r3, [pc, #124]	; (8002fe4 <HAL_RCC_OscConfig+0x558>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d030      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d129      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d122      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f94:	4013      	ands	r3, r2
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f9a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d119      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002faa:	085b      	lsrs	r3, r3, #1
 8002fac:	3b01      	subs	r3, #1
 8002fae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d10f      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d107      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d001      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e000      	b.n	8002fda <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40023800 	.word	0x40023800

08002fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e0d0      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003000:	4b6a      	ldr	r3, [pc, #424]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 030f 	and.w	r3, r3, #15
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	429a      	cmp	r2, r3
 800300c:	d910      	bls.n	8003030 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300e:	4b67      	ldr	r3, [pc, #412]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f023 020f 	bic.w	r2, r3, #15
 8003016:	4965      	ldr	r1, [pc, #404]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	4313      	orrs	r3, r2
 800301c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800301e:	4b63      	ldr	r3, [pc, #396]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	429a      	cmp	r2, r3
 800302a:	d001      	beq.n	8003030 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e0b8      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d020      	beq.n	800307e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b00      	cmp	r3, #0
 8003046:	d005      	beq.n	8003054 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003048:	4b59      	ldr	r3, [pc, #356]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	4a58      	ldr	r2, [pc, #352]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 800304e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003052:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0308 	and.w	r3, r3, #8
 800305c:	2b00      	cmp	r3, #0
 800305e:	d005      	beq.n	800306c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003060:	4b53      	ldr	r3, [pc, #332]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	4a52      	ldr	r2, [pc, #328]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003066:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800306a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800306c:	4b50      	ldr	r3, [pc, #320]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	494d      	ldr	r1, [pc, #308]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 800307a:	4313      	orrs	r3, r2
 800307c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d040      	beq.n	800310c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d107      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003092:	4b47      	ldr	r3, [pc, #284]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d115      	bne.n	80030ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e07f      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d107      	bne.n	80030ba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030aa:	4b41      	ldr	r3, [pc, #260]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d109      	bne.n	80030ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e073      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ba:	4b3d      	ldr	r3, [pc, #244]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e06b      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030ca:	4b39      	ldr	r3, [pc, #228]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f023 0203 	bic.w	r2, r3, #3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	4936      	ldr	r1, [pc, #216]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030dc:	f7fe f800 	bl	80010e0 <HAL_GetTick>
 80030e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030e2:	e00a      	b.n	80030fa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e4:	f7fd fffc 	bl	80010e0 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e053      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030fa:	4b2d      	ldr	r3, [pc, #180]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 020c 	and.w	r2, r3, #12
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	429a      	cmp	r2, r3
 800310a:	d1eb      	bne.n	80030e4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800310c:	4b27      	ldr	r3, [pc, #156]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 030f 	and.w	r3, r3, #15
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	429a      	cmp	r2, r3
 8003118:	d210      	bcs.n	800313c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311a:	4b24      	ldr	r3, [pc, #144]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f023 020f 	bic.w	r2, r3, #15
 8003122:	4922      	ldr	r1, [pc, #136]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	4313      	orrs	r3, r2
 8003128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800312a:	4b20      	ldr	r3, [pc, #128]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	429a      	cmp	r2, r3
 8003136:	d001      	beq.n	800313c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e032      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b00      	cmp	r3, #0
 8003146:	d008      	beq.n	800315a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003148:	4b19      	ldr	r3, [pc, #100]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	4916      	ldr	r1, [pc, #88]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003156:	4313      	orrs	r3, r2
 8003158:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	2b00      	cmp	r3, #0
 8003164:	d009      	beq.n	800317a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003166:	4b12      	ldr	r3, [pc, #72]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	490e      	ldr	r1, [pc, #56]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003176:	4313      	orrs	r3, r2
 8003178:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800317a:	f000 f821 	bl	80031c0 <HAL_RCC_GetSysClockFreq>
 800317e:	4602      	mov	r2, r0
 8003180:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	091b      	lsrs	r3, r3, #4
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	490a      	ldr	r1, [pc, #40]	; (80031b4 <HAL_RCC_ClockConfig+0x1cc>)
 800318c:	5ccb      	ldrb	r3, [r1, r3]
 800318e:	fa22 f303 	lsr.w	r3, r2, r3
 8003192:	4a09      	ldr	r2, [pc, #36]	; (80031b8 <HAL_RCC_ClockConfig+0x1d0>)
 8003194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003196:	4b09      	ldr	r3, [pc, #36]	; (80031bc <HAL_RCC_ClockConfig+0x1d4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4618      	mov	r0, r3
 800319c:	f7fd fdf8 	bl	8000d90 <HAL_InitTick>

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40023c00 	.word	0x40023c00
 80031b0:	40023800 	.word	0x40023800
 80031b4:	08019d28 	.word	0x08019d28
 80031b8:	20000000 	.word	0x20000000
 80031bc:	20000004 	.word	0x20000004

080031c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80031c4:	b084      	sub	sp, #16
 80031c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80031c8:	2300      	movs	r3, #0
 80031ca:	607b      	str	r3, [r7, #4]
 80031cc:	2300      	movs	r3, #0
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	2300      	movs	r3, #0
 80031d2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80031d4:	2300      	movs	r3, #0
 80031d6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031d8:	4b67      	ldr	r3, [pc, #412]	; (8003378 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 030c 	and.w	r3, r3, #12
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d00d      	beq.n	8003200 <HAL_RCC_GetSysClockFreq+0x40>
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	f200 80bd 	bhi.w	8003364 <HAL_RCC_GetSysClockFreq+0x1a4>
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d002      	beq.n	80031f4 <HAL_RCC_GetSysClockFreq+0x34>
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d003      	beq.n	80031fa <HAL_RCC_GetSysClockFreq+0x3a>
 80031f2:	e0b7      	b.n	8003364 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031f4:	4b61      	ldr	r3, [pc, #388]	; (800337c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80031f6:	60bb      	str	r3, [r7, #8]
      break;
 80031f8:	e0b7      	b.n	800336a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031fa:	4b61      	ldr	r3, [pc, #388]	; (8003380 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80031fc:	60bb      	str	r3, [r7, #8]
      break;
 80031fe:	e0b4      	b.n	800336a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003200:	4b5d      	ldr	r3, [pc, #372]	; (8003378 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003208:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800320a:	4b5b      	ldr	r3, [pc, #364]	; (8003378 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d04d      	beq.n	80032b2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003216:	4b58      	ldr	r3, [pc, #352]	; (8003378 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	099b      	lsrs	r3, r3, #6
 800321c:	461a      	mov	r2, r3
 800321e:	f04f 0300 	mov.w	r3, #0
 8003222:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003226:	f04f 0100 	mov.w	r1, #0
 800322a:	ea02 0800 	and.w	r8, r2, r0
 800322e:	ea03 0901 	and.w	r9, r3, r1
 8003232:	4640      	mov	r0, r8
 8003234:	4649      	mov	r1, r9
 8003236:	f04f 0200 	mov.w	r2, #0
 800323a:	f04f 0300 	mov.w	r3, #0
 800323e:	014b      	lsls	r3, r1, #5
 8003240:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003244:	0142      	lsls	r2, r0, #5
 8003246:	4610      	mov	r0, r2
 8003248:	4619      	mov	r1, r3
 800324a:	ebb0 0008 	subs.w	r0, r0, r8
 800324e:	eb61 0109 	sbc.w	r1, r1, r9
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	018b      	lsls	r3, r1, #6
 800325c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003260:	0182      	lsls	r2, r0, #6
 8003262:	1a12      	subs	r2, r2, r0
 8003264:	eb63 0301 	sbc.w	r3, r3, r1
 8003268:	f04f 0000 	mov.w	r0, #0
 800326c:	f04f 0100 	mov.w	r1, #0
 8003270:	00d9      	lsls	r1, r3, #3
 8003272:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003276:	00d0      	lsls	r0, r2, #3
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	eb12 0208 	adds.w	r2, r2, r8
 8003280:	eb43 0309 	adc.w	r3, r3, r9
 8003284:	f04f 0000 	mov.w	r0, #0
 8003288:	f04f 0100 	mov.w	r1, #0
 800328c:	0259      	lsls	r1, r3, #9
 800328e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003292:	0250      	lsls	r0, r2, #9
 8003294:	4602      	mov	r2, r0
 8003296:	460b      	mov	r3, r1
 8003298:	4610      	mov	r0, r2
 800329a:	4619      	mov	r1, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	461a      	mov	r2, r3
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	f7fd f834 	bl	8000310 <__aeabi_uldivmod>
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	4613      	mov	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]
 80032b0:	e04a      	b.n	8003348 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032b2:	4b31      	ldr	r3, [pc, #196]	; (8003378 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	099b      	lsrs	r3, r3, #6
 80032b8:	461a      	mov	r2, r3
 80032ba:	f04f 0300 	mov.w	r3, #0
 80032be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80032c2:	f04f 0100 	mov.w	r1, #0
 80032c6:	ea02 0400 	and.w	r4, r2, r0
 80032ca:	ea03 0501 	and.w	r5, r3, r1
 80032ce:	4620      	mov	r0, r4
 80032d0:	4629      	mov	r1, r5
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	f04f 0300 	mov.w	r3, #0
 80032da:	014b      	lsls	r3, r1, #5
 80032dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032e0:	0142      	lsls	r2, r0, #5
 80032e2:	4610      	mov	r0, r2
 80032e4:	4619      	mov	r1, r3
 80032e6:	1b00      	subs	r0, r0, r4
 80032e8:	eb61 0105 	sbc.w	r1, r1, r5
 80032ec:	f04f 0200 	mov.w	r2, #0
 80032f0:	f04f 0300 	mov.w	r3, #0
 80032f4:	018b      	lsls	r3, r1, #6
 80032f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032fa:	0182      	lsls	r2, r0, #6
 80032fc:	1a12      	subs	r2, r2, r0
 80032fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003302:	f04f 0000 	mov.w	r0, #0
 8003306:	f04f 0100 	mov.w	r1, #0
 800330a:	00d9      	lsls	r1, r3, #3
 800330c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003310:	00d0      	lsls	r0, r2, #3
 8003312:	4602      	mov	r2, r0
 8003314:	460b      	mov	r3, r1
 8003316:	1912      	adds	r2, r2, r4
 8003318:	eb45 0303 	adc.w	r3, r5, r3
 800331c:	f04f 0000 	mov.w	r0, #0
 8003320:	f04f 0100 	mov.w	r1, #0
 8003324:	0299      	lsls	r1, r3, #10
 8003326:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800332a:	0290      	lsls	r0, r2, #10
 800332c:	4602      	mov	r2, r0
 800332e:	460b      	mov	r3, r1
 8003330:	4610      	mov	r0, r2
 8003332:	4619      	mov	r1, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	461a      	mov	r2, r3
 8003338:	f04f 0300 	mov.w	r3, #0
 800333c:	f7fc ffe8 	bl	8000310 <__aeabi_uldivmod>
 8003340:	4602      	mov	r2, r0
 8003342:	460b      	mov	r3, r1
 8003344:	4613      	mov	r3, r2
 8003346:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003348:	4b0b      	ldr	r3, [pc, #44]	; (8003378 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	0c1b      	lsrs	r3, r3, #16
 800334e:	f003 0303 	and.w	r3, r3, #3
 8003352:	3301      	adds	r3, #1
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003360:	60bb      	str	r3, [r7, #8]
      break;
 8003362:	e002      	b.n	800336a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003364:	4b05      	ldr	r3, [pc, #20]	; (800337c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003366:	60bb      	str	r3, [r7, #8]
      break;
 8003368:	bf00      	nop
    }
  }
  return sysclockfreq;
 800336a:	68bb      	ldr	r3, [r7, #8]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003376:	bf00      	nop
 8003378:	40023800 	.word	0x40023800
 800337c:	00f42400 	.word	0x00f42400
 8003380:	007a1200 	.word	0x007a1200

08003384 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003388:	4b03      	ldr	r3, [pc, #12]	; (8003398 <HAL_RCC_GetHCLKFreq+0x14>)
 800338a:	681b      	ldr	r3, [r3, #0]
}
 800338c:	4618      	mov	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	20000000 	.word	0x20000000

0800339c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033a0:	f7ff fff0 	bl	8003384 <HAL_RCC_GetHCLKFreq>
 80033a4:	4602      	mov	r2, r0
 80033a6:	4b05      	ldr	r3, [pc, #20]	; (80033bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	0a9b      	lsrs	r3, r3, #10
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	4903      	ldr	r1, [pc, #12]	; (80033c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033b2:	5ccb      	ldrb	r3, [r1, r3]
 80033b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40023800 	.word	0x40023800
 80033c0:	08019d38 	.word	0x08019d38

080033c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033c8:	f7ff ffdc 	bl	8003384 <HAL_RCC_GetHCLKFreq>
 80033cc:	4602      	mov	r2, r0
 80033ce:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	0b5b      	lsrs	r3, r3, #13
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	4903      	ldr	r1, [pc, #12]	; (80033e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033da:	5ccb      	ldrb	r3, [r1, r3]
 80033dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40023800 	.word	0x40023800
 80033e8:	08019d38 	.word	0x08019d38

080033ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	220f      	movs	r2, #15
 80033fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80033fc:	4b12      	ldr	r3, [pc, #72]	; (8003448 <HAL_RCC_GetClockConfig+0x5c>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 0203 	and.w	r2, r3, #3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003408:	4b0f      	ldr	r3, [pc, #60]	; (8003448 <HAL_RCC_GetClockConfig+0x5c>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003414:	4b0c      	ldr	r3, [pc, #48]	; (8003448 <HAL_RCC_GetClockConfig+0x5c>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003420:	4b09      	ldr	r3, [pc, #36]	; (8003448 <HAL_RCC_GetClockConfig+0x5c>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	08db      	lsrs	r3, r3, #3
 8003426:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800342e:	4b07      	ldr	r3, [pc, #28]	; (800344c <HAL_RCC_GetClockConfig+0x60>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 020f 	and.w	r2, r3, #15
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	601a      	str	r2, [r3, #0]
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40023800 	.word	0x40023800
 800344c:	40023c00 	.word	0x40023c00

08003450 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b088      	sub	sp, #32
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003458:	2300      	movs	r3, #0
 800345a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800345c:	2300      	movs	r3, #0
 800345e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003460:	2300      	movs	r3, #0
 8003462:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003464:	2300      	movs	r3, #0
 8003466:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003468:	2300      	movs	r3, #0
 800346a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b00      	cmp	r3, #0
 8003476:	d012      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003478:	4b69      	ldr	r3, [pc, #420]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	4a68      	ldr	r2, [pc, #416]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800347e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003482:	6093      	str	r3, [r2, #8]
 8003484:	4b66      	ldr	r3, [pc, #408]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800348c:	4964      	ldr	r1, [pc, #400]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800348e:	4313      	orrs	r3, r2
 8003490:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800349a:	2301      	movs	r3, #1
 800349c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d017      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034aa:	4b5d      	ldr	r3, [pc, #372]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b8:	4959      	ldr	r1, [pc, #356]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034c8:	d101      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80034ca:	2301      	movs	r3, #1
 80034cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80034d6:	2301      	movs	r3, #1
 80034d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d017      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034e6:	4b4e      	ldr	r3, [pc, #312]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f4:	494a      	ldr	r1, [pc, #296]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003500:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003504:	d101      	bne.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003506:	2301      	movs	r3, #1
 8003508:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003512:	2301      	movs	r3, #1
 8003514:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003522:	2301      	movs	r3, #1
 8003524:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0320 	and.w	r3, r3, #32
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 808b 	beq.w	800364a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003534:	4b3a      	ldr	r3, [pc, #232]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	4a39      	ldr	r2, [pc, #228]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800353a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800353e:	6413      	str	r3, [r2, #64]	; 0x40
 8003540:	4b37      	ldr	r3, [pc, #220]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003548:	60bb      	str	r3, [r7, #8]
 800354a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800354c:	4b35      	ldr	r3, [pc, #212]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a34      	ldr	r2, [pc, #208]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003556:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003558:	f7fd fdc2 	bl	80010e0 <HAL_GetTick>
 800355c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800355e:	e008      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003560:	f7fd fdbe 	bl	80010e0 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b64      	cmp	r3, #100	; 0x64
 800356c:	d901      	bls.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e38f      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003572:	4b2c      	ldr	r3, [pc, #176]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0f0      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800357e:	4b28      	ldr	r3, [pc, #160]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003586:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d035      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	429a      	cmp	r2, r3
 800359a:	d02e      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800359c:	4b20      	ldr	r3, [pc, #128]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800359e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035a6:	4b1e      	ldr	r3, [pc, #120]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035aa:	4a1d      	ldr	r2, [pc, #116]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035b2:	4b1b      	ldr	r3, [pc, #108]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b6:	4a1a      	ldr	r2, [pc, #104]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80035be:	4a18      	ldr	r2, [pc, #96]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80035c4:	4b16      	ldr	r3, [pc, #88]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d114      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d0:	f7fd fd86 	bl	80010e0 <HAL_GetTick>
 80035d4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d6:	e00a      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035d8:	f7fd fd82 	bl	80010e0 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d901      	bls.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e351      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ee:	4b0c      	ldr	r3, [pc, #48]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d0ee      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003602:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003606:	d111      	bne.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003608:	4b05      	ldr	r3, [pc, #20]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003614:	4b04      	ldr	r3, [pc, #16]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003616:	400b      	ands	r3, r1
 8003618:	4901      	ldr	r1, [pc, #4]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800361a:	4313      	orrs	r3, r2
 800361c:	608b      	str	r3, [r1, #8]
 800361e:	e00b      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003620:	40023800 	.word	0x40023800
 8003624:	40007000 	.word	0x40007000
 8003628:	0ffffcff 	.word	0x0ffffcff
 800362c:	4bb3      	ldr	r3, [pc, #716]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	4ab2      	ldr	r2, [pc, #712]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003632:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003636:	6093      	str	r3, [r2, #8]
 8003638:	4bb0      	ldr	r3, [pc, #704]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800363a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003644:	49ad      	ldr	r1, [pc, #692]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003646:	4313      	orrs	r3, r2
 8003648:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0310 	and.w	r3, r3, #16
 8003652:	2b00      	cmp	r3, #0
 8003654:	d010      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003656:	4ba9      	ldr	r3, [pc, #676]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003658:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800365c:	4aa7      	ldr	r2, [pc, #668]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800365e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003662:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003666:	4ba5      	ldr	r3, [pc, #660]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003668:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003670:	49a2      	ldr	r1, [pc, #648]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003672:	4313      	orrs	r3, r2
 8003674:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00a      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003684:	4b9d      	ldr	r3, [pc, #628]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003692:	499a      	ldr	r1, [pc, #616]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003694:	4313      	orrs	r3, r2
 8003696:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00a      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036a6:	4b95      	ldr	r3, [pc, #596]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036b4:	4991      	ldr	r1, [pc, #580]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00a      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036c8:	4b8c      	ldr	r3, [pc, #560]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036d6:	4989      	ldr	r1, [pc, #548]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00a      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036ea:	4b84      	ldr	r3, [pc, #528]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f8:	4980      	ldr	r1, [pc, #512]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00a      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800370c:	4b7b      	ldr	r3, [pc, #492]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800370e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003712:	f023 0203 	bic.w	r2, r3, #3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371a:	4978      	ldr	r1, [pc, #480]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00a      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800372e:	4b73      	ldr	r3, [pc, #460]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003734:	f023 020c 	bic.w	r2, r3, #12
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800373c:	496f      	ldr	r1, [pc, #444]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800373e:	4313      	orrs	r3, r2
 8003740:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00a      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003750:	4b6a      	ldr	r3, [pc, #424]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003756:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800375e:	4967      	ldr	r1, [pc, #412]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003760:	4313      	orrs	r3, r2
 8003762:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00a      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003772:	4b62      	ldr	r3, [pc, #392]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003778:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003780:	495e      	ldr	r1, [pc, #376]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003782:	4313      	orrs	r3, r2
 8003784:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00a      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003794:	4b59      	ldr	r3, [pc, #356]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a2:	4956      	ldr	r1, [pc, #344]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80037b6:	4b51      	ldr	r3, [pc, #324]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037bc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c4:	494d      	ldr	r1, [pc, #308]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00a      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80037d8:	4b48      	ldr	r3, [pc, #288]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e6:	4945      	ldr	r1, [pc, #276]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00a      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80037fa:	4b40      	ldr	r3, [pc, #256]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003800:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003808:	493c      	ldr	r1, [pc, #240]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800380a:	4313      	orrs	r3, r2
 800380c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00a      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800381c:	4b37      	ldr	r3, [pc, #220]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800381e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003822:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800382a:	4934      	ldr	r1, [pc, #208]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800382c:	4313      	orrs	r3, r2
 800382e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d011      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800383e:	4b2f      	ldr	r3, [pc, #188]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003844:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800384c:	492b      	ldr	r1, [pc, #172]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800384e:	4313      	orrs	r3, r2
 8003850:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003858:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800385c:	d101      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800385e:	2301      	movs	r3, #1
 8003860:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0308 	and.w	r3, r3, #8
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800386e:	2301      	movs	r3, #1
 8003870:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00a      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800387e:	4b1f      	ldr	r3, [pc, #124]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003884:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800388c:	491b      	ldr	r1, [pc, #108]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800388e:	4313      	orrs	r3, r2
 8003890:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00b      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038a0:	4b16      	ldr	r3, [pc, #88]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038b0:	4912      	ldr	r1, [pc, #72]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00b      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80038c4:	4b0d      	ldr	r3, [pc, #52]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ca:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038d4:	4909      	ldr	r1, [pc, #36]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00f      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038e8:	4b04      	ldr	r3, [pc, #16]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038ee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f8:	e002      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80038fa:	bf00      	nop
 80038fc:	40023800 	.word	0x40023800
 8003900:	4986      	ldr	r1, [pc, #536]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003902:	4313      	orrs	r3, r2
 8003904:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00b      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003914:	4b81      	ldr	r3, [pc, #516]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003916:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800391a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003924:	497d      	ldr	r1, [pc, #500]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003926:	4313      	orrs	r3, r2
 8003928:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d006      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 80d6 	beq.w	8003aec <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003940:	4b76      	ldr	r3, [pc, #472]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a75      	ldr	r2, [pc, #468]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003946:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800394a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800394c:	f7fd fbc8 	bl	80010e0 <HAL_GetTick>
 8003950:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003952:	e008      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003954:	f7fd fbc4 	bl	80010e0 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b64      	cmp	r3, #100	; 0x64
 8003960:	d901      	bls.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e195      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003966:	4b6d      	ldr	r3, [pc, #436]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1f0      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d021      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003982:	2b00      	cmp	r3, #0
 8003984:	d11d      	bne.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003986:	4b65      	ldr	r3, [pc, #404]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003988:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800398c:	0c1b      	lsrs	r3, r3, #16
 800398e:	f003 0303 	and.w	r3, r3, #3
 8003992:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003994:	4b61      	ldr	r3, [pc, #388]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800399a:	0e1b      	lsrs	r3, r3, #24
 800399c:	f003 030f 	and.w	r3, r3, #15
 80039a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	019a      	lsls	r2, r3, #6
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	041b      	lsls	r3, r3, #16
 80039ac:	431a      	orrs	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	061b      	lsls	r3, r3, #24
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	071b      	lsls	r3, r3, #28
 80039ba:	4958      	ldr	r1, [pc, #352]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d004      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039d6:	d00a      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d02e      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039ec:	d129      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80039ee:	4b4b      	ldr	r3, [pc, #300]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039f4:	0c1b      	lsrs	r3, r3, #16
 80039f6:	f003 0303 	and.w	r3, r3, #3
 80039fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80039fc:	4b47      	ldr	r3, [pc, #284]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a02:	0f1b      	lsrs	r3, r3, #28
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	019a      	lsls	r2, r3, #6
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	041b      	lsls	r3, r3, #16
 8003a14:	431a      	orrs	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	061b      	lsls	r3, r3, #24
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	071b      	lsls	r3, r3, #28
 8003a22:	493e      	ldr	r1, [pc, #248]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a2a:	4b3c      	ldr	r3, [pc, #240]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a30:	f023 021f 	bic.w	r2, r3, #31
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	4938      	ldr	r1, [pc, #224]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d01d      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a4e:	4b33      	ldr	r3, [pc, #204]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a54:	0e1b      	lsrs	r3, r3, #24
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a5c:	4b2f      	ldr	r3, [pc, #188]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a62:	0f1b      	lsrs	r3, r3, #28
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	019a      	lsls	r2, r3, #6
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	041b      	lsls	r3, r3, #16
 8003a76:	431a      	orrs	r2, r3
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	061b      	lsls	r3, r3, #24
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	071b      	lsls	r3, r3, #28
 8003a82:	4926      	ldr	r1, [pc, #152]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d011      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	019a      	lsls	r2, r3, #6
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	041b      	lsls	r3, r3, #16
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	061b      	lsls	r3, r3, #24
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	071b      	lsls	r3, r3, #28
 8003ab2:	491a      	ldr	r1, [pc, #104]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003aba:	4b18      	ldr	r3, [pc, #96]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a17      	ldr	r2, [pc, #92]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ac0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ac4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ac6:	f7fd fb0b 	bl	80010e0 <HAL_GetTick>
 8003aca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003acc:	e008      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ace:	f7fd fb07 	bl	80010e0 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b64      	cmp	r3, #100	; 0x64
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e0d8      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ae0:	4b0e      	ldr	r3, [pc, #56]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d0f0      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	f040 80ce 	bne.w	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003af4:	4b09      	ldr	r3, [pc, #36]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a08      	ldr	r2, [pc, #32]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003afa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003afe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b00:	f7fd faee 	bl	80010e0 <HAL_GetTick>
 8003b04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b06:	e00b      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b08:	f7fd faea 	bl	80010e0 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b64      	cmp	r3, #100	; 0x64
 8003b14:	d904      	bls.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e0bb      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003b1a:	bf00      	nop
 8003b1c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b20:	4b5e      	ldr	r3, [pc, #376]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b2c:	d0ec      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d009      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d02e      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d12a      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b56:	4b51      	ldr	r3, [pc, #324]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5c:	0c1b      	lsrs	r3, r3, #16
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b64:	4b4d      	ldr	r3, [pc, #308]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b6a:	0f1b      	lsrs	r3, r3, #28
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	019a      	lsls	r2, r3, #6
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	041b      	lsls	r3, r3, #16
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	061b      	lsls	r3, r3, #24
 8003b84:	431a      	orrs	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	071b      	lsls	r3, r3, #28
 8003b8a:	4944      	ldr	r1, [pc, #272]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003b92:	4b42      	ldr	r3, [pc, #264]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b98:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	021b      	lsls	r3, r3, #8
 8003ba4:	493d      	ldr	r1, [pc, #244]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d022      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bc0:	d11d      	bne.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003bc2:	4b36      	ldr	r3, [pc, #216]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc8:	0e1b      	lsrs	r3, r3, #24
 8003bca:	f003 030f 	and.w	r3, r3, #15
 8003bce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bd0:	4b32      	ldr	r3, [pc, #200]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd6:	0f1b      	lsrs	r3, r3, #28
 8003bd8:	f003 0307 	and.w	r3, r3, #7
 8003bdc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	019a      	lsls	r2, r3, #6
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	041b      	lsls	r3, r3, #16
 8003bea:	431a      	orrs	r2, r3
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	061b      	lsls	r3, r3, #24
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	071b      	lsls	r3, r3, #28
 8003bf6:	4929      	ldr	r1, [pc, #164]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0308 	and.w	r3, r3, #8
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d028      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c0a:	4b24      	ldr	r3, [pc, #144]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c10:	0e1b      	lsrs	r3, r3, #24
 8003c12:	f003 030f 	and.w	r3, r3, #15
 8003c16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c18:	4b20      	ldr	r3, [pc, #128]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1e:	0c1b      	lsrs	r3, r3, #16
 8003c20:	f003 0303 	and.w	r3, r3, #3
 8003c24:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	019a      	lsls	r2, r3, #6
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	041b      	lsls	r3, r3, #16
 8003c30:	431a      	orrs	r2, r3
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	061b      	lsls	r3, r3, #24
 8003c36:	431a      	orrs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	69db      	ldr	r3, [r3, #28]
 8003c3c:	071b      	lsls	r3, r3, #28
 8003c3e:	4917      	ldr	r1, [pc, #92]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003c46:	4b15      	ldr	r3, [pc, #84]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c54:	4911      	ldr	r1, [pc, #68]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003c5c:	4b0f      	ldr	r3, [pc, #60]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a0e      	ldr	r2, [pc, #56]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c68:	f7fd fa3a 	bl	80010e0 <HAL_GetTick>
 8003c6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c70:	f7fd fa36 	bl	80010e0 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b64      	cmp	r3, #100	; 0x64
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e007      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c82:	4b06      	ldr	r3, [pc, #24]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c8e:	d1ef      	bne.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3720      	adds	r7, #32
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40023800 	.word	0x40023800

08003ca0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e049      	b.n	8003d46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d106      	bne.n	8003ccc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f841 	bl	8003d4e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3304      	adds	r3, #4
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4610      	mov	r0, r2
 8003ce0:	f000 fa00 	bl	80040e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
	...

08003d64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d001      	beq.n	8003d7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e054      	b.n	8003e26 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68da      	ldr	r2, [r3, #12]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0201 	orr.w	r2, r2, #1
 8003d92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a26      	ldr	r2, [pc, #152]	; (8003e34 <HAL_TIM_Base_Start_IT+0xd0>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d022      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0x80>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da6:	d01d      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0x80>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a22      	ldr	r2, [pc, #136]	; (8003e38 <HAL_TIM_Base_Start_IT+0xd4>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d018      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0x80>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a21      	ldr	r2, [pc, #132]	; (8003e3c <HAL_TIM_Base_Start_IT+0xd8>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d013      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0x80>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a1f      	ldr	r2, [pc, #124]	; (8003e40 <HAL_TIM_Base_Start_IT+0xdc>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d00e      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0x80>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a1e      	ldr	r2, [pc, #120]	; (8003e44 <HAL_TIM_Base_Start_IT+0xe0>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d009      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0x80>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a1c      	ldr	r2, [pc, #112]	; (8003e48 <HAL_TIM_Base_Start_IT+0xe4>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d004      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0x80>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a1b      	ldr	r2, [pc, #108]	; (8003e4c <HAL_TIM_Base_Start_IT+0xe8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d115      	bne.n	8003e10 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689a      	ldr	r2, [r3, #8]
 8003dea:	4b19      	ldr	r3, [pc, #100]	; (8003e50 <HAL_TIM_Base_Start_IT+0xec>)
 8003dec:	4013      	ands	r3, r2
 8003dee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2b06      	cmp	r3, #6
 8003df4:	d015      	beq.n	8003e22 <HAL_TIM_Base_Start_IT+0xbe>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dfc:	d011      	beq.n	8003e22 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f042 0201 	orr.w	r2, r2, #1
 8003e0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e0e:	e008      	b.n	8003e22 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0201 	orr.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	e000      	b.n	8003e24 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	40010000 	.word	0x40010000
 8003e38:	40000400 	.word	0x40000400
 8003e3c:	40000800 	.word	0x40000800
 8003e40:	40000c00 	.word	0x40000c00
 8003e44:	40010400 	.word	0x40010400
 8003e48:	40014000 	.word	0x40014000
 8003e4c:	40001800 	.word	0x40001800
 8003e50:	00010007 	.word	0x00010007

08003e54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d122      	bne.n	8003eb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d11b      	bne.n	8003eb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f06f 0202 	mvn.w	r2, #2
 8003e80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	f003 0303 	and.w	r3, r3, #3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f905 	bl	80040a6 <HAL_TIM_IC_CaptureCallback>
 8003e9c:	e005      	b.n	8003eaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f8f7 	bl	8004092 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f908 	bl	80040ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	f003 0304 	and.w	r3, r3, #4
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	d122      	bne.n	8003f04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b04      	cmp	r3, #4
 8003eca:	d11b      	bne.n	8003f04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f06f 0204 	mvn.w	r2, #4
 8003ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2202      	movs	r2, #2
 8003eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f8db 	bl	80040a6 <HAL_TIM_IC_CaptureCallback>
 8003ef0:	e005      	b.n	8003efe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f8cd 	bl	8004092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f8de 	bl	80040ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	f003 0308 	and.w	r3, r3, #8
 8003f0e:	2b08      	cmp	r3, #8
 8003f10:	d122      	bne.n	8003f58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f003 0308 	and.w	r3, r3, #8
 8003f1c:	2b08      	cmp	r3, #8
 8003f1e:	d11b      	bne.n	8003f58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f06f 0208 	mvn.w	r2, #8
 8003f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2204      	movs	r2, #4
 8003f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	f003 0303 	and.w	r3, r3, #3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f8b1 	bl	80040a6 <HAL_TIM_IC_CaptureCallback>
 8003f44:	e005      	b.n	8003f52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f8a3 	bl	8004092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f8b4 	bl	80040ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	f003 0310 	and.w	r3, r3, #16
 8003f62:	2b10      	cmp	r3, #16
 8003f64:	d122      	bne.n	8003fac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	f003 0310 	and.w	r3, r3, #16
 8003f70:	2b10      	cmp	r3, #16
 8003f72:	d11b      	bne.n	8003fac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f06f 0210 	mvn.w	r2, #16
 8003f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2208      	movs	r2, #8
 8003f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f887 	bl	80040a6 <HAL_TIM_IC_CaptureCallback>
 8003f98:	e005      	b.n	8003fa6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f879 	bl	8004092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f88a 	bl	80040ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d10e      	bne.n	8003fd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d107      	bne.n	8003fd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f06f 0201 	mvn.w	r2, #1
 8003fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7fc fe58 	bl	8000c88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe2:	2b80      	cmp	r3, #128	; 0x80
 8003fe4:	d10e      	bne.n	8004004 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff0:	2b80      	cmp	r3, #128	; 0x80
 8003ff2:	d107      	bne.n	8004004 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f91a 	bl	8004238 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004012:	d10e      	bne.n	8004032 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800401e:	2b80      	cmp	r3, #128	; 0x80
 8004020:	d107      	bne.n	8004032 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800402a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 f90d 	bl	800424c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403c:	2b40      	cmp	r3, #64	; 0x40
 800403e:	d10e      	bne.n	800405e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800404a:	2b40      	cmp	r3, #64	; 0x40
 800404c:	d107      	bne.n	800405e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f838 	bl	80040ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	f003 0320 	and.w	r3, r3, #32
 8004068:	2b20      	cmp	r3, #32
 800406a:	d10e      	bne.n	800408a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f003 0320 	and.w	r3, r3, #32
 8004076:	2b20      	cmp	r3, #32
 8004078:	d107      	bne.n	800408a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f06f 0220 	mvn.w	r2, #32
 8004082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f8cd 	bl	8004224 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800408a:	bf00      	nop
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004092:	b480      	push	{r7}
 8004094:	b083      	sub	sp, #12
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr

080040a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b083      	sub	sp, #12
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040ae:	bf00      	nop
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b083      	sub	sp, #12
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040c2:	bf00      	nop
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b083      	sub	sp, #12
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
	...

080040e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a40      	ldr	r2, [pc, #256]	; (80041f8 <TIM_Base_SetConfig+0x114>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d013      	beq.n	8004124 <TIM_Base_SetConfig+0x40>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004102:	d00f      	beq.n	8004124 <TIM_Base_SetConfig+0x40>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a3d      	ldr	r2, [pc, #244]	; (80041fc <TIM_Base_SetConfig+0x118>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d00b      	beq.n	8004124 <TIM_Base_SetConfig+0x40>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a3c      	ldr	r2, [pc, #240]	; (8004200 <TIM_Base_SetConfig+0x11c>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d007      	beq.n	8004124 <TIM_Base_SetConfig+0x40>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a3b      	ldr	r2, [pc, #236]	; (8004204 <TIM_Base_SetConfig+0x120>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d003      	beq.n	8004124 <TIM_Base_SetConfig+0x40>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a3a      	ldr	r2, [pc, #232]	; (8004208 <TIM_Base_SetConfig+0x124>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d108      	bne.n	8004136 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800412a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	4313      	orrs	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a2f      	ldr	r2, [pc, #188]	; (80041f8 <TIM_Base_SetConfig+0x114>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d02b      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004144:	d027      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a2c      	ldr	r2, [pc, #176]	; (80041fc <TIM_Base_SetConfig+0x118>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d023      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a2b      	ldr	r2, [pc, #172]	; (8004200 <TIM_Base_SetConfig+0x11c>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d01f      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a2a      	ldr	r2, [pc, #168]	; (8004204 <TIM_Base_SetConfig+0x120>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d01b      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a29      	ldr	r2, [pc, #164]	; (8004208 <TIM_Base_SetConfig+0x124>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d017      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a28      	ldr	r2, [pc, #160]	; (800420c <TIM_Base_SetConfig+0x128>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d013      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a27      	ldr	r2, [pc, #156]	; (8004210 <TIM_Base_SetConfig+0x12c>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d00f      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a26      	ldr	r2, [pc, #152]	; (8004214 <TIM_Base_SetConfig+0x130>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d00b      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a25      	ldr	r2, [pc, #148]	; (8004218 <TIM_Base_SetConfig+0x134>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d007      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a24      	ldr	r2, [pc, #144]	; (800421c <TIM_Base_SetConfig+0x138>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d003      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a23      	ldr	r2, [pc, #140]	; (8004220 <TIM_Base_SetConfig+0x13c>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d108      	bne.n	80041a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800419c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a0a      	ldr	r2, [pc, #40]	; (80041f8 <TIM_Base_SetConfig+0x114>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d003      	beq.n	80041dc <TIM_Base_SetConfig+0xf8>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a0c      	ldr	r2, [pc, #48]	; (8004208 <TIM_Base_SetConfig+0x124>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d103      	bne.n	80041e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	691a      	ldr	r2, [r3, #16]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	615a      	str	r2, [r3, #20]
}
 80041ea:	bf00      	nop
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	40010000 	.word	0x40010000
 80041fc:	40000400 	.word	0x40000400
 8004200:	40000800 	.word	0x40000800
 8004204:	40000c00 	.word	0x40000c00
 8004208:	40010400 	.word	0x40010400
 800420c:	40014000 	.word	0x40014000
 8004210:	40014400 	.word	0x40014400
 8004214:	40014800 	.word	0x40014800
 8004218:	40001800 	.word	0x40001800
 800421c:	40001c00 	.word	0x40001c00
 8004220:	40002000 	.word	0x40002000

08004224 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e040      	b.n	80042f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004276:	2b00      	cmp	r3, #0
 8004278:	d106      	bne.n	8004288 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7fc fd40 	bl	8000d08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2224      	movs	r2, #36	; 0x24
 800428c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 0201 	bic.w	r2, r2, #1
 800429c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f8c0 	bl	8004424 <UART_SetConfig>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d101      	bne.n	80042ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e022      	b.n	80042f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d002      	beq.n	80042bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 fb16 	bl	80048e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	689a      	ldr	r2, [r3, #8]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0201 	orr.w	r2, r2, #1
 80042ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 fb9d 	bl	8004a2c <UART_CheckIdleState>
 80042f2:	4603      	mov	r3, r0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b08a      	sub	sp, #40	; 0x28
 8004300:	af02      	add	r7, sp, #8
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	603b      	str	r3, [r7, #0]
 8004308:	4613      	mov	r3, r2
 800430a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004310:	2b20      	cmp	r3, #32
 8004312:	f040 8081 	bne.w	8004418 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d002      	beq.n	8004322 <HAL_UART_Transmit+0x26>
 800431c:	88fb      	ldrh	r3, [r7, #6]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e079      	b.n	800441a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800432c:	2b01      	cmp	r3, #1
 800432e:	d101      	bne.n	8004334 <HAL_UART_Transmit+0x38>
 8004330:	2302      	movs	r3, #2
 8004332:	e072      	b.n	800441a <HAL_UART_Transmit+0x11e>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2221      	movs	r2, #33	; 0x21
 8004348:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800434a:	f7fc fec9 	bl	80010e0 <HAL_GetTick>
 800434e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	88fa      	ldrh	r2, [r7, #6]
 8004354:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	88fa      	ldrh	r2, [r7, #6]
 800435c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004368:	d108      	bne.n	800437c <HAL_UART_Transmit+0x80>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d104      	bne.n	800437c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004372:	2300      	movs	r3, #0
 8004374:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	61bb      	str	r3, [r7, #24]
 800437a:	e003      	b.n	8004384 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004380:	2300      	movs	r3, #0
 8004382:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800438c:	e02c      	b.n	80043e8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2200      	movs	r2, #0
 8004396:	2180      	movs	r1, #128	; 0x80
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f000 fb90 	bl	8004abe <UART_WaitOnFlagUntilTimeout>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d001      	beq.n	80043a8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e038      	b.n	800441a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10b      	bne.n	80043c6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	461a      	mov	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043bc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	3302      	adds	r3, #2
 80043c2:	61bb      	str	r3, [r7, #24]
 80043c4:	e007      	b.n	80043d6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	781a      	ldrb	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	3301      	adds	r3, #1
 80043d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043dc:	b29b      	uxth	r3, r3
 80043de:	3b01      	subs	r3, #1
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1cc      	bne.n	800438e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	2200      	movs	r2, #0
 80043fc:	2140      	movs	r1, #64	; 0x40
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f000 fb5d 	bl	8004abe <UART_WaitOnFlagUntilTimeout>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e005      	b.n	800441a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2220      	movs	r2, #32
 8004412:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004414:	2300      	movs	r3, #0
 8004416:	e000      	b.n	800441a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004418:	2302      	movs	r3, #2
  }
}
 800441a:	4618      	mov	r0, r3
 800441c:	3720      	adds	r7, #32
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
	...

08004424 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b088      	sub	sp, #32
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800442c:	2300      	movs	r3, #0
 800442e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	431a      	orrs	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	431a      	orrs	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	4313      	orrs	r3, r2
 8004446:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	4ba7      	ldr	r3, [pc, #668]	; (80046ec <UART_SetConfig+0x2c8>)
 8004450:	4013      	ands	r3, r2
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	6812      	ldr	r2, [r2, #0]
 8004456:	6979      	ldr	r1, [r7, #20]
 8004458:	430b      	orrs	r3, r1
 800445a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	4313      	orrs	r3, r2
 8004480:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	430a      	orrs	r2, r1
 8004494:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a95      	ldr	r2, [pc, #596]	; (80046f0 <UART_SetConfig+0x2cc>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d120      	bne.n	80044e2 <UART_SetConfig+0xbe>
 80044a0:	4b94      	ldr	r3, [pc, #592]	; (80046f4 <UART_SetConfig+0x2d0>)
 80044a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a6:	f003 0303 	and.w	r3, r3, #3
 80044aa:	2b03      	cmp	r3, #3
 80044ac:	d816      	bhi.n	80044dc <UART_SetConfig+0xb8>
 80044ae:	a201      	add	r2, pc, #4	; (adr r2, 80044b4 <UART_SetConfig+0x90>)
 80044b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b4:	080044c5 	.word	0x080044c5
 80044b8:	080044d1 	.word	0x080044d1
 80044bc:	080044cb 	.word	0x080044cb
 80044c0:	080044d7 	.word	0x080044d7
 80044c4:	2301      	movs	r3, #1
 80044c6:	77fb      	strb	r3, [r7, #31]
 80044c8:	e14f      	b.n	800476a <UART_SetConfig+0x346>
 80044ca:	2302      	movs	r3, #2
 80044cc:	77fb      	strb	r3, [r7, #31]
 80044ce:	e14c      	b.n	800476a <UART_SetConfig+0x346>
 80044d0:	2304      	movs	r3, #4
 80044d2:	77fb      	strb	r3, [r7, #31]
 80044d4:	e149      	b.n	800476a <UART_SetConfig+0x346>
 80044d6:	2308      	movs	r3, #8
 80044d8:	77fb      	strb	r3, [r7, #31]
 80044da:	e146      	b.n	800476a <UART_SetConfig+0x346>
 80044dc:	2310      	movs	r3, #16
 80044de:	77fb      	strb	r3, [r7, #31]
 80044e0:	e143      	b.n	800476a <UART_SetConfig+0x346>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a84      	ldr	r2, [pc, #528]	; (80046f8 <UART_SetConfig+0x2d4>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d132      	bne.n	8004552 <UART_SetConfig+0x12e>
 80044ec:	4b81      	ldr	r3, [pc, #516]	; (80046f4 <UART_SetConfig+0x2d0>)
 80044ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f2:	f003 030c 	and.w	r3, r3, #12
 80044f6:	2b0c      	cmp	r3, #12
 80044f8:	d828      	bhi.n	800454c <UART_SetConfig+0x128>
 80044fa:	a201      	add	r2, pc, #4	; (adr r2, 8004500 <UART_SetConfig+0xdc>)
 80044fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004500:	08004535 	.word	0x08004535
 8004504:	0800454d 	.word	0x0800454d
 8004508:	0800454d 	.word	0x0800454d
 800450c:	0800454d 	.word	0x0800454d
 8004510:	08004541 	.word	0x08004541
 8004514:	0800454d 	.word	0x0800454d
 8004518:	0800454d 	.word	0x0800454d
 800451c:	0800454d 	.word	0x0800454d
 8004520:	0800453b 	.word	0x0800453b
 8004524:	0800454d 	.word	0x0800454d
 8004528:	0800454d 	.word	0x0800454d
 800452c:	0800454d 	.word	0x0800454d
 8004530:	08004547 	.word	0x08004547
 8004534:	2300      	movs	r3, #0
 8004536:	77fb      	strb	r3, [r7, #31]
 8004538:	e117      	b.n	800476a <UART_SetConfig+0x346>
 800453a:	2302      	movs	r3, #2
 800453c:	77fb      	strb	r3, [r7, #31]
 800453e:	e114      	b.n	800476a <UART_SetConfig+0x346>
 8004540:	2304      	movs	r3, #4
 8004542:	77fb      	strb	r3, [r7, #31]
 8004544:	e111      	b.n	800476a <UART_SetConfig+0x346>
 8004546:	2308      	movs	r3, #8
 8004548:	77fb      	strb	r3, [r7, #31]
 800454a:	e10e      	b.n	800476a <UART_SetConfig+0x346>
 800454c:	2310      	movs	r3, #16
 800454e:	77fb      	strb	r3, [r7, #31]
 8004550:	e10b      	b.n	800476a <UART_SetConfig+0x346>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a69      	ldr	r2, [pc, #420]	; (80046fc <UART_SetConfig+0x2d8>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d120      	bne.n	800459e <UART_SetConfig+0x17a>
 800455c:	4b65      	ldr	r3, [pc, #404]	; (80046f4 <UART_SetConfig+0x2d0>)
 800455e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004562:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004566:	2b30      	cmp	r3, #48	; 0x30
 8004568:	d013      	beq.n	8004592 <UART_SetConfig+0x16e>
 800456a:	2b30      	cmp	r3, #48	; 0x30
 800456c:	d814      	bhi.n	8004598 <UART_SetConfig+0x174>
 800456e:	2b20      	cmp	r3, #32
 8004570:	d009      	beq.n	8004586 <UART_SetConfig+0x162>
 8004572:	2b20      	cmp	r3, #32
 8004574:	d810      	bhi.n	8004598 <UART_SetConfig+0x174>
 8004576:	2b00      	cmp	r3, #0
 8004578:	d002      	beq.n	8004580 <UART_SetConfig+0x15c>
 800457a:	2b10      	cmp	r3, #16
 800457c:	d006      	beq.n	800458c <UART_SetConfig+0x168>
 800457e:	e00b      	b.n	8004598 <UART_SetConfig+0x174>
 8004580:	2300      	movs	r3, #0
 8004582:	77fb      	strb	r3, [r7, #31]
 8004584:	e0f1      	b.n	800476a <UART_SetConfig+0x346>
 8004586:	2302      	movs	r3, #2
 8004588:	77fb      	strb	r3, [r7, #31]
 800458a:	e0ee      	b.n	800476a <UART_SetConfig+0x346>
 800458c:	2304      	movs	r3, #4
 800458e:	77fb      	strb	r3, [r7, #31]
 8004590:	e0eb      	b.n	800476a <UART_SetConfig+0x346>
 8004592:	2308      	movs	r3, #8
 8004594:	77fb      	strb	r3, [r7, #31]
 8004596:	e0e8      	b.n	800476a <UART_SetConfig+0x346>
 8004598:	2310      	movs	r3, #16
 800459a:	77fb      	strb	r3, [r7, #31]
 800459c:	e0e5      	b.n	800476a <UART_SetConfig+0x346>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a57      	ldr	r2, [pc, #348]	; (8004700 <UART_SetConfig+0x2dc>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d120      	bne.n	80045ea <UART_SetConfig+0x1c6>
 80045a8:	4b52      	ldr	r3, [pc, #328]	; (80046f4 <UART_SetConfig+0x2d0>)
 80045aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80045b2:	2bc0      	cmp	r3, #192	; 0xc0
 80045b4:	d013      	beq.n	80045de <UART_SetConfig+0x1ba>
 80045b6:	2bc0      	cmp	r3, #192	; 0xc0
 80045b8:	d814      	bhi.n	80045e4 <UART_SetConfig+0x1c0>
 80045ba:	2b80      	cmp	r3, #128	; 0x80
 80045bc:	d009      	beq.n	80045d2 <UART_SetConfig+0x1ae>
 80045be:	2b80      	cmp	r3, #128	; 0x80
 80045c0:	d810      	bhi.n	80045e4 <UART_SetConfig+0x1c0>
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d002      	beq.n	80045cc <UART_SetConfig+0x1a8>
 80045c6:	2b40      	cmp	r3, #64	; 0x40
 80045c8:	d006      	beq.n	80045d8 <UART_SetConfig+0x1b4>
 80045ca:	e00b      	b.n	80045e4 <UART_SetConfig+0x1c0>
 80045cc:	2300      	movs	r3, #0
 80045ce:	77fb      	strb	r3, [r7, #31]
 80045d0:	e0cb      	b.n	800476a <UART_SetConfig+0x346>
 80045d2:	2302      	movs	r3, #2
 80045d4:	77fb      	strb	r3, [r7, #31]
 80045d6:	e0c8      	b.n	800476a <UART_SetConfig+0x346>
 80045d8:	2304      	movs	r3, #4
 80045da:	77fb      	strb	r3, [r7, #31]
 80045dc:	e0c5      	b.n	800476a <UART_SetConfig+0x346>
 80045de:	2308      	movs	r3, #8
 80045e0:	77fb      	strb	r3, [r7, #31]
 80045e2:	e0c2      	b.n	800476a <UART_SetConfig+0x346>
 80045e4:	2310      	movs	r3, #16
 80045e6:	77fb      	strb	r3, [r7, #31]
 80045e8:	e0bf      	b.n	800476a <UART_SetConfig+0x346>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a45      	ldr	r2, [pc, #276]	; (8004704 <UART_SetConfig+0x2e0>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d125      	bne.n	8004640 <UART_SetConfig+0x21c>
 80045f4:	4b3f      	ldr	r3, [pc, #252]	; (80046f4 <UART_SetConfig+0x2d0>)
 80045f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004602:	d017      	beq.n	8004634 <UART_SetConfig+0x210>
 8004604:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004608:	d817      	bhi.n	800463a <UART_SetConfig+0x216>
 800460a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800460e:	d00b      	beq.n	8004628 <UART_SetConfig+0x204>
 8004610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004614:	d811      	bhi.n	800463a <UART_SetConfig+0x216>
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <UART_SetConfig+0x1fe>
 800461a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800461e:	d006      	beq.n	800462e <UART_SetConfig+0x20a>
 8004620:	e00b      	b.n	800463a <UART_SetConfig+0x216>
 8004622:	2300      	movs	r3, #0
 8004624:	77fb      	strb	r3, [r7, #31]
 8004626:	e0a0      	b.n	800476a <UART_SetConfig+0x346>
 8004628:	2302      	movs	r3, #2
 800462a:	77fb      	strb	r3, [r7, #31]
 800462c:	e09d      	b.n	800476a <UART_SetConfig+0x346>
 800462e:	2304      	movs	r3, #4
 8004630:	77fb      	strb	r3, [r7, #31]
 8004632:	e09a      	b.n	800476a <UART_SetConfig+0x346>
 8004634:	2308      	movs	r3, #8
 8004636:	77fb      	strb	r3, [r7, #31]
 8004638:	e097      	b.n	800476a <UART_SetConfig+0x346>
 800463a:	2310      	movs	r3, #16
 800463c:	77fb      	strb	r3, [r7, #31]
 800463e:	e094      	b.n	800476a <UART_SetConfig+0x346>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a30      	ldr	r2, [pc, #192]	; (8004708 <UART_SetConfig+0x2e4>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d125      	bne.n	8004696 <UART_SetConfig+0x272>
 800464a:	4b2a      	ldr	r3, [pc, #168]	; (80046f4 <UART_SetConfig+0x2d0>)
 800464c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004650:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004654:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004658:	d017      	beq.n	800468a <UART_SetConfig+0x266>
 800465a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800465e:	d817      	bhi.n	8004690 <UART_SetConfig+0x26c>
 8004660:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004664:	d00b      	beq.n	800467e <UART_SetConfig+0x25a>
 8004666:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800466a:	d811      	bhi.n	8004690 <UART_SetConfig+0x26c>
 800466c:	2b00      	cmp	r3, #0
 800466e:	d003      	beq.n	8004678 <UART_SetConfig+0x254>
 8004670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004674:	d006      	beq.n	8004684 <UART_SetConfig+0x260>
 8004676:	e00b      	b.n	8004690 <UART_SetConfig+0x26c>
 8004678:	2301      	movs	r3, #1
 800467a:	77fb      	strb	r3, [r7, #31]
 800467c:	e075      	b.n	800476a <UART_SetConfig+0x346>
 800467e:	2302      	movs	r3, #2
 8004680:	77fb      	strb	r3, [r7, #31]
 8004682:	e072      	b.n	800476a <UART_SetConfig+0x346>
 8004684:	2304      	movs	r3, #4
 8004686:	77fb      	strb	r3, [r7, #31]
 8004688:	e06f      	b.n	800476a <UART_SetConfig+0x346>
 800468a:	2308      	movs	r3, #8
 800468c:	77fb      	strb	r3, [r7, #31]
 800468e:	e06c      	b.n	800476a <UART_SetConfig+0x346>
 8004690:	2310      	movs	r3, #16
 8004692:	77fb      	strb	r3, [r7, #31]
 8004694:	e069      	b.n	800476a <UART_SetConfig+0x346>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a1c      	ldr	r2, [pc, #112]	; (800470c <UART_SetConfig+0x2e8>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d137      	bne.n	8004710 <UART_SetConfig+0x2ec>
 80046a0:	4b14      	ldr	r3, [pc, #80]	; (80046f4 <UART_SetConfig+0x2d0>)
 80046a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80046aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80046ae:	d017      	beq.n	80046e0 <UART_SetConfig+0x2bc>
 80046b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80046b4:	d817      	bhi.n	80046e6 <UART_SetConfig+0x2c2>
 80046b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ba:	d00b      	beq.n	80046d4 <UART_SetConfig+0x2b0>
 80046bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046c0:	d811      	bhi.n	80046e6 <UART_SetConfig+0x2c2>
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <UART_SetConfig+0x2aa>
 80046c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ca:	d006      	beq.n	80046da <UART_SetConfig+0x2b6>
 80046cc:	e00b      	b.n	80046e6 <UART_SetConfig+0x2c2>
 80046ce:	2300      	movs	r3, #0
 80046d0:	77fb      	strb	r3, [r7, #31]
 80046d2:	e04a      	b.n	800476a <UART_SetConfig+0x346>
 80046d4:	2302      	movs	r3, #2
 80046d6:	77fb      	strb	r3, [r7, #31]
 80046d8:	e047      	b.n	800476a <UART_SetConfig+0x346>
 80046da:	2304      	movs	r3, #4
 80046dc:	77fb      	strb	r3, [r7, #31]
 80046de:	e044      	b.n	800476a <UART_SetConfig+0x346>
 80046e0:	2308      	movs	r3, #8
 80046e2:	77fb      	strb	r3, [r7, #31]
 80046e4:	e041      	b.n	800476a <UART_SetConfig+0x346>
 80046e6:	2310      	movs	r3, #16
 80046e8:	77fb      	strb	r3, [r7, #31]
 80046ea:	e03e      	b.n	800476a <UART_SetConfig+0x346>
 80046ec:	efff69f3 	.word	0xefff69f3
 80046f0:	40011000 	.word	0x40011000
 80046f4:	40023800 	.word	0x40023800
 80046f8:	40004400 	.word	0x40004400
 80046fc:	40004800 	.word	0x40004800
 8004700:	40004c00 	.word	0x40004c00
 8004704:	40005000 	.word	0x40005000
 8004708:	40011400 	.word	0x40011400
 800470c:	40007800 	.word	0x40007800
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a71      	ldr	r2, [pc, #452]	; (80048dc <UART_SetConfig+0x4b8>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d125      	bne.n	8004766 <UART_SetConfig+0x342>
 800471a:	4b71      	ldr	r3, [pc, #452]	; (80048e0 <UART_SetConfig+0x4bc>)
 800471c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004720:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004724:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004728:	d017      	beq.n	800475a <UART_SetConfig+0x336>
 800472a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800472e:	d817      	bhi.n	8004760 <UART_SetConfig+0x33c>
 8004730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004734:	d00b      	beq.n	800474e <UART_SetConfig+0x32a>
 8004736:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800473a:	d811      	bhi.n	8004760 <UART_SetConfig+0x33c>
 800473c:	2b00      	cmp	r3, #0
 800473e:	d003      	beq.n	8004748 <UART_SetConfig+0x324>
 8004740:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004744:	d006      	beq.n	8004754 <UART_SetConfig+0x330>
 8004746:	e00b      	b.n	8004760 <UART_SetConfig+0x33c>
 8004748:	2300      	movs	r3, #0
 800474a:	77fb      	strb	r3, [r7, #31]
 800474c:	e00d      	b.n	800476a <UART_SetConfig+0x346>
 800474e:	2302      	movs	r3, #2
 8004750:	77fb      	strb	r3, [r7, #31]
 8004752:	e00a      	b.n	800476a <UART_SetConfig+0x346>
 8004754:	2304      	movs	r3, #4
 8004756:	77fb      	strb	r3, [r7, #31]
 8004758:	e007      	b.n	800476a <UART_SetConfig+0x346>
 800475a:	2308      	movs	r3, #8
 800475c:	77fb      	strb	r3, [r7, #31]
 800475e:	e004      	b.n	800476a <UART_SetConfig+0x346>
 8004760:	2310      	movs	r3, #16
 8004762:	77fb      	strb	r3, [r7, #31]
 8004764:	e001      	b.n	800476a <UART_SetConfig+0x346>
 8004766:	2310      	movs	r3, #16
 8004768:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004772:	d15b      	bne.n	800482c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004774:	7ffb      	ldrb	r3, [r7, #31]
 8004776:	2b08      	cmp	r3, #8
 8004778:	d827      	bhi.n	80047ca <UART_SetConfig+0x3a6>
 800477a:	a201      	add	r2, pc, #4	; (adr r2, 8004780 <UART_SetConfig+0x35c>)
 800477c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004780:	080047a5 	.word	0x080047a5
 8004784:	080047ad 	.word	0x080047ad
 8004788:	080047b5 	.word	0x080047b5
 800478c:	080047cb 	.word	0x080047cb
 8004790:	080047bb 	.word	0x080047bb
 8004794:	080047cb 	.word	0x080047cb
 8004798:	080047cb 	.word	0x080047cb
 800479c:	080047cb 	.word	0x080047cb
 80047a0:	080047c3 	.word	0x080047c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047a4:	f7fe fdfa 	bl	800339c <HAL_RCC_GetPCLK1Freq>
 80047a8:	61b8      	str	r0, [r7, #24]
        break;
 80047aa:	e013      	b.n	80047d4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047ac:	f7fe fe0a 	bl	80033c4 <HAL_RCC_GetPCLK2Freq>
 80047b0:	61b8      	str	r0, [r7, #24]
        break;
 80047b2:	e00f      	b.n	80047d4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047b4:	4b4b      	ldr	r3, [pc, #300]	; (80048e4 <UART_SetConfig+0x4c0>)
 80047b6:	61bb      	str	r3, [r7, #24]
        break;
 80047b8:	e00c      	b.n	80047d4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ba:	f7fe fd01 	bl	80031c0 <HAL_RCC_GetSysClockFreq>
 80047be:	61b8      	str	r0, [r7, #24]
        break;
 80047c0:	e008      	b.n	80047d4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047c6:	61bb      	str	r3, [r7, #24]
        break;
 80047c8:	e004      	b.n	80047d4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	77bb      	strb	r3, [r7, #30]
        break;
 80047d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d074      	beq.n	80048c4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	005a      	lsls	r2, r3, #1
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	085b      	lsrs	r3, r3, #1
 80047e4:	441a      	add	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	2b0f      	cmp	r3, #15
 80047f6:	d916      	bls.n	8004826 <UART_SetConfig+0x402>
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047fe:	d212      	bcs.n	8004826 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	b29b      	uxth	r3, r3
 8004804:	f023 030f 	bic.w	r3, r3, #15
 8004808:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	085b      	lsrs	r3, r3, #1
 800480e:	b29b      	uxth	r3, r3
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	b29a      	uxth	r2, r3
 8004816:	89fb      	ldrh	r3, [r7, #14]
 8004818:	4313      	orrs	r3, r2
 800481a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	89fa      	ldrh	r2, [r7, #14]
 8004822:	60da      	str	r2, [r3, #12]
 8004824:	e04e      	b.n	80048c4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	77bb      	strb	r3, [r7, #30]
 800482a:	e04b      	b.n	80048c4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800482c:	7ffb      	ldrb	r3, [r7, #31]
 800482e:	2b08      	cmp	r3, #8
 8004830:	d827      	bhi.n	8004882 <UART_SetConfig+0x45e>
 8004832:	a201      	add	r2, pc, #4	; (adr r2, 8004838 <UART_SetConfig+0x414>)
 8004834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004838:	0800485d 	.word	0x0800485d
 800483c:	08004865 	.word	0x08004865
 8004840:	0800486d 	.word	0x0800486d
 8004844:	08004883 	.word	0x08004883
 8004848:	08004873 	.word	0x08004873
 800484c:	08004883 	.word	0x08004883
 8004850:	08004883 	.word	0x08004883
 8004854:	08004883 	.word	0x08004883
 8004858:	0800487b 	.word	0x0800487b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800485c:	f7fe fd9e 	bl	800339c <HAL_RCC_GetPCLK1Freq>
 8004860:	61b8      	str	r0, [r7, #24]
        break;
 8004862:	e013      	b.n	800488c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004864:	f7fe fdae 	bl	80033c4 <HAL_RCC_GetPCLK2Freq>
 8004868:	61b8      	str	r0, [r7, #24]
        break;
 800486a:	e00f      	b.n	800488c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800486c:	4b1d      	ldr	r3, [pc, #116]	; (80048e4 <UART_SetConfig+0x4c0>)
 800486e:	61bb      	str	r3, [r7, #24]
        break;
 8004870:	e00c      	b.n	800488c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004872:	f7fe fca5 	bl	80031c0 <HAL_RCC_GetSysClockFreq>
 8004876:	61b8      	str	r0, [r7, #24]
        break;
 8004878:	e008      	b.n	800488c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800487a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800487e:	61bb      	str	r3, [r7, #24]
        break;
 8004880:	e004      	b.n	800488c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004882:	2300      	movs	r3, #0
 8004884:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	77bb      	strb	r3, [r7, #30]
        break;
 800488a:	bf00      	nop
    }

    if (pclk != 0U)
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d018      	beq.n	80048c4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	085a      	lsrs	r2, r3, #1
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	441a      	add	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	2b0f      	cmp	r3, #15
 80048ac:	d908      	bls.n	80048c0 <UART_SetConfig+0x49c>
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048b4:	d204      	bcs.n	80048c0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	60da      	str	r2, [r3, #12]
 80048be:	e001      	b.n	80048c4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80048d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3720      	adds	r7, #32
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	40007c00 	.word	0x40007c00
 80048e0:	40023800 	.word	0x40023800
 80048e4:	00f42400 	.word	0x00f42400

080048e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00a      	beq.n	8004912 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00a      	beq.n	8004934 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00a      	beq.n	8004956 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495a:	f003 0308 	and.w	r3, r3, #8
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00a      	beq.n	8004978 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	430a      	orrs	r2, r1
 8004976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497c:	f003 0310 	and.w	r3, r3, #16
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00a      	beq.n	800499a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	430a      	orrs	r2, r1
 8004998:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	f003 0320 	and.w	r3, r3, #32
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00a      	beq.n	80049bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	430a      	orrs	r2, r1
 80049ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d01a      	beq.n	80049fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049e6:	d10a      	bne.n	80049fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00a      	beq.n	8004a20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	605a      	str	r2, [r3, #4]
  }
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af02      	add	r7, sp, #8
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a3c:	f7fc fb50 	bl	80010e0 <HAL_GetTick>
 8004a40:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0308 	and.w	r3, r3, #8
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	d10e      	bne.n	8004a6e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f82d 	bl	8004abe <UART_WaitOnFlagUntilTimeout>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e023      	b.n	8004ab6 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0304 	and.w	r3, r3, #4
 8004a78:	2b04      	cmp	r3, #4
 8004a7a:	d10e      	bne.n	8004a9a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f817 	bl	8004abe <UART_WaitOnFlagUntilTimeout>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e00d      	b.n	8004ab6 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b084      	sub	sp, #16
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	60f8      	str	r0, [r7, #12]
 8004ac6:	60b9      	str	r1, [r7, #8]
 8004ac8:	603b      	str	r3, [r7, #0]
 8004aca:	4613      	mov	r3, r2
 8004acc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ace:	e05e      	b.n	8004b8e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad6:	d05a      	beq.n	8004b8e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ad8:	f7fc fb02 	bl	80010e0 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d302      	bcc.n	8004aee <UART_WaitOnFlagUntilTimeout+0x30>
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d11b      	bne.n	8004b26 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004afc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 0201 	bic.w	r2, r2, #1
 8004b0c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2220      	movs	r2, #32
 8004b12:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2220      	movs	r2, #32
 8004b18:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e043      	b.n	8004bae <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d02c      	beq.n	8004b8e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b42:	d124      	bne.n	8004b8e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b4c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b5c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689a      	ldr	r2, [r3, #8]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 0201 	bic.w	r2, r2, #1
 8004b6c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2220      	movs	r2, #32
 8004b72:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2220      	movs	r2, #32
 8004b78:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e00f      	b.n	8004bae <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	69da      	ldr	r2, [r3, #28]
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	4013      	ands	r3, r2
 8004b98:	68ba      	ldr	r2, [r7, #8]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	bf0c      	ite	eq
 8004b9e:	2301      	moveq	r3, #1
 8004ba0:	2300      	movne	r3, #0
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	79fb      	ldrb	r3, [r7, #7]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d091      	beq.n	8004ad0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
	...

08004bb8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004bb8:	b5b0      	push	{r4, r5, r7, lr}
 8004bba:	b08e      	sub	sp, #56	; 0x38
 8004bbc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004bbe:	4ba0      	ldr	r3, [pc, #640]	; (8004e40 <MX_LWIP_Init+0x288>)
 8004bc0:	22c0      	movs	r2, #192	; 0xc0
 8004bc2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004bc4:	4b9e      	ldr	r3, [pc, #632]	; (8004e40 <MX_LWIP_Init+0x288>)
 8004bc6:	22a8      	movs	r2, #168	; 0xa8
 8004bc8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8004bca:	4b9d      	ldr	r3, [pc, #628]	; (8004e40 <MX_LWIP_Init+0x288>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8004bd0:	4b9b      	ldr	r3, [pc, #620]	; (8004e40 <MX_LWIP_Init+0x288>)
 8004bd2:	226f      	movs	r2, #111	; 0x6f
 8004bd4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004bd6:	4b9b      	ldr	r3, [pc, #620]	; (8004e44 <MX_LWIP_Init+0x28c>)
 8004bd8:	22ff      	movs	r2, #255	; 0xff
 8004bda:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004bdc:	4b99      	ldr	r3, [pc, #612]	; (8004e44 <MX_LWIP_Init+0x28c>)
 8004bde:	22ff      	movs	r2, #255	; 0xff
 8004be0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004be2:	4b98      	ldr	r3, [pc, #608]	; (8004e44 <MX_LWIP_Init+0x28c>)
 8004be4:	22ff      	movs	r2, #255	; 0xff
 8004be6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004be8:	4b96      	ldr	r3, [pc, #600]	; (8004e44 <MX_LWIP_Init+0x28c>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004bee:	4b96      	ldr	r3, [pc, #600]	; (8004e48 <MX_LWIP_Init+0x290>)
 8004bf0:	22c0      	movs	r2, #192	; 0xc0
 8004bf2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004bf4:	4b94      	ldr	r3, [pc, #592]	; (8004e48 <MX_LWIP_Init+0x290>)
 8004bf6:	22a8      	movs	r2, #168	; 0xa8
 8004bf8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8004bfa:	4b93      	ldr	r3, [pc, #588]	; (8004e48 <MX_LWIP_Init+0x290>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004c00:	4b91      	ldr	r3, [pc, #580]	; (8004e48 <MX_LWIP_Init+0x290>)
 8004c02:	2201      	movs	r2, #1
 8004c04:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004c06:	2100      	movs	r1, #0
 8004c08:	2000      	movs	r0, #0
 8004c0a:	f003 fe0f 	bl	800882c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004c0e:	4b8c      	ldr	r3, [pc, #560]	; (8004e40 <MX_LWIP_Init+0x288>)
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	061a      	lsls	r2, r3, #24
 8004c14:	4b8a      	ldr	r3, [pc, #552]	; (8004e40 <MX_LWIP_Init+0x288>)
 8004c16:	785b      	ldrb	r3, [r3, #1]
 8004c18:	041b      	lsls	r3, r3, #16
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	4b88      	ldr	r3, [pc, #544]	; (8004e40 <MX_LWIP_Init+0x288>)
 8004c1e:	789b      	ldrb	r3, [r3, #2]
 8004c20:	021b      	lsls	r3, r3, #8
 8004c22:	4313      	orrs	r3, r2
 8004c24:	4a86      	ldr	r2, [pc, #536]	; (8004e40 <MX_LWIP_Init+0x288>)
 8004c26:	78d2      	ldrb	r2, [r2, #3]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	061a      	lsls	r2, r3, #24
 8004c2c:	4b84      	ldr	r3, [pc, #528]	; (8004e40 <MX_LWIP_Init+0x288>)
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	0619      	lsls	r1, r3, #24
 8004c32:	4b83      	ldr	r3, [pc, #524]	; (8004e40 <MX_LWIP_Init+0x288>)
 8004c34:	785b      	ldrb	r3, [r3, #1]
 8004c36:	041b      	lsls	r3, r3, #16
 8004c38:	4319      	orrs	r1, r3
 8004c3a:	4b81      	ldr	r3, [pc, #516]	; (8004e40 <MX_LWIP_Init+0x288>)
 8004c3c:	789b      	ldrb	r3, [r3, #2]
 8004c3e:	021b      	lsls	r3, r3, #8
 8004c40:	430b      	orrs	r3, r1
 8004c42:	497f      	ldr	r1, [pc, #508]	; (8004e40 <MX_LWIP_Init+0x288>)
 8004c44:	78c9      	ldrb	r1, [r1, #3]
 8004c46:	430b      	orrs	r3, r1
 8004c48:	021b      	lsls	r3, r3, #8
 8004c4a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	4b7b      	ldr	r3, [pc, #492]	; (8004e40 <MX_LWIP_Init+0x288>)
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	0619      	lsls	r1, r3, #24
 8004c56:	4b7a      	ldr	r3, [pc, #488]	; (8004e40 <MX_LWIP_Init+0x288>)
 8004c58:	785b      	ldrb	r3, [r3, #1]
 8004c5a:	041b      	lsls	r3, r3, #16
 8004c5c:	4319      	orrs	r1, r3
 8004c5e:	4b78      	ldr	r3, [pc, #480]	; (8004e40 <MX_LWIP_Init+0x288>)
 8004c60:	789b      	ldrb	r3, [r3, #2]
 8004c62:	021b      	lsls	r3, r3, #8
 8004c64:	430b      	orrs	r3, r1
 8004c66:	4976      	ldr	r1, [pc, #472]	; (8004e40 <MX_LWIP_Init+0x288>)
 8004c68:	78c9      	ldrb	r1, [r1, #3]
 8004c6a:	430b      	orrs	r3, r1
 8004c6c:	0a1b      	lsrs	r3, r3, #8
 8004c6e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004c72:	431a      	orrs	r2, r3
 8004c74:	4b72      	ldr	r3, [pc, #456]	; (8004e40 <MX_LWIP_Init+0x288>)
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	0619      	lsls	r1, r3, #24
 8004c7a:	4b71      	ldr	r3, [pc, #452]	; (8004e40 <MX_LWIP_Init+0x288>)
 8004c7c:	785b      	ldrb	r3, [r3, #1]
 8004c7e:	041b      	lsls	r3, r3, #16
 8004c80:	4319      	orrs	r1, r3
 8004c82:	4b6f      	ldr	r3, [pc, #444]	; (8004e40 <MX_LWIP_Init+0x288>)
 8004c84:	789b      	ldrb	r3, [r3, #2]
 8004c86:	021b      	lsls	r3, r3, #8
 8004c88:	430b      	orrs	r3, r1
 8004c8a:	496d      	ldr	r1, [pc, #436]	; (8004e40 <MX_LWIP_Init+0x288>)
 8004c8c:	78c9      	ldrb	r1, [r1, #3]
 8004c8e:	430b      	orrs	r3, r1
 8004c90:	0e1b      	lsrs	r3, r3, #24
 8004c92:	4313      	orrs	r3, r2
 8004c94:	4a6d      	ldr	r2, [pc, #436]	; (8004e4c <MX_LWIP_Init+0x294>)
 8004c96:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004c98:	4b6a      	ldr	r3, [pc, #424]	; (8004e44 <MX_LWIP_Init+0x28c>)
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	061a      	lsls	r2, r3, #24
 8004c9e:	4b69      	ldr	r3, [pc, #420]	; (8004e44 <MX_LWIP_Init+0x28c>)
 8004ca0:	785b      	ldrb	r3, [r3, #1]
 8004ca2:	041b      	lsls	r3, r3, #16
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	4b67      	ldr	r3, [pc, #412]	; (8004e44 <MX_LWIP_Init+0x28c>)
 8004ca8:	789b      	ldrb	r3, [r3, #2]
 8004caa:	021b      	lsls	r3, r3, #8
 8004cac:	4313      	orrs	r3, r2
 8004cae:	4a65      	ldr	r2, [pc, #404]	; (8004e44 <MX_LWIP_Init+0x28c>)
 8004cb0:	78d2      	ldrb	r2, [r2, #3]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	061a      	lsls	r2, r3, #24
 8004cb6:	4b63      	ldr	r3, [pc, #396]	; (8004e44 <MX_LWIP_Init+0x28c>)
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	0619      	lsls	r1, r3, #24
 8004cbc:	4b61      	ldr	r3, [pc, #388]	; (8004e44 <MX_LWIP_Init+0x28c>)
 8004cbe:	785b      	ldrb	r3, [r3, #1]
 8004cc0:	041b      	lsls	r3, r3, #16
 8004cc2:	4319      	orrs	r1, r3
 8004cc4:	4b5f      	ldr	r3, [pc, #380]	; (8004e44 <MX_LWIP_Init+0x28c>)
 8004cc6:	789b      	ldrb	r3, [r3, #2]
 8004cc8:	021b      	lsls	r3, r3, #8
 8004cca:	430b      	orrs	r3, r1
 8004ccc:	495d      	ldr	r1, [pc, #372]	; (8004e44 <MX_LWIP_Init+0x28c>)
 8004cce:	78c9      	ldrb	r1, [r1, #3]
 8004cd0:	430b      	orrs	r3, r1
 8004cd2:	021b      	lsls	r3, r3, #8
 8004cd4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	4b5a      	ldr	r3, [pc, #360]	; (8004e44 <MX_LWIP_Init+0x28c>)
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	0619      	lsls	r1, r3, #24
 8004ce0:	4b58      	ldr	r3, [pc, #352]	; (8004e44 <MX_LWIP_Init+0x28c>)
 8004ce2:	785b      	ldrb	r3, [r3, #1]
 8004ce4:	041b      	lsls	r3, r3, #16
 8004ce6:	4319      	orrs	r1, r3
 8004ce8:	4b56      	ldr	r3, [pc, #344]	; (8004e44 <MX_LWIP_Init+0x28c>)
 8004cea:	789b      	ldrb	r3, [r3, #2]
 8004cec:	021b      	lsls	r3, r3, #8
 8004cee:	430b      	orrs	r3, r1
 8004cf0:	4954      	ldr	r1, [pc, #336]	; (8004e44 <MX_LWIP_Init+0x28c>)
 8004cf2:	78c9      	ldrb	r1, [r1, #3]
 8004cf4:	430b      	orrs	r3, r1
 8004cf6:	0a1b      	lsrs	r3, r3, #8
 8004cf8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	4b51      	ldr	r3, [pc, #324]	; (8004e44 <MX_LWIP_Init+0x28c>)
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	0619      	lsls	r1, r3, #24
 8004d04:	4b4f      	ldr	r3, [pc, #316]	; (8004e44 <MX_LWIP_Init+0x28c>)
 8004d06:	785b      	ldrb	r3, [r3, #1]
 8004d08:	041b      	lsls	r3, r3, #16
 8004d0a:	4319      	orrs	r1, r3
 8004d0c:	4b4d      	ldr	r3, [pc, #308]	; (8004e44 <MX_LWIP_Init+0x28c>)
 8004d0e:	789b      	ldrb	r3, [r3, #2]
 8004d10:	021b      	lsls	r3, r3, #8
 8004d12:	430b      	orrs	r3, r1
 8004d14:	494b      	ldr	r1, [pc, #300]	; (8004e44 <MX_LWIP_Init+0x28c>)
 8004d16:	78c9      	ldrb	r1, [r1, #3]
 8004d18:	430b      	orrs	r3, r1
 8004d1a:	0e1b      	lsrs	r3, r3, #24
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	4a4c      	ldr	r2, [pc, #304]	; (8004e50 <MX_LWIP_Init+0x298>)
 8004d20:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004d22:	4b49      	ldr	r3, [pc, #292]	; (8004e48 <MX_LWIP_Init+0x290>)
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	061a      	lsls	r2, r3, #24
 8004d28:	4b47      	ldr	r3, [pc, #284]	; (8004e48 <MX_LWIP_Init+0x290>)
 8004d2a:	785b      	ldrb	r3, [r3, #1]
 8004d2c:	041b      	lsls	r3, r3, #16
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	4b45      	ldr	r3, [pc, #276]	; (8004e48 <MX_LWIP_Init+0x290>)
 8004d32:	789b      	ldrb	r3, [r3, #2]
 8004d34:	021b      	lsls	r3, r3, #8
 8004d36:	4313      	orrs	r3, r2
 8004d38:	4a43      	ldr	r2, [pc, #268]	; (8004e48 <MX_LWIP_Init+0x290>)
 8004d3a:	78d2      	ldrb	r2, [r2, #3]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	061a      	lsls	r2, r3, #24
 8004d40:	4b41      	ldr	r3, [pc, #260]	; (8004e48 <MX_LWIP_Init+0x290>)
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	0619      	lsls	r1, r3, #24
 8004d46:	4b40      	ldr	r3, [pc, #256]	; (8004e48 <MX_LWIP_Init+0x290>)
 8004d48:	785b      	ldrb	r3, [r3, #1]
 8004d4a:	041b      	lsls	r3, r3, #16
 8004d4c:	4319      	orrs	r1, r3
 8004d4e:	4b3e      	ldr	r3, [pc, #248]	; (8004e48 <MX_LWIP_Init+0x290>)
 8004d50:	789b      	ldrb	r3, [r3, #2]
 8004d52:	021b      	lsls	r3, r3, #8
 8004d54:	430b      	orrs	r3, r1
 8004d56:	493c      	ldr	r1, [pc, #240]	; (8004e48 <MX_LWIP_Init+0x290>)
 8004d58:	78c9      	ldrb	r1, [r1, #3]
 8004d5a:	430b      	orrs	r3, r1
 8004d5c:	021b      	lsls	r3, r3, #8
 8004d5e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d62:	431a      	orrs	r2, r3
 8004d64:	4b38      	ldr	r3, [pc, #224]	; (8004e48 <MX_LWIP_Init+0x290>)
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	0619      	lsls	r1, r3, #24
 8004d6a:	4b37      	ldr	r3, [pc, #220]	; (8004e48 <MX_LWIP_Init+0x290>)
 8004d6c:	785b      	ldrb	r3, [r3, #1]
 8004d6e:	041b      	lsls	r3, r3, #16
 8004d70:	4319      	orrs	r1, r3
 8004d72:	4b35      	ldr	r3, [pc, #212]	; (8004e48 <MX_LWIP_Init+0x290>)
 8004d74:	789b      	ldrb	r3, [r3, #2]
 8004d76:	021b      	lsls	r3, r3, #8
 8004d78:	430b      	orrs	r3, r1
 8004d7a:	4933      	ldr	r1, [pc, #204]	; (8004e48 <MX_LWIP_Init+0x290>)
 8004d7c:	78c9      	ldrb	r1, [r1, #3]
 8004d7e:	430b      	orrs	r3, r1
 8004d80:	0a1b      	lsrs	r3, r3, #8
 8004d82:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004d86:	431a      	orrs	r2, r3
 8004d88:	4b2f      	ldr	r3, [pc, #188]	; (8004e48 <MX_LWIP_Init+0x290>)
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	0619      	lsls	r1, r3, #24
 8004d8e:	4b2e      	ldr	r3, [pc, #184]	; (8004e48 <MX_LWIP_Init+0x290>)
 8004d90:	785b      	ldrb	r3, [r3, #1]
 8004d92:	041b      	lsls	r3, r3, #16
 8004d94:	4319      	orrs	r1, r3
 8004d96:	4b2c      	ldr	r3, [pc, #176]	; (8004e48 <MX_LWIP_Init+0x290>)
 8004d98:	789b      	ldrb	r3, [r3, #2]
 8004d9a:	021b      	lsls	r3, r3, #8
 8004d9c:	430b      	orrs	r3, r1
 8004d9e:	492a      	ldr	r1, [pc, #168]	; (8004e48 <MX_LWIP_Init+0x290>)
 8004da0:	78c9      	ldrb	r1, [r1, #3]
 8004da2:	430b      	orrs	r3, r1
 8004da4:	0e1b      	lsrs	r3, r3, #24
 8004da6:	4313      	orrs	r3, r2
 8004da8:	4a2a      	ldr	r2, [pc, #168]	; (8004e54 <MX_LWIP_Init+0x29c>)
 8004daa:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004dac:	4b2a      	ldr	r3, [pc, #168]	; (8004e58 <MX_LWIP_Init+0x2a0>)
 8004dae:	9302      	str	r3, [sp, #8]
 8004db0:	4b2a      	ldr	r3, [pc, #168]	; (8004e5c <MX_LWIP_Init+0x2a4>)
 8004db2:	9301      	str	r3, [sp, #4]
 8004db4:	2300      	movs	r3, #0
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	4b26      	ldr	r3, [pc, #152]	; (8004e54 <MX_LWIP_Init+0x29c>)
 8004dba:	4a25      	ldr	r2, [pc, #148]	; (8004e50 <MX_LWIP_Init+0x298>)
 8004dbc:	4923      	ldr	r1, [pc, #140]	; (8004e4c <MX_LWIP_Init+0x294>)
 8004dbe:	4828      	ldr	r0, [pc, #160]	; (8004e60 <MX_LWIP_Init+0x2a8>)
 8004dc0:	f006 f81c 	bl	800adfc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004dc4:	4826      	ldr	r0, [pc, #152]	; (8004e60 <MX_LWIP_Init+0x2a8>)
 8004dc6:	f006 f9cb 	bl	800b160 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004dca:	4b25      	ldr	r3, [pc, #148]	; (8004e60 <MX_LWIP_Init+0x2a8>)
 8004dcc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004dd0:	089b      	lsrs	r3, r3, #2
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d003      	beq.n	8004de4 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004ddc:	4820      	ldr	r0, [pc, #128]	; (8004e60 <MX_LWIP_Init+0x2a8>)
 8004dde:	f006 f9cf 	bl	800b180 <netif_set_up>
 8004de2:	e002      	b.n	8004dea <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004de4:	481e      	ldr	r0, [pc, #120]	; (8004e60 <MX_LWIP_Init+0x2a8>)
 8004de6:	f006 fa37 	bl	800b258 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8004dea:	491e      	ldr	r1, [pc, #120]	; (8004e64 <MX_LWIP_Init+0x2ac>)
 8004dec:	481c      	ldr	r0, [pc, #112]	; (8004e60 <MX_LWIP_Init+0x2a8>)
 8004dee:	f006 fac9 	bl	800b384 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8004df2:	2300      	movs	r3, #0
 8004df4:	623b      	str	r3, [r7, #32]
 8004df6:	2300      	movs	r3, #0
 8004df8:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8004dfa:	f107 0320 	add.w	r3, r7, #32
 8004dfe:	2101      	movs	r1, #1
 8004e00:	4618      	mov	r0, r3
 8004e02:	f000 fd97 	bl	8005934 <osSemaphoreCreate>
 8004e06:	4603      	mov	r3, r0
 8004e08:	4a17      	ldr	r2, [pc, #92]	; (8004e68 <MX_LWIP_Init+0x2b0>)
 8004e0a:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8004e0c:	4b17      	ldr	r3, [pc, #92]	; (8004e6c <MX_LWIP_Init+0x2b4>)
 8004e0e:	4a14      	ldr	r2, [pc, #80]	; (8004e60 <MX_LWIP_Init+0x2a8>)
 8004e10:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8004e12:	4b15      	ldr	r3, [pc, #84]	; (8004e68 <MX_LWIP_Init+0x2b0>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a15      	ldr	r2, [pc, #84]	; (8004e6c <MX_LWIP_Init+0x2b4>)
 8004e18:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8004e1a:	4b15      	ldr	r3, [pc, #84]	; (8004e70 <MX_LWIP_Init+0x2b8>)
 8004e1c:	1d3c      	adds	r4, r7, #4
 8004e1e:	461d      	mov	r5, r3
 8004e20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004e28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8004e2c:	1d3b      	adds	r3, r7, #4
 8004e2e:	490f      	ldr	r1, [pc, #60]	; (8004e6c <MX_LWIP_Init+0x2b4>)
 8004e30:	4618      	mov	r0, r3
 8004e32:	f000 fc82 	bl	800573a <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004e36:	bf00      	nop
 8004e38:	3728      	adds	r7, #40	; 0x28
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bdb0      	pop	{r4, r5, r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	2000430c 	.word	0x2000430c
 8004e44:	20004308 	.word	0x20004308
 8004e48:	200042cc 	.word	0x200042cc
 8004e4c:	20004304 	.word	0x20004304
 8004e50:	20004310 	.word	0x20004310
 8004e54:	20004314 	.word	0x20004314
 8004e58:	08008769 	.word	0x08008769
 8004e5c:	080054c9 	.word	0x080054c9
 8004e60:	200042d0 	.word	0x200042d0
 8004e64:	080055ad 	.word	0x080055ad
 8004e68:	200002f8 	.word	0x200002f8
 8004e6c:	200042c4 	.word	0x200042c4
 8004e70:	080169d4 	.word	0x080169d4

08004e74 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b08e      	sub	sp, #56	; 0x38
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e80:	2200      	movs	r2, #0
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	605a      	str	r2, [r3, #4]
 8004e86:	609a      	str	r2, [r3, #8]
 8004e88:	60da      	str	r2, [r3, #12]
 8004e8a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a52      	ldr	r2, [pc, #328]	; (8004fdc <HAL_ETH_MspInit+0x168>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	f040 809e 	bne.w	8004fd4 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004e98:	4b51      	ldr	r3, [pc, #324]	; (8004fe0 <HAL_ETH_MspInit+0x16c>)
 8004e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9c:	4a50      	ldr	r2, [pc, #320]	; (8004fe0 <HAL_ETH_MspInit+0x16c>)
 8004e9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ea2:	6313      	str	r3, [r2, #48]	; 0x30
 8004ea4:	4b4e      	ldr	r3, [pc, #312]	; (8004fe0 <HAL_ETH_MspInit+0x16c>)
 8004ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eac:	623b      	str	r3, [r7, #32]
 8004eae:	6a3b      	ldr	r3, [r7, #32]
 8004eb0:	4b4b      	ldr	r3, [pc, #300]	; (8004fe0 <HAL_ETH_MspInit+0x16c>)
 8004eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb4:	4a4a      	ldr	r2, [pc, #296]	; (8004fe0 <HAL_ETH_MspInit+0x16c>)
 8004eb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004eba:	6313      	str	r3, [r2, #48]	; 0x30
 8004ebc:	4b48      	ldr	r3, [pc, #288]	; (8004fe0 <HAL_ETH_MspInit+0x16c>)
 8004ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ec4:	61fb      	str	r3, [r7, #28]
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	4b45      	ldr	r3, [pc, #276]	; (8004fe0 <HAL_ETH_MspInit+0x16c>)
 8004eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ecc:	4a44      	ldr	r2, [pc, #272]	; (8004fe0 <HAL_ETH_MspInit+0x16c>)
 8004ece:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ed2:	6313      	str	r3, [r2, #48]	; 0x30
 8004ed4:	4b42      	ldr	r3, [pc, #264]	; (8004fe0 <HAL_ETH_MspInit+0x16c>)
 8004ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004edc:	61bb      	str	r3, [r7, #24]
 8004ede:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ee0:	4b3f      	ldr	r3, [pc, #252]	; (8004fe0 <HAL_ETH_MspInit+0x16c>)
 8004ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee4:	4a3e      	ldr	r2, [pc, #248]	; (8004fe0 <HAL_ETH_MspInit+0x16c>)
 8004ee6:	f043 0304 	orr.w	r3, r3, #4
 8004eea:	6313      	str	r3, [r2, #48]	; 0x30
 8004eec:	4b3c      	ldr	r3, [pc, #240]	; (8004fe0 <HAL_ETH_MspInit+0x16c>)
 8004eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	617b      	str	r3, [r7, #20]
 8004ef6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ef8:	4b39      	ldr	r3, [pc, #228]	; (8004fe0 <HAL_ETH_MspInit+0x16c>)
 8004efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efc:	4a38      	ldr	r2, [pc, #224]	; (8004fe0 <HAL_ETH_MspInit+0x16c>)
 8004efe:	f043 0301 	orr.w	r3, r3, #1
 8004f02:	6313      	str	r3, [r2, #48]	; 0x30
 8004f04:	4b36      	ldr	r3, [pc, #216]	; (8004fe0 <HAL_ETH_MspInit+0x16c>)
 8004f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	613b      	str	r3, [r7, #16]
 8004f0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f10:	4b33      	ldr	r3, [pc, #204]	; (8004fe0 <HAL_ETH_MspInit+0x16c>)
 8004f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f14:	4a32      	ldr	r2, [pc, #200]	; (8004fe0 <HAL_ETH_MspInit+0x16c>)
 8004f16:	f043 0302 	orr.w	r3, r3, #2
 8004f1a:	6313      	str	r3, [r2, #48]	; 0x30
 8004f1c:	4b30      	ldr	r3, [pc, #192]	; (8004fe0 <HAL_ETH_MspInit+0x16c>)
 8004f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	60fb      	str	r3, [r7, #12]
 8004f26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004f28:	4b2d      	ldr	r3, [pc, #180]	; (8004fe0 <HAL_ETH_MspInit+0x16c>)
 8004f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2c:	4a2c      	ldr	r2, [pc, #176]	; (8004fe0 <HAL_ETH_MspInit+0x16c>)
 8004f2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f32:	6313      	str	r3, [r2, #48]	; 0x30
 8004f34:	4b2a      	ldr	r3, [pc, #168]	; (8004fe0 <HAL_ETH_MspInit+0x16c>)
 8004f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3c:	60bb      	str	r3, [r7, #8]
 8004f3e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004f40:	2332      	movs	r3, #50	; 0x32
 8004f42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f44:	2302      	movs	r3, #2
 8004f46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004f50:	230b      	movs	r3, #11
 8004f52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f58:	4619      	mov	r1, r3
 8004f5a:	4822      	ldr	r0, [pc, #136]	; (8004fe4 <HAL_ETH_MspInit+0x170>)
 8004f5c:	f7fd fb56 	bl	800260c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004f60:	2386      	movs	r3, #134	; 0x86
 8004f62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f64:	2302      	movs	r3, #2
 8004f66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004f70:	230b      	movs	r3, #11
 8004f72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f78:	4619      	mov	r1, r3
 8004f7a:	481b      	ldr	r0, [pc, #108]	; (8004fe8 <HAL_ETH_MspInit+0x174>)
 8004f7c:	f7fd fb46 	bl	800260c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004f80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f86:	2302      	movs	r3, #2
 8004f88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004f92:	230b      	movs	r3, #11
 8004f94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004f96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	4813      	ldr	r0, [pc, #76]	; (8004fec <HAL_ETH_MspInit+0x178>)
 8004f9e:	f7fd fb35 	bl	800260c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004fa2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004fa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fa8:	2302      	movs	r3, #2
 8004faa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fac:	2300      	movs	r3, #0
 8004fae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004fb4:	230b      	movs	r3, #11
 8004fb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004fb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	480c      	ldr	r0, [pc, #48]	; (8004ff0 <HAL_ETH_MspInit+0x17c>)
 8004fc0:	f7fd fb24 	bl	800260c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	2105      	movs	r1, #5
 8004fc8:	203d      	movs	r0, #61	; 0x3d
 8004fca:	f7fc f971 	bl	80012b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004fce:	203d      	movs	r0, #61	; 0x3d
 8004fd0:	f7fc f98a 	bl	80012e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004fd4:	bf00      	nop
 8004fd6:	3738      	adds	r7, #56	; 0x38
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	40028000 	.word	0x40028000
 8004fe0:	40023800 	.word	0x40023800
 8004fe4:	40020800 	.word	0x40020800
 8004fe8:	40020000 	.word	0x40020000
 8004fec:	40020400 	.word	0x40020400
 8004ff0:	40021800 	.word	0x40021800

08004ff4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8004ffc:	4b04      	ldr	r3, [pc, #16]	; (8005010 <HAL_ETH_RxCpltCallback+0x1c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4618      	mov	r0, r3
 8005002:	f000 fd17 	bl	8005a34 <osSemaphoreRelease>
}
 8005006:	bf00      	nop
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	200002fc 	.word	0x200002fc

08005014 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005014:	b5b0      	push	{r4, r5, r7, lr}
 8005016:	b090      	sub	sp, #64	; 0x40
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800501c:	2300      	movs	r3, #0
 800501e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005020:	4b60      	ldr	r3, [pc, #384]	; (80051a4 <low_level_init+0x190>)
 8005022:	4a61      	ldr	r2, [pc, #388]	; (80051a8 <low_level_init+0x194>)
 8005024:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8005026:	4b5f      	ldr	r3, [pc, #380]	; (80051a4 <low_level_init+0x190>)
 8005028:	2201      	movs	r2, #1
 800502a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800502c:	4b5d      	ldr	r3, [pc, #372]	; (80051a4 <low_level_init+0x190>)
 800502e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005032:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005034:	4b5b      	ldr	r3, [pc, #364]	; (80051a4 <low_level_init+0x190>)
 8005036:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800503a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800503c:	4b59      	ldr	r3, [pc, #356]	; (80051a4 <low_level_init+0x190>)
 800503e:	2200      	movs	r2, #0
 8005040:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8005042:	2300      	movs	r3, #0
 8005044:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8005048:	2380      	movs	r3, #128	; 0x80
 800504a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800504e:	23e1      	movs	r3, #225	; 0xe1
 8005050:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8005054:	2300      	movs	r3, #0
 8005056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800505a:	2300      	movs	r3, #0
 800505c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8005060:	2300      	movs	r3, #0
 8005062:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8005066:	4a4f      	ldr	r2, [pc, #316]	; (80051a4 <low_level_init+0x190>)
 8005068:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800506c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800506e:	4b4d      	ldr	r3, [pc, #308]	; (80051a4 <low_level_init+0x190>)
 8005070:	2201      	movs	r2, #1
 8005072:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005074:	4b4b      	ldr	r3, [pc, #300]	; (80051a4 <low_level_init+0x190>)
 8005076:	2200      	movs	r2, #0
 8005078:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800507a:	4b4a      	ldr	r3, [pc, #296]	; (80051a4 <low_level_init+0x190>)
 800507c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005080:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005082:	4848      	ldr	r0, [pc, #288]	; (80051a4 <low_level_init+0x190>)
 8005084:	f7fc f93e 	bl	8001304 <HAL_ETH_Init>
 8005088:	4603      	mov	r3, r0
 800508a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800508e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005092:	2b00      	cmp	r3, #0
 8005094:	d108      	bne.n	80050a8 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800509c:	f043 0304 	orr.w	r3, r3, #4
 80050a0:	b2da      	uxtb	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80050a8:	2304      	movs	r3, #4
 80050aa:	4a40      	ldr	r2, [pc, #256]	; (80051ac <low_level_init+0x198>)
 80050ac:	4940      	ldr	r1, [pc, #256]	; (80051b0 <low_level_init+0x19c>)
 80050ae:	483d      	ldr	r0, [pc, #244]	; (80051a4 <low_level_init+0x190>)
 80050b0:	f7fc fac2 	bl	8001638 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80050b4:	2304      	movs	r3, #4
 80050b6:	4a3f      	ldr	r2, [pc, #252]	; (80051b4 <low_level_init+0x1a0>)
 80050b8:	493f      	ldr	r1, [pc, #252]	; (80051b8 <low_level_init+0x1a4>)
 80050ba:	483a      	ldr	r0, [pc, #232]	; (80051a4 <low_level_init+0x190>)
 80050bc:	f7fc fb25 	bl	800170a <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2206      	movs	r2, #6
 80050c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80050c8:	4b36      	ldr	r3, [pc, #216]	; (80051a4 <low_level_init+0x190>)
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	781a      	ldrb	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80050d4:	4b33      	ldr	r3, [pc, #204]	; (80051a4 <low_level_init+0x190>)
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	785a      	ldrb	r2, [r3, #1]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80050e0:	4b30      	ldr	r3, [pc, #192]	; (80051a4 <low_level_init+0x190>)
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	789a      	ldrb	r2, [r3, #2]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80050ec:	4b2d      	ldr	r3, [pc, #180]	; (80051a4 <low_level_init+0x190>)
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	78da      	ldrb	r2, [r3, #3]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80050f8:	4b2a      	ldr	r3, [pc, #168]	; (80051a4 <low_level_init+0x190>)
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	791a      	ldrb	r2, [r3, #4]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005104:	4b27      	ldr	r3, [pc, #156]	; (80051a4 <low_level_init+0x190>)
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	795a      	ldrb	r2, [r3, #5]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005116:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800511e:	f043 030a 	orr.w	r3, r3, #10
 8005122:	b2da      	uxtb	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800512a:	2300      	movs	r3, #0
 800512c:	62bb      	str	r3, [r7, #40]	; 0x28
 800512e:	2300      	movs	r3, #0
 8005130:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8005132:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005136:	2101      	movs	r1, #1
 8005138:	4618      	mov	r0, r3
 800513a:	f000 fbfb 	bl	8005934 <osSemaphoreCreate>
 800513e:	4603      	mov	r3, r0
 8005140:	4a1e      	ldr	r2, [pc, #120]	; (80051bc <low_level_init+0x1a8>)
 8005142:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8005144:	4b1e      	ldr	r3, [pc, #120]	; (80051c0 <low_level_init+0x1ac>)
 8005146:	f107 040c 	add.w	r4, r7, #12
 800514a:	461d      	mov	r5, r3
 800514c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800514e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005150:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005154:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8005158:	f107 030c 	add.w	r3, r7, #12
 800515c:	6879      	ldr	r1, [r7, #4]
 800515e:	4618      	mov	r0, r3
 8005160:	f000 faeb 	bl	800573a <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8005164:	480f      	ldr	r0, [pc, #60]	; (80051a4 <low_level_init+0x190>)
 8005166:	f7fc fdf8 	bl	8001d5a <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800516a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800516e:	461a      	mov	r2, r3
 8005170:	211d      	movs	r1, #29
 8005172:	480c      	ldr	r0, [pc, #48]	; (80051a4 <low_level_init+0x190>)
 8005174:	f7fc fd23 	bl	8001bbe <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8005178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517a:	f043 030b 	orr.w	r3, r3, #11
 800517e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8005180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005182:	461a      	mov	r2, r3
 8005184:	211d      	movs	r1, #29
 8005186:	4807      	ldr	r0, [pc, #28]	; (80051a4 <low_level_init+0x190>)
 8005188:	f7fc fd81 	bl	8001c8e <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800518c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005190:	461a      	mov	r2, r3
 8005192:	211d      	movs	r1, #29
 8005194:	4803      	ldr	r0, [pc, #12]	; (80051a4 <low_level_init+0x190>)
 8005196:	f7fc fd12 	bl	8001bbe <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800519a:	bf00      	nop
 800519c:	3740      	adds	r7, #64	; 0x40
 800519e:	46bd      	mov	sp, r7
 80051a0:	bdb0      	pop	{r4, r5, r7, pc}
 80051a2:	bf00      	nop
 80051a4:	20005be8 	.word	0x20005be8
 80051a8:	40028000 	.word	0x40028000
 80051ac:	20005c30 	.word	0x20005c30
 80051b0:	20004318 	.word	0x20004318
 80051b4:	20004398 	.word	0x20004398
 80051b8:	20005b68 	.word	0x20005b68
 80051bc:	200002fc 	.word	0x200002fc
 80051c0:	080169f8 	.word	0x080169f8

080051c4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b08a      	sub	sp, #40	; 0x28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80051ce:	4b4b      	ldr	r3, [pc, #300]	; (80052fc <low_level_output+0x138>)
 80051d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80051d6:	2300      	movs	r3, #0
 80051d8:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80051da:	2300      	movs	r3, #0
 80051dc:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80051de:	2300      	movs	r3, #0
 80051e0:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80051e2:	2300      	movs	r3, #0
 80051e4:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80051e6:	4b45      	ldr	r3, [pc, #276]	; (80052fc <low_level_output+0x138>)
 80051e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ea:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80051ec:	2300      	movs	r3, #0
 80051ee:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	623b      	str	r3, [r7, #32]
 80051f4:	e05a      	b.n	80052ac <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	da03      	bge.n	8005206 <low_level_output+0x42>
      {
        errval = ERR_USE;
 80051fe:	23f8      	movs	r3, #248	; 0xf8
 8005200:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8005204:	e05c      	b.n	80052c0 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8005206:	6a3b      	ldr	r3, [r7, #32]
 8005208:	895b      	ldrh	r3, [r3, #10]
 800520a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800520c:	2300      	movs	r3, #0
 800520e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005210:	e02f      	b.n	8005272 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8005212:	69fa      	ldr	r2, [r7, #28]
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	18d0      	adds	r0, r2, r3
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	685a      	ldr	r2, [r3, #4]
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	18d1      	adds	r1, r2, r3
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005226:	1a9b      	subs	r3, r3, r2
 8005228:	461a      	mov	r2, r3
 800522a:	f010 f853 	bl	80152d4 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	da03      	bge.n	8005244 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800523c:	23f8      	movs	r3, #248	; 0xf8
 800523e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8005242:	e03d      	b.n	80052c0 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	4413      	add	r3, r2
 8005250:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005254:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005260:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800526c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800526e:	2300      	movs	r3, #0
 8005270:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	4413      	add	r3, r2
 8005278:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800527c:	4293      	cmp	r3, r2
 800527e:	d8c8      	bhi.n	8005212 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005280:	69fa      	ldr	r2, [r7, #28]
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	18d0      	adds	r0, r2, r3
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	685a      	ldr	r2, [r3, #4]
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	4413      	add	r3, r2
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	4619      	mov	r1, r3
 8005292:	f010 f81f 	bl	80152d4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005296:	693a      	ldr	r2, [r7, #16]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	4413      	add	r3, r2
 800529c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4413      	add	r3, r2
 80052a4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	623b      	str	r3, [r7, #32]
 80052ac:	6a3b      	ldr	r3, [r7, #32]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1a1      	bne.n	80051f6 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80052b2:	6979      	ldr	r1, [r7, #20]
 80052b4:	4811      	ldr	r0, [pc, #68]	; (80052fc <low_level_output+0x138>)
 80052b6:	f7fc fa95 	bl	80017e4 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80052ba:	2300      	movs	r3, #0
 80052bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80052c0:	4b0e      	ldr	r3, [pc, #56]	; (80052fc <low_level_output+0x138>)
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	f241 0314 	movw	r3, #4116	; 0x1014
 80052c8:	4413      	add	r3, r2
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0320 	and.w	r3, r3, #32
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00d      	beq.n	80052f0 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80052d4:	4b09      	ldr	r3, [pc, #36]	; (80052fc <low_level_output+0x138>)
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	f241 0314 	movw	r3, #4116	; 0x1014
 80052dc:	4413      	add	r3, r2
 80052de:	2220      	movs	r2, #32
 80052e0:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80052e2:	4b06      	ldr	r3, [pc, #24]	; (80052fc <low_level_output+0x138>)
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	f241 0304 	movw	r3, #4100	; 0x1004
 80052ea:	4413      	add	r3, r2
 80052ec:	2200      	movs	r2, #0
 80052ee:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80052f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3728      	adds	r7, #40	; 0x28
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	20005be8 	.word	0x20005be8

08005300 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b08c      	sub	sp, #48	; 0x30
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005308:	2300      	movs	r3, #0
 800530a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800530c:	2300      	movs	r3, #0
 800530e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8005310:	2300      	movs	r3, #0
 8005312:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8005314:	2300      	movs	r3, #0
 8005316:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8005318:	2300      	movs	r3, #0
 800531a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800531c:	2300      	movs	r3, #0
 800531e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8005320:	2300      	movs	r3, #0
 8005322:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8005324:	484f      	ldr	r0, [pc, #316]	; (8005464 <low_level_input+0x164>)
 8005326:	f7fc fb47 	bl	80019b8 <HAL_ETH_GetReceivedFrame_IT>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d001      	beq.n	8005334 <low_level_input+0x34>

    return NULL;
 8005330:	2300      	movs	r3, #0
 8005332:	e092      	b.n	800545a <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8005334:	4b4b      	ldr	r3, [pc, #300]	; (8005464 <low_level_input+0x164>)
 8005336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005338:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800533a:	4b4a      	ldr	r3, [pc, #296]	; (8005464 <low_level_input+0x164>)
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8005340:	89fb      	ldrh	r3, [r7, #14]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d007      	beq.n	8005356 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005346:	89fb      	ldrh	r3, [r7, #14]
 8005348:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800534c:	4619      	mov	r1, r3
 800534e:	2000      	movs	r0, #0
 8005350:	f006 f8e2 	bl	800b518 <pbuf_alloc>
 8005354:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8005356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005358:	2b00      	cmp	r3, #0
 800535a:	d04b      	beq.n	80053f4 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800535c:	4b41      	ldr	r3, [pc, #260]	; (8005464 <low_level_input+0x164>)
 800535e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005360:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8005362:	2300      	movs	r3, #0
 8005364:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005368:	62bb      	str	r3, [r7, #40]	; 0x28
 800536a:	e040      	b.n	80053ee <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800536c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536e:	895b      	ldrh	r3, [r3, #10]
 8005370:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8005372:	2300      	movs	r3, #0
 8005374:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005376:	e021      	b.n	80053bc <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8005378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	18d0      	adds	r0, r2, r3
 8005380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	18d1      	adds	r1, r2, r3
 8005386:	69fa      	ldr	r2, [r7, #28]
 8005388:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800538c:	1a9b      	subs	r3, r3, r2
 800538e:	461a      	mov	r2, r3
 8005390:	f00f ffa0 	bl	80152d4 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005394:	6a3b      	ldr	r3, [r7, #32]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800539a:	6a3b      	ldr	r3, [r7, #32]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80053a0:	69fa      	ldr	r2, [r7, #28]
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	4413      	add	r3, r2
 80053a6:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80053aa:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80053b6:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80053b8:	2300      	movs	r3, #0
 80053ba:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	4413      	add	r3, r2
 80053c2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d8d6      	bhi.n	8005378 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80053ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053cc:	685a      	ldr	r2, [r3, #4]
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	18d0      	adds	r0, r2, r3
 80053d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	4413      	add	r3, r2
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	4619      	mov	r1, r3
 80053dc:	f00f ff7a 	bl	80152d4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80053e0:	69fa      	ldr	r2, [r7, #28]
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	4413      	add	r3, r2
 80053e6:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80053e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80053ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1bb      	bne.n	800536c <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80053f4:	4b1b      	ldr	r3, [pc, #108]	; (8005464 <low_level_input+0x164>)
 80053f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f8:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80053fa:	2300      	movs	r3, #0
 80053fc:	613b      	str	r3, [r7, #16]
 80053fe:	e00b      	b.n	8005418 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8005400:	6a3b      	ldr	r3, [r7, #32]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005408:	6a3b      	ldr	r3, [r7, #32]
 800540a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800540c:	6a3b      	ldr	r3, [r7, #32]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	3301      	adds	r3, #1
 8005416:	613b      	str	r3, [r7, #16]
 8005418:	4b12      	ldr	r3, [pc, #72]	; (8005464 <low_level_input+0x164>)
 800541a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	429a      	cmp	r2, r3
 8005420:	d3ee      	bcc.n	8005400 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8005422:	4b10      	ldr	r3, [pc, #64]	; (8005464 <low_level_input+0x164>)
 8005424:	2200      	movs	r2, #0
 8005426:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8005428:	4b0e      	ldr	r3, [pc, #56]	; (8005464 <low_level_input+0x164>)
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	f241 0314 	movw	r3, #4116	; 0x1014
 8005430:	4413      	add	r3, r2
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00d      	beq.n	8005458 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800543c:	4b09      	ldr	r3, [pc, #36]	; (8005464 <low_level_input+0x164>)
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	f241 0314 	movw	r3, #4116	; 0x1014
 8005444:	4413      	add	r3, r2
 8005446:	2280      	movs	r2, #128	; 0x80
 8005448:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800544a:	4b06      	ldr	r3, [pc, #24]	; (8005464 <low_level_input+0x164>)
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	f241 0308 	movw	r3, #4104	; 0x1008
 8005452:	4413      	add	r3, r2
 8005454:	2200      	movs	r2, #0
 8005456:	601a      	str	r2, [r3, #0]
  }
  return p;
 8005458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800545a:	4618      	mov	r0, r3
 800545c:	3730      	adds	r7, #48	; 0x30
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	20005be8 	.word	0x20005be8

08005468 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005474:	4b12      	ldr	r3, [pc, #72]	; (80054c0 <ethernetif_input+0x58>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f04f 31ff 	mov.w	r1, #4294967295
 800547c:	4618      	mov	r0, r3
 800547e:	f000 fa8b 	bl	8005998 <osSemaphoreWait>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1f5      	bne.n	8005474 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8005488:	480e      	ldr	r0, [pc, #56]	; (80054c4 <ethernetif_input+0x5c>)
 800548a:	f00f fe91 	bl	80151b0 <sys_mutex_lock>
        p = low_level_input( netif );
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f7ff ff36 	bl	8005300 <low_level_input>
 8005494:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00a      	beq.n	80054b2 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	68f9      	ldr	r1, [r7, #12]
 80054a2:	68b8      	ldr	r0, [r7, #8]
 80054a4:	4798      	blx	r3
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d002      	beq.n	80054b2 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 80054ac:	68b8      	ldr	r0, [r7, #8]
 80054ae:	f006 fb17 	bl	800bae0 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 80054b2:	4804      	ldr	r0, [pc, #16]	; (80054c4 <ethernetif_input+0x5c>)
 80054b4:	f00f fe8b 	bl	80151ce <sys_mutex_unlock>
      } while(p!=NULL);
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1e4      	bne.n	8005488 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80054be:	e7d9      	b.n	8005474 <ethernetif_input+0xc>
 80054c0:	200002fc 	.word	0x200002fc
 80054c4:	20007400 	.word	0x20007400

080054c8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d106      	bne.n	80054e4 <ethernetif_init+0x1c>
 80054d6:	4b0e      	ldr	r3, [pc, #56]	; (8005510 <ethernetif_init+0x48>)
 80054d8:	f240 2235 	movw	r2, #565	; 0x235
 80054dc:	490d      	ldr	r1, [pc, #52]	; (8005514 <ethernetif_init+0x4c>)
 80054de:	480e      	ldr	r0, [pc, #56]	; (8005518 <ethernetif_init+0x50>)
 80054e0:	f00f ff28 	bl	8015334 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2273      	movs	r2, #115	; 0x73
 80054e8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2274      	movs	r2, #116	; 0x74
 80054f0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a09      	ldr	r2, [pc, #36]	; (800551c <ethernetif_init+0x54>)
 80054f8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a08      	ldr	r2, [pc, #32]	; (8005520 <ethernetif_init+0x58>)
 80054fe:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f7ff fd87 	bl	8005014 <low_level_init>

  return ERR_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3708      	adds	r7, #8
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	08016a14 	.word	0x08016a14
 8005514:	08016a30 	.word	0x08016a30
 8005518:	08016a40 	.word	0x08016a40
 800551c:	08013109 	.word	0x08013109
 8005520:	080051c5 	.word	0x080051c5

08005524 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005528:	f7fb fdda 	bl	80010e0 <HAL_GetTick>
 800552c:	4603      	mov	r3, r0
}
 800552e:	4618      	mov	r0, r3
 8005530:	bd80      	pop	{r7, pc}
	...

08005534 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800553c:	2300      	movs	r3, #0
 800553e:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005544:	f107 0308 	add.w	r3, r7, #8
 8005548:	461a      	mov	r2, r3
 800554a:	2101      	movs	r1, #1
 800554c:	4816      	ldr	r0, [pc, #88]	; (80055a8 <ethernetif_set_link+0x74>)
 800554e:	f7fc fb36 	bl	8001bbe <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	f003 0304 	and.w	r3, r3, #4
 8005558:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005562:	f003 0304 	and.w	r3, r3, #4
 8005566:	2b00      	cmp	r3, #0
 8005568:	d108      	bne.n	800557c <ethernetif_set_link+0x48>
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d005      	beq.n	800557c <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4618      	mov	r0, r3
 8005576:	f005 fea1 	bl	800b2bc <netif_set_link_up>
 800557a:	e011      	b.n	80055a0 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005584:	089b      	lsrs	r3, r3, #2
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b00      	cmp	r3, #0
 800558e:	d007      	beq.n	80055a0 <ethernetif_set_link+0x6c>
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d104      	bne.n	80055a0 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4618      	mov	r0, r3
 800559c:	f005 fec2 	bl	800b324 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 80055a0:	20c8      	movs	r0, #200	; 0xc8
 80055a2:	f000 f916 	bl	80057d2 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80055a6:	e7cd      	b.n	8005544 <ethernetif_set_link+0x10>
 80055a8:	20005be8 	.word	0x20005be8

080055ac <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80055b4:	2300      	movs	r3, #0
 80055b6:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80055b8:	2300      	movs	r3, #0
 80055ba:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80055c2:	089b      	lsrs	r3, r3, #2
 80055c4:	f003 0301 	and.w	r3, r3, #1
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d05d      	beq.n	800568a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80055ce:	4b34      	ldr	r3, [pc, #208]	; (80056a0 <ethernetif_update_config+0xf4>)
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d03f      	beq.n	8005656 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80055d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80055da:	2100      	movs	r1, #0
 80055dc:	4830      	ldr	r0, [pc, #192]	; (80056a0 <ethernetif_update_config+0xf4>)
 80055de:	f7fc fb56 	bl	8001c8e <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80055e2:	f7fb fd7d 	bl	80010e0 <HAL_GetTick>
 80055e6:	4603      	mov	r3, r0
 80055e8:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80055ea:	f107 0308 	add.w	r3, r7, #8
 80055ee:	461a      	mov	r2, r3
 80055f0:	2101      	movs	r1, #1
 80055f2:	482b      	ldr	r0, [pc, #172]	; (80056a0 <ethernetif_update_config+0xf4>)
 80055f4:	f7fc fae3 	bl	8001bbe <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80055f8:	f7fb fd72 	bl	80010e0 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005606:	d828      	bhi.n	800565a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	f003 0320 	and.w	r3, r3, #32
 800560e:	2b00      	cmp	r3, #0
 8005610:	d0eb      	beq.n	80055ea <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8005612:	f107 0308 	add.w	r3, r7, #8
 8005616:	461a      	mov	r2, r3
 8005618:	2110      	movs	r1, #16
 800561a:	4821      	ldr	r0, [pc, #132]	; (80056a0 <ethernetif_update_config+0xf4>)
 800561c:	f7fc facf 	bl	8001bbe <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	f003 0304 	and.w	r3, r3, #4
 8005626:	2b00      	cmp	r3, #0
 8005628:	d004      	beq.n	8005634 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800562a:	4b1d      	ldr	r3, [pc, #116]	; (80056a0 <ethernetif_update_config+0xf4>)
 800562c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005630:	60da      	str	r2, [r3, #12]
 8005632:	e002      	b.n	800563a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005634:	4b1a      	ldr	r3, [pc, #104]	; (80056a0 <ethernetif_update_config+0xf4>)
 8005636:	2200      	movs	r2, #0
 8005638:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	f003 0302 	and.w	r3, r3, #2
 8005640:	2b00      	cmp	r3, #0
 8005642:	d003      	beq.n	800564c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8005644:	4b16      	ldr	r3, [pc, #88]	; (80056a0 <ethernetif_update_config+0xf4>)
 8005646:	2200      	movs	r2, #0
 8005648:	609a      	str	r2, [r3, #8]
 800564a:	e016      	b.n	800567a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800564c:	4b14      	ldr	r3, [pc, #80]	; (80056a0 <ethernetif_update_config+0xf4>)
 800564e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005652:	609a      	str	r2, [r3, #8]
 8005654:	e011      	b.n	800567a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8005656:	bf00      	nop
 8005658:	e000      	b.n	800565c <ethernetif_update_config+0xb0>
          goto error;
 800565a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800565c:	4b10      	ldr	r3, [pc, #64]	; (80056a0 <ethernetif_update_config+0xf4>)
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	08db      	lsrs	r3, r3, #3
 8005662:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8005664:	4b0e      	ldr	r3, [pc, #56]	; (80056a0 <ethernetif_update_config+0xf4>)
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	085b      	lsrs	r3, r3, #1
 800566a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800566c:	4313      	orrs	r3, r2
 800566e:	b29b      	uxth	r3, r3
 8005670:	461a      	mov	r2, r3
 8005672:	2100      	movs	r1, #0
 8005674:	480a      	ldr	r0, [pc, #40]	; (80056a0 <ethernetif_update_config+0xf4>)
 8005676:	f7fc fb0a 	bl	8001c8e <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800567a:	2100      	movs	r1, #0
 800567c:	4808      	ldr	r0, [pc, #32]	; (80056a0 <ethernetif_update_config+0xf4>)
 800567e:	f7fc fbcb 	bl	8001e18 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8005682:	4807      	ldr	r0, [pc, #28]	; (80056a0 <ethernetif_update_config+0xf4>)
 8005684:	f7fc fb69 	bl	8001d5a <HAL_ETH_Start>
 8005688:	e002      	b.n	8005690 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800568a:	4805      	ldr	r0, [pc, #20]	; (80056a0 <ethernetif_update_config+0xf4>)
 800568c:	f7fc fb94 	bl	8001db8 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f807 	bl	80056a4 <ethernetif_notify_conn_changed>
}
 8005696:	bf00      	nop
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	20005be8 	.word	0x20005be8

080056a4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	4603      	mov	r3, r0
 80056c0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80056c2:	2300      	movs	r3, #0
 80056c4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80056c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056ca:	2b84      	cmp	r3, #132	; 0x84
 80056cc:	d005      	beq.n	80056da <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80056ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	4413      	add	r3, r2
 80056d6:	3303      	adds	r3, #3
 80056d8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80056da:	68fb      	ldr	r3, [r7, #12]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3714      	adds	r7, #20
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056ee:	f3ef 8305 	mrs	r3, IPSR
 80056f2:	607b      	str	r3, [r7, #4]
  return(result);
 80056f4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	bf14      	ite	ne
 80056fa:	2301      	movne	r3, #1
 80056fc:	2300      	moveq	r3, #0
 80056fe:	b2db      	uxtb	r3, r3
}
 8005700:	4618      	mov	r0, r3
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005710:	f001 fca6 	bl	8007060 <vTaskStartScheduler>
  
  return osOK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	bd80      	pop	{r7, pc}

0800571a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800571e:	f7ff ffe3 	bl	80056e8 <inHandlerMode>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d003      	beq.n	8005730 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005728:	f001 fdba 	bl	80072a0 <xTaskGetTickCountFromISR>
 800572c:	4603      	mov	r3, r0
 800572e:	e002      	b.n	8005736 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8005730:	f001 fda6 	bl	8007280 <xTaskGetTickCount>
 8005734:	4603      	mov	r3, r0
  }
}
 8005736:	4618      	mov	r0, r3
 8005738:	bd80      	pop	{r7, pc}

0800573a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800573a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800573c:	b089      	sub	sp, #36	; 0x24
 800573e:	af04      	add	r7, sp, #16
 8005740:	6078      	str	r0, [r7, #4]
 8005742:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	695b      	ldr	r3, [r3, #20]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d020      	beq.n	800578e <osThreadCreate+0x54>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d01c      	beq.n	800578e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685c      	ldr	r4, [r3, #4]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681d      	ldr	r5, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	691e      	ldr	r6, [r3, #16]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005766:	4618      	mov	r0, r3
 8005768:	f7ff ffa6 	bl	80056b8 <makeFreeRtosPriority>
 800576c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005776:	9202      	str	r2, [sp, #8]
 8005778:	9301      	str	r3, [sp, #4]
 800577a:	9100      	str	r1, [sp, #0]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	4632      	mov	r2, r6
 8005780:	4629      	mov	r1, r5
 8005782:	4620      	mov	r0, r4
 8005784:	f001 fa9a 	bl	8006cbc <xTaskCreateStatic>
 8005788:	4603      	mov	r3, r0
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	e01c      	b.n	80057c8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685c      	ldr	r4, [r3, #4]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800579a:	b29e      	uxth	r6, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7ff ff88 	bl	80056b8 <makeFreeRtosPriority>
 80057a8:	4602      	mov	r2, r0
 80057aa:	f107 030c 	add.w	r3, r7, #12
 80057ae:	9301      	str	r3, [sp, #4]
 80057b0:	9200      	str	r2, [sp, #0]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	4632      	mov	r2, r6
 80057b6:	4629      	mov	r1, r5
 80057b8:	4620      	mov	r0, r4
 80057ba:	f001 fae2 	bl	8006d82 <xTaskCreate>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d001      	beq.n	80057c8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80057c4:	2300      	movs	r3, #0
 80057c6:	e000      	b.n	80057ca <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80057c8:	68fb      	ldr	r3, [r7, #12]
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080057d2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b084      	sub	sp, #16
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d001      	beq.n	80057e8 <osDelay+0x16>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	e000      	b.n	80057ea <osDelay+0x18>
 80057e8:	2301      	movs	r3, #1
 80057ea:	4618      	mov	r0, r3
 80057ec:	f001 fc02 	bl	8006ff4 <vTaskDelay>
  
  return osOK;
 80057f0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b082      	sub	sp, #8
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d007      	beq.n	800581a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	4619      	mov	r1, r3
 8005810:	2001      	movs	r0, #1
 8005812:	f000 fc54 	bl	80060be <xQueueCreateMutexStatic>
 8005816:	4603      	mov	r3, r0
 8005818:	e003      	b.n	8005822 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800581a:	2001      	movs	r0, #1
 800581c:	f000 fc37 	bl	800608e <xQueueCreateMutex>
 8005820:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005822:	4618      	mov	r0, r3
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
	...

0800582c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005836:	2300      	movs	r3, #0
 8005838:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d101      	bne.n	8005844 <osMutexWait+0x18>
    return osErrorParameter;
 8005840:	2380      	movs	r3, #128	; 0x80
 8005842:	e03a      	b.n	80058ba <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005844:	2300      	movs	r3, #0
 8005846:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584e:	d103      	bne.n	8005858 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005850:	f04f 33ff 	mov.w	r3, #4294967295
 8005854:	60fb      	str	r3, [r7, #12]
 8005856:	e009      	b.n	800586c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d006      	beq.n	800586c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d101      	bne.n	800586c <osMutexWait+0x40>
      ticks = 1;
 8005868:	2301      	movs	r3, #1
 800586a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800586c:	f7ff ff3c 	bl	80056e8 <inHandlerMode>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d017      	beq.n	80058a6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005876:	f107 0308 	add.w	r3, r7, #8
 800587a:	461a      	mov	r2, r3
 800587c:	2100      	movs	r1, #0
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f001 f86e 	bl	8006960 <xQueueReceiveFromISR>
 8005884:	4603      	mov	r3, r0
 8005886:	2b01      	cmp	r3, #1
 8005888:	d001      	beq.n	800588e <osMutexWait+0x62>
      return osErrorOS;
 800588a:	23ff      	movs	r3, #255	; 0xff
 800588c:	e015      	b.n	80058ba <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d011      	beq.n	80058b8 <osMutexWait+0x8c>
 8005894:	4b0b      	ldr	r3, [pc, #44]	; (80058c4 <osMutexWait+0x98>)
 8005896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800589a:	601a      	str	r2, [r3, #0]
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	f3bf 8f6f 	isb	sy
 80058a4:	e008      	b.n	80058b8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80058a6:	68f9      	ldr	r1, [r7, #12]
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 ff45 	bl	8006738 <xQueueSemaphoreTake>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d001      	beq.n	80058b8 <osMutexWait+0x8c>
    return osErrorOS;
 80058b4:	23ff      	movs	r3, #255	; 0xff
 80058b6:	e000      	b.n	80058ba <osMutexWait+0x8e>
  }
  
  return osOK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3710      	adds	r7, #16
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	e000ed04 	.word	0xe000ed04

080058c8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80058d0:	2300      	movs	r3, #0
 80058d2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80058d4:	2300      	movs	r3, #0
 80058d6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80058d8:	f7ff ff06 	bl	80056e8 <inHandlerMode>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d016      	beq.n	8005910 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80058e2:	f107 0308 	add.w	r3, r7, #8
 80058e6:	4619      	mov	r1, r3
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fda9 	bl	8006440 <xQueueGiveFromISR>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d001      	beq.n	80058f8 <osMutexRelease+0x30>
      return osErrorOS;
 80058f4:	23ff      	movs	r3, #255	; 0xff
 80058f6:	e017      	b.n	8005928 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d013      	beq.n	8005926 <osMutexRelease+0x5e>
 80058fe:	4b0c      	ldr	r3, [pc, #48]	; (8005930 <osMutexRelease+0x68>)
 8005900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005904:	601a      	str	r2, [r3, #0]
 8005906:	f3bf 8f4f 	dsb	sy
 800590a:	f3bf 8f6f 	isb	sy
 800590e:	e00a      	b.n	8005926 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005910:	2300      	movs	r3, #0
 8005912:	2200      	movs	r2, #0
 8005914:	2100      	movs	r1, #0
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 fbec 	bl	80060f4 <xQueueGenericSend>
 800591c:	4603      	mov	r3, r0
 800591e:	2b01      	cmp	r3, #1
 8005920:	d001      	beq.n	8005926 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005922:	23ff      	movs	r3, #255	; 0xff
 8005924:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005926:	68fb      	ldr	r3, [r7, #12]
}
 8005928:	4618      	mov	r0, r3
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	e000ed04 	.word	0xe000ed04

08005934 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af02      	add	r7, sp, #8
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00f      	beq.n	8005966 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d10a      	bne.n	8005962 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	2203      	movs	r2, #3
 8005952:	9200      	str	r2, [sp, #0]
 8005954:	2200      	movs	r2, #0
 8005956:	2100      	movs	r1, #0
 8005958:	2001      	movs	r0, #1
 800595a:	f000 fa9b 	bl	8005e94 <xQueueGenericCreateStatic>
 800595e:	4603      	mov	r3, r0
 8005960:	e016      	b.n	8005990 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005962:	2300      	movs	r3, #0
 8005964:	e014      	b.n	8005990 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d110      	bne.n	800598e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800596c:	2203      	movs	r2, #3
 800596e:	2100      	movs	r1, #0
 8005970:	2001      	movs	r0, #1
 8005972:	f000 fb11 	bl	8005f98 <xQueueGenericCreate>
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d005      	beq.n	800598a <osSemaphoreCreate+0x56>
 800597e:	2300      	movs	r3, #0
 8005980:	2200      	movs	r2, #0
 8005982:	2100      	movs	r1, #0
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f000 fbb5 	bl	80060f4 <xQueueGenericSend>
      return sema;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	e000      	b.n	8005990 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800598e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005990:	4618      	mov	r0, r3
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80059a2:	2300      	movs	r3, #0
 80059a4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80059ac:	2380      	movs	r3, #128	; 0x80
 80059ae:	e03a      	b.n	8005a26 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80059b0:	2300      	movs	r3, #0
 80059b2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ba:	d103      	bne.n	80059c4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80059bc:	f04f 33ff 	mov.w	r3, #4294967295
 80059c0:	60fb      	str	r3, [r7, #12]
 80059c2:	e009      	b.n	80059d8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d006      	beq.n	80059d8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d101      	bne.n	80059d8 <osSemaphoreWait+0x40>
      ticks = 1;
 80059d4:	2301      	movs	r3, #1
 80059d6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80059d8:	f7ff fe86 	bl	80056e8 <inHandlerMode>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d017      	beq.n	8005a12 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80059e2:	f107 0308 	add.w	r3, r7, #8
 80059e6:	461a      	mov	r2, r3
 80059e8:	2100      	movs	r1, #0
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 ffb8 	bl	8006960 <xQueueReceiveFromISR>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d001      	beq.n	80059fa <osSemaphoreWait+0x62>
      return osErrorOS;
 80059f6:	23ff      	movs	r3, #255	; 0xff
 80059f8:	e015      	b.n	8005a26 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d011      	beq.n	8005a24 <osSemaphoreWait+0x8c>
 8005a00:	4b0b      	ldr	r3, [pc, #44]	; (8005a30 <osSemaphoreWait+0x98>)
 8005a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a06:	601a      	str	r2, [r3, #0]
 8005a08:	f3bf 8f4f 	dsb	sy
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	e008      	b.n	8005a24 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005a12:	68f9      	ldr	r1, [r7, #12]
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 fe8f 	bl	8006738 <xQueueSemaphoreTake>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d001      	beq.n	8005a24 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005a20:	23ff      	movs	r3, #255	; 0xff
 8005a22:	e000      	b.n	8005a26 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	e000ed04 	.word	0xe000ed04

08005a34 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005a40:	2300      	movs	r3, #0
 8005a42:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005a44:	f7ff fe50 	bl	80056e8 <inHandlerMode>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d016      	beq.n	8005a7c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005a4e:	f107 0308 	add.w	r3, r7, #8
 8005a52:	4619      	mov	r1, r3
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 fcf3 	bl	8006440 <xQueueGiveFromISR>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d001      	beq.n	8005a64 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005a60:	23ff      	movs	r3, #255	; 0xff
 8005a62:	e017      	b.n	8005a94 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d013      	beq.n	8005a92 <osSemaphoreRelease+0x5e>
 8005a6a:	4b0c      	ldr	r3, [pc, #48]	; (8005a9c <osSemaphoreRelease+0x68>)
 8005a6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a70:	601a      	str	r2, [r3, #0]
 8005a72:	f3bf 8f4f 	dsb	sy
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	e00a      	b.n	8005a92 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	2200      	movs	r2, #0
 8005a80:	2100      	movs	r1, #0
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 fb36 	bl	80060f4 <xQueueGenericSend>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d001      	beq.n	8005a92 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005a8e:	23ff      	movs	r3, #255	; 0xff
 8005a90:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8005a92:	68fb      	ldr	r3, [r7, #12]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	e000ed04 	.word	0xe000ed04

08005aa0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005aa0:	b590      	push	{r4, r7, lr}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af02      	add	r7, sp, #8
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d011      	beq.n	8005ad6 <osMessageCreate+0x36>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00d      	beq.n	8005ad6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6818      	ldr	r0, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6859      	ldr	r1, [r3, #4]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	689a      	ldr	r2, [r3, #8]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	2400      	movs	r4, #0
 8005acc:	9400      	str	r4, [sp, #0]
 8005ace:	f000 f9e1 	bl	8005e94 <xQueueGenericCreateStatic>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	e008      	b.n	8005ae8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6818      	ldr	r0, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	f000 fa59 	bl	8005f98 <xQueueGenericCreate>
 8005ae6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd90      	pop	{r4, r7, pc}

08005af0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005afc:	2300      	movs	r3, #0
 8005afe:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <osMessagePut+0x1e>
    ticks = 1;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005b0e:	f7ff fdeb 	bl	80056e8 <inHandlerMode>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d018      	beq.n	8005b4a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005b18:	f107 0210 	add.w	r2, r7, #16
 8005b1c:	f107 0108 	add.w	r1, r7, #8
 8005b20:	2300      	movs	r3, #0
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f000 fbec 	bl	8006300 <xQueueGenericSendFromISR>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d001      	beq.n	8005b32 <osMessagePut+0x42>
      return osErrorOS;
 8005b2e:	23ff      	movs	r3, #255	; 0xff
 8005b30:	e018      	b.n	8005b64 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d014      	beq.n	8005b62 <osMessagePut+0x72>
 8005b38:	4b0c      	ldr	r3, [pc, #48]	; (8005b6c <osMessagePut+0x7c>)
 8005b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	f3bf 8f4f 	dsb	sy
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	e00b      	b.n	8005b62 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005b4a:	f107 0108 	add.w	r1, r7, #8
 8005b4e:	2300      	movs	r3, #0
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f000 face 	bl	80060f4 <xQueueGenericSend>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d001      	beq.n	8005b62 <osMessagePut+0x72>
      return osErrorOS;
 8005b5e:	23ff      	movs	r3, #255	; 0xff
 8005b60:	e000      	b.n	8005b64 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3718      	adds	r7, #24
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	e000ed04 	.word	0xe000ed04

08005b70 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005b70:	b590      	push	{r4, r7, lr}
 8005b72:	b08b      	sub	sp, #44	; 0x2c
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005b80:	2300      	movs	r3, #0
 8005b82:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10a      	bne.n	8005ba0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005b8a:	2380      	movs	r3, #128	; 0x80
 8005b8c:	617b      	str	r3, [r7, #20]
    return event;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	461c      	mov	r4, r3
 8005b92:	f107 0314 	add.w	r3, r7, #20
 8005b96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005b9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005b9e:	e054      	b.n	8005c4a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bae:	d103      	bne.n	8005bb8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8005bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8005bb6:	e009      	b.n	8005bcc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d006      	beq.n	8005bcc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d101      	bne.n	8005bcc <osMessageGet+0x5c>
      ticks = 1;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005bcc:	f7ff fd8c 	bl	80056e8 <inHandlerMode>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d01c      	beq.n	8005c10 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005bd6:	f107 0220 	add.w	r2, r7, #32
 8005bda:	f107 0314 	add.w	r3, r7, #20
 8005bde:	3304      	adds	r3, #4
 8005be0:	4619      	mov	r1, r3
 8005be2:	68b8      	ldr	r0, [r7, #8]
 8005be4:	f000 febc 	bl	8006960 <xQueueReceiveFromISR>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d102      	bne.n	8005bf4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005bee:	2310      	movs	r3, #16
 8005bf0:	617b      	str	r3, [r7, #20]
 8005bf2:	e001      	b.n	8005bf8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005bf8:	6a3b      	ldr	r3, [r7, #32]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d01d      	beq.n	8005c3a <osMessageGet+0xca>
 8005bfe:	4b15      	ldr	r3, [pc, #84]	; (8005c54 <osMessageGet+0xe4>)
 8005c00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c04:	601a      	str	r2, [r3, #0]
 8005c06:	f3bf 8f4f 	dsb	sy
 8005c0a:	f3bf 8f6f 	isb	sy
 8005c0e:	e014      	b.n	8005c3a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005c10:	f107 0314 	add.w	r3, r7, #20
 8005c14:	3304      	adds	r3, #4
 8005c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c18:	4619      	mov	r1, r3
 8005c1a:	68b8      	ldr	r0, [r7, #8]
 8005c1c:	f000 fca6 	bl	800656c <xQueueReceive>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d102      	bne.n	8005c2c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005c26:	2310      	movs	r3, #16
 8005c28:	617b      	str	r3, [r7, #20]
 8005c2a:	e006      	b.n	8005c3a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <osMessageGet+0xc6>
 8005c32:	2300      	movs	r3, #0
 8005c34:	e000      	b.n	8005c38 <osMessageGet+0xc8>
 8005c36:	2340      	movs	r3, #64	; 0x40
 8005c38:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	461c      	mov	r4, r3
 8005c3e:	f107 0314 	add.w	r3, r7, #20
 8005c42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005c46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	372c      	adds	r7, #44	; 0x2c
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd90      	pop	{r4, r7, pc}
 8005c52:	bf00      	nop
 8005c54:	e000ed04 	.word	0xe000ed04

08005c58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f103 0208 	add.w	r2, r3, #8
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f103 0208 	add.w	r2, r3, #8
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f103 0208 	add.w	r2, r3, #8
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ca6:	bf00      	nop
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	b085      	sub	sp, #20
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	689a      	ldr	r2, [r3, #8]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	683a      	ldr	r2, [r7, #0]
 8005cdc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	601a      	str	r2, [r3, #0]
}
 8005cee:	bf00      	nop
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b085      	sub	sp, #20
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
 8005d02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d10:	d103      	bne.n	8005d1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	60fb      	str	r3, [r7, #12]
 8005d18:	e00c      	b.n	8005d34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	3308      	adds	r3, #8
 8005d1e:	60fb      	str	r3, [r7, #12]
 8005d20:	e002      	b.n	8005d28 <vListInsert+0x2e>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	60fb      	str	r3, [r7, #12]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d2f6      	bcs.n	8005d22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	685a      	ldr	r2, [r3, #4]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	683a      	ldr	r2, [r7, #0]
 8005d4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	1c5a      	adds	r2, r3, #1
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	601a      	str	r2, [r3, #0]
}
 8005d60:	bf00      	nop
 8005d62:	3714      	adds	r7, #20
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	6892      	ldr	r2, [r2, #8]
 8005d82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	6852      	ldr	r2, [r2, #4]
 8005d8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d103      	bne.n	8005da0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	1e5a      	subs	r2, r3, #1
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3714      	adds	r7, #20
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10c      	bne.n	8005dee <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd8:	b672      	cpsid	i
 8005dda:	f383 8811 	msr	BASEPRI, r3
 8005dde:	f3bf 8f6f 	isb	sy
 8005de2:	f3bf 8f4f 	dsb	sy
 8005de6:	b662      	cpsie	i
 8005de8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005dea:	bf00      	nop
 8005dec:	e7fe      	b.n	8005dec <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005dee:	f002 f8b5 	bl	8007f5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dfa:	68f9      	ldr	r1, [r7, #12]
 8005dfc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005dfe:	fb01 f303 	mul.w	r3, r1, r3
 8005e02:	441a      	add	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	68f9      	ldr	r1, [r7, #12]
 8005e22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e24:	fb01 f303 	mul.w	r3, r1, r3
 8005e28:	441a      	add	r2, r3
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	22ff      	movs	r2, #255	; 0xff
 8005e32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	22ff      	movs	r2, #255	; 0xff
 8005e3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d114      	bne.n	8005e6e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d01a      	beq.n	8005e82 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	3310      	adds	r3, #16
 8005e50:	4618      	mov	r0, r3
 8005e52:	f001 fb75 	bl	8007540 <xTaskRemoveFromEventList>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d012      	beq.n	8005e82 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005e5c:	4b0c      	ldr	r3, [pc, #48]	; (8005e90 <xQueueGenericReset+0xd0>)
 8005e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e62:	601a      	str	r2, [r3, #0]
 8005e64:	f3bf 8f4f 	dsb	sy
 8005e68:	f3bf 8f6f 	isb	sy
 8005e6c:	e009      	b.n	8005e82 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	3310      	adds	r3, #16
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7ff fef0 	bl	8005c58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	3324      	adds	r3, #36	; 0x24
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7ff feeb 	bl	8005c58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005e82:	f002 f89f 	bl	8007fc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005e86:	2301      	movs	r3, #1
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	e000ed04 	.word	0xe000ed04

08005e94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b08e      	sub	sp, #56	; 0x38
 8005e98:	af02      	add	r7, sp, #8
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
 8005ea0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10c      	bne.n	8005ec2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8005ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eac:	b672      	cpsid	i
 8005eae:	f383 8811 	msr	BASEPRI, r3
 8005eb2:	f3bf 8f6f 	isb	sy
 8005eb6:	f3bf 8f4f 	dsb	sy
 8005eba:	b662      	cpsie	i
 8005ebc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ebe:	bf00      	nop
 8005ec0:	e7fe      	b.n	8005ec0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10c      	bne.n	8005ee2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8005ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ecc:	b672      	cpsid	i
 8005ece:	f383 8811 	msr	BASEPRI, r3
 8005ed2:	f3bf 8f6f 	isb	sy
 8005ed6:	f3bf 8f4f 	dsb	sy
 8005eda:	b662      	cpsie	i
 8005edc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ede:	bf00      	nop
 8005ee0:	e7fe      	b.n	8005ee0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d002      	beq.n	8005eee <xQueueGenericCreateStatic+0x5a>
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <xQueueGenericCreateStatic+0x5e>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e000      	b.n	8005ef4 <xQueueGenericCreateStatic+0x60>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10c      	bne.n	8005f12 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8005ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efc:	b672      	cpsid	i
 8005efe:	f383 8811 	msr	BASEPRI, r3
 8005f02:	f3bf 8f6f 	isb	sy
 8005f06:	f3bf 8f4f 	dsb	sy
 8005f0a:	b662      	cpsie	i
 8005f0c:	623b      	str	r3, [r7, #32]
}
 8005f0e:	bf00      	nop
 8005f10:	e7fe      	b.n	8005f10 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d102      	bne.n	8005f1e <xQueueGenericCreateStatic+0x8a>
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <xQueueGenericCreateStatic+0x8e>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e000      	b.n	8005f24 <xQueueGenericCreateStatic+0x90>
 8005f22:	2300      	movs	r3, #0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d10c      	bne.n	8005f42 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8005f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2c:	b672      	cpsid	i
 8005f2e:	f383 8811 	msr	BASEPRI, r3
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	f3bf 8f4f 	dsb	sy
 8005f3a:	b662      	cpsie	i
 8005f3c:	61fb      	str	r3, [r7, #28]
}
 8005f3e:	bf00      	nop
 8005f40:	e7fe      	b.n	8005f40 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005f42:	2348      	movs	r3, #72	; 0x48
 8005f44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2b48      	cmp	r3, #72	; 0x48
 8005f4a:	d00c      	beq.n	8005f66 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8005f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f50:	b672      	cpsid	i
 8005f52:	f383 8811 	msr	BASEPRI, r3
 8005f56:	f3bf 8f6f 	isb	sy
 8005f5a:	f3bf 8f4f 	dsb	sy
 8005f5e:	b662      	cpsie	i
 8005f60:	61bb      	str	r3, [r7, #24]
}
 8005f62:	bf00      	nop
 8005f64:	e7fe      	b.n	8005f64 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005f66:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00d      	beq.n	8005f8e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f7a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f80:	9300      	str	r3, [sp, #0]
 8005f82:	4613      	mov	r3, r2
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	68b9      	ldr	r1, [r7, #8]
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f000 f847 	bl	800601c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3730      	adds	r7, #48	; 0x30
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b08a      	sub	sp, #40	; 0x28
 8005f9c:	af02      	add	r7, sp, #8
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d10c      	bne.n	8005fc6 <xQueueGenericCreate+0x2e>
	__asm volatile
 8005fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb0:	b672      	cpsid	i
 8005fb2:	f383 8811 	msr	BASEPRI, r3
 8005fb6:	f3bf 8f6f 	isb	sy
 8005fba:	f3bf 8f4f 	dsb	sy
 8005fbe:	b662      	cpsie	i
 8005fc0:	613b      	str	r3, [r7, #16]
}
 8005fc2:	bf00      	nop
 8005fc4:	e7fe      	b.n	8005fc4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d102      	bne.n	8005fd2 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	61fb      	str	r3, [r7, #28]
 8005fd0:	e004      	b.n	8005fdc <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	fb02 f303 	mul.w	r3, r2, r3
 8005fda:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	3348      	adds	r3, #72	; 0x48
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f002 f8e7 	bl	80081b4 <pvPortMalloc>
 8005fe6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d011      	beq.n	8006012 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	3348      	adds	r3, #72	; 0x48
 8005ff6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006000:	79fa      	ldrb	r2, [r7, #7]
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	9300      	str	r3, [sp, #0]
 8006006:	4613      	mov	r3, r2
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	68b9      	ldr	r1, [r7, #8]
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f000 f805 	bl	800601c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006012:	69bb      	ldr	r3, [r7, #24]
	}
 8006014:	4618      	mov	r0, r3
 8006016:	3720      	adds	r7, #32
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
 8006028:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d103      	bne.n	8006038 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	69ba      	ldr	r2, [r7, #24]
 8006034:	601a      	str	r2, [r3, #0]
 8006036:	e002      	b.n	800603e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800604a:	2101      	movs	r1, #1
 800604c:	69b8      	ldr	r0, [r7, #24]
 800604e:	f7ff feb7 	bl	8005dc0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006052:	bf00      	nop
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800605a:	b580      	push	{r7, lr}
 800605c:	b082      	sub	sp, #8
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00e      	beq.n	8006086 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800607a:	2300      	movs	r3, #0
 800607c:	2200      	movs	r2, #0
 800607e:	2100      	movs	r1, #0
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 f837 	bl	80060f4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006086:	bf00      	nop
 8006088:	3708      	adds	r7, #8
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}

0800608e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800608e:	b580      	push	{r7, lr}
 8006090:	b086      	sub	sp, #24
 8006092:	af00      	add	r7, sp, #0
 8006094:	4603      	mov	r3, r0
 8006096:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006098:	2301      	movs	r3, #1
 800609a:	617b      	str	r3, [r7, #20]
 800609c:	2300      	movs	r3, #0
 800609e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80060a0:	79fb      	ldrb	r3, [r7, #7]
 80060a2:	461a      	mov	r2, r3
 80060a4:	6939      	ldr	r1, [r7, #16]
 80060a6:	6978      	ldr	r0, [r7, #20]
 80060a8:	f7ff ff76 	bl	8005f98 <xQueueGenericCreate>
 80060ac:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f7ff ffd3 	bl	800605a <prvInitialiseMutex>

		return xNewQueue;
 80060b4:	68fb      	ldr	r3, [r7, #12]
	}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3718      	adds	r7, #24
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b088      	sub	sp, #32
 80060c2:	af02      	add	r7, sp, #8
 80060c4:	4603      	mov	r3, r0
 80060c6:	6039      	str	r1, [r7, #0]
 80060c8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80060ca:	2301      	movs	r3, #1
 80060cc:	617b      	str	r3, [r7, #20]
 80060ce:	2300      	movs	r3, #0
 80060d0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80060d2:	79fb      	ldrb	r3, [r7, #7]
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	2200      	movs	r2, #0
 80060da:	6939      	ldr	r1, [r7, #16]
 80060dc:	6978      	ldr	r0, [r7, #20]
 80060de:	f7ff fed9 	bl	8005e94 <xQueueGenericCreateStatic>
 80060e2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f7ff ffb8 	bl	800605a <prvInitialiseMutex>

		return xNewQueue;
 80060ea:	68fb      	ldr	r3, [r7, #12]
	}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3718      	adds	r7, #24
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b08e      	sub	sp, #56	; 0x38
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
 8006100:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006102:	2300      	movs	r3, #0
 8006104:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800610a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610c:	2b00      	cmp	r3, #0
 800610e:	d10c      	bne.n	800612a <xQueueGenericSend+0x36>
	__asm volatile
 8006110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006114:	b672      	cpsid	i
 8006116:	f383 8811 	msr	BASEPRI, r3
 800611a:	f3bf 8f6f 	isb	sy
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	b662      	cpsie	i
 8006124:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006126:	bf00      	nop
 8006128:	e7fe      	b.n	8006128 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d103      	bne.n	8006138 <xQueueGenericSend+0x44>
 8006130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006134:	2b00      	cmp	r3, #0
 8006136:	d101      	bne.n	800613c <xQueueGenericSend+0x48>
 8006138:	2301      	movs	r3, #1
 800613a:	e000      	b.n	800613e <xQueueGenericSend+0x4a>
 800613c:	2300      	movs	r3, #0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10c      	bne.n	800615c <xQueueGenericSend+0x68>
	__asm volatile
 8006142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006146:	b672      	cpsid	i
 8006148:	f383 8811 	msr	BASEPRI, r3
 800614c:	f3bf 8f6f 	isb	sy
 8006150:	f3bf 8f4f 	dsb	sy
 8006154:	b662      	cpsie	i
 8006156:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006158:	bf00      	nop
 800615a:	e7fe      	b.n	800615a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	2b02      	cmp	r3, #2
 8006160:	d103      	bne.n	800616a <xQueueGenericSend+0x76>
 8006162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006166:	2b01      	cmp	r3, #1
 8006168:	d101      	bne.n	800616e <xQueueGenericSend+0x7a>
 800616a:	2301      	movs	r3, #1
 800616c:	e000      	b.n	8006170 <xQueueGenericSend+0x7c>
 800616e:	2300      	movs	r3, #0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10c      	bne.n	800618e <xQueueGenericSend+0x9a>
	__asm volatile
 8006174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006178:	b672      	cpsid	i
 800617a:	f383 8811 	msr	BASEPRI, r3
 800617e:	f3bf 8f6f 	isb	sy
 8006182:	f3bf 8f4f 	dsb	sy
 8006186:	b662      	cpsie	i
 8006188:	623b      	str	r3, [r7, #32]
}
 800618a:	bf00      	nop
 800618c:	e7fe      	b.n	800618c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800618e:	f001 fb9b 	bl	80078c8 <xTaskGetSchedulerState>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d102      	bne.n	800619e <xQueueGenericSend+0xaa>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d101      	bne.n	80061a2 <xQueueGenericSend+0xae>
 800619e:	2301      	movs	r3, #1
 80061a0:	e000      	b.n	80061a4 <xQueueGenericSend+0xb0>
 80061a2:	2300      	movs	r3, #0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10c      	bne.n	80061c2 <xQueueGenericSend+0xce>
	__asm volatile
 80061a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ac:	b672      	cpsid	i
 80061ae:	f383 8811 	msr	BASEPRI, r3
 80061b2:	f3bf 8f6f 	isb	sy
 80061b6:	f3bf 8f4f 	dsb	sy
 80061ba:	b662      	cpsie	i
 80061bc:	61fb      	str	r3, [r7, #28]
}
 80061be:	bf00      	nop
 80061c0:	e7fe      	b.n	80061c0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061c2:	f001 fecb 	bl	8007f5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d302      	bcc.n	80061d8 <xQueueGenericSend+0xe4>
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d129      	bne.n	800622c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061d8:	683a      	ldr	r2, [r7, #0]
 80061da:	68b9      	ldr	r1, [r7, #8]
 80061dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061de:	f000 fc5d 	bl	8006a9c <prvCopyDataToQueue>
 80061e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d010      	beq.n	800620e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ee:	3324      	adds	r3, #36	; 0x24
 80061f0:	4618      	mov	r0, r3
 80061f2:	f001 f9a5 	bl	8007540 <xTaskRemoveFromEventList>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d013      	beq.n	8006224 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80061fc:	4b3f      	ldr	r3, [pc, #252]	; (80062fc <xQueueGenericSend+0x208>)
 80061fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006202:	601a      	str	r2, [r3, #0]
 8006204:	f3bf 8f4f 	dsb	sy
 8006208:	f3bf 8f6f 	isb	sy
 800620c:	e00a      	b.n	8006224 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800620e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006210:	2b00      	cmp	r3, #0
 8006212:	d007      	beq.n	8006224 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006214:	4b39      	ldr	r3, [pc, #228]	; (80062fc <xQueueGenericSend+0x208>)
 8006216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800621a:	601a      	str	r2, [r3, #0]
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006224:	f001 fece 	bl	8007fc4 <vPortExitCritical>
				return pdPASS;
 8006228:	2301      	movs	r3, #1
 800622a:	e063      	b.n	80062f4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d103      	bne.n	800623a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006232:	f001 fec7 	bl	8007fc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006236:	2300      	movs	r3, #0
 8006238:	e05c      	b.n	80062f4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800623a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800623c:	2b00      	cmp	r3, #0
 800623e:	d106      	bne.n	800624e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006240:	f107 0314 	add.w	r3, r7, #20
 8006244:	4618      	mov	r0, r3
 8006246:	f001 f9df 	bl	8007608 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800624a:	2301      	movs	r3, #1
 800624c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800624e:	f001 feb9 	bl	8007fc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006252:	f000 ff69 	bl	8007128 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006256:	f001 fe81 	bl	8007f5c <vPortEnterCritical>
 800625a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006260:	b25b      	sxtb	r3, r3
 8006262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006266:	d103      	bne.n	8006270 <xQueueGenericSend+0x17c>
 8006268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626a:	2200      	movs	r2, #0
 800626c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006272:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006276:	b25b      	sxtb	r3, r3
 8006278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800627c:	d103      	bne.n	8006286 <xQueueGenericSend+0x192>
 800627e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006280:	2200      	movs	r2, #0
 8006282:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006286:	f001 fe9d 	bl	8007fc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800628a:	1d3a      	adds	r2, r7, #4
 800628c:	f107 0314 	add.w	r3, r7, #20
 8006290:	4611      	mov	r1, r2
 8006292:	4618      	mov	r0, r3
 8006294:	f001 f9ce 	bl	8007634 <xTaskCheckForTimeOut>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d124      	bne.n	80062e8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800629e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062a0:	f000 fcf4 	bl	8006c8c <prvIsQueueFull>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d018      	beq.n	80062dc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80062aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ac:	3310      	adds	r3, #16
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	4611      	mov	r1, r2
 80062b2:	4618      	mov	r0, r3
 80062b4:	f001 f91e 	bl	80074f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80062b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062ba:	f000 fc7f 	bl	8006bbc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80062be:	f000 ff41 	bl	8007144 <xTaskResumeAll>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f47f af7c 	bne.w	80061c2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80062ca:	4b0c      	ldr	r3, [pc, #48]	; (80062fc <xQueueGenericSend+0x208>)
 80062cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062d0:	601a      	str	r2, [r3, #0]
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	f3bf 8f6f 	isb	sy
 80062da:	e772      	b.n	80061c2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80062dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062de:	f000 fc6d 	bl	8006bbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062e2:	f000 ff2f 	bl	8007144 <xTaskResumeAll>
 80062e6:	e76c      	b.n	80061c2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80062e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062ea:	f000 fc67 	bl	8006bbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062ee:	f000 ff29 	bl	8007144 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80062f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3738      	adds	r7, #56	; 0x38
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	e000ed04 	.word	0xe000ed04

08006300 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b08e      	sub	sp, #56	; 0x38
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
 800630c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006314:	2b00      	cmp	r3, #0
 8006316:	d10c      	bne.n	8006332 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8006318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631c:	b672      	cpsid	i
 800631e:	f383 8811 	msr	BASEPRI, r3
 8006322:	f3bf 8f6f 	isb	sy
 8006326:	f3bf 8f4f 	dsb	sy
 800632a:	b662      	cpsie	i
 800632c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800632e:	bf00      	nop
 8006330:	e7fe      	b.n	8006330 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d103      	bne.n	8006340 <xQueueGenericSendFromISR+0x40>
 8006338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633c:	2b00      	cmp	r3, #0
 800633e:	d101      	bne.n	8006344 <xQueueGenericSendFromISR+0x44>
 8006340:	2301      	movs	r3, #1
 8006342:	e000      	b.n	8006346 <xQueueGenericSendFromISR+0x46>
 8006344:	2300      	movs	r3, #0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d10c      	bne.n	8006364 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800634a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634e:	b672      	cpsid	i
 8006350:	f383 8811 	msr	BASEPRI, r3
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	b662      	cpsie	i
 800635e:	623b      	str	r3, [r7, #32]
}
 8006360:	bf00      	nop
 8006362:	e7fe      	b.n	8006362 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	2b02      	cmp	r3, #2
 8006368:	d103      	bne.n	8006372 <xQueueGenericSendFromISR+0x72>
 800636a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800636e:	2b01      	cmp	r3, #1
 8006370:	d101      	bne.n	8006376 <xQueueGenericSendFromISR+0x76>
 8006372:	2301      	movs	r3, #1
 8006374:	e000      	b.n	8006378 <xQueueGenericSendFromISR+0x78>
 8006376:	2300      	movs	r3, #0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d10c      	bne.n	8006396 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800637c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006380:	b672      	cpsid	i
 8006382:	f383 8811 	msr	BASEPRI, r3
 8006386:	f3bf 8f6f 	isb	sy
 800638a:	f3bf 8f4f 	dsb	sy
 800638e:	b662      	cpsie	i
 8006390:	61fb      	str	r3, [r7, #28]
}
 8006392:	bf00      	nop
 8006394:	e7fe      	b.n	8006394 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006396:	f001 fec9 	bl	800812c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800639a:	f3ef 8211 	mrs	r2, BASEPRI
 800639e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a2:	b672      	cpsid	i
 80063a4:	f383 8811 	msr	BASEPRI, r3
 80063a8:	f3bf 8f6f 	isb	sy
 80063ac:	f3bf 8f4f 	dsb	sy
 80063b0:	b662      	cpsie	i
 80063b2:	61ba      	str	r2, [r7, #24]
 80063b4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80063b6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d302      	bcc.n	80063cc <xQueueGenericSendFromISR+0xcc>
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d12c      	bne.n	8006426 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80063cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80063d6:	683a      	ldr	r2, [r7, #0]
 80063d8:	68b9      	ldr	r1, [r7, #8]
 80063da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063dc:	f000 fb5e 	bl	8006a9c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80063e0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80063e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e8:	d112      	bne.n	8006410 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d016      	beq.n	8006420 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f4:	3324      	adds	r3, #36	; 0x24
 80063f6:	4618      	mov	r0, r3
 80063f8:	f001 f8a2 	bl	8007540 <xTaskRemoveFromEventList>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00e      	beq.n	8006420 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00b      	beq.n	8006420 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	601a      	str	r2, [r3, #0]
 800640e:	e007      	b.n	8006420 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006410:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006414:	3301      	adds	r3, #1
 8006416:	b2db      	uxtb	r3, r3
 8006418:	b25a      	sxtb	r2, r3
 800641a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006420:	2301      	movs	r3, #1
 8006422:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006424:	e001      	b.n	800642a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006426:	2300      	movs	r3, #0
 8006428:	637b      	str	r3, [r7, #52]	; 0x34
 800642a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800642c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006434:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006438:	4618      	mov	r0, r3
 800643a:	3738      	adds	r7, #56	; 0x38
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b08e      	sub	sp, #56	; 0x38
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800644e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10c      	bne.n	800646e <xQueueGiveFromISR+0x2e>
	__asm volatile
 8006454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006458:	b672      	cpsid	i
 800645a:	f383 8811 	msr	BASEPRI, r3
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	b662      	cpsie	i
 8006468:	623b      	str	r3, [r7, #32]
}
 800646a:	bf00      	nop
 800646c:	e7fe      	b.n	800646c <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800646e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00c      	beq.n	8006490 <xQueueGiveFromISR+0x50>
	__asm volatile
 8006476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647a:	b672      	cpsid	i
 800647c:	f383 8811 	msr	BASEPRI, r3
 8006480:	f3bf 8f6f 	isb	sy
 8006484:	f3bf 8f4f 	dsb	sy
 8006488:	b662      	cpsie	i
 800648a:	61fb      	str	r3, [r7, #28]
}
 800648c:	bf00      	nop
 800648e:	e7fe      	b.n	800648e <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d103      	bne.n	80064a0 <xQueueGiveFromISR+0x60>
 8006498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d101      	bne.n	80064a4 <xQueueGiveFromISR+0x64>
 80064a0:	2301      	movs	r3, #1
 80064a2:	e000      	b.n	80064a6 <xQueueGiveFromISR+0x66>
 80064a4:	2300      	movs	r3, #0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10c      	bne.n	80064c4 <xQueueGiveFromISR+0x84>
	__asm volatile
 80064aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ae:	b672      	cpsid	i
 80064b0:	f383 8811 	msr	BASEPRI, r3
 80064b4:	f3bf 8f6f 	isb	sy
 80064b8:	f3bf 8f4f 	dsb	sy
 80064bc:	b662      	cpsie	i
 80064be:	61bb      	str	r3, [r7, #24]
}
 80064c0:	bf00      	nop
 80064c2:	e7fe      	b.n	80064c2 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064c4:	f001 fe32 	bl	800812c <vPortValidateInterruptPriority>
	__asm volatile
 80064c8:	f3ef 8211 	mrs	r2, BASEPRI
 80064cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d0:	b672      	cpsid	i
 80064d2:	f383 8811 	msr	BASEPRI, r3
 80064d6:	f3bf 8f6f 	isb	sy
 80064da:	f3bf 8f4f 	dsb	sy
 80064de:	b662      	cpsie	i
 80064e0:	617a      	str	r2, [r7, #20]
 80064e2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80064e4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80064e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ec:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80064ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d22b      	bcs.n	8006550 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80064f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006504:	1c5a      	adds	r2, r3, #1
 8006506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006508:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800650a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800650e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006512:	d112      	bne.n	800653a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006518:	2b00      	cmp	r3, #0
 800651a:	d016      	beq.n	800654a <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800651c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651e:	3324      	adds	r3, #36	; 0x24
 8006520:	4618      	mov	r0, r3
 8006522:	f001 f80d 	bl	8007540 <xTaskRemoveFromEventList>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00e      	beq.n	800654a <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00b      	beq.n	800654a <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	2201      	movs	r2, #1
 8006536:	601a      	str	r2, [r3, #0]
 8006538:	e007      	b.n	800654a <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800653a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800653e:	3301      	adds	r3, #1
 8006540:	b2db      	uxtb	r3, r3
 8006542:	b25a      	sxtb	r2, r3
 8006544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006546:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800654a:	2301      	movs	r3, #1
 800654c:	637b      	str	r3, [r7, #52]	; 0x34
 800654e:	e001      	b.n	8006554 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006550:	2300      	movs	r3, #0
 8006552:	637b      	str	r3, [r7, #52]	; 0x34
 8006554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006556:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f383 8811 	msr	BASEPRI, r3
}
 800655e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006562:	4618      	mov	r0, r3
 8006564:	3738      	adds	r7, #56	; 0x38
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
	...

0800656c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b08c      	sub	sp, #48	; 0x30
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006578:	2300      	movs	r3, #0
 800657a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10c      	bne.n	80065a0 <xQueueReceive+0x34>
	__asm volatile
 8006586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658a:	b672      	cpsid	i
 800658c:	f383 8811 	msr	BASEPRI, r3
 8006590:	f3bf 8f6f 	isb	sy
 8006594:	f3bf 8f4f 	dsb	sy
 8006598:	b662      	cpsie	i
 800659a:	623b      	str	r3, [r7, #32]
}
 800659c:	bf00      	nop
 800659e:	e7fe      	b.n	800659e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d103      	bne.n	80065ae <xQueueReceive+0x42>
 80065a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d101      	bne.n	80065b2 <xQueueReceive+0x46>
 80065ae:	2301      	movs	r3, #1
 80065b0:	e000      	b.n	80065b4 <xQueueReceive+0x48>
 80065b2:	2300      	movs	r3, #0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10c      	bne.n	80065d2 <xQueueReceive+0x66>
	__asm volatile
 80065b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065bc:	b672      	cpsid	i
 80065be:	f383 8811 	msr	BASEPRI, r3
 80065c2:	f3bf 8f6f 	isb	sy
 80065c6:	f3bf 8f4f 	dsb	sy
 80065ca:	b662      	cpsie	i
 80065cc:	61fb      	str	r3, [r7, #28]
}
 80065ce:	bf00      	nop
 80065d0:	e7fe      	b.n	80065d0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065d2:	f001 f979 	bl	80078c8 <xTaskGetSchedulerState>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d102      	bne.n	80065e2 <xQueueReceive+0x76>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d101      	bne.n	80065e6 <xQueueReceive+0x7a>
 80065e2:	2301      	movs	r3, #1
 80065e4:	e000      	b.n	80065e8 <xQueueReceive+0x7c>
 80065e6:	2300      	movs	r3, #0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d10c      	bne.n	8006606 <xQueueReceive+0x9a>
	__asm volatile
 80065ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f0:	b672      	cpsid	i
 80065f2:	f383 8811 	msr	BASEPRI, r3
 80065f6:	f3bf 8f6f 	isb	sy
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	b662      	cpsie	i
 8006600:	61bb      	str	r3, [r7, #24]
}
 8006602:	bf00      	nop
 8006604:	e7fe      	b.n	8006604 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006606:	f001 fca9 	bl	8007f5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800660a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006612:	2b00      	cmp	r3, #0
 8006614:	d01f      	beq.n	8006656 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006616:	68b9      	ldr	r1, [r7, #8]
 8006618:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800661a:	f000 faa9 	bl	8006b70 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006620:	1e5a      	subs	r2, r3, #1
 8006622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006624:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00f      	beq.n	800664e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800662e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006630:	3310      	adds	r3, #16
 8006632:	4618      	mov	r0, r3
 8006634:	f000 ff84 	bl	8007540 <xTaskRemoveFromEventList>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d007      	beq.n	800664e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800663e:	4b3d      	ldr	r3, [pc, #244]	; (8006734 <xQueueReceive+0x1c8>)
 8006640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006644:	601a      	str	r2, [r3, #0]
 8006646:	f3bf 8f4f 	dsb	sy
 800664a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800664e:	f001 fcb9 	bl	8007fc4 <vPortExitCritical>
				return pdPASS;
 8006652:	2301      	movs	r3, #1
 8006654:	e069      	b.n	800672a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d103      	bne.n	8006664 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800665c:	f001 fcb2 	bl	8007fc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006660:	2300      	movs	r3, #0
 8006662:	e062      	b.n	800672a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006666:	2b00      	cmp	r3, #0
 8006668:	d106      	bne.n	8006678 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800666a:	f107 0310 	add.w	r3, r7, #16
 800666e:	4618      	mov	r0, r3
 8006670:	f000 ffca 	bl	8007608 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006674:	2301      	movs	r3, #1
 8006676:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006678:	f001 fca4 	bl	8007fc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800667c:	f000 fd54 	bl	8007128 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006680:	f001 fc6c 	bl	8007f5c <vPortEnterCritical>
 8006684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006686:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800668a:	b25b      	sxtb	r3, r3
 800668c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006690:	d103      	bne.n	800669a <xQueueReceive+0x12e>
 8006692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006694:	2200      	movs	r2, #0
 8006696:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800669a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066a0:	b25b      	sxtb	r3, r3
 80066a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a6:	d103      	bne.n	80066b0 <xQueueReceive+0x144>
 80066a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066b0:	f001 fc88 	bl	8007fc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066b4:	1d3a      	adds	r2, r7, #4
 80066b6:	f107 0310 	add.w	r3, r7, #16
 80066ba:	4611      	mov	r1, r2
 80066bc:	4618      	mov	r0, r3
 80066be:	f000 ffb9 	bl	8007634 <xTaskCheckForTimeOut>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d123      	bne.n	8006710 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066ca:	f000 fac9 	bl	8006c60 <prvIsQueueEmpty>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d017      	beq.n	8006704 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80066d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d6:	3324      	adds	r3, #36	; 0x24
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	4611      	mov	r1, r2
 80066dc:	4618      	mov	r0, r3
 80066de:	f000 ff09 	bl	80074f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80066e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066e4:	f000 fa6a 	bl	8006bbc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80066e8:	f000 fd2c 	bl	8007144 <xTaskResumeAll>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d189      	bne.n	8006606 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80066f2:	4b10      	ldr	r3, [pc, #64]	; (8006734 <xQueueReceive+0x1c8>)
 80066f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066f8:	601a      	str	r2, [r3, #0]
 80066fa:	f3bf 8f4f 	dsb	sy
 80066fe:	f3bf 8f6f 	isb	sy
 8006702:	e780      	b.n	8006606 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006704:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006706:	f000 fa59 	bl	8006bbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800670a:	f000 fd1b 	bl	8007144 <xTaskResumeAll>
 800670e:	e77a      	b.n	8006606 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006710:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006712:	f000 fa53 	bl	8006bbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006716:	f000 fd15 	bl	8007144 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800671a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800671c:	f000 faa0 	bl	8006c60 <prvIsQueueEmpty>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	f43f af6f 	beq.w	8006606 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006728:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800672a:	4618      	mov	r0, r3
 800672c:	3730      	adds	r7, #48	; 0x30
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	e000ed04 	.word	0xe000ed04

08006738 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b08e      	sub	sp, #56	; 0x38
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006742:	2300      	movs	r3, #0
 8006744:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800674a:	2300      	movs	r3, #0
 800674c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800674e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006750:	2b00      	cmp	r3, #0
 8006752:	d10c      	bne.n	800676e <xQueueSemaphoreTake+0x36>
	__asm volatile
 8006754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006758:	b672      	cpsid	i
 800675a:	f383 8811 	msr	BASEPRI, r3
 800675e:	f3bf 8f6f 	isb	sy
 8006762:	f3bf 8f4f 	dsb	sy
 8006766:	b662      	cpsie	i
 8006768:	623b      	str	r3, [r7, #32]
}
 800676a:	bf00      	nop
 800676c:	e7fe      	b.n	800676c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800676e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00c      	beq.n	8006790 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8006776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677a:	b672      	cpsid	i
 800677c:	f383 8811 	msr	BASEPRI, r3
 8006780:	f3bf 8f6f 	isb	sy
 8006784:	f3bf 8f4f 	dsb	sy
 8006788:	b662      	cpsie	i
 800678a:	61fb      	str	r3, [r7, #28]
}
 800678c:	bf00      	nop
 800678e:	e7fe      	b.n	800678e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006790:	f001 f89a 	bl	80078c8 <xTaskGetSchedulerState>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d102      	bne.n	80067a0 <xQueueSemaphoreTake+0x68>
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d101      	bne.n	80067a4 <xQueueSemaphoreTake+0x6c>
 80067a0:	2301      	movs	r3, #1
 80067a2:	e000      	b.n	80067a6 <xQueueSemaphoreTake+0x6e>
 80067a4:	2300      	movs	r3, #0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d10c      	bne.n	80067c4 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80067aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ae:	b672      	cpsid	i
 80067b0:	f383 8811 	msr	BASEPRI, r3
 80067b4:	f3bf 8f6f 	isb	sy
 80067b8:	f3bf 8f4f 	dsb	sy
 80067bc:	b662      	cpsie	i
 80067be:	61bb      	str	r3, [r7, #24]
}
 80067c0:	bf00      	nop
 80067c2:	e7fe      	b.n	80067c2 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80067c4:	f001 fbca 	bl	8007f5c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80067c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067cc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80067ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d024      	beq.n	800681e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80067d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d6:	1e5a      	subs	r2, r3, #1
 80067d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067da:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80067dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d104      	bne.n	80067ee <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80067e4:	f001 fa36 	bl	8007c54 <pvTaskIncrementMutexHeldCount>
 80067e8:	4602      	mov	r2, r0
 80067ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ec:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00f      	beq.n	8006816 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f8:	3310      	adds	r3, #16
 80067fa:	4618      	mov	r0, r3
 80067fc:	f000 fea0 	bl	8007540 <xTaskRemoveFromEventList>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d007      	beq.n	8006816 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006806:	4b55      	ldr	r3, [pc, #340]	; (800695c <xQueueSemaphoreTake+0x224>)
 8006808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800680c:	601a      	str	r2, [r3, #0]
 800680e:	f3bf 8f4f 	dsb	sy
 8006812:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006816:	f001 fbd5 	bl	8007fc4 <vPortExitCritical>
				return pdPASS;
 800681a:	2301      	movs	r3, #1
 800681c:	e099      	b.n	8006952 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d113      	bne.n	800684c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00c      	beq.n	8006844 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800682a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682e:	b672      	cpsid	i
 8006830:	f383 8811 	msr	BASEPRI, r3
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	b662      	cpsie	i
 800683e:	617b      	str	r3, [r7, #20]
}
 8006840:	bf00      	nop
 8006842:	e7fe      	b.n	8006842 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006844:	f001 fbbe 	bl	8007fc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006848:	2300      	movs	r3, #0
 800684a:	e082      	b.n	8006952 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800684c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800684e:	2b00      	cmp	r3, #0
 8006850:	d106      	bne.n	8006860 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006852:	f107 030c 	add.w	r3, r7, #12
 8006856:	4618      	mov	r0, r3
 8006858:	f000 fed6 	bl	8007608 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800685c:	2301      	movs	r3, #1
 800685e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006860:	f001 fbb0 	bl	8007fc4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006864:	f000 fc60 	bl	8007128 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006868:	f001 fb78 	bl	8007f5c <vPortEnterCritical>
 800686c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006872:	b25b      	sxtb	r3, r3
 8006874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006878:	d103      	bne.n	8006882 <xQueueSemaphoreTake+0x14a>
 800687a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800687c:	2200      	movs	r2, #0
 800687e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006884:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006888:	b25b      	sxtb	r3, r3
 800688a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800688e:	d103      	bne.n	8006898 <xQueueSemaphoreTake+0x160>
 8006890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006892:	2200      	movs	r2, #0
 8006894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006898:	f001 fb94 	bl	8007fc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800689c:	463a      	mov	r2, r7
 800689e:	f107 030c 	add.w	r3, r7, #12
 80068a2:	4611      	mov	r1, r2
 80068a4:	4618      	mov	r0, r3
 80068a6:	f000 fec5 	bl	8007634 <xTaskCheckForTimeOut>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d132      	bne.n	8006916 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80068b2:	f000 f9d5 	bl	8006c60 <prvIsQueueEmpty>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d026      	beq.n	800690a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d109      	bne.n	80068d8 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80068c4:	f001 fb4a 	bl	8007f5c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80068c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	4618      	mov	r0, r3
 80068ce:	f001 f819 	bl	8007904 <xTaskPriorityInherit>
 80068d2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80068d4:	f001 fb76 	bl	8007fc4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80068d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068da:	3324      	adds	r3, #36	; 0x24
 80068dc:	683a      	ldr	r2, [r7, #0]
 80068de:	4611      	mov	r1, r2
 80068e0:	4618      	mov	r0, r3
 80068e2:	f000 fe07 	bl	80074f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80068e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80068e8:	f000 f968 	bl	8006bbc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80068ec:	f000 fc2a 	bl	8007144 <xTaskResumeAll>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	f47f af66 	bne.w	80067c4 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80068f8:	4b18      	ldr	r3, [pc, #96]	; (800695c <xQueueSemaphoreTake+0x224>)
 80068fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068fe:	601a      	str	r2, [r3, #0]
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	e75c      	b.n	80067c4 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800690a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800690c:	f000 f956 	bl	8006bbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006910:	f000 fc18 	bl	8007144 <xTaskResumeAll>
 8006914:	e756      	b.n	80067c4 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006916:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006918:	f000 f950 	bl	8006bbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800691c:	f000 fc12 	bl	8007144 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006920:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006922:	f000 f99d 	bl	8006c60 <prvIsQueueEmpty>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	f43f af4b 	beq.w	80067c4 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800692e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006930:	2b00      	cmp	r3, #0
 8006932:	d00d      	beq.n	8006950 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8006934:	f001 fb12 	bl	8007f5c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006938:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800693a:	f000 f897 	bl	8006a6c <prvGetDisinheritPriorityAfterTimeout>
 800693e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006946:	4618      	mov	r0, r3
 8006948:	f001 f8e6 	bl	8007b18 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800694c:	f001 fb3a 	bl	8007fc4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006950:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006952:	4618      	mov	r0, r3
 8006954:	3738      	adds	r7, #56	; 0x38
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	e000ed04 	.word	0xe000ed04

08006960 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b08e      	sub	sp, #56	; 0x38
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10c      	bne.n	8006990 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8006976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697a:	b672      	cpsid	i
 800697c:	f383 8811 	msr	BASEPRI, r3
 8006980:	f3bf 8f6f 	isb	sy
 8006984:	f3bf 8f4f 	dsb	sy
 8006988:	b662      	cpsie	i
 800698a:	623b      	str	r3, [r7, #32]
}
 800698c:	bf00      	nop
 800698e:	e7fe      	b.n	800698e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d103      	bne.n	800699e <xQueueReceiveFromISR+0x3e>
 8006996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699a:	2b00      	cmp	r3, #0
 800699c:	d101      	bne.n	80069a2 <xQueueReceiveFromISR+0x42>
 800699e:	2301      	movs	r3, #1
 80069a0:	e000      	b.n	80069a4 <xQueueReceiveFromISR+0x44>
 80069a2:	2300      	movs	r3, #0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d10c      	bne.n	80069c2 <xQueueReceiveFromISR+0x62>
	__asm volatile
 80069a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ac:	b672      	cpsid	i
 80069ae:	f383 8811 	msr	BASEPRI, r3
 80069b2:	f3bf 8f6f 	isb	sy
 80069b6:	f3bf 8f4f 	dsb	sy
 80069ba:	b662      	cpsie	i
 80069bc:	61fb      	str	r3, [r7, #28]
}
 80069be:	bf00      	nop
 80069c0:	e7fe      	b.n	80069c0 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80069c2:	f001 fbb3 	bl	800812c <vPortValidateInterruptPriority>
	__asm volatile
 80069c6:	f3ef 8211 	mrs	r2, BASEPRI
 80069ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ce:	b672      	cpsid	i
 80069d0:	f383 8811 	msr	BASEPRI, r3
 80069d4:	f3bf 8f6f 	isb	sy
 80069d8:	f3bf 8f4f 	dsb	sy
 80069dc:	b662      	cpsie	i
 80069de:	61ba      	str	r2, [r7, #24]
 80069e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80069e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80069e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d02f      	beq.n	8006a52 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80069f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80069fc:	68b9      	ldr	r1, [r7, #8]
 80069fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a00:	f000 f8b6 	bl	8006b70 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a06:	1e5a      	subs	r2, r3, #1
 8006a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006a0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a14:	d112      	bne.n	8006a3c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d016      	beq.n	8006a4c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a20:	3310      	adds	r3, #16
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 fd8c 	bl	8007540 <xTaskRemoveFromEventList>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00e      	beq.n	8006a4c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00b      	beq.n	8006a4c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	601a      	str	r2, [r3, #0]
 8006a3a:	e007      	b.n	8006a4c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006a3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a40:	3301      	adds	r3, #1
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	b25a      	sxtb	r2, r3
 8006a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a50:	e001      	b.n	8006a56 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8006a52:	2300      	movs	r3, #0
 8006a54:	637b      	str	r3, [r7, #52]	; 0x34
 8006a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a58:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	f383 8811 	msr	BASEPRI, r3
}
 8006a60:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3738      	adds	r7, #56	; 0x38
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d006      	beq.n	8006a8a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f1c3 0307 	rsb	r3, r3, #7
 8006a86:	60fb      	str	r3, [r7, #12]
 8006a88:	e001      	b.n	8006a8e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
	}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3714      	adds	r7, #20
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b086      	sub	sp, #24
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d10d      	bne.n	8006ad6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d14d      	bne.n	8006b5e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f000 ff9c 	bl	8007a04 <xTaskPriorityDisinherit>
 8006acc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	609a      	str	r2, [r3, #8]
 8006ad4:	e043      	b.n	8006b5e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d119      	bne.n	8006b10 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6858      	ldr	r0, [r3, #4]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	68b9      	ldr	r1, [r7, #8]
 8006ae8:	f00e fbf4 	bl	80152d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	685a      	ldr	r2, [r3, #4]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af4:	441a      	add	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	685a      	ldr	r2, [r3, #4]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d32b      	bcc.n	8006b5e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	605a      	str	r2, [r3, #4]
 8006b0e:	e026      	b.n	8006b5e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	68d8      	ldr	r0, [r3, #12]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b18:	461a      	mov	r2, r3
 8006b1a:	68b9      	ldr	r1, [r7, #8]
 8006b1c:	f00e fbda 	bl	80152d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	68da      	ldr	r2, [r3, #12]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b28:	425b      	negs	r3, r3
 8006b2a:	441a      	add	r2, r3
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	68da      	ldr	r2, [r3, #12]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d207      	bcs.n	8006b4c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	689a      	ldr	r2, [r3, #8]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b44:	425b      	negs	r3, r3
 8006b46:	441a      	add	r2, r3
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d105      	bne.n	8006b5e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d002      	beq.n	8006b5e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	1c5a      	adds	r2, r3, #1
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006b66:	697b      	ldr	r3, [r7, #20]
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3718      	adds	r7, #24
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d018      	beq.n	8006bb4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	68da      	ldr	r2, [r3, #12]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8a:	441a      	add	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	68da      	ldr	r2, [r3, #12]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d303      	bcc.n	8006ba4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	68d9      	ldr	r1, [r3, #12]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bac:	461a      	mov	r2, r3
 8006bae:	6838      	ldr	r0, [r7, #0]
 8006bb0:	f00e fb90 	bl	80152d4 <memcpy>
	}
}
 8006bb4:	bf00      	nop
 8006bb6:	3708      	adds	r7, #8
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006bc4:	f001 f9ca 	bl	8007f5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006bd0:	e011      	b.n	8006bf6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d012      	beq.n	8006c00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	3324      	adds	r3, #36	; 0x24
 8006bde:	4618      	mov	r0, r3
 8006be0:	f000 fcae 	bl	8007540 <xTaskRemoveFromEventList>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d001      	beq.n	8006bee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006bea:	f000 fd89 	bl	8007700 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006bee:	7bfb      	ldrb	r3, [r7, #15]
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	dce9      	bgt.n	8006bd2 <prvUnlockQueue+0x16>
 8006bfe:	e000      	b.n	8006c02 <prvUnlockQueue+0x46>
					break;
 8006c00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	22ff      	movs	r2, #255	; 0xff
 8006c06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006c0a:	f001 f9db 	bl	8007fc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006c0e:	f001 f9a5 	bl	8007f5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c1a:	e011      	b.n	8006c40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d012      	beq.n	8006c4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	3310      	adds	r3, #16
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f000 fc89 	bl	8007540 <xTaskRemoveFromEventList>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d001      	beq.n	8006c38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006c34:	f000 fd64 	bl	8007700 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006c38:	7bbb      	ldrb	r3, [r7, #14]
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	dce9      	bgt.n	8006c1c <prvUnlockQueue+0x60>
 8006c48:	e000      	b.n	8006c4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006c4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	22ff      	movs	r2, #255	; 0xff
 8006c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006c54:	f001 f9b6 	bl	8007fc4 <vPortExitCritical>
}
 8006c58:	bf00      	nop
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006c68:	f001 f978 	bl	8007f5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d102      	bne.n	8006c7a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006c74:	2301      	movs	r3, #1
 8006c76:	60fb      	str	r3, [r7, #12]
 8006c78:	e001      	b.n	8006c7e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006c7e:	f001 f9a1 	bl	8007fc4 <vPortExitCritical>

	return xReturn;
 8006c82:	68fb      	ldr	r3, [r7, #12]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006c94:	f001 f962 	bl	8007f5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d102      	bne.n	8006caa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	60fb      	str	r3, [r7, #12]
 8006ca8:	e001      	b.n	8006cae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006caa:	2300      	movs	r3, #0
 8006cac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006cae:	f001 f989 	bl	8007fc4 <vPortExitCritical>

	return xReturn;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3710      	adds	r7, #16
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b08e      	sub	sp, #56	; 0x38
 8006cc0:	af04      	add	r7, sp, #16
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
 8006cc8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10c      	bne.n	8006cea <xTaskCreateStatic+0x2e>
	__asm volatile
 8006cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd4:	b672      	cpsid	i
 8006cd6:	f383 8811 	msr	BASEPRI, r3
 8006cda:	f3bf 8f6f 	isb	sy
 8006cde:	f3bf 8f4f 	dsb	sy
 8006ce2:	b662      	cpsie	i
 8006ce4:	623b      	str	r3, [r7, #32]
}
 8006ce6:	bf00      	nop
 8006ce8:	e7fe      	b.n	8006ce8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d10c      	bne.n	8006d0a <xTaskCreateStatic+0x4e>
	__asm volatile
 8006cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf4:	b672      	cpsid	i
 8006cf6:	f383 8811 	msr	BASEPRI, r3
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	f3bf 8f4f 	dsb	sy
 8006d02:	b662      	cpsie	i
 8006d04:	61fb      	str	r3, [r7, #28]
}
 8006d06:	bf00      	nop
 8006d08:	e7fe      	b.n	8006d08 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006d0a:	2354      	movs	r3, #84	; 0x54
 8006d0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	2b54      	cmp	r3, #84	; 0x54
 8006d12:	d00c      	beq.n	8006d2e <xTaskCreateStatic+0x72>
	__asm volatile
 8006d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d18:	b672      	cpsid	i
 8006d1a:	f383 8811 	msr	BASEPRI, r3
 8006d1e:	f3bf 8f6f 	isb	sy
 8006d22:	f3bf 8f4f 	dsb	sy
 8006d26:	b662      	cpsie	i
 8006d28:	61bb      	str	r3, [r7, #24]
}
 8006d2a:	bf00      	nop
 8006d2c:	e7fe      	b.n	8006d2c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006d2e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d01e      	beq.n	8006d74 <xTaskCreateStatic+0xb8>
 8006d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d01b      	beq.n	8006d74 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d44:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d48:	2202      	movs	r2, #2
 8006d4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006d4e:	2300      	movs	r3, #0
 8006d50:	9303      	str	r3, [sp, #12]
 8006d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d54:	9302      	str	r3, [sp, #8]
 8006d56:	f107 0314 	add.w	r3, r7, #20
 8006d5a:	9301      	str	r3, [sp, #4]
 8006d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5e:	9300      	str	r3, [sp, #0]
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	68b9      	ldr	r1, [r7, #8]
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	f000 f850 	bl	8006e0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d6e:	f000 f8d7 	bl	8006f20 <prvAddNewTaskToReadyList>
 8006d72:	e001      	b.n	8006d78 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8006d74:	2300      	movs	r3, #0
 8006d76:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006d78:	697b      	ldr	r3, [r7, #20]
	}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3728      	adds	r7, #40	; 0x28
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b08c      	sub	sp, #48	; 0x30
 8006d86:	af04      	add	r7, sp, #16
 8006d88:	60f8      	str	r0, [r7, #12]
 8006d8a:	60b9      	str	r1, [r7, #8]
 8006d8c:	603b      	str	r3, [r7, #0]
 8006d8e:	4613      	mov	r3, r2
 8006d90:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006d92:	88fb      	ldrh	r3, [r7, #6]
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	4618      	mov	r0, r3
 8006d98:	f001 fa0c 	bl	80081b4 <pvPortMalloc>
 8006d9c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d00e      	beq.n	8006dc2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006da4:	2054      	movs	r0, #84	; 0x54
 8006da6:	f001 fa05 	bl	80081b4 <pvPortMalloc>
 8006daa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d003      	beq.n	8006dba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	631a      	str	r2, [r3, #48]	; 0x30
 8006db8:	e005      	b.n	8006dc6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006dba:	6978      	ldr	r0, [r7, #20]
 8006dbc:	f001 fac4 	bl	8008348 <vPortFree>
 8006dc0:	e001      	b.n	8006dc6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d017      	beq.n	8006dfc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006dd4:	88fa      	ldrh	r2, [r7, #6]
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	9303      	str	r3, [sp, #12]
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	9302      	str	r3, [sp, #8]
 8006dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de0:	9301      	str	r3, [sp, #4]
 8006de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de4:	9300      	str	r3, [sp, #0]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	68b9      	ldr	r1, [r7, #8]
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f000 f80e 	bl	8006e0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006df0:	69f8      	ldr	r0, [r7, #28]
 8006df2:	f000 f895 	bl	8006f20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006df6:	2301      	movs	r3, #1
 8006df8:	61bb      	str	r3, [r7, #24]
 8006dfa:	e002      	b.n	8006e02 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8006e00:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006e02:	69bb      	ldr	r3, [r7, #24]
	}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3720      	adds	r7, #32
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b088      	sub	sp, #32
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
 8006e18:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e1e:	6879      	ldr	r1, [r7, #4]
 8006e20:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006e24:	440b      	add	r3, r1
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	f023 0307 	bic.w	r3, r3, #7
 8006e32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	f003 0307 	and.w	r3, r3, #7
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00c      	beq.n	8006e58 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8006e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e42:	b672      	cpsid	i
 8006e44:	f383 8811 	msr	BASEPRI, r3
 8006e48:	f3bf 8f6f 	isb	sy
 8006e4c:	f3bf 8f4f 	dsb	sy
 8006e50:	b662      	cpsie	i
 8006e52:	617b      	str	r3, [r7, #20]
}
 8006e54:	bf00      	nop
 8006e56:	e7fe      	b.n	8006e56 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d01f      	beq.n	8006e9e <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e5e:	2300      	movs	r3, #0
 8006e60:	61fb      	str	r3, [r7, #28]
 8006e62:	e012      	b.n	8006e8a <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	4413      	add	r3, r2
 8006e6a:	7819      	ldrb	r1, [r3, #0]
 8006e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	4413      	add	r3, r2
 8006e72:	3334      	adds	r3, #52	; 0x34
 8006e74:	460a      	mov	r2, r1
 8006e76:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006e78:	68ba      	ldr	r2, [r7, #8]
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d006      	beq.n	8006e92 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	3301      	adds	r3, #1
 8006e88:	61fb      	str	r3, [r7, #28]
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	2b0f      	cmp	r3, #15
 8006e8e:	d9e9      	bls.n	8006e64 <prvInitialiseNewTask+0x58>
 8006e90:	e000      	b.n	8006e94 <prvInitialiseNewTask+0x88>
			{
				break;
 8006e92:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e9c:	e003      	b.n	8006ea6 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea8:	2b06      	cmp	r3, #6
 8006eaa:	d901      	bls.n	8006eb0 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006eac:	2306      	movs	r3, #6
 8006eae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006eb4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006eba:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec4:	3304      	adds	r3, #4
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7fe fee6 	bl	8005c98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ece:	3318      	adds	r3, #24
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7fe fee1 	bl	8005c98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eda:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ede:	f1c3 0207 	rsb	r2, r3, #7
 8006ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eee:	2200      	movs	r2, #0
 8006ef0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	68f9      	ldr	r1, [r7, #12]
 8006efe:	69b8      	ldr	r0, [r7, #24]
 8006f00:	f000 ff22 	bl	8007d48 <pxPortInitialiseStack>
 8006f04:	4602      	mov	r2, r0
 8006f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f08:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d002      	beq.n	8006f16 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f16:	bf00      	nop
 8006f18:	3720      	adds	r7, #32
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
	...

08006f20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006f28:	f001 f818 	bl	8007f5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006f2c:	4b2a      	ldr	r3, [pc, #168]	; (8006fd8 <prvAddNewTaskToReadyList+0xb8>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	3301      	adds	r3, #1
 8006f32:	4a29      	ldr	r2, [pc, #164]	; (8006fd8 <prvAddNewTaskToReadyList+0xb8>)
 8006f34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006f36:	4b29      	ldr	r3, [pc, #164]	; (8006fdc <prvAddNewTaskToReadyList+0xbc>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d109      	bne.n	8006f52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006f3e:	4a27      	ldr	r2, [pc, #156]	; (8006fdc <prvAddNewTaskToReadyList+0xbc>)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006f44:	4b24      	ldr	r3, [pc, #144]	; (8006fd8 <prvAddNewTaskToReadyList+0xb8>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d110      	bne.n	8006f6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006f4c:	f000 fbfc 	bl	8007748 <prvInitialiseTaskLists>
 8006f50:	e00d      	b.n	8006f6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006f52:	4b23      	ldr	r3, [pc, #140]	; (8006fe0 <prvAddNewTaskToReadyList+0xc0>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d109      	bne.n	8006f6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006f5a:	4b20      	ldr	r3, [pc, #128]	; (8006fdc <prvAddNewTaskToReadyList+0xbc>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d802      	bhi.n	8006f6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006f68:	4a1c      	ldr	r2, [pc, #112]	; (8006fdc <prvAddNewTaskToReadyList+0xbc>)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006f6e:	4b1d      	ldr	r3, [pc, #116]	; (8006fe4 <prvAddNewTaskToReadyList+0xc4>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	3301      	adds	r3, #1
 8006f74:	4a1b      	ldr	r2, [pc, #108]	; (8006fe4 <prvAddNewTaskToReadyList+0xc4>)
 8006f76:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	409a      	lsls	r2, r3
 8006f80:	4b19      	ldr	r3, [pc, #100]	; (8006fe8 <prvAddNewTaskToReadyList+0xc8>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	4a18      	ldr	r2, [pc, #96]	; (8006fe8 <prvAddNewTaskToReadyList+0xc8>)
 8006f88:	6013      	str	r3, [r2, #0]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f8e:	4613      	mov	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4413      	add	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4a15      	ldr	r2, [pc, #84]	; (8006fec <prvAddNewTaskToReadyList+0xcc>)
 8006f98:	441a      	add	r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	3304      	adds	r3, #4
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	4610      	mov	r0, r2
 8006fa2:	f7fe fe86 	bl	8005cb2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006fa6:	f001 f80d 	bl	8007fc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006faa:	4b0d      	ldr	r3, [pc, #52]	; (8006fe0 <prvAddNewTaskToReadyList+0xc0>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00e      	beq.n	8006fd0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006fb2:	4b0a      	ldr	r3, [pc, #40]	; (8006fdc <prvAddNewTaskToReadyList+0xbc>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d207      	bcs.n	8006fd0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006fc0:	4b0b      	ldr	r3, [pc, #44]	; (8006ff0 <prvAddNewTaskToReadyList+0xd0>)
 8006fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fc6:	601a      	str	r2, [r3, #0]
 8006fc8:	f3bf 8f4f 	dsb	sy
 8006fcc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fd0:	bf00      	nop
 8006fd2:	3708      	adds	r7, #8
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	20000400 	.word	0x20000400
 8006fdc:	20000300 	.word	0x20000300
 8006fe0:	2000040c 	.word	0x2000040c
 8006fe4:	2000041c 	.word	0x2000041c
 8006fe8:	20000408 	.word	0x20000408
 8006fec:	20000304 	.word	0x20000304
 8006ff0:	e000ed04 	.word	0xe000ed04

08006ff4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d019      	beq.n	800703a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007006:	4b14      	ldr	r3, [pc, #80]	; (8007058 <vTaskDelay+0x64>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00c      	beq.n	8007028 <vTaskDelay+0x34>
	__asm volatile
 800700e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007012:	b672      	cpsid	i
 8007014:	f383 8811 	msr	BASEPRI, r3
 8007018:	f3bf 8f6f 	isb	sy
 800701c:	f3bf 8f4f 	dsb	sy
 8007020:	b662      	cpsie	i
 8007022:	60bb      	str	r3, [r7, #8]
}
 8007024:	bf00      	nop
 8007026:	e7fe      	b.n	8007026 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007028:	f000 f87e 	bl	8007128 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800702c:	2100      	movs	r1, #0
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fe24 	bl	8007c7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007034:	f000 f886 	bl	8007144 <xTaskResumeAll>
 8007038:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d107      	bne.n	8007050 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8007040:	4b06      	ldr	r3, [pc, #24]	; (800705c <vTaskDelay+0x68>)
 8007042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007046:	601a      	str	r2, [r3, #0]
 8007048:	f3bf 8f4f 	dsb	sy
 800704c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007050:	bf00      	nop
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	20000428 	.word	0x20000428
 800705c:	e000ed04 	.word	0xe000ed04

08007060 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b08a      	sub	sp, #40	; 0x28
 8007064:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007066:	2300      	movs	r3, #0
 8007068:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800706a:	2300      	movs	r3, #0
 800706c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800706e:	463a      	mov	r2, r7
 8007070:	1d39      	adds	r1, r7, #4
 8007072:	f107 0308 	add.w	r3, r7, #8
 8007076:	4618      	mov	r0, r3
 8007078:	f7f9 fac6 	bl	8000608 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800707c:	6839      	ldr	r1, [r7, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	9202      	str	r2, [sp, #8]
 8007084:	9301      	str	r3, [sp, #4]
 8007086:	2300      	movs	r3, #0
 8007088:	9300      	str	r3, [sp, #0]
 800708a:	2300      	movs	r3, #0
 800708c:	460a      	mov	r2, r1
 800708e:	4920      	ldr	r1, [pc, #128]	; (8007110 <vTaskStartScheduler+0xb0>)
 8007090:	4820      	ldr	r0, [pc, #128]	; (8007114 <vTaskStartScheduler+0xb4>)
 8007092:	f7ff fe13 	bl	8006cbc <xTaskCreateStatic>
 8007096:	4603      	mov	r3, r0
 8007098:	4a1f      	ldr	r2, [pc, #124]	; (8007118 <vTaskStartScheduler+0xb8>)
 800709a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800709c:	4b1e      	ldr	r3, [pc, #120]	; (8007118 <vTaskStartScheduler+0xb8>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d002      	beq.n	80070aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80070a4:	2301      	movs	r3, #1
 80070a6:	617b      	str	r3, [r7, #20]
 80070a8:	e001      	b.n	80070ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80070aa:	2300      	movs	r3, #0
 80070ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d118      	bne.n	80070e6 <vTaskStartScheduler+0x86>
	__asm volatile
 80070b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b8:	b672      	cpsid	i
 80070ba:	f383 8811 	msr	BASEPRI, r3
 80070be:	f3bf 8f6f 	isb	sy
 80070c2:	f3bf 8f4f 	dsb	sy
 80070c6:	b662      	cpsie	i
 80070c8:	613b      	str	r3, [r7, #16]
}
 80070ca:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80070cc:	4b13      	ldr	r3, [pc, #76]	; (800711c <vTaskStartScheduler+0xbc>)
 80070ce:	f04f 32ff 	mov.w	r2, #4294967295
 80070d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80070d4:	4b12      	ldr	r3, [pc, #72]	; (8007120 <vTaskStartScheduler+0xc0>)
 80070d6:	2201      	movs	r2, #1
 80070d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80070da:	4b12      	ldr	r3, [pc, #72]	; (8007124 <vTaskStartScheduler+0xc4>)
 80070dc:	2200      	movs	r2, #0
 80070de:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80070e0:	f000 febe 	bl	8007e60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80070e4:	e010      	b.n	8007108 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ec:	d10c      	bne.n	8007108 <vTaskStartScheduler+0xa8>
	__asm volatile
 80070ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f2:	b672      	cpsid	i
 80070f4:	f383 8811 	msr	BASEPRI, r3
 80070f8:	f3bf 8f6f 	isb	sy
 80070fc:	f3bf 8f4f 	dsb	sy
 8007100:	b662      	cpsie	i
 8007102:	60fb      	str	r3, [r7, #12]
}
 8007104:	bf00      	nop
 8007106:	e7fe      	b.n	8007106 <vTaskStartScheduler+0xa6>
}
 8007108:	bf00      	nop
 800710a:	3718      	adds	r7, #24
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	08016a68 	.word	0x08016a68
 8007114:	08007719 	.word	0x08007719
 8007118:	20000424 	.word	0x20000424
 800711c:	20000420 	.word	0x20000420
 8007120:	2000040c 	.word	0x2000040c
 8007124:	20000404 	.word	0x20000404

08007128 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007128:	b480      	push	{r7}
 800712a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800712c:	4b04      	ldr	r3, [pc, #16]	; (8007140 <vTaskSuspendAll+0x18>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	3301      	adds	r3, #1
 8007132:	4a03      	ldr	r2, [pc, #12]	; (8007140 <vTaskSuspendAll+0x18>)
 8007134:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007136:	bf00      	nop
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr
 8007140:	20000428 	.word	0x20000428

08007144 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800714a:	2300      	movs	r3, #0
 800714c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800714e:	2300      	movs	r3, #0
 8007150:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007152:	4b42      	ldr	r3, [pc, #264]	; (800725c <xTaskResumeAll+0x118>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10c      	bne.n	8007174 <xTaskResumeAll+0x30>
	__asm volatile
 800715a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715e:	b672      	cpsid	i
 8007160:	f383 8811 	msr	BASEPRI, r3
 8007164:	f3bf 8f6f 	isb	sy
 8007168:	f3bf 8f4f 	dsb	sy
 800716c:	b662      	cpsie	i
 800716e:	603b      	str	r3, [r7, #0]
}
 8007170:	bf00      	nop
 8007172:	e7fe      	b.n	8007172 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007174:	f000 fef2 	bl	8007f5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007178:	4b38      	ldr	r3, [pc, #224]	; (800725c <xTaskResumeAll+0x118>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	3b01      	subs	r3, #1
 800717e:	4a37      	ldr	r2, [pc, #220]	; (800725c <xTaskResumeAll+0x118>)
 8007180:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007182:	4b36      	ldr	r3, [pc, #216]	; (800725c <xTaskResumeAll+0x118>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d161      	bne.n	800724e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800718a:	4b35      	ldr	r3, [pc, #212]	; (8007260 <xTaskResumeAll+0x11c>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d05d      	beq.n	800724e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007192:	e02e      	b.n	80071f2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007194:	4b33      	ldr	r3, [pc, #204]	; (8007264 <xTaskResumeAll+0x120>)
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	3318      	adds	r3, #24
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7fe fde3 	bl	8005d6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	3304      	adds	r3, #4
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7fe fdde 	bl	8005d6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b4:	2201      	movs	r2, #1
 80071b6:	409a      	lsls	r2, r3
 80071b8:	4b2b      	ldr	r3, [pc, #172]	; (8007268 <xTaskResumeAll+0x124>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4313      	orrs	r3, r2
 80071be:	4a2a      	ldr	r2, [pc, #168]	; (8007268 <xTaskResumeAll+0x124>)
 80071c0:	6013      	str	r3, [r2, #0]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c6:	4613      	mov	r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	4413      	add	r3, r2
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4a27      	ldr	r2, [pc, #156]	; (800726c <xTaskResumeAll+0x128>)
 80071d0:	441a      	add	r2, r3
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	3304      	adds	r3, #4
 80071d6:	4619      	mov	r1, r3
 80071d8:	4610      	mov	r0, r2
 80071da:	f7fe fd6a 	bl	8005cb2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e2:	4b23      	ldr	r3, [pc, #140]	; (8007270 <xTaskResumeAll+0x12c>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d302      	bcc.n	80071f2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80071ec:	4b21      	ldr	r3, [pc, #132]	; (8007274 <xTaskResumeAll+0x130>)
 80071ee:	2201      	movs	r2, #1
 80071f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80071f2:	4b1c      	ldr	r3, [pc, #112]	; (8007264 <xTaskResumeAll+0x120>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1cc      	bne.n	8007194 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d001      	beq.n	8007204 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007200:	f000 fb42 	bl	8007888 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007204:	4b1c      	ldr	r3, [pc, #112]	; (8007278 <xTaskResumeAll+0x134>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d010      	beq.n	8007232 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007210:	f000 f858 	bl	80072c4 <xTaskIncrementTick>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d002      	beq.n	8007220 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800721a:	4b16      	ldr	r3, [pc, #88]	; (8007274 <xTaskResumeAll+0x130>)
 800721c:	2201      	movs	r2, #1
 800721e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	3b01      	subs	r3, #1
 8007224:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1f1      	bne.n	8007210 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800722c:	4b12      	ldr	r3, [pc, #72]	; (8007278 <xTaskResumeAll+0x134>)
 800722e:	2200      	movs	r2, #0
 8007230:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007232:	4b10      	ldr	r3, [pc, #64]	; (8007274 <xTaskResumeAll+0x130>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d009      	beq.n	800724e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800723a:	2301      	movs	r3, #1
 800723c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800723e:	4b0f      	ldr	r3, [pc, #60]	; (800727c <xTaskResumeAll+0x138>)
 8007240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007244:	601a      	str	r2, [r3, #0]
 8007246:	f3bf 8f4f 	dsb	sy
 800724a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800724e:	f000 feb9 	bl	8007fc4 <vPortExitCritical>

	return xAlreadyYielded;
 8007252:	68bb      	ldr	r3, [r7, #8]
}
 8007254:	4618      	mov	r0, r3
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}
 800725c:	20000428 	.word	0x20000428
 8007260:	20000400 	.word	0x20000400
 8007264:	200003c0 	.word	0x200003c0
 8007268:	20000408 	.word	0x20000408
 800726c:	20000304 	.word	0x20000304
 8007270:	20000300 	.word	0x20000300
 8007274:	20000414 	.word	0x20000414
 8007278:	20000410 	.word	0x20000410
 800727c:	e000ed04 	.word	0xe000ed04

08007280 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007286:	4b05      	ldr	r3, [pc, #20]	; (800729c <xTaskGetTickCount+0x1c>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800728c:	687b      	ldr	r3, [r7, #4]
}
 800728e:	4618      	mov	r0, r3
 8007290:	370c      	adds	r7, #12
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	20000404 	.word	0x20000404

080072a0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80072a6:	f000 ff41 	bl	800812c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80072aa:	2300      	movs	r3, #0
 80072ac:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80072ae:	4b04      	ldr	r3, [pc, #16]	; (80072c0 <xTaskGetTickCountFromISR+0x20>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80072b4:	683b      	ldr	r3, [r7, #0]
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3708      	adds	r7, #8
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop
 80072c0:	20000404 	.word	0x20000404

080072c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b086      	sub	sp, #24
 80072c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80072ca:	2300      	movs	r3, #0
 80072cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072ce:	4b4f      	ldr	r3, [pc, #316]	; (800740c <xTaskIncrementTick+0x148>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	f040 808a 	bne.w	80073ec <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80072d8:	4b4d      	ldr	r3, [pc, #308]	; (8007410 <xTaskIncrementTick+0x14c>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	3301      	adds	r3, #1
 80072de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80072e0:	4a4b      	ldr	r2, [pc, #300]	; (8007410 <xTaskIncrementTick+0x14c>)
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d122      	bne.n	8007332 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80072ec:	4b49      	ldr	r3, [pc, #292]	; (8007414 <xTaskIncrementTick+0x150>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00c      	beq.n	8007310 <xTaskIncrementTick+0x4c>
	__asm volatile
 80072f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fa:	b672      	cpsid	i
 80072fc:	f383 8811 	msr	BASEPRI, r3
 8007300:	f3bf 8f6f 	isb	sy
 8007304:	f3bf 8f4f 	dsb	sy
 8007308:	b662      	cpsie	i
 800730a:	603b      	str	r3, [r7, #0]
}
 800730c:	bf00      	nop
 800730e:	e7fe      	b.n	800730e <xTaskIncrementTick+0x4a>
 8007310:	4b40      	ldr	r3, [pc, #256]	; (8007414 <xTaskIncrementTick+0x150>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	60fb      	str	r3, [r7, #12]
 8007316:	4b40      	ldr	r3, [pc, #256]	; (8007418 <xTaskIncrementTick+0x154>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a3e      	ldr	r2, [pc, #248]	; (8007414 <xTaskIncrementTick+0x150>)
 800731c:	6013      	str	r3, [r2, #0]
 800731e:	4a3e      	ldr	r2, [pc, #248]	; (8007418 <xTaskIncrementTick+0x154>)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6013      	str	r3, [r2, #0]
 8007324:	4b3d      	ldr	r3, [pc, #244]	; (800741c <xTaskIncrementTick+0x158>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	3301      	adds	r3, #1
 800732a:	4a3c      	ldr	r2, [pc, #240]	; (800741c <xTaskIncrementTick+0x158>)
 800732c:	6013      	str	r3, [r2, #0]
 800732e:	f000 faab 	bl	8007888 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007332:	4b3b      	ldr	r3, [pc, #236]	; (8007420 <xTaskIncrementTick+0x15c>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	693a      	ldr	r2, [r7, #16]
 8007338:	429a      	cmp	r2, r3
 800733a:	d348      	bcc.n	80073ce <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800733c:	4b35      	ldr	r3, [pc, #212]	; (8007414 <xTaskIncrementTick+0x150>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d104      	bne.n	8007350 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007346:	4b36      	ldr	r3, [pc, #216]	; (8007420 <xTaskIncrementTick+0x15c>)
 8007348:	f04f 32ff 	mov.w	r2, #4294967295
 800734c:	601a      	str	r2, [r3, #0]
					break;
 800734e:	e03e      	b.n	80073ce <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007350:	4b30      	ldr	r3, [pc, #192]	; (8007414 <xTaskIncrementTick+0x150>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007360:	693a      	ldr	r2, [r7, #16]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	429a      	cmp	r2, r3
 8007366:	d203      	bcs.n	8007370 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007368:	4a2d      	ldr	r2, [pc, #180]	; (8007420 <xTaskIncrementTick+0x15c>)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800736e:	e02e      	b.n	80073ce <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	3304      	adds	r3, #4
 8007374:	4618      	mov	r0, r3
 8007376:	f7fe fcf9 	bl	8005d6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800737e:	2b00      	cmp	r3, #0
 8007380:	d004      	beq.n	800738c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	3318      	adds	r3, #24
 8007386:	4618      	mov	r0, r3
 8007388:	f7fe fcf0 	bl	8005d6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007390:	2201      	movs	r2, #1
 8007392:	409a      	lsls	r2, r3
 8007394:	4b23      	ldr	r3, [pc, #140]	; (8007424 <xTaskIncrementTick+0x160>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4313      	orrs	r3, r2
 800739a:	4a22      	ldr	r2, [pc, #136]	; (8007424 <xTaskIncrementTick+0x160>)
 800739c:	6013      	str	r3, [r2, #0]
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073a2:	4613      	mov	r3, r2
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	4413      	add	r3, r2
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	4a1f      	ldr	r2, [pc, #124]	; (8007428 <xTaskIncrementTick+0x164>)
 80073ac:	441a      	add	r2, r3
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	3304      	adds	r3, #4
 80073b2:	4619      	mov	r1, r3
 80073b4:	4610      	mov	r0, r2
 80073b6:	f7fe fc7c 	bl	8005cb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073be:	4b1b      	ldr	r3, [pc, #108]	; (800742c <xTaskIncrementTick+0x168>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d3b9      	bcc.n	800733c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80073c8:	2301      	movs	r3, #1
 80073ca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073cc:	e7b6      	b.n	800733c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80073ce:	4b17      	ldr	r3, [pc, #92]	; (800742c <xTaskIncrementTick+0x168>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073d4:	4914      	ldr	r1, [pc, #80]	; (8007428 <xTaskIncrementTick+0x164>)
 80073d6:	4613      	mov	r3, r2
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	4413      	add	r3, r2
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	440b      	add	r3, r1
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d907      	bls.n	80073f6 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80073e6:	2301      	movs	r3, #1
 80073e8:	617b      	str	r3, [r7, #20]
 80073ea:	e004      	b.n	80073f6 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80073ec:	4b10      	ldr	r3, [pc, #64]	; (8007430 <xTaskIncrementTick+0x16c>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	3301      	adds	r3, #1
 80073f2:	4a0f      	ldr	r2, [pc, #60]	; (8007430 <xTaskIncrementTick+0x16c>)
 80073f4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80073f6:	4b0f      	ldr	r3, [pc, #60]	; (8007434 <xTaskIncrementTick+0x170>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d001      	beq.n	8007402 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80073fe:	2301      	movs	r3, #1
 8007400:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007402:	697b      	ldr	r3, [r7, #20]
}
 8007404:	4618      	mov	r0, r3
 8007406:	3718      	adds	r7, #24
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	20000428 	.word	0x20000428
 8007410:	20000404 	.word	0x20000404
 8007414:	200003b8 	.word	0x200003b8
 8007418:	200003bc 	.word	0x200003bc
 800741c:	20000418 	.word	0x20000418
 8007420:	20000420 	.word	0x20000420
 8007424:	20000408 	.word	0x20000408
 8007428:	20000304 	.word	0x20000304
 800742c:	20000300 	.word	0x20000300
 8007430:	20000410 	.word	0x20000410
 8007434:	20000414 	.word	0x20000414

08007438 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007438:	b480      	push	{r7}
 800743a:	b087      	sub	sp, #28
 800743c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800743e:	4b28      	ldr	r3, [pc, #160]	; (80074e0 <vTaskSwitchContext+0xa8>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d003      	beq.n	800744e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007446:	4b27      	ldr	r3, [pc, #156]	; (80074e4 <vTaskSwitchContext+0xac>)
 8007448:	2201      	movs	r2, #1
 800744a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800744c:	e041      	b.n	80074d2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800744e:	4b25      	ldr	r3, [pc, #148]	; (80074e4 <vTaskSwitchContext+0xac>)
 8007450:	2200      	movs	r2, #0
 8007452:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007454:	4b24      	ldr	r3, [pc, #144]	; (80074e8 <vTaskSwitchContext+0xb0>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	fab3 f383 	clz	r3, r3
 8007460:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007462:	7afb      	ldrb	r3, [r7, #11]
 8007464:	f1c3 031f 	rsb	r3, r3, #31
 8007468:	617b      	str	r3, [r7, #20]
 800746a:	4920      	ldr	r1, [pc, #128]	; (80074ec <vTaskSwitchContext+0xb4>)
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	4613      	mov	r3, r2
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	4413      	add	r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	440b      	add	r3, r1
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10c      	bne.n	8007498 <vTaskSwitchContext+0x60>
	__asm volatile
 800747e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007482:	b672      	cpsid	i
 8007484:	f383 8811 	msr	BASEPRI, r3
 8007488:	f3bf 8f6f 	isb	sy
 800748c:	f3bf 8f4f 	dsb	sy
 8007490:	b662      	cpsie	i
 8007492:	607b      	str	r3, [r7, #4]
}
 8007494:	bf00      	nop
 8007496:	e7fe      	b.n	8007496 <vTaskSwitchContext+0x5e>
 8007498:	697a      	ldr	r2, [r7, #20]
 800749a:	4613      	mov	r3, r2
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4413      	add	r3, r2
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	4a12      	ldr	r2, [pc, #72]	; (80074ec <vTaskSwitchContext+0xb4>)
 80074a4:	4413      	add	r3, r2
 80074a6:	613b      	str	r3, [r7, #16]
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	685a      	ldr	r2, [r3, #4]
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	605a      	str	r2, [r3, #4]
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	685a      	ldr	r2, [r3, #4]
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	3308      	adds	r3, #8
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d104      	bne.n	80074c8 <vTaskSwitchContext+0x90>
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	685a      	ldr	r2, [r3, #4]
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	605a      	str	r2, [r3, #4]
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	4a08      	ldr	r2, [pc, #32]	; (80074f0 <vTaskSwitchContext+0xb8>)
 80074d0:	6013      	str	r3, [r2, #0]
}
 80074d2:	bf00      	nop
 80074d4:	371c      	adds	r7, #28
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	20000428 	.word	0x20000428
 80074e4:	20000414 	.word	0x20000414
 80074e8:	20000408 	.word	0x20000408
 80074ec:	20000304 	.word	0x20000304
 80074f0:	20000300 	.word	0x20000300

080074f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10c      	bne.n	800751e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8007504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007508:	b672      	cpsid	i
 800750a:	f383 8811 	msr	BASEPRI, r3
 800750e:	f3bf 8f6f 	isb	sy
 8007512:	f3bf 8f4f 	dsb	sy
 8007516:	b662      	cpsie	i
 8007518:	60fb      	str	r3, [r7, #12]
}
 800751a:	bf00      	nop
 800751c:	e7fe      	b.n	800751c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800751e:	4b07      	ldr	r3, [pc, #28]	; (800753c <vTaskPlaceOnEventList+0x48>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	3318      	adds	r3, #24
 8007524:	4619      	mov	r1, r3
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f7fe fbe7 	bl	8005cfa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800752c:	2101      	movs	r1, #1
 800752e:	6838      	ldr	r0, [r7, #0]
 8007530:	f000 fba4 	bl	8007c7c <prvAddCurrentTaskToDelayedList>
}
 8007534:	bf00      	nop
 8007536:	3710      	adds	r7, #16
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}
 800753c:	20000300 	.word	0x20000300

08007540 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d10c      	bne.n	8007570 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8007556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755a:	b672      	cpsid	i
 800755c:	f383 8811 	msr	BASEPRI, r3
 8007560:	f3bf 8f6f 	isb	sy
 8007564:	f3bf 8f4f 	dsb	sy
 8007568:	b662      	cpsie	i
 800756a:	60fb      	str	r3, [r7, #12]
}
 800756c:	bf00      	nop
 800756e:	e7fe      	b.n	800756e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	3318      	adds	r3, #24
 8007574:	4618      	mov	r0, r3
 8007576:	f7fe fbf9 	bl	8005d6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800757a:	4b1d      	ldr	r3, [pc, #116]	; (80075f0 <xTaskRemoveFromEventList+0xb0>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d11c      	bne.n	80075bc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	3304      	adds	r3, #4
 8007586:	4618      	mov	r0, r3
 8007588:	f7fe fbf0 	bl	8005d6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007590:	2201      	movs	r2, #1
 8007592:	409a      	lsls	r2, r3
 8007594:	4b17      	ldr	r3, [pc, #92]	; (80075f4 <xTaskRemoveFromEventList+0xb4>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4313      	orrs	r3, r2
 800759a:	4a16      	ldr	r2, [pc, #88]	; (80075f4 <xTaskRemoveFromEventList+0xb4>)
 800759c:	6013      	str	r3, [r2, #0]
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075a2:	4613      	mov	r3, r2
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	4413      	add	r3, r2
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	4a13      	ldr	r2, [pc, #76]	; (80075f8 <xTaskRemoveFromEventList+0xb8>)
 80075ac:	441a      	add	r2, r3
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	3304      	adds	r3, #4
 80075b2:	4619      	mov	r1, r3
 80075b4:	4610      	mov	r0, r2
 80075b6:	f7fe fb7c 	bl	8005cb2 <vListInsertEnd>
 80075ba:	e005      	b.n	80075c8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	3318      	adds	r3, #24
 80075c0:	4619      	mov	r1, r3
 80075c2:	480e      	ldr	r0, [pc, #56]	; (80075fc <xTaskRemoveFromEventList+0xbc>)
 80075c4:	f7fe fb75 	bl	8005cb2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075cc:	4b0c      	ldr	r3, [pc, #48]	; (8007600 <xTaskRemoveFromEventList+0xc0>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d905      	bls.n	80075e2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80075d6:	2301      	movs	r3, #1
 80075d8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80075da:	4b0a      	ldr	r3, [pc, #40]	; (8007604 <xTaskRemoveFromEventList+0xc4>)
 80075dc:	2201      	movs	r2, #1
 80075de:	601a      	str	r2, [r3, #0]
 80075e0:	e001      	b.n	80075e6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80075e2:	2300      	movs	r3, #0
 80075e4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80075e6:	697b      	ldr	r3, [r7, #20]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3718      	adds	r7, #24
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	20000428 	.word	0x20000428
 80075f4:	20000408 	.word	0x20000408
 80075f8:	20000304 	.word	0x20000304
 80075fc:	200003c0 	.word	0x200003c0
 8007600:	20000300 	.word	0x20000300
 8007604:	20000414 	.word	0x20000414

08007608 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007610:	4b06      	ldr	r3, [pc, #24]	; (800762c <vTaskInternalSetTimeOutState+0x24>)
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007618:	4b05      	ldr	r3, [pc, #20]	; (8007630 <vTaskInternalSetTimeOutState+0x28>)
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	605a      	str	r2, [r3, #4]
}
 8007620:	bf00      	nop
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr
 800762c:	20000418 	.word	0x20000418
 8007630:	20000404 	.word	0x20000404

08007634 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b088      	sub	sp, #32
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10c      	bne.n	800765e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8007644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007648:	b672      	cpsid	i
 800764a:	f383 8811 	msr	BASEPRI, r3
 800764e:	f3bf 8f6f 	isb	sy
 8007652:	f3bf 8f4f 	dsb	sy
 8007656:	b662      	cpsie	i
 8007658:	613b      	str	r3, [r7, #16]
}
 800765a:	bf00      	nop
 800765c:	e7fe      	b.n	800765c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d10c      	bne.n	800767e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8007664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007668:	b672      	cpsid	i
 800766a:	f383 8811 	msr	BASEPRI, r3
 800766e:	f3bf 8f6f 	isb	sy
 8007672:	f3bf 8f4f 	dsb	sy
 8007676:	b662      	cpsie	i
 8007678:	60fb      	str	r3, [r7, #12]
}
 800767a:	bf00      	nop
 800767c:	e7fe      	b.n	800767c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800767e:	f000 fc6d 	bl	8007f5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007682:	4b1d      	ldr	r3, [pc, #116]	; (80076f8 <xTaskCheckForTimeOut+0xc4>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	69ba      	ldr	r2, [r7, #24]
 800768e:	1ad3      	subs	r3, r2, r3
 8007690:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800769a:	d102      	bne.n	80076a2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800769c:	2300      	movs	r3, #0
 800769e:	61fb      	str	r3, [r7, #28]
 80076a0:	e023      	b.n	80076ea <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	4b15      	ldr	r3, [pc, #84]	; (80076fc <xTaskCheckForTimeOut+0xc8>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d007      	beq.n	80076be <xTaskCheckForTimeOut+0x8a>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	69ba      	ldr	r2, [r7, #24]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d302      	bcc.n	80076be <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80076b8:	2301      	movs	r3, #1
 80076ba:	61fb      	str	r3, [r7, #28]
 80076bc:	e015      	b.n	80076ea <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	697a      	ldr	r2, [r7, #20]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d20b      	bcs.n	80076e0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	1ad2      	subs	r2, r2, r3
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f7ff ff97 	bl	8007608 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80076da:	2300      	movs	r3, #0
 80076dc:	61fb      	str	r3, [r7, #28]
 80076de:	e004      	b.n	80076ea <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	2200      	movs	r2, #0
 80076e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80076e6:	2301      	movs	r3, #1
 80076e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80076ea:	f000 fc6b 	bl	8007fc4 <vPortExitCritical>

	return xReturn;
 80076ee:	69fb      	ldr	r3, [r7, #28]
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3720      	adds	r7, #32
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	20000404 	.word	0x20000404
 80076fc:	20000418 	.word	0x20000418

08007700 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007700:	b480      	push	{r7}
 8007702:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007704:	4b03      	ldr	r3, [pc, #12]	; (8007714 <vTaskMissedYield+0x14>)
 8007706:	2201      	movs	r2, #1
 8007708:	601a      	str	r2, [r3, #0]
}
 800770a:	bf00      	nop
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr
 8007714:	20000414 	.word	0x20000414

08007718 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007720:	f000 f852 	bl	80077c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007724:	4b06      	ldr	r3, [pc, #24]	; (8007740 <prvIdleTask+0x28>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d9f9      	bls.n	8007720 <prvIdleTask+0x8>
			{
				taskYIELD();
 800772c:	4b05      	ldr	r3, [pc, #20]	; (8007744 <prvIdleTask+0x2c>)
 800772e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007732:	601a      	str	r2, [r3, #0]
 8007734:	f3bf 8f4f 	dsb	sy
 8007738:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800773c:	e7f0      	b.n	8007720 <prvIdleTask+0x8>
 800773e:	bf00      	nop
 8007740:	20000304 	.word	0x20000304
 8007744:	e000ed04 	.word	0xe000ed04

08007748 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800774e:	2300      	movs	r3, #0
 8007750:	607b      	str	r3, [r7, #4]
 8007752:	e00c      	b.n	800776e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	4613      	mov	r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	4413      	add	r3, r2
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	4a12      	ldr	r2, [pc, #72]	; (80077a8 <prvInitialiseTaskLists+0x60>)
 8007760:	4413      	add	r3, r2
 8007762:	4618      	mov	r0, r3
 8007764:	f7fe fa78 	bl	8005c58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	3301      	adds	r3, #1
 800776c:	607b      	str	r3, [r7, #4]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2b06      	cmp	r3, #6
 8007772:	d9ef      	bls.n	8007754 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007774:	480d      	ldr	r0, [pc, #52]	; (80077ac <prvInitialiseTaskLists+0x64>)
 8007776:	f7fe fa6f 	bl	8005c58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800777a:	480d      	ldr	r0, [pc, #52]	; (80077b0 <prvInitialiseTaskLists+0x68>)
 800777c:	f7fe fa6c 	bl	8005c58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007780:	480c      	ldr	r0, [pc, #48]	; (80077b4 <prvInitialiseTaskLists+0x6c>)
 8007782:	f7fe fa69 	bl	8005c58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007786:	480c      	ldr	r0, [pc, #48]	; (80077b8 <prvInitialiseTaskLists+0x70>)
 8007788:	f7fe fa66 	bl	8005c58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800778c:	480b      	ldr	r0, [pc, #44]	; (80077bc <prvInitialiseTaskLists+0x74>)
 800778e:	f7fe fa63 	bl	8005c58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007792:	4b0b      	ldr	r3, [pc, #44]	; (80077c0 <prvInitialiseTaskLists+0x78>)
 8007794:	4a05      	ldr	r2, [pc, #20]	; (80077ac <prvInitialiseTaskLists+0x64>)
 8007796:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007798:	4b0a      	ldr	r3, [pc, #40]	; (80077c4 <prvInitialiseTaskLists+0x7c>)
 800779a:	4a05      	ldr	r2, [pc, #20]	; (80077b0 <prvInitialiseTaskLists+0x68>)
 800779c:	601a      	str	r2, [r3, #0]
}
 800779e:	bf00      	nop
 80077a0:	3708      	adds	r7, #8
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	20000304 	.word	0x20000304
 80077ac:	20000390 	.word	0x20000390
 80077b0:	200003a4 	.word	0x200003a4
 80077b4:	200003c0 	.word	0x200003c0
 80077b8:	200003d4 	.word	0x200003d4
 80077bc:	200003ec 	.word	0x200003ec
 80077c0:	200003b8 	.word	0x200003b8
 80077c4:	200003bc 	.word	0x200003bc

080077c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077ce:	e019      	b.n	8007804 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80077d0:	f000 fbc4 	bl	8007f5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077d4:	4b10      	ldr	r3, [pc, #64]	; (8007818 <prvCheckTasksWaitingTermination+0x50>)
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	3304      	adds	r3, #4
 80077e0:	4618      	mov	r0, r3
 80077e2:	f7fe fac3 	bl	8005d6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80077e6:	4b0d      	ldr	r3, [pc, #52]	; (800781c <prvCheckTasksWaitingTermination+0x54>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	3b01      	subs	r3, #1
 80077ec:	4a0b      	ldr	r2, [pc, #44]	; (800781c <prvCheckTasksWaitingTermination+0x54>)
 80077ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80077f0:	4b0b      	ldr	r3, [pc, #44]	; (8007820 <prvCheckTasksWaitingTermination+0x58>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	3b01      	subs	r3, #1
 80077f6:	4a0a      	ldr	r2, [pc, #40]	; (8007820 <prvCheckTasksWaitingTermination+0x58>)
 80077f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80077fa:	f000 fbe3 	bl	8007fc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 f810 	bl	8007824 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007804:	4b06      	ldr	r3, [pc, #24]	; (8007820 <prvCheckTasksWaitingTermination+0x58>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d1e1      	bne.n	80077d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800780c:	bf00      	nop
 800780e:	bf00      	nop
 8007810:	3708      	adds	r7, #8
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	200003d4 	.word	0x200003d4
 800781c:	20000400 	.word	0x20000400
 8007820:	200003e8 	.word	0x200003e8

08007824 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007832:	2b00      	cmp	r3, #0
 8007834:	d108      	bne.n	8007848 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800783a:	4618      	mov	r0, r3
 800783c:	f000 fd84 	bl	8008348 <vPortFree>
				vPortFree( pxTCB );
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 fd81 	bl	8008348 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007846:	e01a      	b.n	800787e <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800784e:	2b01      	cmp	r3, #1
 8007850:	d103      	bne.n	800785a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 fd78 	bl	8008348 <vPortFree>
	}
 8007858:	e011      	b.n	800787e <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007860:	2b02      	cmp	r3, #2
 8007862:	d00c      	beq.n	800787e <prvDeleteTCB+0x5a>
	__asm volatile
 8007864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007868:	b672      	cpsid	i
 800786a:	f383 8811 	msr	BASEPRI, r3
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	f3bf 8f4f 	dsb	sy
 8007876:	b662      	cpsie	i
 8007878:	60fb      	str	r3, [r7, #12]
}
 800787a:	bf00      	nop
 800787c:	e7fe      	b.n	800787c <prvDeleteTCB+0x58>
	}
 800787e:	bf00      	nop
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
	...

08007888 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800788e:	4b0c      	ldr	r3, [pc, #48]	; (80078c0 <prvResetNextTaskUnblockTime+0x38>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d104      	bne.n	80078a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007898:	4b0a      	ldr	r3, [pc, #40]	; (80078c4 <prvResetNextTaskUnblockTime+0x3c>)
 800789a:	f04f 32ff 	mov.w	r2, #4294967295
 800789e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80078a0:	e008      	b.n	80078b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078a2:	4b07      	ldr	r3, [pc, #28]	; (80078c0 <prvResetNextTaskUnblockTime+0x38>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	4a04      	ldr	r2, [pc, #16]	; (80078c4 <prvResetNextTaskUnblockTime+0x3c>)
 80078b2:	6013      	str	r3, [r2, #0]
}
 80078b4:	bf00      	nop
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr
 80078c0:	200003b8 	.word	0x200003b8
 80078c4:	20000420 	.word	0x20000420

080078c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80078ce:	4b0b      	ldr	r3, [pc, #44]	; (80078fc <xTaskGetSchedulerState+0x34>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d102      	bne.n	80078dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80078d6:	2301      	movs	r3, #1
 80078d8:	607b      	str	r3, [r7, #4]
 80078da:	e008      	b.n	80078ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078dc:	4b08      	ldr	r3, [pc, #32]	; (8007900 <xTaskGetSchedulerState+0x38>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d102      	bne.n	80078ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80078e4:	2302      	movs	r3, #2
 80078e6:	607b      	str	r3, [r7, #4]
 80078e8:	e001      	b.n	80078ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80078ea:	2300      	movs	r3, #0
 80078ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80078ee:	687b      	ldr	r3, [r7, #4]
	}
 80078f0:	4618      	mov	r0, r3
 80078f2:	370c      	adds	r7, #12
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr
 80078fc:	2000040c 	.word	0x2000040c
 8007900:	20000428 	.word	0x20000428

08007904 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007910:	2300      	movs	r3, #0
 8007912:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d069      	beq.n	80079ee <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800791e:	4b36      	ldr	r3, [pc, #216]	; (80079f8 <xTaskPriorityInherit+0xf4>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007924:	429a      	cmp	r2, r3
 8007926:	d259      	bcs.n	80079dc <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	699b      	ldr	r3, [r3, #24]
 800792c:	2b00      	cmp	r3, #0
 800792e:	db06      	blt.n	800793e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007930:	4b31      	ldr	r3, [pc, #196]	; (80079f8 <xTaskPriorityInherit+0xf4>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007936:	f1c3 0207 	rsb	r2, r3, #7
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	6959      	ldr	r1, [r3, #20]
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007946:	4613      	mov	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	4413      	add	r3, r2
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	4a2b      	ldr	r2, [pc, #172]	; (80079fc <xTaskPriorityInherit+0xf8>)
 8007950:	4413      	add	r3, r2
 8007952:	4299      	cmp	r1, r3
 8007954:	d13a      	bne.n	80079cc <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	3304      	adds	r3, #4
 800795a:	4618      	mov	r0, r3
 800795c:	f7fe fa06 	bl	8005d6c <uxListRemove>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d115      	bne.n	8007992 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800796a:	4924      	ldr	r1, [pc, #144]	; (80079fc <xTaskPriorityInherit+0xf8>)
 800796c:	4613      	mov	r3, r2
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	4413      	add	r3, r2
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	440b      	add	r3, r1
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10a      	bne.n	8007992 <xTaskPriorityInherit+0x8e>
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007980:	2201      	movs	r2, #1
 8007982:	fa02 f303 	lsl.w	r3, r2, r3
 8007986:	43da      	mvns	r2, r3
 8007988:	4b1d      	ldr	r3, [pc, #116]	; (8007a00 <xTaskPriorityInherit+0xfc>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4013      	ands	r3, r2
 800798e:	4a1c      	ldr	r2, [pc, #112]	; (8007a00 <xTaskPriorityInherit+0xfc>)
 8007990:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007992:	4b19      	ldr	r3, [pc, #100]	; (80079f8 <xTaskPriorityInherit+0xf4>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a0:	2201      	movs	r2, #1
 80079a2:	409a      	lsls	r2, r3
 80079a4:	4b16      	ldr	r3, [pc, #88]	; (8007a00 <xTaskPriorityInherit+0xfc>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	4a15      	ldr	r2, [pc, #84]	; (8007a00 <xTaskPriorityInherit+0xfc>)
 80079ac:	6013      	str	r3, [r2, #0]
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079b2:	4613      	mov	r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	4413      	add	r3, r2
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	4a10      	ldr	r2, [pc, #64]	; (80079fc <xTaskPriorityInherit+0xf8>)
 80079bc:	441a      	add	r2, r3
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	3304      	adds	r3, #4
 80079c2:	4619      	mov	r1, r3
 80079c4:	4610      	mov	r0, r2
 80079c6:	f7fe f974 	bl	8005cb2 <vListInsertEnd>
 80079ca:	e004      	b.n	80079d6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80079cc:	4b0a      	ldr	r3, [pc, #40]	; (80079f8 <xTaskPriorityInherit+0xf4>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80079d6:	2301      	movs	r3, #1
 80079d8:	60fb      	str	r3, [r7, #12]
 80079da:	e008      	b.n	80079ee <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079e0:	4b05      	ldr	r3, [pc, #20]	; (80079f8 <xTaskPriorityInherit+0xf4>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d201      	bcs.n	80079ee <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80079ea:	2301      	movs	r3, #1
 80079ec:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80079ee:	68fb      	ldr	r3, [r7, #12]
	}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3710      	adds	r7, #16
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	20000300 	.word	0x20000300
 80079fc:	20000304 	.word	0x20000304
 8007a00:	20000408 	.word	0x20000408

08007a04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b086      	sub	sp, #24
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007a10:	2300      	movs	r3, #0
 8007a12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d072      	beq.n	8007b00 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007a1a:	4b3c      	ldr	r3, [pc, #240]	; (8007b0c <xTaskPriorityDisinherit+0x108>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	693a      	ldr	r2, [r7, #16]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d00c      	beq.n	8007a3e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8007a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a28:	b672      	cpsid	i
 8007a2a:	f383 8811 	msr	BASEPRI, r3
 8007a2e:	f3bf 8f6f 	isb	sy
 8007a32:	f3bf 8f4f 	dsb	sy
 8007a36:	b662      	cpsie	i
 8007a38:	60fb      	str	r3, [r7, #12]
}
 8007a3a:	bf00      	nop
 8007a3c:	e7fe      	b.n	8007a3c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10c      	bne.n	8007a60 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8007a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4a:	b672      	cpsid	i
 8007a4c:	f383 8811 	msr	BASEPRI, r3
 8007a50:	f3bf 8f6f 	isb	sy
 8007a54:	f3bf 8f4f 	dsb	sy
 8007a58:	b662      	cpsie	i
 8007a5a:	60bb      	str	r3, [r7, #8]
}
 8007a5c:	bf00      	nop
 8007a5e:	e7fe      	b.n	8007a5e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a64:	1e5a      	subs	r2, r3, #1
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d044      	beq.n	8007b00 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d140      	bne.n	8007b00 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	3304      	adds	r3, #4
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7fe f972 	bl	8005d6c <uxListRemove>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d115      	bne.n	8007aba <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a92:	491f      	ldr	r1, [pc, #124]	; (8007b10 <xTaskPriorityDisinherit+0x10c>)
 8007a94:	4613      	mov	r3, r2
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	4413      	add	r3, r2
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	440b      	add	r3, r1
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d10a      	bne.n	8007aba <xTaskPriorityDisinherit+0xb6>
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8007aae:	43da      	mvns	r2, r3
 8007ab0:	4b18      	ldr	r3, [pc, #96]	; (8007b14 <xTaskPriorityDisinherit+0x110>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	4a17      	ldr	r2, [pc, #92]	; (8007b14 <xTaskPriorityDisinherit+0x110>)
 8007ab8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac6:	f1c3 0207 	rsb	r2, r3, #7
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	409a      	lsls	r2, r3
 8007ad6:	4b0f      	ldr	r3, [pc, #60]	; (8007b14 <xTaskPriorityDisinherit+0x110>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	4a0d      	ldr	r2, [pc, #52]	; (8007b14 <xTaskPriorityDisinherit+0x110>)
 8007ade:	6013      	str	r3, [r2, #0]
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	4413      	add	r3, r2
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	4a08      	ldr	r2, [pc, #32]	; (8007b10 <xTaskPriorityDisinherit+0x10c>)
 8007aee:	441a      	add	r2, r3
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	3304      	adds	r3, #4
 8007af4:	4619      	mov	r1, r3
 8007af6:	4610      	mov	r0, r2
 8007af8:	f7fe f8db 	bl	8005cb2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007afc:	2301      	movs	r3, #1
 8007afe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007b00:	697b      	ldr	r3, [r7, #20]
	}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3718      	adds	r7, #24
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	20000300 	.word	0x20000300
 8007b10:	20000304 	.word	0x20000304
 8007b14:	20000408 	.word	0x20000408

08007b18 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b088      	sub	sp, #32
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007b26:	2301      	movs	r3, #1
 8007b28:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f000 8087 	beq.w	8007c40 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d10c      	bne.n	8007b54 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8007b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3e:	b672      	cpsid	i
 8007b40:	f383 8811 	msr	BASEPRI, r3
 8007b44:	f3bf 8f6f 	isb	sy
 8007b48:	f3bf 8f4f 	dsb	sy
 8007b4c:	b662      	cpsie	i
 8007b4e:	60fb      	str	r3, [r7, #12]
}
 8007b50:	bf00      	nop
 8007b52:	e7fe      	b.n	8007b52 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b58:	683a      	ldr	r2, [r7, #0]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d902      	bls.n	8007b64 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	61fb      	str	r3, [r7, #28]
 8007b62:	e002      	b.n	8007b6a <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b68:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6e:	69fa      	ldr	r2, [r7, #28]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d065      	beq.n	8007c40 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b78:	697a      	ldr	r2, [r7, #20]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d160      	bne.n	8007c40 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007b7e:	4b32      	ldr	r3, [pc, #200]	; (8007c48 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	69ba      	ldr	r2, [r7, #24]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d10c      	bne.n	8007ba2 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8007b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8c:	b672      	cpsid	i
 8007b8e:	f383 8811 	msr	BASEPRI, r3
 8007b92:	f3bf 8f6f 	isb	sy
 8007b96:	f3bf 8f4f 	dsb	sy
 8007b9a:	b662      	cpsie	i
 8007b9c:	60bb      	str	r3, [r7, #8]
}
 8007b9e:	bf00      	nop
 8007ba0:	e7fe      	b.n	8007ba0 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007ba2:	69bb      	ldr	r3, [r7, #24]
 8007ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	69fa      	ldr	r2, [r7, #28]
 8007bac:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	699b      	ldr	r3, [r3, #24]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	db04      	blt.n	8007bc0 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	f1c3 0207 	rsb	r2, r3, #7
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	6959      	ldr	r1, [r3, #20]
 8007bc4:	693a      	ldr	r2, [r7, #16]
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	4413      	add	r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4a1f      	ldr	r2, [pc, #124]	; (8007c4c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007bd0:	4413      	add	r3, r2
 8007bd2:	4299      	cmp	r1, r3
 8007bd4:	d134      	bne.n	8007c40 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	3304      	adds	r3, #4
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7fe f8c6 	bl	8005d6c <uxListRemove>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d115      	bne.n	8007c12 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007be6:	69bb      	ldr	r3, [r7, #24]
 8007be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bea:	4918      	ldr	r1, [pc, #96]	; (8007c4c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007bec:	4613      	mov	r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	4413      	add	r3, r2
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	440b      	add	r3, r1
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d10a      	bne.n	8007c12 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c00:	2201      	movs	r2, #1
 8007c02:	fa02 f303 	lsl.w	r3, r2, r3
 8007c06:	43da      	mvns	r2, r3
 8007c08:	4b11      	ldr	r3, [pc, #68]	; (8007c50 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4013      	ands	r3, r2
 8007c0e:	4a10      	ldr	r2, [pc, #64]	; (8007c50 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007c10:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c16:	2201      	movs	r2, #1
 8007c18:	409a      	lsls	r2, r3
 8007c1a:	4b0d      	ldr	r3, [pc, #52]	; (8007c50 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	4a0b      	ldr	r2, [pc, #44]	; (8007c50 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007c22:	6013      	str	r3, [r2, #0]
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c28:	4613      	mov	r3, r2
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	4413      	add	r3, r2
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	4a06      	ldr	r2, [pc, #24]	; (8007c4c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007c32:	441a      	add	r2, r3
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	3304      	adds	r3, #4
 8007c38:	4619      	mov	r1, r3
 8007c3a:	4610      	mov	r0, r2
 8007c3c:	f7fe f839 	bl	8005cb2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c40:	bf00      	nop
 8007c42:	3720      	adds	r7, #32
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	20000300 	.word	0x20000300
 8007c4c:	20000304 	.word	0x20000304
 8007c50:	20000408 	.word	0x20000408

08007c54 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007c54:	b480      	push	{r7}
 8007c56:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007c58:	4b07      	ldr	r3, [pc, #28]	; (8007c78 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d004      	beq.n	8007c6a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007c60:	4b05      	ldr	r3, [pc, #20]	; (8007c78 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c66:	3201      	adds	r2, #1
 8007c68:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007c6a:	4b03      	ldr	r3, [pc, #12]	; (8007c78 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
	}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr
 8007c78:	20000300 	.word	0x20000300

08007c7c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007c86:	4b29      	ldr	r3, [pc, #164]	; (8007d2c <prvAddCurrentTaskToDelayedList+0xb0>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c8c:	4b28      	ldr	r3, [pc, #160]	; (8007d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	3304      	adds	r3, #4
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7fe f86a 	bl	8005d6c <uxListRemove>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d10b      	bne.n	8007cb6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007c9e:	4b24      	ldr	r3, [pc, #144]	; (8007d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8007caa:	43da      	mvns	r2, r3
 8007cac:	4b21      	ldr	r3, [pc, #132]	; (8007d34 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	4a20      	ldr	r2, [pc, #128]	; (8007d34 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007cb4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cbc:	d10a      	bne.n	8007cd4 <prvAddCurrentTaskToDelayedList+0x58>
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d007      	beq.n	8007cd4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cc4:	4b1a      	ldr	r3, [pc, #104]	; (8007d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	3304      	adds	r3, #4
 8007cca:	4619      	mov	r1, r3
 8007ccc:	481a      	ldr	r0, [pc, #104]	; (8007d38 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007cce:	f7fd fff0 	bl	8005cb2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007cd2:	e026      	b.n	8007d22 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4413      	add	r3, r2
 8007cda:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007cdc:	4b14      	ldr	r3, [pc, #80]	; (8007d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68ba      	ldr	r2, [r7, #8]
 8007ce2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007ce4:	68ba      	ldr	r2, [r7, #8]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d209      	bcs.n	8007d00 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cec:	4b13      	ldr	r3, [pc, #76]	; (8007d3c <prvAddCurrentTaskToDelayedList+0xc0>)
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	4b0f      	ldr	r3, [pc, #60]	; (8007d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	3304      	adds	r3, #4
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	4610      	mov	r0, r2
 8007cfa:	f7fd fffe 	bl	8005cfa <vListInsert>
}
 8007cfe:	e010      	b.n	8007d22 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d00:	4b0f      	ldr	r3, [pc, #60]	; (8007d40 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	4b0a      	ldr	r3, [pc, #40]	; (8007d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	3304      	adds	r3, #4
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	4610      	mov	r0, r2
 8007d0e:	f7fd fff4 	bl	8005cfa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d12:	4b0c      	ldr	r3, [pc, #48]	; (8007d44 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68ba      	ldr	r2, [r7, #8]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d202      	bcs.n	8007d22 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007d1c:	4a09      	ldr	r2, [pc, #36]	; (8007d44 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	6013      	str	r3, [r2, #0]
}
 8007d22:	bf00      	nop
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	20000404 	.word	0x20000404
 8007d30:	20000300 	.word	0x20000300
 8007d34:	20000408 	.word	0x20000408
 8007d38:	200003ec 	.word	0x200003ec
 8007d3c:	200003bc 	.word	0x200003bc
 8007d40:	200003b8 	.word	0x200003b8
 8007d44:	20000420 	.word	0x20000420

08007d48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	3b04      	subs	r3, #4
 8007d58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007d60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	3b04      	subs	r3, #4
 8007d66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	f023 0201 	bic.w	r2, r3, #1
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	3b04      	subs	r3, #4
 8007d76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d78:	4a0c      	ldr	r2, [pc, #48]	; (8007dac <pxPortInitialiseStack+0x64>)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	3b14      	subs	r3, #20
 8007d82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	3b04      	subs	r3, #4
 8007d8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f06f 0202 	mvn.w	r2, #2
 8007d96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	3b20      	subs	r3, #32
 8007d9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3714      	adds	r7, #20
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr
 8007dac:	08007db1 	.word	0x08007db1

08007db0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007db0:	b480      	push	{r7}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007db6:	2300      	movs	r3, #0
 8007db8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007dba:	4b14      	ldr	r3, [pc, #80]	; (8007e0c <prvTaskExitError+0x5c>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dc2:	d00c      	beq.n	8007dde <prvTaskExitError+0x2e>
	__asm volatile
 8007dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc8:	b672      	cpsid	i
 8007dca:	f383 8811 	msr	BASEPRI, r3
 8007dce:	f3bf 8f6f 	isb	sy
 8007dd2:	f3bf 8f4f 	dsb	sy
 8007dd6:	b662      	cpsie	i
 8007dd8:	60fb      	str	r3, [r7, #12]
}
 8007dda:	bf00      	nop
 8007ddc:	e7fe      	b.n	8007ddc <prvTaskExitError+0x2c>
	__asm volatile
 8007dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de2:	b672      	cpsid	i
 8007de4:	f383 8811 	msr	BASEPRI, r3
 8007de8:	f3bf 8f6f 	isb	sy
 8007dec:	f3bf 8f4f 	dsb	sy
 8007df0:	b662      	cpsie	i
 8007df2:	60bb      	str	r3, [r7, #8]
}
 8007df4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007df6:	bf00      	nop
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d0fc      	beq.n	8007df8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007dfe:	bf00      	nop
 8007e00:	bf00      	nop
 8007e02:	3714      	adds	r7, #20
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr
 8007e0c:	2000000c 	.word	0x2000000c

08007e10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007e10:	4b07      	ldr	r3, [pc, #28]	; (8007e30 <pxCurrentTCBConst2>)
 8007e12:	6819      	ldr	r1, [r3, #0]
 8007e14:	6808      	ldr	r0, [r1, #0]
 8007e16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e1a:	f380 8809 	msr	PSP, r0
 8007e1e:	f3bf 8f6f 	isb	sy
 8007e22:	f04f 0000 	mov.w	r0, #0
 8007e26:	f380 8811 	msr	BASEPRI, r0
 8007e2a:	4770      	bx	lr
 8007e2c:	f3af 8000 	nop.w

08007e30 <pxCurrentTCBConst2>:
 8007e30:	20000300 	.word	0x20000300
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007e34:	bf00      	nop
 8007e36:	bf00      	nop

08007e38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007e38:	4808      	ldr	r0, [pc, #32]	; (8007e5c <prvPortStartFirstTask+0x24>)
 8007e3a:	6800      	ldr	r0, [r0, #0]
 8007e3c:	6800      	ldr	r0, [r0, #0]
 8007e3e:	f380 8808 	msr	MSP, r0
 8007e42:	f04f 0000 	mov.w	r0, #0
 8007e46:	f380 8814 	msr	CONTROL, r0
 8007e4a:	b662      	cpsie	i
 8007e4c:	b661      	cpsie	f
 8007e4e:	f3bf 8f4f 	dsb	sy
 8007e52:	f3bf 8f6f 	isb	sy
 8007e56:	df00      	svc	0
 8007e58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007e5a:	bf00      	nop
 8007e5c:	e000ed08 	.word	0xe000ed08

08007e60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007e66:	4b37      	ldr	r3, [pc, #220]	; (8007f44 <xPortStartScheduler+0xe4>)
 8007e68:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	22ff      	movs	r2, #255	; 0xff
 8007e76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e80:	78fb      	ldrb	r3, [r7, #3]
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007e88:	b2da      	uxtb	r2, r3
 8007e8a:	4b2f      	ldr	r3, [pc, #188]	; (8007f48 <xPortStartScheduler+0xe8>)
 8007e8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e8e:	4b2f      	ldr	r3, [pc, #188]	; (8007f4c <xPortStartScheduler+0xec>)
 8007e90:	2207      	movs	r2, #7
 8007e92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e94:	e009      	b.n	8007eaa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007e96:	4b2d      	ldr	r3, [pc, #180]	; (8007f4c <xPortStartScheduler+0xec>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	4a2b      	ldr	r2, [pc, #172]	; (8007f4c <xPortStartScheduler+0xec>)
 8007e9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ea0:	78fb      	ldrb	r3, [r7, #3]
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	005b      	lsls	r3, r3, #1
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007eaa:	78fb      	ldrb	r3, [r7, #3]
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eb2:	2b80      	cmp	r3, #128	; 0x80
 8007eb4:	d0ef      	beq.n	8007e96 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007eb6:	4b25      	ldr	r3, [pc, #148]	; (8007f4c <xPortStartScheduler+0xec>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f1c3 0307 	rsb	r3, r3, #7
 8007ebe:	2b04      	cmp	r3, #4
 8007ec0:	d00c      	beq.n	8007edc <xPortStartScheduler+0x7c>
	__asm volatile
 8007ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec6:	b672      	cpsid	i
 8007ec8:	f383 8811 	msr	BASEPRI, r3
 8007ecc:	f3bf 8f6f 	isb	sy
 8007ed0:	f3bf 8f4f 	dsb	sy
 8007ed4:	b662      	cpsie	i
 8007ed6:	60bb      	str	r3, [r7, #8]
}
 8007ed8:	bf00      	nop
 8007eda:	e7fe      	b.n	8007eda <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007edc:	4b1b      	ldr	r3, [pc, #108]	; (8007f4c <xPortStartScheduler+0xec>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	021b      	lsls	r3, r3, #8
 8007ee2:	4a1a      	ldr	r2, [pc, #104]	; (8007f4c <xPortStartScheduler+0xec>)
 8007ee4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ee6:	4b19      	ldr	r3, [pc, #100]	; (8007f4c <xPortStartScheduler+0xec>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007eee:	4a17      	ldr	r2, [pc, #92]	; (8007f4c <xPortStartScheduler+0xec>)
 8007ef0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	b2da      	uxtb	r2, r3
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007efa:	4b15      	ldr	r3, [pc, #84]	; (8007f50 <xPortStartScheduler+0xf0>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a14      	ldr	r2, [pc, #80]	; (8007f50 <xPortStartScheduler+0xf0>)
 8007f00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f04:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007f06:	4b12      	ldr	r3, [pc, #72]	; (8007f50 <xPortStartScheduler+0xf0>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a11      	ldr	r2, [pc, #68]	; (8007f50 <xPortStartScheduler+0xf0>)
 8007f0c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007f10:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007f12:	f000 f8dd 	bl	80080d0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007f16:	4b0f      	ldr	r3, [pc, #60]	; (8007f54 <xPortStartScheduler+0xf4>)
 8007f18:	2200      	movs	r2, #0
 8007f1a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007f1c:	f000 f8fc 	bl	8008118 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007f20:	4b0d      	ldr	r3, [pc, #52]	; (8007f58 <xPortStartScheduler+0xf8>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a0c      	ldr	r2, [pc, #48]	; (8007f58 <xPortStartScheduler+0xf8>)
 8007f26:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007f2a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007f2c:	f7ff ff84 	bl	8007e38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007f30:	f7ff fa82 	bl	8007438 <vTaskSwitchContext>
	prvTaskExitError();
 8007f34:	f7ff ff3c 	bl	8007db0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3710      	adds	r7, #16
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	e000e400 	.word	0xe000e400
 8007f48:	2000042c 	.word	0x2000042c
 8007f4c:	20000430 	.word	0x20000430
 8007f50:	e000ed20 	.word	0xe000ed20
 8007f54:	2000000c 	.word	0x2000000c
 8007f58:	e000ef34 	.word	0xe000ef34

08007f5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
	__asm volatile
 8007f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f66:	b672      	cpsid	i
 8007f68:	f383 8811 	msr	BASEPRI, r3
 8007f6c:	f3bf 8f6f 	isb	sy
 8007f70:	f3bf 8f4f 	dsb	sy
 8007f74:	b662      	cpsie	i
 8007f76:	607b      	str	r3, [r7, #4]
}
 8007f78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007f7a:	4b10      	ldr	r3, [pc, #64]	; (8007fbc <vPortEnterCritical+0x60>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	4a0e      	ldr	r2, [pc, #56]	; (8007fbc <vPortEnterCritical+0x60>)
 8007f82:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007f84:	4b0d      	ldr	r3, [pc, #52]	; (8007fbc <vPortEnterCritical+0x60>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d111      	bne.n	8007fb0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007f8c:	4b0c      	ldr	r3, [pc, #48]	; (8007fc0 <vPortEnterCritical+0x64>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00c      	beq.n	8007fb0 <vPortEnterCritical+0x54>
	__asm volatile
 8007f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9a:	b672      	cpsid	i
 8007f9c:	f383 8811 	msr	BASEPRI, r3
 8007fa0:	f3bf 8f6f 	isb	sy
 8007fa4:	f3bf 8f4f 	dsb	sy
 8007fa8:	b662      	cpsie	i
 8007faa:	603b      	str	r3, [r7, #0]
}
 8007fac:	bf00      	nop
 8007fae:	e7fe      	b.n	8007fae <vPortEnterCritical+0x52>
	}
}
 8007fb0:	bf00      	nop
 8007fb2:	370c      	adds	r7, #12
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr
 8007fbc:	2000000c 	.word	0x2000000c
 8007fc0:	e000ed04 	.word	0xe000ed04

08007fc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007fca:	4b13      	ldr	r3, [pc, #76]	; (8008018 <vPortExitCritical+0x54>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d10c      	bne.n	8007fec <vPortExitCritical+0x28>
	__asm volatile
 8007fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd6:	b672      	cpsid	i
 8007fd8:	f383 8811 	msr	BASEPRI, r3
 8007fdc:	f3bf 8f6f 	isb	sy
 8007fe0:	f3bf 8f4f 	dsb	sy
 8007fe4:	b662      	cpsie	i
 8007fe6:	607b      	str	r3, [r7, #4]
}
 8007fe8:	bf00      	nop
 8007fea:	e7fe      	b.n	8007fea <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007fec:	4b0a      	ldr	r3, [pc, #40]	; (8008018 <vPortExitCritical+0x54>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	3b01      	subs	r3, #1
 8007ff2:	4a09      	ldr	r2, [pc, #36]	; (8008018 <vPortExitCritical+0x54>)
 8007ff4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007ff6:	4b08      	ldr	r3, [pc, #32]	; (8008018 <vPortExitCritical+0x54>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d105      	bne.n	800800a <vPortExitCritical+0x46>
 8007ffe:	2300      	movs	r3, #0
 8008000:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	f383 8811 	msr	BASEPRI, r3
}
 8008008:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800800a:	bf00      	nop
 800800c:	370c      	adds	r7, #12
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr
 8008016:	bf00      	nop
 8008018:	2000000c 	.word	0x2000000c
 800801c:	00000000 	.word	0x00000000

08008020 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008020:	f3ef 8009 	mrs	r0, PSP
 8008024:	f3bf 8f6f 	isb	sy
 8008028:	4b15      	ldr	r3, [pc, #84]	; (8008080 <pxCurrentTCBConst>)
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	f01e 0f10 	tst.w	lr, #16
 8008030:	bf08      	it	eq
 8008032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800803a:	6010      	str	r0, [r2, #0]
 800803c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008040:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008044:	b672      	cpsid	i
 8008046:	f380 8811 	msr	BASEPRI, r0
 800804a:	f3bf 8f4f 	dsb	sy
 800804e:	f3bf 8f6f 	isb	sy
 8008052:	b662      	cpsie	i
 8008054:	f7ff f9f0 	bl	8007438 <vTaskSwitchContext>
 8008058:	f04f 0000 	mov.w	r0, #0
 800805c:	f380 8811 	msr	BASEPRI, r0
 8008060:	bc09      	pop	{r0, r3}
 8008062:	6819      	ldr	r1, [r3, #0]
 8008064:	6808      	ldr	r0, [r1, #0]
 8008066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800806a:	f01e 0f10 	tst.w	lr, #16
 800806e:	bf08      	it	eq
 8008070:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008074:	f380 8809 	msr	PSP, r0
 8008078:	f3bf 8f6f 	isb	sy
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop

08008080 <pxCurrentTCBConst>:
 8008080:	20000300 	.word	0x20000300
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008084:	bf00      	nop
 8008086:	bf00      	nop

08008088 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
	__asm volatile
 800808e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008092:	b672      	cpsid	i
 8008094:	f383 8811 	msr	BASEPRI, r3
 8008098:	f3bf 8f6f 	isb	sy
 800809c:	f3bf 8f4f 	dsb	sy
 80080a0:	b662      	cpsie	i
 80080a2:	607b      	str	r3, [r7, #4]
}
 80080a4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80080a6:	f7ff f90d 	bl	80072c4 <xTaskIncrementTick>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d003      	beq.n	80080b8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80080b0:	4b06      	ldr	r3, [pc, #24]	; (80080cc <SysTick_Handler+0x44>)
 80080b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080b6:	601a      	str	r2, [r3, #0]
 80080b8:	2300      	movs	r3, #0
 80080ba:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	f383 8811 	msr	BASEPRI, r3
}
 80080c2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80080c4:	bf00      	nop
 80080c6:	3708      	adds	r7, #8
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	e000ed04 	.word	0xe000ed04

080080d0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80080d0:	b480      	push	{r7}
 80080d2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80080d4:	4b0b      	ldr	r3, [pc, #44]	; (8008104 <vPortSetupTimerInterrupt+0x34>)
 80080d6:	2200      	movs	r2, #0
 80080d8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80080da:	4b0b      	ldr	r3, [pc, #44]	; (8008108 <vPortSetupTimerInterrupt+0x38>)
 80080dc:	2200      	movs	r2, #0
 80080de:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80080e0:	4b0a      	ldr	r3, [pc, #40]	; (800810c <vPortSetupTimerInterrupt+0x3c>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a0a      	ldr	r2, [pc, #40]	; (8008110 <vPortSetupTimerInterrupt+0x40>)
 80080e6:	fba2 2303 	umull	r2, r3, r2, r3
 80080ea:	099b      	lsrs	r3, r3, #6
 80080ec:	4a09      	ldr	r2, [pc, #36]	; (8008114 <vPortSetupTimerInterrupt+0x44>)
 80080ee:	3b01      	subs	r3, #1
 80080f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80080f2:	4b04      	ldr	r3, [pc, #16]	; (8008104 <vPortSetupTimerInterrupt+0x34>)
 80080f4:	2207      	movs	r2, #7
 80080f6:	601a      	str	r2, [r3, #0]
}
 80080f8:	bf00      	nop
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop
 8008104:	e000e010 	.word	0xe000e010
 8008108:	e000e018 	.word	0xe000e018
 800810c:	20000000 	.word	0x20000000
 8008110:	10624dd3 	.word	0x10624dd3
 8008114:	e000e014 	.word	0xe000e014

08008118 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008118:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008128 <vPortEnableVFP+0x10>
 800811c:	6801      	ldr	r1, [r0, #0]
 800811e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008122:	6001      	str	r1, [r0, #0]
 8008124:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008126:	bf00      	nop
 8008128:	e000ed88 	.word	0xe000ed88

0800812c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800812c:	b480      	push	{r7}
 800812e:	b085      	sub	sp, #20
 8008130:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008132:	f3ef 8305 	mrs	r3, IPSR
 8008136:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2b0f      	cmp	r3, #15
 800813c:	d916      	bls.n	800816c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800813e:	4a19      	ldr	r2, [pc, #100]	; (80081a4 <vPortValidateInterruptPriority+0x78>)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	4413      	add	r3, r2
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008148:	4b17      	ldr	r3, [pc, #92]	; (80081a8 <vPortValidateInterruptPriority+0x7c>)
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	7afa      	ldrb	r2, [r7, #11]
 800814e:	429a      	cmp	r2, r3
 8008150:	d20c      	bcs.n	800816c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8008152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008156:	b672      	cpsid	i
 8008158:	f383 8811 	msr	BASEPRI, r3
 800815c:	f3bf 8f6f 	isb	sy
 8008160:	f3bf 8f4f 	dsb	sy
 8008164:	b662      	cpsie	i
 8008166:	607b      	str	r3, [r7, #4]
}
 8008168:	bf00      	nop
 800816a:	e7fe      	b.n	800816a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800816c:	4b0f      	ldr	r3, [pc, #60]	; (80081ac <vPortValidateInterruptPriority+0x80>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008174:	4b0e      	ldr	r3, [pc, #56]	; (80081b0 <vPortValidateInterruptPriority+0x84>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	429a      	cmp	r2, r3
 800817a:	d90c      	bls.n	8008196 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800817c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008180:	b672      	cpsid	i
 8008182:	f383 8811 	msr	BASEPRI, r3
 8008186:	f3bf 8f6f 	isb	sy
 800818a:	f3bf 8f4f 	dsb	sy
 800818e:	b662      	cpsie	i
 8008190:	603b      	str	r3, [r7, #0]
}
 8008192:	bf00      	nop
 8008194:	e7fe      	b.n	8008194 <vPortValidateInterruptPriority+0x68>
	}
 8008196:	bf00      	nop
 8008198:	3714      	adds	r7, #20
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr
 80081a2:	bf00      	nop
 80081a4:	e000e3f0 	.word	0xe000e3f0
 80081a8:	2000042c 	.word	0x2000042c
 80081ac:	e000ed0c 	.word	0xe000ed0c
 80081b0:	20000430 	.word	0x20000430

080081b4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b08a      	sub	sp, #40	; 0x28
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80081bc:	2300      	movs	r3, #0
 80081be:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80081c0:	f7fe ffb2 	bl	8007128 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80081c4:	4b5b      	ldr	r3, [pc, #364]	; (8008334 <pvPortMalloc+0x180>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d101      	bne.n	80081d0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80081cc:	f000 f91a 	bl	8008404 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80081d0:	4b59      	ldr	r3, [pc, #356]	; (8008338 <pvPortMalloc+0x184>)
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4013      	ands	r3, r2
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f040 8092 	bne.w	8008302 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d01f      	beq.n	8008224 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80081e4:	2208      	movs	r2, #8
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4413      	add	r3, r2
 80081ea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f003 0307 	and.w	r3, r3, #7
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d016      	beq.n	8008224 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f023 0307 	bic.w	r3, r3, #7
 80081fc:	3308      	adds	r3, #8
 80081fe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f003 0307 	and.w	r3, r3, #7
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00c      	beq.n	8008224 <pvPortMalloc+0x70>
	__asm volatile
 800820a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820e:	b672      	cpsid	i
 8008210:	f383 8811 	msr	BASEPRI, r3
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	f3bf 8f4f 	dsb	sy
 800821c:	b662      	cpsie	i
 800821e:	617b      	str	r3, [r7, #20]
}
 8008220:	bf00      	nop
 8008222:	e7fe      	b.n	8008222 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d06b      	beq.n	8008302 <pvPortMalloc+0x14e>
 800822a:	4b44      	ldr	r3, [pc, #272]	; (800833c <pvPortMalloc+0x188>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	429a      	cmp	r2, r3
 8008232:	d866      	bhi.n	8008302 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008234:	4b42      	ldr	r3, [pc, #264]	; (8008340 <pvPortMalloc+0x18c>)
 8008236:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008238:	4b41      	ldr	r3, [pc, #260]	; (8008340 <pvPortMalloc+0x18c>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800823e:	e004      	b.n	800824a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8008240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008242:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800824a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	429a      	cmp	r2, r3
 8008252:	d903      	bls.n	800825c <pvPortMalloc+0xa8>
 8008254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d1f1      	bne.n	8008240 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800825c:	4b35      	ldr	r3, [pc, #212]	; (8008334 <pvPortMalloc+0x180>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008262:	429a      	cmp	r2, r3
 8008264:	d04d      	beq.n	8008302 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008266:	6a3b      	ldr	r3, [r7, #32]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2208      	movs	r2, #8
 800826c:	4413      	add	r3, r2
 800826e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	6a3b      	ldr	r3, [r7, #32]
 8008276:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827a:	685a      	ldr	r2, [r3, #4]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	1ad2      	subs	r2, r2, r3
 8008280:	2308      	movs	r3, #8
 8008282:	005b      	lsls	r3, r3, #1
 8008284:	429a      	cmp	r2, r3
 8008286:	d921      	bls.n	80082cc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4413      	add	r3, r2
 800828e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008290:	69bb      	ldr	r3, [r7, #24]
 8008292:	f003 0307 	and.w	r3, r3, #7
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00c      	beq.n	80082b4 <pvPortMalloc+0x100>
	__asm volatile
 800829a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829e:	b672      	cpsid	i
 80082a0:	f383 8811 	msr	BASEPRI, r3
 80082a4:	f3bf 8f6f 	isb	sy
 80082a8:	f3bf 8f4f 	dsb	sy
 80082ac:	b662      	cpsie	i
 80082ae:	613b      	str	r3, [r7, #16]
}
 80082b0:	bf00      	nop
 80082b2:	e7fe      	b.n	80082b2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80082b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b6:	685a      	ldr	r2, [r3, #4]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	1ad2      	subs	r2, r2, r3
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80082c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80082c6:	69b8      	ldr	r0, [r7, #24]
 80082c8:	f000 f8fe 	bl	80084c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80082cc:	4b1b      	ldr	r3, [pc, #108]	; (800833c <pvPortMalloc+0x188>)
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	1ad3      	subs	r3, r2, r3
 80082d6:	4a19      	ldr	r2, [pc, #100]	; (800833c <pvPortMalloc+0x188>)
 80082d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80082da:	4b18      	ldr	r3, [pc, #96]	; (800833c <pvPortMalloc+0x188>)
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	4b19      	ldr	r3, [pc, #100]	; (8008344 <pvPortMalloc+0x190>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d203      	bcs.n	80082ee <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80082e6:	4b15      	ldr	r3, [pc, #84]	; (800833c <pvPortMalloc+0x188>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a16      	ldr	r2, [pc, #88]	; (8008344 <pvPortMalloc+0x190>)
 80082ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80082ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f0:	685a      	ldr	r2, [r3, #4]
 80082f2:	4b11      	ldr	r3, [pc, #68]	; (8008338 <pvPortMalloc+0x184>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	431a      	orrs	r2, r3
 80082f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80082fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fe:	2200      	movs	r2, #0
 8008300:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008302:	f7fe ff1f 	bl	8007144 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	f003 0307 	and.w	r3, r3, #7
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00c      	beq.n	800832a <pvPortMalloc+0x176>
	__asm volatile
 8008310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008314:	b672      	cpsid	i
 8008316:	f383 8811 	msr	BASEPRI, r3
 800831a:	f3bf 8f6f 	isb	sy
 800831e:	f3bf 8f4f 	dsb	sy
 8008322:	b662      	cpsie	i
 8008324:	60fb      	str	r3, [r7, #12]
}
 8008326:	bf00      	nop
 8008328:	e7fe      	b.n	8008328 <pvPortMalloc+0x174>
	return pvReturn;
 800832a:	69fb      	ldr	r3, [r7, #28]
}
 800832c:	4618      	mov	r0, r3
 800832e:	3728      	adds	r7, #40	; 0x28
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}
 8008334:	2000403c 	.word	0x2000403c
 8008338:	20004048 	.word	0x20004048
 800833c:	20004040 	.word	0x20004040
 8008340:	20004034 	.word	0x20004034
 8008344:	20004044 	.word	0x20004044

08008348 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b086      	sub	sp, #24
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d04c      	beq.n	80083f4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800835a:	2308      	movs	r3, #8
 800835c:	425b      	negs	r3, r3
 800835e:	697a      	ldr	r2, [r7, #20]
 8008360:	4413      	add	r3, r2
 8008362:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	685a      	ldr	r2, [r3, #4]
 800836c:	4b23      	ldr	r3, [pc, #140]	; (80083fc <vPortFree+0xb4>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4013      	ands	r3, r2
 8008372:	2b00      	cmp	r3, #0
 8008374:	d10c      	bne.n	8008390 <vPortFree+0x48>
	__asm volatile
 8008376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837a:	b672      	cpsid	i
 800837c:	f383 8811 	msr	BASEPRI, r3
 8008380:	f3bf 8f6f 	isb	sy
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	b662      	cpsie	i
 800838a:	60fb      	str	r3, [r7, #12]
}
 800838c:	bf00      	nop
 800838e:	e7fe      	b.n	800838e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00c      	beq.n	80083b2 <vPortFree+0x6a>
	__asm volatile
 8008398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839c:	b672      	cpsid	i
 800839e:	f383 8811 	msr	BASEPRI, r3
 80083a2:	f3bf 8f6f 	isb	sy
 80083a6:	f3bf 8f4f 	dsb	sy
 80083aa:	b662      	cpsie	i
 80083ac:	60bb      	str	r3, [r7, #8]
}
 80083ae:	bf00      	nop
 80083b0:	e7fe      	b.n	80083b0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	685a      	ldr	r2, [r3, #4]
 80083b6:	4b11      	ldr	r3, [pc, #68]	; (80083fc <vPortFree+0xb4>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4013      	ands	r3, r2
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d019      	beq.n	80083f4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d115      	bne.n	80083f4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	685a      	ldr	r2, [r3, #4]
 80083cc:	4b0b      	ldr	r3, [pc, #44]	; (80083fc <vPortFree+0xb4>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	43db      	mvns	r3, r3
 80083d2:	401a      	ands	r2, r3
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80083d8:	f7fe fea6 	bl	8007128 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	685a      	ldr	r2, [r3, #4]
 80083e0:	4b07      	ldr	r3, [pc, #28]	; (8008400 <vPortFree+0xb8>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4413      	add	r3, r2
 80083e6:	4a06      	ldr	r2, [pc, #24]	; (8008400 <vPortFree+0xb8>)
 80083e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80083ea:	6938      	ldr	r0, [r7, #16]
 80083ec:	f000 f86c 	bl	80084c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80083f0:	f7fe fea8 	bl	8007144 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80083f4:	bf00      	nop
 80083f6:	3718      	adds	r7, #24
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	20004048 	.word	0x20004048
 8008400:	20004040 	.word	0x20004040

08008404 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008404:	b480      	push	{r7}
 8008406:	b085      	sub	sp, #20
 8008408:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800840a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800840e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008410:	4b27      	ldr	r3, [pc, #156]	; (80084b0 <prvHeapInit+0xac>)
 8008412:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f003 0307 	and.w	r3, r3, #7
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00c      	beq.n	8008438 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	3307      	adds	r3, #7
 8008422:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f023 0307 	bic.w	r3, r3, #7
 800842a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800842c:	68ba      	ldr	r2, [r7, #8]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	1ad3      	subs	r3, r2, r3
 8008432:	4a1f      	ldr	r2, [pc, #124]	; (80084b0 <prvHeapInit+0xac>)
 8008434:	4413      	add	r3, r2
 8008436:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800843c:	4a1d      	ldr	r2, [pc, #116]	; (80084b4 <prvHeapInit+0xb0>)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008442:	4b1c      	ldr	r3, [pc, #112]	; (80084b4 <prvHeapInit+0xb0>)
 8008444:	2200      	movs	r2, #0
 8008446:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	68ba      	ldr	r2, [r7, #8]
 800844c:	4413      	add	r3, r2
 800844e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008450:	2208      	movs	r2, #8
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	1a9b      	subs	r3, r3, r2
 8008456:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f023 0307 	bic.w	r3, r3, #7
 800845e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	4a15      	ldr	r2, [pc, #84]	; (80084b8 <prvHeapInit+0xb4>)
 8008464:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008466:	4b14      	ldr	r3, [pc, #80]	; (80084b8 <prvHeapInit+0xb4>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2200      	movs	r2, #0
 800846c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800846e:	4b12      	ldr	r3, [pc, #72]	; (80084b8 <prvHeapInit+0xb4>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2200      	movs	r2, #0
 8008474:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	1ad2      	subs	r2, r2, r3
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008484:	4b0c      	ldr	r3, [pc, #48]	; (80084b8 <prvHeapInit+0xb4>)
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	4a0a      	ldr	r2, [pc, #40]	; (80084bc <prvHeapInit+0xb8>)
 8008492:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	4a09      	ldr	r2, [pc, #36]	; (80084c0 <prvHeapInit+0xbc>)
 800849a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800849c:	4b09      	ldr	r3, [pc, #36]	; (80084c4 <prvHeapInit+0xc0>)
 800849e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80084a2:	601a      	str	r2, [r3, #0]
}
 80084a4:	bf00      	nop
 80084a6:	3714      	adds	r7, #20
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr
 80084b0:	20000434 	.word	0x20000434
 80084b4:	20004034 	.word	0x20004034
 80084b8:	2000403c 	.word	0x2000403c
 80084bc:	20004044 	.word	0x20004044
 80084c0:	20004040 	.word	0x20004040
 80084c4:	20004048 	.word	0x20004048

080084c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80084c8:	b480      	push	{r7}
 80084ca:	b085      	sub	sp, #20
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80084d0:	4b28      	ldr	r3, [pc, #160]	; (8008574 <prvInsertBlockIntoFreeList+0xac>)
 80084d2:	60fb      	str	r3, [r7, #12]
 80084d4:	e002      	b.n	80084dc <prvInsertBlockIntoFreeList+0x14>
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	60fb      	str	r3, [r7, #12]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d8f7      	bhi.n	80084d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	68ba      	ldr	r2, [r7, #8]
 80084f0:	4413      	add	r3, r2
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d108      	bne.n	800850a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	685a      	ldr	r2, [r3, #4]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	441a      	add	r2, r3
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	68ba      	ldr	r2, [r7, #8]
 8008514:	441a      	add	r2, r3
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	429a      	cmp	r2, r3
 800851c:	d118      	bne.n	8008550 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	4b15      	ldr	r3, [pc, #84]	; (8008578 <prvInsertBlockIntoFreeList+0xb0>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	429a      	cmp	r2, r3
 8008528:	d00d      	beq.n	8008546 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	685a      	ldr	r2, [r3, #4]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	441a      	add	r2, r3
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	601a      	str	r2, [r3, #0]
 8008544:	e008      	b.n	8008558 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008546:	4b0c      	ldr	r3, [pc, #48]	; (8008578 <prvInsertBlockIntoFreeList+0xb0>)
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	601a      	str	r2, [r3, #0]
 800854e:	e003      	b.n	8008558 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008558:	68fa      	ldr	r2, [r7, #12]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	429a      	cmp	r2, r3
 800855e:	d002      	beq.n	8008566 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008566:	bf00      	nop
 8008568:	3714      	adds	r7, #20
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	20004034 	.word	0x20004034
 8008578:	2000403c 	.word	0x2000403c

0800857c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8008586:	f009 ff81 	bl	801248c <sys_timeouts_sleeptime>
 800858a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008592:	d10b      	bne.n	80085ac <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8008594:	4813      	ldr	r0, [pc, #76]	; (80085e4 <tcpip_timeouts_mbox_fetch+0x68>)
 8008596:	f00c fe1a 	bl	80151ce <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800859a:	2200      	movs	r2, #0
 800859c:	6839      	ldr	r1, [r7, #0]
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f00c fd8c 	bl	80150bc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80085a4:	480f      	ldr	r0, [pc, #60]	; (80085e4 <tcpip_timeouts_mbox_fetch+0x68>)
 80085a6:	f00c fe03 	bl	80151b0 <sys_mutex_lock>
    return;
 80085aa:	e018      	b.n	80085de <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d102      	bne.n	80085b8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80085b2:	f009 ff31 	bl	8012418 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80085b6:	e7e6      	b.n	8008586 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80085b8:	480a      	ldr	r0, [pc, #40]	; (80085e4 <tcpip_timeouts_mbox_fetch+0x68>)
 80085ba:	f00c fe08 	bl	80151ce <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	6839      	ldr	r1, [r7, #0]
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f00c fd7a 	bl	80150bc <sys_arch_mbox_fetch>
 80085c8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80085ca:	4806      	ldr	r0, [pc, #24]	; (80085e4 <tcpip_timeouts_mbox_fetch+0x68>)
 80085cc:	f00c fdf0 	bl	80151b0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d6:	d102      	bne.n	80085de <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80085d8:	f009 ff1e 	bl	8012418 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80085dc:	e7d3      	b.n	8008586 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80085de:	3710      	adds	r7, #16
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	20007400 	.word	0x20007400

080085e8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80085f0:	4810      	ldr	r0, [pc, #64]	; (8008634 <tcpip_thread+0x4c>)
 80085f2:	f00c fddd 	bl	80151b0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80085f6:	4b10      	ldr	r3, [pc, #64]	; (8008638 <tcpip_thread+0x50>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d005      	beq.n	800860a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80085fe:	4b0e      	ldr	r3, [pc, #56]	; (8008638 <tcpip_thread+0x50>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a0e      	ldr	r2, [pc, #56]	; (800863c <tcpip_thread+0x54>)
 8008604:	6812      	ldr	r2, [r2, #0]
 8008606:	4610      	mov	r0, r2
 8008608:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800860a:	f107 030c 	add.w	r3, r7, #12
 800860e:	4619      	mov	r1, r3
 8008610:	480b      	ldr	r0, [pc, #44]	; (8008640 <tcpip_thread+0x58>)
 8008612:	f7ff ffb3 	bl	800857c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d106      	bne.n	800862a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800861c:	4b09      	ldr	r3, [pc, #36]	; (8008644 <tcpip_thread+0x5c>)
 800861e:	2291      	movs	r2, #145	; 0x91
 8008620:	4909      	ldr	r1, [pc, #36]	; (8008648 <tcpip_thread+0x60>)
 8008622:	480a      	ldr	r0, [pc, #40]	; (800864c <tcpip_thread+0x64>)
 8008624:	f00c fe86 	bl	8015334 <iprintf>
      continue;
 8008628:	e003      	b.n	8008632 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	4618      	mov	r0, r3
 800862e:	f000 f80f 	bl	8008650 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8008632:	e7ea      	b.n	800860a <tcpip_thread+0x22>
 8008634:	20007400 	.word	0x20007400
 8008638:	2000404c 	.word	0x2000404c
 800863c:	20004050 	.word	0x20004050
 8008640:	20004054 	.word	0x20004054
 8008644:	08016a70 	.word	0x08016a70
 8008648:	08016aa0 	.word	0x08016aa0
 800864c:	08016ac0 	.word	0x08016ac0

08008650 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	2b02      	cmp	r3, #2
 800865e:	d026      	beq.n	80086ae <tcpip_thread_handle_msg+0x5e>
 8008660:	2b02      	cmp	r3, #2
 8008662:	dc2b      	bgt.n	80086bc <tcpip_thread_handle_msg+0x6c>
 8008664:	2b00      	cmp	r3, #0
 8008666:	d002      	beq.n	800866e <tcpip_thread_handle_msg+0x1e>
 8008668:	2b01      	cmp	r3, #1
 800866a:	d015      	beq.n	8008698 <tcpip_thread_handle_msg+0x48>
 800866c:	e026      	b.n	80086bc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	6850      	ldr	r0, [r2, #4]
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	6892      	ldr	r2, [r2, #8]
 800867a:	4611      	mov	r1, r2
 800867c:	4798      	blx	r3
 800867e:	4603      	mov	r3, r0
 8008680:	2b00      	cmp	r3, #0
 8008682:	d004      	beq.n	800868e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	4618      	mov	r0, r3
 800868a:	f003 fa29 	bl	800bae0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800868e:	6879      	ldr	r1, [r7, #4]
 8008690:	2009      	movs	r0, #9
 8008692:	f002 fb81 	bl	800ad98 <memp_free>
      break;
 8008696:	e018      	b.n	80086ca <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	6892      	ldr	r2, [r2, #8]
 80086a0:	4610      	mov	r0, r2
 80086a2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80086a4:	6879      	ldr	r1, [r7, #4]
 80086a6:	2008      	movs	r0, #8
 80086a8:	f002 fb76 	bl	800ad98 <memp_free>
      break;
 80086ac:	e00d      	b.n	80086ca <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	6892      	ldr	r2, [r2, #8]
 80086b6:	4610      	mov	r0, r2
 80086b8:	4798      	blx	r3
      break;
 80086ba:	e006      	b.n	80086ca <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80086bc:	4b05      	ldr	r3, [pc, #20]	; (80086d4 <tcpip_thread_handle_msg+0x84>)
 80086be:	22cf      	movs	r2, #207	; 0xcf
 80086c0:	4905      	ldr	r1, [pc, #20]	; (80086d8 <tcpip_thread_handle_msg+0x88>)
 80086c2:	4806      	ldr	r0, [pc, #24]	; (80086dc <tcpip_thread_handle_msg+0x8c>)
 80086c4:	f00c fe36 	bl	8015334 <iprintf>
      break;
 80086c8:	bf00      	nop
  }
}
 80086ca:	bf00      	nop
 80086cc:	3708      	adds	r7, #8
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	08016a70 	.word	0x08016a70
 80086d8:	08016aa0 	.word	0x08016aa0
 80086dc:	08016ac0 	.word	0x08016ac0

080086e0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b086      	sub	sp, #24
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80086ec:	481a      	ldr	r0, [pc, #104]	; (8008758 <tcpip_inpkt+0x78>)
 80086ee:	f00c fd24 	bl	801513a <sys_mbox_valid>
 80086f2:	4603      	mov	r3, r0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d105      	bne.n	8008704 <tcpip_inpkt+0x24>
 80086f8:	4b18      	ldr	r3, [pc, #96]	; (800875c <tcpip_inpkt+0x7c>)
 80086fa:	22fc      	movs	r2, #252	; 0xfc
 80086fc:	4918      	ldr	r1, [pc, #96]	; (8008760 <tcpip_inpkt+0x80>)
 80086fe:	4819      	ldr	r0, [pc, #100]	; (8008764 <tcpip_inpkt+0x84>)
 8008700:	f00c fe18 	bl	8015334 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8008704:	2009      	movs	r0, #9
 8008706:	f002 faf5 	bl	800acf4 <memp_malloc>
 800870a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d102      	bne.n	8008718 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8008712:	f04f 33ff 	mov.w	r3, #4294967295
 8008716:	e01a      	b.n	800874e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	2200      	movs	r2, #0
 800871c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	68fa      	ldr	r2, [r7, #12]
 8008722:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	68ba      	ldr	r2, [r7, #8]
 8008728:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8008730:	6979      	ldr	r1, [r7, #20]
 8008732:	4809      	ldr	r0, [pc, #36]	; (8008758 <tcpip_inpkt+0x78>)
 8008734:	f00c fca8 	bl	8015088 <sys_mbox_trypost>
 8008738:	4603      	mov	r3, r0
 800873a:	2b00      	cmp	r3, #0
 800873c:	d006      	beq.n	800874c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800873e:	6979      	ldr	r1, [r7, #20]
 8008740:	2009      	movs	r0, #9
 8008742:	f002 fb29 	bl	800ad98 <memp_free>
    return ERR_MEM;
 8008746:	f04f 33ff 	mov.w	r3, #4294967295
 800874a:	e000      	b.n	800874e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800874c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800874e:	4618      	mov	r0, r3
 8008750:	3718      	adds	r7, #24
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	20004054 	.word	0x20004054
 800875c:	08016a70 	.word	0x08016a70
 8008760:	08016ae8 	.word	0x08016ae8
 8008764:	08016ac0 	.word	0x08016ac0

08008768 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008778:	f003 0318 	and.w	r3, r3, #24
 800877c:	2b00      	cmp	r3, #0
 800877e:	d006      	beq.n	800878e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8008780:	4a08      	ldr	r2, [pc, #32]	; (80087a4 <tcpip_input+0x3c>)
 8008782:	6839      	ldr	r1, [r7, #0]
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f7ff ffab 	bl	80086e0 <tcpip_inpkt>
 800878a:	4603      	mov	r3, r0
 800878c:	e005      	b.n	800879a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800878e:	4a06      	ldr	r2, [pc, #24]	; (80087a8 <tcpip_input+0x40>)
 8008790:	6839      	ldr	r1, [r7, #0]
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f7ff ffa4 	bl	80086e0 <tcpip_inpkt>
 8008798:	4603      	mov	r3, r0
}
 800879a:	4618      	mov	r0, r3
 800879c:	3708      	adds	r7, #8
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	08014e99 	.word	0x08014e99
 80087a8:	08013b59 	.word	0x08013b59

080087ac <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80087b6:	4819      	ldr	r0, [pc, #100]	; (800881c <tcpip_try_callback+0x70>)
 80087b8:	f00c fcbf 	bl	801513a <sys_mbox_valid>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d106      	bne.n	80087d0 <tcpip_try_callback+0x24>
 80087c2:	4b17      	ldr	r3, [pc, #92]	; (8008820 <tcpip_try_callback+0x74>)
 80087c4:	f240 125d 	movw	r2, #349	; 0x15d
 80087c8:	4916      	ldr	r1, [pc, #88]	; (8008824 <tcpip_try_callback+0x78>)
 80087ca:	4817      	ldr	r0, [pc, #92]	; (8008828 <tcpip_try_callback+0x7c>)
 80087cc:	f00c fdb2 	bl	8015334 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80087d0:	2008      	movs	r0, #8
 80087d2:	f002 fa8f 	bl	800acf4 <memp_malloc>
 80087d6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d102      	bne.n	80087e4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80087de:	f04f 33ff 	mov.w	r3, #4294967295
 80087e2:	e017      	b.n	8008814 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2201      	movs	r2, #1
 80087e8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	683a      	ldr	r2, [r7, #0]
 80087f4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80087f6:	68f9      	ldr	r1, [r7, #12]
 80087f8:	4808      	ldr	r0, [pc, #32]	; (800881c <tcpip_try_callback+0x70>)
 80087fa:	f00c fc45 	bl	8015088 <sys_mbox_trypost>
 80087fe:	4603      	mov	r3, r0
 8008800:	2b00      	cmp	r3, #0
 8008802:	d006      	beq.n	8008812 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8008804:	68f9      	ldr	r1, [r7, #12]
 8008806:	2008      	movs	r0, #8
 8008808:	f002 fac6 	bl	800ad98 <memp_free>
    return ERR_MEM;
 800880c:	f04f 33ff 	mov.w	r3, #4294967295
 8008810:	e000      	b.n	8008814 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8008812:	2300      	movs	r3, #0
}
 8008814:	4618      	mov	r0, r3
 8008816:	3710      	adds	r7, #16
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	20004054 	.word	0x20004054
 8008820:	08016a70 	.word	0x08016a70
 8008824:	08016ae8 	.word	0x08016ae8
 8008828:	08016ac0 	.word	0x08016ac0

0800882c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af02      	add	r7, sp, #8
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  lwip_init();
 8008836:	f001 fdad 	bl	800a394 <lwip_init>

  tcpip_init_done = initfunc;
 800883a:	4a17      	ldr	r2, [pc, #92]	; (8008898 <tcpip_init+0x6c>)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8008840:	4a16      	ldr	r2, [pc, #88]	; (800889c <tcpip_init+0x70>)
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8008846:	2106      	movs	r1, #6
 8008848:	4815      	ldr	r0, [pc, #84]	; (80088a0 <tcpip_init+0x74>)
 800884a:	f00c fbfb 	bl	8015044 <sys_mbox_new>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d006      	beq.n	8008862 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8008854:	4b13      	ldr	r3, [pc, #76]	; (80088a4 <tcpip_init+0x78>)
 8008856:	f240 2261 	movw	r2, #609	; 0x261
 800885a:	4913      	ldr	r1, [pc, #76]	; (80088a8 <tcpip_init+0x7c>)
 800885c:	4813      	ldr	r0, [pc, #76]	; (80088ac <tcpip_init+0x80>)
 800885e:	f00c fd69 	bl	8015334 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8008862:	4813      	ldr	r0, [pc, #76]	; (80088b0 <tcpip_init+0x84>)
 8008864:	f00c fc88 	bl	8015178 <sys_mutex_new>
 8008868:	4603      	mov	r3, r0
 800886a:	2b00      	cmp	r3, #0
 800886c:	d006      	beq.n	800887c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800886e:	4b0d      	ldr	r3, [pc, #52]	; (80088a4 <tcpip_init+0x78>)
 8008870:	f240 2265 	movw	r2, #613	; 0x265
 8008874:	490f      	ldr	r1, [pc, #60]	; (80088b4 <tcpip_init+0x88>)
 8008876:	480d      	ldr	r0, [pc, #52]	; (80088ac <tcpip_init+0x80>)
 8008878:	f00c fd5c 	bl	8015334 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800887c:	2300      	movs	r3, #0
 800887e:	9300      	str	r3, [sp, #0]
 8008880:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008884:	2200      	movs	r2, #0
 8008886:	490c      	ldr	r1, [pc, #48]	; (80088b8 <tcpip_init+0x8c>)
 8008888:	480c      	ldr	r0, [pc, #48]	; (80088bc <tcpip_init+0x90>)
 800888a:	f00c fcad 	bl	80151e8 <sys_thread_new>
}
 800888e:	bf00      	nop
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	2000404c 	.word	0x2000404c
 800889c:	20004050 	.word	0x20004050
 80088a0:	20004054 	.word	0x20004054
 80088a4:	08016a70 	.word	0x08016a70
 80088a8:	08016af8 	.word	0x08016af8
 80088ac:	08016ac0 	.word	0x08016ac0
 80088b0:	20007400 	.word	0x20007400
 80088b4:	08016b1c 	.word	0x08016b1c
 80088b8:	080085e9 	.word	0x080085e9
 80088bc:	08016b40 	.word	0x08016b40

080088c0 <msg_generate_packet_id>:
 * @param client MQTT client
 * @return New packet identifier, range 1 to 65535
 */
static u16_t
msg_generate_packet_id(mqtt_client_t *client)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  client->pkt_id_seq++;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	88db      	ldrh	r3, [r3, #6]
 80088cc:	3301      	adds	r3, #1
 80088ce:	b29a      	uxth	r2, r3
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	80da      	strh	r2, [r3, #6]
  if (client->pkt_id_seq == 0) {
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	88db      	ldrh	r3, [r3, #6]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d105      	bne.n	80088e8 <msg_generate_packet_id+0x28>
    client->pkt_id_seq++;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	88db      	ldrh	r3, [r3, #6]
 80088e0:	3301      	adds	r3, #1
 80088e2:	b29a      	uxth	r2, r3
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	80da      	strh	r2, [r3, #6]
  }
  return client->pkt_id_seq;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	88db      	ldrh	r3, [r3, #6]
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <mqtt_ringbuf_put>:
/* Output ring buffer */

/** Add single item to ring buffer */
static void
mqtt_ringbuf_put(struct mqtt_ringbuf_t *rb, u8_t item)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	460b      	mov	r3, r1
 8008902:	70fb      	strb	r3, [r7, #3]
  rb->buf[rb->put] = item;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	881b      	ldrh	r3, [r3, #0]
 8008908:	461a      	mov	r2, r3
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4413      	add	r3, r2
 800890e:	78fa      	ldrb	r2, [r7, #3]
 8008910:	711a      	strb	r2, [r3, #4]
  rb->put++;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	881b      	ldrh	r3, [r3, #0]
 8008916:	3301      	adds	r3, #1
 8008918:	b29a      	uxth	r2, r3
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	801a      	strh	r2, [r3, #0]
  if (rb->put >= MQTT_OUTPUT_RINGBUF_SIZE) {
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	881b      	ldrh	r3, [r3, #0]
 8008922:	2bff      	cmp	r3, #255	; 0xff
 8008924:	d902      	bls.n	800892c <mqtt_ringbuf_put+0x34>
    rb->put = 0;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	801a      	strh	r2, [r3, #0]
  }
}
 800892c:	bf00      	nop
 800892e:	370c      	adds	r7, #12
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <mqtt_ringbuf_get_ptr>:

/** Return pointer to ring buffer get position */
static u8_t *
mqtt_ringbuf_get_ptr(struct mqtt_ringbuf_t *rb)
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  return &rb->buf[rb->get];
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	885b      	ldrh	r3, [r3, #2]
 8008944:	461a      	mov	r2, r3
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4413      	add	r3, r2
 800894a:	3304      	adds	r3, #4
}
 800894c:	4618      	mov	r0, r3
 800894e:	370c      	adds	r7, #12
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <mqtt_ringbuf_advance_get_idx>:

static void
mqtt_ringbuf_advance_get_idx(struct mqtt_ringbuf_t *rb, u16_t len)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	460b      	mov	r3, r1
 8008962:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_ringbuf_advance_get_idx: len < MQTT_OUTPUT_RINGBUF_SIZE", len < MQTT_OUTPUT_RINGBUF_SIZE);
 8008964:	887b      	ldrh	r3, [r7, #2]
 8008966:	2bff      	cmp	r3, #255	; 0xff
 8008968:	d905      	bls.n	8008976 <mqtt_ringbuf_advance_get_idx+0x1e>
 800896a:	4b0e      	ldr	r3, [pc, #56]	; (80089a4 <mqtt_ringbuf_advance_get_idx+0x4c>)
 800896c:	22cb      	movs	r2, #203	; 0xcb
 800896e:	490e      	ldr	r1, [pc, #56]	; (80089a8 <mqtt_ringbuf_advance_get_idx+0x50>)
 8008970:	480e      	ldr	r0, [pc, #56]	; (80089ac <mqtt_ringbuf_advance_get_idx+0x54>)
 8008972:	f00c fcdf 	bl	8015334 <iprintf>

  rb->get += len;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	885a      	ldrh	r2, [r3, #2]
 800897a:	887b      	ldrh	r3, [r7, #2]
 800897c:	4413      	add	r3, r2
 800897e:	b29a      	uxth	r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	805a      	strh	r2, [r3, #2]
  if (rb->get >= MQTT_OUTPUT_RINGBUF_SIZE) {
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	885b      	ldrh	r3, [r3, #2]
 8008988:	2bff      	cmp	r3, #255	; 0xff
 800898a:	d906      	bls.n	800899a <mqtt_ringbuf_advance_get_idx+0x42>
    rb->get = rb->get - MQTT_OUTPUT_RINGBUF_SIZE;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	885b      	ldrh	r3, [r3, #2]
 8008990:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008994:	b29a      	uxth	r2, r3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	805a      	strh	r2, [r3, #2]
  }
}
 800899a:	bf00      	nop
 800899c:	3708      	adds	r7, #8
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	bf00      	nop
 80089a4:	08016b50 	.word	0x08016b50
 80089a8:	08016b88 	.word	0x08016b88
 80089ac:	08016bc8 	.word	0x08016bc8

080089b0 <mqtt_ringbuf_len>:

/** Return number of bytes in ring buffer */
static u16_t
mqtt_ringbuf_len(struct mqtt_ringbuf_t *rb)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b085      	sub	sp, #20
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  u32_t len = rb->put - rb->get;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	881b      	ldrh	r3, [r3, #0]
 80089bc:	461a      	mov	r2, r3
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	885b      	ldrh	r3, [r3, #2]
 80089c2:	1ad3      	subs	r3, r2, r3
 80089c4:	60fb      	str	r3, [r7, #12]
  if (len > 0xFFFF) {
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089cc:	d303      	bcc.n	80089d6 <mqtt_ringbuf_len+0x26>
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80089d4:	60fb      	str	r3, [r7, #12]
  }
  return (u16_t)len;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	b29b      	uxth	r3, r3
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3714      	adds	r7, #20
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr
	...

080089e8 <mqtt_output_send>:
 * @param rb Output ring buffer
 * @param tpcb TCP connection handle
 */
static void
mqtt_output_send(struct mqtt_ringbuf_t *rb, struct altcp_pcb *tpcb)
{
 80089e8:	b590      	push	{r4, r7, lr}
 80089ea:	b085      	sub	sp, #20
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
  err_t err;
  u8_t wrap = 0;
 80089f2:	2300      	movs	r3, #0
 80089f4:	73bb      	strb	r3, [r7, #14]
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f7ff ffda 	bl	80089b0 <mqtt_ringbuf_len>
 80089fc:	4603      	mov	r3, r0
 80089fe:	461a      	mov	r2, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	885b      	ldrh	r3, [r3, #2]
 8008a04:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	da04      	bge.n	8008a16 <mqtt_output_send+0x2e>
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f7ff ffcf 	bl	80089b0 <mqtt_ringbuf_len>
 8008a12:	4603      	mov	r3, r0
 8008a14:	e004      	b.n	8008a20 <mqtt_output_send+0x38>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	885b      	ldrh	r3, [r3, #2]
 8008a1a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8008a1e:	b29b      	uxth	r3, r3
 8008a20:	817b      	strh	r3, [r7, #10]
  u16_t send_len = altcp_sndbuf(tpcb);
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008a28:	81bb      	strh	r3, [r7, #12]
  LWIP_ASSERT("mqtt_output_send: tpcb != NULL", tpcb != NULL);
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d105      	bne.n	8008a3c <mqtt_output_send+0x54>
 8008a30:	4b44      	ldr	r3, [pc, #272]	; (8008b44 <mqtt_output_send+0x15c>)
 8008a32:	22f0      	movs	r2, #240	; 0xf0
 8008a34:	4944      	ldr	r1, [pc, #272]	; (8008b48 <mqtt_output_send+0x160>)
 8008a36:	4845      	ldr	r0, [pc, #276]	; (8008b4c <mqtt_output_send+0x164>)
 8008a38:	f00c fc7c 	bl	8015334 <iprintf>

  if (send_len == 0 || ringbuf_lin_len == 0) {
 8008a3c:	89bb      	ldrh	r3, [r7, #12]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d07c      	beq.n	8008b3c <mqtt_output_send+0x154>
 8008a42:	897b      	ldrh	r3, [r7, #10]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d079      	beq.n	8008b3c <mqtt_output_send+0x154>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_output_send: tcp_sndbuf: %d bytes, ringbuf_linear_available: %d, get %d, put %d\n",
                                 send_len, ringbuf_lin_len, rb->get, rb->put));

  if (send_len > ringbuf_lin_len) {
 8008a48:	89ba      	ldrh	r2, [r7, #12]
 8008a4a:	897b      	ldrh	r3, [r7, #10]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d90d      	bls.n	8008a6c <mqtt_output_send+0x84>
    /* Space in TCP output buffer is larger than available in ring buffer linear portion */
    send_len = ringbuf_lin_len;
 8008a50:	897b      	ldrh	r3, [r7, #10]
 8008a52:	81bb      	strh	r3, [r7, #12]
    /* Wrap around if more data in ring buffer after linear portion */
    wrap = (mqtt_ringbuf_len(rb) > ringbuf_lin_len);
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f7ff ffab 	bl	80089b0 <mqtt_ringbuf_len>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	897b      	ldrh	r3, [r7, #10]
 8008a60:	4293      	cmp	r3, r2
 8008a62:	bf34      	ite	cc
 8008a64:	2301      	movcc	r3, #1
 8008a66:	2300      	movcs	r3, #0
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	73bb      	strb	r3, [r7, #14]
  }
  err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f7ff ff63 	bl	8008938 <mqtt_ringbuf_get_ptr>
 8008a72:	4601      	mov	r1, r0
 8008a74:	7bbb      	ldrb	r3, [r7, #14]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d001      	beq.n	8008a7e <mqtt_output_send+0x96>
 8008a7a:	2303      	movs	r3, #3
 8008a7c:	e000      	b.n	8008a80 <mqtt_output_send+0x98>
 8008a7e:	2301      	movs	r3, #1
 8008a80:	89ba      	ldrh	r2, [r7, #12]
 8008a82:	6838      	ldr	r0, [r7, #0]
 8008a84:	f007 fe26 	bl	80106d4 <tcp_write>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	73fb      	strb	r3, [r7, #15]
  if ((err == ERR_OK) && wrap) {
 8008a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d146      	bne.n	8008b22 <mqtt_output_send+0x13a>
 8008a94:	7bbb      	ldrb	r3, [r7, #14]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d043      	beq.n	8008b22 <mqtt_output_send+0x13a>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8008a9a:	89bb      	ldrh	r3, [r7, #12]
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f7ff ff5a 	bl	8008958 <mqtt_ringbuf_advance_get_idx>
    /* Use the lesser one of ring buffer linear length and TCP send buffer size */
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008aaa:	461c      	mov	r4, r3
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f7ff ff7f 	bl	80089b0 <mqtt_ringbuf_len>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	885b      	ldrh	r3, [r3, #2]
 8008aba:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	da04      	bge.n	8008acc <mqtt_output_send+0xe4>
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f7ff ff74 	bl	80089b0 <mqtt_ringbuf_len>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	e003      	b.n	8008ad4 <mqtt_output_send+0xec>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	885b      	ldrh	r3, [r3, #2]
 8008ad0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8008ad4:	42a3      	cmp	r3, r4
 8008ad6:	dd03      	ble.n	8008ae0 <mqtt_output_send+0xf8>
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008ade:	e014      	b.n	8008b0a <mqtt_output_send+0x122>
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f7ff ff65 	bl	80089b0 <mqtt_ringbuf_len>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	461a      	mov	r2, r3
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	885b      	ldrh	r3, [r3, #2]
 8008aee:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8008af2:	429a      	cmp	r2, r3
 8008af4:	da04      	bge.n	8008b00 <mqtt_output_send+0x118>
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f7ff ff5a 	bl	80089b0 <mqtt_ringbuf_len>
 8008afc:	4603      	mov	r3, r0
 8008afe:	e004      	b.n	8008b0a <mqtt_output_send+0x122>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	885b      	ldrh	r3, [r3, #2]
 8008b04:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	81bb      	strh	r3, [r7, #12]
    err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f7ff ff13 	bl	8008938 <mqtt_ringbuf_get_ptr>
 8008b12:	4601      	mov	r1, r0
 8008b14:	89ba      	ldrh	r2, [r7, #12]
 8008b16:	2301      	movs	r3, #1
 8008b18:	6838      	ldr	r0, [r7, #0]
 8008b1a:	f007 fddb 	bl	80106d4 <tcp_write>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	73fb      	strb	r3, [r7, #15]
  }

  if (err == ERR_OK) {
 8008b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d109      	bne.n	8008b3e <mqtt_output_send+0x156>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8008b2a:	89bb      	ldrh	r3, [r7, #12]
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f7ff ff12 	bl	8008958 <mqtt_ringbuf_advance_get_idx>
    /* Flush */
    altcp_output(tpcb);
 8008b34:	6838      	ldr	r0, [r7, #0]
 8008b36:	f008 fbb7 	bl	80112a8 <tcp_output>
 8008b3a:	e000      	b.n	8008b3e <mqtt_output_send+0x156>
    return;
 8008b3c:	bf00      	nop
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_output_send: Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
  }
}
 8008b3e:	3714      	adds	r7, #20
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd90      	pop	{r4, r7, pc}
 8008b44:	08016b50 	.word	0x08016b50
 8008b48:	08016bf0 	.word	0x08016bf0
 8008b4c:	08016bc8 	.word	0x08016bc8

08008b50 <mqtt_create_request>:
 * @param arg Parameter following callback
 * @return Request or NULL if failed to create
 */
static struct mqtt_request_t *
mqtt_create_request(struct mqtt_request_t *r_objs, size_t r_objs_len, u16_t pkt_id, mqtt_request_cb_t cb, void *arg)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b086      	sub	sp, #24
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	603b      	str	r3, [r7, #0]
 8008b5c:	4613      	mov	r3, r2
 8008b5e:	80fb      	strh	r3, [r7, #6]
  struct mqtt_request_t *r = NULL;
 8008b60:	2300      	movs	r3, #0
 8008b62:	617b      	str	r3, [r7, #20]
  u8_t n;
  LWIP_ASSERT("mqtt_create_request: r_objs != NULL", r_objs != NULL);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d106      	bne.n	8008b78 <mqtt_create_request+0x28>
 8008b6a:	4b19      	ldr	r3, [pc, #100]	; (8008bd0 <mqtt_create_request+0x80>)
 8008b6c:	f240 1223 	movw	r2, #291	; 0x123
 8008b70:	4918      	ldr	r1, [pc, #96]	; (8008bd4 <mqtt_create_request+0x84>)
 8008b72:	4819      	ldr	r0, [pc, #100]	; (8008bd8 <mqtt_create_request+0x88>)
 8008b74:	f00c fbde 	bl	8015334 <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 8008b78:	2300      	movs	r3, #0
 8008b7a:	74fb      	strb	r3, [r7, #19]
 8008b7c:	e01f      	b.n	8008bbe <mqtt_create_request+0x6e>
    /* Item point to itself if not in use */
    if (r_objs[n].next == &r_objs[n]) {
 8008b7e:	7cfb      	ldrb	r3, [r7, #19]
 8008b80:	011b      	lsls	r3, r3, #4
 8008b82:	68fa      	ldr	r2, [r7, #12]
 8008b84:	4413      	add	r3, r2
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	7cfb      	ldrb	r3, [r7, #19]
 8008b8a:	011b      	lsls	r3, r3, #4
 8008b8c:	68f9      	ldr	r1, [r7, #12]
 8008b8e:	440b      	add	r3, r1
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d111      	bne.n	8008bb8 <mqtt_create_request+0x68>
      r = &r_objs[n];
 8008b94:	7cfb      	ldrb	r3, [r7, #19]
 8008b96:	011b      	lsls	r3, r3, #4
 8008b98:	68fa      	ldr	r2, [r7, #12]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	617b      	str	r3, [r7, #20]
      r->next = NULL;
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	601a      	str	r2, [r3, #0]
      r->cb = cb;
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	683a      	ldr	r2, [r7, #0]
 8008ba8:	605a      	str	r2, [r3, #4]
      r->arg = arg;
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	6a3a      	ldr	r2, [r7, #32]
 8008bae:	609a      	str	r2, [r3, #8]
      r->pkt_id = pkt_id;
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	88fa      	ldrh	r2, [r7, #6]
 8008bb4:	819a      	strh	r2, [r3, #12]
      break;
 8008bb6:	e006      	b.n	8008bc6 <mqtt_create_request+0x76>
  for (n = 0; n < r_objs_len; n++) {
 8008bb8:	7cfb      	ldrb	r3, [r7, #19]
 8008bba:	3301      	adds	r3, #1
 8008bbc:	74fb      	strb	r3, [r7, #19]
 8008bbe:	7cfb      	ldrb	r3, [r7, #19]
 8008bc0:	68ba      	ldr	r2, [r7, #8]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d8db      	bhi.n	8008b7e <mqtt_create_request+0x2e>
    }
  }
  return r;
 8008bc6:	697b      	ldr	r3, [r7, #20]
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3718      	adds	r7, #24
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	08016b50 	.word	0x08016b50
 8008bd4:	08016c10 	.word	0x08016c10
 8008bd8:	08016bc8 	.word	0x08016bc8

08008bdc <mqtt_append_request>:
 * @param tail Pointer to request queue tail pointer
 * @param r Request to append
 */
static void
mqtt_append_request(struct mqtt_request_t **tail, struct mqtt_request_t *r)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b086      	sub	sp, #24
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6039      	str	r1, [r7, #0]
  struct mqtt_request_t *head = NULL;
 8008be6:	2300      	movs	r3, #0
 8008be8:	617b      	str	r3, [r7, #20]
  s16_t time_before = 0;
 8008bea:	2300      	movs	r3, #0
 8008bec:	827b      	strh	r3, [r7, #18]
  struct mqtt_request_t *iter;

  LWIP_ASSERT("mqtt_append_request: tail != NULL", tail != NULL);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d106      	bne.n	8008c02 <mqtt_append_request+0x26>
 8008bf4:	4b1b      	ldr	r3, [pc, #108]	; (8008c64 <mqtt_append_request+0x88>)
 8008bf6:	f240 123f 	movw	r2, #319	; 0x13f
 8008bfa:	491b      	ldr	r1, [pc, #108]	; (8008c68 <mqtt_append_request+0x8c>)
 8008bfc:	481b      	ldr	r0, [pc, #108]	; (8008c6c <mqtt_append_request+0x90>)
 8008bfe:	f00c fb99 	bl	8015334 <iprintf>

  /* Iterate trough queue to find head, and count total timeout time */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	60fb      	str	r3, [r7, #12]
 8008c08:	e00a      	b.n	8008c20 <mqtt_append_request+0x44>
    time_before += iter->timeout_diff;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	89da      	ldrh	r2, [r3, #14]
 8008c0e:	8a7b      	ldrh	r3, [r7, #18]
 8008c10:	4413      	add	r3, r2
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	827b      	strh	r3, [r7, #18]
    head = iter;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	617b      	str	r3, [r7, #20]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	60fb      	str	r3, [r7, #12]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d1f1      	bne.n	8008c0a <mqtt_append_request+0x2e>
  }

  LWIP_ASSERT("mqtt_append_request: time_before <= MQTT_REQ_TIMEOUT", time_before <= MQTT_REQ_TIMEOUT);
 8008c26:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008c2a:	2b1e      	cmp	r3, #30
 8008c2c:	dd06      	ble.n	8008c3c <mqtt_append_request+0x60>
 8008c2e:	4b0d      	ldr	r3, [pc, #52]	; (8008c64 <mqtt_append_request+0x88>)
 8008c30:	f240 1247 	movw	r2, #327	; 0x147
 8008c34:	490e      	ldr	r1, [pc, #56]	; (8008c70 <mqtt_append_request+0x94>)
 8008c36:	480d      	ldr	r0, [pc, #52]	; (8008c6c <mqtt_append_request+0x90>)
 8008c38:	f00c fb7c 	bl	8015334 <iprintf>
  r->timeout_diff = MQTT_REQ_TIMEOUT - time_before;
 8008c3c:	8a7b      	ldrh	r3, [r7, #18]
 8008c3e:	f1c3 031e 	rsb	r3, r3, #30
 8008c42:	b29a      	uxth	r2, r3
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	81da      	strh	r2, [r3, #14]
  if (head == NULL) {
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d103      	bne.n	8008c56 <mqtt_append_request+0x7a>
    *tail = r;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	683a      	ldr	r2, [r7, #0]
 8008c52:	601a      	str	r2, [r3, #0]
  } else {
    head->next = r;
  }
}
 8008c54:	e002      	b.n	8008c5c <mqtt_append_request+0x80>
    head->next = r;
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	683a      	ldr	r2, [r7, #0]
 8008c5a:	601a      	str	r2, [r3, #0]
}
 8008c5c:	bf00      	nop
 8008c5e:	3718      	adds	r7, #24
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	08016b50 	.word	0x08016b50
 8008c68:	08016c34 	.word	0x08016c34
 8008c6c:	08016bc8 	.word	0x08016bc8
 8008c70:	08016c58 	.word	0x08016c58

08008c74 <mqtt_delete_request>:
 * Delete request item
 * @param r Request item to delete
 */
static void
mqtt_delete_request(struct mqtt_request_t *r)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  if (r != NULL) {
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d002      	beq.n	8008c88 <mqtt_delete_request+0x14>
    r->next = r;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	601a      	str	r2, [r3, #0]
  }
}
 8008c88:	bf00      	nop
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <mqtt_take_request>:
 * @param pkt_id Packet identifier of request to take
 * @return Request item if found, NULL if not
 */
static struct mqtt_request_t *
mqtt_take_request(struct mqtt_request_t **tail, u16_t pkt_id)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	807b      	strh	r3, [r7, #2]
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	60fb      	str	r3, [r7, #12]
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d106      	bne.n	8008cbc <mqtt_take_request+0x28>
 8008cae:	4b1f      	ldr	r3, [pc, #124]	; (8008d2c <mqtt_take_request+0x98>)
 8008cb0:	f240 1267 	movw	r2, #359	; 0x167
 8008cb4:	491e      	ldr	r1, [pc, #120]	; (8008d30 <mqtt_take_request+0x9c>)
 8008cb6:	481f      	ldr	r0, [pc, #124]	; (8008d34 <mqtt_take_request+0xa0>)
 8008cb8:	f00c fb3c 	bl	8015334 <iprintf>
  /* Search all request for pkt_id */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	60fb      	str	r3, [r7, #12]
 8008cc2:	e009      	b.n	8008cd8 <mqtt_take_request+0x44>
    if (iter->pkt_id == pkt_id) {
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	899b      	ldrh	r3, [r3, #12]
 8008cc8:	887a      	ldrh	r2, [r7, #2]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d008      	beq.n	8008ce0 <mqtt_take_request+0x4c>
      break;
    }
    prev = iter;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	60bb      	str	r3, [r7, #8]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	60fb      	str	r3, [r7, #12]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1f2      	bne.n	8008cc4 <mqtt_take_request+0x30>
 8008cde:	e000      	b.n	8008ce2 <mqtt_take_request+0x4e>
      break;
 8008ce0:	bf00      	nop
  }

  /* If request was found */
  if (iter != NULL) {
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d01c      	beq.n	8008d22 <mqtt_take_request+0x8e>
    /* unchain */
    if (prev == NULL) {
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d104      	bne.n	8008cf8 <mqtt_take_request+0x64>
      *tail = iter->next;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	601a      	str	r2, [r3, #0]
 8008cf6:	e003      	b.n	8008d00 <mqtt_take_request+0x6c>
    } else {
      prev->next = iter->next;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	601a      	str	r2, [r3, #0]
    }
    /* If exists, add remaining timeout time for the request to next */
    if (iter->next != NULL) {
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d009      	beq.n	8008d1c <mqtt_take_request+0x88>
      iter->next->timeout_diff += iter->timeout_diff;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	89d9      	ldrh	r1, [r3, #14]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	89da      	ldrh	r2, [r3, #14]
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	440a      	add	r2, r1
 8008d18:	b292      	uxth	r2, r2
 8008d1a:	81da      	strh	r2, [r3, #14]
    }
    iter->next = NULL;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	601a      	str	r2, [r3, #0]
  }
  return iter;
 8008d22:	68fb      	ldr	r3, [r7, #12]
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3710      	adds	r7, #16
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}
 8008d2c:	08016b50 	.word	0x08016b50
 8008d30:	08016c90 	.word	0x08016c90
 8008d34:	08016bc8 	.word	0x08016bc8

08008d38 <mqtt_request_time_elapsed>:
 * @param tail Pointer to request queue tail pointer
 * @param t Time since last call in seconds
 */
static void
mqtt_request_time_elapsed(struct mqtt_request_t **tail, u8_t t)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	460b      	mov	r3, r1
 8008d42:	70fb      	strb	r3, [r7, #3]
  struct mqtt_request_t *r;
  LWIP_ASSERT("mqtt_request_time_elapsed: tail != NULL", tail != NULL);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d106      	bne.n	8008d58 <mqtt_request_time_elapsed+0x20>
 8008d4a:	4b21      	ldr	r3, [pc, #132]	; (8008dd0 <mqtt_request_time_elapsed+0x98>)
 8008d4c:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 8008d50:	4920      	ldr	r1, [pc, #128]	; (8008dd4 <mqtt_request_time_elapsed+0x9c>)
 8008d52:	4821      	ldr	r0, [pc, #132]	; (8008dd8 <mqtt_request_time_elapsed+0xa0>)
 8008d54:	f00c faee 	bl	8015334 <iprintf>
  r = *tail;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	60fb      	str	r3, [r7, #12]
  while (t > 0 && r != NULL) {
 8008d5e:	e02c      	b.n	8008dba <mqtt_request_time_elapsed+0x82>
    if (t >= r->timeout_diff) {
 8008d60:	78fb      	ldrb	r3, [r7, #3]
 8008d62:	b29a      	uxth	r2, r3
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	89db      	ldrh	r3, [r3, #14]
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d31c      	bcc.n	8008da6 <mqtt_request_time_elapsed+0x6e>
      t -= (u8_t)r->timeout_diff;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	89db      	ldrh	r3, [r3, #14]
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	78fa      	ldrb	r2, [r7, #3]
 8008d74:	1ad3      	subs	r3, r2, r3
 8008d76:	70fb      	strb	r3, [r7, #3]
      /* Unchain */
      *tail = r->next;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	601a      	str	r2, [r3, #0]
      /* Notify upper layer about timeout */
      if (r->cb != NULL) {
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d007      	beq.n	8008d98 <mqtt_request_time_elapsed+0x60>
        r->cb(r->arg, ERR_TIMEOUT);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	68fa      	ldr	r2, [r7, #12]
 8008d8e:	6892      	ldr	r2, [r2, #8]
 8008d90:	f06f 0102 	mvn.w	r1, #2
 8008d94:	4610      	mov	r0, r2
 8008d96:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 8008d98:	68f8      	ldr	r0, [r7, #12]
 8008d9a:	f7ff ff6b 	bl	8008c74 <mqtt_delete_request>
      /* Tail might be be modified in callback, so re-read it in every iteration */
      r = *(struct mqtt_request_t *const volatile *)tail;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	60fb      	str	r3, [r7, #12]
 8008da4:	e009      	b.n	8008dba <mqtt_request_time_elapsed+0x82>
    } else {
      r->timeout_diff -= t;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	89da      	ldrh	r2, [r3, #14]
 8008daa:	78fb      	ldrb	r3, [r7, #3]
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	1ad3      	subs	r3, r2, r3
 8008db0:	b29a      	uxth	r2, r3
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	81da      	strh	r2, [r3, #14]
      t = 0;
 8008db6:	2300      	movs	r3, #0
 8008db8:	70fb      	strb	r3, [r7, #3]
  while (t > 0 && r != NULL) {
 8008dba:	78fb      	ldrb	r3, [r7, #3]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d002      	beq.n	8008dc6 <mqtt_request_time_elapsed+0x8e>
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d1cc      	bne.n	8008d60 <mqtt_request_time_elapsed+0x28>
    }
  }
}
 8008dc6:	bf00      	nop
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	08016b50 	.word	0x08016b50
 8008dd4:	08016cb0 	.word	0x08016cb0
 8008dd8:	08016bc8 	.word	0x08016bc8

08008ddc <mqtt_clear_requests>:
 * Free all request items
 * @param tail Pointer to request queue tail pointer
 */
static void
mqtt_clear_requests(struct mqtt_request_t **tail)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  struct mqtt_request_t *iter, *next;
  LWIP_ASSERT("mqtt_clear_requests: tail != NULL", tail != NULL);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d106      	bne.n	8008df8 <mqtt_clear_requests+0x1c>
 8008dea:	4b0e      	ldr	r3, [pc, #56]	; (8008e24 <mqtt_clear_requests+0x48>)
 8008dec:	f240 12a7 	movw	r2, #423	; 0x1a7
 8008df0:	490d      	ldr	r1, [pc, #52]	; (8008e28 <mqtt_clear_requests+0x4c>)
 8008df2:	480e      	ldr	r0, [pc, #56]	; (8008e2c <mqtt_clear_requests+0x50>)
 8008df4:	f00c fa9e 	bl	8015334 <iprintf>
  for (iter = *tail; iter != NULL; iter = next) {
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	60fb      	str	r3, [r7, #12]
 8008dfe:	e007      	b.n	8008e10 <mqtt_clear_requests+0x34>
    next = iter->next;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	60bb      	str	r3, [r7, #8]
    mqtt_delete_request(iter);
 8008e06:	68f8      	ldr	r0, [r7, #12]
 8008e08:	f7ff ff34 	bl	8008c74 <mqtt_delete_request>
  for (iter = *tail; iter != NULL; iter = next) {
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	60fb      	str	r3, [r7, #12]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1f4      	bne.n	8008e00 <mqtt_clear_requests+0x24>
  }
  *tail = NULL;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	601a      	str	r2, [r3, #0]
}
 8008e1c:	bf00      	nop
 8008e1e:	3710      	adds	r7, #16
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	08016b50 	.word	0x08016b50
 8008e28:	08016cd8 	.word	0x08016cd8
 8008e2c:	08016bc8 	.word	0x08016bc8

08008e30 <mqtt_init_requests>:
 * @param r_objs Pointer to request objects
 * @param r_objs_len Number of array entries
 */
static void
mqtt_init_requests(struct mqtt_request_t *r_objs, size_t r_objs_len)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
  u8_t n;
  LWIP_ASSERT("mqtt_init_requests: r_objs != NULL", r_objs != NULL);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d106      	bne.n	8008e4e <mqtt_init_requests+0x1e>
 8008e40:	4b0f      	ldr	r3, [pc, #60]	; (8008e80 <mqtt_init_requests+0x50>)
 8008e42:	f240 12b7 	movw	r2, #439	; 0x1b7
 8008e46:	490f      	ldr	r1, [pc, #60]	; (8008e84 <mqtt_init_requests+0x54>)
 8008e48:	480f      	ldr	r0, [pc, #60]	; (8008e88 <mqtt_init_requests+0x58>)
 8008e4a:	f00c fa73 	bl	8015334 <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 8008e4e:	2300      	movs	r3, #0
 8008e50:	73fb      	strb	r3, [r7, #15]
 8008e52:	e00b      	b.n	8008e6c <mqtt_init_requests+0x3c>
    /* Item pointing to itself indicates unused */
    r_objs[n].next = &r_objs[n];
 8008e54:	7bfb      	ldrb	r3, [r7, #15]
 8008e56:	011a      	lsls	r2, r3, #4
 8008e58:	7bfb      	ldrb	r3, [r7, #15]
 8008e5a:	011b      	lsls	r3, r3, #4
 8008e5c:	6879      	ldr	r1, [r7, #4]
 8008e5e:	440b      	add	r3, r1
 8008e60:	6879      	ldr	r1, [r7, #4]
 8008e62:	440a      	add	r2, r1
 8008e64:	601a      	str	r2, [r3, #0]
  for (n = 0; n < r_objs_len; n++) {
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
 8008e68:	3301      	adds	r3, #1
 8008e6a:	73fb      	strb	r3, [r7, #15]
 8008e6c:	7bfb      	ldrb	r3, [r7, #15]
 8008e6e:	683a      	ldr	r2, [r7, #0]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d8ef      	bhi.n	8008e54 <mqtt_init_requests+0x24>
  }
}
 8008e74:	bf00      	nop
 8008e76:	bf00      	nop
 8008e78:	3710      	adds	r7, #16
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	08016b50 	.word	0x08016b50
 8008e84:	08016cfc 	.word	0x08016cfc
 8008e88:	08016bc8 	.word	0x08016bc8

08008e8c <mqtt_output_append_u8>:
/* Output message build helpers */


static void
mqtt_output_append_u8(struct mqtt_ringbuf_t *rb, u8_t value)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	460b      	mov	r3, r1
 8008e96:	70fb      	strb	r3, [r7, #3]
  mqtt_ringbuf_put(rb, value);
 8008e98:	78fb      	ldrb	r3, [r7, #3]
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f7ff fd2b 	bl	80088f8 <mqtt_ringbuf_put>
}
 8008ea2:	bf00      	nop
 8008ea4:	3708      	adds	r7, #8
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <mqtt_output_append_u16>:

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b082      	sub	sp, #8
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	807b      	strh	r3, [r7, #2]
  mqtt_ringbuf_put(rb, value >> 8);
 8008eb6:	887b      	ldrh	r3, [r7, #2]
 8008eb8:	0a1b      	lsrs	r3, r3, #8
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f7ff fd19 	bl	80088f8 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, value & 0xff);
 8008ec6:	887b      	ldrh	r3, [r7, #2]
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	4619      	mov	r1, r3
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f7ff fd13 	bl	80088f8 <mqtt_ringbuf_put>
}
 8008ed2:	bf00      	nop
 8008ed4:	3708      	adds	r7, #8
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <mqtt_output_append_buf>:

static void
mqtt_output_append_buf(struct mqtt_ringbuf_t *rb, const void *data, u16_t length)
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b086      	sub	sp, #24
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	60f8      	str	r0, [r7, #12]
 8008ee2:	60b9      	str	r1, [r7, #8]
 8008ee4:	4613      	mov	r3, r2
 8008ee6:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  for (n = 0; n < length; n++) {
 8008ee8:	2300      	movs	r3, #0
 8008eea:	82fb      	strh	r3, [r7, #22]
 8008eec:	e00a      	b.n	8008f04 <mqtt_output_append_buf+0x2a>
    mqtt_ringbuf_put(rb, ((const u8_t *)data)[n]);
 8008eee:	8afb      	ldrh	r3, [r7, #22]
 8008ef0:	68ba      	ldr	r2, [r7, #8]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	68f8      	ldr	r0, [r7, #12]
 8008efa:	f7ff fcfd 	bl	80088f8 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8008efe:	8afb      	ldrh	r3, [r7, #22]
 8008f00:	3301      	adds	r3, #1
 8008f02:	82fb      	strh	r3, [r7, #22]
 8008f04:	8afa      	ldrh	r2, [r7, #22]
 8008f06:	88fb      	ldrh	r3, [r7, #6]
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d3f0      	bcc.n	8008eee <mqtt_output_append_buf+0x14>
  }
}
 8008f0c:	bf00      	nop
 8008f0e:	bf00      	nop
 8008f10:	3718      	adds	r7, #24
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}

08008f16 <mqtt_output_append_string>:

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
 8008f16:	b580      	push	{r7, lr}
 8008f18:	b086      	sub	sp, #24
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	60f8      	str	r0, [r7, #12]
 8008f1e:	60b9      	str	r1, [r7, #8]
 8008f20:	4613      	mov	r3, r2
 8008f22:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 8008f24:	88fb      	ldrh	r3, [r7, #6]
 8008f26:	0a1b      	lsrs	r3, r3, #8
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	68f8      	ldr	r0, [r7, #12]
 8008f30:	f7ff fce2 	bl	80088f8 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, length & 0xff);
 8008f34:	88fb      	ldrh	r3, [r7, #6]
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	4619      	mov	r1, r3
 8008f3a:	68f8      	ldr	r0, [r7, #12]
 8008f3c:	f7ff fcdc 	bl	80088f8 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8008f40:	2300      	movs	r3, #0
 8008f42:	82fb      	strh	r3, [r7, #22]
 8008f44:	e00a      	b.n	8008f5c <mqtt_output_append_string+0x46>
    mqtt_ringbuf_put(rb, str[n]);
 8008f46:	8afb      	ldrh	r3, [r7, #22]
 8008f48:	68ba      	ldr	r2, [r7, #8]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	4619      	mov	r1, r3
 8008f50:	68f8      	ldr	r0, [r7, #12]
 8008f52:	f7ff fcd1 	bl	80088f8 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8008f56:	8afb      	ldrh	r3, [r7, #22]
 8008f58:	3301      	adds	r3, #1
 8008f5a:	82fb      	strh	r3, [r7, #22]
 8008f5c:	8afa      	ldrh	r2, [r7, #22]
 8008f5e:	88fb      	ldrh	r3, [r7, #6]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d3f0      	bcc.n	8008f46 <mqtt_output_append_string+0x30>
  }
}
 8008f64:	bf00      	nop
 8008f66:	bf00      	nop
 8008f68:	3718      	adds	r7, #24
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <mqtt_output_append_fixed_header>:
 */

static void
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t fdup,
                                u8_t fqos, u8_t fretain, u16_t r_length)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b082      	sub	sp, #8
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
 8008f76:	4608      	mov	r0, r1
 8008f78:	4611      	mov	r1, r2
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	70fb      	strb	r3, [r7, #3]
 8008f80:	460b      	mov	r3, r1
 8008f82:	70bb      	strb	r3, [r7, #2]
 8008f84:	4613      	mov	r3, r2
 8008f86:	707b      	strb	r3, [r7, #1]
  /* Start with control byte */
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((fdup & 1) << 3) | ((fqos & 3) << 1) | (fretain & 1)));
 8008f88:	78fb      	ldrb	r3, [r7, #3]
 8008f8a:	011b      	lsls	r3, r3, #4
 8008f8c:	b25a      	sxtb	r2, r3
 8008f8e:	78bb      	ldrb	r3, [r7, #2]
 8008f90:	00db      	lsls	r3, r3, #3
 8008f92:	b25b      	sxtb	r3, r3
 8008f94:	f003 0308 	and.w	r3, r3, #8
 8008f98:	b25b      	sxtb	r3, r3
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	b25a      	sxtb	r2, r3
 8008f9e:	787b      	ldrb	r3, [r7, #1]
 8008fa0:	005b      	lsls	r3, r3, #1
 8008fa2:	b25b      	sxtb	r3, r3
 8008fa4:	f003 0306 	and.w	r3, r3, #6
 8008fa8:	b25b      	sxtb	r3, r3
 8008faa:	4313      	orrs	r3, r2
 8008fac:	b25a      	sxtb	r2, r3
 8008fae:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8008fb2:	f003 0301 	and.w	r3, r3, #1
 8008fb6:	b25b      	sxtb	r3, r3
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	b25b      	sxtb	r3, r3
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f7ff ff63 	bl	8008e8c <mqtt_output_append_u8>
  /* Encode remaining length field */
  do {
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 8008fc6:	8abb      	ldrh	r3, [r7, #20]
 8008fc8:	b25b      	sxtb	r3, r3
 8008fca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fce:	b25b      	sxtb	r3, r3
 8008fd0:	8aba      	ldrh	r2, [r7, #20]
 8008fd2:	2a7f      	cmp	r2, #127	; 0x7f
 8008fd4:	d902      	bls.n	8008fdc <mqtt_output_append_fixed_header+0x6e>
 8008fd6:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8008fda:	e000      	b.n	8008fde <mqtt_output_append_fixed_header+0x70>
 8008fdc:	2200      	movs	r2, #0
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	b25b      	sxtb	r3, r3
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f7ff ff50 	bl	8008e8c <mqtt_output_append_u8>
    r_length >>= 7;
 8008fec:	8abb      	ldrh	r3, [r7, #20]
 8008fee:	09db      	lsrs	r3, r3, #7
 8008ff0:	82bb      	strh	r3, [r7, #20]
  } while (r_length > 0);
 8008ff2:	8abb      	ldrh	r3, [r7, #20]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d1e6      	bne.n	8008fc6 <mqtt_output_append_fixed_header+0x58>
}
 8008ff8:	bf00      	nop
 8008ffa:	bf00      	nop
 8008ffc:	3708      	adds	r7, #8
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
	...

08009004 <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 8009004:	b590      	push	{r4, r7, lr}
 8009006:	b085      	sub	sp, #20
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	460b      	mov	r3, r1
 800900e:	807b      	strh	r3, [r7, #2]
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 8009010:	887b      	ldrh	r3, [r7, #2]
 8009012:	3301      	adds	r3, #1
 8009014:	81fb      	strh	r3, [r7, #14]

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d106      	bne.n	800902a <mqtt_output_check_space+0x26>
 800901c:	4b0f      	ldr	r3, [pc, #60]	; (800905c <mqtt_output_check_space+0x58>)
 800901e:	f240 2207 	movw	r2, #519	; 0x207
 8009022:	490f      	ldr	r1, [pc, #60]	; (8009060 <mqtt_output_check_space+0x5c>)
 8009024:	480f      	ldr	r0, [pc, #60]	; (8009064 <mqtt_output_check_space+0x60>)
 8009026:	f00c f985 	bl	8015334 <iprintf>

  /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 800902a:	89fb      	ldrh	r3, [r7, #14]
 800902c:	3301      	adds	r3, #1
 800902e:	81fb      	strh	r3, [r7, #14]
    r_length >>= 7;
 8009030:	887b      	ldrh	r3, [r7, #2]
 8009032:	09db      	lsrs	r3, r3, #7
 8009034:	807b      	strh	r3, [r7, #2]
  } while (r_length > 0);
 8009036:	887b      	ldrh	r3, [r7, #2]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d1f6      	bne.n	800902a <mqtt_output_check_space+0x26>

  return (total_len <= mqtt_ringbuf_free(rb));
 800903c:	89fc      	ldrh	r4, [r7, #14]
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f7ff fcb6 	bl	80089b0 <mqtt_ringbuf_len>
 8009044:	4603      	mov	r3, r0
 8009046:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800904a:	429c      	cmp	r4, r3
 800904c:	bfd4      	ite	le
 800904e:	2301      	movle	r3, #1
 8009050:	2300      	movgt	r3, #0
 8009052:	b2db      	uxtb	r3, r3
}
 8009054:	4618      	mov	r0, r3
 8009056:	3714      	adds	r7, #20
 8009058:	46bd      	mov	sp, r7
 800905a:	bd90      	pop	{r4, r7, pc}
 800905c:	08016b50 	.word	0x08016b50
 8009060:	08016d20 	.word	0x08016d20
 8009064:	08016bc8 	.word	0x08016bc8

08009068 <mqtt_close>:
 * @param client MQTT client
 * @param reason Reason for disconnection
 */
static void
mqtt_close(mqtt_client_t *client, mqtt_connection_status_t reason)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	460b      	mov	r3, r1
 8009072:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d106      	bne.n	8009088 <mqtt_close+0x20>
 800907a:	4b27      	ldr	r3, [pc, #156]	; (8009118 <mqtt_close+0xb0>)
 800907c:	f240 221b 	movw	r2, #539	; 0x21b
 8009080:	4926      	ldr	r1, [pc, #152]	; (800911c <mqtt_close+0xb4>)
 8009082:	4827      	ldr	r0, [pc, #156]	; (8009120 <mqtt_close+0xb8>)
 8009084:	f00c f956 	bl	8015334 <iprintf>

  /* Bring down TCP connection if not already done */
  if (client->conn != NULL) {
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d024      	beq.n	80090da <mqtt_close+0x72>
    err_t res;
    altcp_recv(client->conn, NULL);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	2100      	movs	r1, #0
 8009096:	4618      	mov	r0, r3
 8009098:	f004 fc08 	bl	800d8ac <tcp_recv>
    altcp_err(client->conn,  NULL);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	68db      	ldr	r3, [r3, #12]
 80090a0:	2100      	movs	r1, #0
 80090a2:	4618      	mov	r0, r3
 80090a4:	f004 fc46 	bl	800d934 <tcp_err>
    altcp_sent(client->conn, NULL);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	2100      	movs	r1, #0
 80090ae:	4618      	mov	r0, r3
 80090b0:	f004 fc1e 	bl	800d8f0 <tcp_sent>
    res = altcp_close(client->conn);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	4618      	mov	r0, r3
 80090ba:	f003 fa1f 	bl	800c4fc <tcp_close>
 80090be:	4603      	mov	r3, r0
 80090c0:	73fb      	strb	r3, [r7, #15]
    if (res != ERR_OK) {
 80090c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d004      	beq.n	80090d4 <mqtt_close+0x6c>
      altcp_abort(client->conn);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	4618      	mov	r0, r3
 80090d0:	f003 fafe 	bl	800c6d0 <tcp_abort>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_close: Close err=%s\n", lwip_strerr(res)));
    }
    client->conn = NULL;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	60da      	str	r2, [r3, #12]
  }

  /* Remove all pending requests */
  mqtt_clear_requests(&client->pend_req_queue);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	3318      	adds	r3, #24
 80090de:	4618      	mov	r0, r3
 80090e0:	f7ff fe7c 	bl	8008ddc <mqtt_clear_requests>
  /* Stop cyclic timer */
  sys_untimeout(mqtt_cyclic_timer, client);
 80090e4:	6879      	ldr	r1, [r7, #4]
 80090e6:	480f      	ldr	r0, [pc, #60]	; (8009124 <mqtt_close+0xbc>)
 80090e8:	f009 f95c 	bl	80123a4 <sys_untimeout>

  /* Notify upper layer of disconnection if changed state */
  if (client->conn_state != TCP_DISCONNECTED) {
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	7a9b      	ldrb	r3, [r3, #10]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d00d      	beq.n	8009110 <mqtt_close+0xa8>

    client->conn_state = TCP_DISCONNECTED;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	729a      	strb	r2, [r3, #10]
    if (client->connect_cb != NULL) {
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	695b      	ldr	r3, [r3, #20]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d006      	beq.n	8009110 <mqtt_close+0xa8>
      client->connect_cb(client, client->connect_arg, reason);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	695b      	ldr	r3, [r3, #20]
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	6911      	ldr	r1, [r2, #16]
 800910a:	887a      	ldrh	r2, [r7, #2]
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	4798      	blx	r3
    }
  }
}
 8009110:	bf00      	nop
 8009112:	3710      	adds	r7, #16
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}
 8009118:	08016b50 	.word	0x08016b50
 800911c:	08016d44 	.word	0x08016d44
 8009120:	08016bc8 	.word	0x08016bc8
 8009124:	08009129 	.word	0x08009129

08009128 <mqtt_cyclic_timer>:
 * Interval timer, called every MQTT_CYCLIC_TIMER_INTERVAL seconds in MQTT_CONNECTING and MQTT_CONNECTED states
 * @param arg MQTT client
 */
static void
mqtt_cyclic_timer(void *arg)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b086      	sub	sp, #24
 800912c:	af02      	add	r7, sp, #8
 800912e:	6078      	str	r0, [r7, #4]
  u8_t restart_timer = 1;
 8009130:	2301      	movs	r3, #1
 8009132:	73fb      	strb	r3, [r7, #15]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d106      	bne.n	800914c <mqtt_cyclic_timer+0x24>
 800913e:	4b42      	ldr	r3, [pc, #264]	; (8009248 <mqtt_cyclic_timer+0x120>)
 8009140:	f44f 7211 	mov.w	r2, #580	; 0x244
 8009144:	4941      	ldr	r1, [pc, #260]	; (800924c <mqtt_cyclic_timer+0x124>)
 8009146:	4842      	ldr	r0, [pc, #264]	; (8009250 <mqtt_cyclic_timer+0x128>)
 8009148:	f00c f8f4 	bl	8015334 <iprintf>

  if (client->conn_state == MQTT_CONNECTING) {
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	7a9b      	ldrb	r3, [r3, #10]
 8009150:	2b02      	cmp	r3, #2
 8009152:	d115      	bne.n	8009180 <mqtt_cyclic_timer+0x58>
    client->cyclic_tick++;
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	881b      	ldrh	r3, [r3, #0]
 8009158:	3301      	adds	r3, #1
 800915a:	b29a      	uxth	r2, r3
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	801a      	strh	r2, [r3, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	881b      	ldrh	r3, [r3, #0]
 8009164:	461a      	mov	r2, r3
 8009166:	4613      	mov	r3, r2
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	4413      	add	r3, r2
 800916c:	2b63      	cmp	r3, #99	; 0x63
 800916e:	dd5e      	ble.n	800922e <mqtt_cyclic_timer+0x106>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: CONNECT attempt to server timed out\n"));
      /* Disconnect TCP */
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8009170:	f240 1101 	movw	r1, #257	; 0x101
 8009174:	68b8      	ldr	r0, [r7, #8]
 8009176:	f7ff ff77 	bl	8009068 <mqtt_close>
      restart_timer = 0;
 800917a:	2300      	movs	r3, #0
 800917c:	73fb      	strb	r3, [r7, #15]
 800917e:	e056      	b.n	800922e <mqtt_cyclic_timer+0x106>
    }
  } else if (client->conn_state == MQTT_CONNECTED) {
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	7a9b      	ldrb	r3, [r3, #10]
 8009184:	2b03      	cmp	r3, #3
 8009186:	d150      	bne.n	800922a <mqtt_cyclic_timer+0x102>
    /* Handle timeout for pending requests */
    mqtt_request_time_elapsed(&client->pend_req_queue, MQTT_CYCLIC_TIMER_INTERVAL);
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	3318      	adds	r3, #24
 800918c:	2105      	movs	r1, #5
 800918e:	4618      	mov	r0, r3
 8009190:	f7ff fdd2 	bl	8008d38 <mqtt_request_time_elapsed>

    /* keep_alive > 0 means keep alive functionality shall be used */
    if (client->keep_alive > 0) {
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	885b      	ldrh	r3, [r3, #2]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d048      	beq.n	800922e <mqtt_cyclic_timer+0x106>

      client->server_watchdog++;
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	889b      	ldrh	r3, [r3, #4]
 80091a0:	3301      	adds	r3, #1
 80091a2:	b29a      	uxth	r2, r3
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	809a      	strh	r2, [r3, #4]
      /* If reception from server has been idle for 1.5*keep_alive time, server is considered unresponsive */
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive / 2)) {
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	889b      	ldrh	r3, [r3, #4]
 80091ac:	461a      	mov	r2, r3
 80091ae:	4613      	mov	r3, r2
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	441a      	add	r2, r3
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	885b      	ldrh	r3, [r3, #2]
 80091b8:	4619      	mov	r1, r3
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	885b      	ldrh	r3, [r3, #2]
 80091be:	085b      	lsrs	r3, r3, #1
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	440b      	add	r3, r1
 80091c4:	429a      	cmp	r2, r3
 80091c6:	dd06      	ble.n	80091d6 <mqtt_cyclic_timer+0xae>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Server incoming keep-alive timeout\n"));
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 80091c8:	f240 1101 	movw	r1, #257	; 0x101
 80091cc:	68b8      	ldr	r0, [r7, #8]
 80091ce:	f7ff ff4b 	bl	8009068 <mqtt_close>
        restart_timer = 0;
 80091d2:	2300      	movs	r3, #0
 80091d4:	73fb      	strb	r3, [r7, #15]
      }

      /* If time for a keep alive message to be sent, transmission has been idle for keep_alive time */
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	881b      	ldrh	r3, [r3, #0]
 80091da:	461a      	mov	r2, r3
 80091dc:	4613      	mov	r3, r2
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	4413      	add	r3, r2
 80091e2:	68ba      	ldr	r2, [r7, #8]
 80091e4:	8852      	ldrh	r2, [r2, #2]
 80091e6:	4293      	cmp	r3, r2
 80091e8:	db18      	blt.n	800921c <mqtt_cyclic_timer+0xf4>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: Sending keep-alive message to server\n"));
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	33ec      	adds	r3, #236	; 0xec
 80091ee:	2100      	movs	r1, #0
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7ff ff07 	bl	8009004 <mqtt_output_check_space>
 80091f6:	4603      	mov	r3, r0
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d018      	beq.n	800922e <mqtt_cyclic_timer+0x106>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8009202:	2300      	movs	r3, #0
 8009204:	9301      	str	r3, [sp, #4]
 8009206:	2300      	movs	r3, #0
 8009208:	9300      	str	r3, [sp, #0]
 800920a:	2300      	movs	r3, #0
 800920c:	2200      	movs	r2, #0
 800920e:	210c      	movs	r1, #12
 8009210:	f7ff fead 	bl	8008f6e <mqtt_output_append_fixed_header>
          client->cyclic_tick = 0;
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	2200      	movs	r2, #0
 8009218:	801a      	strh	r2, [r3, #0]
 800921a:	e008      	b.n	800922e <mqtt_cyclic_timer+0x106>
        }
      } else {
        client->cyclic_tick++;
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	881b      	ldrh	r3, [r3, #0]
 8009220:	3301      	adds	r3, #1
 8009222:	b29a      	uxth	r2, r3
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	801a      	strh	r2, [r3, #0]
 8009228:	e001      	b.n	800922e <mqtt_cyclic_timer+0x106>
      }
    }
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Timer should not be running in state %d\n", client->conn_state));
    restart_timer = 0;
 800922a:	2300      	movs	r3, #0
 800922c:	73fb      	strb	r3, [r7, #15]
  }
  if (restart_timer) {
 800922e:	7bfb      	ldrb	r3, [r7, #15]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d005      	beq.n	8009240 <mqtt_cyclic_timer+0x118>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, arg);
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	4907      	ldr	r1, [pc, #28]	; (8009254 <mqtt_cyclic_timer+0x12c>)
 8009238:	f241 3088 	movw	r0, #5000	; 0x1388
 800923c:	f009 f88c 	bl	8012358 <sys_timeout>
  }
}
 8009240:	bf00      	nop
 8009242:	3710      	adds	r7, #16
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}
 8009248:	08016b50 	.word	0x08016b50
 800924c:	08016d60 	.word	0x08016d60
 8009250:	08016bc8 	.word	0x08016bc8
 8009254:	08009129 	.word	0x08009129

08009258 <pub_ack_rec_rel_response>:
 * @param qos QoS value
 * @return ERR_OK if successful, ERR_MEM if out of memory
 */
static err_t
pub_ack_rec_rel_response(mqtt_client_t *client, u8_t msg, u16_t pkt_id, u8_t qos)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b086      	sub	sp, #24
 800925c:	af02      	add	r7, sp, #8
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	4608      	mov	r0, r1
 8009262:	4611      	mov	r1, r2
 8009264:	461a      	mov	r2, r3
 8009266:	4603      	mov	r3, r0
 8009268:	70fb      	strb	r3, [r7, #3]
 800926a:	460b      	mov	r3, r1
 800926c:	803b      	strh	r3, [r7, #0]
 800926e:	4613      	mov	r3, r2
 8009270:	70bb      	strb	r3, [r7, #2]
  err_t err = ERR_OK;
 8009272:	2300      	movs	r3, #0
 8009274:	73fb      	strb	r3, [r7, #15]
  if (mqtt_output_check_space(&client->output, 2)) {
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	33ec      	adds	r3, #236	; 0xec
 800927a:	2102      	movs	r1, #2
 800927c:	4618      	mov	r0, r3
 800927e:	f7ff fec1 	bl	8009004 <mqtt_output_check_space>
 8009282:	4603      	mov	r3, r0
 8009284:	2b00      	cmp	r3, #0
 8009286:	d01c      	beq.n	80092c2 <pub_ack_rec_rel_response+0x6a>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800928e:	78bb      	ldrb	r3, [r7, #2]
 8009290:	78f9      	ldrb	r1, [r7, #3]
 8009292:	2202      	movs	r2, #2
 8009294:	9201      	str	r2, [sp, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	9200      	str	r2, [sp, #0]
 800929a:	2200      	movs	r2, #0
 800929c:	f7ff fe67 	bl	8008f6e <mqtt_output_append_fixed_header>
    mqtt_output_append_u16(&client->output, pkt_id);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	33ec      	adds	r3, #236	; 0xec
 80092a4:	883a      	ldrh	r2, [r7, #0]
 80092a6:	4611      	mov	r1, r2
 80092a8:	4618      	mov	r0, r3
 80092aa:	f7ff fdfe 	bl	8008eaa <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	4619      	mov	r1, r3
 80092ba:	4610      	mov	r0, r2
 80092bc:	f7ff fb94 	bl	80089e8 <mqtt_output_send>
 80092c0:	e001      	b.n	80092c6 <pub_ack_rec_rel_response+0x6e>
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("pub_ack_rec_rel_response: OOM creating response: %s with pkt_id: %d\n",
                                   mqtt_msg_type_to_str(msg), pkt_id));
    err = ERR_MEM;
 80092c2:	23ff      	movs	r3, #255	; 0xff
 80092c4:	73fb      	strb	r3, [r7, #15]
  }
  return err;
 80092c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <mqtt_incomming_suback>:
 * @param r Matching request
 * @param result Result code from server
 */
static void
mqtt_incomming_suback(struct mqtt_request_t *r, u8_t result)
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b082      	sub	sp, #8
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
 80092da:	460b      	mov	r3, r1
 80092dc:	70fb      	strb	r3, [r7, #3]
  if (r->cb != NULL) {
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00c      	beq.n	8009300 <mqtt_incomming_suback+0x2e>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	6890      	ldr	r0, [r2, #8]
 80092ee:	78fa      	ldrb	r2, [r7, #3]
 80092f0:	2a02      	cmp	r2, #2
 80092f2:	d801      	bhi.n	80092f8 <mqtt_incomming_suback+0x26>
 80092f4:	2200      	movs	r2, #0
 80092f6:	e001      	b.n	80092fc <mqtt_incomming_suback+0x2a>
 80092f8:	f06f 020c 	mvn.w	r2, #12
 80092fc:	4611      	mov	r1, r2
 80092fe:	4798      	blx	r3
  }
}
 8009300:	bf00      	nop
 8009302:	3708      	adds	r7, #8
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <mqtt_message_received>:
 * @param length length received part
 * @param remaining_length Remaining length of complete message
 */
static mqtt_connection_status_t
mqtt_message_received(mqtt_client_t *client, u8_t fixed_hdr_idx, u16_t length, u32_t remaining_length)
{
 8009308:	b590      	push	{r4, r7, lr}
 800930a:	b08f      	sub	sp, #60	; 0x3c
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	607b      	str	r3, [r7, #4]
 8009312:	460b      	mov	r3, r1
 8009314:	72fb      	strb	r3, [r7, #11]
 8009316:	4613      	mov	r3, r2
 8009318:	813b      	strh	r3, [r7, #8]
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 800931a:	2300      	movs	r3, #0
 800931c:	86fb      	strh	r3, [r7, #54]	; 0x36

  u8_t *var_hdr_payload = client->rx_buffer + fixed_hdr_idx;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8009324:	7afb      	ldrb	r3, [r7, #11]
 8009326:	4413      	add	r3, r2
 8009328:	62fb      	str	r3, [r7, #44]	; 0x2c
  size_t var_hdr_payload_bufsize = sizeof(client->rx_buffer) - fixed_hdr_idx;
 800932a:	7afb      	ldrb	r3, [r7, #11]
 800932c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8009330:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Control packet type */
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8009338:	091b      	lsrs	r3, r3, #4
 800933a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u16_t pkt_id = 0;
 800933e:	2300      	movs	r3, #0
 8009340:	84bb      	strh	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN", client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009346:	2b7f      	cmp	r3, #127	; 0x7f
 8009348:	d906      	bls.n	8009358 <mqtt_message_received+0x50>
 800934a:	4b9c      	ldr	r3, [pc, #624]	; (80095bc <mqtt_message_received+0x2b4>)
 800934c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8009350:	499b      	ldr	r1, [pc, #620]	; (80095c0 <mqtt_message_received+0x2b8>)
 8009352:	489c      	ldr	r0, [pc, #624]	; (80095c4 <mqtt_message_received+0x2bc>)
 8009354:	f00b ffee 	bl	8015334 <iprintf>
  LWIP_ASSERT("fixed_hdr_idx <= client->msg_idx", fixed_hdr_idx <= client->msg_idx);
 8009358:	7afa      	ldrb	r2, [r7, #11]
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800935e:	429a      	cmp	r2, r3
 8009360:	d906      	bls.n	8009370 <mqtt_message_received+0x68>
 8009362:	4b96      	ldr	r3, [pc, #600]	; (80095bc <mqtt_message_received+0x2b4>)
 8009364:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 8009368:	4997      	ldr	r1, [pc, #604]	; (80095c8 <mqtt_message_received+0x2c0>)
 800936a:	4896      	ldr	r0, [pc, #600]	; (80095c4 <mqtt_message_received+0x2bc>)
 800936c:	f00b ffe2 	bl	8015334 <iprintf>
  LWIP_ERROR("buffer length mismatch", fixed_hdr_idx + length <= MQTT_VAR_HEADER_BUFFER_LEN,
 8009370:	7afa      	ldrb	r2, [r7, #11]
 8009372:	893b      	ldrh	r3, [r7, #8]
 8009374:	4413      	add	r3, r2
 8009376:	2b80      	cmp	r3, #128	; 0x80
 8009378:	dd09      	ble.n	800938e <mqtt_message_received+0x86>
 800937a:	4b90      	ldr	r3, [pc, #576]	; (80095bc <mqtt_message_received+0x2b4>)
 800937c:	f240 22ad 	movw	r2, #685	; 0x2ad
 8009380:	4992      	ldr	r1, [pc, #584]	; (80095cc <mqtt_message_received+0x2c4>)
 8009382:	4890      	ldr	r0, [pc, #576]	; (80095c4 <mqtt_message_received+0x2bc>)
 8009384:	f00b ffd6 	bl	8015334 <iprintf>
 8009388:	f44f 7380 	mov.w	r3, #256	; 0x100
 800938c:	e16e      	b.n	800966c <mqtt_message_received+0x364>
             return MQTT_CONNECT_DISCONNECTED);

  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 800938e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009392:	2b02      	cmp	r3, #2
 8009394:	d123      	bne.n	80093de <mqtt_message_received+0xd6>
    if (client->conn_state == MQTT_CONNECTING) {
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	7a9b      	ldrb	r3, [r3, #10]
 800939a:	2b02      	cmp	r3, #2
 800939c:	f040 8151 	bne.w	8009642 <mqtt_message_received+0x33a>
      if (length < 2) {
 80093a0:	893b      	ldrh	r3, [r7, #8]
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	f240 814f 	bls.w	8009646 <mqtt_message_received+0x33e>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short CONNACK message\n"));
        goto out_disconnect;
      }
      /* Get result code from CONNACK */
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 80093a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093aa:	3301      	adds	r3, #1
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	86fb      	strh	r3, [r7, #54]	; 0x36
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: Connect response code %d\n", res));
      if (res == MQTT_CONNECT_ACCEPTED) {
 80093b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	f040 8145 	bne.w	8009642 <mqtt_message_received+0x33a>
        /* Reset cyclic_tick when changing to connected state */
        client->cyclic_tick = 0;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2200      	movs	r2, #0
 80093bc:	801a      	strh	r2, [r3, #0]
        client->conn_state = MQTT_CONNECTED;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2203      	movs	r2, #3
 80093c2:	729a      	strb	r2, [r3, #10]
        /* Notify upper layer */
        if (client->connect_cb != 0) {
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	695b      	ldr	r3, [r3, #20]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f000 813a 	beq.w	8009642 <mqtt_message_received+0x33a>
          client->connect_cb(client, client->connect_arg, res);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	695b      	ldr	r3, [r3, #20]
 80093d2:	68fa      	ldr	r2, [r7, #12]
 80093d4:	6911      	ldr	r1, [r2, #16]
 80093d6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80093d8:	68f8      	ldr	r0, [r7, #12]
 80093da:	4798      	blx	r3
 80093dc:	e131      	b.n	8009642 <mqtt_message_received+0x33a>
        }
      }
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Received CONNACK in connected state\n"));
    }
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 80093de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093e2:	2b0d      	cmp	r3, #13
 80093e4:	f000 812d 	beq.w	8009642 <mqtt_message_received+0x33a>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ( "mqtt_message_received: Received PINGRESP from server\n"));

  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 80093e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093ec:	2b03      	cmp	r3, #3
 80093ee:	f040 80c0 	bne.w	8009572 <mqtt_message_received+0x26a>
    u16_t payload_offset = 0;
 80093f2:	2300      	movs	r3, #0
 80093f4:	86bb      	strh	r3, [r7, #52]	; 0x34
    u16_t payload_length = length;
 80093f6:	893b      	ldrh	r3, [r7, #8]
 80093f8:	867b      	strh	r3, [r7, #50]	; 0x32
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8009400:	105b      	asrs	r3, r3, #1
 8009402:	b2db      	uxtb	r3, r3
 8009404:	f003 0303 	and.w	r3, r3, #3
 8009408:	77fb      	strb	r3, [r7, #31]

    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800940e:	2b80      	cmp	r3, #128	; 0x80
 8009410:	d87d      	bhi.n	800950e <mqtt_message_received+0x206>
      /* Should have topic and pkt id*/
      u8_t *topic;
      u16_t after_topic;
      u8_t bkp;
      u16_t topic_len;
      u16_t qos_len = (qos ? 2U : 0U);
 8009412:	7ffb      	ldrb	r3, [r7, #31]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d001      	beq.n	800941c <mqtt_message_received+0x114>
 8009418:	2302      	movs	r3, #2
 800941a:	e000      	b.n	800941e <mqtt_message_received+0x116>
 800941c:	2300      	movs	r3, #0
 800941e:	83bb      	strh	r3, [r7, #28]
      if (length < 2 + qos_len) {
 8009420:	8bbb      	ldrh	r3, [r7, #28]
 8009422:	1c5a      	adds	r2, r3, #1
 8009424:	893b      	ldrh	r3, [r7, #8]
 8009426:	429a      	cmp	r2, r3
 8009428:	f280 810f 	bge.w	800964a <mqtt_message_received+0x342>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet\n"));
        goto out_disconnect;
      }
      topic_len = var_hdr_payload[0];
 800942c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	837b      	strh	r3, [r7, #26]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 8009432:	8b7b      	ldrh	r3, [r7, #26]
 8009434:	021b      	lsls	r3, r3, #8
 8009436:	b29a      	uxth	r2, r3
 8009438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800943a:	3301      	adds	r3, #1
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	b29b      	uxth	r3, r3
 8009440:	4413      	add	r3, r2
 8009442:	837b      	strh	r3, [r7, #26]
      if ((topic_len > length - (2 + qos_len)) ||
 8009444:	8b7a      	ldrh	r2, [r7, #26]
 8009446:	8939      	ldrh	r1, [r7, #8]
 8009448:	8bbb      	ldrh	r3, [r7, #28]
 800944a:	3302      	adds	r3, #2
 800944c:	1acb      	subs	r3, r1, r3
 800944e:	429a      	cmp	r2, r3
 8009450:	f300 80fd 	bgt.w	800964e <mqtt_message_received+0x346>
          (topic_len > var_hdr_payload_bufsize - (2 + qos_len))) {
 8009454:	8b7a      	ldrh	r2, [r7, #26]
 8009456:	8bbb      	ldrh	r3, [r7, #28]
 8009458:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800945a:	1acb      	subs	r3, r1, r3
 800945c:	3b02      	subs	r3, #2
      if ((topic_len > length - (2 + qos_len)) ||
 800945e:	429a      	cmp	r2, r3
 8009460:	f200 80f5 	bhi.w	800964e <mqtt_message_received+0x346>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (topic)\n"));
        goto out_disconnect;
      }

      topic = var_hdr_payload + 2;
 8009464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009466:	3302      	adds	r3, #2
 8009468:	617b      	str	r3, [r7, #20]
      after_topic = 2 + topic_len;
 800946a:	8b7b      	ldrh	r3, [r7, #26]
 800946c:	3302      	adds	r3, #2
 800946e:	863b      	strh	r3, [r7, #48]	; 0x30
      /* Check buffer length, add one byte even for QoS 0 so that zero termination will fit */
      if ((after_topic + (qos ? 2U : 1U)) > var_hdr_payload_bufsize) {
 8009470:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009472:	7ffa      	ldrb	r2, [r7, #31]
 8009474:	2a00      	cmp	r2, #0
 8009476:	d001      	beq.n	800947c <mqtt_message_received+0x174>
 8009478:	2202      	movs	r2, #2
 800947a:	e000      	b.n	800947e <mqtt_message_received+0x176>
 800947c:	2201      	movs	r2, #1
 800947e:	4413      	add	r3, r2
 8009480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009482:	429a      	cmp	r2, r3
 8009484:	f0c0 80e5 	bcc.w	8009652 <mqtt_message_received+0x34a>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Receive buffer can not fit topic + pkt_id\n"));
        goto out_disconnect;
      }

      /* id for QoS 1 and 2 */
      if (qos > 0) {
 8009488:	7ffb      	ldrb	r3, [r7, #31]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d01a      	beq.n	80094c4 <mqtt_message_received+0x1bc>
        if (length < after_topic + 2U) {
 800948e:	893a      	ldrh	r2, [r7, #8]
 8009490:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009492:	3302      	adds	r3, #2
 8009494:	429a      	cmp	r2, r3
 8009496:	f0c0 80de 	bcc.w	8009656 <mqtt_message_received+0x34e>
          LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (after_topic)\n"));
          goto out_disconnect;
        }
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 800949a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800949c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800949e:	4413      	add	r3, r2
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	021b      	lsls	r3, r3, #8
 80094a6:	b29a      	uxth	r2, r3
 80094a8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80094aa:	3301      	adds	r3, #1
 80094ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094ae:	440b      	add	r3, r1
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	b29b      	uxth	r3, r3
 80094b4:	4413      	add	r3, r2
 80094b6:	b29a      	uxth	r2, r3
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	811a      	strh	r2, [r3, #8]
        after_topic += 2;
 80094bc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80094be:	3302      	adds	r3, #2
 80094c0:	863b      	strh	r3, [r7, #48]	; 0x30
 80094c2:	e002      	b.n	80094ca <mqtt_message_received+0x1c2>
      } else {
        client->inpub_pkt_id = 0;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2200      	movs	r2, #0
 80094c8:	811a      	strh	r2, [r3, #8]
      }
      /* Take backup of byte after topic */
      bkp = topic[topic_len];
 80094ca:	8b7b      	ldrh	r3, [r7, #26]
 80094cc:	697a      	ldr	r2, [r7, #20]
 80094ce:	4413      	add	r3, r2
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	74fb      	strb	r3, [r7, #19]
      /* Zero terminate string */
      topic[topic_len] = 0;
 80094d4:	8b7b      	ldrh	r3, [r7, #26]
 80094d6:	697a      	ldr	r2, [r7, #20]
 80094d8:	4413      	add	r3, r2
 80094da:	2200      	movs	r2, #0
 80094dc:	701a      	strb	r2, [r3, #0]
      /* Payload data remaining in receive buffer */
      payload_length = length - after_topic;
 80094de:	893a      	ldrh	r2, [r7, #8]
 80094e0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80094e2:	1ad3      	subs	r3, r2, r3
 80094e4:	867b      	strh	r3, [r7, #50]	; 0x32
      payload_offset = after_topic;
 80094e6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80094e8:	86bb      	strh	r3, [r7, #52]	; 0x34

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Received message with QoS %d at topic: %s, payload length %"U32_F"\n",
                                     qos, topic, remaining_length + payload_length));
      if (client->pub_cb != NULL) {
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d008      	beq.n	8009504 <mqtt_message_received+0x1fc>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094f6:	68fa      	ldr	r2, [r7, #12]
 80094f8:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 80094fa:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	440a      	add	r2, r1
 8009500:	6979      	ldr	r1, [r7, #20]
 8009502:	4798      	blx	r3
      }
      /* Restore byte after topic */
      topic[topic_len] = bkp;
 8009504:	8b7b      	ldrh	r3, [r7, #26]
 8009506:	697a      	ldr	r2, [r7, #20]
 8009508:	4413      	add	r3, r2
 800950a:	7cfa      	ldrb	r2, [r7, #19]
 800950c:	701a      	strb	r2, [r3, #0]
    }
    if (payload_length > 0 || remaining_length == 0) {
 800950e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009510:	2b00      	cmp	r3, #0
 8009512:	d103      	bne.n	800951c <mqtt_message_received+0x214>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2b00      	cmp	r3, #0
 8009518:	f040 8093 	bne.w	8009642 <mqtt_message_received+0x33a>
      if (length < (size_t)(payload_offset + payload_length)) {
 800951c:	893b      	ldrh	r3, [r7, #8]
 800951e:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8009520:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8009522:	440a      	add	r2, r1
 8009524:	4293      	cmp	r3, r2
 8009526:	f0c0 8098 	bcc.w	800965a <mqtt_message_received+0x352>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short packet (payload)\n"));
        goto out_disconnect;
      }
      client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8009532:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009536:	18d1      	adds	r1, r2, r3
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2b00      	cmp	r3, #0
 800953c:	bf0c      	ite	eq
 800953e:	2301      	moveq	r3, #1
 8009540:	2300      	movne	r3, #0
 8009542:	b2db      	uxtb	r3, r3
 8009544:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8009546:	47a0      	blx	r4
      /* Reply if QoS > 0 */
      if (remaining_length == 0 && qos > 0) {
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d179      	bne.n	8009642 <mqtt_message_received+0x33a>
 800954e:	7ffb      	ldrb	r3, [r7, #31]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d076      	beq.n	8009642 <mqtt_message_received+0x33a>
        /* Send PUBACK for QoS 1 or PUBREC for QoS 2 */
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 8009554:	7ffb      	ldrb	r3, [r7, #31]
 8009556:	2b01      	cmp	r3, #1
 8009558:	d101      	bne.n	800955e <mqtt_message_received+0x256>
 800955a:	2304      	movs	r3, #4
 800955c:	e000      	b.n	8009560 <mqtt_message_received+0x258>
 800955e:	2305      	movs	r3, #5
 8009560:	74bb      	strb	r3, [r7, #18]
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Sending publish response: %s with pkt_id: %d\n",
                                       mqtt_msg_type_to_str(resp_msg), client->inpub_pkt_id));
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	891a      	ldrh	r2, [r3, #8]
 8009566:	7cb9      	ldrb	r1, [r7, #18]
 8009568:	2300      	movs	r3, #0
 800956a:	68f8      	ldr	r0, [r7, #12]
 800956c:	f7ff fe74 	bl	8009258 <pub_ack_rec_rel_response>
 8009570:	e067      	b.n	8009642 <mqtt_message_received+0x33a>
      }
    }
  } else {
    /* Get packet identifier */
    pkt_id = (u16_t)var_hdr_payload[0] << 8;
 8009572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	b29b      	uxth	r3, r3
 8009578:	021b      	lsls	r3, r3, #8
 800957a:	84bb      	strh	r3, [r7, #36]	; 0x24
    pkt_id |= (u16_t)var_hdr_payload[1];
 800957c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800957e:	3301      	adds	r3, #1
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	b29a      	uxth	r2, r3
 8009584:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009586:	4313      	orrs	r3, r2
 8009588:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (pkt_id == 0) {
 800958a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800958c:	2b00      	cmp	r3, #0
 800958e:	d066      	beq.n	800965e <mqtt_message_received+0x356>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Got message with illegal packet identifier: 0\n"));
      goto out_disconnect;
    }
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 8009590:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009594:	2b05      	cmp	r3, #5
 8009596:	d106      	bne.n	80095a6 <mqtt_message_received+0x29e>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREC, sending PUBREL with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 8009598:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800959a:	2301      	movs	r3, #1
 800959c:	2106      	movs	r1, #6
 800959e:	68f8      	ldr	r0, [r7, #12]
 80095a0:	f7ff fe5a 	bl	8009258 <pub_ack_rec_rel_response>
 80095a4:	e04d      	b.n	8009642 <mqtt_message_received+0x33a>

    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 80095a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095aa:	2b06      	cmp	r3, #6
 80095ac:	d110      	bne.n	80095d0 <mqtt_message_received+0x2c8>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREL, sending PUBCOMP response with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 80095ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80095b0:	2300      	movs	r3, #0
 80095b2:	2107      	movs	r1, #7
 80095b4:	68f8      	ldr	r0, [r7, #12]
 80095b6:	f7ff fe4f 	bl	8009258 <pub_ack_rec_rel_response>
 80095ba:	e042      	b.n	8009642 <mqtt_message_received+0x33a>
 80095bc:	08016b50 	.word	0x08016b50
 80095c0:	08016d84 	.word	0x08016d84
 80095c4:	08016bc8 	.word	0x08016bc8
 80095c8:	08016db4 	.word	0x08016db4
 80095cc:	08016dd8 	.word	0x08016dd8

    } else if (pkt_type == MQTT_MSG_TYPE_SUBACK || pkt_type == MQTT_MSG_TYPE_UNSUBACK ||
 80095d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095d4:	2b09      	cmp	r3, #9
 80095d6:	d00b      	beq.n	80095f0 <mqtt_message_received+0x2e8>
 80095d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095dc:	2b0b      	cmp	r3, #11
 80095de:	d007      	beq.n	80095f0 <mqtt_message_received+0x2e8>
 80095e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095e4:	2b07      	cmp	r3, #7
 80095e6:	d003      	beq.n	80095f0 <mqtt_message_received+0x2e8>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 80095e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095ec:	2b04      	cmp	r3, #4
 80095ee:	d138      	bne.n	8009662 <mqtt_message_received+0x35a>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	3318      	adds	r3, #24
 80095f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80095f6:	4611      	mov	r1, r2
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7ff fb4b 	bl	8008c94 <mqtt_take_request>
 80095fe:	6238      	str	r0, [r7, #32]
      if (r != NULL) {
 8009600:	6a3b      	ldr	r3, [r7, #32]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d01c      	beq.n	8009640 <mqtt_message_received+0x338>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: %s response with id %d\n", mqtt_msg_type_to_str(pkt_type), pkt_id));
        if (pkt_type == MQTT_MSG_TYPE_SUBACK) {
 8009606:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800960a:	2b09      	cmp	r3, #9
 800960c:	d10a      	bne.n	8009624 <mqtt_message_received+0x31c>
          if (length < 3) {
 800960e:	893b      	ldrh	r3, [r7, #8]
 8009610:	2b02      	cmp	r3, #2
 8009612:	d928      	bls.n	8009666 <mqtt_message_received+0x35e>
            LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: To small SUBACK packet\n"));
            goto out_disconnect;
          } else {
            mqtt_incomming_suback(r, var_hdr_payload[2]);
 8009614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009616:	3302      	adds	r3, #2
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	4619      	mov	r1, r3
 800961c:	6a38      	ldr	r0, [r7, #32]
 800961e:	f7ff fe58 	bl	80092d2 <mqtt_incomming_suback>
 8009622:	e00a      	b.n	800963a <mqtt_message_received+0x332>
          }
        } else if (r->cb != NULL) {
 8009624:	6a3b      	ldr	r3, [r7, #32]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d006      	beq.n	800963a <mqtt_message_received+0x332>
          r->cb(r->arg, ERR_OK);
 800962c:	6a3b      	ldr	r3, [r7, #32]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	6a3a      	ldr	r2, [r7, #32]
 8009632:	6892      	ldr	r2, [r2, #8]
 8009634:	2100      	movs	r1, #0
 8009636:	4610      	mov	r0, r2
 8009638:	4798      	blx	r3
        }
        mqtt_delete_request(r);
 800963a:	6a38      	ldr	r0, [r7, #32]
 800963c:	f7ff fb1a 	bl	8008c74 <mqtt_delete_request>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 8009640:	bf00      	nop
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ( "mqtt_message_received: Received unknown message type: %d\n", pkt_type));
      goto out_disconnect;
    }
  }
  return res;
 8009642:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009644:	e012      	b.n	800966c <mqtt_message_received+0x364>
        goto out_disconnect;
 8009646:	bf00      	nop
 8009648:	e00e      	b.n	8009668 <mqtt_message_received+0x360>
        goto out_disconnect;
 800964a:	bf00      	nop
 800964c:	e00c      	b.n	8009668 <mqtt_message_received+0x360>
        goto out_disconnect;
 800964e:	bf00      	nop
 8009650:	e00a      	b.n	8009668 <mqtt_message_received+0x360>
        goto out_disconnect;
 8009652:	bf00      	nop
 8009654:	e008      	b.n	8009668 <mqtt_message_received+0x360>
          goto out_disconnect;
 8009656:	bf00      	nop
 8009658:	e006      	b.n	8009668 <mqtt_message_received+0x360>
        goto out_disconnect;
 800965a:	bf00      	nop
 800965c:	e004      	b.n	8009668 <mqtt_message_received+0x360>
      goto out_disconnect;
 800965e:	bf00      	nop
 8009660:	e002      	b.n	8009668 <mqtt_message_received+0x360>
      goto out_disconnect;
 8009662:	bf00      	nop
 8009664:	e000      	b.n	8009668 <mqtt_message_received+0x360>
            goto out_disconnect;
 8009666:	bf00      	nop
out_disconnect:
  return MQTT_CONNECT_DISCONNECTED;
 8009668:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 800966c:	4618      	mov	r0, r3
 800966e:	373c      	adds	r7, #60	; 0x3c
 8009670:	46bd      	mov	sp, r7
 8009672:	bd90      	pop	{r4, r7, pc}

08009674 <mqtt_parse_incoming>:
 * @param p PBUF chain of received data
 * @return Connection status
 */
static mqtt_connection_status_t
mqtt_parse_incoming(mqtt_client_t *client, struct pbuf *p)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b088      	sub	sp, #32
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
  u16_t in_offset = 0;
 800967e:	2300      	movs	r3, #0
 8009680:	83fb      	strh	r3, [r7, #30]
  u32_t msg_rem_len = 0;
 8009682:	2300      	movs	r3, #0
 8009684:	61bb      	str	r3, [r7, #24]
  u8_t fixed_hdr_idx = 0;
 8009686:	2300      	movs	r3, #0
 8009688:	75fb      	strb	r3, [r7, #23]
  u8_t b = 0;
 800968a:	2300      	movs	r3, #0
 800968c:	75bb      	strb	r3, [r7, #22]

  while (p->tot_len > in_offset) {
 800968e:	e0bc      	b.n	800980a <mqtt_parse_incoming+0x196>
    /* We ALWAYS parse the header here first. Even if the header was not
       included in this segment, we re-parse it here by buffering it in
       client->rx_buffer. client->msg_idx keeps track of this. */
    if ((fixed_hdr_idx < 2) || ((b & 0x80) != 0)) {
 8009690:	7dfb      	ldrb	r3, [r7, #23]
 8009692:	2b01      	cmp	r3, #1
 8009694:	d903      	bls.n	800969e <mqtt_parse_incoming+0x2a>
 8009696:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800969a:	2b00      	cmp	r3, #0
 800969c:	da4d      	bge.n	800973a <mqtt_parse_incoming+0xc6>

      if (fixed_hdr_idx < client->msg_idx) {
 800969e:	7dfa      	ldrb	r2, [r7, #23]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d206      	bcs.n	80096b6 <mqtt_parse_incoming+0x42>
        /* parse header from old pbuf (buffered in client->rx_buffer) */
        b = client->rx_buffer[fixed_hdr_idx];
 80096a8:	7dfb      	ldrb	r3, [r7, #23]
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	4413      	add	r3, r2
 80096ae:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80096b2:	75bb      	strb	r3, [r7, #22]
 80096b4:	e012      	b.n	80096dc <mqtt_parse_incoming+0x68>
      } else {
        /* parse header from this pbuf and save it in client->rx_buffer in case
           it comes in segmented */
        b = pbuf_get_at(p, in_offset++);
 80096b6:	8bfb      	ldrh	r3, [r7, #30]
 80096b8:	1c5a      	adds	r2, r3, #1
 80096ba:	83fa      	strh	r2, [r7, #30]
 80096bc:	4619      	mov	r1, r3
 80096be:	6838      	ldr	r0, [r7, #0]
 80096c0:	f002 fcd2 	bl	800c068 <pbuf_get_at>
 80096c4:	4603      	mov	r3, r0
 80096c6:	75bb      	strb	r3, [r7, #22]
        client->rx_buffer[client->msg_idx++] = b;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096cc:	1c59      	adds	r1, r3, #1
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	6691      	str	r1, [r2, #104]	; 0x68
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	4413      	add	r3, r2
 80096d6:	7dba      	ldrb	r2, [r7, #22]
 80096d8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      }
      fixed_hdr_idx++;
 80096dc:	7dfb      	ldrb	r3, [r7, #23]
 80096de:	3301      	adds	r3, #1
 80096e0:	75fb      	strb	r3, [r7, #23]

      if (fixed_hdr_idx >= 2) {
 80096e2:	7dfb      	ldrb	r3, [r7, #23]
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	f240 8090 	bls.w	800980a <mqtt_parse_incoming+0x196>
        /* fixed header contains at least 2 bytes but can contain more, depending on
           'remaining length'. All bytes but the last of this have 0x80 set to
           indicate more bytes are coming. */
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_idx - 2) * 7);
 80096ea:	7dbb      	ldrb	r3, [r7, #22]
 80096ec:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 80096f0:	7dfb      	ldrb	r3, [r7, #23]
 80096f2:	1e9a      	subs	r2, r3, #2
 80096f4:	4613      	mov	r3, r2
 80096f6:	00db      	lsls	r3, r3, #3
 80096f8:	1a9b      	subs	r3, r3, r2
 80096fa:	fa01 f303 	lsl.w	r3, r1, r3
 80096fe:	69ba      	ldr	r2, [r7, #24]
 8009700:	4313      	orrs	r3, r2
 8009702:	61bb      	str	r3, [r7, #24]
        if ((b & 0x80) == 0) {
 8009704:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8009708:	2b00      	cmp	r3, #0
 800970a:	db7e      	blt.n	800980a <mqtt_parse_incoming+0x196>
          /* fixed header is done */
          LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: Remaining length after fixed header: %"U32_F"\n", msg_rem_len));
          if (msg_rem_len == 0) {
 800970c:	69bb      	ldr	r3, [r7, #24]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d10b      	bne.n	800972a <mqtt_parse_incoming+0xb6>
            /* Complete message with no extra headers of payload received */
            mqtt_message_received(client, fixed_hdr_idx, 0, 0);
 8009712:	7df9      	ldrb	r1, [r7, #23]
 8009714:	2300      	movs	r3, #0
 8009716:	2200      	movs	r2, #0
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f7ff fdf5 	bl	8009308 <mqtt_message_received>
            client->msg_idx = 0;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2200      	movs	r2, #0
 8009722:	669a      	str	r2, [r3, #104]	; 0x68
            fixed_hdr_idx = 0;
 8009724:	2300      	movs	r3, #0
 8009726:	75fb      	strb	r3, [r7, #23]
 8009728:	e06f      	b.n	800980a <mqtt_parse_incoming+0x196>
          } else {
            /* Bytes remaining in message (changes remaining length if this is
               not the first segment of this message) */
            msg_rem_len = (msg_rem_len + fixed_hdr_idx) - client->msg_idx;
 800972a:	7dfa      	ldrb	r2, [r7, #23]
 800972c:	69bb      	ldr	r3, [r7, #24]
 800972e:	441a      	add	r2, r3
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009734:	1ad3      	subs	r3, r2, r3
 8009736:	61bb      	str	r3, [r7, #24]
      if (fixed_hdr_idx >= 2) {
 8009738:	e067      	b.n	800980a <mqtt_parse_incoming+0x196>
      }
    } else {
      /* Fixed header has been parsed, parse variable header */
      u16_t cpy_len, cpy_start, buffer_space;

      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800973e:	7dfb      	ldrb	r3, [r7, #23]
 8009740:	1ad3      	subs	r3, r2, r3
 8009742:	7dfa      	ldrb	r2, [r7, #23]
 8009744:	f1c2 0280 	rsb	r2, r2, #128	; 0x80
 8009748:	fbb3 f1f2 	udiv	r1, r3, r2
 800974c:	fb02 f201 	mul.w	r2, r2, r1
 8009750:	1a9b      	subs	r3, r3, r2
 8009752:	b29a      	uxth	r2, r3
 8009754:	7dfb      	ldrb	r3, [r7, #23]
 8009756:	b29b      	uxth	r3, r3
 8009758:	4413      	add	r3, r2
 800975a:	827b      	strh	r3, [r7, #18]

      /* Allow to copy the lesser one of available length in input data or bytes remaining in message */
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	891a      	ldrh	r2, [r3, #8]
 8009760:	8bfb      	ldrh	r3, [r7, #30]
 8009762:	1ad3      	subs	r3, r2, r3
 8009764:	b29b      	uxth	r3, r3
 8009766:	461a      	mov	r2, r3
 8009768:	69bb      	ldr	r3, [r7, #24]
 800976a:	4293      	cmp	r3, r2
 800976c:	d905      	bls.n	800977a <mqtt_parse_incoming+0x106>
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	891a      	ldrh	r2, [r3, #8]
 8009772:	8bfb      	ldrh	r3, [r7, #30]
 8009774:	1ad3      	subs	r3, r2, r3
 8009776:	b29b      	uxth	r3, r3
 8009778:	e001      	b.n	800977e <mqtt_parse_incoming+0x10a>
 800977a:	69bb      	ldr	r3, [r7, #24]
 800977c:	b29b      	uxth	r3, r3
 800977e:	82bb      	strh	r3, [r7, #20]

      /* Limit to available space in buffer */
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - cpy_start;
 8009780:	8a7b      	ldrh	r3, [r7, #18]
 8009782:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8009786:	823b      	strh	r3, [r7, #16]
      if (cpy_len > buffer_space) {
 8009788:	8aba      	ldrh	r2, [r7, #20]
 800978a:	8a3b      	ldrh	r3, [r7, #16]
 800978c:	429a      	cmp	r2, r3
 800978e:	d901      	bls.n	8009794 <mqtt_parse_incoming+0x120>
        cpy_len = buffer_space;
 8009790:	8a3b      	ldrh	r3, [r7, #16]
 8009792:	82bb      	strh	r3, [r7, #20]
      }
      pbuf_copy_partial(p, client->rx_buffer + cpy_start, cpy_len, in_offset);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800979a:	8a7b      	ldrh	r3, [r7, #18]
 800979c:	18d1      	adds	r1, r2, r3
 800979e:	8bfb      	ldrh	r3, [r7, #30]
 80097a0:	8aba      	ldrh	r2, [r7, #20]
 80097a2:	6838      	ldr	r0, [r7, #0]
 80097a4:	f002 fb92 	bl	800becc <pbuf_copy_partial>

      /* Advance get and put indexes  */
      client->msg_idx += cpy_len;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80097ac:	8abb      	ldrh	r3, [r7, #20]
 80097ae:	441a      	add	r2, r3
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	669a      	str	r2, [r3, #104]	; 0x68
      in_offset += cpy_len;
 80097b4:	8bfa      	ldrh	r2, [r7, #30]
 80097b6:	8abb      	ldrh	r3, [r7, #20]
 80097b8:	4413      	add	r3, r2
 80097ba:	83fb      	strh	r3, [r7, #30]
      msg_rem_len -= cpy_len;
 80097bc:	8abb      	ldrh	r3, [r7, #20]
 80097be:	69ba      	ldr	r2, [r7, #24]
 80097c0:	1ad3      	subs	r3, r2, r3
 80097c2:	61bb      	str	r3, [r7, #24]

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: msg_idx: %"U32_F", cpy_len: %"U16_F", remaining %"U32_F"\n", client->msg_idx, cpy_len, msg_rem_len));
      if ((msg_rem_len == 0) || (cpy_len == buffer_space)) {
 80097c4:	69bb      	ldr	r3, [r7, #24]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d003      	beq.n	80097d2 <mqtt_parse_incoming+0x15e>
 80097ca:	8aba      	ldrh	r2, [r7, #20]
 80097cc:	8a3b      	ldrh	r3, [r7, #16]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d11b      	bne.n	800980a <mqtt_parse_incoming+0x196>
        /* Whole message received or buffer is full */
        mqtt_connection_status_t res = mqtt_message_received(client, fixed_hdr_idx, (cpy_start + cpy_len) - fixed_hdr_idx, msg_rem_len);
 80097d2:	8a7a      	ldrh	r2, [r7, #18]
 80097d4:	8abb      	ldrh	r3, [r7, #20]
 80097d6:	4413      	add	r3, r2
 80097d8:	b29a      	uxth	r2, r3
 80097da:	7dfb      	ldrb	r3, [r7, #23]
 80097dc:	b29b      	uxth	r3, r3
 80097de:	1ad3      	subs	r3, r2, r3
 80097e0:	b29a      	uxth	r2, r3
 80097e2:	7df9      	ldrb	r1, [r7, #23]
 80097e4:	69bb      	ldr	r3, [r7, #24]
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f7ff fd8e 	bl	8009308 <mqtt_message_received>
 80097ec:	4603      	mov	r3, r0
 80097ee:	81fb      	strh	r3, [r7, #14]
        if (res != MQTT_CONNECT_ACCEPTED) {
 80097f0:	89fb      	ldrh	r3, [r7, #14]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d001      	beq.n	80097fa <mqtt_parse_incoming+0x186>
          return res;
 80097f6:	89fb      	ldrh	r3, [r7, #14]
 80097f8:	e00e      	b.n	8009818 <mqtt_parse_incoming+0x1a4>
        }
        if (msg_rem_len == 0) {
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d104      	bne.n	800980a <mqtt_parse_incoming+0x196>
          /* Reset parser state */
          client->msg_idx = 0;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	669a      	str	r2, [r3, #104]	; 0x68
          /* msg_tot_len = 0; */
          fixed_hdr_idx = 0;
 8009806:	2300      	movs	r3, #0
 8009808:	75fb      	strb	r3, [r7, #23]
  while (p->tot_len > in_offset) {
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	891b      	ldrh	r3, [r3, #8]
 800980e:	8bfa      	ldrh	r2, [r7, #30]
 8009810:	429a      	cmp	r2, r3
 8009812:	f4ff af3d 	bcc.w	8009690 <mqtt_parse_incoming+0x1c>
        }
      }
    }
  }
  return MQTT_CONNECT_ACCEPTED;
 8009816:	2300      	movs	r3, #0
}
 8009818:	4618      	mov	r0, r3
 800981a:	3720      	adds	r7, #32
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <mqtt_tcp_recv_cb>:
 * @param err Passed as return value if not ERR_OK
 * @return ERR_OK or err passed into callback
 */
static err_t
mqtt_tcp_recv_cb(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b086      	sub	sp, #24
 8009824:	af00      	add	r7, sp, #0
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	60b9      	str	r1, [r7, #8]
 800982a:	607a      	str	r2, [r7, #4]
 800982c:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d106      	bne.n	8009846 <mqtt_tcp_recv_cb+0x26>
 8009838:	4b24      	ldr	r3, [pc, #144]	; (80098cc <mqtt_tcp_recv_cb+0xac>)
 800983a:	f240 32a7 	movw	r2, #935	; 0x3a7
 800983e:	4924      	ldr	r1, [pc, #144]	; (80098d0 <mqtt_tcp_recv_cb+0xb0>)
 8009840:	4824      	ldr	r0, [pc, #144]	; (80098d4 <mqtt_tcp_recv_cb+0xb4>)
 8009842:	f00b fd77 	bl	8015334 <iprintf>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	68db      	ldr	r3, [r3, #12]
 800984a:	68ba      	ldr	r2, [r7, #8]
 800984c:	429a      	cmp	r2, r3
 800984e:	d006      	beq.n	800985e <mqtt_tcp_recv_cb+0x3e>
 8009850:	4b1e      	ldr	r3, [pc, #120]	; (80098cc <mqtt_tcp_recv_cb+0xac>)
 8009852:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8009856:	4920      	ldr	r1, [pc, #128]	; (80098d8 <mqtt_tcp_recv_cb+0xb8>)
 8009858:	481e      	ldr	r0, [pc, #120]	; (80098d4 <mqtt_tcp_recv_cb+0xb4>)
 800985a:	f00b fd6b 	bl	8015334 <iprintf>

  if (p == NULL) {
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d105      	bne.n	8009870 <mqtt_tcp_recv_cb+0x50>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_recv_cb: Recv pbuf=NULL, remote has closed connection\n"));
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 8009864:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009868:	6978      	ldr	r0, [r7, #20]
 800986a:	f7ff fbfd 	bl	8009068 <mqtt_close>
 800986e:	e027      	b.n	80098c0 <mqtt_tcp_recv_cb+0xa0>
  } else {
    mqtt_connection_status_t res;
    if (err != ERR_OK) {
 8009870:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d005      	beq.n	8009884 <mqtt_tcp_recv_cb+0x64>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_recv_cb: Recv err=%d\n", err));
      pbuf_free(p);
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f002 f931 	bl	800bae0 <pbuf_free>
      return err;
 800987e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009882:	e01e      	b.n	80098c2 <mqtt_tcp_recv_cb+0xa2>
    }

    /* Tell remote that data has been received */
    altcp_recved(pcb, p->tot_len);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	891b      	ldrh	r3, [r3, #8]
 8009888:	4619      	mov	r1, r3
 800988a:	68b8      	ldr	r0, [r7, #8]
 800988c:	f003 f81e 	bl	800c8cc <tcp_recved>
    res = mqtt_parse_incoming(client, p);
 8009890:	6879      	ldr	r1, [r7, #4]
 8009892:	6978      	ldr	r0, [r7, #20]
 8009894:	f7ff feee 	bl	8009674 <mqtt_parse_incoming>
 8009898:	4603      	mov	r3, r0
 800989a:	827b      	strh	r3, [r7, #18]
    pbuf_free(p);
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f002 f91f 	bl	800bae0 <pbuf_free>

    if (res != MQTT_CONNECT_ACCEPTED) {
 80098a2:	8a7b      	ldrh	r3, [r7, #18]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d004      	beq.n	80098b2 <mqtt_tcp_recv_cb+0x92>
      mqtt_close(client, res);
 80098a8:	8a7b      	ldrh	r3, [r7, #18]
 80098aa:	4619      	mov	r1, r3
 80098ac:	6978      	ldr	r0, [r7, #20]
 80098ae:	f7ff fbdb 	bl	8009068 <mqtt_close>
    }
    /* If keep alive functionality is used */
    if (client->keep_alive != 0) {
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	885b      	ldrh	r3, [r3, #2]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d002      	beq.n	80098c0 <mqtt_tcp_recv_cb+0xa0>
      /* Reset server alive watchdog */
      client->server_watchdog = 0;
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	2200      	movs	r2, #0
 80098be:	809a      	strh	r2, [r3, #4]
    }

  }
  return ERR_OK;
 80098c0:	2300      	movs	r3, #0
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3718      	adds	r7, #24
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}
 80098ca:	bf00      	nop
 80098cc:	08016b50 	.word	0x08016b50
 80098d0:	08016df0 	.word	0x08016df0
 80098d4:	08016bc8 	.word	0x08016bc8
 80098d8:	08016e14 	.word	0x08016e14

080098dc <mqtt_tcp_sent_cb>:
 * @param len Number of bytes sent
 * @return ERR_OK
 */
static err_t
mqtt_tcp_sent_cb(void *arg, struct altcp_pcb *tpcb, u16_t len)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b086      	sub	sp, #24
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	60f8      	str	r0, [r7, #12]
 80098e4:	60b9      	str	r1, [r7, #8]
 80098e6:	4613      	mov	r3, r2
 80098e8:	80fb      	strh	r3, [r7, #6]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  if (client->conn_state == MQTT_CONNECTED) {
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	7a9b      	ldrb	r3, [r3, #10]
 80098f2:	2b03      	cmp	r3, #3
 80098f4:	d127      	bne.n	8009946 <mqtt_tcp_sent_cb+0x6a>
    struct mqtt_request_t *r;

    /* Reset keep-alive send timer and server watchdog */
    client->cyclic_tick = 0;
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	2200      	movs	r2, #0
 80098fa:	801a      	strh	r2, [r3, #0]
    client->server_watchdog = 0;
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	2200      	movs	r2, #0
 8009900:	809a      	strh	r2, [r3, #4]
    /* QoS 0 publish has no response from server, so call its callbacks here */
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 8009902:	e00d      	b.n	8009920 <mqtt_tcp_sent_cb+0x44>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_sent_cb: Calling QoS 0 publish complete callback\n"));
      if (r->cb != NULL) {
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d006      	beq.n	800991a <mqtt_tcp_sent_cb+0x3e>
        r->cb(r->arg, ERR_OK);
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	693a      	ldr	r2, [r7, #16]
 8009912:	6892      	ldr	r2, [r2, #8]
 8009914:	2100      	movs	r1, #0
 8009916:	4610      	mov	r0, r2
 8009918:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 800991a:	6938      	ldr	r0, [r7, #16]
 800991c:	f7ff f9aa 	bl	8008c74 <mqtt_delete_request>
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	3318      	adds	r3, #24
 8009924:	2100      	movs	r1, #0
 8009926:	4618      	mov	r0, r3
 8009928:	f7ff f9b4 	bl	8008c94 <mqtt_take_request>
 800992c:	6138      	str	r0, [r7, #16]
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d1e7      	bne.n	8009904 <mqtt_tcp_sent_cb+0x28>
    }
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, client->conn);
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	68db      	ldr	r3, [r3, #12]
 800993e:	4619      	mov	r1, r3
 8009940:	4610      	mov	r0, r2
 8009942:	f7ff f851 	bl	80089e8 <mqtt_output_send>
  }
  return ERR_OK;
 8009946:	2300      	movs	r3, #0
}
 8009948:	4618      	mov	r0, r3
 800994a:	3718      	adds	r7, #24
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <mqtt_tcp_err_cb>:
 * @param arg MQTT client
 * @param err Error encountered
 */
static void
mqtt_tcp_err_cb(void *arg, err_t err)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	460b      	mov	r3, r1
 800995a:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err); /* only used for debug output */
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_err_cb: TCP error callback: error %d, arg: %p\n", err, arg));
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d106      	bne.n	8009974 <mqtt_tcp_err_cb+0x24>
 8009966:	4b09      	ldr	r3, [pc, #36]	; (800998c <mqtt_tcp_err_cb+0x3c>)
 8009968:	f240 32f6 	movw	r2, #1014	; 0x3f6
 800996c:	4908      	ldr	r1, [pc, #32]	; (8009990 <mqtt_tcp_err_cb+0x40>)
 800996e:	4809      	ldr	r0, [pc, #36]	; (8009994 <mqtt_tcp_err_cb+0x44>)
 8009970:	f00b fce0 	bl	8015334 <iprintf>
  /* Set conn to null before calling close as pcb is already deallocated*/
  client->conn = 0;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2200      	movs	r2, #0
 8009978:	60da      	str	r2, [r3, #12]
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 800997a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800997e:	68f8      	ldr	r0, [r7, #12]
 8009980:	f7ff fb72 	bl	8009068 <mqtt_close>
}
 8009984:	bf00      	nop
 8009986:	3710      	adds	r7, #16
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}
 800998c:	08016b50 	.word	0x08016b50
 8009990:	08016e3c 	.word	0x08016e3c
 8009994:	08016bc8 	.word	0x08016bc8

08009998 <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct altcp_pcb *tpcb)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	60fb      	str	r3, [r7, #12]
  if (client->conn_state == MQTT_CONNECTED) {
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	7a9b      	ldrb	r3, [r3, #10]
 80099aa:	2b03      	cmp	r3, #3
 80099ac:	d105      	bne.n	80099ba <mqtt_tcp_poll_cb+0x22>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	33ec      	adds	r3, #236	; 0xec
 80099b2:	6839      	ldr	r1, [r7, #0]
 80099b4:	4618      	mov	r0, r3
 80099b6:	f7ff f817 	bl	80089e8 <mqtt_output_send>
  }
  return ERR_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct altcp_pcb *tpcb, err_t err)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b086      	sub	sp, #24
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	4613      	mov	r3, r2
 80099d0:	71fb      	strb	r3, [r7, #7]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	617b      	str	r3, [r7, #20]

  if (err != ERR_OK) {
 80099d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d002      	beq.n	80099e4 <mqtt_tcp_connect_cb+0x20>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_connect_cb: TCP connect error %d\n", err));
    return err;
 80099de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099e2:	e025      	b.n	8009a30 <mqtt_tcp_connect_cb+0x6c>
  }

  /* Initiate receiver state */
  client->msg_idx = 0;
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	2200      	movs	r2, #0
 80099e8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Setup TCP callbacks */
  altcp_recv(tpcb, mqtt_tcp_recv_cb);
 80099ea:	4913      	ldr	r1, [pc, #76]	; (8009a38 <mqtt_tcp_connect_cb+0x74>)
 80099ec:	68b8      	ldr	r0, [r7, #8]
 80099ee:	f003 ff5d 	bl	800d8ac <tcp_recv>
  altcp_sent(tpcb, mqtt_tcp_sent_cb);
 80099f2:	4912      	ldr	r1, [pc, #72]	; (8009a3c <mqtt_tcp_connect_cb+0x78>)
 80099f4:	68b8      	ldr	r0, [r7, #8]
 80099f6:	f003 ff7b 	bl	800d8f0 <tcp_sent>
  altcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 80099fa:	2202      	movs	r2, #2
 80099fc:	4910      	ldr	r1, [pc, #64]	; (8009a40 <mqtt_tcp_connect_cb+0x7c>)
 80099fe:	68b8      	ldr	r0, [r7, #8]
 8009a00:	f003 ffba 	bl	800d978 <tcp_poll>

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_connect_cb: TCP connection established to server\n"));
  /* Enter MQTT connect state */
  client->conn_state = MQTT_CONNECTING;
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	2202      	movs	r2, #2
 8009a08:	729a      	strb	r2, [r3, #10]

  /* Start cyclic timer */
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, client);
 8009a0a:	697a      	ldr	r2, [r7, #20]
 8009a0c:	490d      	ldr	r1, [pc, #52]	; (8009a44 <mqtt_tcp_connect_cb+0x80>)
 8009a0e:	f241 3088 	movw	r0, #5000	; 0x1388
 8009a12:	f008 fca1 	bl	8012358 <sys_timeout>
  client->cyclic_tick = 0;
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	801a      	strh	r2, [r3, #0]

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	68db      	ldr	r3, [r3, #12]
 8009a26:	4619      	mov	r1, r3
 8009a28:	4610      	mov	r0, r2
 8009a2a:	f7fe ffdd 	bl	80089e8 <mqtt_output_send>

  return ERR_OK;
 8009a2e:	2300      	movs	r3, #0
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3718      	adds	r7, #24
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}
 8009a38:	08009821 	.word	0x08009821
 8009a3c:	080098dd 	.word	0x080098dd
 8009a40:	08009999 	.word	0x08009999
 8009a44:	08009129 	.word	0x08009129

08009a48 <mqtt_publish>:
 *         ERR_MEM if short on memory
 */
err_t
mqtt_publish(mqtt_client_t *client, const char *topic, const void *payload, u16_t payload_length, u8_t qos, u8_t retain,
             mqtt_request_cb_t cb, void *arg)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b08c      	sub	sp, #48	; 0x30
 8009a4c:	af02      	add	r7, sp, #8
 8009a4e:	60f8      	str	r0, [r7, #12]
 8009a50:	60b9      	str	r1, [r7, #8]
 8009a52:	607a      	str	r2, [r7, #4]
 8009a54:	807b      	strh	r3, [r7, #2]
  size_t total_len;
  u16_t topic_len;
  u16_t remaining_length;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_publish: client != NULL", client);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d106      	bne.n	8009a6a <mqtt_publish+0x22>
 8009a5c:	4b5d      	ldr	r3, [pc, #372]	; (8009bd4 <mqtt_publish+0x18c>)
 8009a5e:	f240 4254 	movw	r2, #1108	; 0x454
 8009a62:	495d      	ldr	r1, [pc, #372]	; (8009bd8 <mqtt_publish+0x190>)
 8009a64:	485d      	ldr	r0, [pc, #372]	; (8009bdc <mqtt_publish+0x194>)
 8009a66:	f00b fc65 	bl	8015334 <iprintf>
  LWIP_ASSERT("mqtt_publish: topic != NULL", topic);
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d106      	bne.n	8009a7e <mqtt_publish+0x36>
 8009a70:	4b58      	ldr	r3, [pc, #352]	; (8009bd4 <mqtt_publish+0x18c>)
 8009a72:	f240 4255 	movw	r2, #1109	; 0x455
 8009a76:	495a      	ldr	r1, [pc, #360]	; (8009be0 <mqtt_publish+0x198>)
 8009a78:	4858      	ldr	r0, [pc, #352]	; (8009bdc <mqtt_publish+0x194>)
 8009a7a:	f00b fc5b 	bl	8015334 <iprintf>
  LWIP_ERROR("mqtt_publish: TCP disconnected", (client->conn_state != TCP_DISCONNECTED), return ERR_CONN);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	7a9b      	ldrb	r3, [r3, #10]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d109      	bne.n	8009a9a <mqtt_publish+0x52>
 8009a86:	4b53      	ldr	r3, [pc, #332]	; (8009bd4 <mqtt_publish+0x18c>)
 8009a88:	f240 4256 	movw	r2, #1110	; 0x456
 8009a8c:	4955      	ldr	r1, [pc, #340]	; (8009be4 <mqtt_publish+0x19c>)
 8009a8e:	4853      	ldr	r0, [pc, #332]	; (8009bdc <mqtt_publish+0x194>)
 8009a90:	f00b fc50 	bl	8015334 <iprintf>
 8009a94:	f06f 030a 	mvn.w	r3, #10
 8009a98:	e097      	b.n	8009bca <mqtt_publish+0x182>

  topic_strlen = strlen(topic);
 8009a9a:	68b8      	ldr	r0, [r7, #8]
 8009a9c:	f7f6 fbda 	bl	8000254 <strlen>
 8009aa0:	61f8      	str	r0, [r7, #28]
  LWIP_ERROR("mqtt_publish: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 8009aa2:	69fb      	ldr	r3, [r7, #28]
 8009aa4:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d909      	bls.n	8009ac0 <mqtt_publish+0x78>
 8009aac:	4b49      	ldr	r3, [pc, #292]	; (8009bd4 <mqtt_publish+0x18c>)
 8009aae:	f240 4259 	movw	r2, #1113	; 0x459
 8009ab2:	494d      	ldr	r1, [pc, #308]	; (8009be8 <mqtt_publish+0x1a0>)
 8009ab4:	4849      	ldr	r0, [pc, #292]	; (8009bdc <mqtt_publish+0x194>)
 8009ab6:	f00b fc3d 	bl	8015334 <iprintf>
 8009aba:	f06f 030f 	mvn.w	r3, #15
 8009abe:	e084      	b.n	8009bca <mqtt_publish+0x182>
  topic_len = (u16_t)topic_strlen;
 8009ac0:	69fb      	ldr	r3, [r7, #28]
 8009ac2:	837b      	strh	r3, [r7, #26]
  total_len = 2 + topic_len + payload_length;
 8009ac4:	8b7b      	ldrh	r3, [r7, #26]
 8009ac6:	1c9a      	adds	r2, r3, #2
 8009ac8:	887b      	ldrh	r3, [r7, #2]
 8009aca:	4413      	add	r3, r2
 8009acc:	623b      	str	r3, [r7, #32]

  if (qos > 0) {
 8009ace:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d008      	beq.n	8009ae8 <mqtt_publish+0xa0>
    total_len += 2;
 8009ad6:	6a3b      	ldr	r3, [r7, #32]
 8009ad8:	3302      	adds	r3, #2
 8009ada:	623b      	str	r3, [r7, #32]
    /* Generate pkt_id id for QoS1 and 2 */
    pkt_id = msg_generate_packet_id(client);
 8009adc:	68f8      	ldr	r0, [r7, #12]
 8009ade:	f7fe feef 	bl	80088c0 <msg_generate_packet_id>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009ae6:	e001      	b.n	8009aec <mqtt_publish+0xa4>
  } else {
    /* Use reserved value pkt_id 0 for QoS 0 in request handle */
    pkt_id = 0;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  LWIP_ERROR("mqtt_publish: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 8009aec:	6a3b      	ldr	r3, [r7, #32]
 8009aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009af2:	d309      	bcc.n	8009b08 <mqtt_publish+0xc0>
 8009af4:	4b37      	ldr	r3, [pc, #220]	; (8009bd4 <mqtt_publish+0x18c>)
 8009af6:	f240 4265 	movw	r2, #1125	; 0x465
 8009afa:	493c      	ldr	r1, [pc, #240]	; (8009bec <mqtt_publish+0x1a4>)
 8009afc:	4837      	ldr	r0, [pc, #220]	; (8009bdc <mqtt_publish+0x194>)
 8009afe:	f00b fc19 	bl	8015334 <iprintf>
 8009b02:	f06f 030f 	mvn.w	r3, #15
 8009b06:	e060      	b.n	8009bca <mqtt_publish+0x182>
  remaining_length = (u16_t)total_len;
 8009b08:	6a3b      	ldr	r3, [r7, #32]
 8009b0a:	833b      	strh	r3, [r7, #24]

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_publish: Publish with payload length %d to topic \"%s\"\n", payload_length, topic));

  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f103 001c 	add.w	r0, r3, #28
 8009b12:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b16:	9300      	str	r3, [sp, #0]
 8009b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b1a:	2104      	movs	r1, #4
 8009b1c:	f7ff f818 	bl	8008b50 <mqtt_create_request>
 8009b20:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d102      	bne.n	8009b2e <mqtt_publish+0xe6>
    return ERR_MEM;
 8009b28:	f04f 33ff 	mov.w	r3, #4294967295
 8009b2c:	e04d      	b.n	8009bca <mqtt_publish+0x182>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	33ec      	adds	r3, #236	; 0xec
 8009b32:	8b3a      	ldrh	r2, [r7, #24]
 8009b34:	4611      	mov	r1, r2
 8009b36:	4618      	mov	r0, r3
 8009b38:	f7ff fa64 	bl	8009004 <mqtt_output_check_space>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d105      	bne.n	8009b4e <mqtt_publish+0x106>
    mqtt_delete_request(r);
 8009b42:	6978      	ldr	r0, [r7, #20]
 8009b44:	f7ff f896 	bl	8008c74 <mqtt_delete_request>
    return ERR_MEM;
 8009b48:	f04f 33ff 	mov.w	r3, #4294967295
 8009b4c:	e03d      	b.n	8009bca <mqtt_publish+0x182>
  }
  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PUBLISH, 0, qos, retain, remaining_length);
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8009b54:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8009b58:	8b3b      	ldrh	r3, [r7, #24]
 8009b5a:	9301      	str	r3, [sp, #4]
 8009b5c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8009b60:	9300      	str	r3, [sp, #0]
 8009b62:	4613      	mov	r3, r2
 8009b64:	2200      	movs	r2, #0
 8009b66:	2103      	movs	r1, #3
 8009b68:	f7ff fa01 	bl	8008f6e <mqtt_output_append_fixed_header>

  /* Append Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	33ec      	adds	r3, #236	; 0xec
 8009b70:	8b7a      	ldrh	r2, [r7, #26]
 8009b72:	68b9      	ldr	r1, [r7, #8]
 8009b74:	4618      	mov	r0, r3
 8009b76:	f7ff f9ce 	bl	8008f16 <mqtt_output_append_string>

  /* Append packet if for QoS 1 and 2*/
  if (qos > 0) {
 8009b7a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d006      	beq.n	8009b90 <mqtt_publish+0x148>
    mqtt_output_append_u16(&client->output, pkt_id);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	33ec      	adds	r3, #236	; 0xec
 8009b86:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009b88:	4611      	mov	r1, r2
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7ff f98d 	bl	8008eaa <mqtt_output_append_u16>
  }

  /* Append optional publish payload */
  if ((payload != NULL) && (payload_length > 0)) {
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d009      	beq.n	8009baa <mqtt_publish+0x162>
 8009b96:	887b      	ldrh	r3, [r7, #2]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d006      	beq.n	8009baa <mqtt_publish+0x162>
    mqtt_output_append_buf(&client->output, payload, payload_length);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	33ec      	adds	r3, #236	; 0xec
 8009ba0:	887a      	ldrh	r2, [r7, #2]
 8009ba2:	6879      	ldr	r1, [r7, #4]
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f7ff f998 	bl	8008eda <mqtt_output_append_buf>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	3318      	adds	r3, #24
 8009bae:	6979      	ldr	r1, [r7, #20]
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f7ff f813 	bl	8008bdc <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	68db      	ldr	r3, [r3, #12]
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	4610      	mov	r0, r2
 8009bc4:	f7fe ff10 	bl	80089e8 <mqtt_output_send>
  return ERR_OK;
 8009bc8:	2300      	movs	r3, #0
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3728      	adds	r7, #40	; 0x28
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	08016b50 	.word	0x08016b50
 8009bd8:	08016e5c 	.word	0x08016e5c
 8009bdc:	08016bc8 	.word	0x08016bc8
 8009be0:	08016e7c 	.word	0x08016e7c
 8009be4:	08016e98 	.word	0x08016e98
 8009be8:	08016eb8 	.word	0x08016eb8
 8009bec:	08016edc 	.word	0x08016edc

08009bf0 <mqtt_sub_unsub>:
 * @param sub 1 for subscribe, 0 for unsubscribe
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_sub_unsub(mqtt_client_t *client, const char *topic, u8_t qos, mqtt_request_cb_t cb, void *arg, u8_t sub)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b08c      	sub	sp, #48	; 0x30
 8009bf4:	af02      	add	r7, sp, #8
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	60b9      	str	r1, [r7, #8]
 8009bfa:	603b      	str	r3, [r7, #0]
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	71fb      	strb	r3, [r7, #7]
  u16_t remaining_length;
  u16_t pkt_id;
  struct mqtt_request_t *r;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_sub_unsub: client != NULL", client);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d106      	bne.n	8009c14 <mqtt_sub_unsub+0x24>
 8009c06:	4b5e      	ldr	r3, [pc, #376]	; (8009d80 <mqtt_sub_unsub+0x190>)
 8009c08:	f240 429f 	movw	r2, #1183	; 0x49f
 8009c0c:	495d      	ldr	r1, [pc, #372]	; (8009d84 <mqtt_sub_unsub+0x194>)
 8009c0e:	485e      	ldr	r0, [pc, #376]	; (8009d88 <mqtt_sub_unsub+0x198>)
 8009c10:	f00b fb90 	bl	8015334 <iprintf>
  LWIP_ASSERT("mqtt_sub_unsub: topic != NULL", topic);
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d106      	bne.n	8009c28 <mqtt_sub_unsub+0x38>
 8009c1a:	4b59      	ldr	r3, [pc, #356]	; (8009d80 <mqtt_sub_unsub+0x190>)
 8009c1c:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
 8009c20:	495a      	ldr	r1, [pc, #360]	; (8009d8c <mqtt_sub_unsub+0x19c>)
 8009c22:	4859      	ldr	r0, [pc, #356]	; (8009d88 <mqtt_sub_unsub+0x198>)
 8009c24:	f00b fb86 	bl	8015334 <iprintf>

  topic_strlen = strlen(topic);
 8009c28:	68b8      	ldr	r0, [r7, #8]
 8009c2a:	f7f6 fb13 	bl	8000254 <strlen>
 8009c2e:	6278      	str	r0, [r7, #36]	; 0x24
  LWIP_ERROR("mqtt_sub_unsub: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 8009c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c32:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d909      	bls.n	8009c4e <mqtt_sub_unsub+0x5e>
 8009c3a:	4b51      	ldr	r3, [pc, #324]	; (8009d80 <mqtt_sub_unsub+0x190>)
 8009c3c:	f240 42a3 	movw	r2, #1187	; 0x4a3
 8009c40:	4953      	ldr	r1, [pc, #332]	; (8009d90 <mqtt_sub_unsub+0x1a0>)
 8009c42:	4851      	ldr	r0, [pc, #324]	; (8009d88 <mqtt_sub_unsub+0x198>)
 8009c44:	f00b fb76 	bl	8015334 <iprintf>
 8009c48:	f06f 030f 	mvn.w	r3, #15
 8009c4c:	e093      	b.n	8009d76 <mqtt_sub_unsub+0x186>
  topic_len = (u16_t)topic_strlen;
 8009c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c50:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Topic string, pkt_id, qos for subscribe */
  total_len =  topic_len + 2 + 2 + (sub != 0);
 8009c52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009c54:	3304      	adds	r3, #4
 8009c56:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8009c5a:	2a00      	cmp	r2, #0
 8009c5c:	bf14      	ite	ne
 8009c5e:	2201      	movne	r2, #1
 8009c60:	2200      	moveq	r2, #0
 8009c62:	b2d2      	uxtb	r2, r2
 8009c64:	4413      	add	r3, r2
 8009c66:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("mqtt_sub_unsub: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 8009c68:	69fb      	ldr	r3, [r7, #28]
 8009c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c6e:	d309      	bcc.n	8009c84 <mqtt_sub_unsub+0x94>
 8009c70:	4b43      	ldr	r3, [pc, #268]	; (8009d80 <mqtt_sub_unsub+0x190>)
 8009c72:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8009c76:	4947      	ldr	r1, [pc, #284]	; (8009d94 <mqtt_sub_unsub+0x1a4>)
 8009c78:	4843      	ldr	r0, [pc, #268]	; (8009d88 <mqtt_sub_unsub+0x198>)
 8009c7a:	f00b fb5b 	bl	8015334 <iprintf>
 8009c7e:	f06f 030f 	mvn.w	r3, #15
 8009c82:	e078      	b.n	8009d76 <mqtt_sub_unsub+0x186>
  remaining_length = (u16_t)total_len;
 8009c84:	69fb      	ldr	r3, [r7, #28]
 8009c86:	837b      	strh	r3, [r7, #26]

  LWIP_ASSERT("mqtt_sub_unsub: qos < 3", qos < 3);
 8009c88:	79fb      	ldrb	r3, [r7, #7]
 8009c8a:	2b02      	cmp	r3, #2
 8009c8c:	d906      	bls.n	8009c9c <mqtt_sub_unsub+0xac>
 8009c8e:	4b3c      	ldr	r3, [pc, #240]	; (8009d80 <mqtt_sub_unsub+0x190>)
 8009c90:	f240 42aa 	movw	r2, #1194	; 0x4aa
 8009c94:	4940      	ldr	r1, [pc, #256]	; (8009d98 <mqtt_sub_unsub+0x1a8>)
 8009c96:	483c      	ldr	r0, [pc, #240]	; (8009d88 <mqtt_sub_unsub+0x198>)
 8009c98:	f00b fb4c 	bl	8015334 <iprintf>
  if (client->conn_state == TCP_DISCONNECTED) {
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	7a9b      	ldrb	r3, [r3, #10]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d102      	bne.n	8009caa <mqtt_sub_unsub+0xba>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_sub_unsub: Can not (un)subscribe in disconnected state\n"));
    return ERR_CONN;
 8009ca4:	f06f 030a 	mvn.w	r3, #10
 8009ca8:	e065      	b.n	8009d76 <mqtt_sub_unsub+0x186>
  }

  pkt_id = msg_generate_packet_id(client);
 8009caa:	68f8      	ldr	r0, [r7, #12]
 8009cac:	f7fe fe08 	bl	80088c0 <msg_generate_packet_id>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	833b      	strh	r3, [r7, #24]
  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f103 001c 	add.w	r0, r3, #28
 8009cba:	8b3a      	ldrh	r2, [r7, #24]
 8009cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cbe:	9300      	str	r3, [sp, #0]
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	2104      	movs	r1, #4
 8009cc4:	f7fe ff44 	bl	8008b50 <mqtt_create_request>
 8009cc8:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d102      	bne.n	8009cd6 <mqtt_sub_unsub+0xe6>
    return ERR_MEM;
 8009cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8009cd4:	e04f      	b.n	8009d76 <mqtt_sub_unsub+0x186>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	33ec      	adds	r3, #236	; 0xec
 8009cda:	8b7a      	ldrh	r2, [r7, #26]
 8009cdc:	4611      	mov	r1, r2
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f7ff f990 	bl	8009004 <mqtt_output_check_space>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d105      	bne.n	8009cf6 <mqtt_sub_unsub+0x106>
    mqtt_delete_request(r);
 8009cea:	6978      	ldr	r0, [r7, #20]
 8009cec:	f7fe ffc2 	bl	8008c74 <mqtt_delete_request>
    return ERR_MEM;
 8009cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8009cf4:	e03f      	b.n	8009d76 <mqtt_sub_unsub+0x186>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_sub_unsub: Client (un)subscribe to topic \"%s\", id: %d\n", topic, pkt_id));

  mqtt_output_append_fixed_header(&client->output, sub ? MQTT_MSG_TYPE_SUBSCRIBE : MQTT_MSG_TYPE_UNSUBSCRIBE, 0, 1, 0, remaining_length);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8009cfc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d001      	beq.n	8009d08 <mqtt_sub_unsub+0x118>
 8009d04:	2108      	movs	r1, #8
 8009d06:	e000      	b.n	8009d0a <mqtt_sub_unsub+0x11a>
 8009d08:	210a      	movs	r1, #10
 8009d0a:	8b7b      	ldrh	r3, [r7, #26]
 8009d0c:	9301      	str	r3, [sp, #4]
 8009d0e:	2300      	movs	r3, #0
 8009d10:	9300      	str	r3, [sp, #0]
 8009d12:	2301      	movs	r3, #1
 8009d14:	2200      	movs	r2, #0
 8009d16:	f7ff f92a 	bl	8008f6e <mqtt_output_append_fixed_header>
  /* Packet id */
  mqtt_output_append_u16(&client->output, pkt_id);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	33ec      	adds	r3, #236	; 0xec
 8009d1e:	8b3a      	ldrh	r2, [r7, #24]
 8009d20:	4611      	mov	r1, r2
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7ff f8c1 	bl	8008eaa <mqtt_output_append_u16>
  /* Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	33ec      	adds	r3, #236	; 0xec
 8009d2c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009d2e:	68b9      	ldr	r1, [r7, #8]
 8009d30:	4618      	mov	r0, r3
 8009d32:	f7ff f8f0 	bl	8008f16 <mqtt_output_append_string>
  /* QoS */
  if (sub != 0) {
 8009d36:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d00b      	beq.n	8009d56 <mqtt_sub_unsub+0x166>
    mqtt_output_append_u8(&client->output, LWIP_MIN(qos, 2));
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8009d44:	79fb      	ldrb	r3, [r7, #7]
 8009d46:	2b02      	cmp	r3, #2
 8009d48:	bf28      	it	cs
 8009d4a:	2302      	movcs	r3, #2
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	4619      	mov	r1, r3
 8009d50:	4610      	mov	r0, r2
 8009d52:	f7ff f89b 	bl	8008e8c <mqtt_output_append_u8>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	3318      	adds	r3, #24
 8009d5a:	6979      	ldr	r1, [r7, #20]
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f7fe ff3d 	bl	8008bdc <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	68db      	ldr	r3, [r3, #12]
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	4610      	mov	r0, r2
 8009d70:	f7fe fe3a 	bl	80089e8 <mqtt_output_send>
  return ERR_OK;
 8009d74:	2300      	movs	r3, #0
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3728      	adds	r7, #40	; 0x28
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	08016b50 	.word	0x08016b50
 8009d84:	08016f00 	.word	0x08016f00
 8009d88:	08016bc8 	.word	0x08016bc8
 8009d8c:	08016f20 	.word	0x08016f20
 8009d90:	08016f40 	.word	0x08016f40
 8009d94:	08016f68 	.word	0x08016f68
 8009d98:	08016f90 	.word	0x08016f90

08009d9c <mqtt_set_inpub_callback>:
 * @param arg User supplied argument to both callbacks
 */
void
mqtt_set_inpub_callback(mqtt_client_t *client, mqtt_incoming_publish_cb_t pub_cb,
                        mqtt_incoming_data_cb_t data_cb, void *arg)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	60f8      	str	r0, [r7, #12]
 8009da4:	60b9      	str	r1, [r7, #8]
 8009da6:	607a      	str	r2, [r7, #4]
 8009da8:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_set_inpub_callback: client != NULL", client != NULL);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d106      	bne.n	8009dbe <mqtt_set_inpub_callback+0x22>
 8009db0:	4b09      	ldr	r3, [pc, #36]	; (8009dd8 <mqtt_set_inpub_callback+0x3c>)
 8009db2:	f240 42da 	movw	r2, #1242	; 0x4da
 8009db6:	4909      	ldr	r1, [pc, #36]	; (8009ddc <mqtt_set_inpub_callback+0x40>)
 8009db8:	4809      	ldr	r0, [pc, #36]	; (8009de0 <mqtt_set_inpub_callback+0x44>)
 8009dba:	f00b fabb 	bl	8015334 <iprintf>
  client->data_cb = data_cb;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	661a      	str	r2, [r3, #96]	; 0x60
  client->pub_cb = pub_cb;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	68ba      	ldr	r2, [r7, #8]
 8009dc8:	665a      	str	r2, [r3, #100]	; 0x64
  client->inpub_arg = arg;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	683a      	ldr	r2, [r7, #0]
 8009dce:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8009dd0:	bf00      	nop
 8009dd2:	3710      	adds	r7, #16
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}
 8009dd8:	08016b50 	.word	0x08016b50
 8009ddc:	08016fa8 	.word	0x08016fa8
 8009de0:	08016bc8 	.word	0x08016bc8

08009de4 <mqtt_client_new>:
 * Create a new MQTT client instance
 * @return Pointer to instance on success, NULL otherwise
 */
mqtt_client_t *
mqtt_client_new(void)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
  return (mqtt_client_t *)mem_calloc(1, sizeof(mqtt_client_t));
 8009de8:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8009dec:	2001      	movs	r0, #1
 8009dee:	f000 fedd 	bl	800abac <mem_calloc>
 8009df2:	4603      	mov	r3, r0
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b08c      	sub	sp, #48	; 0x30
 8009dfc:	af02      	add	r7, sp, #8
 8009dfe:	60f8      	str	r0, [r7, #12]
 8009e00:	60b9      	str	r1, [r7, #8]
 8009e02:	603b      	str	r3, [r7, #0]
 8009e04:	4613      	mov	r3, r2
 8009e06:	80fb      	strh	r3, [r7, #6]
  err_t err;
  size_t len;
  u16_t client_id_length;
  /* Length is the sum of 2+"MQTT", protocol level, flags and keep alive */
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 8009e08:	230a      	movs	r3, #10
 8009e0a:	84bb      	strh	r3, [r7, #36]	; 0x24
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e12:	2300      	movs	r3, #0
 8009e14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009e18:	2300      	movs	r3, #0
 8009e1a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  u16_t client_user_len = 0, client_pass_len = 0;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	83fb      	strh	r3, [r7, #30]
 8009e22:	2300      	movs	r3, #0
 8009e24:	83bb      	strh	r3, [r7, #28]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d106      	bne.n	8009e3a <mqtt_client_connect+0x42>
 8009e2c:	4bac      	ldr	r3, [pc, #688]	; (800a0e0 <mqtt_client_connect+0x2e8>)
 8009e2e:	f240 520f 	movw	r2, #1295	; 0x50f
 8009e32:	49ac      	ldr	r1, [pc, #688]	; (800a0e4 <mqtt_client_connect+0x2ec>)
 8009e34:	48ac      	ldr	r0, [pc, #688]	; (800a0e8 <mqtt_client_connect+0x2f0>)
 8009e36:	f00b fa7d 	bl	8015334 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d106      	bne.n	8009e4e <mqtt_client_connect+0x56>
 8009e40:	4ba7      	ldr	r3, [pc, #668]	; (800a0e0 <mqtt_client_connect+0x2e8>)
 8009e42:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 8009e46:	49a9      	ldr	r1, [pc, #676]	; (800a0ec <mqtt_client_connect+0x2f4>)
 8009e48:	48a7      	ldr	r0, [pc, #668]	; (800a0e8 <mqtt_client_connect+0x2f0>)
 8009e4a:	f00b fa73 	bl	8015334 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 8009e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d106      	bne.n	8009e62 <mqtt_client_connect+0x6a>
 8009e54:	4ba2      	ldr	r3, [pc, #648]	; (800a0e0 <mqtt_client_connect+0x2e8>)
 8009e56:	f240 5211 	movw	r2, #1297	; 0x511
 8009e5a:	49a5      	ldr	r1, [pc, #660]	; (800a0f0 <mqtt_client_connect+0x2f8>)
 8009e5c:	48a2      	ldr	r0, [pc, #648]	; (800a0e8 <mqtt_client_connect+0x2f0>)
 8009e5e:	f00b fa69 	bl	8015334 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 8009e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d106      	bne.n	8009e78 <mqtt_client_connect+0x80>
 8009e6a:	4b9d      	ldr	r3, [pc, #628]	; (800a0e0 <mqtt_client_connect+0x2e8>)
 8009e6c:	f240 5212 	movw	r2, #1298	; 0x512
 8009e70:	49a0      	ldr	r1, [pc, #640]	; (800a0f4 <mqtt_client_connect+0x2fc>)
 8009e72:	489d      	ldr	r0, [pc, #628]	; (800a0e8 <mqtt_client_connect+0x2f0>)
 8009e74:	f00b fa5e 	bl	8015334 <iprintf>

  if (client->conn_state != TCP_DISCONNECTED) {
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	7a9b      	ldrb	r3, [r3, #10]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d002      	beq.n	8009e86 <mqtt_client_connect+0x8e>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_client_connect: Already connected\n"));
    return ERR_ISCONN;
 8009e80:	f06f 0309 	mvn.w	r3, #9
 8009e84:	e221      	b.n	800a2ca <mqtt_client_connect+0x4d2>
  }

  /* Wipe clean */
  memset(client, 0, sizeof(mqtt_client_t));
 8009e86:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8009e8a:	2100      	movs	r1, #0
 8009e8c:	68f8      	ldr	r0, [r7, #12]
 8009e8e:	f00b fa49 	bl	8015324 <memset>
  client->connect_arg = arg;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e96:	611a      	str	r2, [r3, #16]
  client->connect_cb = cb;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	683a      	ldr	r2, [r7, #0]
 8009e9c:	615a      	str	r2, [r3, #20]
  client->keep_alive = client_info->keep_alive;
 8009e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ea0:	899a      	ldrh	r2, [r3, #12]
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	805a      	strh	r2, [r3, #2]
  mqtt_init_requests(client->req_list, LWIP_ARRAYSIZE(client->req_list));
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	331c      	adds	r3, #28
 8009eaa:	2104      	movs	r1, #4
 8009eac:	4618      	mov	r0, r3
 8009eae:	f7fe ffbf 	bl	8008e30 <mqtt_init_requests>

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 8009eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eb4:	691b      	ldr	r3, [r3, #16]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d073      	beq.n	8009fa2 <mqtt_client_connect+0x1aa>
 8009eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ebc:	695b      	ldr	r3, [r3, #20]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d06f      	beq.n	8009fa2 <mqtt_client_connect+0x1aa>
    flags |= MQTT_CONNECT_FLAG_WILL;
 8009ec2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009ec6:	f043 0304 	orr.w	r3, r3, #4
 8009eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    flags |= (client_info->will_qos & 3) << 3;
 8009ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ed0:	7e1b      	ldrb	r3, [r3, #24]
 8009ed2:	00db      	lsls	r3, r3, #3
 8009ed4:	b25b      	sxtb	r3, r3
 8009ed6:	f003 0318 	and.w	r3, r3, #24
 8009eda:	b25a      	sxtb	r2, r3
 8009edc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	b25b      	sxtb	r3, r3
 8009ee4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (client_info->will_retain) {
 8009ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eea:	7e5b      	ldrb	r3, [r3, #25]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d005      	beq.n	8009efc <mqtt_client_connect+0x104>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 8009ef0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009ef4:	f043 0320 	orr.w	r3, r3, #32
 8009ef8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }
    len = strlen(client_info->will_topic);
 8009efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009efe:	691b      	ldr	r3, [r3, #16]
 8009f00:	4618      	mov	r0, r3
 8009f02:	f7f6 f9a7 	bl	8000254 <strlen>
 8009f06:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 8009f08:	69bb      	ldr	r3, [r7, #24]
 8009f0a:	2bff      	cmp	r3, #255	; 0xff
 8009f0c:	d909      	bls.n	8009f22 <mqtt_client_connect+0x12a>
 8009f0e:	4b74      	ldr	r3, [pc, #464]	; (800a0e0 <mqtt_client_connect+0x2e8>)
 8009f10:	f44f 62a5 	mov.w	r2, #1320	; 0x528
 8009f14:	4978      	ldr	r1, [pc, #480]	; (800a0f8 <mqtt_client_connect+0x300>)
 8009f16:	4874      	ldr	r0, [pc, #464]	; (800a0e8 <mqtt_client_connect+0x2f0>)
 8009f18:	f00b fa0c 	bl	8015334 <iprintf>
 8009f1c:	f06f 0305 	mvn.w	r3, #5
 8009f20:	e1d3      	b.n	800a2ca <mqtt_client_connect+0x4d2>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 8009f22:	69bb      	ldr	r3, [r7, #24]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d109      	bne.n	8009f3c <mqtt_client_connect+0x144>
 8009f28:	4b6d      	ldr	r3, [pc, #436]	; (800a0e0 <mqtt_client_connect+0x2e8>)
 8009f2a:	f240 5229 	movw	r2, #1321	; 0x529
 8009f2e:	4973      	ldr	r1, [pc, #460]	; (800a0fc <mqtt_client_connect+0x304>)
 8009f30:	486d      	ldr	r0, [pc, #436]	; (800a0e8 <mqtt_client_connect+0x2f0>)
 8009f32:	f00b f9ff 	bl	8015334 <iprintf>
 8009f36:	f06f 0305 	mvn.w	r3, #5
 8009f3a:	e1c6      	b.n	800a2ca <mqtt_client_connect+0x4d2>
    will_topic_len = (u8_t)len;
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    len = strlen(client_info->will_msg);
 8009f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f44:	695b      	ldr	r3, [r3, #20]
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7f6 f984 	bl	8000254 <strlen>
 8009f4c:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 8009f4e:	69bb      	ldr	r3, [r7, #24]
 8009f50:	2bff      	cmp	r3, #255	; 0xff
 8009f52:	d909      	bls.n	8009f68 <mqtt_client_connect+0x170>
 8009f54:	4b62      	ldr	r3, [pc, #392]	; (800a0e0 <mqtt_client_connect+0x2e8>)
 8009f56:	f240 522c 	movw	r2, #1324	; 0x52c
 8009f5a:	4969      	ldr	r1, [pc, #420]	; (800a100 <mqtt_client_connect+0x308>)
 8009f5c:	4862      	ldr	r0, [pc, #392]	; (800a0e8 <mqtt_client_connect+0x2f0>)
 8009f5e:	f00b f9e9 	bl	8015334 <iprintf>
 8009f62:	f06f 0305 	mvn.w	r3, #5
 8009f66:	e1b0      	b.n	800a2ca <mqtt_client_connect+0x4d2>
    will_msg_len = (u8_t)len;
 8009f68:	69bb      	ldr	r3, [r7, #24]
 8009f6a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 8009f6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f70:	1c9a      	adds	r2, r3, #2
 8009f72:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009f76:	4413      	add	r3, r2
 8009f78:	1c9a      	adds	r2, r3, #2
 8009f7a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009f7e:	4413      	add	r3, r2
 8009f80:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8009f82:	69bb      	ldr	r3, [r7, #24]
 8009f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f88:	d309      	bcc.n	8009f9e <mqtt_client_connect+0x1a6>
 8009f8a:	4b55      	ldr	r3, [pc, #340]	; (800a0e0 <mqtt_client_connect+0x2e8>)
 8009f8c:	f240 522f 	movw	r2, #1327	; 0x52f
 8009f90:	495c      	ldr	r1, [pc, #368]	; (800a104 <mqtt_client_connect+0x30c>)
 8009f92:	4855      	ldr	r0, [pc, #340]	; (800a0e8 <mqtt_client_connect+0x2f0>)
 8009f94:	f00b f9ce 	bl	8015334 <iprintf>
 8009f98:	f06f 0305 	mvn.w	r3, #5
 8009f9c:	e195      	b.n	800a2ca <mqtt_client_connect+0x4d2>
    remaining_length = (u16_t)len;
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_user != NULL) {
 8009fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d03d      	beq.n	800a026 <mqtt_client_connect+0x22e>
    flags |= MQTT_CONNECT_FLAG_USERNAME;
 8009faa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009fae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_user);
 8009fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f7f6 f94a 	bl	8000254 <strlen>
 8009fc0:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length overflow", len <= 0xFFFF, return ERR_VAL);
 8009fc2:	69bb      	ldr	r3, [r7, #24]
 8009fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fc8:	d309      	bcc.n	8009fde <mqtt_client_connect+0x1e6>
 8009fca:	4b45      	ldr	r3, [pc, #276]	; (800a0e0 <mqtt_client_connect+0x2e8>)
 8009fcc:	f240 5235 	movw	r2, #1333	; 0x535
 8009fd0:	494d      	ldr	r1, [pc, #308]	; (800a108 <mqtt_client_connect+0x310>)
 8009fd2:	4845      	ldr	r0, [pc, #276]	; (800a0e8 <mqtt_client_connect+0x2f0>)
 8009fd4:	f00b f9ae 	bl	8015334 <iprintf>
 8009fd8:	f06f 0305 	mvn.w	r3, #5
 8009fdc:	e175      	b.n	800a2ca <mqtt_client_connect+0x4d2>
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length must be > 0", len > 0, return ERR_VAL);
 8009fde:	69bb      	ldr	r3, [r7, #24]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d109      	bne.n	8009ff8 <mqtt_client_connect+0x200>
 8009fe4:	4b3e      	ldr	r3, [pc, #248]	; (800a0e0 <mqtt_client_connect+0x2e8>)
 8009fe6:	f240 5236 	movw	r2, #1334	; 0x536
 8009fea:	4948      	ldr	r1, [pc, #288]	; (800a10c <mqtt_client_connect+0x314>)
 8009fec:	483e      	ldr	r0, [pc, #248]	; (800a0e8 <mqtt_client_connect+0x2f0>)
 8009fee:	f00b f9a1 	bl	8015334 <iprintf>
 8009ff2:	f06f 0305 	mvn.w	r3, #5
 8009ff6:	e168      	b.n	800a2ca <mqtt_client_connect+0x4d2>
    client_user_len = (u16_t)len;
 8009ff8:	69bb      	ldr	r3, [r7, #24]
 8009ffa:	83fb      	strh	r3, [r7, #30]
    len = remaining_length + 2 + client_user_len;
 8009ffc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ffe:	1c9a      	adds	r2, r3, #2
 800a000:	8bfb      	ldrh	r3, [r7, #30]
 800a002:	4413      	add	r3, r2
 800a004:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800a006:	69bb      	ldr	r3, [r7, #24]
 800a008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a00c:	d309      	bcc.n	800a022 <mqtt_client_connect+0x22a>
 800a00e:	4b34      	ldr	r3, [pc, #208]	; (800a0e0 <mqtt_client_connect+0x2e8>)
 800a010:	f240 5239 	movw	r2, #1337	; 0x539
 800a014:	493b      	ldr	r1, [pc, #236]	; (800a104 <mqtt_client_connect+0x30c>)
 800a016:	4834      	ldr	r0, [pc, #208]	; (800a0e8 <mqtt_client_connect+0x2f0>)
 800a018:	f00b f98c 	bl	8015334 <iprintf>
 800a01c:	f06f 0305 	mvn.w	r3, #5
 800a020:	e153      	b.n	800a2ca <mqtt_client_connect+0x4d2>
    remaining_length = (u16_t)len;
 800a022:	69bb      	ldr	r3, [r7, #24]
 800a024:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_pass != NULL) {
 800a026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a028:	689b      	ldr	r3, [r3, #8]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d03d      	beq.n	800a0aa <mqtt_client_connect+0x2b2>
    flags |= MQTT_CONNECT_FLAG_PASSWORD;
 800a02e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_pass);
 800a03a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a03c:	689b      	ldr	r3, [r3, #8]
 800a03e:	4618      	mov	r0, r3
 800a040:	f7f6 f908 	bl	8000254 <strlen>
 800a044:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length overflow", len <= 0xFFFF, return ERR_VAL);
 800a046:	69bb      	ldr	r3, [r7, #24]
 800a048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a04c:	d309      	bcc.n	800a062 <mqtt_client_connect+0x26a>
 800a04e:	4b24      	ldr	r3, [pc, #144]	; (800a0e0 <mqtt_client_connect+0x2e8>)
 800a050:	f240 523f 	movw	r2, #1343	; 0x53f
 800a054:	492e      	ldr	r1, [pc, #184]	; (800a110 <mqtt_client_connect+0x318>)
 800a056:	4824      	ldr	r0, [pc, #144]	; (800a0e8 <mqtt_client_connect+0x2f0>)
 800a058:	f00b f96c 	bl	8015334 <iprintf>
 800a05c:	f06f 0305 	mvn.w	r3, #5
 800a060:	e133      	b.n	800a2ca <mqtt_client_connect+0x4d2>
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length must be > 0", len > 0, return ERR_VAL);
 800a062:	69bb      	ldr	r3, [r7, #24]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d109      	bne.n	800a07c <mqtt_client_connect+0x284>
 800a068:	4b1d      	ldr	r3, [pc, #116]	; (800a0e0 <mqtt_client_connect+0x2e8>)
 800a06a:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 800a06e:	4929      	ldr	r1, [pc, #164]	; (800a114 <mqtt_client_connect+0x31c>)
 800a070:	481d      	ldr	r0, [pc, #116]	; (800a0e8 <mqtt_client_connect+0x2f0>)
 800a072:	f00b f95f 	bl	8015334 <iprintf>
 800a076:	f06f 0305 	mvn.w	r3, #5
 800a07a:	e126      	b.n	800a2ca <mqtt_client_connect+0x4d2>
    client_pass_len = (u16_t)len;
 800a07c:	69bb      	ldr	r3, [r7, #24]
 800a07e:	83bb      	strh	r3, [r7, #28]
    len = remaining_length + 2 + client_pass_len;
 800a080:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a082:	1c9a      	adds	r2, r3, #2
 800a084:	8bbb      	ldrh	r3, [r7, #28]
 800a086:	4413      	add	r3, r2
 800a088:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a090:	d309      	bcc.n	800a0a6 <mqtt_client_connect+0x2ae>
 800a092:	4b13      	ldr	r3, [pc, #76]	; (800a0e0 <mqtt_client_connect+0x2e8>)
 800a094:	f240 5243 	movw	r2, #1347	; 0x543
 800a098:	491a      	ldr	r1, [pc, #104]	; (800a104 <mqtt_client_connect+0x30c>)
 800a09a:	4813      	ldr	r0, [pc, #76]	; (800a0e8 <mqtt_client_connect+0x2f0>)
 800a09c:	f00b f94a 	bl	8015334 <iprintf>
 800a0a0:	f06f 0305 	mvn.w	r3, #5
 800a0a4:	e111      	b.n	800a2ca <mqtt_client_connect+0x4d2>
    remaining_length = (u16_t)len;
 800a0a6:	69bb      	ldr	r3, [r7, #24]
 800a0a8:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Don't complicate things, always connect using clean session */
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 800a0aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a0ae:	f043 0302 	orr.w	r3, r3, #2
 800a0b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  len = strlen(client_info->client_id);
 800a0b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7f6 f8ca 	bl	8000254 <strlen>
 800a0c0:	61b8      	str	r0, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 800a0c2:	69bb      	ldr	r3, [r7, #24]
 800a0c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0c8:	d328      	bcc.n	800a11c <mqtt_client_connect+0x324>
 800a0ca:	4b05      	ldr	r3, [pc, #20]	; (800a0e0 <mqtt_client_connect+0x2e8>)
 800a0cc:	f240 524b 	movw	r2, #1355	; 0x54b
 800a0d0:	4911      	ldr	r1, [pc, #68]	; (800a118 <mqtt_client_connect+0x320>)
 800a0d2:	4805      	ldr	r0, [pc, #20]	; (800a0e8 <mqtt_client_connect+0x2f0>)
 800a0d4:	f00b f92e 	bl	8015334 <iprintf>
 800a0d8:	f06f 0305 	mvn.w	r3, #5
 800a0dc:	e0f5      	b.n	800a2ca <mqtt_client_connect+0x4d2>
 800a0de:	bf00      	nop
 800a0e0:	08016b50 	.word	0x08016b50
 800a0e4:	08016fd0 	.word	0x08016fd0
 800a0e8:	08016bc8 	.word	0x08016bc8
 800a0ec:	08016ff4 	.word	0x08016ff4
 800a0f0:	0801701c 	.word	0x0801701c
 800a0f4:	08017048 	.word	0x08017048
 800a0f8:	0801707c 	.word	0x0801707c
 800a0fc:	080170bc 	.word	0x080170bc
 800a100:	080170fc 	.word	0x080170fc
 800a104:	08017138 	.word	0x08017138
 800a108:	08017168 	.word	0x08017168
 800a10c:	080171a8 	.word	0x080171a8
 800a110:	080171ec 	.word	0x080171ec
 800a114:	0801722c 	.word	0x0801722c
 800a118:	08017270 	.word	0x08017270
  client_id_length = (u16_t)len;
 800a11c:	69bb      	ldr	r3, [r7, #24]
 800a11e:	82fb      	strh	r3, [r7, #22]
  len = remaining_length + 2 + client_id_length;
 800a120:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a122:	1c9a      	adds	r2, r3, #2
 800a124:	8afb      	ldrh	r3, [r7, #22]
 800a126:	4413      	add	r3, r2
 800a128:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800a12a:	69bb      	ldr	r3, [r7, #24]
 800a12c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a130:	d309      	bcc.n	800a146 <mqtt_client_connect+0x34e>
 800a132:	4b68      	ldr	r3, [pc, #416]	; (800a2d4 <mqtt_client_connect+0x4dc>)
 800a134:	f240 524e 	movw	r2, #1358	; 0x54e
 800a138:	4967      	ldr	r1, [pc, #412]	; (800a2d8 <mqtt_client_connect+0x4e0>)
 800a13a:	4868      	ldr	r0, [pc, #416]	; (800a2dc <mqtt_client_connect+0x4e4>)
 800a13c:	f00b f8fa 	bl	8015334 <iprintf>
 800a140:	f06f 0305 	mvn.w	r3, #5
 800a144:	e0c1      	b.n	800a2ca <mqtt_client_connect+0x4d2>
  remaining_length = (u16_t)len;
 800a146:	69bb      	ldr	r3, [r7, #24]
 800a148:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	33ec      	adds	r3, #236	; 0xec
 800a14e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a150:	4611      	mov	r1, r2
 800a152:	4618      	mov	r0, r3
 800a154:	f7fe ff56 	bl	8009004 <mqtt_output_check_space>
 800a158:	4603      	mov	r3, r0
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d102      	bne.n	800a164 <mqtt_client_connect+0x36c>
    return ERR_MEM;
 800a15e:	f04f 33ff 	mov.w	r3, #4294967295
 800a162:	e0b2      	b.n	800a2ca <mqtt_client_connect+0x4d2>
  if (client_info->tls_config) {
    client->conn = altcp_tls_new(client_info->tls_config, IP_GET_TYPE(ip_addr));
  } else
#endif
  {
    client->conn = altcp_tcp_new_ip_type(IP_GET_TYPE(ip_addr));
 800a164:	2000      	movs	r0, #0
 800a166:	f003 fb81 	bl	800d86c <tcp_new_ip_type>
 800a16a:	4602      	mov	r2, r0
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	60da      	str	r2, [r3, #12]
  }
  if (client->conn == NULL) {
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d102      	bne.n	800a17e <mqtt_client_connect+0x386>
    return ERR_MEM;
 800a178:	f04f 33ff 	mov.w	r3, #4294967295
 800a17c:	e0a5      	b.n	800a2ca <mqtt_client_connect+0x4d2>
  }

  /* Set arg pointer for callbacks */
  altcp_arg(client->conn, client);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	68db      	ldr	r3, [r3, #12]
 800a182:	68f9      	ldr	r1, [r7, #12]
 800a184:	4618      	mov	r0, r3
 800a186:	f003 fb7f 	bl	800d888 <tcp_arg>
  /* Any local address, pick random local port number */
  err = altcp_bind(client->conn, IP_ADDR_ANY, 0);
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	68db      	ldr	r3, [r3, #12]
 800a18e:	2200      	movs	r2, #0
 800a190:	4953      	ldr	r1, [pc, #332]	; (800a2e0 <mqtt_client_connect+0x4e8>)
 800a192:	4618      	mov	r0, r3
 800a194:	f002 faa8 	bl	800c6e8 <tcp_bind>
 800a198:	4603      	mov	r3, r0
 800a19a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 800a19e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	f040 8084 	bne.w	800a2b0 <mqtt_client_connect+0x4b8>
    goto tcp_fail;
  }
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Connecting to host: %s at port:%"U16_F"\n", ipaddr_ntoa(ip_addr), port));

  /* Connect to server */
  err = altcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	68d8      	ldr	r0, [r3, #12]
 800a1ac:	88fa      	ldrh	r2, [r7, #6]
 800a1ae:	4b4d      	ldr	r3, [pc, #308]	; (800a2e4 <mqtt_client_connect+0x4ec>)
 800a1b0:	68b9      	ldr	r1, [r7, #8]
 800a1b2:	f002 fc21 	bl	800c9f8 <tcp_connect>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 800a1bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d177      	bne.n	800a2b4 <mqtt_client_connect+0x4bc>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Error connecting to remote ip/port, %d\n", err));
    goto tcp_fail;
  }
  /* Set error callback */
  altcp_err(client->conn, mqtt_tcp_err_cb);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	68db      	ldr	r3, [r3, #12]
 800a1c8:	4947      	ldr	r1, [pc, #284]	; (800a2e8 <mqtt_client_connect+0x4f0>)
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f003 fbb2 	bl	800d934 <tcp_err>
  client->conn_state = TCP_CONNECTING;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	729a      	strb	r2, [r3, #10]

  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800a1dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a1de:	9301      	str	r3, [sp, #4]
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	9300      	str	r3, [sp, #0]
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	2101      	movs	r1, #1
 800a1ea:	f7fe fec0 	bl	8008f6e <mqtt_output_append_fixed_header>
  /* Append Protocol string */
  mqtt_output_append_string(&client->output, "MQTT", 4);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	33ec      	adds	r3, #236	; 0xec
 800a1f2:	2204      	movs	r2, #4
 800a1f4:	493d      	ldr	r1, [pc, #244]	; (800a2ec <mqtt_client_connect+0x4f4>)
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7fe fe8d 	bl	8008f16 <mqtt_output_append_string>
  /* Append Protocol level */
  mqtt_output_append_u8(&client->output, 4);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	33ec      	adds	r3, #236	; 0xec
 800a200:	2104      	movs	r1, #4
 800a202:	4618      	mov	r0, r3
 800a204:	f7fe fe42 	bl	8008e8c <mqtt_output_append_u8>
  /* Append connect flags */
  mqtt_output_append_u8(&client->output, flags);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	33ec      	adds	r3, #236	; 0xec
 800a20c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800a210:	4611      	mov	r1, r2
 800a212:	4618      	mov	r0, r3
 800a214:	f7fe fe3a 	bl	8008e8c <mqtt_output_append_u8>
  /* Append keep-alive */
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800a21e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a220:	899b      	ldrh	r3, [r3, #12]
 800a222:	4619      	mov	r1, r3
 800a224:	4610      	mov	r0, r2
 800a226:	f7fe fe40 	bl	8008eaa <mqtt_output_append_u16>
  /* Append client id */
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800a230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	8afa      	ldrh	r2, [r7, #22]
 800a236:	4619      	mov	r1, r3
 800a238:	f7fe fe6d 	bl	8008f16 <mqtt_output_append_string>
  /* Append will message if used */
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 800a23c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a240:	f003 0304 	and.w	r3, r3, #4
 800a244:	2b00      	cmp	r3, #0
 800a246:	d015      	beq.n	800a274 <mqtt_client_connect+0x47c>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800a24e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a250:	691b      	ldr	r3, [r3, #16]
 800a252:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a256:	b292      	uxth	r2, r2
 800a258:	4619      	mov	r1, r3
 800a25a:	f7fe fe5c 	bl	8008f16 <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800a264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a266:	695b      	ldr	r3, [r3, #20]
 800a268:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a26c:	b292      	uxth	r2, r2
 800a26e:	4619      	mov	r1, r3
 800a270:	f7fe fe51 	bl	8008f16 <mqtt_output_append_string>
  }
  /* Append user name if given */
  if ((flags & MQTT_CONNECT_FLAG_USERNAME) != 0) {
 800a274:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800a278:	2b00      	cmp	r3, #0
 800a27a:	da08      	bge.n	800a28e <mqtt_client_connect+0x496>
    mqtt_output_append_string(&client->output, client_info->client_user, client_user_len);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800a282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	8bfa      	ldrh	r2, [r7, #30]
 800a288:	4619      	mov	r1, r3
 800a28a:	f7fe fe44 	bl	8008f16 <mqtt_output_append_string>
  }
  /* Append password if given */
  if ((flags & MQTT_CONNECT_FLAG_PASSWORD) != 0) {
 800a28e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a296:	2b00      	cmp	r3, #0
 800a298:	d008      	beq.n	800a2ac <mqtt_client_connect+0x4b4>
    mqtt_output_append_string(&client->output, client_info->client_pass, client_pass_len);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800a2a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2a2:	689b      	ldr	r3, [r3, #8]
 800a2a4:	8bba      	ldrh	r2, [r7, #28]
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	f7fe fe35 	bl	8008f16 <mqtt_output_append_string>
  }
  return ERR_OK;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	e00c      	b.n	800a2ca <mqtt_client_connect+0x4d2>
    goto tcp_fail;
 800a2b0:	bf00      	nop
 800a2b2:	e000      	b.n	800a2b6 <mqtt_client_connect+0x4be>
    goto tcp_fail;
 800a2b4:	bf00      	nop

tcp_fail:
  altcp_abort(client->conn);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	68db      	ldr	r3, [r3, #12]
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f002 fa08 	bl	800c6d0 <tcp_abort>
  client->conn = NULL;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	60da      	str	r2, [r3, #12]
  return err;
 800a2c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3728      	adds	r7, #40	; 0x28
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	08016b50 	.word	0x08016b50
 800a2d8:	08017138 	.word	0x08017138
 800a2dc:	08016bc8 	.word	0x08016bc8
 800a2e0:	08019e50 	.word	0x08019e50
 800a2e4:	080099c5 	.word	0x080099c5
 800a2e8:	08009951 	.word	0x08009951
 800a2ec:	080172ac 	.word	0x080172ac

0800a2f0 <mqtt_disconnect>:
 * Disconnect from MQTT server
 * @param client MQTT client
 */
void
mqtt_disconnect(mqtt_client_t *client)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b082      	sub	sp, #8
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_disconnect: client != NULL", client);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d106      	bne.n	800a30c <mqtt_disconnect+0x1c>
 800a2fe:	4b0b      	ldr	r3, [pc, #44]	; (800a32c <mqtt_disconnect+0x3c>)
 800a300:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 800a304:	490a      	ldr	r1, [pc, #40]	; (800a330 <mqtt_disconnect+0x40>)
 800a306:	480b      	ldr	r0, [pc, #44]	; (800a334 <mqtt_disconnect+0x44>)
 800a308:	f00b f814 	bl	8015334 <iprintf>
  /* If connection in not already closed */
  if (client->conn_state != TCP_DISCONNECTED) {
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	7a9b      	ldrb	r3, [r3, #10]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d006      	beq.n	800a322 <mqtt_disconnect+0x32>
    /* Set conn_state before calling mqtt_close to prevent callback from being called */
    client->conn_state = TCP_DISCONNECTED;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2200      	movs	r2, #0
 800a318:	729a      	strb	r2, [r3, #10]
    mqtt_close(client, (mqtt_connection_status_t)0);
 800a31a:	2100      	movs	r1, #0
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f7fe fea3 	bl	8009068 <mqtt_close>
  }
}
 800a322:	bf00      	nop
 800a324:	3708      	adds	r7, #8
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
 800a32a:	bf00      	nop
 800a32c:	08016b50 	.word	0x08016b50
 800a330:	080172b4 	.word	0x080172b4
 800a334:	08016bc8 	.word	0x08016bc8

0800a338 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	4603      	mov	r3, r0
 800a340:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a342:	88fb      	ldrh	r3, [r7, #6]
 800a344:	021b      	lsls	r3, r3, #8
 800a346:	b21a      	sxth	r2, r3
 800a348:	88fb      	ldrh	r3, [r7, #6]
 800a34a:	0a1b      	lsrs	r3, r3, #8
 800a34c:	b29b      	uxth	r3, r3
 800a34e:	b21b      	sxth	r3, r3
 800a350:	4313      	orrs	r3, r2
 800a352:	b21b      	sxth	r3, r3
 800a354:	b29b      	uxth	r3, r3
}
 800a356:	4618      	mov	r0, r3
 800a358:	370c      	adds	r7, #12
 800a35a:	46bd      	mov	sp, r7
 800a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a360:	4770      	bx	lr

0800a362 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a362:	b480      	push	{r7}
 800a364:	b083      	sub	sp, #12
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	061a      	lsls	r2, r3, #24
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	021b      	lsls	r3, r3, #8
 800a372:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a376:	431a      	orrs	r2, r3
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	0a1b      	lsrs	r3, r3, #8
 800a37c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a380:	431a      	orrs	r2, r3
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	0e1b      	lsrs	r3, r3, #24
 800a386:	4313      	orrs	r3, r2
}
 800a388:	4618      	mov	r0, r3
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a39a:	2300      	movs	r3, #0
 800a39c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a39e:	f00a fedd 	bl	801515c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a3a2:	f000 f8d5 	bl	800a550 <mem_init>
  memp_init();
 800a3a6:	f000 fc59 	bl	800ac5c <memp_init>
  pbuf_init();
  netif_init();
 800a3aa:	f000 fd1f 	bl	800adec <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a3ae:	f008 f8a5 	bl	80124fc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a3b2:	f001 fe93 	bl	800c0dc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a3b6:	f007 ffad 	bl	8012314 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a3ba:	bf00      	nop
 800a3bc:	3708      	adds	r7, #8
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
	...

0800a3c4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a3ce:	4b05      	ldr	r3, [pc, #20]	; (800a3e4 <ptr_to_mem+0x20>)
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	88fb      	ldrh	r3, [r7, #6]
 800a3d4:	4413      	add	r3, r2
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	370c      	adds	r7, #12
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr
 800a3e2:	bf00      	nop
 800a3e4:	20004058 	.word	0x20004058

0800a3e8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b083      	sub	sp, #12
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a3f0:	4b05      	ldr	r3, [pc, #20]	; (800a408 <mem_to_ptr+0x20>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	1ad3      	subs	r3, r2, r3
 800a3f8:	b29b      	uxth	r3, r3
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	370c      	adds	r7, #12
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr
 800a406:	bf00      	nop
 800a408:	20004058 	.word	0x20004058

0800a40c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a40c:	b590      	push	{r4, r7, lr}
 800a40e:	b085      	sub	sp, #20
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a414:	4b45      	ldr	r3, [pc, #276]	; (800a52c <plug_holes+0x120>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d206      	bcs.n	800a42c <plug_holes+0x20>
 800a41e:	4b44      	ldr	r3, [pc, #272]	; (800a530 <plug_holes+0x124>)
 800a420:	f240 12df 	movw	r2, #479	; 0x1df
 800a424:	4943      	ldr	r1, [pc, #268]	; (800a534 <plug_holes+0x128>)
 800a426:	4844      	ldr	r0, [pc, #272]	; (800a538 <plug_holes+0x12c>)
 800a428:	f00a ff84 	bl	8015334 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a42c:	4b43      	ldr	r3, [pc, #268]	; (800a53c <plug_holes+0x130>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	687a      	ldr	r2, [r7, #4]
 800a432:	429a      	cmp	r2, r3
 800a434:	d306      	bcc.n	800a444 <plug_holes+0x38>
 800a436:	4b3e      	ldr	r3, [pc, #248]	; (800a530 <plug_holes+0x124>)
 800a438:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a43c:	4940      	ldr	r1, [pc, #256]	; (800a540 <plug_holes+0x134>)
 800a43e:	483e      	ldr	r0, [pc, #248]	; (800a538 <plug_holes+0x12c>)
 800a440:	f00a ff78 	bl	8015334 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	791b      	ldrb	r3, [r3, #4]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d006      	beq.n	800a45a <plug_holes+0x4e>
 800a44c:	4b38      	ldr	r3, [pc, #224]	; (800a530 <plug_holes+0x124>)
 800a44e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a452:	493c      	ldr	r1, [pc, #240]	; (800a544 <plug_holes+0x138>)
 800a454:	4838      	ldr	r0, [pc, #224]	; (800a538 <plug_holes+0x12c>)
 800a456:	f00a ff6d 	bl	8015334 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	881b      	ldrh	r3, [r3, #0]
 800a45e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a462:	d906      	bls.n	800a472 <plug_holes+0x66>
 800a464:	4b32      	ldr	r3, [pc, #200]	; (800a530 <plug_holes+0x124>)
 800a466:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a46a:	4937      	ldr	r1, [pc, #220]	; (800a548 <plug_holes+0x13c>)
 800a46c:	4832      	ldr	r0, [pc, #200]	; (800a538 <plug_holes+0x12c>)
 800a46e:	f00a ff61 	bl	8015334 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	881b      	ldrh	r3, [r3, #0]
 800a476:	4618      	mov	r0, r3
 800a478:	f7ff ffa4 	bl	800a3c4 <ptr_to_mem>
 800a47c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a47e:	687a      	ldr	r2, [r7, #4]
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	429a      	cmp	r2, r3
 800a484:	d024      	beq.n	800a4d0 <plug_holes+0xc4>
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	791b      	ldrb	r3, [r3, #4]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d120      	bne.n	800a4d0 <plug_holes+0xc4>
 800a48e:	4b2b      	ldr	r3, [pc, #172]	; (800a53c <plug_holes+0x130>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	68fa      	ldr	r2, [r7, #12]
 800a494:	429a      	cmp	r2, r3
 800a496:	d01b      	beq.n	800a4d0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a498:	4b2c      	ldr	r3, [pc, #176]	; (800a54c <plug_holes+0x140>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	68fa      	ldr	r2, [r7, #12]
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	d102      	bne.n	800a4a8 <plug_holes+0x9c>
      lfree = mem;
 800a4a2:	4a2a      	ldr	r2, [pc, #168]	; (800a54c <plug_holes+0x140>)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	881a      	ldrh	r2, [r3, #0]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	881b      	ldrh	r3, [r3, #0]
 800a4b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a4b8:	d00a      	beq.n	800a4d0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	881b      	ldrh	r3, [r3, #0]
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7ff ff80 	bl	800a3c4 <ptr_to_mem>
 800a4c4:	4604      	mov	r4, r0
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f7ff ff8e 	bl	800a3e8 <mem_to_ptr>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	885b      	ldrh	r3, [r3, #2]
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f7ff ff75 	bl	800a3c4 <ptr_to_mem>
 800a4da:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a4dc:	68ba      	ldr	r2, [r7, #8]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d01f      	beq.n	800a524 <plug_holes+0x118>
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	791b      	ldrb	r3, [r3, #4]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d11b      	bne.n	800a524 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a4ec:	4b17      	ldr	r3, [pc, #92]	; (800a54c <plug_holes+0x140>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d102      	bne.n	800a4fc <plug_holes+0xf0>
      lfree = pmem;
 800a4f6:	4a15      	ldr	r2, [pc, #84]	; (800a54c <plug_holes+0x140>)
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	881a      	ldrh	r2, [r3, #0]
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	881b      	ldrh	r3, [r3, #0]
 800a508:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a50c:	d00a      	beq.n	800a524 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	881b      	ldrh	r3, [r3, #0]
 800a512:	4618      	mov	r0, r3
 800a514:	f7ff ff56 	bl	800a3c4 <ptr_to_mem>
 800a518:	4604      	mov	r4, r0
 800a51a:	68b8      	ldr	r0, [r7, #8]
 800a51c:	f7ff ff64 	bl	800a3e8 <mem_to_ptr>
 800a520:	4603      	mov	r3, r0
 800a522:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a524:	bf00      	nop
 800a526:	3714      	adds	r7, #20
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd90      	pop	{r4, r7, pc}
 800a52c:	20004058 	.word	0x20004058
 800a530:	08017300 	.word	0x08017300
 800a534:	08017330 	.word	0x08017330
 800a538:	08017348 	.word	0x08017348
 800a53c:	2000405c 	.word	0x2000405c
 800a540:	08017370 	.word	0x08017370
 800a544:	0801738c 	.word	0x0801738c
 800a548:	080173a8 	.word	0x080173a8
 800a54c:	20004064 	.word	0x20004064

0800a550 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b082      	sub	sp, #8
 800a554:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a556:	4b1f      	ldr	r3, [pc, #124]	; (800a5d4 <mem_init+0x84>)
 800a558:	3303      	adds	r3, #3
 800a55a:	f023 0303 	bic.w	r3, r3, #3
 800a55e:	461a      	mov	r2, r3
 800a560:	4b1d      	ldr	r3, [pc, #116]	; (800a5d8 <mem_init+0x88>)
 800a562:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a564:	4b1c      	ldr	r3, [pc, #112]	; (800a5d8 <mem_init+0x88>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a570:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2200      	movs	r2, #0
 800a576:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2200      	movs	r2, #0
 800a57c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a57e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800a582:	f7ff ff1f 	bl	800a3c4 <ptr_to_mem>
 800a586:	4603      	mov	r3, r0
 800a588:	4a14      	ldr	r2, [pc, #80]	; (800a5dc <mem_init+0x8c>)
 800a58a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a58c:	4b13      	ldr	r3, [pc, #76]	; (800a5dc <mem_init+0x8c>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2201      	movs	r2, #1
 800a592:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a594:	4b11      	ldr	r3, [pc, #68]	; (800a5dc <mem_init+0x8c>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a59c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a59e:	4b0f      	ldr	r3, [pc, #60]	; (800a5dc <mem_init+0x8c>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a5a6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a5a8:	4b0b      	ldr	r3, [pc, #44]	; (800a5d8 <mem_init+0x88>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a0c      	ldr	r2, [pc, #48]	; (800a5e0 <mem_init+0x90>)
 800a5ae:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a5b0:	480c      	ldr	r0, [pc, #48]	; (800a5e4 <mem_init+0x94>)
 800a5b2:	f00a fde1 	bl	8015178 <sys_mutex_new>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d006      	beq.n	800a5ca <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a5bc:	4b0a      	ldr	r3, [pc, #40]	; (800a5e8 <mem_init+0x98>)
 800a5be:	f240 221f 	movw	r2, #543	; 0x21f
 800a5c2:	490a      	ldr	r1, [pc, #40]	; (800a5ec <mem_init+0x9c>)
 800a5c4:	480a      	ldr	r0, [pc, #40]	; (800a5f0 <mem_init+0xa0>)
 800a5c6:	f00a feb5 	bl	8015334 <iprintf>
  }
}
 800a5ca:	bf00      	nop
 800a5cc:	3708      	adds	r7, #8
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	2000741c 	.word	0x2000741c
 800a5d8:	20004058 	.word	0x20004058
 800a5dc:	2000405c 	.word	0x2000405c
 800a5e0:	20004064 	.word	0x20004064
 800a5e4:	20004060 	.word	0x20004060
 800a5e8:	08017300 	.word	0x08017300
 800a5ec:	080173d4 	.word	0x080173d4
 800a5f0:	08017348 	.word	0x08017348

0800a5f4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b086      	sub	sp, #24
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f7ff fef3 	bl	800a3e8 <mem_to_ptr>
 800a602:	4603      	mov	r3, r0
 800a604:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	881b      	ldrh	r3, [r3, #0]
 800a60a:	4618      	mov	r0, r3
 800a60c:	f7ff feda 	bl	800a3c4 <ptr_to_mem>
 800a610:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	885b      	ldrh	r3, [r3, #2]
 800a616:	4618      	mov	r0, r3
 800a618:	f7ff fed4 	bl	800a3c4 <ptr_to_mem>
 800a61c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	881b      	ldrh	r3, [r3, #0]
 800a622:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a626:	d818      	bhi.n	800a65a <mem_link_valid+0x66>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	885b      	ldrh	r3, [r3, #2]
 800a62c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a630:	d813      	bhi.n	800a65a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a636:	8afa      	ldrh	r2, [r7, #22]
 800a638:	429a      	cmp	r2, r3
 800a63a:	d004      	beq.n	800a646 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	881b      	ldrh	r3, [r3, #0]
 800a640:	8afa      	ldrh	r2, [r7, #22]
 800a642:	429a      	cmp	r2, r3
 800a644:	d109      	bne.n	800a65a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a646:	4b08      	ldr	r3, [pc, #32]	; (800a668 <mem_link_valid+0x74>)
 800a648:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a64a:	693a      	ldr	r2, [r7, #16]
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d006      	beq.n	800a65e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	885b      	ldrh	r3, [r3, #2]
 800a654:	8afa      	ldrh	r2, [r7, #22]
 800a656:	429a      	cmp	r2, r3
 800a658:	d001      	beq.n	800a65e <mem_link_valid+0x6a>
    return 0;
 800a65a:	2300      	movs	r3, #0
 800a65c:	e000      	b.n	800a660 <mem_link_valid+0x6c>
  }
  return 1;
 800a65e:	2301      	movs	r3, #1
}
 800a660:	4618      	mov	r0, r3
 800a662:	3718      	adds	r7, #24
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}
 800a668:	2000405c 	.word	0x2000405c

0800a66c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b088      	sub	sp, #32
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d070      	beq.n	800a75c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f003 0303 	and.w	r3, r3, #3
 800a680:	2b00      	cmp	r3, #0
 800a682:	d00d      	beq.n	800a6a0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a684:	4b37      	ldr	r3, [pc, #220]	; (800a764 <mem_free+0xf8>)
 800a686:	f240 2273 	movw	r2, #627	; 0x273
 800a68a:	4937      	ldr	r1, [pc, #220]	; (800a768 <mem_free+0xfc>)
 800a68c:	4837      	ldr	r0, [pc, #220]	; (800a76c <mem_free+0x100>)
 800a68e:	f00a fe51 	bl	8015334 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a692:	f00a fdcf 	bl	8015234 <sys_arch_protect>
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	68f8      	ldr	r0, [r7, #12]
 800a69a:	f00a fdd9 	bl	8015250 <sys_arch_unprotect>
    return;
 800a69e:	e05e      	b.n	800a75e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	3b08      	subs	r3, #8
 800a6a4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a6a6:	4b32      	ldr	r3, [pc, #200]	; (800a770 <mem_free+0x104>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	69fa      	ldr	r2, [r7, #28]
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d306      	bcc.n	800a6be <mem_free+0x52>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f103 020c 	add.w	r2, r3, #12
 800a6b6:	4b2f      	ldr	r3, [pc, #188]	; (800a774 <mem_free+0x108>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	d90d      	bls.n	800a6da <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a6be:	4b29      	ldr	r3, [pc, #164]	; (800a764 <mem_free+0xf8>)
 800a6c0:	f240 227f 	movw	r2, #639	; 0x27f
 800a6c4:	492c      	ldr	r1, [pc, #176]	; (800a778 <mem_free+0x10c>)
 800a6c6:	4829      	ldr	r0, [pc, #164]	; (800a76c <mem_free+0x100>)
 800a6c8:	f00a fe34 	bl	8015334 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a6cc:	f00a fdb2 	bl	8015234 <sys_arch_protect>
 800a6d0:	6138      	str	r0, [r7, #16]
 800a6d2:	6938      	ldr	r0, [r7, #16]
 800a6d4:	f00a fdbc 	bl	8015250 <sys_arch_unprotect>
    return;
 800a6d8:	e041      	b.n	800a75e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a6da:	4828      	ldr	r0, [pc, #160]	; (800a77c <mem_free+0x110>)
 800a6dc:	f00a fd68 	bl	80151b0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800a6e0:	69fb      	ldr	r3, [r7, #28]
 800a6e2:	791b      	ldrb	r3, [r3, #4]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d110      	bne.n	800a70a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a6e8:	4b1e      	ldr	r3, [pc, #120]	; (800a764 <mem_free+0xf8>)
 800a6ea:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a6ee:	4924      	ldr	r1, [pc, #144]	; (800a780 <mem_free+0x114>)
 800a6f0:	481e      	ldr	r0, [pc, #120]	; (800a76c <mem_free+0x100>)
 800a6f2:	f00a fe1f 	bl	8015334 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a6f6:	4821      	ldr	r0, [pc, #132]	; (800a77c <mem_free+0x110>)
 800a6f8:	f00a fd69 	bl	80151ce <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a6fc:	f00a fd9a 	bl	8015234 <sys_arch_protect>
 800a700:	6178      	str	r0, [r7, #20]
 800a702:	6978      	ldr	r0, [r7, #20]
 800a704:	f00a fda4 	bl	8015250 <sys_arch_unprotect>
    return;
 800a708:	e029      	b.n	800a75e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800a70a:	69f8      	ldr	r0, [r7, #28]
 800a70c:	f7ff ff72 	bl	800a5f4 <mem_link_valid>
 800a710:	4603      	mov	r3, r0
 800a712:	2b00      	cmp	r3, #0
 800a714:	d110      	bne.n	800a738 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a716:	4b13      	ldr	r3, [pc, #76]	; (800a764 <mem_free+0xf8>)
 800a718:	f240 2295 	movw	r2, #661	; 0x295
 800a71c:	4919      	ldr	r1, [pc, #100]	; (800a784 <mem_free+0x118>)
 800a71e:	4813      	ldr	r0, [pc, #76]	; (800a76c <mem_free+0x100>)
 800a720:	f00a fe08 	bl	8015334 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a724:	4815      	ldr	r0, [pc, #84]	; (800a77c <mem_free+0x110>)
 800a726:	f00a fd52 	bl	80151ce <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a72a:	f00a fd83 	bl	8015234 <sys_arch_protect>
 800a72e:	61b8      	str	r0, [r7, #24]
 800a730:	69b8      	ldr	r0, [r7, #24]
 800a732:	f00a fd8d 	bl	8015250 <sys_arch_unprotect>
    return;
 800a736:	e012      	b.n	800a75e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a738:	69fb      	ldr	r3, [r7, #28]
 800a73a:	2200      	movs	r2, #0
 800a73c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a73e:	4b12      	ldr	r3, [pc, #72]	; (800a788 <mem_free+0x11c>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	69fa      	ldr	r2, [r7, #28]
 800a744:	429a      	cmp	r2, r3
 800a746:	d202      	bcs.n	800a74e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a748:	4a0f      	ldr	r2, [pc, #60]	; (800a788 <mem_free+0x11c>)
 800a74a:	69fb      	ldr	r3, [r7, #28]
 800a74c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a74e:	69f8      	ldr	r0, [r7, #28]
 800a750:	f7ff fe5c 	bl	800a40c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a754:	4809      	ldr	r0, [pc, #36]	; (800a77c <mem_free+0x110>)
 800a756:	f00a fd3a 	bl	80151ce <sys_mutex_unlock>
 800a75a:	e000      	b.n	800a75e <mem_free+0xf2>
    return;
 800a75c:	bf00      	nop
}
 800a75e:	3720      	adds	r7, #32
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}
 800a764:	08017300 	.word	0x08017300
 800a768:	080173f0 	.word	0x080173f0
 800a76c:	08017348 	.word	0x08017348
 800a770:	20004058 	.word	0x20004058
 800a774:	2000405c 	.word	0x2000405c
 800a778:	08017414 	.word	0x08017414
 800a77c:	20004060 	.word	0x20004060
 800a780:	08017430 	.word	0x08017430
 800a784:	08017458 	.word	0x08017458
 800a788:	20004064 	.word	0x20004064

0800a78c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b088      	sub	sp, #32
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	460b      	mov	r3, r1
 800a796:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a798:	887b      	ldrh	r3, [r7, #2]
 800a79a:	3303      	adds	r3, #3
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	f023 0303 	bic.w	r3, r3, #3
 800a7a2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a7a4:	8bfb      	ldrh	r3, [r7, #30]
 800a7a6:	2b0b      	cmp	r3, #11
 800a7a8:	d801      	bhi.n	800a7ae <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a7aa:	230c      	movs	r3, #12
 800a7ac:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a7ae:	8bfb      	ldrh	r3, [r7, #30]
 800a7b0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a7b4:	d803      	bhi.n	800a7be <mem_trim+0x32>
 800a7b6:	8bfa      	ldrh	r2, [r7, #30]
 800a7b8:	887b      	ldrh	r3, [r7, #2]
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d201      	bcs.n	800a7c2 <mem_trim+0x36>
    return NULL;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	e0d8      	b.n	800a974 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a7c2:	4b6e      	ldr	r3, [pc, #440]	; (800a97c <mem_trim+0x1f0>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d304      	bcc.n	800a7d6 <mem_trim+0x4a>
 800a7cc:	4b6c      	ldr	r3, [pc, #432]	; (800a980 <mem_trim+0x1f4>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	687a      	ldr	r2, [r7, #4]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d306      	bcc.n	800a7e4 <mem_trim+0x58>
 800a7d6:	4b6b      	ldr	r3, [pc, #428]	; (800a984 <mem_trim+0x1f8>)
 800a7d8:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a7dc:	496a      	ldr	r1, [pc, #424]	; (800a988 <mem_trim+0x1fc>)
 800a7de:	486b      	ldr	r0, [pc, #428]	; (800a98c <mem_trim+0x200>)
 800a7e0:	f00a fda8 	bl	8015334 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a7e4:	4b65      	ldr	r3, [pc, #404]	; (800a97c <mem_trim+0x1f0>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d304      	bcc.n	800a7f8 <mem_trim+0x6c>
 800a7ee:	4b64      	ldr	r3, [pc, #400]	; (800a980 <mem_trim+0x1f4>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	687a      	ldr	r2, [r7, #4]
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d307      	bcc.n	800a808 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a7f8:	f00a fd1c 	bl	8015234 <sys_arch_protect>
 800a7fc:	60b8      	str	r0, [r7, #8]
 800a7fe:	68b8      	ldr	r0, [r7, #8]
 800a800:	f00a fd26 	bl	8015250 <sys_arch_unprotect>
    return rmem;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	e0b5      	b.n	800a974 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	3b08      	subs	r3, #8
 800a80c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a80e:	69b8      	ldr	r0, [r7, #24]
 800a810:	f7ff fdea 	bl	800a3e8 <mem_to_ptr>
 800a814:	4603      	mov	r3, r0
 800a816:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a818:	69bb      	ldr	r3, [r7, #24]
 800a81a:	881a      	ldrh	r2, [r3, #0]
 800a81c:	8afb      	ldrh	r3, [r7, #22]
 800a81e:	1ad3      	subs	r3, r2, r3
 800a820:	b29b      	uxth	r3, r3
 800a822:	3b08      	subs	r3, #8
 800a824:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a826:	8bfa      	ldrh	r2, [r7, #30]
 800a828:	8abb      	ldrh	r3, [r7, #20]
 800a82a:	429a      	cmp	r2, r3
 800a82c:	d906      	bls.n	800a83c <mem_trim+0xb0>
 800a82e:	4b55      	ldr	r3, [pc, #340]	; (800a984 <mem_trim+0x1f8>)
 800a830:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a834:	4956      	ldr	r1, [pc, #344]	; (800a990 <mem_trim+0x204>)
 800a836:	4855      	ldr	r0, [pc, #340]	; (800a98c <mem_trim+0x200>)
 800a838:	f00a fd7c 	bl	8015334 <iprintf>
  if (newsize > size) {
 800a83c:	8bfa      	ldrh	r2, [r7, #30]
 800a83e:	8abb      	ldrh	r3, [r7, #20]
 800a840:	429a      	cmp	r2, r3
 800a842:	d901      	bls.n	800a848 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800a844:	2300      	movs	r3, #0
 800a846:	e095      	b.n	800a974 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800a848:	8bfa      	ldrh	r2, [r7, #30]
 800a84a:	8abb      	ldrh	r3, [r7, #20]
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d101      	bne.n	800a854 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	e08f      	b.n	800a974 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a854:	484f      	ldr	r0, [pc, #316]	; (800a994 <mem_trim+0x208>)
 800a856:	f00a fcab 	bl	80151b0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800a85a:	69bb      	ldr	r3, [r7, #24]
 800a85c:	881b      	ldrh	r3, [r3, #0]
 800a85e:	4618      	mov	r0, r3
 800a860:	f7ff fdb0 	bl	800a3c4 <ptr_to_mem>
 800a864:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	791b      	ldrb	r3, [r3, #4]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d13f      	bne.n	800a8ee <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a86e:	69bb      	ldr	r3, [r7, #24]
 800a870:	881b      	ldrh	r3, [r3, #0]
 800a872:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a876:	d106      	bne.n	800a886 <mem_trim+0xfa>
 800a878:	4b42      	ldr	r3, [pc, #264]	; (800a984 <mem_trim+0x1f8>)
 800a87a:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a87e:	4946      	ldr	r1, [pc, #280]	; (800a998 <mem_trim+0x20c>)
 800a880:	4842      	ldr	r0, [pc, #264]	; (800a98c <mem_trim+0x200>)
 800a882:	f00a fd57 	bl	8015334 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	881b      	ldrh	r3, [r3, #0]
 800a88a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a88c:	8afa      	ldrh	r2, [r7, #22]
 800a88e:	8bfb      	ldrh	r3, [r7, #30]
 800a890:	4413      	add	r3, r2
 800a892:	b29b      	uxth	r3, r3
 800a894:	3308      	adds	r3, #8
 800a896:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a898:	4b40      	ldr	r3, [pc, #256]	; (800a99c <mem_trim+0x210>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	693a      	ldr	r2, [r7, #16]
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d106      	bne.n	800a8b0 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800a8a2:	89fb      	ldrh	r3, [r7, #14]
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f7ff fd8d 	bl	800a3c4 <ptr_to_mem>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	4a3b      	ldr	r2, [pc, #236]	; (800a99c <mem_trim+0x210>)
 800a8ae:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a8b0:	89fb      	ldrh	r3, [r7, #14]
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f7ff fd86 	bl	800a3c4 <ptr_to_mem>
 800a8b8:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	89ba      	ldrh	r2, [r7, #12]
 800a8c4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	8afa      	ldrh	r2, [r7, #22]
 800a8ca:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a8cc:	69bb      	ldr	r3, [r7, #24]
 800a8ce:	89fa      	ldrh	r2, [r7, #14]
 800a8d0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	881b      	ldrh	r3, [r3, #0]
 800a8d6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a8da:	d047      	beq.n	800a96c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	881b      	ldrh	r3, [r3, #0]
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f7ff fd6f 	bl	800a3c4 <ptr_to_mem>
 800a8e6:	4602      	mov	r2, r0
 800a8e8:	89fb      	ldrh	r3, [r7, #14]
 800a8ea:	8053      	strh	r3, [r2, #2]
 800a8ec:	e03e      	b.n	800a96c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a8ee:	8bfb      	ldrh	r3, [r7, #30]
 800a8f0:	f103 0214 	add.w	r2, r3, #20
 800a8f4:	8abb      	ldrh	r3, [r7, #20]
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d838      	bhi.n	800a96c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a8fa:	8afa      	ldrh	r2, [r7, #22]
 800a8fc:	8bfb      	ldrh	r3, [r7, #30]
 800a8fe:	4413      	add	r3, r2
 800a900:	b29b      	uxth	r3, r3
 800a902:	3308      	adds	r3, #8
 800a904:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a906:	69bb      	ldr	r3, [r7, #24]
 800a908:	881b      	ldrh	r3, [r3, #0]
 800a90a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a90e:	d106      	bne.n	800a91e <mem_trim+0x192>
 800a910:	4b1c      	ldr	r3, [pc, #112]	; (800a984 <mem_trim+0x1f8>)
 800a912:	f240 3216 	movw	r2, #790	; 0x316
 800a916:	4920      	ldr	r1, [pc, #128]	; (800a998 <mem_trim+0x20c>)
 800a918:	481c      	ldr	r0, [pc, #112]	; (800a98c <mem_trim+0x200>)
 800a91a:	f00a fd0b 	bl	8015334 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a91e:	89fb      	ldrh	r3, [r7, #14]
 800a920:	4618      	mov	r0, r3
 800a922:	f7ff fd4f 	bl	800a3c4 <ptr_to_mem>
 800a926:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a928:	4b1c      	ldr	r3, [pc, #112]	; (800a99c <mem_trim+0x210>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	693a      	ldr	r2, [r7, #16]
 800a92e:	429a      	cmp	r2, r3
 800a930:	d202      	bcs.n	800a938 <mem_trim+0x1ac>
      lfree = mem2;
 800a932:	4a1a      	ldr	r2, [pc, #104]	; (800a99c <mem_trim+0x210>)
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	2200      	movs	r2, #0
 800a93c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a93e:	69bb      	ldr	r3, [r7, #24]
 800a940:	881a      	ldrh	r2, [r3, #0]
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	8afa      	ldrh	r2, [r7, #22]
 800a94a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a94c:	69bb      	ldr	r3, [r7, #24]
 800a94e:	89fa      	ldrh	r2, [r7, #14]
 800a950:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	881b      	ldrh	r3, [r3, #0]
 800a956:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a95a:	d007      	beq.n	800a96c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	881b      	ldrh	r3, [r3, #0]
 800a960:	4618      	mov	r0, r3
 800a962:	f7ff fd2f 	bl	800a3c4 <ptr_to_mem>
 800a966:	4602      	mov	r2, r0
 800a968:	89fb      	ldrh	r3, [r7, #14]
 800a96a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a96c:	4809      	ldr	r0, [pc, #36]	; (800a994 <mem_trim+0x208>)
 800a96e:	f00a fc2e 	bl	80151ce <sys_mutex_unlock>
  return rmem;
 800a972:	687b      	ldr	r3, [r7, #4]
}
 800a974:	4618      	mov	r0, r3
 800a976:	3720      	adds	r7, #32
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}
 800a97c:	20004058 	.word	0x20004058
 800a980:	2000405c 	.word	0x2000405c
 800a984:	08017300 	.word	0x08017300
 800a988:	0801748c 	.word	0x0801748c
 800a98c:	08017348 	.word	0x08017348
 800a990:	080174a4 	.word	0x080174a4
 800a994:	20004060 	.word	0x20004060
 800a998:	080174c4 	.word	0x080174c4
 800a99c:	20004064 	.word	0x20004064

0800a9a0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b088      	sub	sp, #32
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a9aa:	88fb      	ldrh	r3, [r7, #6]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d101      	bne.n	800a9b4 <mem_malloc+0x14>
    return NULL;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	e0e2      	b.n	800ab7a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a9b4:	88fb      	ldrh	r3, [r7, #6]
 800a9b6:	3303      	adds	r3, #3
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	f023 0303 	bic.w	r3, r3, #3
 800a9be:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a9c0:	8bbb      	ldrh	r3, [r7, #28]
 800a9c2:	2b0b      	cmp	r3, #11
 800a9c4:	d801      	bhi.n	800a9ca <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a9c6:	230c      	movs	r3, #12
 800a9c8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a9ca:	8bbb      	ldrh	r3, [r7, #28]
 800a9cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a9d0:	d803      	bhi.n	800a9da <mem_malloc+0x3a>
 800a9d2:	8bba      	ldrh	r2, [r7, #28]
 800a9d4:	88fb      	ldrh	r3, [r7, #6]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d201      	bcs.n	800a9de <mem_malloc+0x3e>
    return NULL;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	e0cd      	b.n	800ab7a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800a9de:	4869      	ldr	r0, [pc, #420]	; (800ab84 <mem_malloc+0x1e4>)
 800a9e0:	f00a fbe6 	bl	80151b0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a9e4:	4b68      	ldr	r3, [pc, #416]	; (800ab88 <mem_malloc+0x1e8>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f7ff fcfd 	bl	800a3e8 <mem_to_ptr>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	83fb      	strh	r3, [r7, #30]
 800a9f2:	e0b7      	b.n	800ab64 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a9f4:	8bfb      	ldrh	r3, [r7, #30]
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f7ff fce4 	bl	800a3c4 <ptr_to_mem>
 800a9fc:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	791b      	ldrb	r3, [r3, #4]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	f040 80a7 	bne.w	800ab56 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	881b      	ldrh	r3, [r3, #0]
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	8bfb      	ldrh	r3, [r7, #30]
 800aa10:	1ad3      	subs	r3, r2, r3
 800aa12:	f1a3 0208 	sub.w	r2, r3, #8
 800aa16:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	f0c0 809c 	bcc.w	800ab56 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	881b      	ldrh	r3, [r3, #0]
 800aa22:	461a      	mov	r2, r3
 800aa24:	8bfb      	ldrh	r3, [r7, #30]
 800aa26:	1ad3      	subs	r3, r2, r3
 800aa28:	f1a3 0208 	sub.w	r2, r3, #8
 800aa2c:	8bbb      	ldrh	r3, [r7, #28]
 800aa2e:	3314      	adds	r3, #20
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d333      	bcc.n	800aa9c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800aa34:	8bfa      	ldrh	r2, [r7, #30]
 800aa36:	8bbb      	ldrh	r3, [r7, #28]
 800aa38:	4413      	add	r3, r2
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	3308      	adds	r3, #8
 800aa3e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800aa40:	8a7b      	ldrh	r3, [r7, #18]
 800aa42:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aa46:	d106      	bne.n	800aa56 <mem_malloc+0xb6>
 800aa48:	4b50      	ldr	r3, [pc, #320]	; (800ab8c <mem_malloc+0x1ec>)
 800aa4a:	f240 3287 	movw	r2, #903	; 0x387
 800aa4e:	4950      	ldr	r1, [pc, #320]	; (800ab90 <mem_malloc+0x1f0>)
 800aa50:	4850      	ldr	r0, [pc, #320]	; (800ab94 <mem_malloc+0x1f4>)
 800aa52:	f00a fc6f 	bl	8015334 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800aa56:	8a7b      	ldrh	r3, [r7, #18]
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f7ff fcb3 	bl	800a3c4 <ptr_to_mem>
 800aa5e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2200      	movs	r2, #0
 800aa64:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	881a      	ldrh	r2, [r3, #0]
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	8bfa      	ldrh	r2, [r7, #30]
 800aa72:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	8a7a      	ldrh	r2, [r7, #18]
 800aa78:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	2201      	movs	r2, #1
 800aa7e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	881b      	ldrh	r3, [r3, #0]
 800aa84:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aa88:	d00b      	beq.n	800aaa2 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	881b      	ldrh	r3, [r3, #0]
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f7ff fc98 	bl	800a3c4 <ptr_to_mem>
 800aa94:	4602      	mov	r2, r0
 800aa96:	8a7b      	ldrh	r3, [r7, #18]
 800aa98:	8053      	strh	r3, [r2, #2]
 800aa9a:	e002      	b.n	800aaa2 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800aaa2:	4b39      	ldr	r3, [pc, #228]	; (800ab88 <mem_malloc+0x1e8>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	697a      	ldr	r2, [r7, #20]
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d127      	bne.n	800aafc <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800aaac:	4b36      	ldr	r3, [pc, #216]	; (800ab88 <mem_malloc+0x1e8>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800aab2:	e005      	b.n	800aac0 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800aab4:	69bb      	ldr	r3, [r7, #24]
 800aab6:	881b      	ldrh	r3, [r3, #0]
 800aab8:	4618      	mov	r0, r3
 800aaba:	f7ff fc83 	bl	800a3c4 <ptr_to_mem>
 800aabe:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800aac0:	69bb      	ldr	r3, [r7, #24]
 800aac2:	791b      	ldrb	r3, [r3, #4]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d004      	beq.n	800aad2 <mem_malloc+0x132>
 800aac8:	4b33      	ldr	r3, [pc, #204]	; (800ab98 <mem_malloc+0x1f8>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	69ba      	ldr	r2, [r7, #24]
 800aace:	429a      	cmp	r2, r3
 800aad0:	d1f0      	bne.n	800aab4 <mem_malloc+0x114>
          }
          lfree = cur;
 800aad2:	4a2d      	ldr	r2, [pc, #180]	; (800ab88 <mem_malloc+0x1e8>)
 800aad4:	69bb      	ldr	r3, [r7, #24]
 800aad6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800aad8:	4b2b      	ldr	r3, [pc, #172]	; (800ab88 <mem_malloc+0x1e8>)
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	4b2e      	ldr	r3, [pc, #184]	; (800ab98 <mem_malloc+0x1f8>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d00b      	beq.n	800aafc <mem_malloc+0x15c>
 800aae4:	4b28      	ldr	r3, [pc, #160]	; (800ab88 <mem_malloc+0x1e8>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	791b      	ldrb	r3, [r3, #4]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d006      	beq.n	800aafc <mem_malloc+0x15c>
 800aaee:	4b27      	ldr	r3, [pc, #156]	; (800ab8c <mem_malloc+0x1ec>)
 800aaf0:	f240 32b5 	movw	r2, #949	; 0x3b5
 800aaf4:	4929      	ldr	r1, [pc, #164]	; (800ab9c <mem_malloc+0x1fc>)
 800aaf6:	4827      	ldr	r0, [pc, #156]	; (800ab94 <mem_malloc+0x1f4>)
 800aaf8:	f00a fc1c 	bl	8015334 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800aafc:	4821      	ldr	r0, [pc, #132]	; (800ab84 <mem_malloc+0x1e4>)
 800aafe:	f00a fb66 	bl	80151ce <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ab02:	8bba      	ldrh	r2, [r7, #28]
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	4413      	add	r3, r2
 800ab08:	3308      	adds	r3, #8
 800ab0a:	4a23      	ldr	r2, [pc, #140]	; (800ab98 <mem_malloc+0x1f8>)
 800ab0c:	6812      	ldr	r2, [r2, #0]
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d906      	bls.n	800ab20 <mem_malloc+0x180>
 800ab12:	4b1e      	ldr	r3, [pc, #120]	; (800ab8c <mem_malloc+0x1ec>)
 800ab14:	f240 32b9 	movw	r2, #953	; 0x3b9
 800ab18:	4921      	ldr	r1, [pc, #132]	; (800aba0 <mem_malloc+0x200>)
 800ab1a:	481e      	ldr	r0, [pc, #120]	; (800ab94 <mem_malloc+0x1f4>)
 800ab1c:	f00a fc0a 	bl	8015334 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	f003 0303 	and.w	r3, r3, #3
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d006      	beq.n	800ab38 <mem_malloc+0x198>
 800ab2a:	4b18      	ldr	r3, [pc, #96]	; (800ab8c <mem_malloc+0x1ec>)
 800ab2c:	f240 32bb 	movw	r2, #955	; 0x3bb
 800ab30:	491c      	ldr	r1, [pc, #112]	; (800aba4 <mem_malloc+0x204>)
 800ab32:	4818      	ldr	r0, [pc, #96]	; (800ab94 <mem_malloc+0x1f4>)
 800ab34:	f00a fbfe 	bl	8015334 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	f003 0303 	and.w	r3, r3, #3
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d006      	beq.n	800ab50 <mem_malloc+0x1b0>
 800ab42:	4b12      	ldr	r3, [pc, #72]	; (800ab8c <mem_malloc+0x1ec>)
 800ab44:	f240 32bd 	movw	r2, #957	; 0x3bd
 800ab48:	4917      	ldr	r1, [pc, #92]	; (800aba8 <mem_malloc+0x208>)
 800ab4a:	4812      	ldr	r0, [pc, #72]	; (800ab94 <mem_malloc+0x1f4>)
 800ab4c:	f00a fbf2 	bl	8015334 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	3308      	adds	r3, #8
 800ab54:	e011      	b.n	800ab7a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800ab56:	8bfb      	ldrh	r3, [r7, #30]
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f7ff fc33 	bl	800a3c4 <ptr_to_mem>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	881b      	ldrh	r3, [r3, #0]
 800ab62:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ab64:	8bfa      	ldrh	r2, [r7, #30]
 800ab66:	8bbb      	ldrh	r3, [r7, #28]
 800ab68:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	f4ff af41 	bcc.w	800a9f4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800ab72:	4804      	ldr	r0, [pc, #16]	; (800ab84 <mem_malloc+0x1e4>)
 800ab74:	f00a fb2b 	bl	80151ce <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800ab78:	2300      	movs	r3, #0
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3720      	adds	r7, #32
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	20004060 	.word	0x20004060
 800ab88:	20004064 	.word	0x20004064
 800ab8c:	08017300 	.word	0x08017300
 800ab90:	080174c4 	.word	0x080174c4
 800ab94:	08017348 	.word	0x08017348
 800ab98:	2000405c 	.word	0x2000405c
 800ab9c:	080174d8 	.word	0x080174d8
 800aba0:	080174f4 	.word	0x080174f4
 800aba4:	08017524 	.word	0x08017524
 800aba8:	08017554 	.word	0x08017554

0800abac <mem_calloc>:
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *
mem_calloc(mem_size_t count, mem_size_t size)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b084      	sub	sp, #16
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	4603      	mov	r3, r0
 800abb4:	460a      	mov	r2, r1
 800abb6:	80fb      	strh	r3, [r7, #6]
 800abb8:	4613      	mov	r3, r2
 800abba:	80bb      	strh	r3, [r7, #4]
  void *p;
  size_t alloc_size = (size_t)count * (size_t)size;
 800abbc:	88fb      	ldrh	r3, [r7, #6]
 800abbe:	88ba      	ldrh	r2, [r7, #4]
 800abc0:	fb02 f303 	mul.w	r3, r2, r3
 800abc4:	60fb      	str	r3, [r7, #12]

  if ((size_t)(mem_size_t)alloc_size != alloc_size) {
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	b29b      	uxth	r3, r3
 800abca:	461a      	mov	r2, r3
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	4293      	cmp	r3, r2
 800abd0:	d001      	beq.n	800abd6 <mem_calloc+0x2a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_calloc: could not allocate %"SZT_F" bytes\n", alloc_size));
    return NULL;
 800abd2:	2300      	movs	r3, #0
 800abd4:	e00e      	b.n	800abf4 <mem_calloc+0x48>
  }

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc((mem_size_t)alloc_size);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	b29b      	uxth	r3, r3
 800abda:	4618      	mov	r0, r3
 800abdc:	f7ff fee0 	bl	800a9a0 <mem_malloc>
 800abe0:	60b8      	str	r0, [r7, #8]
  if (p) {
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d004      	beq.n	800abf2 <mem_calloc+0x46>
    /* zero the memory */
    memset(p, 0, alloc_size);
 800abe8:	68fa      	ldr	r2, [r7, #12]
 800abea:	2100      	movs	r1, #0
 800abec:	68b8      	ldr	r0, [r7, #8]
 800abee:	f00a fb99 	bl	8015324 <memset>
  }
  return p;
 800abf2:	68bb      	ldr	r3, [r7, #8]
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3710      	adds	r7, #16
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b085      	sub	sp, #20
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	689b      	ldr	r3, [r3, #8]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	3303      	adds	r3, #3
 800ac12:	f023 0303 	bic.w	r3, r3, #3
 800ac16:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800ac18:	2300      	movs	r3, #0
 800ac1a:	60fb      	str	r3, [r7, #12]
 800ac1c:	e011      	b.n	800ac42 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	689b      	ldr	r3, [r3, #8]
 800ac22:	681a      	ldr	r2, [r3, #0]
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	689b      	ldr	r3, [r3, #8]
 800ac2c:	68ba      	ldr	r2, [r7, #8]
 800ac2e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	881b      	ldrh	r3, [r3, #0]
 800ac34:	461a      	mov	r2, r3
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	4413      	add	r3, r2
 800ac3a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	3301      	adds	r3, #1
 800ac40:	60fb      	str	r3, [r7, #12]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	885b      	ldrh	r3, [r3, #2]
 800ac46:	461a      	mov	r2, r3
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	dbe7      	blt.n	800ac1e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800ac4e:	bf00      	nop
 800ac50:	bf00      	nop
 800ac52:	3714      	adds	r7, #20
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr

0800ac5c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b082      	sub	sp, #8
 800ac60:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ac62:	2300      	movs	r3, #0
 800ac64:	80fb      	strh	r3, [r7, #6]
 800ac66:	e009      	b.n	800ac7c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800ac68:	88fb      	ldrh	r3, [r7, #6]
 800ac6a:	4a08      	ldr	r2, [pc, #32]	; (800ac8c <memp_init+0x30>)
 800ac6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac70:	4618      	mov	r0, r3
 800ac72:	f7ff ffc3 	bl	800abfc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ac76:	88fb      	ldrh	r3, [r7, #6]
 800ac78:	3301      	adds	r3, #1
 800ac7a:	80fb      	strh	r3, [r7, #6]
 800ac7c:	88fb      	ldrh	r3, [r7, #6]
 800ac7e:	2b0c      	cmp	r3, #12
 800ac80:	d9f2      	bls.n	800ac68 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800ac82:	bf00      	nop
 800ac84:	bf00      	nop
 800ac86:	3708      	adds	r7, #8
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}
 800ac8c:	08019ddc 	.word	0x08019ddc

0800ac90 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800ac98:	f00a facc 	bl	8015234 <sys_arch_protect>
 800ac9c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	689b      	ldr	r3, [r3, #8]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d015      	beq.n	800acd8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	689b      	ldr	r3, [r3, #8]
 800acb0:	68ba      	ldr	r2, [r7, #8]
 800acb2:	6812      	ldr	r2, [r2, #0]
 800acb4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	f003 0303 	and.w	r3, r3, #3
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d006      	beq.n	800acce <do_memp_malloc_pool+0x3e>
 800acc0:	4b09      	ldr	r3, [pc, #36]	; (800ace8 <do_memp_malloc_pool+0x58>)
 800acc2:	f44f 728c 	mov.w	r2, #280	; 0x118
 800acc6:	4909      	ldr	r1, [pc, #36]	; (800acec <do_memp_malloc_pool+0x5c>)
 800acc8:	4809      	ldr	r0, [pc, #36]	; (800acf0 <do_memp_malloc_pool+0x60>)
 800acca:	f00a fb33 	bl	8015334 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800acce:	68f8      	ldr	r0, [r7, #12]
 800acd0:	f00a fabe 	bl	8015250 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	e003      	b.n	800ace0 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800acd8:	68f8      	ldr	r0, [r7, #12]
 800acda:	f00a fab9 	bl	8015250 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800acde:	2300      	movs	r3, #0
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3710      	adds	r7, #16
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}
 800ace8:	08017578 	.word	0x08017578
 800acec:	080175a8 	.word	0x080175a8
 800acf0:	080175cc 	.word	0x080175cc

0800acf4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	4603      	mov	r3, r0
 800acfc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800acfe:	79fb      	ldrb	r3, [r7, #7]
 800ad00:	2b0c      	cmp	r3, #12
 800ad02:	d908      	bls.n	800ad16 <memp_malloc+0x22>
 800ad04:	4b0a      	ldr	r3, [pc, #40]	; (800ad30 <memp_malloc+0x3c>)
 800ad06:	f240 1257 	movw	r2, #343	; 0x157
 800ad0a:	490a      	ldr	r1, [pc, #40]	; (800ad34 <memp_malloc+0x40>)
 800ad0c:	480a      	ldr	r0, [pc, #40]	; (800ad38 <memp_malloc+0x44>)
 800ad0e:	f00a fb11 	bl	8015334 <iprintf>
 800ad12:	2300      	movs	r3, #0
 800ad14:	e008      	b.n	800ad28 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ad16:	79fb      	ldrb	r3, [r7, #7]
 800ad18:	4a08      	ldr	r2, [pc, #32]	; (800ad3c <memp_malloc+0x48>)
 800ad1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f7ff ffb6 	bl	800ac90 <do_memp_malloc_pool>
 800ad24:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ad26:	68fb      	ldr	r3, [r7, #12]
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3710      	adds	r7, #16
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}
 800ad30:	08017578 	.word	0x08017578
 800ad34:	08017608 	.word	0x08017608
 800ad38:	080175cc 	.word	0x080175cc
 800ad3c:	08019ddc 	.word	0x08019ddc

0800ad40 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b084      	sub	sp, #16
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	f003 0303 	and.w	r3, r3, #3
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d006      	beq.n	800ad62 <do_memp_free_pool+0x22>
 800ad54:	4b0d      	ldr	r3, [pc, #52]	; (800ad8c <do_memp_free_pool+0x4c>)
 800ad56:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800ad5a:	490d      	ldr	r1, [pc, #52]	; (800ad90 <do_memp_free_pool+0x50>)
 800ad5c:	480d      	ldr	r0, [pc, #52]	; (800ad94 <do_memp_free_pool+0x54>)
 800ad5e:	f00a fae9 	bl	8015334 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800ad66:	f00a fa65 	bl	8015234 <sys_arch_protect>
 800ad6a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	689b      	ldr	r3, [r3, #8]
 800ad70:	681a      	ldr	r2, [r3, #0]
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	689b      	ldr	r3, [r3, #8]
 800ad7a:	68fa      	ldr	r2, [r7, #12]
 800ad7c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800ad7e:	68b8      	ldr	r0, [r7, #8]
 800ad80:	f00a fa66 	bl	8015250 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800ad84:	bf00      	nop
 800ad86:	3710      	adds	r7, #16
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}
 800ad8c:	08017578 	.word	0x08017578
 800ad90:	08017628 	.word	0x08017628
 800ad94:	080175cc 	.word	0x080175cc

0800ad98 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	4603      	mov	r3, r0
 800ada0:	6039      	str	r1, [r7, #0]
 800ada2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ada4:	79fb      	ldrb	r3, [r7, #7]
 800ada6:	2b0c      	cmp	r3, #12
 800ada8:	d907      	bls.n	800adba <memp_free+0x22>
 800adaa:	4b0c      	ldr	r3, [pc, #48]	; (800addc <memp_free+0x44>)
 800adac:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800adb0:	490b      	ldr	r1, [pc, #44]	; (800ade0 <memp_free+0x48>)
 800adb2:	480c      	ldr	r0, [pc, #48]	; (800ade4 <memp_free+0x4c>)
 800adb4:	f00a fabe 	bl	8015334 <iprintf>
 800adb8:	e00c      	b.n	800add4 <memp_free+0x3c>

  if (mem == NULL) {
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d008      	beq.n	800add2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800adc0:	79fb      	ldrb	r3, [r7, #7]
 800adc2:	4a09      	ldr	r2, [pc, #36]	; (800ade8 <memp_free+0x50>)
 800adc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800adc8:	6839      	ldr	r1, [r7, #0]
 800adca:	4618      	mov	r0, r3
 800adcc:	f7ff ffb8 	bl	800ad40 <do_memp_free_pool>
 800add0:	e000      	b.n	800add4 <memp_free+0x3c>
    return;
 800add2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800add4:	3708      	adds	r7, #8
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop
 800addc:	08017578 	.word	0x08017578
 800ade0:	08017648 	.word	0x08017648
 800ade4:	080175cc 	.word	0x080175cc
 800ade8:	08019ddc 	.word	0x08019ddc

0800adec <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800adec:	b480      	push	{r7}
 800adee:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800adf0:	bf00      	nop
 800adf2:	46bd      	mov	sp, r7
 800adf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf8:	4770      	bx	lr
	...

0800adfc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b086      	sub	sp, #24
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	60f8      	str	r0, [r7, #12]
 800ae04:	60b9      	str	r1, [r7, #8]
 800ae06:	607a      	str	r2, [r7, #4]
 800ae08:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d108      	bne.n	800ae22 <netif_add+0x26>
 800ae10:	4b57      	ldr	r3, [pc, #348]	; (800af70 <netif_add+0x174>)
 800ae12:	f240 1227 	movw	r2, #295	; 0x127
 800ae16:	4957      	ldr	r1, [pc, #348]	; (800af74 <netif_add+0x178>)
 800ae18:	4857      	ldr	r0, [pc, #348]	; (800af78 <netif_add+0x17c>)
 800ae1a:	f00a fa8b 	bl	8015334 <iprintf>
 800ae1e:	2300      	movs	r3, #0
 800ae20:	e0a2      	b.n	800af68 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ae22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d108      	bne.n	800ae3a <netif_add+0x3e>
 800ae28:	4b51      	ldr	r3, [pc, #324]	; (800af70 <netif_add+0x174>)
 800ae2a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800ae2e:	4953      	ldr	r1, [pc, #332]	; (800af7c <netif_add+0x180>)
 800ae30:	4851      	ldr	r0, [pc, #324]	; (800af78 <netif_add+0x17c>)
 800ae32:	f00a fa7f 	bl	8015334 <iprintf>
 800ae36:	2300      	movs	r3, #0
 800ae38:	e096      	b.n	800af68 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d101      	bne.n	800ae44 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800ae40:	4b4f      	ldr	r3, [pc, #316]	; (800af80 <netif_add+0x184>)
 800ae42:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d101      	bne.n	800ae4e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800ae4a:	4b4d      	ldr	r3, [pc, #308]	; (800af80 <netif_add+0x184>)
 800ae4c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d101      	bne.n	800ae58 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800ae54:	4b4a      	ldr	r3, [pc, #296]	; (800af80 <netif_add+0x184>)
 800ae56:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2200      	movs	r2, #0
 800ae62:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	2200      	movs	r2, #0
 800ae68:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	4a45      	ldr	r2, [pc, #276]	; (800af84 <netif_add+0x188>)
 800ae6e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2200      	movs	r2, #0
 800ae74:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2200      	movs	r2, #0
 800ae82:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	6a3a      	ldr	r2, [r7, #32]
 800ae88:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800ae8a:	4b3f      	ldr	r3, [pc, #252]	; (800af88 <netif_add+0x18c>)
 800ae8c:	781a      	ldrb	r2, [r3, #0]
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae98:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	687a      	ldr	r2, [r7, #4]
 800ae9e:	68b9      	ldr	r1, [r7, #8]
 800aea0:	68f8      	ldr	r0, [r7, #12]
 800aea2:	f000 f913 	bl	800b0cc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800aea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea8:	68f8      	ldr	r0, [r7, #12]
 800aeaa:	4798      	blx	r3
 800aeac:	4603      	mov	r3, r0
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d001      	beq.n	800aeb6 <netif_add+0xba>
    return NULL;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	e058      	b.n	800af68 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aebc:	2bff      	cmp	r3, #255	; 0xff
 800aebe:	d103      	bne.n	800aec8 <netif_add+0xcc>
        netif->num = 0;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2200      	movs	r2, #0
 800aec4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800aec8:	2300      	movs	r3, #0
 800aeca:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800aecc:	4b2f      	ldr	r3, [pc, #188]	; (800af8c <netif_add+0x190>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	617b      	str	r3, [r7, #20]
 800aed2:	e02b      	b.n	800af2c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800aed4:	697a      	ldr	r2, [r7, #20]
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d106      	bne.n	800aeea <netif_add+0xee>
 800aedc:	4b24      	ldr	r3, [pc, #144]	; (800af70 <netif_add+0x174>)
 800aede:	f240 128b 	movw	r2, #395	; 0x18b
 800aee2:	492b      	ldr	r1, [pc, #172]	; (800af90 <netif_add+0x194>)
 800aee4:	4824      	ldr	r0, [pc, #144]	; (800af78 <netif_add+0x17c>)
 800aee6:	f00a fa25 	bl	8015334 <iprintf>
        num_netifs++;
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	3301      	adds	r3, #1
 800aeee:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	2bff      	cmp	r3, #255	; 0xff
 800aef4:	dd06      	ble.n	800af04 <netif_add+0x108>
 800aef6:	4b1e      	ldr	r3, [pc, #120]	; (800af70 <netif_add+0x174>)
 800aef8:	f240 128d 	movw	r2, #397	; 0x18d
 800aefc:	4925      	ldr	r1, [pc, #148]	; (800af94 <netif_add+0x198>)
 800aefe:	481e      	ldr	r0, [pc, #120]	; (800af78 <netif_add+0x17c>)
 800af00:	f00a fa18 	bl	8015334 <iprintf>
        if (netif2->num == netif->num) {
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800af10:	429a      	cmp	r2, r3
 800af12:	d108      	bne.n	800af26 <netif_add+0x12a>
          netif->num++;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800af1a:	3301      	adds	r3, #1
 800af1c:	b2da      	uxtb	r2, r3
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800af24:	e005      	b.n	800af32 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	617b      	str	r3, [r7, #20]
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d1d0      	bne.n	800aed4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d1be      	bne.n	800aeb6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800af3e:	2bfe      	cmp	r3, #254	; 0xfe
 800af40:	d103      	bne.n	800af4a <netif_add+0x14e>
    netif_num = 0;
 800af42:	4b11      	ldr	r3, [pc, #68]	; (800af88 <netif_add+0x18c>)
 800af44:	2200      	movs	r2, #0
 800af46:	701a      	strb	r2, [r3, #0]
 800af48:	e006      	b.n	800af58 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800af50:	3301      	adds	r3, #1
 800af52:	b2da      	uxtb	r2, r3
 800af54:	4b0c      	ldr	r3, [pc, #48]	; (800af88 <netif_add+0x18c>)
 800af56:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800af58:	4b0c      	ldr	r3, [pc, #48]	; (800af8c <netif_add+0x190>)
 800af5a:	681a      	ldr	r2, [r3, #0]
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800af60:	4a0a      	ldr	r2, [pc, #40]	; (800af8c <netif_add+0x190>)
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800af66:	68fb      	ldr	r3, [r7, #12]
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3718      	adds	r7, #24
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}
 800af70:	08017664 	.word	0x08017664
 800af74:	080176f8 	.word	0x080176f8
 800af78:	080176b4 	.word	0x080176b4
 800af7c:	08017714 	.word	0x08017714
 800af80:	08019e50 	.word	0x08019e50
 800af84:	0800b3a7 	.word	0x0800b3a7
 800af88:	2000409c 	.word	0x2000409c
 800af8c:	2000ab08 	.word	0x2000ab08
 800af90:	08017738 	.word	0x08017738
 800af94:	0801774c 	.word	0x0801774c

0800af98 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b082      	sub	sp, #8
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800afa2:	6839      	ldr	r1, [r7, #0]
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f002 fe8d 	bl	800dcc4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800afaa:	6839      	ldr	r1, [r7, #0]
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f007 fc2f 	bl	8012810 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800afb2:	bf00      	nop
 800afb4:	3708      	adds	r7, #8
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}
	...

0800afbc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b086      	sub	sp, #24
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	60f8      	str	r0, [r7, #12]
 800afc4:	60b9      	str	r1, [r7, #8]
 800afc6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d106      	bne.n	800afdc <netif_do_set_ipaddr+0x20>
 800afce:	4b1d      	ldr	r3, [pc, #116]	; (800b044 <netif_do_set_ipaddr+0x88>)
 800afd0:	f240 12cb 	movw	r2, #459	; 0x1cb
 800afd4:	491c      	ldr	r1, [pc, #112]	; (800b048 <netif_do_set_ipaddr+0x8c>)
 800afd6:	481d      	ldr	r0, [pc, #116]	; (800b04c <netif_do_set_ipaddr+0x90>)
 800afd8:	f00a f9ac 	bl	8015334 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d106      	bne.n	800aff0 <netif_do_set_ipaddr+0x34>
 800afe2:	4b18      	ldr	r3, [pc, #96]	; (800b044 <netif_do_set_ipaddr+0x88>)
 800afe4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800afe8:	4917      	ldr	r1, [pc, #92]	; (800b048 <netif_do_set_ipaddr+0x8c>)
 800afea:	4818      	ldr	r0, [pc, #96]	; (800b04c <netif_do_set_ipaddr+0x90>)
 800afec:	f00a f9a2 	bl	8015334 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	3304      	adds	r3, #4
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	429a      	cmp	r2, r3
 800affc:	d01c      	beq.n	800b038 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	3304      	adds	r3, #4
 800b008:	681a      	ldr	r2, [r3, #0]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b00e:	f107 0314 	add.w	r3, r7, #20
 800b012:	4619      	mov	r1, r3
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f7ff ffbf 	bl	800af98 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d002      	beq.n	800b026 <netif_do_set_ipaddr+0x6a>
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	e000      	b.n	800b028 <netif_do_set_ipaddr+0x6c>
 800b026:	2300      	movs	r3, #0
 800b028:	68fa      	ldr	r2, [r7, #12]
 800b02a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b02c:	2101      	movs	r1, #1
 800b02e:	68f8      	ldr	r0, [r7, #12]
 800b030:	f000 f8d2 	bl	800b1d8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b034:	2301      	movs	r3, #1
 800b036:	e000      	b.n	800b03a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b038:	2300      	movs	r3, #0
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	3718      	adds	r7, #24
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
 800b042:	bf00      	nop
 800b044:	08017664 	.word	0x08017664
 800b048:	0801777c 	.word	0x0801777c
 800b04c:	080176b4 	.word	0x080176b4

0800b050 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b050:	b480      	push	{r7}
 800b052:	b085      	sub	sp, #20
 800b054:	af00      	add	r7, sp, #0
 800b056:	60f8      	str	r0, [r7, #12]
 800b058:	60b9      	str	r1, [r7, #8]
 800b05a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	681a      	ldr	r2, [r3, #0]
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	3308      	adds	r3, #8
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	429a      	cmp	r2, r3
 800b068:	d00a      	beq.n	800b080 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d002      	beq.n	800b076 <netif_do_set_netmask+0x26>
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	e000      	b.n	800b078 <netif_do_set_netmask+0x28>
 800b076:	2300      	movs	r3, #0
 800b078:	68fa      	ldr	r2, [r7, #12]
 800b07a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b07c:	2301      	movs	r3, #1
 800b07e:	e000      	b.n	800b082 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b080:	2300      	movs	r3, #0
}
 800b082:	4618      	mov	r0, r3
 800b084:	3714      	adds	r7, #20
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr

0800b08e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b08e:	b480      	push	{r7}
 800b090:	b085      	sub	sp, #20
 800b092:	af00      	add	r7, sp, #0
 800b094:	60f8      	str	r0, [r7, #12]
 800b096:	60b9      	str	r1, [r7, #8]
 800b098:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	681a      	ldr	r2, [r3, #0]
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	330c      	adds	r3, #12
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d00a      	beq.n	800b0be <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d002      	beq.n	800b0b4 <netif_do_set_gw+0x26>
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	e000      	b.n	800b0b6 <netif_do_set_gw+0x28>
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	68fa      	ldr	r2, [r7, #12]
 800b0b8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	e000      	b.n	800b0c0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b0be:	2300      	movs	r3, #0
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3714      	adds	r7, #20
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ca:	4770      	bx	lr

0800b0cc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b088      	sub	sp, #32
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	60f8      	str	r0, [r7, #12]
 800b0d4:	60b9      	str	r1, [r7, #8]
 800b0d6:	607a      	str	r2, [r7, #4]
 800b0d8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d101      	bne.n	800b0ec <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b0e8:	4b1c      	ldr	r3, [pc, #112]	; (800b15c <netif_set_addr+0x90>)
 800b0ea:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d101      	bne.n	800b0f6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b0f2:	4b1a      	ldr	r3, [pc, #104]	; (800b15c <netif_set_addr+0x90>)
 800b0f4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d101      	bne.n	800b100 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b0fc:	4b17      	ldr	r3, [pc, #92]	; (800b15c <netif_set_addr+0x90>)
 800b0fe:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d003      	beq.n	800b10e <netif_set_addr+0x42>
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d101      	bne.n	800b112 <netif_set_addr+0x46>
 800b10e:	2301      	movs	r3, #1
 800b110:	e000      	b.n	800b114 <netif_set_addr+0x48>
 800b112:	2300      	movs	r3, #0
 800b114:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d006      	beq.n	800b12a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b11c:	f107 0310 	add.w	r3, r7, #16
 800b120:	461a      	mov	r2, r3
 800b122:	68b9      	ldr	r1, [r7, #8]
 800b124:	68f8      	ldr	r0, [r7, #12]
 800b126:	f7ff ff49 	bl	800afbc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b12a:	69fa      	ldr	r2, [r7, #28]
 800b12c:	6879      	ldr	r1, [r7, #4]
 800b12e:	68f8      	ldr	r0, [r7, #12]
 800b130:	f7ff ff8e 	bl	800b050 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b134:	69ba      	ldr	r2, [r7, #24]
 800b136:	6839      	ldr	r1, [r7, #0]
 800b138:	68f8      	ldr	r0, [r7, #12]
 800b13a:	f7ff ffa8 	bl	800b08e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d106      	bne.n	800b152 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b144:	f107 0310 	add.w	r3, r7, #16
 800b148:	461a      	mov	r2, r3
 800b14a:	68b9      	ldr	r1, [r7, #8]
 800b14c:	68f8      	ldr	r0, [r7, #12]
 800b14e:	f7ff ff35 	bl	800afbc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b152:	bf00      	nop
 800b154:	3720      	adds	r7, #32
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	08019e50 	.word	0x08019e50

0800b160 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b160:	b480      	push	{r7}
 800b162:	b083      	sub	sp, #12
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b168:	4a04      	ldr	r2, [pc, #16]	; (800b17c <netif_set_default+0x1c>)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b16e:	bf00      	nop
 800b170:	370c      	adds	r7, #12
 800b172:	46bd      	mov	sp, r7
 800b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b178:	4770      	bx	lr
 800b17a:	bf00      	nop
 800b17c:	2000ab0c 	.word	0x2000ab0c

0800b180 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b082      	sub	sp, #8
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d107      	bne.n	800b19e <netif_set_up+0x1e>
 800b18e:	4b0f      	ldr	r3, [pc, #60]	; (800b1cc <netif_set_up+0x4c>)
 800b190:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b194:	490e      	ldr	r1, [pc, #56]	; (800b1d0 <netif_set_up+0x50>)
 800b196:	480f      	ldr	r0, [pc, #60]	; (800b1d4 <netif_set_up+0x54>)
 800b198:	f00a f8cc 	bl	8015334 <iprintf>
 800b19c:	e013      	b.n	800b1c6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b1a4:	f003 0301 	and.w	r3, r3, #1
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d10c      	bne.n	800b1c6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b1b2:	f043 0301 	orr.w	r3, r3, #1
 800b1b6:	b2da      	uxtb	r2, r3
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b1be:	2103      	movs	r1, #3
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f000 f809 	bl	800b1d8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b1c6:	3708      	adds	r7, #8
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}
 800b1cc:	08017664 	.word	0x08017664
 800b1d0:	080177ec 	.word	0x080177ec
 800b1d4:	080176b4 	.word	0x080176b4

0800b1d8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	460b      	mov	r3, r1
 800b1e2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d106      	bne.n	800b1f8 <netif_issue_reports+0x20>
 800b1ea:	4b18      	ldr	r3, [pc, #96]	; (800b24c <netif_issue_reports+0x74>)
 800b1ec:	f240 326d 	movw	r2, #877	; 0x36d
 800b1f0:	4917      	ldr	r1, [pc, #92]	; (800b250 <netif_issue_reports+0x78>)
 800b1f2:	4818      	ldr	r0, [pc, #96]	; (800b254 <netif_issue_reports+0x7c>)
 800b1f4:	f00a f89e 	bl	8015334 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b1fe:	f003 0304 	and.w	r3, r3, #4
 800b202:	2b00      	cmp	r3, #0
 800b204:	d01e      	beq.n	800b244 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b20c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b210:	2b00      	cmp	r3, #0
 800b212:	d017      	beq.n	800b244 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b214:	78fb      	ldrb	r3, [r7, #3]
 800b216:	f003 0301 	and.w	r3, r3, #1
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d013      	beq.n	800b246 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	3304      	adds	r3, #4
 800b222:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b224:	2b00      	cmp	r3, #0
 800b226:	d00e      	beq.n	800b246 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b22e:	f003 0308 	and.w	r3, r3, #8
 800b232:	2b00      	cmp	r3, #0
 800b234:	d007      	beq.n	800b246 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	3304      	adds	r3, #4
 800b23a:	4619      	mov	r1, r3
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f008 fa51 	bl	80136e4 <etharp_request>
 800b242:	e000      	b.n	800b246 <netif_issue_reports+0x6e>
    return;
 800b244:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b246:	3708      	adds	r7, #8
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}
 800b24c:	08017664 	.word	0x08017664
 800b250:	08017808 	.word	0x08017808
 800b254:	080176b4 	.word	0x080176b4

0800b258 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d107      	bne.n	800b276 <netif_set_down+0x1e>
 800b266:	4b12      	ldr	r3, [pc, #72]	; (800b2b0 <netif_set_down+0x58>)
 800b268:	f240 329b 	movw	r2, #923	; 0x39b
 800b26c:	4911      	ldr	r1, [pc, #68]	; (800b2b4 <netif_set_down+0x5c>)
 800b26e:	4812      	ldr	r0, [pc, #72]	; (800b2b8 <netif_set_down+0x60>)
 800b270:	f00a f860 	bl	8015334 <iprintf>
 800b274:	e019      	b.n	800b2aa <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b27c:	f003 0301 	and.w	r3, r3, #1
 800b280:	2b00      	cmp	r3, #0
 800b282:	d012      	beq.n	800b2aa <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b28a:	f023 0301 	bic.w	r3, r3, #1
 800b28e:	b2da      	uxtb	r2, r3
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b29c:	f003 0308 	and.w	r3, r3, #8
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d002      	beq.n	800b2aa <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f007 fddb 	bl	8012e60 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b2aa:	3708      	adds	r7, #8
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}
 800b2b0:	08017664 	.word	0x08017664
 800b2b4:	0801782c 	.word	0x0801782c
 800b2b8:	080176b4 	.word	0x080176b4

0800b2bc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d107      	bne.n	800b2da <netif_set_link_up+0x1e>
 800b2ca:	4b13      	ldr	r3, [pc, #76]	; (800b318 <netif_set_link_up+0x5c>)
 800b2cc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800b2d0:	4912      	ldr	r1, [pc, #72]	; (800b31c <netif_set_link_up+0x60>)
 800b2d2:	4813      	ldr	r0, [pc, #76]	; (800b320 <netif_set_link_up+0x64>)
 800b2d4:	f00a f82e 	bl	8015334 <iprintf>
 800b2d8:	e01b      	b.n	800b312 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b2e0:	f003 0304 	and.w	r3, r3, #4
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d114      	bne.n	800b312 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b2ee:	f043 0304 	orr.w	r3, r3, #4
 800b2f2:	b2da      	uxtb	r2, r3
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b2fa:	2103      	movs	r1, #3
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f7ff ff6b 	bl	800b1d8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	69db      	ldr	r3, [r3, #28]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d003      	beq.n	800b312 <netif_set_link_up+0x56>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	69db      	ldr	r3, [r3, #28]
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b312:	3708      	adds	r7, #8
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}
 800b318:	08017664 	.word	0x08017664
 800b31c:	0801784c 	.word	0x0801784c
 800b320:	080176b4 	.word	0x080176b4

0800b324 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d107      	bne.n	800b342 <netif_set_link_down+0x1e>
 800b332:	4b11      	ldr	r3, [pc, #68]	; (800b378 <netif_set_link_down+0x54>)
 800b334:	f240 4206 	movw	r2, #1030	; 0x406
 800b338:	4910      	ldr	r1, [pc, #64]	; (800b37c <netif_set_link_down+0x58>)
 800b33a:	4811      	ldr	r0, [pc, #68]	; (800b380 <netif_set_link_down+0x5c>)
 800b33c:	f009 fffa 	bl	8015334 <iprintf>
 800b340:	e017      	b.n	800b372 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b348:	f003 0304 	and.w	r3, r3, #4
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d010      	beq.n	800b372 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b356:	f023 0304 	bic.w	r3, r3, #4
 800b35a:	b2da      	uxtb	r2, r3
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	69db      	ldr	r3, [r3, #28]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d003      	beq.n	800b372 <netif_set_link_down+0x4e>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	69db      	ldr	r3, [r3, #28]
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b372:	3708      	adds	r7, #8
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}
 800b378:	08017664 	.word	0x08017664
 800b37c:	08017870 	.word	0x08017870
 800b380:	080176b4 	.word	0x080176b4

0800b384 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b384:	b480      	push	{r7}
 800b386:	b083      	sub	sp, #12
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d002      	beq.n	800b39a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	683a      	ldr	r2, [r7, #0]
 800b398:	61da      	str	r2, [r3, #28]
  }
}
 800b39a:	bf00      	nop
 800b39c:	370c      	adds	r7, #12
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a4:	4770      	bx	lr

0800b3a6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b3a6:	b480      	push	{r7}
 800b3a8:	b085      	sub	sp, #20
 800b3aa:	af00      	add	r7, sp, #0
 800b3ac:	60f8      	str	r0, [r7, #12]
 800b3ae:	60b9      	str	r1, [r7, #8]
 800b3b0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b3b2:	f06f 030b 	mvn.w	r3, #11
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3714      	adds	r7, #20
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr
	...

0800b3c4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b085      	sub	sp, #20
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b3ce:	79fb      	ldrb	r3, [r7, #7]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d013      	beq.n	800b3fc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b3d4:	4b0d      	ldr	r3, [pc, #52]	; (800b40c <netif_get_by_index+0x48>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	60fb      	str	r3, [r7, #12]
 800b3da:	e00c      	b.n	800b3f6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	b2db      	uxtb	r3, r3
 800b3e6:	79fa      	ldrb	r2, [r7, #7]
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d101      	bne.n	800b3f0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	e006      	b.n	800b3fe <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	60fb      	str	r3, [r7, #12]
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d1ef      	bne.n	800b3dc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b3fc:	2300      	movs	r3, #0
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3714      	adds	r7, #20
 800b402:	46bd      	mov	sp, r7
 800b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b408:	4770      	bx	lr
 800b40a:	bf00      	nop
 800b40c:	2000ab08 	.word	0x2000ab08

0800b410 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b082      	sub	sp, #8
 800b414:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b416:	f009 ff0d 	bl	8015234 <sys_arch_protect>
 800b41a:	6038      	str	r0, [r7, #0]
 800b41c:	4b0d      	ldr	r3, [pc, #52]	; (800b454 <pbuf_free_ooseq+0x44>)
 800b41e:	2200      	movs	r2, #0
 800b420:	701a      	strb	r2, [r3, #0]
 800b422:	6838      	ldr	r0, [r7, #0]
 800b424:	f009 ff14 	bl	8015250 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b428:	4b0b      	ldr	r3, [pc, #44]	; (800b458 <pbuf_free_ooseq+0x48>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	607b      	str	r3, [r7, #4]
 800b42e:	e00a      	b.n	800b446 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b434:	2b00      	cmp	r3, #0
 800b436:	d003      	beq.n	800b440 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f002 fc81 	bl	800dd40 <tcp_free_ooseq>
      return;
 800b43e:	e005      	b.n	800b44c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	68db      	ldr	r3, [r3, #12]
 800b444:	607b      	str	r3, [r7, #4]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d1f1      	bne.n	800b430 <pbuf_free_ooseq+0x20>
    }
  }
}
 800b44c:	3708      	adds	r7, #8
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}
 800b452:	bf00      	nop
 800b454:	2000ab10 	.word	0x2000ab10
 800b458:	2000ab18 	.word	0x2000ab18

0800b45c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b082      	sub	sp, #8
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800b464:	f7ff ffd4 	bl	800b410 <pbuf_free_ooseq>
}
 800b468:	bf00      	nop
 800b46a:	3708      	adds	r7, #8
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}

0800b470 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b082      	sub	sp, #8
 800b474:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800b476:	f009 fedd 	bl	8015234 <sys_arch_protect>
 800b47a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800b47c:	4b0f      	ldr	r3, [pc, #60]	; (800b4bc <pbuf_pool_is_empty+0x4c>)
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800b482:	4b0e      	ldr	r3, [pc, #56]	; (800b4bc <pbuf_pool_is_empty+0x4c>)
 800b484:	2201      	movs	r2, #1
 800b486:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f009 fee1 	bl	8015250 <sys_arch_unprotect>

  if (!queued) {
 800b48e:	78fb      	ldrb	r3, [r7, #3]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d10f      	bne.n	800b4b4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800b494:	2100      	movs	r1, #0
 800b496:	480a      	ldr	r0, [pc, #40]	; (800b4c0 <pbuf_pool_is_empty+0x50>)
 800b498:	f7fd f988 	bl	80087ac <tcpip_try_callback>
 800b49c:	4603      	mov	r3, r0
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d008      	beq.n	800b4b4 <pbuf_pool_is_empty+0x44>
 800b4a2:	f009 fec7 	bl	8015234 <sys_arch_protect>
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	4b04      	ldr	r3, [pc, #16]	; (800b4bc <pbuf_pool_is_empty+0x4c>)
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	701a      	strb	r2, [r3, #0]
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f009 fece 	bl	8015250 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b4b4:	bf00      	nop
 800b4b6:	3708      	adds	r7, #8
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	2000ab10 	.word	0x2000ab10
 800b4c0:	0800b45d 	.word	0x0800b45d

0800b4c4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b085      	sub	sp, #20
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	60f8      	str	r0, [r7, #12]
 800b4cc:	60b9      	str	r1, [r7, #8]
 800b4ce:	4611      	mov	r1, r2
 800b4d0:	461a      	mov	r2, r3
 800b4d2:	460b      	mov	r3, r1
 800b4d4:	80fb      	strh	r3, [r7, #6]
 800b4d6:	4613      	mov	r3, r2
 800b4d8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	68ba      	ldr	r2, [r7, #8]
 800b4e4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	88fa      	ldrh	r2, [r7, #6]
 800b4ea:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	88ba      	ldrh	r2, [r7, #4]
 800b4f0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b4f2:	8b3b      	ldrh	r3, [r7, #24]
 800b4f4:	b2da      	uxtb	r2, r3
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	7f3a      	ldrb	r2, [r7, #28]
 800b4fe:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	2201      	movs	r2, #1
 800b504:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2200      	movs	r2, #0
 800b50a:	73da      	strb	r2, [r3, #15]
}
 800b50c:	bf00      	nop
 800b50e:	3714      	adds	r7, #20
 800b510:	46bd      	mov	sp, r7
 800b512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b516:	4770      	bx	lr

0800b518 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b08c      	sub	sp, #48	; 0x30
 800b51c:	af02      	add	r7, sp, #8
 800b51e:	4603      	mov	r3, r0
 800b520:	71fb      	strb	r3, [r7, #7]
 800b522:	460b      	mov	r3, r1
 800b524:	80bb      	strh	r3, [r7, #4]
 800b526:	4613      	mov	r3, r2
 800b528:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b52a:	79fb      	ldrb	r3, [r7, #7]
 800b52c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b52e:	887b      	ldrh	r3, [r7, #2]
 800b530:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b534:	d07f      	beq.n	800b636 <pbuf_alloc+0x11e>
 800b536:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b53a:	f300 80c8 	bgt.w	800b6ce <pbuf_alloc+0x1b6>
 800b53e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b542:	d010      	beq.n	800b566 <pbuf_alloc+0x4e>
 800b544:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b548:	f300 80c1 	bgt.w	800b6ce <pbuf_alloc+0x1b6>
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	d002      	beq.n	800b556 <pbuf_alloc+0x3e>
 800b550:	2b41      	cmp	r3, #65	; 0x41
 800b552:	f040 80bc 	bne.w	800b6ce <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b556:	887a      	ldrh	r2, [r7, #2]
 800b558:	88bb      	ldrh	r3, [r7, #4]
 800b55a:	4619      	mov	r1, r3
 800b55c:	2000      	movs	r0, #0
 800b55e:	f000 f8d1 	bl	800b704 <pbuf_alloc_reference>
 800b562:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b564:	e0bd      	b.n	800b6e2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b566:	2300      	movs	r3, #0
 800b568:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b56a:	2300      	movs	r3, #0
 800b56c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b56e:	88bb      	ldrh	r3, [r7, #4]
 800b570:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b572:	200c      	movs	r0, #12
 800b574:	f7ff fbbe 	bl	800acf4 <memp_malloc>
 800b578:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d109      	bne.n	800b594 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b580:	f7ff ff76 	bl	800b470 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b586:	2b00      	cmp	r3, #0
 800b588:	d002      	beq.n	800b590 <pbuf_alloc+0x78>
            pbuf_free(p);
 800b58a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b58c:	f000 faa8 	bl	800bae0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b590:	2300      	movs	r3, #0
 800b592:	e0a7      	b.n	800b6e4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b594:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b596:	3303      	adds	r3, #3
 800b598:	b29b      	uxth	r3, r3
 800b59a:	f023 0303 	bic.w	r3, r3, #3
 800b59e:	b29b      	uxth	r3, r3
 800b5a0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b5a4:	b29b      	uxth	r3, r3
 800b5a6:	8b7a      	ldrh	r2, [r7, #26]
 800b5a8:	4293      	cmp	r3, r2
 800b5aa:	bf28      	it	cs
 800b5ac:	4613      	movcs	r3, r2
 800b5ae:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b5b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b5b2:	3310      	adds	r3, #16
 800b5b4:	693a      	ldr	r2, [r7, #16]
 800b5b6:	4413      	add	r3, r2
 800b5b8:	3303      	adds	r3, #3
 800b5ba:	f023 0303 	bic.w	r3, r3, #3
 800b5be:	4618      	mov	r0, r3
 800b5c0:	89f9      	ldrh	r1, [r7, #14]
 800b5c2:	8b7a      	ldrh	r2, [r7, #26]
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	9301      	str	r3, [sp, #4]
 800b5c8:	887b      	ldrh	r3, [r7, #2]
 800b5ca:	9300      	str	r3, [sp, #0]
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	4601      	mov	r1, r0
 800b5d0:	6938      	ldr	r0, [r7, #16]
 800b5d2:	f7ff ff77 	bl	800b4c4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	685b      	ldr	r3, [r3, #4]
 800b5da:	f003 0303 	and.w	r3, r3, #3
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d006      	beq.n	800b5f0 <pbuf_alloc+0xd8>
 800b5e2:	4b42      	ldr	r3, [pc, #264]	; (800b6ec <pbuf_alloc+0x1d4>)
 800b5e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b5e8:	4941      	ldr	r1, [pc, #260]	; (800b6f0 <pbuf_alloc+0x1d8>)
 800b5ea:	4842      	ldr	r0, [pc, #264]	; (800b6f4 <pbuf_alloc+0x1dc>)
 800b5ec:	f009 fea2 	bl	8015334 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b5f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b5f2:	3303      	adds	r3, #3
 800b5f4:	f023 0303 	bic.w	r3, r3, #3
 800b5f8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b5fc:	d106      	bne.n	800b60c <pbuf_alloc+0xf4>
 800b5fe:	4b3b      	ldr	r3, [pc, #236]	; (800b6ec <pbuf_alloc+0x1d4>)
 800b600:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b604:	493c      	ldr	r1, [pc, #240]	; (800b6f8 <pbuf_alloc+0x1e0>)
 800b606:	483b      	ldr	r0, [pc, #236]	; (800b6f4 <pbuf_alloc+0x1dc>)
 800b608:	f009 fe94 	bl	8015334 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d102      	bne.n	800b618 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	627b      	str	r3, [r7, #36]	; 0x24
 800b616:	e002      	b.n	800b61e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b618:	69fb      	ldr	r3, [r7, #28]
 800b61a:	693a      	ldr	r2, [r7, #16]
 800b61c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b622:	8b7a      	ldrh	r2, [r7, #26]
 800b624:	89fb      	ldrh	r3, [r7, #14]
 800b626:	1ad3      	subs	r3, r2, r3
 800b628:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b62a:	2300      	movs	r3, #0
 800b62c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b62e:	8b7b      	ldrh	r3, [r7, #26]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d19e      	bne.n	800b572 <pbuf_alloc+0x5a>
      break;
 800b634:	e055      	b.n	800b6e2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b636:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b638:	3303      	adds	r3, #3
 800b63a:	b29b      	uxth	r3, r3
 800b63c:	f023 0303 	bic.w	r3, r3, #3
 800b640:	b29a      	uxth	r2, r3
 800b642:	88bb      	ldrh	r3, [r7, #4]
 800b644:	3303      	adds	r3, #3
 800b646:	b29b      	uxth	r3, r3
 800b648:	f023 0303 	bic.w	r3, r3, #3
 800b64c:	b29b      	uxth	r3, r3
 800b64e:	4413      	add	r3, r2
 800b650:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b652:	8b3b      	ldrh	r3, [r7, #24]
 800b654:	3310      	adds	r3, #16
 800b656:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b658:	8b3a      	ldrh	r2, [r7, #24]
 800b65a:	88bb      	ldrh	r3, [r7, #4]
 800b65c:	3303      	adds	r3, #3
 800b65e:	f023 0303 	bic.w	r3, r3, #3
 800b662:	429a      	cmp	r2, r3
 800b664:	d306      	bcc.n	800b674 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b666:	8afa      	ldrh	r2, [r7, #22]
 800b668:	88bb      	ldrh	r3, [r7, #4]
 800b66a:	3303      	adds	r3, #3
 800b66c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b670:	429a      	cmp	r2, r3
 800b672:	d201      	bcs.n	800b678 <pbuf_alloc+0x160>
        return NULL;
 800b674:	2300      	movs	r3, #0
 800b676:	e035      	b.n	800b6e4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b678:	8afb      	ldrh	r3, [r7, #22]
 800b67a:	4618      	mov	r0, r3
 800b67c:	f7ff f990 	bl	800a9a0 <mem_malloc>
 800b680:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b684:	2b00      	cmp	r3, #0
 800b686:	d101      	bne.n	800b68c <pbuf_alloc+0x174>
        return NULL;
 800b688:	2300      	movs	r3, #0
 800b68a:	e02b      	b.n	800b6e4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b68c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b68e:	3310      	adds	r3, #16
 800b690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b692:	4413      	add	r3, r2
 800b694:	3303      	adds	r3, #3
 800b696:	f023 0303 	bic.w	r3, r3, #3
 800b69a:	4618      	mov	r0, r3
 800b69c:	88b9      	ldrh	r1, [r7, #4]
 800b69e:	88ba      	ldrh	r2, [r7, #4]
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	9301      	str	r3, [sp, #4]
 800b6a4:	887b      	ldrh	r3, [r7, #2]
 800b6a6:	9300      	str	r3, [sp, #0]
 800b6a8:	460b      	mov	r3, r1
 800b6aa:	4601      	mov	r1, r0
 800b6ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b6ae:	f7ff ff09 	bl	800b4c4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b4:	685b      	ldr	r3, [r3, #4]
 800b6b6:	f003 0303 	and.w	r3, r3, #3
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d010      	beq.n	800b6e0 <pbuf_alloc+0x1c8>
 800b6be:	4b0b      	ldr	r3, [pc, #44]	; (800b6ec <pbuf_alloc+0x1d4>)
 800b6c0:	f44f 7291 	mov.w	r2, #290	; 0x122
 800b6c4:	490d      	ldr	r1, [pc, #52]	; (800b6fc <pbuf_alloc+0x1e4>)
 800b6c6:	480b      	ldr	r0, [pc, #44]	; (800b6f4 <pbuf_alloc+0x1dc>)
 800b6c8:	f009 fe34 	bl	8015334 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b6cc:	e008      	b.n	800b6e0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b6ce:	4b07      	ldr	r3, [pc, #28]	; (800b6ec <pbuf_alloc+0x1d4>)
 800b6d0:	f240 1227 	movw	r2, #295	; 0x127
 800b6d4:	490a      	ldr	r1, [pc, #40]	; (800b700 <pbuf_alloc+0x1e8>)
 800b6d6:	4807      	ldr	r0, [pc, #28]	; (800b6f4 <pbuf_alloc+0x1dc>)
 800b6d8:	f009 fe2c 	bl	8015334 <iprintf>
      return NULL;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	e001      	b.n	800b6e4 <pbuf_alloc+0x1cc>
      break;
 800b6e0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3728      	adds	r7, #40	; 0x28
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}
 800b6ec:	08017894 	.word	0x08017894
 800b6f0:	080178c4 	.word	0x080178c4
 800b6f4:	080178f4 	.word	0x080178f4
 800b6f8:	0801791c 	.word	0x0801791c
 800b6fc:	08017950 	.word	0x08017950
 800b700:	0801797c 	.word	0x0801797c

0800b704 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b086      	sub	sp, #24
 800b708:	af02      	add	r7, sp, #8
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	460b      	mov	r3, r1
 800b70e:	807b      	strh	r3, [r7, #2]
 800b710:	4613      	mov	r3, r2
 800b712:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b714:	883b      	ldrh	r3, [r7, #0]
 800b716:	2b41      	cmp	r3, #65	; 0x41
 800b718:	d009      	beq.n	800b72e <pbuf_alloc_reference+0x2a>
 800b71a:	883b      	ldrh	r3, [r7, #0]
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d006      	beq.n	800b72e <pbuf_alloc_reference+0x2a>
 800b720:	4b0f      	ldr	r3, [pc, #60]	; (800b760 <pbuf_alloc_reference+0x5c>)
 800b722:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b726:	490f      	ldr	r1, [pc, #60]	; (800b764 <pbuf_alloc_reference+0x60>)
 800b728:	480f      	ldr	r0, [pc, #60]	; (800b768 <pbuf_alloc_reference+0x64>)
 800b72a:	f009 fe03 	bl	8015334 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b72e:	200b      	movs	r0, #11
 800b730:	f7ff fae0 	bl	800acf4 <memp_malloc>
 800b734:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d101      	bne.n	800b740 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b73c:	2300      	movs	r3, #0
 800b73e:	e00b      	b.n	800b758 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b740:	8879      	ldrh	r1, [r7, #2]
 800b742:	887a      	ldrh	r2, [r7, #2]
 800b744:	2300      	movs	r3, #0
 800b746:	9301      	str	r3, [sp, #4]
 800b748:	883b      	ldrh	r3, [r7, #0]
 800b74a:	9300      	str	r3, [sp, #0]
 800b74c:	460b      	mov	r3, r1
 800b74e:	6879      	ldr	r1, [r7, #4]
 800b750:	68f8      	ldr	r0, [r7, #12]
 800b752:	f7ff feb7 	bl	800b4c4 <pbuf_init_alloced_pbuf>
  return p;
 800b756:	68fb      	ldr	r3, [r7, #12]
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3710      	adds	r7, #16
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}
 800b760:	08017894 	.word	0x08017894
 800b764:	08017998 	.word	0x08017998
 800b768:	080178f4 	.word	0x080178f4

0800b76c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b088      	sub	sp, #32
 800b770:	af02      	add	r7, sp, #8
 800b772:	607b      	str	r3, [r7, #4]
 800b774:	4603      	mov	r3, r0
 800b776:	73fb      	strb	r3, [r7, #15]
 800b778:	460b      	mov	r3, r1
 800b77a:	81bb      	strh	r3, [r7, #12]
 800b77c:	4613      	mov	r3, r2
 800b77e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b780:	7bfb      	ldrb	r3, [r7, #15]
 800b782:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b784:	8a7b      	ldrh	r3, [r7, #18]
 800b786:	3303      	adds	r3, #3
 800b788:	f023 0203 	bic.w	r2, r3, #3
 800b78c:	89bb      	ldrh	r3, [r7, #12]
 800b78e:	441a      	add	r2, r3
 800b790:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b792:	429a      	cmp	r2, r3
 800b794:	d901      	bls.n	800b79a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b796:	2300      	movs	r3, #0
 800b798:	e018      	b.n	800b7cc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b79a:	6a3b      	ldr	r3, [r7, #32]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d007      	beq.n	800b7b0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b7a0:	8a7b      	ldrh	r3, [r7, #18]
 800b7a2:	3303      	adds	r3, #3
 800b7a4:	f023 0303 	bic.w	r3, r3, #3
 800b7a8:	6a3a      	ldr	r2, [r7, #32]
 800b7aa:	4413      	add	r3, r2
 800b7ac:	617b      	str	r3, [r7, #20]
 800b7ae:	e001      	b.n	800b7b4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	89b9      	ldrh	r1, [r7, #12]
 800b7b8:	89ba      	ldrh	r2, [r7, #12]
 800b7ba:	2302      	movs	r3, #2
 800b7bc:	9301      	str	r3, [sp, #4]
 800b7be:	897b      	ldrh	r3, [r7, #10]
 800b7c0:	9300      	str	r3, [sp, #0]
 800b7c2:	460b      	mov	r3, r1
 800b7c4:	6979      	ldr	r1, [r7, #20]
 800b7c6:	f7ff fe7d 	bl	800b4c4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b7ca:	687b      	ldr	r3, [r7, #4]
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3718      	adds	r7, #24
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}

0800b7d4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b084      	sub	sp, #16
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
 800b7dc:	460b      	mov	r3, r1
 800b7de:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d106      	bne.n	800b7f4 <pbuf_realloc+0x20>
 800b7e6:	4b3a      	ldr	r3, [pc, #232]	; (800b8d0 <pbuf_realloc+0xfc>)
 800b7e8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b7ec:	4939      	ldr	r1, [pc, #228]	; (800b8d4 <pbuf_realloc+0x100>)
 800b7ee:	483a      	ldr	r0, [pc, #232]	; (800b8d8 <pbuf_realloc+0x104>)
 800b7f0:	f009 fda0 	bl	8015334 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	891b      	ldrh	r3, [r3, #8]
 800b7f8:	887a      	ldrh	r2, [r7, #2]
 800b7fa:	429a      	cmp	r2, r3
 800b7fc:	d263      	bcs.n	800b8c6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	891a      	ldrh	r2, [r3, #8]
 800b802:	887b      	ldrh	r3, [r7, #2]
 800b804:	1ad3      	subs	r3, r2, r3
 800b806:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b808:	887b      	ldrh	r3, [r7, #2]
 800b80a:	817b      	strh	r3, [r7, #10]
  q = p;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b810:	e018      	b.n	800b844 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	895b      	ldrh	r3, [r3, #10]
 800b816:	897a      	ldrh	r2, [r7, #10]
 800b818:	1ad3      	subs	r3, r2, r3
 800b81a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	891a      	ldrh	r2, [r3, #8]
 800b820:	893b      	ldrh	r3, [r7, #8]
 800b822:	1ad3      	subs	r3, r2, r3
 800b824:	b29a      	uxth	r2, r3
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d106      	bne.n	800b844 <pbuf_realloc+0x70>
 800b836:	4b26      	ldr	r3, [pc, #152]	; (800b8d0 <pbuf_realloc+0xfc>)
 800b838:	f240 12af 	movw	r2, #431	; 0x1af
 800b83c:	4927      	ldr	r1, [pc, #156]	; (800b8dc <pbuf_realloc+0x108>)
 800b83e:	4826      	ldr	r0, [pc, #152]	; (800b8d8 <pbuf_realloc+0x104>)
 800b840:	f009 fd78 	bl	8015334 <iprintf>
  while (rem_len > q->len) {
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	895b      	ldrh	r3, [r3, #10]
 800b848:	897a      	ldrh	r2, [r7, #10]
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d8e1      	bhi.n	800b812 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	7b1b      	ldrb	r3, [r3, #12]
 800b852:	f003 030f 	and.w	r3, r3, #15
 800b856:	2b00      	cmp	r3, #0
 800b858:	d121      	bne.n	800b89e <pbuf_realloc+0xca>
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	895b      	ldrh	r3, [r3, #10]
 800b85e:	897a      	ldrh	r2, [r7, #10]
 800b860:	429a      	cmp	r2, r3
 800b862:	d01c      	beq.n	800b89e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	7b5b      	ldrb	r3, [r3, #13]
 800b868:	f003 0302 	and.w	r3, r3, #2
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d116      	bne.n	800b89e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	685a      	ldr	r2, [r3, #4]
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	1ad3      	subs	r3, r2, r3
 800b878:	b29a      	uxth	r2, r3
 800b87a:	897b      	ldrh	r3, [r7, #10]
 800b87c:	4413      	add	r3, r2
 800b87e:	b29b      	uxth	r3, r3
 800b880:	4619      	mov	r1, r3
 800b882:	68f8      	ldr	r0, [r7, #12]
 800b884:	f7fe ff82 	bl	800a78c <mem_trim>
 800b888:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d106      	bne.n	800b89e <pbuf_realloc+0xca>
 800b890:	4b0f      	ldr	r3, [pc, #60]	; (800b8d0 <pbuf_realloc+0xfc>)
 800b892:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b896:	4912      	ldr	r1, [pc, #72]	; (800b8e0 <pbuf_realloc+0x10c>)
 800b898:	480f      	ldr	r0, [pc, #60]	; (800b8d8 <pbuf_realloc+0x104>)
 800b89a:	f009 fd4b 	bl	8015334 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	897a      	ldrh	r2, [r7, #10]
 800b8a2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	895a      	ldrh	r2, [r3, #10]
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d004      	beq.n	800b8be <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f000 f911 	bl	800bae0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	601a      	str	r2, [r3, #0]
 800b8c4:	e000      	b.n	800b8c8 <pbuf_realloc+0xf4>
    return;
 800b8c6:	bf00      	nop

}
 800b8c8:	3710      	adds	r7, #16
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	08017894 	.word	0x08017894
 800b8d4:	080179ac 	.word	0x080179ac
 800b8d8:	080178f4 	.word	0x080178f4
 800b8dc:	080179c4 	.word	0x080179c4
 800b8e0:	080179dc 	.word	0x080179dc

0800b8e4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b086      	sub	sp, #24
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	60f8      	str	r0, [r7, #12]
 800b8ec:	60b9      	str	r1, [r7, #8]
 800b8ee:	4613      	mov	r3, r2
 800b8f0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d106      	bne.n	800b906 <pbuf_add_header_impl+0x22>
 800b8f8:	4b2b      	ldr	r3, [pc, #172]	; (800b9a8 <pbuf_add_header_impl+0xc4>)
 800b8fa:	f240 12df 	movw	r2, #479	; 0x1df
 800b8fe:	492b      	ldr	r1, [pc, #172]	; (800b9ac <pbuf_add_header_impl+0xc8>)
 800b900:	482b      	ldr	r0, [pc, #172]	; (800b9b0 <pbuf_add_header_impl+0xcc>)
 800b902:	f009 fd17 	bl	8015334 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d003      	beq.n	800b914 <pbuf_add_header_impl+0x30>
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b912:	d301      	bcc.n	800b918 <pbuf_add_header_impl+0x34>
    return 1;
 800b914:	2301      	movs	r3, #1
 800b916:	e043      	b.n	800b9a0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d101      	bne.n	800b922 <pbuf_add_header_impl+0x3e>
    return 0;
 800b91e:	2300      	movs	r3, #0
 800b920:	e03e      	b.n	800b9a0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	891a      	ldrh	r2, [r3, #8]
 800b92a:	8a7b      	ldrh	r3, [r7, #18]
 800b92c:	4413      	add	r3, r2
 800b92e:	b29b      	uxth	r3, r3
 800b930:	8a7a      	ldrh	r2, [r7, #18]
 800b932:	429a      	cmp	r2, r3
 800b934:	d901      	bls.n	800b93a <pbuf_add_header_impl+0x56>
    return 1;
 800b936:	2301      	movs	r3, #1
 800b938:	e032      	b.n	800b9a0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	7b1b      	ldrb	r3, [r3, #12]
 800b93e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b940:	8a3b      	ldrh	r3, [r7, #16]
 800b942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b946:	2b00      	cmp	r3, #0
 800b948:	d00c      	beq.n	800b964 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	685a      	ldr	r2, [r3, #4]
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	425b      	negs	r3, r3
 800b952:	4413      	add	r3, r2
 800b954:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	3310      	adds	r3, #16
 800b95a:	697a      	ldr	r2, [r7, #20]
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d20d      	bcs.n	800b97c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b960:	2301      	movs	r3, #1
 800b962:	e01d      	b.n	800b9a0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b964:	79fb      	ldrb	r3, [r7, #7]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d006      	beq.n	800b978 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	685a      	ldr	r2, [r3, #4]
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	425b      	negs	r3, r3
 800b972:	4413      	add	r3, r2
 800b974:	617b      	str	r3, [r7, #20]
 800b976:	e001      	b.n	800b97c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b978:	2301      	movs	r3, #1
 800b97a:	e011      	b.n	800b9a0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	697a      	ldr	r2, [r7, #20]
 800b980:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	895a      	ldrh	r2, [r3, #10]
 800b986:	8a7b      	ldrh	r3, [r7, #18]
 800b988:	4413      	add	r3, r2
 800b98a:	b29a      	uxth	r2, r3
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	891a      	ldrh	r2, [r3, #8]
 800b994:	8a7b      	ldrh	r3, [r7, #18]
 800b996:	4413      	add	r3, r2
 800b998:	b29a      	uxth	r2, r3
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	811a      	strh	r2, [r3, #8]


  return 0;
 800b99e:	2300      	movs	r3, #0
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3718      	adds	r7, #24
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	08017894 	.word	0x08017894
 800b9ac:	080179f8 	.word	0x080179f8
 800b9b0:	080178f4 	.word	0x080178f4

0800b9b4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b082      	sub	sp, #8
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b9be:	2200      	movs	r2, #0
 800b9c0:	6839      	ldr	r1, [r7, #0]
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f7ff ff8e 	bl	800b8e4 <pbuf_add_header_impl>
 800b9c8:	4603      	mov	r3, r0
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3708      	adds	r7, #8
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
	...

0800b9d4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b084      	sub	sp, #16
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d106      	bne.n	800b9f2 <pbuf_remove_header+0x1e>
 800b9e4:	4b20      	ldr	r3, [pc, #128]	; (800ba68 <pbuf_remove_header+0x94>)
 800b9e6:	f240 224b 	movw	r2, #587	; 0x24b
 800b9ea:	4920      	ldr	r1, [pc, #128]	; (800ba6c <pbuf_remove_header+0x98>)
 800b9ec:	4820      	ldr	r0, [pc, #128]	; (800ba70 <pbuf_remove_header+0x9c>)
 800b9ee:	f009 fca1 	bl	8015334 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d003      	beq.n	800ba00 <pbuf_remove_header+0x2c>
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9fe:	d301      	bcc.n	800ba04 <pbuf_remove_header+0x30>
    return 1;
 800ba00:	2301      	movs	r3, #1
 800ba02:	e02c      	b.n	800ba5e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d101      	bne.n	800ba0e <pbuf_remove_header+0x3a>
    return 0;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	e027      	b.n	800ba5e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	895b      	ldrh	r3, [r3, #10]
 800ba16:	89fa      	ldrh	r2, [r7, #14]
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d908      	bls.n	800ba2e <pbuf_remove_header+0x5a>
 800ba1c:	4b12      	ldr	r3, [pc, #72]	; (800ba68 <pbuf_remove_header+0x94>)
 800ba1e:	f240 2255 	movw	r2, #597	; 0x255
 800ba22:	4914      	ldr	r1, [pc, #80]	; (800ba74 <pbuf_remove_header+0xa0>)
 800ba24:	4812      	ldr	r0, [pc, #72]	; (800ba70 <pbuf_remove_header+0x9c>)
 800ba26:	f009 fc85 	bl	8015334 <iprintf>
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	e017      	b.n	800ba5e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	685b      	ldr	r3, [r3, #4]
 800ba32:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	685a      	ldr	r2, [r3, #4]
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	441a      	add	r2, r3
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	895a      	ldrh	r2, [r3, #10]
 800ba44:	89fb      	ldrh	r3, [r7, #14]
 800ba46:	1ad3      	subs	r3, r2, r3
 800ba48:	b29a      	uxth	r2, r3
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	891a      	ldrh	r2, [r3, #8]
 800ba52:	89fb      	ldrh	r3, [r7, #14]
 800ba54:	1ad3      	subs	r3, r2, r3
 800ba56:	b29a      	uxth	r2, r3
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800ba5c:	2300      	movs	r3, #0
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3710      	adds	r7, #16
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}
 800ba66:	bf00      	nop
 800ba68:	08017894 	.word	0x08017894
 800ba6c:	080179f8 	.word	0x080179f8
 800ba70:	080178f4 	.word	0x080178f4
 800ba74:	08017a04 	.word	0x08017a04

0800ba78 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b082      	sub	sp, #8
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
 800ba80:	460b      	mov	r3, r1
 800ba82:	807b      	strh	r3, [r7, #2]
 800ba84:	4613      	mov	r3, r2
 800ba86:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800ba88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	da08      	bge.n	800baa2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ba90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ba94:	425b      	negs	r3, r3
 800ba96:	4619      	mov	r1, r3
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f7ff ff9b 	bl	800b9d4 <pbuf_remove_header>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	e007      	b.n	800bab2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800baa2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800baa6:	787a      	ldrb	r2, [r7, #1]
 800baa8:	4619      	mov	r1, r3
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f7ff ff1a 	bl	800b8e4 <pbuf_add_header_impl>
 800bab0:	4603      	mov	r3, r0
  }
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3708      	adds	r7, #8
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}

0800baba <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800baba:	b580      	push	{r7, lr}
 800babc:	b082      	sub	sp, #8
 800babe:	af00      	add	r7, sp, #0
 800bac0:	6078      	str	r0, [r7, #4]
 800bac2:	460b      	mov	r3, r1
 800bac4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800bac6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800baca:	2201      	movs	r2, #1
 800bacc:	4619      	mov	r1, r3
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f7ff ffd2 	bl	800ba78 <pbuf_header_impl>
 800bad4:	4603      	mov	r3, r0
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3708      	adds	r7, #8
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}
	...

0800bae0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b088      	sub	sp, #32
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d10b      	bne.n	800bb06 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d106      	bne.n	800bb02 <pbuf_free+0x22>
 800baf4:	4b3b      	ldr	r3, [pc, #236]	; (800bbe4 <pbuf_free+0x104>)
 800baf6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800bafa:	493b      	ldr	r1, [pc, #236]	; (800bbe8 <pbuf_free+0x108>)
 800bafc:	483b      	ldr	r0, [pc, #236]	; (800bbec <pbuf_free+0x10c>)
 800bafe:	f009 fc19 	bl	8015334 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800bb02:	2300      	movs	r3, #0
 800bb04:	e069      	b.n	800bbda <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800bb06:	2300      	movs	r3, #0
 800bb08:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800bb0a:	e062      	b.n	800bbd2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800bb0c:	f009 fb92 	bl	8015234 <sys_arch_protect>
 800bb10:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	7b9b      	ldrb	r3, [r3, #14]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d106      	bne.n	800bb28 <pbuf_free+0x48>
 800bb1a:	4b32      	ldr	r3, [pc, #200]	; (800bbe4 <pbuf_free+0x104>)
 800bb1c:	f240 22f1 	movw	r2, #753	; 0x2f1
 800bb20:	4933      	ldr	r1, [pc, #204]	; (800bbf0 <pbuf_free+0x110>)
 800bb22:	4832      	ldr	r0, [pc, #200]	; (800bbec <pbuf_free+0x10c>)
 800bb24:	f009 fc06 	bl	8015334 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	7b9b      	ldrb	r3, [r3, #14]
 800bb2c:	3b01      	subs	r3, #1
 800bb2e:	b2da      	uxtb	r2, r3
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	739a      	strb	r2, [r3, #14]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	7b9b      	ldrb	r3, [r3, #14]
 800bb38:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800bb3a:	69b8      	ldr	r0, [r7, #24]
 800bb3c:	f009 fb88 	bl	8015250 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800bb40:	7dfb      	ldrb	r3, [r7, #23]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d143      	bne.n	800bbce <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	7b1b      	ldrb	r3, [r3, #12]
 800bb50:	f003 030f 	and.w	r3, r3, #15
 800bb54:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	7b5b      	ldrb	r3, [r3, #13]
 800bb5a:	f003 0302 	and.w	r3, r3, #2
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d011      	beq.n	800bb86 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	691b      	ldr	r3, [r3, #16]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d106      	bne.n	800bb7c <pbuf_free+0x9c>
 800bb6e:	4b1d      	ldr	r3, [pc, #116]	; (800bbe4 <pbuf_free+0x104>)
 800bb70:	f240 22ff 	movw	r2, #767	; 0x2ff
 800bb74:	491f      	ldr	r1, [pc, #124]	; (800bbf4 <pbuf_free+0x114>)
 800bb76:	481d      	ldr	r0, [pc, #116]	; (800bbec <pbuf_free+0x10c>)
 800bb78:	f009 fbdc 	bl	8015334 <iprintf>
        pc->custom_free_function(p);
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	691b      	ldr	r3, [r3, #16]
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	4798      	blx	r3
 800bb84:	e01d      	b.n	800bbc2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800bb86:	7bfb      	ldrb	r3, [r7, #15]
 800bb88:	2b02      	cmp	r3, #2
 800bb8a:	d104      	bne.n	800bb96 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800bb8c:	6879      	ldr	r1, [r7, #4]
 800bb8e:	200c      	movs	r0, #12
 800bb90:	f7ff f902 	bl	800ad98 <memp_free>
 800bb94:	e015      	b.n	800bbc2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800bb96:	7bfb      	ldrb	r3, [r7, #15]
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	d104      	bne.n	800bba6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800bb9c:	6879      	ldr	r1, [r7, #4]
 800bb9e:	200b      	movs	r0, #11
 800bba0:	f7ff f8fa 	bl	800ad98 <memp_free>
 800bba4:	e00d      	b.n	800bbc2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800bba6:	7bfb      	ldrb	r3, [r7, #15]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d103      	bne.n	800bbb4 <pbuf_free+0xd4>
          mem_free(p);
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f7fe fd5d 	bl	800a66c <mem_free>
 800bbb2:	e006      	b.n	800bbc2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800bbb4:	4b0b      	ldr	r3, [pc, #44]	; (800bbe4 <pbuf_free+0x104>)
 800bbb6:	f240 320f 	movw	r2, #783	; 0x30f
 800bbba:	490f      	ldr	r1, [pc, #60]	; (800bbf8 <pbuf_free+0x118>)
 800bbbc:	480b      	ldr	r0, [pc, #44]	; (800bbec <pbuf_free+0x10c>)
 800bbbe:	f009 fbb9 	bl	8015334 <iprintf>
        }
      }
      count++;
 800bbc2:	7ffb      	ldrb	r3, [r7, #31]
 800bbc4:	3301      	adds	r3, #1
 800bbc6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	607b      	str	r3, [r7, #4]
 800bbcc:	e001      	b.n	800bbd2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d199      	bne.n	800bb0c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800bbd8:	7ffb      	ldrb	r3, [r7, #31]
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3720      	adds	r7, #32
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}
 800bbe2:	bf00      	nop
 800bbe4:	08017894 	.word	0x08017894
 800bbe8:	080179f8 	.word	0x080179f8
 800bbec:	080178f4 	.word	0x080178f4
 800bbf0:	08017a24 	.word	0x08017a24
 800bbf4:	08017a3c 	.word	0x08017a3c
 800bbf8:	08017a60 	.word	0x08017a60

0800bbfc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b085      	sub	sp, #20
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800bc04:	2300      	movs	r3, #0
 800bc06:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800bc08:	e005      	b.n	800bc16 <pbuf_clen+0x1a>
    ++len;
 800bc0a:	89fb      	ldrh	r3, [r7, #14]
 800bc0c:	3301      	adds	r3, #1
 800bc0e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d1f6      	bne.n	800bc0a <pbuf_clen+0xe>
  }
  return len;
 800bc1c:	89fb      	ldrh	r3, [r7, #14]
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	3714      	adds	r7, #20
 800bc22:	46bd      	mov	sp, r7
 800bc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc28:	4770      	bx	lr
	...

0800bc2c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b084      	sub	sp, #16
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d016      	beq.n	800bc68 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800bc3a:	f009 fafb 	bl	8015234 <sys_arch_protect>
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	7b9b      	ldrb	r3, [r3, #14]
 800bc44:	3301      	adds	r3, #1
 800bc46:	b2da      	uxtb	r2, r3
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	739a      	strb	r2, [r3, #14]
 800bc4c:	68f8      	ldr	r0, [r7, #12]
 800bc4e:	f009 faff 	bl	8015250 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	7b9b      	ldrb	r3, [r3, #14]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d106      	bne.n	800bc68 <pbuf_ref+0x3c>
 800bc5a:	4b05      	ldr	r3, [pc, #20]	; (800bc70 <pbuf_ref+0x44>)
 800bc5c:	f240 3242 	movw	r2, #834	; 0x342
 800bc60:	4904      	ldr	r1, [pc, #16]	; (800bc74 <pbuf_ref+0x48>)
 800bc62:	4805      	ldr	r0, [pc, #20]	; (800bc78 <pbuf_ref+0x4c>)
 800bc64:	f009 fb66 	bl	8015334 <iprintf>
  }
}
 800bc68:	bf00      	nop
 800bc6a:	3710      	adds	r7, #16
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}
 800bc70:	08017894 	.word	0x08017894
 800bc74:	08017a74 	.word	0x08017a74
 800bc78:	080178f4 	.word	0x080178f4

0800bc7c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d002      	beq.n	800bc92 <pbuf_cat+0x16>
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d107      	bne.n	800bca2 <pbuf_cat+0x26>
 800bc92:	4b20      	ldr	r3, [pc, #128]	; (800bd14 <pbuf_cat+0x98>)
 800bc94:	f240 3259 	movw	r2, #857	; 0x359
 800bc98:	491f      	ldr	r1, [pc, #124]	; (800bd18 <pbuf_cat+0x9c>)
 800bc9a:	4820      	ldr	r0, [pc, #128]	; (800bd1c <pbuf_cat+0xa0>)
 800bc9c:	f009 fb4a 	bl	8015334 <iprintf>
 800bca0:	e034      	b.n	800bd0c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	60fb      	str	r3, [r7, #12]
 800bca6:	e00a      	b.n	800bcbe <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	891a      	ldrh	r2, [r3, #8]
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	891b      	ldrh	r3, [r3, #8]
 800bcb0:	4413      	add	r3, r2
 800bcb2:	b29a      	uxth	r2, r3
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	60fb      	str	r3, [r7, #12]
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d1f0      	bne.n	800bca8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	891a      	ldrh	r2, [r3, #8]
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	895b      	ldrh	r3, [r3, #10]
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	d006      	beq.n	800bce0 <pbuf_cat+0x64>
 800bcd2:	4b10      	ldr	r3, [pc, #64]	; (800bd14 <pbuf_cat+0x98>)
 800bcd4:	f240 3262 	movw	r2, #866	; 0x362
 800bcd8:	4911      	ldr	r1, [pc, #68]	; (800bd20 <pbuf_cat+0xa4>)
 800bcda:	4810      	ldr	r0, [pc, #64]	; (800bd1c <pbuf_cat+0xa0>)
 800bcdc:	f009 fb2a 	bl	8015334 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d006      	beq.n	800bcf6 <pbuf_cat+0x7a>
 800bce8:	4b0a      	ldr	r3, [pc, #40]	; (800bd14 <pbuf_cat+0x98>)
 800bcea:	f240 3263 	movw	r2, #867	; 0x363
 800bcee:	490d      	ldr	r1, [pc, #52]	; (800bd24 <pbuf_cat+0xa8>)
 800bcf0:	480a      	ldr	r0, [pc, #40]	; (800bd1c <pbuf_cat+0xa0>)
 800bcf2:	f009 fb1f 	bl	8015334 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	891a      	ldrh	r2, [r3, #8]
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	891b      	ldrh	r3, [r3, #8]
 800bcfe:	4413      	add	r3, r2
 800bd00:	b29a      	uxth	r2, r3
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	683a      	ldr	r2, [r7, #0]
 800bd0a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800bd0c:	3710      	adds	r7, #16
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
 800bd12:	bf00      	nop
 800bd14:	08017894 	.word	0x08017894
 800bd18:	08017a88 	.word	0x08017a88
 800bd1c:	080178f4 	.word	0x080178f4
 800bd20:	08017ac0 	.word	0x08017ac0
 800bd24:	08017af0 	.word	0x08017af0

0800bd28 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b086      	sub	sp, #24
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
 800bd30:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800bd32:	2300      	movs	r3, #0
 800bd34:	617b      	str	r3, [r7, #20]
 800bd36:	2300      	movs	r3, #0
 800bd38:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d008      	beq.n	800bd52 <pbuf_copy+0x2a>
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d005      	beq.n	800bd52 <pbuf_copy+0x2a>
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	891a      	ldrh	r2, [r3, #8]
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	891b      	ldrh	r3, [r3, #8]
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	d209      	bcs.n	800bd66 <pbuf_copy+0x3e>
 800bd52:	4b57      	ldr	r3, [pc, #348]	; (800beb0 <pbuf_copy+0x188>)
 800bd54:	f240 32c9 	movw	r2, #969	; 0x3c9
 800bd58:	4956      	ldr	r1, [pc, #344]	; (800beb4 <pbuf_copy+0x18c>)
 800bd5a:	4857      	ldr	r0, [pc, #348]	; (800beb8 <pbuf_copy+0x190>)
 800bd5c:	f009 faea 	bl	8015334 <iprintf>
 800bd60:	f06f 030f 	mvn.w	r3, #15
 800bd64:	e09f      	b.n	800bea6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	895b      	ldrh	r3, [r3, #10]
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	1ad2      	subs	r2, r2, r3
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	895b      	ldrh	r3, [r3, #10]
 800bd74:	4619      	mov	r1, r3
 800bd76:	693b      	ldr	r3, [r7, #16]
 800bd78:	1acb      	subs	r3, r1, r3
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d306      	bcc.n	800bd8c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	895b      	ldrh	r3, [r3, #10]
 800bd82:	461a      	mov	r2, r3
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	1ad3      	subs	r3, r2, r3
 800bd88:	60fb      	str	r3, [r7, #12]
 800bd8a:	e005      	b.n	800bd98 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	895b      	ldrh	r3, [r3, #10]
 800bd90:	461a      	mov	r2, r3
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	1ad3      	subs	r3, r2, r3
 800bd96:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	685a      	ldr	r2, [r3, #4]
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	18d0      	adds	r0, r2, r3
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	685a      	ldr	r2, [r3, #4]
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	4413      	add	r3, r2
 800bda8:	68fa      	ldr	r2, [r7, #12]
 800bdaa:	4619      	mov	r1, r3
 800bdac:	f009 fa92 	bl	80152d4 <memcpy>
    offset_to += len;
 800bdb0:	697a      	ldr	r2, [r7, #20]
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	4413      	add	r3, r2
 800bdb6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800bdb8:	693a      	ldr	r2, [r7, #16]
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	4413      	add	r3, r2
 800bdbe:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	895b      	ldrh	r3, [r3, #10]
 800bdc4:	461a      	mov	r2, r3
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d906      	bls.n	800bdda <pbuf_copy+0xb2>
 800bdcc:	4b38      	ldr	r3, [pc, #224]	; (800beb0 <pbuf_copy+0x188>)
 800bdce:	f240 32d9 	movw	r2, #985	; 0x3d9
 800bdd2:	493a      	ldr	r1, [pc, #232]	; (800bebc <pbuf_copy+0x194>)
 800bdd4:	4838      	ldr	r0, [pc, #224]	; (800beb8 <pbuf_copy+0x190>)
 800bdd6:	f009 faad 	bl	8015334 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	895b      	ldrh	r3, [r3, #10]
 800bdde:	461a      	mov	r2, r3
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d906      	bls.n	800bdf4 <pbuf_copy+0xcc>
 800bde6:	4b32      	ldr	r3, [pc, #200]	; (800beb0 <pbuf_copy+0x188>)
 800bde8:	f240 32da 	movw	r2, #986	; 0x3da
 800bdec:	4934      	ldr	r1, [pc, #208]	; (800bec0 <pbuf_copy+0x198>)
 800bdee:	4832      	ldr	r0, [pc, #200]	; (800beb8 <pbuf_copy+0x190>)
 800bdf0:	f009 faa0 	bl	8015334 <iprintf>
    if (offset_from >= p_from->len) {
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	895b      	ldrh	r3, [r3, #10]
 800bdf8:	461a      	mov	r2, r3
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d304      	bcc.n	800be0a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800be00:	2300      	movs	r3, #0
 800be02:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	895b      	ldrh	r3, [r3, #10]
 800be0e:	461a      	mov	r2, r3
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	4293      	cmp	r3, r2
 800be14:	d114      	bne.n	800be40 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800be16:	2300      	movs	r3, #0
 800be18:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d10c      	bne.n	800be40 <pbuf_copy+0x118>
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d009      	beq.n	800be40 <pbuf_copy+0x118>
 800be2c:	4b20      	ldr	r3, [pc, #128]	; (800beb0 <pbuf_copy+0x188>)
 800be2e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800be32:	4924      	ldr	r1, [pc, #144]	; (800bec4 <pbuf_copy+0x19c>)
 800be34:	4820      	ldr	r0, [pc, #128]	; (800beb8 <pbuf_copy+0x190>)
 800be36:	f009 fa7d 	bl	8015334 <iprintf>
 800be3a:	f06f 030f 	mvn.w	r3, #15
 800be3e:	e032      	b.n	800bea6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d013      	beq.n	800be6e <pbuf_copy+0x146>
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	895a      	ldrh	r2, [r3, #10]
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	891b      	ldrh	r3, [r3, #8]
 800be4e:	429a      	cmp	r2, r3
 800be50:	d10d      	bne.n	800be6e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d009      	beq.n	800be6e <pbuf_copy+0x146>
 800be5a:	4b15      	ldr	r3, [pc, #84]	; (800beb0 <pbuf_copy+0x188>)
 800be5c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800be60:	4919      	ldr	r1, [pc, #100]	; (800bec8 <pbuf_copy+0x1a0>)
 800be62:	4815      	ldr	r0, [pc, #84]	; (800beb8 <pbuf_copy+0x190>)
 800be64:	f009 fa66 	bl	8015334 <iprintf>
 800be68:	f06f 0305 	mvn.w	r3, #5
 800be6c:	e01b      	b.n	800bea6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d013      	beq.n	800be9c <pbuf_copy+0x174>
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	895a      	ldrh	r2, [r3, #10]
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	891b      	ldrh	r3, [r3, #8]
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d10d      	bne.n	800be9c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d009      	beq.n	800be9c <pbuf_copy+0x174>
 800be88:	4b09      	ldr	r3, [pc, #36]	; (800beb0 <pbuf_copy+0x188>)
 800be8a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800be8e:	490e      	ldr	r1, [pc, #56]	; (800bec8 <pbuf_copy+0x1a0>)
 800be90:	4809      	ldr	r0, [pc, #36]	; (800beb8 <pbuf_copy+0x190>)
 800be92:	f009 fa4f 	bl	8015334 <iprintf>
 800be96:	f06f 0305 	mvn.w	r3, #5
 800be9a:	e004      	b.n	800bea6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	f47f af61 	bne.w	800bd66 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800bea4:	2300      	movs	r3, #0
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3718      	adds	r7, #24
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}
 800beae:	bf00      	nop
 800beb0:	08017894 	.word	0x08017894
 800beb4:	08017b3c 	.word	0x08017b3c
 800beb8:	080178f4 	.word	0x080178f4
 800bebc:	08017b6c 	.word	0x08017b6c
 800bec0:	08017b84 	.word	0x08017b84
 800bec4:	08017ba0 	.word	0x08017ba0
 800bec8:	08017bb0 	.word	0x08017bb0

0800becc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b088      	sub	sp, #32
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	60f8      	str	r0, [r7, #12]
 800bed4:	60b9      	str	r1, [r7, #8]
 800bed6:	4611      	mov	r1, r2
 800bed8:	461a      	mov	r2, r3
 800beda:	460b      	mov	r3, r1
 800bedc:	80fb      	strh	r3, [r7, #6]
 800bede:	4613      	mov	r3, r2
 800bee0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800bee2:	2300      	movs	r3, #0
 800bee4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800bee6:	2300      	movs	r3, #0
 800bee8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d108      	bne.n	800bf02 <pbuf_copy_partial+0x36>
 800bef0:	4b2b      	ldr	r3, [pc, #172]	; (800bfa0 <pbuf_copy_partial+0xd4>)
 800bef2:	f240 420a 	movw	r2, #1034	; 0x40a
 800bef6:	492b      	ldr	r1, [pc, #172]	; (800bfa4 <pbuf_copy_partial+0xd8>)
 800bef8:	482b      	ldr	r0, [pc, #172]	; (800bfa8 <pbuf_copy_partial+0xdc>)
 800befa:	f009 fa1b 	bl	8015334 <iprintf>
 800befe:	2300      	movs	r3, #0
 800bf00:	e04a      	b.n	800bf98 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d108      	bne.n	800bf1a <pbuf_copy_partial+0x4e>
 800bf08:	4b25      	ldr	r3, [pc, #148]	; (800bfa0 <pbuf_copy_partial+0xd4>)
 800bf0a:	f240 420b 	movw	r2, #1035	; 0x40b
 800bf0e:	4927      	ldr	r1, [pc, #156]	; (800bfac <pbuf_copy_partial+0xe0>)
 800bf10:	4825      	ldr	r0, [pc, #148]	; (800bfa8 <pbuf_copy_partial+0xdc>)
 800bf12:	f009 fa0f 	bl	8015334 <iprintf>
 800bf16:	2300      	movs	r3, #0
 800bf18:	e03e      	b.n	800bf98 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	61fb      	str	r3, [r7, #28]
 800bf1e:	e034      	b.n	800bf8a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800bf20:	88bb      	ldrh	r3, [r7, #4]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d00a      	beq.n	800bf3c <pbuf_copy_partial+0x70>
 800bf26:	69fb      	ldr	r3, [r7, #28]
 800bf28:	895b      	ldrh	r3, [r3, #10]
 800bf2a:	88ba      	ldrh	r2, [r7, #4]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d305      	bcc.n	800bf3c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800bf30:	69fb      	ldr	r3, [r7, #28]
 800bf32:	895b      	ldrh	r3, [r3, #10]
 800bf34:	88ba      	ldrh	r2, [r7, #4]
 800bf36:	1ad3      	subs	r3, r2, r3
 800bf38:	80bb      	strh	r3, [r7, #4]
 800bf3a:	e023      	b.n	800bf84 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800bf3c:	69fb      	ldr	r3, [r7, #28]
 800bf3e:	895a      	ldrh	r2, [r3, #10]
 800bf40:	88bb      	ldrh	r3, [r7, #4]
 800bf42:	1ad3      	subs	r3, r2, r3
 800bf44:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800bf46:	8b3a      	ldrh	r2, [r7, #24]
 800bf48:	88fb      	ldrh	r3, [r7, #6]
 800bf4a:	429a      	cmp	r2, r3
 800bf4c:	d901      	bls.n	800bf52 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800bf4e:	88fb      	ldrh	r3, [r7, #6]
 800bf50:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800bf52:	8b7b      	ldrh	r3, [r7, #26]
 800bf54:	68ba      	ldr	r2, [r7, #8]
 800bf56:	18d0      	adds	r0, r2, r3
 800bf58:	69fb      	ldr	r3, [r7, #28]
 800bf5a:	685a      	ldr	r2, [r3, #4]
 800bf5c:	88bb      	ldrh	r3, [r7, #4]
 800bf5e:	4413      	add	r3, r2
 800bf60:	8b3a      	ldrh	r2, [r7, #24]
 800bf62:	4619      	mov	r1, r3
 800bf64:	f009 f9b6 	bl	80152d4 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800bf68:	8afa      	ldrh	r2, [r7, #22]
 800bf6a:	8b3b      	ldrh	r3, [r7, #24]
 800bf6c:	4413      	add	r3, r2
 800bf6e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800bf70:	8b7a      	ldrh	r2, [r7, #26]
 800bf72:	8b3b      	ldrh	r3, [r7, #24]
 800bf74:	4413      	add	r3, r2
 800bf76:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800bf78:	88fa      	ldrh	r2, [r7, #6]
 800bf7a:	8b3b      	ldrh	r3, [r7, #24]
 800bf7c:	1ad3      	subs	r3, r2, r3
 800bf7e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800bf80:	2300      	movs	r3, #0
 800bf82:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bf84:	69fb      	ldr	r3, [r7, #28]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	61fb      	str	r3, [r7, #28]
 800bf8a:	88fb      	ldrh	r3, [r7, #6]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d002      	beq.n	800bf96 <pbuf_copy_partial+0xca>
 800bf90:	69fb      	ldr	r3, [r7, #28]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d1c4      	bne.n	800bf20 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800bf96:	8afb      	ldrh	r3, [r7, #22]
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3720      	adds	r7, #32
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}
 800bfa0:	08017894 	.word	0x08017894
 800bfa4:	08017bdc 	.word	0x08017bdc
 800bfa8:	080178f4 	.word	0x080178f4
 800bfac:	08017bfc 	.word	0x08017bfc

0800bfb0 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b087      	sub	sp, #28
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	60f8      	str	r0, [r7, #12]
 800bfb8:	460b      	mov	r3, r1
 800bfba:	607a      	str	r2, [r7, #4]
 800bfbc:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800bfbe:	897b      	ldrh	r3, [r7, #10]
 800bfc0:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800bfc6:	e007      	b.n	800bfd8 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	895b      	ldrh	r3, [r3, #10]
 800bfcc:	8afa      	ldrh	r2, [r7, #22]
 800bfce:	1ad3      	subs	r3, r2, r3
 800bfd0:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d004      	beq.n	800bfe8 <pbuf_skip_const+0x38>
 800bfde:	693b      	ldr	r3, [r7, #16]
 800bfe0:	895b      	ldrh	r3, [r3, #10]
 800bfe2:	8afa      	ldrh	r2, [r7, #22]
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d2ef      	bcs.n	800bfc8 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d002      	beq.n	800bff4 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	8afa      	ldrh	r2, [r7, #22]
 800bff2:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800bff4:	693b      	ldr	r3, [r7, #16]
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	371c      	adds	r7, #28
 800bffa:	46bd      	mov	sp, r7
 800bffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c000:	4770      	bx	lr
	...

0800c004 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b084      	sub	sp, #16
 800c008:	af00      	add	r7, sp, #0
 800c00a:	4603      	mov	r3, r0
 800c00c:	603a      	str	r2, [r7, #0]
 800c00e:	71fb      	strb	r3, [r7, #7]
 800c010:	460b      	mov	r3, r1
 800c012:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	8919      	ldrh	r1, [r3, #8]
 800c018:	88ba      	ldrh	r2, [r7, #4]
 800c01a:	79fb      	ldrb	r3, [r7, #7]
 800c01c:	4618      	mov	r0, r3
 800c01e:	f7ff fa7b 	bl	800b518 <pbuf_alloc>
 800c022:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d101      	bne.n	800c02e <pbuf_clone+0x2a>
    return NULL;
 800c02a:	2300      	movs	r3, #0
 800c02c:	e011      	b.n	800c052 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c02e:	6839      	ldr	r1, [r7, #0]
 800c030:	68f8      	ldr	r0, [r7, #12]
 800c032:	f7ff fe79 	bl	800bd28 <pbuf_copy>
 800c036:	4603      	mov	r3, r0
 800c038:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c03a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d006      	beq.n	800c050 <pbuf_clone+0x4c>
 800c042:	4b06      	ldr	r3, [pc, #24]	; (800c05c <pbuf_clone+0x58>)
 800c044:	f240 5224 	movw	r2, #1316	; 0x524
 800c048:	4905      	ldr	r1, [pc, #20]	; (800c060 <pbuf_clone+0x5c>)
 800c04a:	4806      	ldr	r0, [pc, #24]	; (800c064 <pbuf_clone+0x60>)
 800c04c:	f009 f972 	bl	8015334 <iprintf>
  return q;
 800c050:	68fb      	ldr	r3, [r7, #12]
}
 800c052:	4618      	mov	r0, r3
 800c054:	3710      	adds	r7, #16
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}
 800c05a:	bf00      	nop
 800c05c:	08017894 	.word	0x08017894
 800c060:	08017d08 	.word	0x08017d08
 800c064:	080178f4 	.word	0x080178f4

0800c068 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b084      	sub	sp, #16
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
 800c070:	460b      	mov	r3, r1
 800c072:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 800c074:	887b      	ldrh	r3, [r7, #2]
 800c076:	4619      	mov	r1, r3
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f000 f80c 	bl	800c096 <pbuf_try_get_at>
 800c07e:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	2b00      	cmp	r3, #0
 800c084:	db02      	blt.n	800c08c <pbuf_get_at+0x24>
    return (u8_t)ret;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	b2db      	uxtb	r3, r3
 800c08a:	e000      	b.n	800c08e <pbuf_get_at+0x26>
  }
  return 0;
 800c08c:	2300      	movs	r3, #0
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3710      	adds	r7, #16
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}

0800c096 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 800c096:	b580      	push	{r7, lr}
 800c098:	b084      	sub	sp, #16
 800c09a:	af00      	add	r7, sp, #0
 800c09c:	6078      	str	r0, [r7, #4]
 800c09e:	460b      	mov	r3, r1
 800c0a0:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800c0a2:	f107 020a 	add.w	r2, r7, #10
 800c0a6:	887b      	ldrh	r3, [r7, #2]
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f7ff ff80 	bl	800bfb0 <pbuf_skip_const>
 800c0b0:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d00a      	beq.n	800c0ce <pbuf_try_get_at+0x38>
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	895a      	ldrh	r2, [r3, #10]
 800c0bc:	897b      	ldrh	r3, [r7, #10]
 800c0be:	429a      	cmp	r2, r3
 800c0c0:	d905      	bls.n	800c0ce <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	897a      	ldrh	r2, [r7, #10]
 800c0c8:	4413      	add	r3, r2
 800c0ca:	781b      	ldrb	r3, [r3, #0]
 800c0cc:	e001      	b.n	800c0d2 <pbuf_try_get_at+0x3c>
  }
  return -1;
 800c0ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3710      	adds	r7, #16
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
	...

0800c0dc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c0e0:	f009 f9b6 	bl	8015450 <rand>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	b29b      	uxth	r3, r3
 800c0e8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c0ec:	b29b      	uxth	r3, r3
 800c0ee:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c0f2:	b29a      	uxth	r2, r3
 800c0f4:	4b01      	ldr	r3, [pc, #4]	; (800c0fc <tcp_init+0x20>)
 800c0f6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c0f8:	bf00      	nop
 800c0fa:	bd80      	pop	{r7, pc}
 800c0fc:	20000010 	.word	0x20000010

0800c100 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b082      	sub	sp, #8
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	7d1b      	ldrb	r3, [r3, #20]
 800c10c:	2b01      	cmp	r3, #1
 800c10e:	d105      	bne.n	800c11c <tcp_free+0x1c>
 800c110:	4b06      	ldr	r3, [pc, #24]	; (800c12c <tcp_free+0x2c>)
 800c112:	22d4      	movs	r2, #212	; 0xd4
 800c114:	4906      	ldr	r1, [pc, #24]	; (800c130 <tcp_free+0x30>)
 800c116:	4807      	ldr	r0, [pc, #28]	; (800c134 <tcp_free+0x34>)
 800c118:	f009 f90c 	bl	8015334 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c11c:	6879      	ldr	r1, [r7, #4]
 800c11e:	2001      	movs	r0, #1
 800c120:	f7fe fe3a 	bl	800ad98 <memp_free>
}
 800c124:	bf00      	nop
 800c126:	3708      	adds	r7, #8
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}
 800c12c:	08017d94 	.word	0x08017d94
 800c130:	08017dc4 	.word	0x08017dc4
 800c134:	08017dd8 	.word	0x08017dd8

0800c138 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b082      	sub	sp, #8
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	7d1b      	ldrb	r3, [r3, #20]
 800c144:	2b01      	cmp	r3, #1
 800c146:	d105      	bne.n	800c154 <tcp_free_listen+0x1c>
 800c148:	4b06      	ldr	r3, [pc, #24]	; (800c164 <tcp_free_listen+0x2c>)
 800c14a:	22df      	movs	r2, #223	; 0xdf
 800c14c:	4906      	ldr	r1, [pc, #24]	; (800c168 <tcp_free_listen+0x30>)
 800c14e:	4807      	ldr	r0, [pc, #28]	; (800c16c <tcp_free_listen+0x34>)
 800c150:	f009 f8f0 	bl	8015334 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c154:	6879      	ldr	r1, [r7, #4]
 800c156:	2002      	movs	r0, #2
 800c158:	f7fe fe1e 	bl	800ad98 <memp_free>
}
 800c15c:	bf00      	nop
 800c15e:	3708      	adds	r7, #8
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}
 800c164:	08017d94 	.word	0x08017d94
 800c168:	08017e00 	.word	0x08017e00
 800c16c:	08017dd8 	.word	0x08017dd8

0800c170 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c174:	f001 f898 	bl	800d2a8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c178:	4b07      	ldr	r3, [pc, #28]	; (800c198 <tcp_tmr+0x28>)
 800c17a:	781b      	ldrb	r3, [r3, #0]
 800c17c:	3301      	adds	r3, #1
 800c17e:	b2da      	uxtb	r2, r3
 800c180:	4b05      	ldr	r3, [pc, #20]	; (800c198 <tcp_tmr+0x28>)
 800c182:	701a      	strb	r2, [r3, #0]
 800c184:	4b04      	ldr	r3, [pc, #16]	; (800c198 <tcp_tmr+0x28>)
 800c186:	781b      	ldrb	r3, [r3, #0]
 800c188:	f003 0301 	and.w	r3, r3, #1
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d001      	beq.n	800c194 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c190:	f000 fd4a 	bl	800cc28 <tcp_slowtmr>
  }
}
 800c194:	bf00      	nop
 800c196:	bd80      	pop	{r7, pc}
 800c198:	2000409d 	.word	0x2000409d

0800c19c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b084      	sub	sp, #16
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
 800c1a4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d105      	bne.n	800c1b8 <tcp_remove_listener+0x1c>
 800c1ac:	4b0d      	ldr	r3, [pc, #52]	; (800c1e4 <tcp_remove_listener+0x48>)
 800c1ae:	22ff      	movs	r2, #255	; 0xff
 800c1b0:	490d      	ldr	r1, [pc, #52]	; (800c1e8 <tcp_remove_listener+0x4c>)
 800c1b2:	480e      	ldr	r0, [pc, #56]	; (800c1ec <tcp_remove_listener+0x50>)
 800c1b4:	f009 f8be 	bl	8015334 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	60fb      	str	r3, [r7, #12]
 800c1bc:	e00a      	b.n	800c1d4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1c2:	683a      	ldr	r2, [r7, #0]
 800c1c4:	429a      	cmp	r2, r3
 800c1c6:	d102      	bne.n	800c1ce <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	68db      	ldr	r3, [r3, #12]
 800c1d2:	60fb      	str	r3, [r7, #12]
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d1f1      	bne.n	800c1be <tcp_remove_listener+0x22>
    }
  }
}
 800c1da:	bf00      	nop
 800c1dc:	bf00      	nop
 800c1de:	3710      	adds	r7, #16
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}
 800c1e4:	08017d94 	.word	0x08017d94
 800c1e8:	08017e1c 	.word	0x08017e1c
 800c1ec:	08017dd8 	.word	0x08017dd8

0800c1f0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b084      	sub	sp, #16
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d106      	bne.n	800c20c <tcp_listen_closed+0x1c>
 800c1fe:	4b14      	ldr	r3, [pc, #80]	; (800c250 <tcp_listen_closed+0x60>)
 800c200:	f240 1211 	movw	r2, #273	; 0x111
 800c204:	4913      	ldr	r1, [pc, #76]	; (800c254 <tcp_listen_closed+0x64>)
 800c206:	4814      	ldr	r0, [pc, #80]	; (800c258 <tcp_listen_closed+0x68>)
 800c208:	f009 f894 	bl	8015334 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	7d1b      	ldrb	r3, [r3, #20]
 800c210:	2b01      	cmp	r3, #1
 800c212:	d006      	beq.n	800c222 <tcp_listen_closed+0x32>
 800c214:	4b0e      	ldr	r3, [pc, #56]	; (800c250 <tcp_listen_closed+0x60>)
 800c216:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c21a:	4910      	ldr	r1, [pc, #64]	; (800c25c <tcp_listen_closed+0x6c>)
 800c21c:	480e      	ldr	r0, [pc, #56]	; (800c258 <tcp_listen_closed+0x68>)
 800c21e:	f009 f889 	bl	8015334 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c222:	2301      	movs	r3, #1
 800c224:	60fb      	str	r3, [r7, #12]
 800c226:	e00b      	b.n	800c240 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c228:	4a0d      	ldr	r2, [pc, #52]	; (800c260 <tcp_listen_closed+0x70>)
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	6879      	ldr	r1, [r7, #4]
 800c234:	4618      	mov	r0, r3
 800c236:	f7ff ffb1 	bl	800c19c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	3301      	adds	r3, #1
 800c23e:	60fb      	str	r3, [r7, #12]
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	2b03      	cmp	r3, #3
 800c244:	d9f0      	bls.n	800c228 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c246:	bf00      	nop
 800c248:	bf00      	nop
 800c24a:	3710      	adds	r7, #16
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}
 800c250:	08017d94 	.word	0x08017d94
 800c254:	08017e44 	.word	0x08017e44
 800c258:	08017dd8 	.word	0x08017dd8
 800c25c:	08017e50 	.word	0x08017e50
 800c260:	08019e28 	.word	0x08019e28

0800c264 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c264:	b5b0      	push	{r4, r5, r7, lr}
 800c266:	b088      	sub	sp, #32
 800c268:	af04      	add	r7, sp, #16
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	460b      	mov	r3, r1
 800c26e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d106      	bne.n	800c284 <tcp_close_shutdown+0x20>
 800c276:	4b63      	ldr	r3, [pc, #396]	; (800c404 <tcp_close_shutdown+0x1a0>)
 800c278:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c27c:	4962      	ldr	r1, [pc, #392]	; (800c408 <tcp_close_shutdown+0x1a4>)
 800c27e:	4863      	ldr	r0, [pc, #396]	; (800c40c <tcp_close_shutdown+0x1a8>)
 800c280:	f009 f858 	bl	8015334 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c284:	78fb      	ldrb	r3, [r7, #3]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d066      	beq.n	800c358 <tcp_close_shutdown+0xf4>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	7d1b      	ldrb	r3, [r3, #20]
 800c28e:	2b04      	cmp	r3, #4
 800c290:	d003      	beq.n	800c29a <tcp_close_shutdown+0x36>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	7d1b      	ldrb	r3, [r3, #20]
 800c296:	2b07      	cmp	r3, #7
 800c298:	d15e      	bne.n	800c358 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d104      	bne.n	800c2ac <tcp_close_shutdown+0x48>
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2a6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c2aa:	d055      	beq.n	800c358 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	8b5b      	ldrh	r3, [r3, #26]
 800c2b0:	f003 0310 	and.w	r3, r3, #16
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d106      	bne.n	800c2c6 <tcp_close_shutdown+0x62>
 800c2b8:	4b52      	ldr	r3, [pc, #328]	; (800c404 <tcp_close_shutdown+0x1a0>)
 800c2ba:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800c2be:	4954      	ldr	r1, [pc, #336]	; (800c410 <tcp_close_shutdown+0x1ac>)
 800c2c0:	4852      	ldr	r0, [pc, #328]	; (800c40c <tcp_close_shutdown+0x1a8>)
 800c2c2:	f009 f837 	bl	8015334 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c2ce:	687d      	ldr	r5, [r7, #4]
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	3304      	adds	r3, #4
 800c2d4:	687a      	ldr	r2, [r7, #4]
 800c2d6:	8ad2      	ldrh	r2, [r2, #22]
 800c2d8:	6879      	ldr	r1, [r7, #4]
 800c2da:	8b09      	ldrh	r1, [r1, #24]
 800c2dc:	9102      	str	r1, [sp, #8]
 800c2de:	9201      	str	r2, [sp, #4]
 800c2e0:	9300      	str	r3, [sp, #0]
 800c2e2:	462b      	mov	r3, r5
 800c2e4:	4622      	mov	r2, r4
 800c2e6:	4601      	mov	r1, r0
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f005 fd91 	bl	8011e10 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f001 fb72 	bl	800d9d8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c2f4:	4b47      	ldr	r3, [pc, #284]	; (800c414 <tcp_close_shutdown+0x1b0>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	687a      	ldr	r2, [r7, #4]
 800c2fa:	429a      	cmp	r2, r3
 800c2fc:	d105      	bne.n	800c30a <tcp_close_shutdown+0xa6>
 800c2fe:	4b45      	ldr	r3, [pc, #276]	; (800c414 <tcp_close_shutdown+0x1b0>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	68db      	ldr	r3, [r3, #12]
 800c304:	4a43      	ldr	r2, [pc, #268]	; (800c414 <tcp_close_shutdown+0x1b0>)
 800c306:	6013      	str	r3, [r2, #0]
 800c308:	e013      	b.n	800c332 <tcp_close_shutdown+0xce>
 800c30a:	4b42      	ldr	r3, [pc, #264]	; (800c414 <tcp_close_shutdown+0x1b0>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	60fb      	str	r3, [r7, #12]
 800c310:	e00c      	b.n	800c32c <tcp_close_shutdown+0xc8>
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	68db      	ldr	r3, [r3, #12]
 800c316:	687a      	ldr	r2, [r7, #4]
 800c318:	429a      	cmp	r2, r3
 800c31a:	d104      	bne.n	800c326 <tcp_close_shutdown+0xc2>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	68da      	ldr	r2, [r3, #12]
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	60da      	str	r2, [r3, #12]
 800c324:	e005      	b.n	800c332 <tcp_close_shutdown+0xce>
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	68db      	ldr	r3, [r3, #12]
 800c32a:	60fb      	str	r3, [r7, #12]
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d1ef      	bne.n	800c312 <tcp_close_shutdown+0xae>
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2200      	movs	r2, #0
 800c336:	60da      	str	r2, [r3, #12]
 800c338:	4b37      	ldr	r3, [pc, #220]	; (800c418 <tcp_close_shutdown+0x1b4>)
 800c33a:	2201      	movs	r2, #1
 800c33c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c33e:	4b37      	ldr	r3, [pc, #220]	; (800c41c <tcp_close_shutdown+0x1b8>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	687a      	ldr	r2, [r7, #4]
 800c344:	429a      	cmp	r2, r3
 800c346:	d102      	bne.n	800c34e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c348:	f004 f806 	bl	8010358 <tcp_trigger_input_pcb_close>
 800c34c:	e002      	b.n	800c354 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f7ff fed6 	bl	800c100 <tcp_free>
      }
      return ERR_OK;
 800c354:	2300      	movs	r3, #0
 800c356:	e050      	b.n	800c3fa <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	7d1b      	ldrb	r3, [r3, #20]
 800c35c:	2b02      	cmp	r3, #2
 800c35e:	d03b      	beq.n	800c3d8 <tcp_close_shutdown+0x174>
 800c360:	2b02      	cmp	r3, #2
 800c362:	dc44      	bgt.n	800c3ee <tcp_close_shutdown+0x18a>
 800c364:	2b00      	cmp	r3, #0
 800c366:	d002      	beq.n	800c36e <tcp_close_shutdown+0x10a>
 800c368:	2b01      	cmp	r3, #1
 800c36a:	d02a      	beq.n	800c3c2 <tcp_close_shutdown+0x15e>
 800c36c:	e03f      	b.n	800c3ee <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	8adb      	ldrh	r3, [r3, #22]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d021      	beq.n	800c3ba <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c376:	4b2a      	ldr	r3, [pc, #168]	; (800c420 <tcp_close_shutdown+0x1bc>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	687a      	ldr	r2, [r7, #4]
 800c37c:	429a      	cmp	r2, r3
 800c37e:	d105      	bne.n	800c38c <tcp_close_shutdown+0x128>
 800c380:	4b27      	ldr	r3, [pc, #156]	; (800c420 <tcp_close_shutdown+0x1bc>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	68db      	ldr	r3, [r3, #12]
 800c386:	4a26      	ldr	r2, [pc, #152]	; (800c420 <tcp_close_shutdown+0x1bc>)
 800c388:	6013      	str	r3, [r2, #0]
 800c38a:	e013      	b.n	800c3b4 <tcp_close_shutdown+0x150>
 800c38c:	4b24      	ldr	r3, [pc, #144]	; (800c420 <tcp_close_shutdown+0x1bc>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	60bb      	str	r3, [r7, #8]
 800c392:	e00c      	b.n	800c3ae <tcp_close_shutdown+0x14a>
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	68db      	ldr	r3, [r3, #12]
 800c398:	687a      	ldr	r2, [r7, #4]
 800c39a:	429a      	cmp	r2, r3
 800c39c:	d104      	bne.n	800c3a8 <tcp_close_shutdown+0x144>
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	68da      	ldr	r2, [r3, #12]
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	60da      	str	r2, [r3, #12]
 800c3a6:	e005      	b.n	800c3b4 <tcp_close_shutdown+0x150>
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	68db      	ldr	r3, [r3, #12]
 800c3ac:	60bb      	str	r3, [r7, #8]
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d1ef      	bne.n	800c394 <tcp_close_shutdown+0x130>
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f7ff fea0 	bl	800c100 <tcp_free>
      break;
 800c3c0:	e01a      	b.n	800c3f8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f7ff ff14 	bl	800c1f0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c3c8:	6879      	ldr	r1, [r7, #4]
 800c3ca:	4816      	ldr	r0, [pc, #88]	; (800c424 <tcp_close_shutdown+0x1c0>)
 800c3cc:	f001 fb54 	bl	800da78 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f7ff feb1 	bl	800c138 <tcp_free_listen>
      break;
 800c3d6:	e00f      	b.n	800c3f8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c3d8:	6879      	ldr	r1, [r7, #4]
 800c3da:	480e      	ldr	r0, [pc, #56]	; (800c414 <tcp_close_shutdown+0x1b0>)
 800c3dc:	f001 fb4c 	bl	800da78 <tcp_pcb_remove>
 800c3e0:	4b0d      	ldr	r3, [pc, #52]	; (800c418 <tcp_close_shutdown+0x1b4>)
 800c3e2:	2201      	movs	r2, #1
 800c3e4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f7ff fe8a 	bl	800c100 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c3ec:	e004      	b.n	800c3f8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f000 f81a 	bl	800c428 <tcp_close_shutdown_fin>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	e000      	b.n	800c3fa <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c3f8:	2300      	movs	r3, #0
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3710      	adds	r7, #16
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bdb0      	pop	{r4, r5, r7, pc}
 800c402:	bf00      	nop
 800c404:	08017d94 	.word	0x08017d94
 800c408:	08017e68 	.word	0x08017e68
 800c40c:	08017dd8 	.word	0x08017dd8
 800c410:	08017e88 	.word	0x08017e88
 800c414:	2000ab18 	.word	0x2000ab18
 800c418:	2000ab14 	.word	0x2000ab14
 800c41c:	2000ab2c 	.word	0x2000ab2c
 800c420:	2000ab24 	.word	0x2000ab24
 800c424:	2000ab20 	.word	0x2000ab20

0800c428 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b084      	sub	sp, #16
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d106      	bne.n	800c444 <tcp_close_shutdown_fin+0x1c>
 800c436:	4b2e      	ldr	r3, [pc, #184]	; (800c4f0 <tcp_close_shutdown_fin+0xc8>)
 800c438:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800c43c:	492d      	ldr	r1, [pc, #180]	; (800c4f4 <tcp_close_shutdown_fin+0xcc>)
 800c43e:	482e      	ldr	r0, [pc, #184]	; (800c4f8 <tcp_close_shutdown_fin+0xd0>)
 800c440:	f008 ff78 	bl	8015334 <iprintf>

  switch (pcb->state) {
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	7d1b      	ldrb	r3, [r3, #20]
 800c448:	2b07      	cmp	r3, #7
 800c44a:	d020      	beq.n	800c48e <tcp_close_shutdown_fin+0x66>
 800c44c:	2b07      	cmp	r3, #7
 800c44e:	dc2b      	bgt.n	800c4a8 <tcp_close_shutdown_fin+0x80>
 800c450:	2b03      	cmp	r3, #3
 800c452:	d002      	beq.n	800c45a <tcp_close_shutdown_fin+0x32>
 800c454:	2b04      	cmp	r3, #4
 800c456:	d00d      	beq.n	800c474 <tcp_close_shutdown_fin+0x4c>
 800c458:	e026      	b.n	800c4a8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f004 fde6 	bl	801102c <tcp_send_fin>
 800c460:	4603      	mov	r3, r0
 800c462:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c464:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d11f      	bne.n	800c4ac <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2205      	movs	r2, #5
 800c470:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c472:	e01b      	b.n	800c4ac <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f004 fdd9 	bl	801102c <tcp_send_fin>
 800c47a:	4603      	mov	r3, r0
 800c47c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c47e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d114      	bne.n	800c4b0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2205      	movs	r2, #5
 800c48a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c48c:	e010      	b.n	800c4b0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f004 fdcc 	bl	801102c <tcp_send_fin>
 800c494:	4603      	mov	r3, r0
 800c496:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c498:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d109      	bne.n	800c4b4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2209      	movs	r2, #9
 800c4a4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c4a6:	e005      	b.n	800c4b4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	e01c      	b.n	800c4e6 <tcp_close_shutdown_fin+0xbe>
      break;
 800c4ac:	bf00      	nop
 800c4ae:	e002      	b.n	800c4b6 <tcp_close_shutdown_fin+0x8e>
      break;
 800c4b0:	bf00      	nop
 800c4b2:	e000      	b.n	800c4b6 <tcp_close_shutdown_fin+0x8e>
      break;
 800c4b4:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c4b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d103      	bne.n	800c4c6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	f004 fef2 	bl	80112a8 <tcp_output>
 800c4c4:	e00d      	b.n	800c4e2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c4c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4ce:	d108      	bne.n	800c4e2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	8b5b      	ldrh	r3, [r3, #26]
 800c4d4:	f043 0308 	orr.w	r3, r3, #8
 800c4d8:	b29a      	uxth	r2, r3
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	e001      	b.n	800c4e6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c4e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3710      	adds	r7, #16
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}
 800c4ee:	bf00      	nop
 800c4f0:	08017d94 	.word	0x08017d94
 800c4f4:	08017e44 	.word	0x08017e44
 800c4f8:	08017dd8 	.word	0x08017dd8

0800c4fc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b082      	sub	sp, #8
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d109      	bne.n	800c51e <tcp_close+0x22>
 800c50a:	4b0f      	ldr	r3, [pc, #60]	; (800c548 <tcp_close+0x4c>)
 800c50c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800c510:	490e      	ldr	r1, [pc, #56]	; (800c54c <tcp_close+0x50>)
 800c512:	480f      	ldr	r0, [pc, #60]	; (800c550 <tcp_close+0x54>)
 800c514:	f008 ff0e 	bl	8015334 <iprintf>
 800c518:	f06f 030f 	mvn.w	r3, #15
 800c51c:	e00f      	b.n	800c53e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	7d1b      	ldrb	r3, [r3, #20]
 800c522:	2b01      	cmp	r3, #1
 800c524:	d006      	beq.n	800c534 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	8b5b      	ldrh	r3, [r3, #26]
 800c52a:	f043 0310 	orr.w	r3, r3, #16
 800c52e:	b29a      	uxth	r2, r3
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c534:	2101      	movs	r1, #1
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f7ff fe94 	bl	800c264 <tcp_close_shutdown>
 800c53c:	4603      	mov	r3, r0
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3708      	adds	r7, #8
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
 800c546:	bf00      	nop
 800c548:	08017d94 	.word	0x08017d94
 800c54c:	08017ea4 	.word	0x08017ea4
 800c550:	08017dd8 	.word	0x08017dd8

0800c554 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b08e      	sub	sp, #56	; 0x38
 800c558:	af04      	add	r7, sp, #16
 800c55a:	6078      	str	r0, [r7, #4]
 800c55c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d107      	bne.n	800c574 <tcp_abandon+0x20>
 800c564:	4b52      	ldr	r3, [pc, #328]	; (800c6b0 <tcp_abandon+0x15c>)
 800c566:	f240 223d 	movw	r2, #573	; 0x23d
 800c56a:	4952      	ldr	r1, [pc, #328]	; (800c6b4 <tcp_abandon+0x160>)
 800c56c:	4852      	ldr	r0, [pc, #328]	; (800c6b8 <tcp_abandon+0x164>)
 800c56e:	f008 fee1 	bl	8015334 <iprintf>
 800c572:	e099      	b.n	800c6a8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	7d1b      	ldrb	r3, [r3, #20]
 800c578:	2b01      	cmp	r3, #1
 800c57a:	d106      	bne.n	800c58a <tcp_abandon+0x36>
 800c57c:	4b4c      	ldr	r3, [pc, #304]	; (800c6b0 <tcp_abandon+0x15c>)
 800c57e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800c582:	494e      	ldr	r1, [pc, #312]	; (800c6bc <tcp_abandon+0x168>)
 800c584:	484c      	ldr	r0, [pc, #304]	; (800c6b8 <tcp_abandon+0x164>)
 800c586:	f008 fed5 	bl	8015334 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	7d1b      	ldrb	r3, [r3, #20]
 800c58e:	2b0a      	cmp	r3, #10
 800c590:	d107      	bne.n	800c5a2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c592:	6879      	ldr	r1, [r7, #4]
 800c594:	484a      	ldr	r0, [pc, #296]	; (800c6c0 <tcp_abandon+0x16c>)
 800c596:	f001 fa6f 	bl	800da78 <tcp_pcb_remove>
    tcp_free(pcb);
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f7ff fdb0 	bl	800c100 <tcp_free>
 800c5a0:	e082      	b.n	800c6a8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5ae:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5b4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5bc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	691b      	ldr	r3, [r3, #16]
 800c5c2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	7d1b      	ldrb	r3, [r3, #20]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d126      	bne.n	800c61a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	8adb      	ldrh	r3, [r3, #22]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d02e      	beq.n	800c632 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c5d4:	4b3b      	ldr	r3, [pc, #236]	; (800c6c4 <tcp_abandon+0x170>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	687a      	ldr	r2, [r7, #4]
 800c5da:	429a      	cmp	r2, r3
 800c5dc:	d105      	bne.n	800c5ea <tcp_abandon+0x96>
 800c5de:	4b39      	ldr	r3, [pc, #228]	; (800c6c4 <tcp_abandon+0x170>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	68db      	ldr	r3, [r3, #12]
 800c5e4:	4a37      	ldr	r2, [pc, #220]	; (800c6c4 <tcp_abandon+0x170>)
 800c5e6:	6013      	str	r3, [r2, #0]
 800c5e8:	e013      	b.n	800c612 <tcp_abandon+0xbe>
 800c5ea:	4b36      	ldr	r3, [pc, #216]	; (800c6c4 <tcp_abandon+0x170>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	61fb      	str	r3, [r7, #28]
 800c5f0:	e00c      	b.n	800c60c <tcp_abandon+0xb8>
 800c5f2:	69fb      	ldr	r3, [r7, #28]
 800c5f4:	68db      	ldr	r3, [r3, #12]
 800c5f6:	687a      	ldr	r2, [r7, #4]
 800c5f8:	429a      	cmp	r2, r3
 800c5fa:	d104      	bne.n	800c606 <tcp_abandon+0xb2>
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	68da      	ldr	r2, [r3, #12]
 800c600:	69fb      	ldr	r3, [r7, #28]
 800c602:	60da      	str	r2, [r3, #12]
 800c604:	e005      	b.n	800c612 <tcp_abandon+0xbe>
 800c606:	69fb      	ldr	r3, [r7, #28]
 800c608:	68db      	ldr	r3, [r3, #12]
 800c60a:	61fb      	str	r3, [r7, #28]
 800c60c:	69fb      	ldr	r3, [r7, #28]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d1ef      	bne.n	800c5f2 <tcp_abandon+0x9e>
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2200      	movs	r2, #0
 800c616:	60da      	str	r2, [r3, #12]
 800c618:	e00b      	b.n	800c632 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	8adb      	ldrh	r3, [r3, #22]
 800c622:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c624:	6879      	ldr	r1, [r7, #4]
 800c626:	4828      	ldr	r0, [pc, #160]	; (800c6c8 <tcp_abandon+0x174>)
 800c628:	f001 fa26 	bl	800da78 <tcp_pcb_remove>
 800c62c:	4b27      	ldr	r3, [pc, #156]	; (800c6cc <tcp_abandon+0x178>)
 800c62e:	2201      	movs	r2, #1
 800c630:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c636:	2b00      	cmp	r3, #0
 800c638:	d004      	beq.n	800c644 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c63e:	4618      	mov	r0, r3
 800c640:	f000 ff12 	bl	800d468 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d004      	beq.n	800c656 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c650:	4618      	mov	r0, r3
 800c652:	f000 ff09 	bl	800d468 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d004      	beq.n	800c668 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c662:	4618      	mov	r0, r3
 800c664:	f000 ff00 	bl	800d468 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d00e      	beq.n	800c68c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c66e:	6879      	ldr	r1, [r7, #4]
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	3304      	adds	r3, #4
 800c674:	687a      	ldr	r2, [r7, #4]
 800c676:	8b12      	ldrh	r2, [r2, #24]
 800c678:	9202      	str	r2, [sp, #8]
 800c67a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c67c:	9201      	str	r2, [sp, #4]
 800c67e:	9300      	str	r3, [sp, #0]
 800c680:	460b      	mov	r3, r1
 800c682:	697a      	ldr	r2, [r7, #20]
 800c684:	69b9      	ldr	r1, [r7, #24]
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f005 fbc2 	bl	8011e10 <tcp_rst>
    }
    last_state = pcb->state;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	7d1b      	ldrb	r3, [r3, #20]
 800c690:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f7ff fd34 	bl	800c100 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d004      	beq.n	800c6a8 <tcp_abandon+0x154>
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	f06f 010c 	mvn.w	r1, #12
 800c6a4:	68f8      	ldr	r0, [r7, #12]
 800c6a6:	4798      	blx	r3
  }
}
 800c6a8:	3728      	adds	r7, #40	; 0x28
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}
 800c6ae:	bf00      	nop
 800c6b0:	08017d94 	.word	0x08017d94
 800c6b4:	08017ed8 	.word	0x08017ed8
 800c6b8:	08017dd8 	.word	0x08017dd8
 800c6bc:	08017ef4 	.word	0x08017ef4
 800c6c0:	2000ab28 	.word	0x2000ab28
 800c6c4:	2000ab24 	.word	0x2000ab24
 800c6c8:	2000ab18 	.word	0x2000ab18
 800c6cc:	2000ab14 	.word	0x2000ab14

0800c6d0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b082      	sub	sp, #8
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c6d8:	2101      	movs	r1, #1
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f7ff ff3a 	bl	800c554 <tcp_abandon>
}
 800c6e0:	bf00      	nop
 800c6e2:	3708      	adds	r7, #8
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}

0800c6e8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b088      	sub	sp, #32
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	60f8      	str	r0, [r7, #12]
 800c6f0:	60b9      	str	r1, [r7, #8]
 800c6f2:	4613      	mov	r3, r2
 800c6f4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800c6f6:	2304      	movs	r3, #4
 800c6f8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d101      	bne.n	800c704 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800c700:	4b3e      	ldr	r3, [pc, #248]	; (800c7fc <tcp_bind+0x114>)
 800c702:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d109      	bne.n	800c71e <tcp_bind+0x36>
 800c70a:	4b3d      	ldr	r3, [pc, #244]	; (800c800 <tcp_bind+0x118>)
 800c70c:	f240 22a9 	movw	r2, #681	; 0x2a9
 800c710:	493c      	ldr	r1, [pc, #240]	; (800c804 <tcp_bind+0x11c>)
 800c712:	483d      	ldr	r0, [pc, #244]	; (800c808 <tcp_bind+0x120>)
 800c714:	f008 fe0e 	bl	8015334 <iprintf>
 800c718:	f06f 030f 	mvn.w	r3, #15
 800c71c:	e06a      	b.n	800c7f4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	7d1b      	ldrb	r3, [r3, #20]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d009      	beq.n	800c73a <tcp_bind+0x52>
 800c726:	4b36      	ldr	r3, [pc, #216]	; (800c800 <tcp_bind+0x118>)
 800c728:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c72c:	4937      	ldr	r1, [pc, #220]	; (800c80c <tcp_bind+0x124>)
 800c72e:	4836      	ldr	r0, [pc, #216]	; (800c808 <tcp_bind+0x120>)
 800c730:	f008 fe00 	bl	8015334 <iprintf>
 800c734:	f06f 0305 	mvn.w	r3, #5
 800c738:	e05c      	b.n	800c7f4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800c73a:	88fb      	ldrh	r3, [r7, #6]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d109      	bne.n	800c754 <tcp_bind+0x6c>
    port = tcp_new_port();
 800c740:	f000 f914 	bl	800c96c <tcp_new_port>
 800c744:	4603      	mov	r3, r0
 800c746:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c748:	88fb      	ldrh	r3, [r7, #6]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d135      	bne.n	800c7ba <tcp_bind+0xd2>
      return ERR_BUF;
 800c74e:	f06f 0301 	mvn.w	r3, #1
 800c752:	e04f      	b.n	800c7f4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800c754:	2300      	movs	r3, #0
 800c756:	61fb      	str	r3, [r7, #28]
 800c758:	e02b      	b.n	800c7b2 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c75a:	4a2d      	ldr	r2, [pc, #180]	; (800c810 <tcp_bind+0x128>)
 800c75c:	69fb      	ldr	r3, [r7, #28]
 800c75e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	61bb      	str	r3, [r7, #24]
 800c766:	e01e      	b.n	800c7a6 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800c768:	69bb      	ldr	r3, [r7, #24]
 800c76a:	8adb      	ldrh	r3, [r3, #22]
 800c76c:	88fa      	ldrh	r2, [r7, #6]
 800c76e:	429a      	cmp	r2, r3
 800c770:	d116      	bne.n	800c7a0 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800c772:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c774:	2b00      	cmp	r3, #0
 800c776:	d010      	beq.n	800c79a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800c778:	69bb      	ldr	r3, [r7, #24]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d00c      	beq.n	800c79a <tcp_bind+0xb2>
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d009      	beq.n	800c79a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d005      	beq.n	800c79a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800c78e:	69bb      	ldr	r3, [r7, #24]
 800c790:	681a      	ldr	r2, [r3, #0]
 800c792:	68bb      	ldr	r3, [r7, #8]
 800c794:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c796:	429a      	cmp	r2, r3
 800c798:	d102      	bne.n	800c7a0 <tcp_bind+0xb8>
              return ERR_USE;
 800c79a:	f06f 0307 	mvn.w	r3, #7
 800c79e:	e029      	b.n	800c7f4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c7a0:	69bb      	ldr	r3, [r7, #24]
 800c7a2:	68db      	ldr	r3, [r3, #12]
 800c7a4:	61bb      	str	r3, [r7, #24]
 800c7a6:	69bb      	ldr	r3, [r7, #24]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d1dd      	bne.n	800c768 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800c7ac:	69fb      	ldr	r3, [r7, #28]
 800c7ae:	3301      	adds	r3, #1
 800c7b0:	61fb      	str	r3, [r7, #28]
 800c7b2:	69fa      	ldr	r2, [r7, #28]
 800c7b4:	697b      	ldr	r3, [r7, #20]
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	dbcf      	blt.n	800c75a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d00c      	beq.n	800c7da <tcp_bind+0xf2>
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d008      	beq.n	800c7da <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d002      	beq.n	800c7d4 <tcp_bind+0xec>
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	e000      	b.n	800c7d6 <tcp_bind+0xee>
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	68fa      	ldr	r2, [r7, #12]
 800c7d8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	88fa      	ldrh	r2, [r7, #6]
 800c7de:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800c7e0:	4b0c      	ldr	r3, [pc, #48]	; (800c814 <tcp_bind+0x12c>)
 800c7e2:	681a      	ldr	r2, [r3, #0]
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	60da      	str	r2, [r3, #12]
 800c7e8:	4a0a      	ldr	r2, [pc, #40]	; (800c814 <tcp_bind+0x12c>)
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	6013      	str	r3, [r2, #0]
 800c7ee:	f005 fcd1 	bl	8012194 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800c7f2:	2300      	movs	r3, #0
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	3720      	adds	r7, #32
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd80      	pop	{r7, pc}
 800c7fc:	08019e50 	.word	0x08019e50
 800c800:	08017d94 	.word	0x08017d94
 800c804:	08017f28 	.word	0x08017f28
 800c808:	08017dd8 	.word	0x08017dd8
 800c80c:	08017f40 	.word	0x08017f40
 800c810:	08019e28 	.word	0x08019e28
 800c814:	2000ab24 	.word	0x2000ab24

0800c818 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b084      	sub	sp, #16
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d106      	bne.n	800c834 <tcp_update_rcv_ann_wnd+0x1c>
 800c826:	4b25      	ldr	r3, [pc, #148]	; (800c8bc <tcp_update_rcv_ann_wnd+0xa4>)
 800c828:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c82c:	4924      	ldr	r1, [pc, #144]	; (800c8c0 <tcp_update_rcv_ann_wnd+0xa8>)
 800c82e:	4825      	ldr	r0, [pc, #148]	; (800c8c4 <tcp_update_rcv_ann_wnd+0xac>)
 800c830:	f008 fd80 	bl	8015334 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c838:	687a      	ldr	r2, [r7, #4]
 800c83a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c83c:	4413      	add	r3, r2
 800c83e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c844:	687a      	ldr	r2, [r7, #4]
 800c846:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c848:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c84c:	bf28      	it	cs
 800c84e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c852:	b292      	uxth	r2, r2
 800c854:	4413      	add	r3, r2
 800c856:	68fa      	ldr	r2, [r7, #12]
 800c858:	1ad3      	subs	r3, r2, r3
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	db08      	blt.n	800c870 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c86a:	68fa      	ldr	r2, [r7, #12]
 800c86c:	1ad3      	subs	r3, r2, r3
 800c86e:	e020      	b.n	800c8b2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c878:	1ad3      	subs	r3, r2, r3
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	dd03      	ble.n	800c886 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2200      	movs	r2, #0
 800c882:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c884:	e014      	b.n	800c8b0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c88e:	1ad3      	subs	r3, r2, r3
 800c890:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c898:	d306      	bcc.n	800c8a8 <tcp_update_rcv_ann_wnd+0x90>
 800c89a:	4b08      	ldr	r3, [pc, #32]	; (800c8bc <tcp_update_rcv_ann_wnd+0xa4>)
 800c89c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c8a0:	4909      	ldr	r1, [pc, #36]	; (800c8c8 <tcp_update_rcv_ann_wnd+0xb0>)
 800c8a2:	4808      	ldr	r0, [pc, #32]	; (800c8c4 <tcp_update_rcv_ann_wnd+0xac>)
 800c8a4:	f008 fd46 	bl	8015334 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	b29a      	uxth	r2, r3
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c8b0:	2300      	movs	r3, #0
  }
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3710      	adds	r7, #16
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}
 800c8ba:	bf00      	nop
 800c8bc:	08017d94 	.word	0x08017d94
 800c8c0:	08017ff0 	.word	0x08017ff0
 800c8c4:	08017dd8 	.word	0x08017dd8
 800c8c8:	08018014 	.word	0x08018014

0800c8cc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b084      	sub	sp, #16
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
 800c8d4:	460b      	mov	r3, r1
 800c8d6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d107      	bne.n	800c8ee <tcp_recved+0x22>
 800c8de:	4b1f      	ldr	r3, [pc, #124]	; (800c95c <tcp_recved+0x90>)
 800c8e0:	f240 32cf 	movw	r2, #975	; 0x3cf
 800c8e4:	491e      	ldr	r1, [pc, #120]	; (800c960 <tcp_recved+0x94>)
 800c8e6:	481f      	ldr	r0, [pc, #124]	; (800c964 <tcp_recved+0x98>)
 800c8e8:	f008 fd24 	bl	8015334 <iprintf>
 800c8ec:	e032      	b.n	800c954 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	7d1b      	ldrb	r3, [r3, #20]
 800c8f2:	2b01      	cmp	r3, #1
 800c8f4:	d106      	bne.n	800c904 <tcp_recved+0x38>
 800c8f6:	4b19      	ldr	r3, [pc, #100]	; (800c95c <tcp_recved+0x90>)
 800c8f8:	f240 32d2 	movw	r2, #978	; 0x3d2
 800c8fc:	491a      	ldr	r1, [pc, #104]	; (800c968 <tcp_recved+0x9c>)
 800c8fe:	4819      	ldr	r0, [pc, #100]	; (800c964 <tcp_recved+0x98>)
 800c900:	f008 fd18 	bl	8015334 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c908:	887b      	ldrh	r3, [r7, #2]
 800c90a:	4413      	add	r3, r2
 800c90c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c90e:	89fb      	ldrh	r3, [r7, #14]
 800c910:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c914:	d804      	bhi.n	800c920 <tcp_recved+0x54>
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c91a:	89fa      	ldrh	r2, [r7, #14]
 800c91c:	429a      	cmp	r2, r3
 800c91e:	d204      	bcs.n	800c92a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c926:	851a      	strh	r2, [r3, #40]	; 0x28
 800c928:	e002      	b.n	800c930 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	89fa      	ldrh	r2, [r7, #14]
 800c92e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f7ff ff71 	bl	800c818 <tcp_update_rcv_ann_wnd>
 800c936:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c93e:	d309      	bcc.n	800c954 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	8b5b      	ldrh	r3, [r3, #26]
 800c944:	f043 0302 	orr.w	r3, r3, #2
 800c948:	b29a      	uxth	r2, r3
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f004 fcaa 	bl	80112a8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c954:	3710      	adds	r7, #16
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}
 800c95a:	bf00      	nop
 800c95c:	08017d94 	.word	0x08017d94
 800c960:	08018030 	.word	0x08018030
 800c964:	08017dd8 	.word	0x08017dd8
 800c968:	08018048 	.word	0x08018048

0800c96c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800c96c:	b480      	push	{r7}
 800c96e:	b083      	sub	sp, #12
 800c970:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800c972:	2300      	movs	r3, #0
 800c974:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800c976:	4b1e      	ldr	r3, [pc, #120]	; (800c9f0 <tcp_new_port+0x84>)
 800c978:	881b      	ldrh	r3, [r3, #0]
 800c97a:	3301      	adds	r3, #1
 800c97c:	b29a      	uxth	r2, r3
 800c97e:	4b1c      	ldr	r3, [pc, #112]	; (800c9f0 <tcp_new_port+0x84>)
 800c980:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800c982:	4b1b      	ldr	r3, [pc, #108]	; (800c9f0 <tcp_new_port+0x84>)
 800c984:	881b      	ldrh	r3, [r3, #0]
 800c986:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c98a:	4293      	cmp	r3, r2
 800c98c:	d103      	bne.n	800c996 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800c98e:	4b18      	ldr	r3, [pc, #96]	; (800c9f0 <tcp_new_port+0x84>)
 800c990:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800c994:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c996:	2300      	movs	r3, #0
 800c998:	71fb      	strb	r3, [r7, #7]
 800c99a:	e01e      	b.n	800c9da <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c99c:	79fb      	ldrb	r3, [r7, #7]
 800c99e:	4a15      	ldr	r2, [pc, #84]	; (800c9f4 <tcp_new_port+0x88>)
 800c9a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	603b      	str	r3, [r7, #0]
 800c9a8:	e011      	b.n	800c9ce <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	8ada      	ldrh	r2, [r3, #22]
 800c9ae:	4b10      	ldr	r3, [pc, #64]	; (800c9f0 <tcp_new_port+0x84>)
 800c9b0:	881b      	ldrh	r3, [r3, #0]
 800c9b2:	429a      	cmp	r2, r3
 800c9b4:	d108      	bne.n	800c9c8 <tcp_new_port+0x5c>
        n++;
 800c9b6:	88bb      	ldrh	r3, [r7, #4]
 800c9b8:	3301      	adds	r3, #1
 800c9ba:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800c9bc:	88bb      	ldrh	r3, [r7, #4]
 800c9be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c9c2:	d3d8      	bcc.n	800c976 <tcp_new_port+0xa>
          return 0;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	e00d      	b.n	800c9e4 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	68db      	ldr	r3, [r3, #12]
 800c9cc:	603b      	str	r3, [r7, #0]
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d1ea      	bne.n	800c9aa <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c9d4:	79fb      	ldrb	r3, [r7, #7]
 800c9d6:	3301      	adds	r3, #1
 800c9d8:	71fb      	strb	r3, [r7, #7]
 800c9da:	79fb      	ldrb	r3, [r7, #7]
 800c9dc:	2b03      	cmp	r3, #3
 800c9de:	d9dd      	bls.n	800c99c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800c9e0:	4b03      	ldr	r3, [pc, #12]	; (800c9f0 <tcp_new_port+0x84>)
 800c9e2:	881b      	ldrh	r3, [r3, #0]
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	370c      	adds	r7, #12
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ee:	4770      	bx	lr
 800c9f0:	20000010 	.word	0x20000010
 800c9f4:	08019e28 	.word	0x08019e28

0800c9f8 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b08a      	sub	sp, #40	; 0x28
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	60f8      	str	r0, [r7, #12]
 800ca00:	60b9      	str	r1, [r7, #8]
 800ca02:	603b      	str	r3, [r7, #0]
 800ca04:	4613      	mov	r3, r2
 800ca06:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d109      	bne.n	800ca26 <tcp_connect+0x2e>
 800ca12:	4b7d      	ldr	r3, [pc, #500]	; (800cc08 <tcp_connect+0x210>)
 800ca14:	f240 4235 	movw	r2, #1077	; 0x435
 800ca18:	497c      	ldr	r1, [pc, #496]	; (800cc0c <tcp_connect+0x214>)
 800ca1a:	487d      	ldr	r0, [pc, #500]	; (800cc10 <tcp_connect+0x218>)
 800ca1c:	f008 fc8a 	bl	8015334 <iprintf>
 800ca20:	f06f 030f 	mvn.w	r3, #15
 800ca24:	e0ec      	b.n	800cc00 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d109      	bne.n	800ca40 <tcp_connect+0x48>
 800ca2c:	4b76      	ldr	r3, [pc, #472]	; (800cc08 <tcp_connect+0x210>)
 800ca2e:	f240 4236 	movw	r2, #1078	; 0x436
 800ca32:	4978      	ldr	r1, [pc, #480]	; (800cc14 <tcp_connect+0x21c>)
 800ca34:	4876      	ldr	r0, [pc, #472]	; (800cc10 <tcp_connect+0x218>)
 800ca36:	f008 fc7d 	bl	8015334 <iprintf>
 800ca3a:	f06f 030f 	mvn.w	r3, #15
 800ca3e:	e0df      	b.n	800cc00 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	7d1b      	ldrb	r3, [r3, #20]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d009      	beq.n	800ca5c <tcp_connect+0x64>
 800ca48:	4b6f      	ldr	r3, [pc, #444]	; (800cc08 <tcp_connect+0x210>)
 800ca4a:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800ca4e:	4972      	ldr	r1, [pc, #456]	; (800cc18 <tcp_connect+0x220>)
 800ca50:	486f      	ldr	r0, [pc, #444]	; (800cc10 <tcp_connect+0x218>)
 800ca52:	f008 fc6f 	bl	8015334 <iprintf>
 800ca56:	f06f 0309 	mvn.w	r3, #9
 800ca5a:	e0d1      	b.n	800cc00 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d002      	beq.n	800ca68 <tcp_connect+0x70>
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	e000      	b.n	800ca6a <tcp_connect+0x72>
 800ca68:	2300      	movs	r3, #0
 800ca6a:	68fa      	ldr	r2, [r7, #12]
 800ca6c:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	88fa      	ldrh	r2, [r7, #6]
 800ca72:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	7a1b      	ldrb	r3, [r3, #8]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d006      	beq.n	800ca8a <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	7a1b      	ldrb	r3, [r3, #8]
 800ca80:	4618      	mov	r0, r3
 800ca82:	f7fe fc9f 	bl	800b3c4 <netif_get_by_index>
 800ca86:	6278      	str	r0, [r7, #36]	; 0x24
 800ca88:	e005      	b.n	800ca96 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	3304      	adds	r3, #4
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f006 ffc8 	bl	8013a24 <ip4_route>
 800ca94:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800ca96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d102      	bne.n	800caa2 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800ca9c:	f06f 0303 	mvn.w	r3, #3
 800caa0:	e0ae      	b.n	800cc00 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d003      	beq.n	800cab0 <tcp_connect+0xb8>
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d111      	bne.n	800cad4 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800cab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d002      	beq.n	800cabc <tcp_connect+0xc4>
 800cab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab8:	3304      	adds	r3, #4
 800caba:	e000      	b.n	800cabe <tcp_connect+0xc6>
 800cabc:	2300      	movs	r3, #0
 800cabe:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800cac0:	69fb      	ldr	r3, [r7, #28]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d102      	bne.n	800cacc <tcp_connect+0xd4>
      return ERR_RTE;
 800cac6:	f06f 0303 	mvn.w	r3, #3
 800caca:	e099      	b.n	800cc00 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800cacc:	69fb      	ldr	r3, [r7, #28]
 800cace:	681a      	ldr	r2, [r3, #0]
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	8adb      	ldrh	r3, [r3, #22]
 800cad8:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	8adb      	ldrh	r3, [r3, #22]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d10c      	bne.n	800cafc <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800cae2:	f7ff ff43 	bl	800c96c <tcp_new_port>
 800cae6:	4603      	mov	r3, r0
 800cae8:	461a      	mov	r2, r3
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	8adb      	ldrh	r3, [r3, #22]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d102      	bne.n	800cafc <tcp_connect+0x104>
      return ERR_BUF;
 800caf6:	f06f 0301 	mvn.w	r3, #1
 800cafa:	e081      	b.n	800cc00 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800cafc:	68f8      	ldr	r0, [r7, #12]
 800cafe:	f001 f84f 	bl	800dba0 <tcp_next_iss>
 800cb02:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	2200      	movs	r2, #0
 800cb08:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	697a      	ldr	r2, [r7, #20]
 800cb0e:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800cb10:	697b      	ldr	r3, [r7, #20]
 800cb12:	1e5a      	subs	r2, r3, #1
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800cb18:	697b      	ldr	r3, [r7, #20]
 800cb1a:	1e5a      	subs	r2, r3, #1
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800cb20:	697b      	ldr	r3, [r7, #20]
 800cb22:	1e5a      	subs	r2, r3, #1
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800cb2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800cb46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800cb50:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	3304      	adds	r3, #4
 800cb5a:	461a      	mov	r2, r3
 800cb5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cb5e:	f001 f845 	bl	800dbec <tcp_eff_send_mss_netif>
 800cb62:	4603      	mov	r3, r0
 800cb64:	461a      	mov	r2, r3
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	2201      	movs	r2, #1
 800cb6e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	683a      	ldr	r2, [r7, #0]
 800cb76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800cb7a:	2102      	movs	r1, #2
 800cb7c:	68f8      	ldr	r0, [r7, #12]
 800cb7e:	f004 faa5 	bl	80110cc <tcp_enqueue_flags>
 800cb82:	4603      	mov	r3, r0
 800cb84:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800cb86:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d136      	bne.n	800cbfc <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	2202      	movs	r2, #2
 800cb92:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800cb94:	8b7b      	ldrh	r3, [r7, #26]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d021      	beq.n	800cbde <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800cb9a:	4b20      	ldr	r3, [pc, #128]	; (800cc1c <tcp_connect+0x224>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	68fa      	ldr	r2, [r7, #12]
 800cba0:	429a      	cmp	r2, r3
 800cba2:	d105      	bne.n	800cbb0 <tcp_connect+0x1b8>
 800cba4:	4b1d      	ldr	r3, [pc, #116]	; (800cc1c <tcp_connect+0x224>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	68db      	ldr	r3, [r3, #12]
 800cbaa:	4a1c      	ldr	r2, [pc, #112]	; (800cc1c <tcp_connect+0x224>)
 800cbac:	6013      	str	r3, [r2, #0]
 800cbae:	e013      	b.n	800cbd8 <tcp_connect+0x1e0>
 800cbb0:	4b1a      	ldr	r3, [pc, #104]	; (800cc1c <tcp_connect+0x224>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	623b      	str	r3, [r7, #32]
 800cbb6:	e00c      	b.n	800cbd2 <tcp_connect+0x1da>
 800cbb8:	6a3b      	ldr	r3, [r7, #32]
 800cbba:	68db      	ldr	r3, [r3, #12]
 800cbbc:	68fa      	ldr	r2, [r7, #12]
 800cbbe:	429a      	cmp	r2, r3
 800cbc0:	d104      	bne.n	800cbcc <tcp_connect+0x1d4>
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	68da      	ldr	r2, [r3, #12]
 800cbc6:	6a3b      	ldr	r3, [r7, #32]
 800cbc8:	60da      	str	r2, [r3, #12]
 800cbca:	e005      	b.n	800cbd8 <tcp_connect+0x1e0>
 800cbcc:	6a3b      	ldr	r3, [r7, #32]
 800cbce:	68db      	ldr	r3, [r3, #12]
 800cbd0:	623b      	str	r3, [r7, #32]
 800cbd2:	6a3b      	ldr	r3, [r7, #32]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d1ef      	bne.n	800cbb8 <tcp_connect+0x1c0>
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800cbde:	4b10      	ldr	r3, [pc, #64]	; (800cc20 <tcp_connect+0x228>)
 800cbe0:	681a      	ldr	r2, [r3, #0]
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	60da      	str	r2, [r3, #12]
 800cbe6:	4a0e      	ldr	r2, [pc, #56]	; (800cc20 <tcp_connect+0x228>)
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	6013      	str	r3, [r2, #0]
 800cbec:	f005 fad2 	bl	8012194 <tcp_timer_needed>
 800cbf0:	4b0c      	ldr	r3, [pc, #48]	; (800cc24 <tcp_connect+0x22c>)
 800cbf2:	2201      	movs	r2, #1
 800cbf4:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800cbf6:	68f8      	ldr	r0, [r7, #12]
 800cbf8:	f004 fb56 	bl	80112a8 <tcp_output>
  }
  return ret;
 800cbfc:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800cc00:	4618      	mov	r0, r3
 800cc02:	3728      	adds	r7, #40	; 0x28
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bd80      	pop	{r7, pc}
 800cc08:	08017d94 	.word	0x08017d94
 800cc0c:	08018070 	.word	0x08018070
 800cc10:	08017dd8 	.word	0x08017dd8
 800cc14:	0801808c 	.word	0x0801808c
 800cc18:	080180a8 	.word	0x080180a8
 800cc1c:	2000ab24 	.word	0x2000ab24
 800cc20:	2000ab18 	.word	0x2000ab18
 800cc24:	2000ab14 	.word	0x2000ab14

0800cc28 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800cc28:	b5b0      	push	{r4, r5, r7, lr}
 800cc2a:	b090      	sub	sp, #64	; 0x40
 800cc2c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800cc34:	4b94      	ldr	r3, [pc, #592]	; (800ce88 <tcp_slowtmr+0x260>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	3301      	adds	r3, #1
 800cc3a:	4a93      	ldr	r2, [pc, #588]	; (800ce88 <tcp_slowtmr+0x260>)
 800cc3c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800cc3e:	4b93      	ldr	r3, [pc, #588]	; (800ce8c <tcp_slowtmr+0x264>)
 800cc40:	781b      	ldrb	r3, [r3, #0]
 800cc42:	3301      	adds	r3, #1
 800cc44:	b2da      	uxtb	r2, r3
 800cc46:	4b91      	ldr	r3, [pc, #580]	; (800ce8c <tcp_slowtmr+0x264>)
 800cc48:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800cc4e:	4b90      	ldr	r3, [pc, #576]	; (800ce90 <tcp_slowtmr+0x268>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800cc54:	e29d      	b.n	800d192 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800cc56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc58:	7d1b      	ldrb	r3, [r3, #20]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d106      	bne.n	800cc6c <tcp_slowtmr+0x44>
 800cc5e:	4b8d      	ldr	r3, [pc, #564]	; (800ce94 <tcp_slowtmr+0x26c>)
 800cc60:	f240 42be 	movw	r2, #1214	; 0x4be
 800cc64:	498c      	ldr	r1, [pc, #560]	; (800ce98 <tcp_slowtmr+0x270>)
 800cc66:	488d      	ldr	r0, [pc, #564]	; (800ce9c <tcp_slowtmr+0x274>)
 800cc68:	f008 fb64 	bl	8015334 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800cc6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc6e:	7d1b      	ldrb	r3, [r3, #20]
 800cc70:	2b01      	cmp	r3, #1
 800cc72:	d106      	bne.n	800cc82 <tcp_slowtmr+0x5a>
 800cc74:	4b87      	ldr	r3, [pc, #540]	; (800ce94 <tcp_slowtmr+0x26c>)
 800cc76:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800cc7a:	4989      	ldr	r1, [pc, #548]	; (800cea0 <tcp_slowtmr+0x278>)
 800cc7c:	4887      	ldr	r0, [pc, #540]	; (800ce9c <tcp_slowtmr+0x274>)
 800cc7e:	f008 fb59 	bl	8015334 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800cc82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc84:	7d1b      	ldrb	r3, [r3, #20]
 800cc86:	2b0a      	cmp	r3, #10
 800cc88:	d106      	bne.n	800cc98 <tcp_slowtmr+0x70>
 800cc8a:	4b82      	ldr	r3, [pc, #520]	; (800ce94 <tcp_slowtmr+0x26c>)
 800cc8c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800cc90:	4984      	ldr	r1, [pc, #528]	; (800cea4 <tcp_slowtmr+0x27c>)
 800cc92:	4882      	ldr	r0, [pc, #520]	; (800ce9c <tcp_slowtmr+0x274>)
 800cc94:	f008 fb4e 	bl	8015334 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800cc98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc9a:	7f9a      	ldrb	r2, [r3, #30]
 800cc9c:	4b7b      	ldr	r3, [pc, #492]	; (800ce8c <tcp_slowtmr+0x264>)
 800cc9e:	781b      	ldrb	r3, [r3, #0]
 800cca0:	429a      	cmp	r2, r3
 800cca2:	d105      	bne.n	800ccb0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800cca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccaa:	68db      	ldr	r3, [r3, #12]
 800ccac:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800ccae:	e270      	b.n	800d192 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800ccb0:	4b76      	ldr	r3, [pc, #472]	; (800ce8c <tcp_slowtmr+0x264>)
 800ccb2:	781a      	ldrb	r2, [r3, #0]
 800ccb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccb6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ccc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc6:	7d1b      	ldrb	r3, [r3, #20]
 800ccc8:	2b02      	cmp	r3, #2
 800ccca:	d10a      	bne.n	800cce2 <tcp_slowtmr+0xba>
 800cccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ccd2:	2b05      	cmp	r3, #5
 800ccd4:	d905      	bls.n	800cce2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800ccd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccda:	3301      	adds	r3, #1
 800ccdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cce0:	e11e      	b.n	800cf20 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800cce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cce8:	2b0b      	cmp	r3, #11
 800ccea:	d905      	bls.n	800ccf8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800ccec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccf0:	3301      	adds	r3, #1
 800ccf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ccf6:	e113      	b.n	800cf20 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800ccf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccfa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d075      	beq.n	800cdee <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800cd02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d006      	beq.n	800cd18 <tcp_slowtmr+0xf0>
 800cd0a:	4b62      	ldr	r3, [pc, #392]	; (800ce94 <tcp_slowtmr+0x26c>)
 800cd0c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800cd10:	4965      	ldr	r1, [pc, #404]	; (800cea8 <tcp_slowtmr+0x280>)
 800cd12:	4862      	ldr	r0, [pc, #392]	; (800ce9c <tcp_slowtmr+0x274>)
 800cd14:	f008 fb0e 	bl	8015334 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800cd18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d106      	bne.n	800cd2e <tcp_slowtmr+0x106>
 800cd20:	4b5c      	ldr	r3, [pc, #368]	; (800ce94 <tcp_slowtmr+0x26c>)
 800cd22:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800cd26:	4961      	ldr	r1, [pc, #388]	; (800ceac <tcp_slowtmr+0x284>)
 800cd28:	485c      	ldr	r0, [pc, #368]	; (800ce9c <tcp_slowtmr+0x274>)
 800cd2a:	f008 fb03 	bl	8015334 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800cd2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd30:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800cd34:	2b0b      	cmp	r3, #11
 800cd36:	d905      	bls.n	800cd44 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800cd38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd3c:	3301      	adds	r3, #1
 800cd3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cd42:	e0ed      	b.n	800cf20 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800cd44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd46:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cd4a:	3b01      	subs	r3, #1
 800cd4c:	4a58      	ldr	r2, [pc, #352]	; (800ceb0 <tcp_slowtmr+0x288>)
 800cd4e:	5cd3      	ldrb	r3, [r2, r3]
 800cd50:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800cd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd54:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cd58:	7c7a      	ldrb	r2, [r7, #17]
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d907      	bls.n	800cd6e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800cd5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd60:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cd64:	3301      	adds	r3, #1
 800cd66:	b2da      	uxtb	r2, r3
 800cd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd6a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800cd6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd70:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cd74:	7c7a      	ldrb	r2, [r7, #17]
 800cd76:	429a      	cmp	r2, r3
 800cd78:	f200 80d2 	bhi.w	800cf20 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800cd80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d108      	bne.n	800cd9c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800cd8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd8c:	f005 f934 	bl	8011ff8 <tcp_zero_window_probe>
 800cd90:	4603      	mov	r3, r0
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d014      	beq.n	800cdc0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800cd96:	2300      	movs	r3, #0
 800cd98:	623b      	str	r3, [r7, #32]
 800cd9a:	e011      	b.n	800cdc0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800cd9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cda2:	4619      	mov	r1, r3
 800cda4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cda6:	f003 fff9 	bl	8010d9c <tcp_split_unsent_seg>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d107      	bne.n	800cdc0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800cdb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cdb2:	f004 fa79 	bl	80112a8 <tcp_output>
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d101      	bne.n	800cdc0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800cdc0:	6a3b      	ldr	r3, [r7, #32]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	f000 80ac 	beq.w	800cf20 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800cdc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdca:	2200      	movs	r2, #0
 800cdcc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800cdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cdd6:	2b06      	cmp	r3, #6
 800cdd8:	f200 80a2 	bhi.w	800cf20 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800cddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdde:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cde2:	3301      	adds	r3, #1
 800cde4:	b2da      	uxtb	r2, r3
 800cde6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cde8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800cdec:	e098      	b.n	800cf20 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800cdee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdf0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	db0f      	blt.n	800ce18 <tcp_slowtmr+0x1f0>
 800cdf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdfa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cdfe:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ce02:	4293      	cmp	r3, r2
 800ce04:	d008      	beq.n	800ce18 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800ce06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce08:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ce0c:	b29b      	uxth	r3, r3
 800ce0e:	3301      	adds	r3, #1
 800ce10:	b29b      	uxth	r3, r3
 800ce12:	b21a      	sxth	r2, r3
 800ce14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce16:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800ce18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce1a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800ce1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce20:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ce24:	429a      	cmp	r2, r3
 800ce26:	db7b      	blt.n	800cf20 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800ce28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce2a:	f004 fd2f 	bl	801188c <tcp_rexmit_rto_prepare>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d007      	beq.n	800ce44 <tcp_slowtmr+0x21c>
 800ce34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d171      	bne.n	800cf20 <tcp_slowtmr+0x2f8>
 800ce3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d06d      	beq.n	800cf20 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800ce44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce46:	7d1b      	ldrb	r3, [r3, #20]
 800ce48:	2b02      	cmp	r3, #2
 800ce4a:	d03a      	beq.n	800cec2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ce4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ce52:	2b0c      	cmp	r3, #12
 800ce54:	bf28      	it	cs
 800ce56:	230c      	movcs	r3, #12
 800ce58:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ce5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce5c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ce60:	10db      	asrs	r3, r3, #3
 800ce62:	b21b      	sxth	r3, r3
 800ce64:	461a      	mov	r2, r3
 800ce66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce68:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ce6c:	4413      	add	r3, r2
 800ce6e:	7efa      	ldrb	r2, [r7, #27]
 800ce70:	4910      	ldr	r1, [pc, #64]	; (800ceb4 <tcp_slowtmr+0x28c>)
 800ce72:	5c8a      	ldrb	r2, [r1, r2]
 800ce74:	4093      	lsls	r3, r2
 800ce76:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ce78:	697b      	ldr	r3, [r7, #20]
 800ce7a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800ce7e:	4293      	cmp	r3, r2
 800ce80:	dc1a      	bgt.n	800ceb8 <tcp_slowtmr+0x290>
 800ce82:	697b      	ldr	r3, [r7, #20]
 800ce84:	b21a      	sxth	r2, r3
 800ce86:	e019      	b.n	800cebc <tcp_slowtmr+0x294>
 800ce88:	2000ab1c 	.word	0x2000ab1c
 800ce8c:	2000409e 	.word	0x2000409e
 800ce90:	2000ab18 	.word	0x2000ab18
 800ce94:	08017d94 	.word	0x08017d94
 800ce98:	080180d8 	.word	0x080180d8
 800ce9c:	08017dd8 	.word	0x08017dd8
 800cea0:	08018104 	.word	0x08018104
 800cea4:	08018130 	.word	0x08018130
 800cea8:	08018160 	.word	0x08018160
 800ceac:	08018194 	.word	0x08018194
 800ceb0:	08019e20 	.word	0x08019e20
 800ceb4:	08019e10 	.word	0x08019e10
 800ceb8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cebe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800cec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec4:	2200      	movs	r2, #0
 800cec6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800cec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ced4:	4293      	cmp	r3, r2
 800ced6:	bf28      	it	cs
 800ced8:	4613      	movcs	r3, r2
 800ceda:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800cedc:	8a7b      	ldrh	r3, [r7, #18]
 800cede:	085b      	lsrs	r3, r3, #1
 800cee0:	b29a      	uxth	r2, r3
 800cee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cee4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800cee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ceee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cef2:	005b      	lsls	r3, r3, #1
 800cef4:	b29b      	uxth	r3, r3
 800cef6:	429a      	cmp	r2, r3
 800cef8:	d206      	bcs.n	800cf08 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800cefa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cefc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cefe:	005b      	lsls	r3, r3, #1
 800cf00:	b29a      	uxth	r2, r3
 800cf02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf04:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800cf08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf0a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800cf0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800cf12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf14:	2200      	movs	r2, #0
 800cf16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800cf1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf1c:	f004 fd26 	bl	801196c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800cf20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf22:	7d1b      	ldrb	r3, [r3, #20]
 800cf24:	2b06      	cmp	r3, #6
 800cf26:	d111      	bne.n	800cf4c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800cf28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf2a:	8b5b      	ldrh	r3, [r3, #26]
 800cf2c:	f003 0310 	and.w	r3, r3, #16
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d00b      	beq.n	800cf4c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cf34:	4b9c      	ldr	r3, [pc, #624]	; (800d1a8 <tcp_slowtmr+0x580>)
 800cf36:	681a      	ldr	r2, [r3, #0]
 800cf38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf3a:	6a1b      	ldr	r3, [r3, #32]
 800cf3c:	1ad3      	subs	r3, r2, r3
 800cf3e:	2b28      	cmp	r3, #40	; 0x28
 800cf40:	d904      	bls.n	800cf4c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800cf42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf46:	3301      	adds	r3, #1
 800cf48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cf4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf4e:	7a5b      	ldrb	r3, [r3, #9]
 800cf50:	f003 0308 	and.w	r3, r3, #8
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d04a      	beq.n	800cfee <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800cf58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf5a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cf5c:	2b04      	cmp	r3, #4
 800cf5e:	d003      	beq.n	800cf68 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800cf60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf62:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800cf64:	2b07      	cmp	r3, #7
 800cf66:	d142      	bne.n	800cfee <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cf68:	4b8f      	ldr	r3, [pc, #572]	; (800d1a8 <tcp_slowtmr+0x580>)
 800cf6a:	681a      	ldr	r2, [r3, #0]
 800cf6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf6e:	6a1b      	ldr	r3, [r3, #32]
 800cf70:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800cf72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf74:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800cf78:	4b8c      	ldr	r3, [pc, #560]	; (800d1ac <tcp_slowtmr+0x584>)
 800cf7a:	440b      	add	r3, r1
 800cf7c:	498c      	ldr	r1, [pc, #560]	; (800d1b0 <tcp_slowtmr+0x588>)
 800cf7e:	fba1 1303 	umull	r1, r3, r1, r3
 800cf82:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cf84:	429a      	cmp	r2, r3
 800cf86:	d90a      	bls.n	800cf9e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800cf88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf8c:	3301      	adds	r3, #1
 800cf8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800cf92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cf96:	3301      	adds	r3, #1
 800cf98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cf9c:	e027      	b.n	800cfee <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cf9e:	4b82      	ldr	r3, [pc, #520]	; (800d1a8 <tcp_slowtmr+0x580>)
 800cfa0:	681a      	ldr	r2, [r3, #0]
 800cfa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa4:	6a1b      	ldr	r3, [r3, #32]
 800cfa6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800cfa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfaa:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800cfae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	4b7f      	ldr	r3, [pc, #508]	; (800d1b4 <tcp_slowtmr+0x58c>)
 800cfb8:	fb03 f300 	mul.w	r3, r3, r0
 800cfbc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800cfbe:	497c      	ldr	r1, [pc, #496]	; (800d1b0 <tcp_slowtmr+0x588>)
 800cfc0:	fba1 1303 	umull	r1, r3, r1, r3
 800cfc4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cfc6:	429a      	cmp	r2, r3
 800cfc8:	d911      	bls.n	800cfee <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800cfca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cfcc:	f004 ffd4 	bl	8011f78 <tcp_keepalive>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800cfd6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d107      	bne.n	800cfee <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800cfde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800cfe4:	3301      	adds	r3, #1
 800cfe6:	b2da      	uxtb	r2, r3
 800cfe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfea:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800cfee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d011      	beq.n	800d01a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800cff6:	4b6c      	ldr	r3, [pc, #432]	; (800d1a8 <tcp_slowtmr+0x580>)
 800cff8:	681a      	ldr	r2, [r3, #0]
 800cffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cffc:	6a1b      	ldr	r3, [r3, #32]
 800cffe:	1ad2      	subs	r2, r2, r3
 800d000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d002:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d006:	4619      	mov	r1, r3
 800d008:	460b      	mov	r3, r1
 800d00a:	005b      	lsls	r3, r3, #1
 800d00c:	440b      	add	r3, r1
 800d00e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d010:	429a      	cmp	r2, r3
 800d012:	d302      	bcc.n	800d01a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800d014:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d016:	f000 fe93 	bl	800dd40 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d01c:	7d1b      	ldrb	r3, [r3, #20]
 800d01e:	2b03      	cmp	r3, #3
 800d020:	d10b      	bne.n	800d03a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d022:	4b61      	ldr	r3, [pc, #388]	; (800d1a8 <tcp_slowtmr+0x580>)
 800d024:	681a      	ldr	r2, [r3, #0]
 800d026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d028:	6a1b      	ldr	r3, [r3, #32]
 800d02a:	1ad3      	subs	r3, r2, r3
 800d02c:	2b28      	cmp	r3, #40	; 0x28
 800d02e:	d904      	bls.n	800d03a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d030:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d034:	3301      	adds	r3, #1
 800d036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800d03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d03c:	7d1b      	ldrb	r3, [r3, #20]
 800d03e:	2b09      	cmp	r3, #9
 800d040:	d10b      	bne.n	800d05a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d042:	4b59      	ldr	r3, [pc, #356]	; (800d1a8 <tcp_slowtmr+0x580>)
 800d044:	681a      	ldr	r2, [r3, #0]
 800d046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d048:	6a1b      	ldr	r3, [r3, #32]
 800d04a:	1ad3      	subs	r3, r2, r3
 800d04c:	2bf0      	cmp	r3, #240	; 0xf0
 800d04e:	d904      	bls.n	800d05a <tcp_slowtmr+0x432>
        ++pcb_remove;
 800d050:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d054:	3301      	adds	r3, #1
 800d056:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d05a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d060      	beq.n	800d124 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800d062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d068:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800d06a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d06c:	f000 fcb4 	bl	800d9d8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800d070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d072:	2b00      	cmp	r3, #0
 800d074:	d010      	beq.n	800d098 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d076:	4b50      	ldr	r3, [pc, #320]	; (800d1b8 <tcp_slowtmr+0x590>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d07c:	429a      	cmp	r2, r3
 800d07e:	d106      	bne.n	800d08e <tcp_slowtmr+0x466>
 800d080:	4b4e      	ldr	r3, [pc, #312]	; (800d1bc <tcp_slowtmr+0x594>)
 800d082:	f240 526d 	movw	r2, #1389	; 0x56d
 800d086:	494e      	ldr	r1, [pc, #312]	; (800d1c0 <tcp_slowtmr+0x598>)
 800d088:	484e      	ldr	r0, [pc, #312]	; (800d1c4 <tcp_slowtmr+0x59c>)
 800d08a:	f008 f953 	bl	8015334 <iprintf>
        prev->next = pcb->next;
 800d08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d090:	68da      	ldr	r2, [r3, #12]
 800d092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d094:	60da      	str	r2, [r3, #12]
 800d096:	e00f      	b.n	800d0b8 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d098:	4b47      	ldr	r3, [pc, #284]	; (800d1b8 <tcp_slowtmr+0x590>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d09e:	429a      	cmp	r2, r3
 800d0a0:	d006      	beq.n	800d0b0 <tcp_slowtmr+0x488>
 800d0a2:	4b46      	ldr	r3, [pc, #280]	; (800d1bc <tcp_slowtmr+0x594>)
 800d0a4:	f240 5271 	movw	r2, #1393	; 0x571
 800d0a8:	4947      	ldr	r1, [pc, #284]	; (800d1c8 <tcp_slowtmr+0x5a0>)
 800d0aa:	4846      	ldr	r0, [pc, #280]	; (800d1c4 <tcp_slowtmr+0x59c>)
 800d0ac:	f008 f942 	bl	8015334 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0b2:	68db      	ldr	r3, [r3, #12]
 800d0b4:	4a40      	ldr	r2, [pc, #256]	; (800d1b8 <tcp_slowtmr+0x590>)
 800d0b6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800d0b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d013      	beq.n	800d0e8 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0c2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0c6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d0c8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800d0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0cc:	3304      	adds	r3, #4
 800d0ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d0d0:	8ad2      	ldrh	r2, [r2, #22]
 800d0d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d0d4:	8b09      	ldrh	r1, [r1, #24]
 800d0d6:	9102      	str	r1, [sp, #8]
 800d0d8:	9201      	str	r2, [sp, #4]
 800d0da:	9300      	str	r3, [sp, #0]
 800d0dc:	462b      	mov	r3, r5
 800d0de:	4622      	mov	r2, r4
 800d0e0:	4601      	mov	r1, r0
 800d0e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d0e4:	f004 fe94 	bl	8011e10 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ea:	691b      	ldr	r3, [r3, #16]
 800d0ec:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f0:	7d1b      	ldrb	r3, [r3, #20]
 800d0f2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0fa:	68db      	ldr	r3, [r3, #12]
 800d0fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d0fe:	6838      	ldr	r0, [r7, #0]
 800d100:	f7fe fffe 	bl	800c100 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800d104:	4b31      	ldr	r3, [pc, #196]	; (800d1cc <tcp_slowtmr+0x5a4>)
 800d106:	2200      	movs	r2, #0
 800d108:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d004      	beq.n	800d11a <tcp_slowtmr+0x4f2>
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	f06f 010c 	mvn.w	r1, #12
 800d116:	68b8      	ldr	r0, [r7, #8]
 800d118:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d11a:	4b2c      	ldr	r3, [pc, #176]	; (800d1cc <tcp_slowtmr+0x5a4>)
 800d11c:	781b      	ldrb	r3, [r3, #0]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d037      	beq.n	800d192 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800d122:	e592      	b.n	800cc4a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d126:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d12a:	68db      	ldr	r3, [r3, #12]
 800d12c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d130:	7f1b      	ldrb	r3, [r3, #28]
 800d132:	3301      	adds	r3, #1
 800d134:	b2da      	uxtb	r2, r3
 800d136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d138:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d13c:	7f1a      	ldrb	r2, [r3, #28]
 800d13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d140:	7f5b      	ldrb	r3, [r3, #29]
 800d142:	429a      	cmp	r2, r3
 800d144:	d325      	bcc.n	800d192 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800d146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d148:	2200      	movs	r2, #0
 800d14a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d14c:	4b1f      	ldr	r3, [pc, #124]	; (800d1cc <tcp_slowtmr+0x5a4>)
 800d14e:	2200      	movs	r2, #0
 800d150:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d154:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d00b      	beq.n	800d174 <tcp_slowtmr+0x54c>
 800d15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d15e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d162:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d164:	6912      	ldr	r2, [r2, #16]
 800d166:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d168:	4610      	mov	r0, r2
 800d16a:	4798      	blx	r3
 800d16c:	4603      	mov	r3, r0
 800d16e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d172:	e002      	b.n	800d17a <tcp_slowtmr+0x552>
 800d174:	2300      	movs	r3, #0
 800d176:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800d17a:	4b14      	ldr	r3, [pc, #80]	; (800d1cc <tcp_slowtmr+0x5a4>)
 800d17c:	781b      	ldrb	r3, [r3, #0]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d000      	beq.n	800d184 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800d182:	e562      	b.n	800cc4a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d184:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d102      	bne.n	800d192 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800d18c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d18e:	f004 f88b 	bl	80112a8 <tcp_output>
  while (pcb != NULL) {
 800d192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d194:	2b00      	cmp	r3, #0
 800d196:	f47f ad5e 	bne.w	800cc56 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d19a:	2300      	movs	r3, #0
 800d19c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800d19e:	4b0c      	ldr	r3, [pc, #48]	; (800d1d0 <tcp_slowtmr+0x5a8>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d1a4:	e069      	b.n	800d27a <tcp_slowtmr+0x652>
 800d1a6:	bf00      	nop
 800d1a8:	2000ab1c 	.word	0x2000ab1c
 800d1ac:	000a4cb8 	.word	0x000a4cb8
 800d1b0:	10624dd3 	.word	0x10624dd3
 800d1b4:	000124f8 	.word	0x000124f8
 800d1b8:	2000ab18 	.word	0x2000ab18
 800d1bc:	08017d94 	.word	0x08017d94
 800d1c0:	080181cc 	.word	0x080181cc
 800d1c4:	08017dd8 	.word	0x08017dd8
 800d1c8:	080181f8 	.word	0x080181f8
 800d1cc:	2000ab14 	.word	0x2000ab14
 800d1d0:	2000ab28 	.word	0x2000ab28
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1d6:	7d1b      	ldrb	r3, [r3, #20]
 800d1d8:	2b0a      	cmp	r3, #10
 800d1da:	d006      	beq.n	800d1ea <tcp_slowtmr+0x5c2>
 800d1dc:	4b2b      	ldr	r3, [pc, #172]	; (800d28c <tcp_slowtmr+0x664>)
 800d1de:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800d1e2:	492b      	ldr	r1, [pc, #172]	; (800d290 <tcp_slowtmr+0x668>)
 800d1e4:	482b      	ldr	r0, [pc, #172]	; (800d294 <tcp_slowtmr+0x66c>)
 800d1e6:	f008 f8a5 	bl	8015334 <iprintf>
    pcb_remove = 0;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d1f0:	4b29      	ldr	r3, [pc, #164]	; (800d298 <tcp_slowtmr+0x670>)
 800d1f2:	681a      	ldr	r2, [r3, #0]
 800d1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f6:	6a1b      	ldr	r3, [r3, #32]
 800d1f8:	1ad3      	subs	r3, r2, r3
 800d1fa:	2bf0      	cmp	r3, #240	; 0xf0
 800d1fc:	d904      	bls.n	800d208 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800d1fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d202:	3301      	adds	r3, #1
 800d204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d02f      	beq.n	800d270 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d210:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d212:	f000 fbe1 	bl	800d9d8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d010      	beq.n	800d23e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d21c:	4b1f      	ldr	r3, [pc, #124]	; (800d29c <tcp_slowtmr+0x674>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d222:	429a      	cmp	r2, r3
 800d224:	d106      	bne.n	800d234 <tcp_slowtmr+0x60c>
 800d226:	4b19      	ldr	r3, [pc, #100]	; (800d28c <tcp_slowtmr+0x664>)
 800d228:	f240 52af 	movw	r2, #1455	; 0x5af
 800d22c:	491c      	ldr	r1, [pc, #112]	; (800d2a0 <tcp_slowtmr+0x678>)
 800d22e:	4819      	ldr	r0, [pc, #100]	; (800d294 <tcp_slowtmr+0x66c>)
 800d230:	f008 f880 	bl	8015334 <iprintf>
        prev->next = pcb->next;
 800d234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d236:	68da      	ldr	r2, [r3, #12]
 800d238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d23a:	60da      	str	r2, [r3, #12]
 800d23c:	e00f      	b.n	800d25e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d23e:	4b17      	ldr	r3, [pc, #92]	; (800d29c <tcp_slowtmr+0x674>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d244:	429a      	cmp	r2, r3
 800d246:	d006      	beq.n	800d256 <tcp_slowtmr+0x62e>
 800d248:	4b10      	ldr	r3, [pc, #64]	; (800d28c <tcp_slowtmr+0x664>)
 800d24a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800d24e:	4915      	ldr	r1, [pc, #84]	; (800d2a4 <tcp_slowtmr+0x67c>)
 800d250:	4810      	ldr	r0, [pc, #64]	; (800d294 <tcp_slowtmr+0x66c>)
 800d252:	f008 f86f 	bl	8015334 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d258:	68db      	ldr	r3, [r3, #12]
 800d25a:	4a10      	ldr	r2, [pc, #64]	; (800d29c <tcp_slowtmr+0x674>)
 800d25c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d260:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d264:	68db      	ldr	r3, [r3, #12]
 800d266:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d268:	69f8      	ldr	r0, [r7, #28]
 800d26a:	f7fe ff49 	bl	800c100 <tcp_free>
 800d26e:	e004      	b.n	800d27a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800d270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d272:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d276:	68db      	ldr	r3, [r3, #12]
 800d278:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d1a9      	bne.n	800d1d4 <tcp_slowtmr+0x5ac>
    }
  }
}
 800d280:	bf00      	nop
 800d282:	bf00      	nop
 800d284:	3730      	adds	r7, #48	; 0x30
 800d286:	46bd      	mov	sp, r7
 800d288:	bdb0      	pop	{r4, r5, r7, pc}
 800d28a:	bf00      	nop
 800d28c:	08017d94 	.word	0x08017d94
 800d290:	08018224 	.word	0x08018224
 800d294:	08017dd8 	.word	0x08017dd8
 800d298:	2000ab1c 	.word	0x2000ab1c
 800d29c:	2000ab28 	.word	0x2000ab28
 800d2a0:	08018254 	.word	0x08018254
 800d2a4:	0801827c 	.word	0x0801827c

0800d2a8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b082      	sub	sp, #8
 800d2ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d2ae:	4b2d      	ldr	r3, [pc, #180]	; (800d364 <tcp_fasttmr+0xbc>)
 800d2b0:	781b      	ldrb	r3, [r3, #0]
 800d2b2:	3301      	adds	r3, #1
 800d2b4:	b2da      	uxtb	r2, r3
 800d2b6:	4b2b      	ldr	r3, [pc, #172]	; (800d364 <tcp_fasttmr+0xbc>)
 800d2b8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d2ba:	4b2b      	ldr	r3, [pc, #172]	; (800d368 <tcp_fasttmr+0xc0>)
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d2c0:	e048      	b.n	800d354 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	7f9a      	ldrb	r2, [r3, #30]
 800d2c6:	4b27      	ldr	r3, [pc, #156]	; (800d364 <tcp_fasttmr+0xbc>)
 800d2c8:	781b      	ldrb	r3, [r3, #0]
 800d2ca:	429a      	cmp	r2, r3
 800d2cc:	d03f      	beq.n	800d34e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d2ce:	4b25      	ldr	r3, [pc, #148]	; (800d364 <tcp_fasttmr+0xbc>)
 800d2d0:	781a      	ldrb	r2, [r3, #0]
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	8b5b      	ldrh	r3, [r3, #26]
 800d2da:	f003 0301 	and.w	r3, r3, #1
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d010      	beq.n	800d304 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	8b5b      	ldrh	r3, [r3, #26]
 800d2e6:	f043 0302 	orr.w	r3, r3, #2
 800d2ea:	b29a      	uxth	r2, r3
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d2f0:	6878      	ldr	r0, [r7, #4]
 800d2f2:	f003 ffd9 	bl	80112a8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	8b5b      	ldrh	r3, [r3, #26]
 800d2fa:	f023 0303 	bic.w	r3, r3, #3
 800d2fe:	b29a      	uxth	r2, r3
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	8b5b      	ldrh	r3, [r3, #26]
 800d308:	f003 0308 	and.w	r3, r3, #8
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d009      	beq.n	800d324 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	8b5b      	ldrh	r3, [r3, #26]
 800d314:	f023 0308 	bic.w	r3, r3, #8
 800d318:	b29a      	uxth	r2, r3
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f7ff f882 	bl	800c428 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	68db      	ldr	r3, [r3, #12]
 800d328:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d00a      	beq.n	800d348 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d332:	4b0e      	ldr	r3, [pc, #56]	; (800d36c <tcp_fasttmr+0xc4>)
 800d334:	2200      	movs	r2, #0
 800d336:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d338:	6878      	ldr	r0, [r7, #4]
 800d33a:	f000 f819 	bl	800d370 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d33e:	4b0b      	ldr	r3, [pc, #44]	; (800d36c <tcp_fasttmr+0xc4>)
 800d340:	781b      	ldrb	r3, [r3, #0]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d000      	beq.n	800d348 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d346:	e7b8      	b.n	800d2ba <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	607b      	str	r3, [r7, #4]
 800d34c:	e002      	b.n	800d354 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	68db      	ldr	r3, [r3, #12]
 800d352:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d1b3      	bne.n	800d2c2 <tcp_fasttmr+0x1a>
    }
  }
}
 800d35a:	bf00      	nop
 800d35c:	bf00      	nop
 800d35e:	3708      	adds	r7, #8
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}
 800d364:	2000409e 	.word	0x2000409e
 800d368:	2000ab18 	.word	0x2000ab18
 800d36c:	2000ab14 	.word	0x2000ab14

0800d370 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d370:	b590      	push	{r4, r7, lr}
 800d372:	b085      	sub	sp, #20
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d109      	bne.n	800d392 <tcp_process_refused_data+0x22>
 800d37e:	4b37      	ldr	r3, [pc, #220]	; (800d45c <tcp_process_refused_data+0xec>)
 800d380:	f240 6209 	movw	r2, #1545	; 0x609
 800d384:	4936      	ldr	r1, [pc, #216]	; (800d460 <tcp_process_refused_data+0xf0>)
 800d386:	4837      	ldr	r0, [pc, #220]	; (800d464 <tcp_process_refused_data+0xf4>)
 800d388:	f007 ffd4 	bl	8015334 <iprintf>
 800d38c:	f06f 030f 	mvn.w	r3, #15
 800d390:	e060      	b.n	800d454 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d396:	7b5b      	ldrb	r3, [r3, #13]
 800d398:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d39e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d00b      	beq.n	800d3c8 <tcp_process_refused_data+0x58>
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6918      	ldr	r0, [r3, #16]
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	68ba      	ldr	r2, [r7, #8]
 800d3be:	6879      	ldr	r1, [r7, #4]
 800d3c0:	47a0      	blx	r4
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	73fb      	strb	r3, [r7, #15]
 800d3c6:	e007      	b.n	800d3d8 <tcp_process_refused_data+0x68>
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	68ba      	ldr	r2, [r7, #8]
 800d3cc:	6879      	ldr	r1, [r7, #4]
 800d3ce:	2000      	movs	r0, #0
 800d3d0:	f000 f8a4 	bl	800d51c <tcp_recv_null>
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d3d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d12a      	bne.n	800d436 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d3e0:	7bbb      	ldrb	r3, [r7, #14]
 800d3e2:	f003 0320 	and.w	r3, r3, #32
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d033      	beq.n	800d452 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d3ee:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d3f2:	d005      	beq.n	800d400 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d3f8:	3301      	adds	r3, #1
 800d3fa:	b29a      	uxth	r2, r3
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d406:	2b00      	cmp	r3, #0
 800d408:	d00b      	beq.n	800d422 <tcp_process_refused_data+0xb2>
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6918      	ldr	r0, [r3, #16]
 800d414:	2300      	movs	r3, #0
 800d416:	2200      	movs	r2, #0
 800d418:	6879      	ldr	r1, [r7, #4]
 800d41a:	47a0      	blx	r4
 800d41c:	4603      	mov	r3, r0
 800d41e:	73fb      	strb	r3, [r7, #15]
 800d420:	e001      	b.n	800d426 <tcp_process_refused_data+0xb6>
 800d422:	2300      	movs	r3, #0
 800d424:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d42a:	f113 0f0d 	cmn.w	r3, #13
 800d42e:	d110      	bne.n	800d452 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d430:	f06f 030c 	mvn.w	r3, #12
 800d434:	e00e      	b.n	800d454 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d43a:	f113 0f0d 	cmn.w	r3, #13
 800d43e:	d102      	bne.n	800d446 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d440:	f06f 030c 	mvn.w	r3, #12
 800d444:	e006      	b.n	800d454 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	68ba      	ldr	r2, [r7, #8]
 800d44a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800d44c:	f06f 0304 	mvn.w	r3, #4
 800d450:	e000      	b.n	800d454 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d452:	2300      	movs	r3, #0
}
 800d454:	4618      	mov	r0, r3
 800d456:	3714      	adds	r7, #20
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd90      	pop	{r4, r7, pc}
 800d45c:	08017d94 	.word	0x08017d94
 800d460:	080182a4 	.word	0x080182a4
 800d464:	08017dd8 	.word	0x08017dd8

0800d468 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b084      	sub	sp, #16
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d470:	e007      	b.n	800d482 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d478:	6878      	ldr	r0, [r7, #4]
 800d47a:	f000 f80a 	bl	800d492 <tcp_seg_free>
    seg = next;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d1f4      	bne.n	800d472 <tcp_segs_free+0xa>
  }
}
 800d488:	bf00      	nop
 800d48a:	bf00      	nop
 800d48c:	3710      	adds	r7, #16
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}

0800d492 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d492:	b580      	push	{r7, lr}
 800d494:	b082      	sub	sp, #8
 800d496:	af00      	add	r7, sp, #0
 800d498:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d00c      	beq.n	800d4ba <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	685b      	ldr	r3, [r3, #4]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d004      	beq.n	800d4b2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	685b      	ldr	r3, [r3, #4]
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f7fe fb17 	bl	800bae0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d4b2:	6879      	ldr	r1, [r7, #4]
 800d4b4:	2003      	movs	r0, #3
 800d4b6:	f7fd fc6f 	bl	800ad98 <memp_free>
  }
}
 800d4ba:	bf00      	nop
 800d4bc:	3708      	adds	r7, #8
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	bd80      	pop	{r7, pc}
	...

0800d4c4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b084      	sub	sp, #16
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d106      	bne.n	800d4e0 <tcp_seg_copy+0x1c>
 800d4d2:	4b0f      	ldr	r3, [pc, #60]	; (800d510 <tcp_seg_copy+0x4c>)
 800d4d4:	f240 6282 	movw	r2, #1666	; 0x682
 800d4d8:	490e      	ldr	r1, [pc, #56]	; (800d514 <tcp_seg_copy+0x50>)
 800d4da:	480f      	ldr	r0, [pc, #60]	; (800d518 <tcp_seg_copy+0x54>)
 800d4dc:	f007 ff2a 	bl	8015334 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d4e0:	2003      	movs	r0, #3
 800d4e2:	f7fd fc07 	bl	800acf4 <memp_malloc>
 800d4e6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d101      	bne.n	800d4f2 <tcp_seg_copy+0x2e>
    return NULL;
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	e00a      	b.n	800d508 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d4f2:	2210      	movs	r2, #16
 800d4f4:	6879      	ldr	r1, [r7, #4]
 800d4f6:	68f8      	ldr	r0, [r7, #12]
 800d4f8:	f007 feec 	bl	80152d4 <memcpy>
  pbuf_ref(cseg->p);
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	685b      	ldr	r3, [r3, #4]
 800d500:	4618      	mov	r0, r3
 800d502:	f7fe fb93 	bl	800bc2c <pbuf_ref>
  return cseg;
 800d506:	68fb      	ldr	r3, [r7, #12]
}
 800d508:	4618      	mov	r0, r3
 800d50a:	3710      	adds	r7, #16
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}
 800d510:	08017d94 	.word	0x08017d94
 800d514:	080182e8 	.word	0x080182e8
 800d518:	08017dd8 	.word	0x08017dd8

0800d51c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b084      	sub	sp, #16
 800d520:	af00      	add	r7, sp, #0
 800d522:	60f8      	str	r0, [r7, #12]
 800d524:	60b9      	str	r1, [r7, #8]
 800d526:	607a      	str	r2, [r7, #4]
 800d528:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d109      	bne.n	800d544 <tcp_recv_null+0x28>
 800d530:	4b12      	ldr	r3, [pc, #72]	; (800d57c <tcp_recv_null+0x60>)
 800d532:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d536:	4912      	ldr	r1, [pc, #72]	; (800d580 <tcp_recv_null+0x64>)
 800d538:	4812      	ldr	r0, [pc, #72]	; (800d584 <tcp_recv_null+0x68>)
 800d53a:	f007 fefb 	bl	8015334 <iprintf>
 800d53e:	f06f 030f 	mvn.w	r3, #15
 800d542:	e016      	b.n	800d572 <tcp_recv_null+0x56>

  if (p != NULL) {
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d009      	beq.n	800d55e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	891b      	ldrh	r3, [r3, #8]
 800d54e:	4619      	mov	r1, r3
 800d550:	68b8      	ldr	r0, [r7, #8]
 800d552:	f7ff f9bb 	bl	800c8cc <tcp_recved>
    pbuf_free(p);
 800d556:	6878      	ldr	r0, [r7, #4]
 800d558:	f7fe fac2 	bl	800bae0 <pbuf_free>
 800d55c:	e008      	b.n	800d570 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d55e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d104      	bne.n	800d570 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d566:	68b8      	ldr	r0, [r7, #8]
 800d568:	f7fe ffc8 	bl	800c4fc <tcp_close>
 800d56c:	4603      	mov	r3, r0
 800d56e:	e000      	b.n	800d572 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d570:	2300      	movs	r3, #0
}
 800d572:	4618      	mov	r0, r3
 800d574:	3710      	adds	r7, #16
 800d576:	46bd      	mov	sp, r7
 800d578:	bd80      	pop	{r7, pc}
 800d57a:	bf00      	nop
 800d57c:	08017d94 	.word	0x08017d94
 800d580:	08018304 	.word	0x08018304
 800d584:	08017dd8 	.word	0x08017dd8

0800d588 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b086      	sub	sp, #24
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	4603      	mov	r3, r0
 800d590:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d596:	2b00      	cmp	r3, #0
 800d598:	db01      	blt.n	800d59e <tcp_kill_prio+0x16>
 800d59a:	79fb      	ldrb	r3, [r7, #7]
 800d59c:	e000      	b.n	800d5a0 <tcp_kill_prio+0x18>
 800d59e:	237f      	movs	r3, #127	; 0x7f
 800d5a0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d5a2:	7afb      	ldrb	r3, [r7, #11]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d034      	beq.n	800d612 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d5a8:	7afb      	ldrb	r3, [r7, #11]
 800d5aa:	3b01      	subs	r3, #1
 800d5ac:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d5b6:	4b19      	ldr	r3, [pc, #100]	; (800d61c <tcp_kill_prio+0x94>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	617b      	str	r3, [r7, #20]
 800d5bc:	e01f      	b.n	800d5fe <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	7d5b      	ldrb	r3, [r3, #21]
 800d5c2:	7afa      	ldrb	r2, [r7, #11]
 800d5c4:	429a      	cmp	r2, r3
 800d5c6:	d80c      	bhi.n	800d5e2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d5c8:	697b      	ldr	r3, [r7, #20]
 800d5ca:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d5cc:	7afa      	ldrb	r2, [r7, #11]
 800d5ce:	429a      	cmp	r2, r3
 800d5d0:	d112      	bne.n	800d5f8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d5d2:	4b13      	ldr	r3, [pc, #76]	; (800d620 <tcp_kill_prio+0x98>)
 800d5d4:	681a      	ldr	r2, [r3, #0]
 800d5d6:	697b      	ldr	r3, [r7, #20]
 800d5d8:	6a1b      	ldr	r3, [r3, #32]
 800d5da:	1ad3      	subs	r3, r2, r3
 800d5dc:	68fa      	ldr	r2, [r7, #12]
 800d5de:	429a      	cmp	r2, r3
 800d5e0:	d80a      	bhi.n	800d5f8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d5e2:	4b0f      	ldr	r3, [pc, #60]	; (800d620 <tcp_kill_prio+0x98>)
 800d5e4:	681a      	ldr	r2, [r3, #0]
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	6a1b      	ldr	r3, [r3, #32]
 800d5ea:	1ad3      	subs	r3, r2, r3
 800d5ec:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	7d5b      	ldrb	r3, [r3, #21]
 800d5f6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d5f8:	697b      	ldr	r3, [r7, #20]
 800d5fa:	68db      	ldr	r3, [r3, #12]
 800d5fc:	617b      	str	r3, [r7, #20]
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d1dc      	bne.n	800d5be <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d604:	693b      	ldr	r3, [r7, #16]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d004      	beq.n	800d614 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d60a:	6938      	ldr	r0, [r7, #16]
 800d60c:	f7ff f860 	bl	800c6d0 <tcp_abort>
 800d610:	e000      	b.n	800d614 <tcp_kill_prio+0x8c>
    return;
 800d612:	bf00      	nop
  }
}
 800d614:	3718      	adds	r7, #24
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}
 800d61a:	bf00      	nop
 800d61c:	2000ab18 	.word	0x2000ab18
 800d620:	2000ab1c 	.word	0x2000ab1c

0800d624 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b086      	sub	sp, #24
 800d628:	af00      	add	r7, sp, #0
 800d62a:	4603      	mov	r3, r0
 800d62c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d62e:	79fb      	ldrb	r3, [r7, #7]
 800d630:	2b08      	cmp	r3, #8
 800d632:	d009      	beq.n	800d648 <tcp_kill_state+0x24>
 800d634:	79fb      	ldrb	r3, [r7, #7]
 800d636:	2b09      	cmp	r3, #9
 800d638:	d006      	beq.n	800d648 <tcp_kill_state+0x24>
 800d63a:	4b1a      	ldr	r3, [pc, #104]	; (800d6a4 <tcp_kill_state+0x80>)
 800d63c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d640:	4919      	ldr	r1, [pc, #100]	; (800d6a8 <tcp_kill_state+0x84>)
 800d642:	481a      	ldr	r0, [pc, #104]	; (800d6ac <tcp_kill_state+0x88>)
 800d644:	f007 fe76 	bl	8015334 <iprintf>

  inactivity = 0;
 800d648:	2300      	movs	r3, #0
 800d64a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d64c:	2300      	movs	r3, #0
 800d64e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d650:	4b17      	ldr	r3, [pc, #92]	; (800d6b0 <tcp_kill_state+0x8c>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	617b      	str	r3, [r7, #20]
 800d656:	e017      	b.n	800d688 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d658:	697b      	ldr	r3, [r7, #20]
 800d65a:	7d1b      	ldrb	r3, [r3, #20]
 800d65c:	79fa      	ldrb	r2, [r7, #7]
 800d65e:	429a      	cmp	r2, r3
 800d660:	d10f      	bne.n	800d682 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d662:	4b14      	ldr	r3, [pc, #80]	; (800d6b4 <tcp_kill_state+0x90>)
 800d664:	681a      	ldr	r2, [r3, #0]
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	6a1b      	ldr	r3, [r3, #32]
 800d66a:	1ad3      	subs	r3, r2, r3
 800d66c:	68fa      	ldr	r2, [r7, #12]
 800d66e:	429a      	cmp	r2, r3
 800d670:	d807      	bhi.n	800d682 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d672:	4b10      	ldr	r3, [pc, #64]	; (800d6b4 <tcp_kill_state+0x90>)
 800d674:	681a      	ldr	r2, [r3, #0]
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	6a1b      	ldr	r3, [r3, #32]
 800d67a:	1ad3      	subs	r3, r2, r3
 800d67c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	68db      	ldr	r3, [r3, #12]
 800d686:	617b      	str	r3, [r7, #20]
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d1e4      	bne.n	800d658 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d68e:	693b      	ldr	r3, [r7, #16]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d003      	beq.n	800d69c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d694:	2100      	movs	r1, #0
 800d696:	6938      	ldr	r0, [r7, #16]
 800d698:	f7fe ff5c 	bl	800c554 <tcp_abandon>
  }
}
 800d69c:	bf00      	nop
 800d69e:	3718      	adds	r7, #24
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}
 800d6a4:	08017d94 	.word	0x08017d94
 800d6a8:	08018320 	.word	0x08018320
 800d6ac:	08017dd8 	.word	0x08017dd8
 800d6b0:	2000ab18 	.word	0x2000ab18
 800d6b4:	2000ab1c 	.word	0x2000ab1c

0800d6b8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b084      	sub	sp, #16
 800d6bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d6c6:	4b12      	ldr	r3, [pc, #72]	; (800d710 <tcp_kill_timewait+0x58>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	60fb      	str	r3, [r7, #12]
 800d6cc:	e012      	b.n	800d6f4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d6ce:	4b11      	ldr	r3, [pc, #68]	; (800d714 <tcp_kill_timewait+0x5c>)
 800d6d0:	681a      	ldr	r2, [r3, #0]
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	6a1b      	ldr	r3, [r3, #32]
 800d6d6:	1ad3      	subs	r3, r2, r3
 800d6d8:	687a      	ldr	r2, [r7, #4]
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d807      	bhi.n	800d6ee <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d6de:	4b0d      	ldr	r3, [pc, #52]	; (800d714 <tcp_kill_timewait+0x5c>)
 800d6e0:	681a      	ldr	r2, [r3, #0]
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	6a1b      	ldr	r3, [r3, #32]
 800d6e6:	1ad3      	subs	r3, r2, r3
 800d6e8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	68db      	ldr	r3, [r3, #12]
 800d6f2:	60fb      	str	r3, [r7, #12]
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d1e9      	bne.n	800d6ce <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d6fa:	68bb      	ldr	r3, [r7, #8]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d002      	beq.n	800d706 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d700:	68b8      	ldr	r0, [r7, #8]
 800d702:	f7fe ffe5 	bl	800c6d0 <tcp_abort>
  }
}
 800d706:	bf00      	nop
 800d708:	3710      	adds	r7, #16
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}
 800d70e:	bf00      	nop
 800d710:	2000ab28 	.word	0x2000ab28
 800d714:	2000ab1c 	.word	0x2000ab1c

0800d718 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b082      	sub	sp, #8
 800d71c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d71e:	4b10      	ldr	r3, [pc, #64]	; (800d760 <tcp_handle_closepend+0x48>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d724:	e014      	b.n	800d750 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	68db      	ldr	r3, [r3, #12]
 800d72a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	8b5b      	ldrh	r3, [r3, #26]
 800d730:	f003 0308 	and.w	r3, r3, #8
 800d734:	2b00      	cmp	r3, #0
 800d736:	d009      	beq.n	800d74c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	8b5b      	ldrh	r3, [r3, #26]
 800d73c:	f023 0308 	bic.w	r3, r3, #8
 800d740:	b29a      	uxth	r2, r3
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f7fe fe6e 	bl	800c428 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d1e7      	bne.n	800d726 <tcp_handle_closepend+0xe>
  }
}
 800d756:	bf00      	nop
 800d758:	bf00      	nop
 800d75a:	3708      	adds	r7, #8
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd80      	pop	{r7, pc}
 800d760:	2000ab18 	.word	0x2000ab18

0800d764 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b084      	sub	sp, #16
 800d768:	af00      	add	r7, sp, #0
 800d76a:	4603      	mov	r3, r0
 800d76c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d76e:	2001      	movs	r0, #1
 800d770:	f7fd fac0 	bl	800acf4 <memp_malloc>
 800d774:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d126      	bne.n	800d7ca <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d77c:	f7ff ffcc 	bl	800d718 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d780:	f7ff ff9a 	bl	800d6b8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d784:	2001      	movs	r0, #1
 800d786:	f7fd fab5 	bl	800acf4 <memp_malloc>
 800d78a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d11b      	bne.n	800d7ca <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d792:	2009      	movs	r0, #9
 800d794:	f7ff ff46 	bl	800d624 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d798:	2001      	movs	r0, #1
 800d79a:	f7fd faab 	bl	800acf4 <memp_malloc>
 800d79e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d111      	bne.n	800d7ca <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d7a6:	2008      	movs	r0, #8
 800d7a8:	f7ff ff3c 	bl	800d624 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d7ac:	2001      	movs	r0, #1
 800d7ae:	f7fd faa1 	bl	800acf4 <memp_malloc>
 800d7b2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d107      	bne.n	800d7ca <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d7ba:	79fb      	ldrb	r3, [r7, #7]
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f7ff fee3 	bl	800d588 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d7c2:	2001      	movs	r0, #1
 800d7c4:	f7fd fa96 	bl	800acf4 <memp_malloc>
 800d7c8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d03f      	beq.n	800d850 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d7d0:	229c      	movs	r2, #156	; 0x9c
 800d7d2:	2100      	movs	r1, #0
 800d7d4:	68f8      	ldr	r0, [r7, #12]
 800d7d6:	f007 fda5 	bl	8015324 <memset>
    pcb->prio = prio;
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	79fa      	ldrb	r2, [r7, #7]
 800d7de:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d7e6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d7f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	22ff      	movs	r2, #255	; 0xff
 800d7fe:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d806:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	2206      	movs	r2, #6
 800d80c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	2206      	movs	r2, #6
 800d814:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d81c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	2201      	movs	r2, #1
 800d822:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d826:	4b0d      	ldr	r3, [pc, #52]	; (800d85c <tcp_alloc+0xf8>)
 800d828:	681a      	ldr	r2, [r3, #0]
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d82e:	4b0c      	ldr	r3, [pc, #48]	; (800d860 <tcp_alloc+0xfc>)
 800d830:	781a      	ldrb	r2, [r3, #0]
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d83c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	4a08      	ldr	r2, [pc, #32]	; (800d864 <tcp_alloc+0x100>)
 800d844:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	4a07      	ldr	r2, [pc, #28]	; (800d868 <tcp_alloc+0x104>)
 800d84c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d850:	68fb      	ldr	r3, [r7, #12]
}
 800d852:	4618      	mov	r0, r3
 800d854:	3710      	adds	r7, #16
 800d856:	46bd      	mov	sp, r7
 800d858:	bd80      	pop	{r7, pc}
 800d85a:	bf00      	nop
 800d85c:	2000ab1c 	.word	0x2000ab1c
 800d860:	2000409e 	.word	0x2000409e
 800d864:	0800d51d 	.word	0x0800d51d
 800d868:	006ddd00 	.word	0x006ddd00

0800d86c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b084      	sub	sp, #16
 800d870:	af00      	add	r7, sp, #0
 800d872:	4603      	mov	r3, r0
 800d874:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800d876:	2040      	movs	r0, #64	; 0x40
 800d878:	f7ff ff74 	bl	800d764 <tcp_alloc>
 800d87c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800d87e:	68fb      	ldr	r3, [r7, #12]
}
 800d880:	4618      	mov	r0, r3
 800d882:	3710      	adds	r7, #16
 800d884:	46bd      	mov	sp, r7
 800d886:	bd80      	pop	{r7, pc}

0800d888 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800d888:	b480      	push	{r7}
 800d88a:	b083      	sub	sp, #12
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
 800d890:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d002      	beq.n	800d89e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	683a      	ldr	r2, [r7, #0]
 800d89c:	611a      	str	r2, [r3, #16]
  }
}
 800d89e:	bf00      	nop
 800d8a0:	370c      	adds	r7, #12
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a8:	4770      	bx	lr
	...

0800d8ac <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b082      	sub	sp, #8
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
 800d8b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d00e      	beq.n	800d8da <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	7d1b      	ldrb	r3, [r3, #20]
 800d8c0:	2b01      	cmp	r3, #1
 800d8c2:	d106      	bne.n	800d8d2 <tcp_recv+0x26>
 800d8c4:	4b07      	ldr	r3, [pc, #28]	; (800d8e4 <tcp_recv+0x38>)
 800d8c6:	f240 72df 	movw	r2, #2015	; 0x7df
 800d8ca:	4907      	ldr	r1, [pc, #28]	; (800d8e8 <tcp_recv+0x3c>)
 800d8cc:	4807      	ldr	r0, [pc, #28]	; (800d8ec <tcp_recv+0x40>)
 800d8ce:	f007 fd31 	bl	8015334 <iprintf>
    pcb->recv = recv;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	683a      	ldr	r2, [r7, #0]
 800d8d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800d8da:	bf00      	nop
 800d8dc:	3708      	adds	r7, #8
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}
 800d8e2:	bf00      	nop
 800d8e4:	08017d94 	.word	0x08017d94
 800d8e8:	08018330 	.word	0x08018330
 800d8ec:	08017dd8 	.word	0x08017dd8

0800d8f0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b082      	sub	sp, #8
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
 800d8f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d00e      	beq.n	800d91e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	7d1b      	ldrb	r3, [r3, #20]
 800d904:	2b01      	cmp	r3, #1
 800d906:	d106      	bne.n	800d916 <tcp_sent+0x26>
 800d908:	4b07      	ldr	r3, [pc, #28]	; (800d928 <tcp_sent+0x38>)
 800d90a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800d90e:	4907      	ldr	r1, [pc, #28]	; (800d92c <tcp_sent+0x3c>)
 800d910:	4807      	ldr	r0, [pc, #28]	; (800d930 <tcp_sent+0x40>)
 800d912:	f007 fd0f 	bl	8015334 <iprintf>
    pcb->sent = sent;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	683a      	ldr	r2, [r7, #0]
 800d91a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800d91e:	bf00      	nop
 800d920:	3708      	adds	r7, #8
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}
 800d926:	bf00      	nop
 800d928:	08017d94 	.word	0x08017d94
 800d92c:	08018358 	.word	0x08018358
 800d930:	08017dd8 	.word	0x08017dd8

0800d934 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b082      	sub	sp, #8
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
 800d93c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d00e      	beq.n	800d962 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	7d1b      	ldrb	r3, [r3, #20]
 800d948:	2b01      	cmp	r3, #1
 800d94a:	d106      	bne.n	800d95a <tcp_err+0x26>
 800d94c:	4b07      	ldr	r3, [pc, #28]	; (800d96c <tcp_err+0x38>)
 800d94e:	f640 020d 	movw	r2, #2061	; 0x80d
 800d952:	4907      	ldr	r1, [pc, #28]	; (800d970 <tcp_err+0x3c>)
 800d954:	4807      	ldr	r0, [pc, #28]	; (800d974 <tcp_err+0x40>)
 800d956:	f007 fced 	bl	8015334 <iprintf>
    pcb->errf = err;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	683a      	ldr	r2, [r7, #0]
 800d95e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800d962:	bf00      	nop
 800d964:	3708      	adds	r7, #8
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}
 800d96a:	bf00      	nop
 800d96c:	08017d94 	.word	0x08017d94
 800d970:	08018380 	.word	0x08018380
 800d974:	08017dd8 	.word	0x08017dd8

0800d978 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b084      	sub	sp, #16
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	60f8      	str	r0, [r7, #12]
 800d980:	60b9      	str	r1, [r7, #8]
 800d982:	4613      	mov	r3, r2
 800d984:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d107      	bne.n	800d99c <tcp_poll+0x24>
 800d98c:	4b0e      	ldr	r3, [pc, #56]	; (800d9c8 <tcp_poll+0x50>)
 800d98e:	f640 023d 	movw	r2, #2109	; 0x83d
 800d992:	490e      	ldr	r1, [pc, #56]	; (800d9cc <tcp_poll+0x54>)
 800d994:	480e      	ldr	r0, [pc, #56]	; (800d9d0 <tcp_poll+0x58>)
 800d996:	f007 fccd 	bl	8015334 <iprintf>
 800d99a:	e011      	b.n	800d9c0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	7d1b      	ldrb	r3, [r3, #20]
 800d9a0:	2b01      	cmp	r3, #1
 800d9a2:	d106      	bne.n	800d9b2 <tcp_poll+0x3a>
 800d9a4:	4b08      	ldr	r3, [pc, #32]	; (800d9c8 <tcp_poll+0x50>)
 800d9a6:	f640 023e 	movw	r2, #2110	; 0x83e
 800d9aa:	490a      	ldr	r1, [pc, #40]	; (800d9d4 <tcp_poll+0x5c>)
 800d9ac:	4808      	ldr	r0, [pc, #32]	; (800d9d0 <tcp_poll+0x58>)
 800d9ae:	f007 fcc1 	bl	8015334 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	68ba      	ldr	r2, [r7, #8]
 800d9b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	79fa      	ldrb	r2, [r7, #7]
 800d9be:	775a      	strb	r2, [r3, #29]
}
 800d9c0:	3710      	adds	r7, #16
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd80      	pop	{r7, pc}
 800d9c6:	bf00      	nop
 800d9c8:	08017d94 	.word	0x08017d94
 800d9cc:	080183a8 	.word	0x080183a8
 800d9d0:	08017dd8 	.word	0x08017dd8
 800d9d4:	080183c0 	.word	0x080183c0

0800d9d8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b082      	sub	sp, #8
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d107      	bne.n	800d9f6 <tcp_pcb_purge+0x1e>
 800d9e6:	4b21      	ldr	r3, [pc, #132]	; (800da6c <tcp_pcb_purge+0x94>)
 800d9e8:	f640 0251 	movw	r2, #2129	; 0x851
 800d9ec:	4920      	ldr	r1, [pc, #128]	; (800da70 <tcp_pcb_purge+0x98>)
 800d9ee:	4821      	ldr	r0, [pc, #132]	; (800da74 <tcp_pcb_purge+0x9c>)
 800d9f0:	f007 fca0 	bl	8015334 <iprintf>
 800d9f4:	e037      	b.n	800da66 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	7d1b      	ldrb	r3, [r3, #20]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d033      	beq.n	800da66 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800da02:	2b0a      	cmp	r3, #10
 800da04:	d02f      	beq.n	800da66 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800da0a:	2b01      	cmp	r3, #1
 800da0c:	d02b      	beq.n	800da66 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da12:	2b00      	cmp	r3, #0
 800da14:	d007      	beq.n	800da26 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da1a:	4618      	mov	r0, r3
 800da1c:	f7fe f860 	bl	800bae0 <pbuf_free>
      pcb->refused_data = NULL;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2200      	movs	r2, #0
 800da24:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d002      	beq.n	800da34 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	f000 f986 	bl	800dd40 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800da3a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da40:	4618      	mov	r0, r3
 800da42:	f7ff fd11 	bl	800d468 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da4a:	4618      	mov	r0, r3
 800da4c:	f7ff fd0c 	bl	800d468 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2200      	movs	r2, #0
 800da54:	66da      	str	r2, [r3, #108]	; 0x6c
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2200      	movs	r2, #0
 800da62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800da66:	3708      	adds	r7, #8
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd80      	pop	{r7, pc}
 800da6c:	08017d94 	.word	0x08017d94
 800da70:	080183e0 	.word	0x080183e0
 800da74:	08017dd8 	.word	0x08017dd8

0800da78 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b084      	sub	sp, #16
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
 800da80:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d106      	bne.n	800da96 <tcp_pcb_remove+0x1e>
 800da88:	4b3e      	ldr	r3, [pc, #248]	; (800db84 <tcp_pcb_remove+0x10c>)
 800da8a:	f640 0283 	movw	r2, #2179	; 0x883
 800da8e:	493e      	ldr	r1, [pc, #248]	; (800db88 <tcp_pcb_remove+0x110>)
 800da90:	483e      	ldr	r0, [pc, #248]	; (800db8c <tcp_pcb_remove+0x114>)
 800da92:	f007 fc4f 	bl	8015334 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d106      	bne.n	800daaa <tcp_pcb_remove+0x32>
 800da9c:	4b39      	ldr	r3, [pc, #228]	; (800db84 <tcp_pcb_remove+0x10c>)
 800da9e:	f640 0284 	movw	r2, #2180	; 0x884
 800daa2:	493b      	ldr	r1, [pc, #236]	; (800db90 <tcp_pcb_remove+0x118>)
 800daa4:	4839      	ldr	r0, [pc, #228]	; (800db8c <tcp_pcb_remove+0x114>)
 800daa6:	f007 fc45 	bl	8015334 <iprintf>

  TCP_RMV(pcblist, pcb);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	683a      	ldr	r2, [r7, #0]
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d105      	bne.n	800dac0 <tcp_pcb_remove+0x48>
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	68da      	ldr	r2, [r3, #12]
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	601a      	str	r2, [r3, #0]
 800dabe:	e013      	b.n	800dae8 <tcp_pcb_remove+0x70>
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	60fb      	str	r3, [r7, #12]
 800dac6:	e00c      	b.n	800dae2 <tcp_pcb_remove+0x6a>
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	68db      	ldr	r3, [r3, #12]
 800dacc:	683a      	ldr	r2, [r7, #0]
 800dace:	429a      	cmp	r2, r3
 800dad0:	d104      	bne.n	800dadc <tcp_pcb_remove+0x64>
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	68da      	ldr	r2, [r3, #12]
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	60da      	str	r2, [r3, #12]
 800dada:	e005      	b.n	800dae8 <tcp_pcb_remove+0x70>
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	68db      	ldr	r3, [r3, #12]
 800dae0:	60fb      	str	r3, [r7, #12]
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d1ef      	bne.n	800dac8 <tcp_pcb_remove+0x50>
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	2200      	movs	r2, #0
 800daec:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800daee:	6838      	ldr	r0, [r7, #0]
 800daf0:	f7ff ff72 	bl	800d9d8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	7d1b      	ldrb	r3, [r3, #20]
 800daf8:	2b0a      	cmp	r3, #10
 800dafa:	d013      	beq.n	800db24 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800db00:	2b01      	cmp	r3, #1
 800db02:	d00f      	beq.n	800db24 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	8b5b      	ldrh	r3, [r3, #26]
 800db08:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d009      	beq.n	800db24 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	8b5b      	ldrh	r3, [r3, #26]
 800db14:	f043 0302 	orr.w	r3, r3, #2
 800db18:	b29a      	uxth	r2, r3
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800db1e:	6838      	ldr	r0, [r7, #0]
 800db20:	f003 fbc2 	bl	80112a8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	7d1b      	ldrb	r3, [r3, #20]
 800db28:	2b01      	cmp	r3, #1
 800db2a:	d020      	beq.n	800db6e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db30:	2b00      	cmp	r3, #0
 800db32:	d006      	beq.n	800db42 <tcp_pcb_remove+0xca>
 800db34:	4b13      	ldr	r3, [pc, #76]	; (800db84 <tcp_pcb_remove+0x10c>)
 800db36:	f640 0293 	movw	r2, #2195	; 0x893
 800db3a:	4916      	ldr	r1, [pc, #88]	; (800db94 <tcp_pcb_remove+0x11c>)
 800db3c:	4813      	ldr	r0, [pc, #76]	; (800db8c <tcp_pcb_remove+0x114>)
 800db3e:	f007 fbf9 	bl	8015334 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db46:	2b00      	cmp	r3, #0
 800db48:	d006      	beq.n	800db58 <tcp_pcb_remove+0xe0>
 800db4a:	4b0e      	ldr	r3, [pc, #56]	; (800db84 <tcp_pcb_remove+0x10c>)
 800db4c:	f640 0294 	movw	r2, #2196	; 0x894
 800db50:	4911      	ldr	r1, [pc, #68]	; (800db98 <tcp_pcb_remove+0x120>)
 800db52:	480e      	ldr	r0, [pc, #56]	; (800db8c <tcp_pcb_remove+0x114>)
 800db54:	f007 fbee 	bl	8015334 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d006      	beq.n	800db6e <tcp_pcb_remove+0xf6>
 800db60:	4b08      	ldr	r3, [pc, #32]	; (800db84 <tcp_pcb_remove+0x10c>)
 800db62:	f640 0296 	movw	r2, #2198	; 0x896
 800db66:	490d      	ldr	r1, [pc, #52]	; (800db9c <tcp_pcb_remove+0x124>)
 800db68:	4808      	ldr	r0, [pc, #32]	; (800db8c <tcp_pcb_remove+0x114>)
 800db6a:	f007 fbe3 	bl	8015334 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	2200      	movs	r2, #0
 800db72:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	2200      	movs	r2, #0
 800db78:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800db7a:	bf00      	nop
 800db7c:	3710      	adds	r7, #16
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}
 800db82:	bf00      	nop
 800db84:	08017d94 	.word	0x08017d94
 800db88:	080183fc 	.word	0x080183fc
 800db8c:	08017dd8 	.word	0x08017dd8
 800db90:	08018418 	.word	0x08018418
 800db94:	08018438 	.word	0x08018438
 800db98:	08018450 	.word	0x08018450
 800db9c:	0801846c 	.word	0x0801846c

0800dba0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b082      	sub	sp, #8
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d106      	bne.n	800dbbc <tcp_next_iss+0x1c>
 800dbae:	4b0a      	ldr	r3, [pc, #40]	; (800dbd8 <tcp_next_iss+0x38>)
 800dbb0:	f640 02af 	movw	r2, #2223	; 0x8af
 800dbb4:	4909      	ldr	r1, [pc, #36]	; (800dbdc <tcp_next_iss+0x3c>)
 800dbb6:	480a      	ldr	r0, [pc, #40]	; (800dbe0 <tcp_next_iss+0x40>)
 800dbb8:	f007 fbbc 	bl	8015334 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800dbbc:	4b09      	ldr	r3, [pc, #36]	; (800dbe4 <tcp_next_iss+0x44>)
 800dbbe:	681a      	ldr	r2, [r3, #0]
 800dbc0:	4b09      	ldr	r3, [pc, #36]	; (800dbe8 <tcp_next_iss+0x48>)
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	4413      	add	r3, r2
 800dbc6:	4a07      	ldr	r2, [pc, #28]	; (800dbe4 <tcp_next_iss+0x44>)
 800dbc8:	6013      	str	r3, [r2, #0]
  return iss;
 800dbca:	4b06      	ldr	r3, [pc, #24]	; (800dbe4 <tcp_next_iss+0x44>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800dbce:	4618      	mov	r0, r3
 800dbd0:	3708      	adds	r7, #8
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bd80      	pop	{r7, pc}
 800dbd6:	bf00      	nop
 800dbd8:	08017d94 	.word	0x08017d94
 800dbdc:	08018484 	.word	0x08018484
 800dbe0:	08017dd8 	.word	0x08017dd8
 800dbe4:	20000014 	.word	0x20000014
 800dbe8:	2000ab1c 	.word	0x2000ab1c

0800dbec <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b086      	sub	sp, #24
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	60b9      	str	r1, [r7, #8]
 800dbf6:	607a      	str	r2, [r7, #4]
 800dbf8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d106      	bne.n	800dc0e <tcp_eff_send_mss_netif+0x22>
 800dc00:	4b14      	ldr	r3, [pc, #80]	; (800dc54 <tcp_eff_send_mss_netif+0x68>)
 800dc02:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800dc06:	4914      	ldr	r1, [pc, #80]	; (800dc58 <tcp_eff_send_mss_netif+0x6c>)
 800dc08:	4814      	ldr	r0, [pc, #80]	; (800dc5c <tcp_eff_send_mss_netif+0x70>)
 800dc0a:	f007 fb93 	bl	8015334 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d101      	bne.n	800dc18 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800dc14:	89fb      	ldrh	r3, [r7, #14]
 800dc16:	e019      	b.n	800dc4c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800dc18:	68bb      	ldr	r3, [r7, #8]
 800dc1a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dc1c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800dc1e:	8afb      	ldrh	r3, [r7, #22]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d012      	beq.n	800dc4a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800dc24:	2328      	movs	r3, #40	; 0x28
 800dc26:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800dc28:	8afa      	ldrh	r2, [r7, #22]
 800dc2a:	8abb      	ldrh	r3, [r7, #20]
 800dc2c:	429a      	cmp	r2, r3
 800dc2e:	d904      	bls.n	800dc3a <tcp_eff_send_mss_netif+0x4e>
 800dc30:	8afa      	ldrh	r2, [r7, #22]
 800dc32:	8abb      	ldrh	r3, [r7, #20]
 800dc34:	1ad3      	subs	r3, r2, r3
 800dc36:	b29b      	uxth	r3, r3
 800dc38:	e000      	b.n	800dc3c <tcp_eff_send_mss_netif+0x50>
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800dc3e:	8a7a      	ldrh	r2, [r7, #18]
 800dc40:	89fb      	ldrh	r3, [r7, #14]
 800dc42:	4293      	cmp	r3, r2
 800dc44:	bf28      	it	cs
 800dc46:	4613      	movcs	r3, r2
 800dc48:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800dc4a:	89fb      	ldrh	r3, [r7, #14]
}
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	3718      	adds	r7, #24
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd80      	pop	{r7, pc}
 800dc54:	08017d94 	.word	0x08017d94
 800dc58:	080184a0 	.word	0x080184a0
 800dc5c:	08017dd8 	.word	0x08017dd8

0800dc60 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b084      	sub	sp, #16
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
 800dc68:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d119      	bne.n	800dca8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800dc74:	4b10      	ldr	r3, [pc, #64]	; (800dcb8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800dc76:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800dc7a:	4910      	ldr	r1, [pc, #64]	; (800dcbc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800dc7c:	4810      	ldr	r0, [pc, #64]	; (800dcc0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800dc7e:	f007 fb59 	bl	8015334 <iprintf>

  while (pcb != NULL) {
 800dc82:	e011      	b.n	800dca8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	681a      	ldr	r2, [r3, #0]
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	429a      	cmp	r2, r3
 800dc8e:	d108      	bne.n	800dca2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	68db      	ldr	r3, [r3, #12]
 800dc94:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800dc96:	68f8      	ldr	r0, [r7, #12]
 800dc98:	f7fe fd1a 	bl	800c6d0 <tcp_abort>
      pcb = next;
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	60fb      	str	r3, [r7, #12]
 800dca0:	e002      	b.n	800dca8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	68db      	ldr	r3, [r3, #12]
 800dca6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d1ea      	bne.n	800dc84 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800dcae:	bf00      	nop
 800dcb0:	bf00      	nop
 800dcb2:	3710      	adds	r7, #16
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}
 800dcb8:	08017d94 	.word	0x08017d94
 800dcbc:	080184c8 	.word	0x080184c8
 800dcc0:	08017dd8 	.word	0x08017dd8

0800dcc4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b084      	sub	sp, #16
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
 800dccc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d02a      	beq.n	800dd2a <tcp_netif_ip_addr_changed+0x66>
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d026      	beq.n	800dd2a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800dcdc:	4b15      	ldr	r3, [pc, #84]	; (800dd34 <tcp_netif_ip_addr_changed+0x70>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	4619      	mov	r1, r3
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	f7ff ffbc 	bl	800dc60 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800dce8:	4b13      	ldr	r3, [pc, #76]	; (800dd38 <tcp_netif_ip_addr_changed+0x74>)
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	4619      	mov	r1, r3
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	f7ff ffb6 	bl	800dc60 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d017      	beq.n	800dd2a <tcp_netif_ip_addr_changed+0x66>
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d013      	beq.n	800dd2a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dd02:	4b0e      	ldr	r3, [pc, #56]	; (800dd3c <tcp_netif_ip_addr_changed+0x78>)
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	60fb      	str	r3, [r7, #12]
 800dd08:	e00c      	b.n	800dd24 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	681a      	ldr	r2, [r3, #0]
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	429a      	cmp	r2, r3
 800dd14:	d103      	bne.n	800dd1e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	681a      	ldr	r2, [r3, #0]
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	68db      	ldr	r3, [r3, #12]
 800dd22:	60fb      	str	r3, [r7, #12]
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d1ef      	bne.n	800dd0a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800dd2a:	bf00      	nop
 800dd2c:	3710      	adds	r7, #16
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bd80      	pop	{r7, pc}
 800dd32:	bf00      	nop
 800dd34:	2000ab18 	.word	0x2000ab18
 800dd38:	2000ab24 	.word	0x2000ab24
 800dd3c:	2000ab20 	.word	0x2000ab20

0800dd40 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b082      	sub	sp, #8
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d007      	beq.n	800dd60 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd54:	4618      	mov	r0, r3
 800dd56:	f7ff fb87 	bl	800d468 <tcp_segs_free>
    pcb->ooseq = NULL;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800dd60:	bf00      	nop
 800dd62:	3708      	adds	r7, #8
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd80      	pop	{r7, pc}

0800dd68 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800dd68:	b590      	push	{r4, r7, lr}
 800dd6a:	b08d      	sub	sp, #52	; 0x34
 800dd6c:	af04      	add	r7, sp, #16
 800dd6e:	6078      	str	r0, [r7, #4]
 800dd70:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d105      	bne.n	800dd84 <tcp_input+0x1c>
 800dd78:	4b9b      	ldr	r3, [pc, #620]	; (800dfe8 <tcp_input+0x280>)
 800dd7a:	2283      	movs	r2, #131	; 0x83
 800dd7c:	499b      	ldr	r1, [pc, #620]	; (800dfec <tcp_input+0x284>)
 800dd7e:	489c      	ldr	r0, [pc, #624]	; (800dff0 <tcp_input+0x288>)
 800dd80:	f007 fad8 	bl	8015334 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	685b      	ldr	r3, [r3, #4]
 800dd88:	4a9a      	ldr	r2, [pc, #616]	; (800dff4 <tcp_input+0x28c>)
 800dd8a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	895b      	ldrh	r3, [r3, #10]
 800dd90:	2b13      	cmp	r3, #19
 800dd92:	f240 83c4 	bls.w	800e51e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800dd96:	4b98      	ldr	r3, [pc, #608]	; (800dff8 <tcp_input+0x290>)
 800dd98:	695b      	ldr	r3, [r3, #20]
 800dd9a:	4a97      	ldr	r2, [pc, #604]	; (800dff8 <tcp_input+0x290>)
 800dd9c:	6812      	ldr	r2, [r2, #0]
 800dd9e:	4611      	mov	r1, r2
 800dda0:	4618      	mov	r0, r3
 800dda2:	f006 f8d5 	bl	8013f50 <ip4_addr_isbroadcast_u32>
 800dda6:	4603      	mov	r3, r0
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	f040 83ba 	bne.w	800e522 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ddae:	4b92      	ldr	r3, [pc, #584]	; (800dff8 <tcp_input+0x290>)
 800ddb0:	695b      	ldr	r3, [r3, #20]
 800ddb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ddb6:	2be0      	cmp	r3, #224	; 0xe0
 800ddb8:	f000 83b3 	beq.w	800e522 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ddbc:	4b8d      	ldr	r3, [pc, #564]	; (800dff4 <tcp_input+0x28c>)
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	899b      	ldrh	r3, [r3, #12]
 800ddc2:	b29b      	uxth	r3, r3
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f7fc fab7 	bl	800a338 <lwip_htons>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	0b1b      	lsrs	r3, r3, #12
 800ddce:	b29b      	uxth	r3, r3
 800ddd0:	b2db      	uxtb	r3, r3
 800ddd2:	009b      	lsls	r3, r3, #2
 800ddd4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ddd6:	7cbb      	ldrb	r3, [r7, #18]
 800ddd8:	2b13      	cmp	r3, #19
 800ddda:	f240 83a4 	bls.w	800e526 <tcp_input+0x7be>
 800ddde:	7cbb      	ldrb	r3, [r7, #18]
 800dde0:	b29a      	uxth	r2, r3
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	891b      	ldrh	r3, [r3, #8]
 800dde6:	429a      	cmp	r2, r3
 800dde8:	f200 839d 	bhi.w	800e526 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ddec:	7cbb      	ldrb	r3, [r7, #18]
 800ddee:	b29b      	uxth	r3, r3
 800ddf0:	3b14      	subs	r3, #20
 800ddf2:	b29a      	uxth	r2, r3
 800ddf4:	4b81      	ldr	r3, [pc, #516]	; (800dffc <tcp_input+0x294>)
 800ddf6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800ddf8:	4b81      	ldr	r3, [pc, #516]	; (800e000 <tcp_input+0x298>)
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	895a      	ldrh	r2, [r3, #10]
 800de02:	7cbb      	ldrb	r3, [r7, #18]
 800de04:	b29b      	uxth	r3, r3
 800de06:	429a      	cmp	r2, r3
 800de08:	d309      	bcc.n	800de1e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800de0a:	4b7c      	ldr	r3, [pc, #496]	; (800dffc <tcp_input+0x294>)
 800de0c:	881a      	ldrh	r2, [r3, #0]
 800de0e:	4b7d      	ldr	r3, [pc, #500]	; (800e004 <tcp_input+0x29c>)
 800de10:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800de12:	7cbb      	ldrb	r3, [r7, #18]
 800de14:	4619      	mov	r1, r3
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f7fd fddc 	bl	800b9d4 <pbuf_remove_header>
 800de1c:	e04e      	b.n	800debc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d105      	bne.n	800de32 <tcp_input+0xca>
 800de26:	4b70      	ldr	r3, [pc, #448]	; (800dfe8 <tcp_input+0x280>)
 800de28:	22c2      	movs	r2, #194	; 0xc2
 800de2a:	4977      	ldr	r1, [pc, #476]	; (800e008 <tcp_input+0x2a0>)
 800de2c:	4870      	ldr	r0, [pc, #448]	; (800dff0 <tcp_input+0x288>)
 800de2e:	f007 fa81 	bl	8015334 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800de32:	2114      	movs	r1, #20
 800de34:	6878      	ldr	r0, [r7, #4]
 800de36:	f7fd fdcd 	bl	800b9d4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	895a      	ldrh	r2, [r3, #10]
 800de3e:	4b71      	ldr	r3, [pc, #452]	; (800e004 <tcp_input+0x29c>)
 800de40:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800de42:	4b6e      	ldr	r3, [pc, #440]	; (800dffc <tcp_input+0x294>)
 800de44:	881a      	ldrh	r2, [r3, #0]
 800de46:	4b6f      	ldr	r3, [pc, #444]	; (800e004 <tcp_input+0x29c>)
 800de48:	881b      	ldrh	r3, [r3, #0]
 800de4a:	1ad3      	subs	r3, r2, r3
 800de4c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800de4e:	4b6d      	ldr	r3, [pc, #436]	; (800e004 <tcp_input+0x29c>)
 800de50:	881b      	ldrh	r3, [r3, #0]
 800de52:	4619      	mov	r1, r3
 800de54:	6878      	ldr	r0, [r7, #4]
 800de56:	f7fd fdbd 	bl	800b9d4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	895b      	ldrh	r3, [r3, #10]
 800de60:	8a3a      	ldrh	r2, [r7, #16]
 800de62:	429a      	cmp	r2, r3
 800de64:	f200 8361 	bhi.w	800e52a <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	685b      	ldr	r3, [r3, #4]
 800de6e:	4a64      	ldr	r2, [pc, #400]	; (800e000 <tcp_input+0x298>)
 800de70:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	8a3a      	ldrh	r2, [r7, #16]
 800de78:	4611      	mov	r1, r2
 800de7a:	4618      	mov	r0, r3
 800de7c:	f7fd fdaa 	bl	800b9d4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	891a      	ldrh	r2, [r3, #8]
 800de84:	8a3b      	ldrh	r3, [r7, #16]
 800de86:	1ad3      	subs	r3, r2, r3
 800de88:	b29a      	uxth	r2, r3
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	895b      	ldrh	r3, [r3, #10]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d005      	beq.n	800dea2 <tcp_input+0x13a>
 800de96:	4b54      	ldr	r3, [pc, #336]	; (800dfe8 <tcp_input+0x280>)
 800de98:	22df      	movs	r2, #223	; 0xdf
 800de9a:	495c      	ldr	r1, [pc, #368]	; (800e00c <tcp_input+0x2a4>)
 800de9c:	4854      	ldr	r0, [pc, #336]	; (800dff0 <tcp_input+0x288>)
 800de9e:	f007 fa49 	bl	8015334 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	891a      	ldrh	r2, [r3, #8]
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	891b      	ldrh	r3, [r3, #8]
 800deac:	429a      	cmp	r2, r3
 800deae:	d005      	beq.n	800debc <tcp_input+0x154>
 800deb0:	4b4d      	ldr	r3, [pc, #308]	; (800dfe8 <tcp_input+0x280>)
 800deb2:	22e0      	movs	r2, #224	; 0xe0
 800deb4:	4956      	ldr	r1, [pc, #344]	; (800e010 <tcp_input+0x2a8>)
 800deb6:	484e      	ldr	r0, [pc, #312]	; (800dff0 <tcp_input+0x288>)
 800deb8:	f007 fa3c 	bl	8015334 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800debc:	4b4d      	ldr	r3, [pc, #308]	; (800dff4 <tcp_input+0x28c>)
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	881b      	ldrh	r3, [r3, #0]
 800dec2:	b29b      	uxth	r3, r3
 800dec4:	4a4b      	ldr	r2, [pc, #300]	; (800dff4 <tcp_input+0x28c>)
 800dec6:	6814      	ldr	r4, [r2, #0]
 800dec8:	4618      	mov	r0, r3
 800deca:	f7fc fa35 	bl	800a338 <lwip_htons>
 800dece:	4603      	mov	r3, r0
 800ded0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ded2:	4b48      	ldr	r3, [pc, #288]	; (800dff4 <tcp_input+0x28c>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	885b      	ldrh	r3, [r3, #2]
 800ded8:	b29b      	uxth	r3, r3
 800deda:	4a46      	ldr	r2, [pc, #280]	; (800dff4 <tcp_input+0x28c>)
 800dedc:	6814      	ldr	r4, [r2, #0]
 800dede:	4618      	mov	r0, r3
 800dee0:	f7fc fa2a 	bl	800a338 <lwip_htons>
 800dee4:	4603      	mov	r3, r0
 800dee6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800dee8:	4b42      	ldr	r3, [pc, #264]	; (800dff4 <tcp_input+0x28c>)
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	685b      	ldr	r3, [r3, #4]
 800deee:	4a41      	ldr	r2, [pc, #260]	; (800dff4 <tcp_input+0x28c>)
 800def0:	6814      	ldr	r4, [r2, #0]
 800def2:	4618      	mov	r0, r3
 800def4:	f7fc fa35 	bl	800a362 <lwip_htonl>
 800def8:	4603      	mov	r3, r0
 800defa:	6063      	str	r3, [r4, #4]
 800defc:	6863      	ldr	r3, [r4, #4]
 800defe:	4a45      	ldr	r2, [pc, #276]	; (800e014 <tcp_input+0x2ac>)
 800df00:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800df02:	4b3c      	ldr	r3, [pc, #240]	; (800dff4 <tcp_input+0x28c>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	689b      	ldr	r3, [r3, #8]
 800df08:	4a3a      	ldr	r2, [pc, #232]	; (800dff4 <tcp_input+0x28c>)
 800df0a:	6814      	ldr	r4, [r2, #0]
 800df0c:	4618      	mov	r0, r3
 800df0e:	f7fc fa28 	bl	800a362 <lwip_htonl>
 800df12:	4603      	mov	r3, r0
 800df14:	60a3      	str	r3, [r4, #8]
 800df16:	68a3      	ldr	r3, [r4, #8]
 800df18:	4a3f      	ldr	r2, [pc, #252]	; (800e018 <tcp_input+0x2b0>)
 800df1a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800df1c:	4b35      	ldr	r3, [pc, #212]	; (800dff4 <tcp_input+0x28c>)
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	89db      	ldrh	r3, [r3, #14]
 800df22:	b29b      	uxth	r3, r3
 800df24:	4a33      	ldr	r2, [pc, #204]	; (800dff4 <tcp_input+0x28c>)
 800df26:	6814      	ldr	r4, [r2, #0]
 800df28:	4618      	mov	r0, r3
 800df2a:	f7fc fa05 	bl	800a338 <lwip_htons>
 800df2e:	4603      	mov	r3, r0
 800df30:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800df32:	4b30      	ldr	r3, [pc, #192]	; (800dff4 <tcp_input+0x28c>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	899b      	ldrh	r3, [r3, #12]
 800df38:	b29b      	uxth	r3, r3
 800df3a:	4618      	mov	r0, r3
 800df3c:	f7fc f9fc 	bl	800a338 <lwip_htons>
 800df40:	4603      	mov	r3, r0
 800df42:	b2db      	uxtb	r3, r3
 800df44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800df48:	b2da      	uxtb	r2, r3
 800df4a:	4b34      	ldr	r3, [pc, #208]	; (800e01c <tcp_input+0x2b4>)
 800df4c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	891a      	ldrh	r2, [r3, #8]
 800df52:	4b33      	ldr	r3, [pc, #204]	; (800e020 <tcp_input+0x2b8>)
 800df54:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800df56:	4b31      	ldr	r3, [pc, #196]	; (800e01c <tcp_input+0x2b4>)
 800df58:	781b      	ldrb	r3, [r3, #0]
 800df5a:	f003 0303 	and.w	r3, r3, #3
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d00c      	beq.n	800df7c <tcp_input+0x214>
    tcplen++;
 800df62:	4b2f      	ldr	r3, [pc, #188]	; (800e020 <tcp_input+0x2b8>)
 800df64:	881b      	ldrh	r3, [r3, #0]
 800df66:	3301      	adds	r3, #1
 800df68:	b29a      	uxth	r2, r3
 800df6a:	4b2d      	ldr	r3, [pc, #180]	; (800e020 <tcp_input+0x2b8>)
 800df6c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	891a      	ldrh	r2, [r3, #8]
 800df72:	4b2b      	ldr	r3, [pc, #172]	; (800e020 <tcp_input+0x2b8>)
 800df74:	881b      	ldrh	r3, [r3, #0]
 800df76:	429a      	cmp	r2, r3
 800df78:	f200 82d9 	bhi.w	800e52e <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800df7c:	2300      	movs	r3, #0
 800df7e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800df80:	4b28      	ldr	r3, [pc, #160]	; (800e024 <tcp_input+0x2bc>)
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	61fb      	str	r3, [r7, #28]
 800df86:	e09d      	b.n	800e0c4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800df88:	69fb      	ldr	r3, [r7, #28]
 800df8a:	7d1b      	ldrb	r3, [r3, #20]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d105      	bne.n	800df9c <tcp_input+0x234>
 800df90:	4b15      	ldr	r3, [pc, #84]	; (800dfe8 <tcp_input+0x280>)
 800df92:	22fb      	movs	r2, #251	; 0xfb
 800df94:	4924      	ldr	r1, [pc, #144]	; (800e028 <tcp_input+0x2c0>)
 800df96:	4816      	ldr	r0, [pc, #88]	; (800dff0 <tcp_input+0x288>)
 800df98:	f007 f9cc 	bl	8015334 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800df9c:	69fb      	ldr	r3, [r7, #28]
 800df9e:	7d1b      	ldrb	r3, [r3, #20]
 800dfa0:	2b0a      	cmp	r3, #10
 800dfa2:	d105      	bne.n	800dfb0 <tcp_input+0x248>
 800dfa4:	4b10      	ldr	r3, [pc, #64]	; (800dfe8 <tcp_input+0x280>)
 800dfa6:	22fc      	movs	r2, #252	; 0xfc
 800dfa8:	4920      	ldr	r1, [pc, #128]	; (800e02c <tcp_input+0x2c4>)
 800dfaa:	4811      	ldr	r0, [pc, #68]	; (800dff0 <tcp_input+0x288>)
 800dfac:	f007 f9c2 	bl	8015334 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800dfb0:	69fb      	ldr	r3, [r7, #28]
 800dfb2:	7d1b      	ldrb	r3, [r3, #20]
 800dfb4:	2b01      	cmp	r3, #1
 800dfb6:	d105      	bne.n	800dfc4 <tcp_input+0x25c>
 800dfb8:	4b0b      	ldr	r3, [pc, #44]	; (800dfe8 <tcp_input+0x280>)
 800dfba:	22fd      	movs	r2, #253	; 0xfd
 800dfbc:	491c      	ldr	r1, [pc, #112]	; (800e030 <tcp_input+0x2c8>)
 800dfbe:	480c      	ldr	r0, [pc, #48]	; (800dff0 <tcp_input+0x288>)
 800dfc0:	f007 f9b8 	bl	8015334 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dfc4:	69fb      	ldr	r3, [r7, #28]
 800dfc6:	7a1b      	ldrb	r3, [r3, #8]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d033      	beq.n	800e034 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dfcc:	69fb      	ldr	r3, [r7, #28]
 800dfce:	7a1a      	ldrb	r2, [r3, #8]
 800dfd0:	4b09      	ldr	r3, [pc, #36]	; (800dff8 <tcp_input+0x290>)
 800dfd2:	685b      	ldr	r3, [r3, #4]
 800dfd4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dfd8:	3301      	adds	r3, #1
 800dfda:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dfdc:	429a      	cmp	r2, r3
 800dfde:	d029      	beq.n	800e034 <tcp_input+0x2cc>
      prev = pcb;
 800dfe0:	69fb      	ldr	r3, [r7, #28]
 800dfe2:	61bb      	str	r3, [r7, #24]
      continue;
 800dfe4:	e06b      	b.n	800e0be <tcp_input+0x356>
 800dfe6:	bf00      	nop
 800dfe8:	080184fc 	.word	0x080184fc
 800dfec:	08018530 	.word	0x08018530
 800dff0:	08018548 	.word	0x08018548
 800dff4:	200040b0 	.word	0x200040b0
 800dff8:	20007404 	.word	0x20007404
 800dffc:	200040b4 	.word	0x200040b4
 800e000:	200040b8 	.word	0x200040b8
 800e004:	200040b6 	.word	0x200040b6
 800e008:	08018570 	.word	0x08018570
 800e00c:	08018580 	.word	0x08018580
 800e010:	0801858c 	.word	0x0801858c
 800e014:	200040c0 	.word	0x200040c0
 800e018:	200040c4 	.word	0x200040c4
 800e01c:	200040cc 	.word	0x200040cc
 800e020:	200040ca 	.word	0x200040ca
 800e024:	2000ab18 	.word	0x2000ab18
 800e028:	080185ac 	.word	0x080185ac
 800e02c:	080185d4 	.word	0x080185d4
 800e030:	08018600 	.word	0x08018600
    }

    if (pcb->remote_port == tcphdr->src &&
 800e034:	69fb      	ldr	r3, [r7, #28]
 800e036:	8b1a      	ldrh	r2, [r3, #24]
 800e038:	4b94      	ldr	r3, [pc, #592]	; (800e28c <tcp_input+0x524>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	881b      	ldrh	r3, [r3, #0]
 800e03e:	b29b      	uxth	r3, r3
 800e040:	429a      	cmp	r2, r3
 800e042:	d13a      	bne.n	800e0ba <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e044:	69fb      	ldr	r3, [r7, #28]
 800e046:	8ada      	ldrh	r2, [r3, #22]
 800e048:	4b90      	ldr	r3, [pc, #576]	; (800e28c <tcp_input+0x524>)
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	885b      	ldrh	r3, [r3, #2]
 800e04e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e050:	429a      	cmp	r2, r3
 800e052:	d132      	bne.n	800e0ba <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e054:	69fb      	ldr	r3, [r7, #28]
 800e056:	685a      	ldr	r2, [r3, #4]
 800e058:	4b8d      	ldr	r3, [pc, #564]	; (800e290 <tcp_input+0x528>)
 800e05a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e05c:	429a      	cmp	r2, r3
 800e05e:	d12c      	bne.n	800e0ba <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e060:	69fb      	ldr	r3, [r7, #28]
 800e062:	681a      	ldr	r2, [r3, #0]
 800e064:	4b8a      	ldr	r3, [pc, #552]	; (800e290 <tcp_input+0x528>)
 800e066:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e068:	429a      	cmp	r2, r3
 800e06a:	d126      	bne.n	800e0ba <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e06c:	69fb      	ldr	r3, [r7, #28]
 800e06e:	68db      	ldr	r3, [r3, #12]
 800e070:	69fa      	ldr	r2, [r7, #28]
 800e072:	429a      	cmp	r2, r3
 800e074:	d106      	bne.n	800e084 <tcp_input+0x31c>
 800e076:	4b87      	ldr	r3, [pc, #540]	; (800e294 <tcp_input+0x52c>)
 800e078:	f240 120d 	movw	r2, #269	; 0x10d
 800e07c:	4986      	ldr	r1, [pc, #536]	; (800e298 <tcp_input+0x530>)
 800e07e:	4887      	ldr	r0, [pc, #540]	; (800e29c <tcp_input+0x534>)
 800e080:	f007 f958 	bl	8015334 <iprintf>
      if (prev != NULL) {
 800e084:	69bb      	ldr	r3, [r7, #24]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d00a      	beq.n	800e0a0 <tcp_input+0x338>
        prev->next = pcb->next;
 800e08a:	69fb      	ldr	r3, [r7, #28]
 800e08c:	68da      	ldr	r2, [r3, #12]
 800e08e:	69bb      	ldr	r3, [r7, #24]
 800e090:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e092:	4b83      	ldr	r3, [pc, #524]	; (800e2a0 <tcp_input+0x538>)
 800e094:	681a      	ldr	r2, [r3, #0]
 800e096:	69fb      	ldr	r3, [r7, #28]
 800e098:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e09a:	4a81      	ldr	r2, [pc, #516]	; (800e2a0 <tcp_input+0x538>)
 800e09c:	69fb      	ldr	r3, [r7, #28]
 800e09e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e0a0:	69fb      	ldr	r3, [r7, #28]
 800e0a2:	68db      	ldr	r3, [r3, #12]
 800e0a4:	69fa      	ldr	r2, [r7, #28]
 800e0a6:	429a      	cmp	r2, r3
 800e0a8:	d111      	bne.n	800e0ce <tcp_input+0x366>
 800e0aa:	4b7a      	ldr	r3, [pc, #488]	; (800e294 <tcp_input+0x52c>)
 800e0ac:	f240 1215 	movw	r2, #277	; 0x115
 800e0b0:	497c      	ldr	r1, [pc, #496]	; (800e2a4 <tcp_input+0x53c>)
 800e0b2:	487a      	ldr	r0, [pc, #488]	; (800e29c <tcp_input+0x534>)
 800e0b4:	f007 f93e 	bl	8015334 <iprintf>
      break;
 800e0b8:	e009      	b.n	800e0ce <tcp_input+0x366>
    }
    prev = pcb;
 800e0ba:	69fb      	ldr	r3, [r7, #28]
 800e0bc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e0be:	69fb      	ldr	r3, [r7, #28]
 800e0c0:	68db      	ldr	r3, [r3, #12]
 800e0c2:	61fb      	str	r3, [r7, #28]
 800e0c4:	69fb      	ldr	r3, [r7, #28]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	f47f af5e 	bne.w	800df88 <tcp_input+0x220>
 800e0cc:	e000      	b.n	800e0d0 <tcp_input+0x368>
      break;
 800e0ce:	bf00      	nop
  }

  if (pcb == NULL) {
 800e0d0:	69fb      	ldr	r3, [r7, #28]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	f040 8095 	bne.w	800e202 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e0d8:	4b73      	ldr	r3, [pc, #460]	; (800e2a8 <tcp_input+0x540>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	61fb      	str	r3, [r7, #28]
 800e0de:	e03f      	b.n	800e160 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e0e0:	69fb      	ldr	r3, [r7, #28]
 800e0e2:	7d1b      	ldrb	r3, [r3, #20]
 800e0e4:	2b0a      	cmp	r3, #10
 800e0e6:	d006      	beq.n	800e0f6 <tcp_input+0x38e>
 800e0e8:	4b6a      	ldr	r3, [pc, #424]	; (800e294 <tcp_input+0x52c>)
 800e0ea:	f240 121f 	movw	r2, #287	; 0x11f
 800e0ee:	496f      	ldr	r1, [pc, #444]	; (800e2ac <tcp_input+0x544>)
 800e0f0:	486a      	ldr	r0, [pc, #424]	; (800e29c <tcp_input+0x534>)
 800e0f2:	f007 f91f 	bl	8015334 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e0f6:	69fb      	ldr	r3, [r7, #28]
 800e0f8:	7a1b      	ldrb	r3, [r3, #8]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d009      	beq.n	800e112 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e0fe:	69fb      	ldr	r3, [r7, #28]
 800e100:	7a1a      	ldrb	r2, [r3, #8]
 800e102:	4b63      	ldr	r3, [pc, #396]	; (800e290 <tcp_input+0x528>)
 800e104:	685b      	ldr	r3, [r3, #4]
 800e106:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e10a:	3301      	adds	r3, #1
 800e10c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e10e:	429a      	cmp	r2, r3
 800e110:	d122      	bne.n	800e158 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e112:	69fb      	ldr	r3, [r7, #28]
 800e114:	8b1a      	ldrh	r2, [r3, #24]
 800e116:	4b5d      	ldr	r3, [pc, #372]	; (800e28c <tcp_input+0x524>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	881b      	ldrh	r3, [r3, #0]
 800e11c:	b29b      	uxth	r3, r3
 800e11e:	429a      	cmp	r2, r3
 800e120:	d11b      	bne.n	800e15a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e122:	69fb      	ldr	r3, [r7, #28]
 800e124:	8ada      	ldrh	r2, [r3, #22]
 800e126:	4b59      	ldr	r3, [pc, #356]	; (800e28c <tcp_input+0x524>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	885b      	ldrh	r3, [r3, #2]
 800e12c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e12e:	429a      	cmp	r2, r3
 800e130:	d113      	bne.n	800e15a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e132:	69fb      	ldr	r3, [r7, #28]
 800e134:	685a      	ldr	r2, [r3, #4]
 800e136:	4b56      	ldr	r3, [pc, #344]	; (800e290 <tcp_input+0x528>)
 800e138:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e13a:	429a      	cmp	r2, r3
 800e13c:	d10d      	bne.n	800e15a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e13e:	69fb      	ldr	r3, [r7, #28]
 800e140:	681a      	ldr	r2, [r3, #0]
 800e142:	4b53      	ldr	r3, [pc, #332]	; (800e290 <tcp_input+0x528>)
 800e144:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e146:	429a      	cmp	r2, r3
 800e148:	d107      	bne.n	800e15a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e14a:	69f8      	ldr	r0, [r7, #28]
 800e14c:	f000 fb54 	bl	800e7f8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800e150:	6878      	ldr	r0, [r7, #4]
 800e152:	f7fd fcc5 	bl	800bae0 <pbuf_free>
        return;
 800e156:	e1f0      	b.n	800e53a <tcp_input+0x7d2>
        continue;
 800e158:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e15a:	69fb      	ldr	r3, [r7, #28]
 800e15c:	68db      	ldr	r3, [r3, #12]
 800e15e:	61fb      	str	r3, [r7, #28]
 800e160:	69fb      	ldr	r3, [r7, #28]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d1bc      	bne.n	800e0e0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e166:	2300      	movs	r3, #0
 800e168:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e16a:	4b51      	ldr	r3, [pc, #324]	; (800e2b0 <tcp_input+0x548>)
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	617b      	str	r3, [r7, #20]
 800e170:	e02a      	b.n	800e1c8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	7a1b      	ldrb	r3, [r3, #8]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d00c      	beq.n	800e194 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	7a1a      	ldrb	r2, [r3, #8]
 800e17e:	4b44      	ldr	r3, [pc, #272]	; (800e290 <tcp_input+0x528>)
 800e180:	685b      	ldr	r3, [r3, #4]
 800e182:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e186:	3301      	adds	r3, #1
 800e188:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e18a:	429a      	cmp	r2, r3
 800e18c:	d002      	beq.n	800e194 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e18e:	697b      	ldr	r3, [r7, #20]
 800e190:	61bb      	str	r3, [r7, #24]
        continue;
 800e192:	e016      	b.n	800e1c2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e194:	697b      	ldr	r3, [r7, #20]
 800e196:	8ada      	ldrh	r2, [r3, #22]
 800e198:	4b3c      	ldr	r3, [pc, #240]	; (800e28c <tcp_input+0x524>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	885b      	ldrh	r3, [r3, #2]
 800e19e:	b29b      	uxth	r3, r3
 800e1a0:	429a      	cmp	r2, r3
 800e1a2:	d10c      	bne.n	800e1be <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e1a4:	697b      	ldr	r3, [r7, #20]
 800e1a6:	681a      	ldr	r2, [r3, #0]
 800e1a8:	4b39      	ldr	r3, [pc, #228]	; (800e290 <tcp_input+0x528>)
 800e1aa:	695b      	ldr	r3, [r3, #20]
 800e1ac:	429a      	cmp	r2, r3
 800e1ae:	d00f      	beq.n	800e1d0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e1b0:	697b      	ldr	r3, [r7, #20]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d00d      	beq.n	800e1d2 <tcp_input+0x46a>
 800e1b6:	697b      	ldr	r3, [r7, #20]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d009      	beq.n	800e1d2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e1be:	697b      	ldr	r3, [r7, #20]
 800e1c0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	68db      	ldr	r3, [r3, #12]
 800e1c6:	617b      	str	r3, [r7, #20]
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d1d1      	bne.n	800e172 <tcp_input+0x40a>
 800e1ce:	e000      	b.n	800e1d2 <tcp_input+0x46a>
            break;
 800e1d0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e1d2:	697b      	ldr	r3, [r7, #20]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d014      	beq.n	800e202 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e1d8:	69bb      	ldr	r3, [r7, #24]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d00a      	beq.n	800e1f4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	68da      	ldr	r2, [r3, #12]
 800e1e2:	69bb      	ldr	r3, [r7, #24]
 800e1e4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e1e6:	4b32      	ldr	r3, [pc, #200]	; (800e2b0 <tcp_input+0x548>)
 800e1e8:	681a      	ldr	r2, [r3, #0]
 800e1ea:	697b      	ldr	r3, [r7, #20]
 800e1ec:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e1ee:	4a30      	ldr	r2, [pc, #192]	; (800e2b0 <tcp_input+0x548>)
 800e1f0:	697b      	ldr	r3, [r7, #20]
 800e1f2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e1f4:	6978      	ldr	r0, [r7, #20]
 800e1f6:	f000 fa01 	bl	800e5fc <tcp_listen_input>
      }
      pbuf_free(p);
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f7fd fc70 	bl	800bae0 <pbuf_free>
      return;
 800e200:	e19b      	b.n	800e53a <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e202:	69fb      	ldr	r3, [r7, #28]
 800e204:	2b00      	cmp	r3, #0
 800e206:	f000 8160 	beq.w	800e4ca <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e20a:	4b2a      	ldr	r3, [pc, #168]	; (800e2b4 <tcp_input+0x54c>)
 800e20c:	2200      	movs	r2, #0
 800e20e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	891a      	ldrh	r2, [r3, #8]
 800e214:	4b27      	ldr	r3, [pc, #156]	; (800e2b4 <tcp_input+0x54c>)
 800e216:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e218:	4a26      	ldr	r2, [pc, #152]	; (800e2b4 <tcp_input+0x54c>)
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e21e:	4b1b      	ldr	r3, [pc, #108]	; (800e28c <tcp_input+0x524>)
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	4a24      	ldr	r2, [pc, #144]	; (800e2b4 <tcp_input+0x54c>)
 800e224:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e226:	4b24      	ldr	r3, [pc, #144]	; (800e2b8 <tcp_input+0x550>)
 800e228:	2200      	movs	r2, #0
 800e22a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e22c:	4b23      	ldr	r3, [pc, #140]	; (800e2bc <tcp_input+0x554>)
 800e22e:	2200      	movs	r2, #0
 800e230:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e232:	4b23      	ldr	r3, [pc, #140]	; (800e2c0 <tcp_input+0x558>)
 800e234:	2200      	movs	r2, #0
 800e236:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e238:	4b22      	ldr	r3, [pc, #136]	; (800e2c4 <tcp_input+0x55c>)
 800e23a:	781b      	ldrb	r3, [r3, #0]
 800e23c:	f003 0308 	and.w	r3, r3, #8
 800e240:	2b00      	cmp	r3, #0
 800e242:	d006      	beq.n	800e252 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	7b5b      	ldrb	r3, [r3, #13]
 800e248:	f043 0301 	orr.w	r3, r3, #1
 800e24c:	b2da      	uxtb	r2, r3
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e252:	69fb      	ldr	r3, [r7, #28]
 800e254:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e256:	2b00      	cmp	r3, #0
 800e258:	d038      	beq.n	800e2cc <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e25a:	69f8      	ldr	r0, [r7, #28]
 800e25c:	f7ff f888 	bl	800d370 <tcp_process_refused_data>
 800e260:	4603      	mov	r3, r0
 800e262:	f113 0f0d 	cmn.w	r3, #13
 800e266:	d007      	beq.n	800e278 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e268:	69fb      	ldr	r3, [r7, #28]
 800e26a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d02d      	beq.n	800e2cc <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e270:	4b15      	ldr	r3, [pc, #84]	; (800e2c8 <tcp_input+0x560>)
 800e272:	881b      	ldrh	r3, [r3, #0]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d029      	beq.n	800e2cc <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e278:	69fb      	ldr	r3, [r7, #28]
 800e27a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	f040 8104 	bne.w	800e48a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e282:	69f8      	ldr	r0, [r7, #28]
 800e284:	f003 fe16 	bl	8011eb4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e288:	e0ff      	b.n	800e48a <tcp_input+0x722>
 800e28a:	bf00      	nop
 800e28c:	200040b0 	.word	0x200040b0
 800e290:	20007404 	.word	0x20007404
 800e294:	080184fc 	.word	0x080184fc
 800e298:	08018628 	.word	0x08018628
 800e29c:	08018548 	.word	0x08018548
 800e2a0:	2000ab18 	.word	0x2000ab18
 800e2a4:	08018654 	.word	0x08018654
 800e2a8:	2000ab28 	.word	0x2000ab28
 800e2ac:	08018680 	.word	0x08018680
 800e2b0:	2000ab20 	.word	0x2000ab20
 800e2b4:	200040a0 	.word	0x200040a0
 800e2b8:	200040d0 	.word	0x200040d0
 800e2bc:	200040cd 	.word	0x200040cd
 800e2c0:	200040c8 	.word	0x200040c8
 800e2c4:	200040cc 	.word	0x200040cc
 800e2c8:	200040ca 	.word	0x200040ca
      }
    }
    tcp_input_pcb = pcb;
 800e2cc:	4a9c      	ldr	r2, [pc, #624]	; (800e540 <tcp_input+0x7d8>)
 800e2ce:	69fb      	ldr	r3, [r7, #28]
 800e2d0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e2d2:	69f8      	ldr	r0, [r7, #28]
 800e2d4:	f000 fb0a 	bl	800e8ec <tcp_process>
 800e2d8:	4603      	mov	r3, r0
 800e2da:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e2dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e2e0:	f113 0f0d 	cmn.w	r3, #13
 800e2e4:	f000 80d3 	beq.w	800e48e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800e2e8:	4b96      	ldr	r3, [pc, #600]	; (800e544 <tcp_input+0x7dc>)
 800e2ea:	781b      	ldrb	r3, [r3, #0]
 800e2ec:	f003 0308 	and.w	r3, r3, #8
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d015      	beq.n	800e320 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e2f4:	69fb      	ldr	r3, [r7, #28]
 800e2f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d008      	beq.n	800e310 <tcp_input+0x5a8>
 800e2fe:	69fb      	ldr	r3, [r7, #28]
 800e300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e304:	69fa      	ldr	r2, [r7, #28]
 800e306:	6912      	ldr	r2, [r2, #16]
 800e308:	f06f 010d 	mvn.w	r1, #13
 800e30c:	4610      	mov	r0, r2
 800e30e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e310:	69f9      	ldr	r1, [r7, #28]
 800e312:	488d      	ldr	r0, [pc, #564]	; (800e548 <tcp_input+0x7e0>)
 800e314:	f7ff fbb0 	bl	800da78 <tcp_pcb_remove>
        tcp_free(pcb);
 800e318:	69f8      	ldr	r0, [r7, #28]
 800e31a:	f7fd fef1 	bl	800c100 <tcp_free>
 800e31e:	e0c1      	b.n	800e4a4 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800e320:	2300      	movs	r3, #0
 800e322:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e324:	4b89      	ldr	r3, [pc, #548]	; (800e54c <tcp_input+0x7e4>)
 800e326:	881b      	ldrh	r3, [r3, #0]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d01d      	beq.n	800e368 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e32c:	4b87      	ldr	r3, [pc, #540]	; (800e54c <tcp_input+0x7e4>)
 800e32e:	881b      	ldrh	r3, [r3, #0]
 800e330:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e332:	69fb      	ldr	r3, [r7, #28]
 800e334:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d00a      	beq.n	800e352 <tcp_input+0x5ea>
 800e33c:	69fb      	ldr	r3, [r7, #28]
 800e33e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e342:	69fa      	ldr	r2, [r7, #28]
 800e344:	6910      	ldr	r0, [r2, #16]
 800e346:	89fa      	ldrh	r2, [r7, #14]
 800e348:	69f9      	ldr	r1, [r7, #28]
 800e34a:	4798      	blx	r3
 800e34c:	4603      	mov	r3, r0
 800e34e:	74fb      	strb	r3, [r7, #19]
 800e350:	e001      	b.n	800e356 <tcp_input+0x5ee>
 800e352:	2300      	movs	r3, #0
 800e354:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e356:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e35a:	f113 0f0d 	cmn.w	r3, #13
 800e35e:	f000 8098 	beq.w	800e492 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e362:	4b7a      	ldr	r3, [pc, #488]	; (800e54c <tcp_input+0x7e4>)
 800e364:	2200      	movs	r2, #0
 800e366:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e368:	69f8      	ldr	r0, [r7, #28]
 800e36a:	f000 f907 	bl	800e57c <tcp_input_delayed_close>
 800e36e:	4603      	mov	r3, r0
 800e370:	2b00      	cmp	r3, #0
 800e372:	f040 8090 	bne.w	800e496 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e376:	4b76      	ldr	r3, [pc, #472]	; (800e550 <tcp_input+0x7e8>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d041      	beq.n	800e402 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e37e:	69fb      	ldr	r3, [r7, #28]
 800e380:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e382:	2b00      	cmp	r3, #0
 800e384:	d006      	beq.n	800e394 <tcp_input+0x62c>
 800e386:	4b73      	ldr	r3, [pc, #460]	; (800e554 <tcp_input+0x7ec>)
 800e388:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e38c:	4972      	ldr	r1, [pc, #456]	; (800e558 <tcp_input+0x7f0>)
 800e38e:	4873      	ldr	r0, [pc, #460]	; (800e55c <tcp_input+0x7f4>)
 800e390:	f006 ffd0 	bl	8015334 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e394:	69fb      	ldr	r3, [r7, #28]
 800e396:	8b5b      	ldrh	r3, [r3, #26]
 800e398:	f003 0310 	and.w	r3, r3, #16
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d008      	beq.n	800e3b2 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e3a0:	4b6b      	ldr	r3, [pc, #428]	; (800e550 <tcp_input+0x7e8>)
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f7fd fb9b 	bl	800bae0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e3aa:	69f8      	ldr	r0, [r7, #28]
 800e3ac:	f7fe f990 	bl	800c6d0 <tcp_abort>
            goto aborted;
 800e3b0:	e078      	b.n	800e4a4 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e3b2:	69fb      	ldr	r3, [r7, #28]
 800e3b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d00c      	beq.n	800e3d6 <tcp_input+0x66e>
 800e3bc:	69fb      	ldr	r3, [r7, #28]
 800e3be:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e3c2:	69fb      	ldr	r3, [r7, #28]
 800e3c4:	6918      	ldr	r0, [r3, #16]
 800e3c6:	4b62      	ldr	r3, [pc, #392]	; (800e550 <tcp_input+0x7e8>)
 800e3c8:	681a      	ldr	r2, [r3, #0]
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	69f9      	ldr	r1, [r7, #28]
 800e3ce:	47a0      	blx	r4
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	74fb      	strb	r3, [r7, #19]
 800e3d4:	e008      	b.n	800e3e8 <tcp_input+0x680>
 800e3d6:	4b5e      	ldr	r3, [pc, #376]	; (800e550 <tcp_input+0x7e8>)
 800e3d8:	681a      	ldr	r2, [r3, #0]
 800e3da:	2300      	movs	r3, #0
 800e3dc:	69f9      	ldr	r1, [r7, #28]
 800e3de:	2000      	movs	r0, #0
 800e3e0:	f7ff f89c 	bl	800d51c <tcp_recv_null>
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e3e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e3ec:	f113 0f0d 	cmn.w	r3, #13
 800e3f0:	d053      	beq.n	800e49a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e3f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d003      	beq.n	800e402 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e3fa:	4b55      	ldr	r3, [pc, #340]	; (800e550 <tcp_input+0x7e8>)
 800e3fc:	681a      	ldr	r2, [r3, #0]
 800e3fe:	69fb      	ldr	r3, [r7, #28]
 800e400:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e402:	4b50      	ldr	r3, [pc, #320]	; (800e544 <tcp_input+0x7dc>)
 800e404:	781b      	ldrb	r3, [r3, #0]
 800e406:	f003 0320 	and.w	r3, r3, #32
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d030      	beq.n	800e470 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800e40e:	69fb      	ldr	r3, [r7, #28]
 800e410:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e412:	2b00      	cmp	r3, #0
 800e414:	d009      	beq.n	800e42a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e416:	69fb      	ldr	r3, [r7, #28]
 800e418:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e41a:	7b5a      	ldrb	r2, [r3, #13]
 800e41c:	69fb      	ldr	r3, [r7, #28]
 800e41e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e420:	f042 0220 	orr.w	r2, r2, #32
 800e424:	b2d2      	uxtb	r2, r2
 800e426:	735a      	strb	r2, [r3, #13]
 800e428:	e022      	b.n	800e470 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e42a:	69fb      	ldr	r3, [r7, #28]
 800e42c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e42e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e432:	d005      	beq.n	800e440 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800e434:	69fb      	ldr	r3, [r7, #28]
 800e436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e438:	3301      	adds	r3, #1
 800e43a:	b29a      	uxth	r2, r3
 800e43c:	69fb      	ldr	r3, [r7, #28]
 800e43e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e440:	69fb      	ldr	r3, [r7, #28]
 800e442:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e446:	2b00      	cmp	r3, #0
 800e448:	d00b      	beq.n	800e462 <tcp_input+0x6fa>
 800e44a:	69fb      	ldr	r3, [r7, #28]
 800e44c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e450:	69fb      	ldr	r3, [r7, #28]
 800e452:	6918      	ldr	r0, [r3, #16]
 800e454:	2300      	movs	r3, #0
 800e456:	2200      	movs	r2, #0
 800e458:	69f9      	ldr	r1, [r7, #28]
 800e45a:	47a0      	blx	r4
 800e45c:	4603      	mov	r3, r0
 800e45e:	74fb      	strb	r3, [r7, #19]
 800e460:	e001      	b.n	800e466 <tcp_input+0x6fe>
 800e462:	2300      	movs	r3, #0
 800e464:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e466:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e46a:	f113 0f0d 	cmn.w	r3, #13
 800e46e:	d016      	beq.n	800e49e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e470:	4b33      	ldr	r3, [pc, #204]	; (800e540 <tcp_input+0x7d8>)
 800e472:	2200      	movs	r2, #0
 800e474:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e476:	69f8      	ldr	r0, [r7, #28]
 800e478:	f000 f880 	bl	800e57c <tcp_input_delayed_close>
 800e47c:	4603      	mov	r3, r0
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d10f      	bne.n	800e4a2 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e482:	69f8      	ldr	r0, [r7, #28]
 800e484:	f002 ff10 	bl	80112a8 <tcp_output>
 800e488:	e00c      	b.n	800e4a4 <tcp_input+0x73c>
        goto aborted;
 800e48a:	bf00      	nop
 800e48c:	e00a      	b.n	800e4a4 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e48e:	bf00      	nop
 800e490:	e008      	b.n	800e4a4 <tcp_input+0x73c>
              goto aborted;
 800e492:	bf00      	nop
 800e494:	e006      	b.n	800e4a4 <tcp_input+0x73c>
          goto aborted;
 800e496:	bf00      	nop
 800e498:	e004      	b.n	800e4a4 <tcp_input+0x73c>
            goto aborted;
 800e49a:	bf00      	nop
 800e49c:	e002      	b.n	800e4a4 <tcp_input+0x73c>
              goto aborted;
 800e49e:	bf00      	nop
 800e4a0:	e000      	b.n	800e4a4 <tcp_input+0x73c>
          goto aborted;
 800e4a2:	bf00      	nop
    tcp_input_pcb = NULL;
 800e4a4:	4b26      	ldr	r3, [pc, #152]	; (800e540 <tcp_input+0x7d8>)
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e4aa:	4b29      	ldr	r3, [pc, #164]	; (800e550 <tcp_input+0x7e8>)
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e4b0:	4b2b      	ldr	r3, [pc, #172]	; (800e560 <tcp_input+0x7f8>)
 800e4b2:	685b      	ldr	r3, [r3, #4]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d03f      	beq.n	800e538 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800e4b8:	4b29      	ldr	r3, [pc, #164]	; (800e560 <tcp_input+0x7f8>)
 800e4ba:	685b      	ldr	r3, [r3, #4]
 800e4bc:	4618      	mov	r0, r3
 800e4be:	f7fd fb0f 	bl	800bae0 <pbuf_free>
      inseg.p = NULL;
 800e4c2:	4b27      	ldr	r3, [pc, #156]	; (800e560 <tcp_input+0x7f8>)
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e4c8:	e036      	b.n	800e538 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e4ca:	4b26      	ldr	r3, [pc, #152]	; (800e564 <tcp_input+0x7fc>)
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	899b      	ldrh	r3, [r3, #12]
 800e4d0:	b29b      	uxth	r3, r3
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	f7fb ff30 	bl	800a338 <lwip_htons>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	b2db      	uxtb	r3, r3
 800e4dc:	f003 0304 	and.w	r3, r3, #4
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d118      	bne.n	800e516 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e4e4:	4b20      	ldr	r3, [pc, #128]	; (800e568 <tcp_input+0x800>)
 800e4e6:	6819      	ldr	r1, [r3, #0]
 800e4e8:	4b20      	ldr	r3, [pc, #128]	; (800e56c <tcp_input+0x804>)
 800e4ea:	881b      	ldrh	r3, [r3, #0]
 800e4ec:	461a      	mov	r2, r3
 800e4ee:	4b20      	ldr	r3, [pc, #128]	; (800e570 <tcp_input+0x808>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e4f4:	4b1b      	ldr	r3, [pc, #108]	; (800e564 <tcp_input+0x7fc>)
 800e4f6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e4f8:	885b      	ldrh	r3, [r3, #2]
 800e4fa:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e4fc:	4a19      	ldr	r2, [pc, #100]	; (800e564 <tcp_input+0x7fc>)
 800e4fe:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e500:	8812      	ldrh	r2, [r2, #0]
 800e502:	b292      	uxth	r2, r2
 800e504:	9202      	str	r2, [sp, #8]
 800e506:	9301      	str	r3, [sp, #4]
 800e508:	4b1a      	ldr	r3, [pc, #104]	; (800e574 <tcp_input+0x80c>)
 800e50a:	9300      	str	r3, [sp, #0]
 800e50c:	4b1a      	ldr	r3, [pc, #104]	; (800e578 <tcp_input+0x810>)
 800e50e:	4602      	mov	r2, r0
 800e510:	2000      	movs	r0, #0
 800e512:	f003 fc7d 	bl	8011e10 <tcp_rst>
    pbuf_free(p);
 800e516:	6878      	ldr	r0, [r7, #4]
 800e518:	f7fd fae2 	bl	800bae0 <pbuf_free>
  return;
 800e51c:	e00c      	b.n	800e538 <tcp_input+0x7d0>
    goto dropped;
 800e51e:	bf00      	nop
 800e520:	e006      	b.n	800e530 <tcp_input+0x7c8>
    goto dropped;
 800e522:	bf00      	nop
 800e524:	e004      	b.n	800e530 <tcp_input+0x7c8>
    goto dropped;
 800e526:	bf00      	nop
 800e528:	e002      	b.n	800e530 <tcp_input+0x7c8>
      goto dropped;
 800e52a:	bf00      	nop
 800e52c:	e000      	b.n	800e530 <tcp_input+0x7c8>
      goto dropped;
 800e52e:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e530:	6878      	ldr	r0, [r7, #4]
 800e532:	f7fd fad5 	bl	800bae0 <pbuf_free>
 800e536:	e000      	b.n	800e53a <tcp_input+0x7d2>
  return;
 800e538:	bf00      	nop
}
 800e53a:	3724      	adds	r7, #36	; 0x24
 800e53c:	46bd      	mov	sp, r7
 800e53e:	bd90      	pop	{r4, r7, pc}
 800e540:	2000ab2c 	.word	0x2000ab2c
 800e544:	200040cd 	.word	0x200040cd
 800e548:	2000ab18 	.word	0x2000ab18
 800e54c:	200040c8 	.word	0x200040c8
 800e550:	200040d0 	.word	0x200040d0
 800e554:	080184fc 	.word	0x080184fc
 800e558:	080186b0 	.word	0x080186b0
 800e55c:	08018548 	.word	0x08018548
 800e560:	200040a0 	.word	0x200040a0
 800e564:	200040b0 	.word	0x200040b0
 800e568:	200040c4 	.word	0x200040c4
 800e56c:	200040ca 	.word	0x200040ca
 800e570:	200040c0 	.word	0x200040c0
 800e574:	20007414 	.word	0x20007414
 800e578:	20007418 	.word	0x20007418

0800e57c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b082      	sub	sp, #8
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d106      	bne.n	800e598 <tcp_input_delayed_close+0x1c>
 800e58a:	4b17      	ldr	r3, [pc, #92]	; (800e5e8 <tcp_input_delayed_close+0x6c>)
 800e58c:	f240 225a 	movw	r2, #602	; 0x25a
 800e590:	4916      	ldr	r1, [pc, #88]	; (800e5ec <tcp_input_delayed_close+0x70>)
 800e592:	4817      	ldr	r0, [pc, #92]	; (800e5f0 <tcp_input_delayed_close+0x74>)
 800e594:	f006 fece 	bl	8015334 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e598:	4b16      	ldr	r3, [pc, #88]	; (800e5f4 <tcp_input_delayed_close+0x78>)
 800e59a:	781b      	ldrb	r3, [r3, #0]
 800e59c:	f003 0310 	and.w	r3, r3, #16
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d01c      	beq.n	800e5de <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	8b5b      	ldrh	r3, [r3, #26]
 800e5a8:	f003 0310 	and.w	r3, r3, #16
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d10d      	bne.n	800e5cc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d008      	beq.n	800e5cc <tcp_input_delayed_close+0x50>
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5c0:	687a      	ldr	r2, [r7, #4]
 800e5c2:	6912      	ldr	r2, [r2, #16]
 800e5c4:	f06f 010e 	mvn.w	r1, #14
 800e5c8:	4610      	mov	r0, r2
 800e5ca:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e5cc:	6879      	ldr	r1, [r7, #4]
 800e5ce:	480a      	ldr	r0, [pc, #40]	; (800e5f8 <tcp_input_delayed_close+0x7c>)
 800e5d0:	f7ff fa52 	bl	800da78 <tcp_pcb_remove>
    tcp_free(pcb);
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f7fd fd93 	bl	800c100 <tcp_free>
    return 1;
 800e5da:	2301      	movs	r3, #1
 800e5dc:	e000      	b.n	800e5e0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e5de:	2300      	movs	r3, #0
}
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	3708      	adds	r7, #8
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd80      	pop	{r7, pc}
 800e5e8:	080184fc 	.word	0x080184fc
 800e5ec:	080186cc 	.word	0x080186cc
 800e5f0:	08018548 	.word	0x08018548
 800e5f4:	200040cd 	.word	0x200040cd
 800e5f8:	2000ab18 	.word	0x2000ab18

0800e5fc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e5fc:	b590      	push	{r4, r7, lr}
 800e5fe:	b08b      	sub	sp, #44	; 0x2c
 800e600:	af04      	add	r7, sp, #16
 800e602:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e604:	4b6f      	ldr	r3, [pc, #444]	; (800e7c4 <tcp_listen_input+0x1c8>)
 800e606:	781b      	ldrb	r3, [r3, #0]
 800e608:	f003 0304 	and.w	r3, r3, #4
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	f040 80d2 	bne.w	800e7b6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d106      	bne.n	800e626 <tcp_listen_input+0x2a>
 800e618:	4b6b      	ldr	r3, [pc, #428]	; (800e7c8 <tcp_listen_input+0x1cc>)
 800e61a:	f240 2281 	movw	r2, #641	; 0x281
 800e61e:	496b      	ldr	r1, [pc, #428]	; (800e7cc <tcp_listen_input+0x1d0>)
 800e620:	486b      	ldr	r0, [pc, #428]	; (800e7d0 <tcp_listen_input+0x1d4>)
 800e622:	f006 fe87 	bl	8015334 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e626:	4b67      	ldr	r3, [pc, #412]	; (800e7c4 <tcp_listen_input+0x1c8>)
 800e628:	781b      	ldrb	r3, [r3, #0]
 800e62a:	f003 0310 	and.w	r3, r3, #16
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d019      	beq.n	800e666 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e632:	4b68      	ldr	r3, [pc, #416]	; (800e7d4 <tcp_listen_input+0x1d8>)
 800e634:	6819      	ldr	r1, [r3, #0]
 800e636:	4b68      	ldr	r3, [pc, #416]	; (800e7d8 <tcp_listen_input+0x1dc>)
 800e638:	881b      	ldrh	r3, [r3, #0]
 800e63a:	461a      	mov	r2, r3
 800e63c:	4b67      	ldr	r3, [pc, #412]	; (800e7dc <tcp_listen_input+0x1e0>)
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e642:	4b67      	ldr	r3, [pc, #412]	; (800e7e0 <tcp_listen_input+0x1e4>)
 800e644:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e646:	885b      	ldrh	r3, [r3, #2]
 800e648:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e64a:	4a65      	ldr	r2, [pc, #404]	; (800e7e0 <tcp_listen_input+0x1e4>)
 800e64c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e64e:	8812      	ldrh	r2, [r2, #0]
 800e650:	b292      	uxth	r2, r2
 800e652:	9202      	str	r2, [sp, #8]
 800e654:	9301      	str	r3, [sp, #4]
 800e656:	4b63      	ldr	r3, [pc, #396]	; (800e7e4 <tcp_listen_input+0x1e8>)
 800e658:	9300      	str	r3, [sp, #0]
 800e65a:	4b63      	ldr	r3, [pc, #396]	; (800e7e8 <tcp_listen_input+0x1ec>)
 800e65c:	4602      	mov	r2, r0
 800e65e:	6878      	ldr	r0, [r7, #4]
 800e660:	f003 fbd6 	bl	8011e10 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e664:	e0a9      	b.n	800e7ba <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e666:	4b57      	ldr	r3, [pc, #348]	; (800e7c4 <tcp_listen_input+0x1c8>)
 800e668:	781b      	ldrb	r3, [r3, #0]
 800e66a:	f003 0302 	and.w	r3, r3, #2
 800e66e:	2b00      	cmp	r3, #0
 800e670:	f000 80a3 	beq.w	800e7ba <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	7d5b      	ldrb	r3, [r3, #21]
 800e678:	4618      	mov	r0, r3
 800e67a:	f7ff f873 	bl	800d764 <tcp_alloc>
 800e67e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d111      	bne.n	800e6aa <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	699b      	ldr	r3, [r3, #24]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d00a      	beq.n	800e6a4 <tcp_listen_input+0xa8>
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	699b      	ldr	r3, [r3, #24]
 800e692:	687a      	ldr	r2, [r7, #4]
 800e694:	6910      	ldr	r0, [r2, #16]
 800e696:	f04f 32ff 	mov.w	r2, #4294967295
 800e69a:	2100      	movs	r1, #0
 800e69c:	4798      	blx	r3
 800e69e:	4603      	mov	r3, r0
 800e6a0:	73bb      	strb	r3, [r7, #14]
      return;
 800e6a2:	e08b      	b.n	800e7bc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e6a4:	23f0      	movs	r3, #240	; 0xf0
 800e6a6:	73bb      	strb	r3, [r7, #14]
      return;
 800e6a8:	e088      	b.n	800e7bc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e6aa:	4b50      	ldr	r3, [pc, #320]	; (800e7ec <tcp_listen_input+0x1f0>)
 800e6ac:	695a      	ldr	r2, [r3, #20]
 800e6ae:	697b      	ldr	r3, [r7, #20]
 800e6b0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e6b2:	4b4e      	ldr	r3, [pc, #312]	; (800e7ec <tcp_listen_input+0x1f0>)
 800e6b4:	691a      	ldr	r2, [r3, #16]
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	8ada      	ldrh	r2, [r3, #22]
 800e6be:	697b      	ldr	r3, [r7, #20]
 800e6c0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e6c2:	4b47      	ldr	r3, [pc, #284]	; (800e7e0 <tcp_listen_input+0x1e4>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	881b      	ldrh	r3, [r3, #0]
 800e6c8:	b29a      	uxth	r2, r3
 800e6ca:	697b      	ldr	r3, [r7, #20]
 800e6cc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e6ce:	697b      	ldr	r3, [r7, #20]
 800e6d0:	2203      	movs	r2, #3
 800e6d2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e6d4:	4b41      	ldr	r3, [pc, #260]	; (800e7dc <tcp_listen_input+0x1e0>)
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	1c5a      	adds	r2, r3, #1
 800e6da:	697b      	ldr	r3, [r7, #20]
 800e6dc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e6de:	697b      	ldr	r3, [r7, #20]
 800e6e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e6e2:	697b      	ldr	r3, [r7, #20]
 800e6e4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e6e6:	6978      	ldr	r0, [r7, #20]
 800e6e8:	f7ff fa5a 	bl	800dba0 <tcp_next_iss>
 800e6ec:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e6ee:	697b      	ldr	r3, [r7, #20]
 800e6f0:	693a      	ldr	r2, [r7, #16]
 800e6f2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e6f4:	697b      	ldr	r3, [r7, #20]
 800e6f6:	693a      	ldr	r2, [r7, #16]
 800e6f8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e6fa:	697b      	ldr	r3, [r7, #20]
 800e6fc:	693a      	ldr	r2, [r7, #16]
 800e6fe:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e700:	697b      	ldr	r3, [r7, #20]
 800e702:	693a      	ldr	r2, [r7, #16]
 800e704:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e706:	4b35      	ldr	r3, [pc, #212]	; (800e7dc <tcp_listen_input+0x1e0>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	1e5a      	subs	r2, r3, #1
 800e70c:	697b      	ldr	r3, [r7, #20]
 800e70e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	691a      	ldr	r2, [r3, #16]
 800e714:	697b      	ldr	r3, [r7, #20]
 800e716:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e718:	697b      	ldr	r3, [r7, #20]
 800e71a:	687a      	ldr	r2, [r7, #4]
 800e71c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	7a5b      	ldrb	r3, [r3, #9]
 800e722:	f003 030c 	and.w	r3, r3, #12
 800e726:	b2da      	uxtb	r2, r3
 800e728:	697b      	ldr	r3, [r7, #20]
 800e72a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	7a1a      	ldrb	r2, [r3, #8]
 800e730:	697b      	ldr	r3, [r7, #20]
 800e732:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e734:	4b2e      	ldr	r3, [pc, #184]	; (800e7f0 <tcp_listen_input+0x1f4>)
 800e736:	681a      	ldr	r2, [r3, #0]
 800e738:	697b      	ldr	r3, [r7, #20]
 800e73a:	60da      	str	r2, [r3, #12]
 800e73c:	4a2c      	ldr	r2, [pc, #176]	; (800e7f0 <tcp_listen_input+0x1f4>)
 800e73e:	697b      	ldr	r3, [r7, #20]
 800e740:	6013      	str	r3, [r2, #0]
 800e742:	f003 fd27 	bl	8012194 <tcp_timer_needed>
 800e746:	4b2b      	ldr	r3, [pc, #172]	; (800e7f4 <tcp_listen_input+0x1f8>)
 800e748:	2201      	movs	r2, #1
 800e74a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e74c:	6978      	ldr	r0, [r7, #20]
 800e74e:	f001 fd8d 	bl	801026c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e752:	4b23      	ldr	r3, [pc, #140]	; (800e7e0 <tcp_listen_input+0x1e4>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	89db      	ldrh	r3, [r3, #14]
 800e758:	b29a      	uxth	r2, r3
 800e75a:	697b      	ldr	r3, [r7, #20]
 800e75c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e760:	697b      	ldr	r3, [r7, #20]
 800e762:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e766:	697b      	ldr	r3, [r7, #20]
 800e768:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e76c:	697b      	ldr	r3, [r7, #20]
 800e76e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e770:	697b      	ldr	r3, [r7, #20]
 800e772:	3304      	adds	r3, #4
 800e774:	4618      	mov	r0, r3
 800e776:	f005 f955 	bl	8013a24 <ip4_route>
 800e77a:	4601      	mov	r1, r0
 800e77c:	697b      	ldr	r3, [r7, #20]
 800e77e:	3304      	adds	r3, #4
 800e780:	461a      	mov	r2, r3
 800e782:	4620      	mov	r0, r4
 800e784:	f7ff fa32 	bl	800dbec <tcp_eff_send_mss_netif>
 800e788:	4603      	mov	r3, r0
 800e78a:	461a      	mov	r2, r3
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e790:	2112      	movs	r1, #18
 800e792:	6978      	ldr	r0, [r7, #20]
 800e794:	f002 fc9a 	bl	80110cc <tcp_enqueue_flags>
 800e798:	4603      	mov	r3, r0
 800e79a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e79c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d004      	beq.n	800e7ae <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e7a4:	2100      	movs	r1, #0
 800e7a6:	6978      	ldr	r0, [r7, #20]
 800e7a8:	f7fd fed4 	bl	800c554 <tcp_abandon>
      return;
 800e7ac:	e006      	b.n	800e7bc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e7ae:	6978      	ldr	r0, [r7, #20]
 800e7b0:	f002 fd7a 	bl	80112a8 <tcp_output>
  return;
 800e7b4:	e001      	b.n	800e7ba <tcp_listen_input+0x1be>
    return;
 800e7b6:	bf00      	nop
 800e7b8:	e000      	b.n	800e7bc <tcp_listen_input+0x1c0>
  return;
 800e7ba:	bf00      	nop
}
 800e7bc:	371c      	adds	r7, #28
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd90      	pop	{r4, r7, pc}
 800e7c2:	bf00      	nop
 800e7c4:	200040cc 	.word	0x200040cc
 800e7c8:	080184fc 	.word	0x080184fc
 800e7cc:	080186f4 	.word	0x080186f4
 800e7d0:	08018548 	.word	0x08018548
 800e7d4:	200040c4 	.word	0x200040c4
 800e7d8:	200040ca 	.word	0x200040ca
 800e7dc:	200040c0 	.word	0x200040c0
 800e7e0:	200040b0 	.word	0x200040b0
 800e7e4:	20007414 	.word	0x20007414
 800e7e8:	20007418 	.word	0x20007418
 800e7ec:	20007404 	.word	0x20007404
 800e7f0:	2000ab18 	.word	0x2000ab18
 800e7f4:	2000ab14 	.word	0x2000ab14

0800e7f8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b086      	sub	sp, #24
 800e7fc:	af04      	add	r7, sp, #16
 800e7fe:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e800:	4b2f      	ldr	r3, [pc, #188]	; (800e8c0 <tcp_timewait_input+0xc8>)
 800e802:	781b      	ldrb	r3, [r3, #0]
 800e804:	f003 0304 	and.w	r3, r3, #4
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d153      	bne.n	800e8b4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d106      	bne.n	800e820 <tcp_timewait_input+0x28>
 800e812:	4b2c      	ldr	r3, [pc, #176]	; (800e8c4 <tcp_timewait_input+0xcc>)
 800e814:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e818:	492b      	ldr	r1, [pc, #172]	; (800e8c8 <tcp_timewait_input+0xd0>)
 800e81a:	482c      	ldr	r0, [pc, #176]	; (800e8cc <tcp_timewait_input+0xd4>)
 800e81c:	f006 fd8a 	bl	8015334 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e820:	4b27      	ldr	r3, [pc, #156]	; (800e8c0 <tcp_timewait_input+0xc8>)
 800e822:	781b      	ldrb	r3, [r3, #0]
 800e824:	f003 0302 	and.w	r3, r3, #2
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d02a      	beq.n	800e882 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e82c:	4b28      	ldr	r3, [pc, #160]	; (800e8d0 <tcp_timewait_input+0xd8>)
 800e82e:	681a      	ldr	r2, [r3, #0]
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e834:	1ad3      	subs	r3, r2, r3
 800e836:	2b00      	cmp	r3, #0
 800e838:	db2d      	blt.n	800e896 <tcp_timewait_input+0x9e>
 800e83a:	4b25      	ldr	r3, [pc, #148]	; (800e8d0 <tcp_timewait_input+0xd8>)
 800e83c:	681a      	ldr	r2, [r3, #0]
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e842:	6879      	ldr	r1, [r7, #4]
 800e844:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e846:	440b      	add	r3, r1
 800e848:	1ad3      	subs	r3, r2, r3
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	dc23      	bgt.n	800e896 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e84e:	4b21      	ldr	r3, [pc, #132]	; (800e8d4 <tcp_timewait_input+0xdc>)
 800e850:	6819      	ldr	r1, [r3, #0]
 800e852:	4b21      	ldr	r3, [pc, #132]	; (800e8d8 <tcp_timewait_input+0xe0>)
 800e854:	881b      	ldrh	r3, [r3, #0]
 800e856:	461a      	mov	r2, r3
 800e858:	4b1d      	ldr	r3, [pc, #116]	; (800e8d0 <tcp_timewait_input+0xd8>)
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e85e:	4b1f      	ldr	r3, [pc, #124]	; (800e8dc <tcp_timewait_input+0xe4>)
 800e860:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e862:	885b      	ldrh	r3, [r3, #2]
 800e864:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e866:	4a1d      	ldr	r2, [pc, #116]	; (800e8dc <tcp_timewait_input+0xe4>)
 800e868:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e86a:	8812      	ldrh	r2, [r2, #0]
 800e86c:	b292      	uxth	r2, r2
 800e86e:	9202      	str	r2, [sp, #8]
 800e870:	9301      	str	r3, [sp, #4]
 800e872:	4b1b      	ldr	r3, [pc, #108]	; (800e8e0 <tcp_timewait_input+0xe8>)
 800e874:	9300      	str	r3, [sp, #0]
 800e876:	4b1b      	ldr	r3, [pc, #108]	; (800e8e4 <tcp_timewait_input+0xec>)
 800e878:	4602      	mov	r2, r0
 800e87a:	6878      	ldr	r0, [r7, #4]
 800e87c:	f003 fac8 	bl	8011e10 <tcp_rst>
      return;
 800e880:	e01b      	b.n	800e8ba <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e882:	4b0f      	ldr	r3, [pc, #60]	; (800e8c0 <tcp_timewait_input+0xc8>)
 800e884:	781b      	ldrb	r3, [r3, #0]
 800e886:	f003 0301 	and.w	r3, r3, #1
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d003      	beq.n	800e896 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e88e:	4b16      	ldr	r3, [pc, #88]	; (800e8e8 <tcp_timewait_input+0xf0>)
 800e890:	681a      	ldr	r2, [r3, #0]
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e896:	4b10      	ldr	r3, [pc, #64]	; (800e8d8 <tcp_timewait_input+0xe0>)
 800e898:	881b      	ldrh	r3, [r3, #0]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d00c      	beq.n	800e8b8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	8b5b      	ldrh	r3, [r3, #26]
 800e8a2:	f043 0302 	orr.w	r3, r3, #2
 800e8a6:	b29a      	uxth	r2, r3
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e8ac:	6878      	ldr	r0, [r7, #4]
 800e8ae:	f002 fcfb 	bl	80112a8 <tcp_output>
  }
  return;
 800e8b2:	e001      	b.n	800e8b8 <tcp_timewait_input+0xc0>
    return;
 800e8b4:	bf00      	nop
 800e8b6:	e000      	b.n	800e8ba <tcp_timewait_input+0xc2>
  return;
 800e8b8:	bf00      	nop
}
 800e8ba:	3708      	adds	r7, #8
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}
 800e8c0:	200040cc 	.word	0x200040cc
 800e8c4:	080184fc 	.word	0x080184fc
 800e8c8:	08018714 	.word	0x08018714
 800e8cc:	08018548 	.word	0x08018548
 800e8d0:	200040c0 	.word	0x200040c0
 800e8d4:	200040c4 	.word	0x200040c4
 800e8d8:	200040ca 	.word	0x200040ca
 800e8dc:	200040b0 	.word	0x200040b0
 800e8e0:	20007414 	.word	0x20007414
 800e8e4:	20007418 	.word	0x20007418
 800e8e8:	2000ab1c 	.word	0x2000ab1c

0800e8ec <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e8ec:	b590      	push	{r4, r7, lr}
 800e8ee:	b08d      	sub	sp, #52	; 0x34
 800e8f0:	af04      	add	r7, sp, #16
 800e8f2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d106      	bne.n	800e910 <tcp_process+0x24>
 800e902:	4ba5      	ldr	r3, [pc, #660]	; (800eb98 <tcp_process+0x2ac>)
 800e904:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e908:	49a4      	ldr	r1, [pc, #656]	; (800eb9c <tcp_process+0x2b0>)
 800e90a:	48a5      	ldr	r0, [pc, #660]	; (800eba0 <tcp_process+0x2b4>)
 800e90c:	f006 fd12 	bl	8015334 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e910:	4ba4      	ldr	r3, [pc, #656]	; (800eba4 <tcp_process+0x2b8>)
 800e912:	781b      	ldrb	r3, [r3, #0]
 800e914:	f003 0304 	and.w	r3, r3, #4
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d04e      	beq.n	800e9ba <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	7d1b      	ldrb	r3, [r3, #20]
 800e920:	2b02      	cmp	r3, #2
 800e922:	d108      	bne.n	800e936 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e928:	4b9f      	ldr	r3, [pc, #636]	; (800eba8 <tcp_process+0x2bc>)
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	429a      	cmp	r2, r3
 800e92e:	d123      	bne.n	800e978 <tcp_process+0x8c>
        acceptable = 1;
 800e930:	2301      	movs	r3, #1
 800e932:	76fb      	strb	r3, [r7, #27]
 800e934:	e020      	b.n	800e978 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e93a:	4b9c      	ldr	r3, [pc, #624]	; (800ebac <tcp_process+0x2c0>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	429a      	cmp	r2, r3
 800e940:	d102      	bne.n	800e948 <tcp_process+0x5c>
        acceptable = 1;
 800e942:	2301      	movs	r3, #1
 800e944:	76fb      	strb	r3, [r7, #27]
 800e946:	e017      	b.n	800e978 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e948:	4b98      	ldr	r3, [pc, #608]	; (800ebac <tcp_process+0x2c0>)
 800e94a:	681a      	ldr	r2, [r3, #0]
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e950:	1ad3      	subs	r3, r2, r3
 800e952:	2b00      	cmp	r3, #0
 800e954:	db10      	blt.n	800e978 <tcp_process+0x8c>
 800e956:	4b95      	ldr	r3, [pc, #596]	; (800ebac <tcp_process+0x2c0>)
 800e958:	681a      	ldr	r2, [r3, #0]
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e95e:	6879      	ldr	r1, [r7, #4]
 800e960:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e962:	440b      	add	r3, r1
 800e964:	1ad3      	subs	r3, r2, r3
 800e966:	2b00      	cmp	r3, #0
 800e968:	dc06      	bgt.n	800e978 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	8b5b      	ldrh	r3, [r3, #26]
 800e96e:	f043 0302 	orr.w	r3, r3, #2
 800e972:	b29a      	uxth	r2, r3
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e978:	7efb      	ldrb	r3, [r7, #27]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d01b      	beq.n	800e9b6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	7d1b      	ldrb	r3, [r3, #20]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d106      	bne.n	800e994 <tcp_process+0xa8>
 800e986:	4b84      	ldr	r3, [pc, #528]	; (800eb98 <tcp_process+0x2ac>)
 800e988:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e98c:	4988      	ldr	r1, [pc, #544]	; (800ebb0 <tcp_process+0x2c4>)
 800e98e:	4884      	ldr	r0, [pc, #528]	; (800eba0 <tcp_process+0x2b4>)
 800e990:	f006 fcd0 	bl	8015334 <iprintf>
      recv_flags |= TF_RESET;
 800e994:	4b87      	ldr	r3, [pc, #540]	; (800ebb4 <tcp_process+0x2c8>)
 800e996:	781b      	ldrb	r3, [r3, #0]
 800e998:	f043 0308 	orr.w	r3, r3, #8
 800e99c:	b2da      	uxtb	r2, r3
 800e99e:	4b85      	ldr	r3, [pc, #532]	; (800ebb4 <tcp_process+0x2c8>)
 800e9a0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	8b5b      	ldrh	r3, [r3, #26]
 800e9a6:	f023 0301 	bic.w	r3, r3, #1
 800e9aa:	b29a      	uxth	r2, r3
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e9b0:	f06f 030d 	mvn.w	r3, #13
 800e9b4:	e37a      	b.n	800f0ac <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	e378      	b.n	800f0ac <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e9ba:	4b7a      	ldr	r3, [pc, #488]	; (800eba4 <tcp_process+0x2b8>)
 800e9bc:	781b      	ldrb	r3, [r3, #0]
 800e9be:	f003 0302 	and.w	r3, r3, #2
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d010      	beq.n	800e9e8 <tcp_process+0xfc>
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	7d1b      	ldrb	r3, [r3, #20]
 800e9ca:	2b02      	cmp	r3, #2
 800e9cc:	d00c      	beq.n	800e9e8 <tcp_process+0xfc>
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	7d1b      	ldrb	r3, [r3, #20]
 800e9d2:	2b03      	cmp	r3, #3
 800e9d4:	d008      	beq.n	800e9e8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	8b5b      	ldrh	r3, [r3, #26]
 800e9da:	f043 0302 	orr.w	r3, r3, #2
 800e9de:	b29a      	uxth	r2, r3
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	e361      	b.n	800f0ac <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	8b5b      	ldrh	r3, [r3, #26]
 800e9ec:	f003 0310 	and.w	r3, r3, #16
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d103      	bne.n	800e9fc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e9f4:	4b70      	ldr	r3, [pc, #448]	; (800ebb8 <tcp_process+0x2cc>)
 800e9f6:	681a      	ldr	r2, [r3, #0]
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	2200      	movs	r2, #0
 800ea00:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	2200      	movs	r2, #0
 800ea08:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800ea0c:	6878      	ldr	r0, [r7, #4]
 800ea0e:	f001 fc2d 	bl	801026c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	7d1b      	ldrb	r3, [r3, #20]
 800ea16:	3b02      	subs	r3, #2
 800ea18:	2b07      	cmp	r3, #7
 800ea1a:	f200 8337 	bhi.w	800f08c <tcp_process+0x7a0>
 800ea1e:	a201      	add	r2, pc, #4	; (adr r2, 800ea24 <tcp_process+0x138>)
 800ea20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea24:	0800ea45 	.word	0x0800ea45
 800ea28:	0800ec75 	.word	0x0800ec75
 800ea2c:	0800eded 	.word	0x0800eded
 800ea30:	0800ee17 	.word	0x0800ee17
 800ea34:	0800ef3b 	.word	0x0800ef3b
 800ea38:	0800eded 	.word	0x0800eded
 800ea3c:	0800efc7 	.word	0x0800efc7
 800ea40:	0800f057 	.word	0x0800f057
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ea44:	4b57      	ldr	r3, [pc, #348]	; (800eba4 <tcp_process+0x2b8>)
 800ea46:	781b      	ldrb	r3, [r3, #0]
 800ea48:	f003 0310 	and.w	r3, r3, #16
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	f000 80e4 	beq.w	800ec1a <tcp_process+0x32e>
 800ea52:	4b54      	ldr	r3, [pc, #336]	; (800eba4 <tcp_process+0x2b8>)
 800ea54:	781b      	ldrb	r3, [r3, #0]
 800ea56:	f003 0302 	and.w	r3, r3, #2
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	f000 80dd 	beq.w	800ec1a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea64:	1c5a      	adds	r2, r3, #1
 800ea66:	4b50      	ldr	r3, [pc, #320]	; (800eba8 <tcp_process+0x2bc>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	429a      	cmp	r2, r3
 800ea6c:	f040 80d5 	bne.w	800ec1a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800ea70:	4b4e      	ldr	r3, [pc, #312]	; (800ebac <tcp_process+0x2c0>)
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	1c5a      	adds	r2, r3, #1
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800ea82:	4b49      	ldr	r3, [pc, #292]	; (800eba8 <tcp_process+0x2bc>)
 800ea84:	681a      	ldr	r2, [r3, #0]
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ea8a:	4b4c      	ldr	r3, [pc, #304]	; (800ebbc <tcp_process+0x2d0>)
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	89db      	ldrh	r3, [r3, #14]
 800ea90:	b29a      	uxth	r2, r3
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800eaa4:	4b41      	ldr	r3, [pc, #260]	; (800ebac <tcp_process+0x2c0>)
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	1e5a      	subs	r2, r3, #1
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2204      	movs	r2, #4
 800eab2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	3304      	adds	r3, #4
 800eabc:	4618      	mov	r0, r3
 800eabe:	f004 ffb1 	bl	8013a24 <ip4_route>
 800eac2:	4601      	mov	r1, r0
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	3304      	adds	r3, #4
 800eac8:	461a      	mov	r2, r3
 800eaca:	4620      	mov	r0, r4
 800eacc:	f7ff f88e 	bl	800dbec <tcp_eff_send_mss_netif>
 800ead0:	4603      	mov	r3, r0
 800ead2:	461a      	mov	r2, r3
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eadc:	009a      	lsls	r2, r3, #2
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eae2:	005b      	lsls	r3, r3, #1
 800eae4:	f241 111c 	movw	r1, #4380	; 0x111c
 800eae8:	428b      	cmp	r3, r1
 800eaea:	bf38      	it	cc
 800eaec:	460b      	movcc	r3, r1
 800eaee:	429a      	cmp	r2, r3
 800eaf0:	d204      	bcs.n	800eafc <tcp_process+0x210>
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eaf6:	009b      	lsls	r3, r3, #2
 800eaf8:	b29b      	uxth	r3, r3
 800eafa:	e00d      	b.n	800eb18 <tcp_process+0x22c>
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb00:	005b      	lsls	r3, r3, #1
 800eb02:	f241 121c 	movw	r2, #4380	; 0x111c
 800eb06:	4293      	cmp	r3, r2
 800eb08:	d904      	bls.n	800eb14 <tcp_process+0x228>
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb0e:	005b      	lsls	r3, r3, #1
 800eb10:	b29b      	uxth	r3, r3
 800eb12:	e001      	b.n	800eb18 <tcp_process+0x22c>
 800eb14:	f241 131c 	movw	r3, #4380	; 0x111c
 800eb18:	687a      	ldr	r2, [r7, #4]
 800eb1a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d106      	bne.n	800eb36 <tcp_process+0x24a>
 800eb28:	4b1b      	ldr	r3, [pc, #108]	; (800eb98 <tcp_process+0x2ac>)
 800eb2a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800eb2e:	4924      	ldr	r1, [pc, #144]	; (800ebc0 <tcp_process+0x2d4>)
 800eb30:	481b      	ldr	r0, [pc, #108]	; (800eba0 <tcp_process+0x2b4>)
 800eb32:	f006 fbff 	bl	8015334 <iprintf>
        --pcb->snd_queuelen;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eb3c:	3b01      	subs	r3, #1
 800eb3e:	b29a      	uxth	r2, r3
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb4a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800eb4c:	69fb      	ldr	r3, [r7, #28]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d111      	bne.n	800eb76 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb56:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800eb58:	69fb      	ldr	r3, [r7, #28]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d106      	bne.n	800eb6c <tcp_process+0x280>
 800eb5e:	4b0e      	ldr	r3, [pc, #56]	; (800eb98 <tcp_process+0x2ac>)
 800eb60:	f44f 725d 	mov.w	r2, #884	; 0x374
 800eb64:	4917      	ldr	r1, [pc, #92]	; (800ebc4 <tcp_process+0x2d8>)
 800eb66:	480e      	ldr	r0, [pc, #56]	; (800eba0 <tcp_process+0x2b4>)
 800eb68:	f006 fbe4 	bl	8015334 <iprintf>
          pcb->unsent = rseg->next;
 800eb6c:	69fb      	ldr	r3, [r7, #28]
 800eb6e:	681a      	ldr	r2, [r3, #0]
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	66da      	str	r2, [r3, #108]	; 0x6c
 800eb74:	e003      	b.n	800eb7e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800eb76:	69fb      	ldr	r3, [r7, #28]
 800eb78:	681a      	ldr	r2, [r3, #0]
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800eb7e:	69f8      	ldr	r0, [r7, #28]
 800eb80:	f7fe fc87 	bl	800d492 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d11d      	bne.n	800ebc8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb92:	861a      	strh	r2, [r3, #48]	; 0x30
 800eb94:	e01f      	b.n	800ebd6 <tcp_process+0x2ea>
 800eb96:	bf00      	nop
 800eb98:	080184fc 	.word	0x080184fc
 800eb9c:	08018734 	.word	0x08018734
 800eba0:	08018548 	.word	0x08018548
 800eba4:	200040cc 	.word	0x200040cc
 800eba8:	200040c4 	.word	0x200040c4
 800ebac:	200040c0 	.word	0x200040c0
 800ebb0:	08018750 	.word	0x08018750
 800ebb4:	200040cd 	.word	0x200040cd
 800ebb8:	2000ab1c 	.word	0x2000ab1c
 800ebbc:	200040b0 	.word	0x200040b0
 800ebc0:	08018770 	.word	0x08018770
 800ebc4:	08018788 	.word	0x08018788
        } else {
          pcb->rtime = 0;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2200      	movs	r2, #0
 800ebcc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d00a      	beq.n	800ebf6 <tcp_process+0x30a>
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ebe6:	687a      	ldr	r2, [r7, #4]
 800ebe8:	6910      	ldr	r0, [r2, #16]
 800ebea:	2200      	movs	r2, #0
 800ebec:	6879      	ldr	r1, [r7, #4]
 800ebee:	4798      	blx	r3
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	76bb      	strb	r3, [r7, #26]
 800ebf4:	e001      	b.n	800ebfa <tcp_process+0x30e>
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800ebfa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ebfe:	f113 0f0d 	cmn.w	r3, #13
 800ec02:	d102      	bne.n	800ec0a <tcp_process+0x31e>
          return ERR_ABRT;
 800ec04:	f06f 030c 	mvn.w	r3, #12
 800ec08:	e250      	b.n	800f0ac <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	8b5b      	ldrh	r3, [r3, #26]
 800ec0e:	f043 0302 	orr.w	r3, r3, #2
 800ec12:	b29a      	uxth	r2, r3
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800ec18:	e23a      	b.n	800f090 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800ec1a:	4b9d      	ldr	r3, [pc, #628]	; (800ee90 <tcp_process+0x5a4>)
 800ec1c:	781b      	ldrb	r3, [r3, #0]
 800ec1e:	f003 0310 	and.w	r3, r3, #16
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	f000 8234 	beq.w	800f090 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ec28:	4b9a      	ldr	r3, [pc, #616]	; (800ee94 <tcp_process+0x5a8>)
 800ec2a:	6819      	ldr	r1, [r3, #0]
 800ec2c:	4b9a      	ldr	r3, [pc, #616]	; (800ee98 <tcp_process+0x5ac>)
 800ec2e:	881b      	ldrh	r3, [r3, #0]
 800ec30:	461a      	mov	r2, r3
 800ec32:	4b9a      	ldr	r3, [pc, #616]	; (800ee9c <tcp_process+0x5b0>)
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ec38:	4b99      	ldr	r3, [pc, #612]	; (800eea0 <tcp_process+0x5b4>)
 800ec3a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ec3c:	885b      	ldrh	r3, [r3, #2]
 800ec3e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ec40:	4a97      	ldr	r2, [pc, #604]	; (800eea0 <tcp_process+0x5b4>)
 800ec42:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ec44:	8812      	ldrh	r2, [r2, #0]
 800ec46:	b292      	uxth	r2, r2
 800ec48:	9202      	str	r2, [sp, #8]
 800ec4a:	9301      	str	r3, [sp, #4]
 800ec4c:	4b95      	ldr	r3, [pc, #596]	; (800eea4 <tcp_process+0x5b8>)
 800ec4e:	9300      	str	r3, [sp, #0]
 800ec50:	4b95      	ldr	r3, [pc, #596]	; (800eea8 <tcp_process+0x5bc>)
 800ec52:	4602      	mov	r2, r0
 800ec54:	6878      	ldr	r0, [r7, #4]
 800ec56:	f003 f8db 	bl	8011e10 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ec60:	2b05      	cmp	r3, #5
 800ec62:	f200 8215 	bhi.w	800f090 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	2200      	movs	r2, #0
 800ec6a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f002 fea5 	bl	80119bc <tcp_rexmit_rto>
      break;
 800ec72:	e20d      	b.n	800f090 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800ec74:	4b86      	ldr	r3, [pc, #536]	; (800ee90 <tcp_process+0x5a4>)
 800ec76:	781b      	ldrb	r3, [r3, #0]
 800ec78:	f003 0310 	and.w	r3, r3, #16
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	f000 80a1 	beq.w	800edc4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ec82:	4b84      	ldr	r3, [pc, #528]	; (800ee94 <tcp_process+0x5a8>)
 800ec84:	681a      	ldr	r2, [r3, #0]
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec8a:	1ad3      	subs	r3, r2, r3
 800ec8c:	3b01      	subs	r3, #1
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	db7e      	blt.n	800ed90 <tcp_process+0x4a4>
 800ec92:	4b80      	ldr	r3, [pc, #512]	; (800ee94 <tcp_process+0x5a8>)
 800ec94:	681a      	ldr	r2, [r3, #0]
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec9a:	1ad3      	subs	r3, r2, r3
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	dc77      	bgt.n	800ed90 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2204      	movs	r2, #4
 800eca4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d102      	bne.n	800ecb4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ecae:	23fa      	movs	r3, #250	; 0xfa
 800ecb0:	76bb      	strb	r3, [r7, #26]
 800ecb2:	e01d      	b.n	800ecf0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ecb8:	699b      	ldr	r3, [r3, #24]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d106      	bne.n	800eccc <tcp_process+0x3e0>
 800ecbe:	4b7b      	ldr	r3, [pc, #492]	; (800eeac <tcp_process+0x5c0>)
 800ecc0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ecc4:	497a      	ldr	r1, [pc, #488]	; (800eeb0 <tcp_process+0x5c4>)
 800ecc6:	487b      	ldr	r0, [pc, #492]	; (800eeb4 <tcp_process+0x5c8>)
 800ecc8:	f006 fb34 	bl	8015334 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ecd0:	699b      	ldr	r3, [r3, #24]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d00a      	beq.n	800ecec <tcp_process+0x400>
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ecda:	699b      	ldr	r3, [r3, #24]
 800ecdc:	687a      	ldr	r2, [r7, #4]
 800ecde:	6910      	ldr	r0, [r2, #16]
 800ece0:	2200      	movs	r2, #0
 800ece2:	6879      	ldr	r1, [r7, #4]
 800ece4:	4798      	blx	r3
 800ece6:	4603      	mov	r3, r0
 800ece8:	76bb      	strb	r3, [r7, #26]
 800ecea:	e001      	b.n	800ecf0 <tcp_process+0x404>
 800ecec:	23f0      	movs	r3, #240	; 0xf0
 800ecee:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ecf0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d00a      	beq.n	800ed0e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ecf8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ecfc:	f113 0f0d 	cmn.w	r3, #13
 800ed00:	d002      	beq.n	800ed08 <tcp_process+0x41c>
              tcp_abort(pcb);
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	f7fd fce4 	bl	800c6d0 <tcp_abort>
            }
            return ERR_ABRT;
 800ed08:	f06f 030c 	mvn.w	r3, #12
 800ed0c:	e1ce      	b.n	800f0ac <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800ed0e:	6878      	ldr	r0, [r7, #4]
 800ed10:	f000 fae0 	bl	800f2d4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800ed14:	4b68      	ldr	r3, [pc, #416]	; (800eeb8 <tcp_process+0x5cc>)
 800ed16:	881b      	ldrh	r3, [r3, #0]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d005      	beq.n	800ed28 <tcp_process+0x43c>
            recv_acked--;
 800ed1c:	4b66      	ldr	r3, [pc, #408]	; (800eeb8 <tcp_process+0x5cc>)
 800ed1e:	881b      	ldrh	r3, [r3, #0]
 800ed20:	3b01      	subs	r3, #1
 800ed22:	b29a      	uxth	r2, r3
 800ed24:	4b64      	ldr	r3, [pc, #400]	; (800eeb8 <tcp_process+0x5cc>)
 800ed26:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed2c:	009a      	lsls	r2, r3, #2
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed32:	005b      	lsls	r3, r3, #1
 800ed34:	f241 111c 	movw	r1, #4380	; 0x111c
 800ed38:	428b      	cmp	r3, r1
 800ed3a:	bf38      	it	cc
 800ed3c:	460b      	movcc	r3, r1
 800ed3e:	429a      	cmp	r2, r3
 800ed40:	d204      	bcs.n	800ed4c <tcp_process+0x460>
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed46:	009b      	lsls	r3, r3, #2
 800ed48:	b29b      	uxth	r3, r3
 800ed4a:	e00d      	b.n	800ed68 <tcp_process+0x47c>
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed50:	005b      	lsls	r3, r3, #1
 800ed52:	f241 121c 	movw	r2, #4380	; 0x111c
 800ed56:	4293      	cmp	r3, r2
 800ed58:	d904      	bls.n	800ed64 <tcp_process+0x478>
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed5e:	005b      	lsls	r3, r3, #1
 800ed60:	b29b      	uxth	r3, r3
 800ed62:	e001      	b.n	800ed68 <tcp_process+0x47c>
 800ed64:	f241 131c 	movw	r3, #4380	; 0x111c
 800ed68:	687a      	ldr	r2, [r7, #4]
 800ed6a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800ed6e:	4b53      	ldr	r3, [pc, #332]	; (800eebc <tcp_process+0x5d0>)
 800ed70:	781b      	ldrb	r3, [r3, #0]
 800ed72:	f003 0320 	and.w	r3, r3, #32
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d037      	beq.n	800edea <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	8b5b      	ldrh	r3, [r3, #26]
 800ed7e:	f043 0302 	orr.w	r3, r3, #2
 800ed82:	b29a      	uxth	r2, r3
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2207      	movs	r2, #7
 800ed8c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800ed8e:	e02c      	b.n	800edea <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed90:	4b40      	ldr	r3, [pc, #256]	; (800ee94 <tcp_process+0x5a8>)
 800ed92:	6819      	ldr	r1, [r3, #0]
 800ed94:	4b40      	ldr	r3, [pc, #256]	; (800ee98 <tcp_process+0x5ac>)
 800ed96:	881b      	ldrh	r3, [r3, #0]
 800ed98:	461a      	mov	r2, r3
 800ed9a:	4b40      	ldr	r3, [pc, #256]	; (800ee9c <tcp_process+0x5b0>)
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eda0:	4b3f      	ldr	r3, [pc, #252]	; (800eea0 <tcp_process+0x5b4>)
 800eda2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eda4:	885b      	ldrh	r3, [r3, #2]
 800eda6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eda8:	4a3d      	ldr	r2, [pc, #244]	; (800eea0 <tcp_process+0x5b4>)
 800edaa:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800edac:	8812      	ldrh	r2, [r2, #0]
 800edae:	b292      	uxth	r2, r2
 800edb0:	9202      	str	r2, [sp, #8]
 800edb2:	9301      	str	r3, [sp, #4]
 800edb4:	4b3b      	ldr	r3, [pc, #236]	; (800eea4 <tcp_process+0x5b8>)
 800edb6:	9300      	str	r3, [sp, #0]
 800edb8:	4b3b      	ldr	r3, [pc, #236]	; (800eea8 <tcp_process+0x5bc>)
 800edba:	4602      	mov	r2, r0
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	f003 f827 	bl	8011e10 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800edc2:	e167      	b.n	800f094 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800edc4:	4b32      	ldr	r3, [pc, #200]	; (800ee90 <tcp_process+0x5a4>)
 800edc6:	781b      	ldrb	r3, [r3, #0]
 800edc8:	f003 0302 	and.w	r3, r3, #2
 800edcc:	2b00      	cmp	r3, #0
 800edce:	f000 8161 	beq.w	800f094 <tcp_process+0x7a8>
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edd6:	1e5a      	subs	r2, r3, #1
 800edd8:	4b30      	ldr	r3, [pc, #192]	; (800ee9c <tcp_process+0x5b0>)
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	429a      	cmp	r2, r3
 800edde:	f040 8159 	bne.w	800f094 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800ede2:	6878      	ldr	r0, [r7, #4]
 800ede4:	f002 fe0c 	bl	8011a00 <tcp_rexmit>
      break;
 800ede8:	e154      	b.n	800f094 <tcp_process+0x7a8>
 800edea:	e153      	b.n	800f094 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800edec:	6878      	ldr	r0, [r7, #4]
 800edee:	f000 fa71 	bl	800f2d4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800edf2:	4b32      	ldr	r3, [pc, #200]	; (800eebc <tcp_process+0x5d0>)
 800edf4:	781b      	ldrb	r3, [r3, #0]
 800edf6:	f003 0320 	and.w	r3, r3, #32
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	f000 814c 	beq.w	800f098 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	8b5b      	ldrh	r3, [r3, #26]
 800ee04:	f043 0302 	orr.w	r3, r3, #2
 800ee08:	b29a      	uxth	r2, r3
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	2207      	movs	r2, #7
 800ee12:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ee14:	e140      	b.n	800f098 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ee16:	6878      	ldr	r0, [r7, #4]
 800ee18:	f000 fa5c 	bl	800f2d4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ee1c:	4b27      	ldr	r3, [pc, #156]	; (800eebc <tcp_process+0x5d0>)
 800ee1e:	781b      	ldrb	r3, [r3, #0]
 800ee20:	f003 0320 	and.w	r3, r3, #32
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d071      	beq.n	800ef0c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ee28:	4b19      	ldr	r3, [pc, #100]	; (800ee90 <tcp_process+0x5a4>)
 800ee2a:	781b      	ldrb	r3, [r3, #0]
 800ee2c:	f003 0310 	and.w	r3, r3, #16
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d060      	beq.n	800eef6 <tcp_process+0x60a>
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ee38:	4b16      	ldr	r3, [pc, #88]	; (800ee94 <tcp_process+0x5a8>)
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	429a      	cmp	r2, r3
 800ee3e:	d15a      	bne.n	800eef6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d156      	bne.n	800eef6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	8b5b      	ldrh	r3, [r3, #26]
 800ee4c:	f043 0302 	orr.w	r3, r3, #2
 800ee50:	b29a      	uxth	r2, r3
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800ee56:	6878      	ldr	r0, [r7, #4]
 800ee58:	f7fe fdbe 	bl	800d9d8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ee5c:	4b18      	ldr	r3, [pc, #96]	; (800eec0 <tcp_process+0x5d4>)
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	687a      	ldr	r2, [r7, #4]
 800ee62:	429a      	cmp	r2, r3
 800ee64:	d105      	bne.n	800ee72 <tcp_process+0x586>
 800ee66:	4b16      	ldr	r3, [pc, #88]	; (800eec0 <tcp_process+0x5d4>)
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	68db      	ldr	r3, [r3, #12]
 800ee6c:	4a14      	ldr	r2, [pc, #80]	; (800eec0 <tcp_process+0x5d4>)
 800ee6e:	6013      	str	r3, [r2, #0]
 800ee70:	e02e      	b.n	800eed0 <tcp_process+0x5e4>
 800ee72:	4b13      	ldr	r3, [pc, #76]	; (800eec0 <tcp_process+0x5d4>)
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	617b      	str	r3, [r7, #20]
 800ee78:	e027      	b.n	800eeca <tcp_process+0x5de>
 800ee7a:	697b      	ldr	r3, [r7, #20]
 800ee7c:	68db      	ldr	r3, [r3, #12]
 800ee7e:	687a      	ldr	r2, [r7, #4]
 800ee80:	429a      	cmp	r2, r3
 800ee82:	d11f      	bne.n	800eec4 <tcp_process+0x5d8>
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	68da      	ldr	r2, [r3, #12]
 800ee88:	697b      	ldr	r3, [r7, #20]
 800ee8a:	60da      	str	r2, [r3, #12]
 800ee8c:	e020      	b.n	800eed0 <tcp_process+0x5e4>
 800ee8e:	bf00      	nop
 800ee90:	200040cc 	.word	0x200040cc
 800ee94:	200040c4 	.word	0x200040c4
 800ee98:	200040ca 	.word	0x200040ca
 800ee9c:	200040c0 	.word	0x200040c0
 800eea0:	200040b0 	.word	0x200040b0
 800eea4:	20007414 	.word	0x20007414
 800eea8:	20007418 	.word	0x20007418
 800eeac:	080184fc 	.word	0x080184fc
 800eeb0:	0801879c 	.word	0x0801879c
 800eeb4:	08018548 	.word	0x08018548
 800eeb8:	200040c8 	.word	0x200040c8
 800eebc:	200040cd 	.word	0x200040cd
 800eec0:	2000ab18 	.word	0x2000ab18
 800eec4:	697b      	ldr	r3, [r7, #20]
 800eec6:	68db      	ldr	r3, [r3, #12]
 800eec8:	617b      	str	r3, [r7, #20]
 800eeca:	697b      	ldr	r3, [r7, #20]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d1d4      	bne.n	800ee7a <tcp_process+0x58e>
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2200      	movs	r2, #0
 800eed4:	60da      	str	r2, [r3, #12]
 800eed6:	4b77      	ldr	r3, [pc, #476]	; (800f0b4 <tcp_process+0x7c8>)
 800eed8:	2201      	movs	r2, #1
 800eeda:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	220a      	movs	r2, #10
 800eee0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800eee2:	4b75      	ldr	r3, [pc, #468]	; (800f0b8 <tcp_process+0x7cc>)
 800eee4:	681a      	ldr	r2, [r3, #0]
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	60da      	str	r2, [r3, #12]
 800eeea:	4a73      	ldr	r2, [pc, #460]	; (800f0b8 <tcp_process+0x7cc>)
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	6013      	str	r3, [r2, #0]
 800eef0:	f003 f950 	bl	8012194 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800eef4:	e0d2      	b.n	800f09c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	8b5b      	ldrh	r3, [r3, #26]
 800eefa:	f043 0302 	orr.w	r3, r3, #2
 800eefe:	b29a      	uxth	r2, r3
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	2208      	movs	r2, #8
 800ef08:	751a      	strb	r2, [r3, #20]
      break;
 800ef0a:	e0c7      	b.n	800f09c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ef0c:	4b6b      	ldr	r3, [pc, #428]	; (800f0bc <tcp_process+0x7d0>)
 800ef0e:	781b      	ldrb	r3, [r3, #0]
 800ef10:	f003 0310 	and.w	r3, r3, #16
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	f000 80c1 	beq.w	800f09c <tcp_process+0x7b0>
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ef1e:	4b68      	ldr	r3, [pc, #416]	; (800f0c0 <tcp_process+0x7d4>)
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	429a      	cmp	r2, r3
 800ef24:	f040 80ba 	bne.w	800f09c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	f040 80b5 	bne.w	800f09c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	2206      	movs	r2, #6
 800ef36:	751a      	strb	r2, [r3, #20]
      break;
 800ef38:	e0b0      	b.n	800f09c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800ef3a:	6878      	ldr	r0, [r7, #4]
 800ef3c:	f000 f9ca 	bl	800f2d4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ef40:	4b60      	ldr	r3, [pc, #384]	; (800f0c4 <tcp_process+0x7d8>)
 800ef42:	781b      	ldrb	r3, [r3, #0]
 800ef44:	f003 0320 	and.w	r3, r3, #32
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	f000 80a9 	beq.w	800f0a0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	8b5b      	ldrh	r3, [r3, #26]
 800ef52:	f043 0302 	orr.w	r3, r3, #2
 800ef56:	b29a      	uxth	r2, r3
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ef5c:	6878      	ldr	r0, [r7, #4]
 800ef5e:	f7fe fd3b 	bl	800d9d8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ef62:	4b59      	ldr	r3, [pc, #356]	; (800f0c8 <tcp_process+0x7dc>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	687a      	ldr	r2, [r7, #4]
 800ef68:	429a      	cmp	r2, r3
 800ef6a:	d105      	bne.n	800ef78 <tcp_process+0x68c>
 800ef6c:	4b56      	ldr	r3, [pc, #344]	; (800f0c8 <tcp_process+0x7dc>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	68db      	ldr	r3, [r3, #12]
 800ef72:	4a55      	ldr	r2, [pc, #340]	; (800f0c8 <tcp_process+0x7dc>)
 800ef74:	6013      	str	r3, [r2, #0]
 800ef76:	e013      	b.n	800efa0 <tcp_process+0x6b4>
 800ef78:	4b53      	ldr	r3, [pc, #332]	; (800f0c8 <tcp_process+0x7dc>)
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	613b      	str	r3, [r7, #16]
 800ef7e:	e00c      	b.n	800ef9a <tcp_process+0x6ae>
 800ef80:	693b      	ldr	r3, [r7, #16]
 800ef82:	68db      	ldr	r3, [r3, #12]
 800ef84:	687a      	ldr	r2, [r7, #4]
 800ef86:	429a      	cmp	r2, r3
 800ef88:	d104      	bne.n	800ef94 <tcp_process+0x6a8>
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	68da      	ldr	r2, [r3, #12]
 800ef8e:	693b      	ldr	r3, [r7, #16]
 800ef90:	60da      	str	r2, [r3, #12]
 800ef92:	e005      	b.n	800efa0 <tcp_process+0x6b4>
 800ef94:	693b      	ldr	r3, [r7, #16]
 800ef96:	68db      	ldr	r3, [r3, #12]
 800ef98:	613b      	str	r3, [r7, #16]
 800ef9a:	693b      	ldr	r3, [r7, #16]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d1ef      	bne.n	800ef80 <tcp_process+0x694>
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	2200      	movs	r2, #0
 800efa4:	60da      	str	r2, [r3, #12]
 800efa6:	4b43      	ldr	r3, [pc, #268]	; (800f0b4 <tcp_process+0x7c8>)
 800efa8:	2201      	movs	r2, #1
 800efaa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	220a      	movs	r2, #10
 800efb0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800efb2:	4b41      	ldr	r3, [pc, #260]	; (800f0b8 <tcp_process+0x7cc>)
 800efb4:	681a      	ldr	r2, [r3, #0]
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	60da      	str	r2, [r3, #12]
 800efba:	4a3f      	ldr	r2, [pc, #252]	; (800f0b8 <tcp_process+0x7cc>)
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	6013      	str	r3, [r2, #0]
 800efc0:	f003 f8e8 	bl	8012194 <tcp_timer_needed>
      }
      break;
 800efc4:	e06c      	b.n	800f0a0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800efc6:	6878      	ldr	r0, [r7, #4]
 800efc8:	f000 f984 	bl	800f2d4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800efcc:	4b3b      	ldr	r3, [pc, #236]	; (800f0bc <tcp_process+0x7d0>)
 800efce:	781b      	ldrb	r3, [r3, #0]
 800efd0:	f003 0310 	and.w	r3, r3, #16
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d065      	beq.n	800f0a4 <tcp_process+0x7b8>
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800efdc:	4b38      	ldr	r3, [pc, #224]	; (800f0c0 <tcp_process+0x7d4>)
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	429a      	cmp	r2, r3
 800efe2:	d15f      	bne.n	800f0a4 <tcp_process+0x7b8>
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d15b      	bne.n	800f0a4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800efec:	6878      	ldr	r0, [r7, #4]
 800efee:	f7fe fcf3 	bl	800d9d8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800eff2:	4b35      	ldr	r3, [pc, #212]	; (800f0c8 <tcp_process+0x7dc>)
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	687a      	ldr	r2, [r7, #4]
 800eff8:	429a      	cmp	r2, r3
 800effa:	d105      	bne.n	800f008 <tcp_process+0x71c>
 800effc:	4b32      	ldr	r3, [pc, #200]	; (800f0c8 <tcp_process+0x7dc>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	68db      	ldr	r3, [r3, #12]
 800f002:	4a31      	ldr	r2, [pc, #196]	; (800f0c8 <tcp_process+0x7dc>)
 800f004:	6013      	str	r3, [r2, #0]
 800f006:	e013      	b.n	800f030 <tcp_process+0x744>
 800f008:	4b2f      	ldr	r3, [pc, #188]	; (800f0c8 <tcp_process+0x7dc>)
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	60fb      	str	r3, [r7, #12]
 800f00e:	e00c      	b.n	800f02a <tcp_process+0x73e>
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	68db      	ldr	r3, [r3, #12]
 800f014:	687a      	ldr	r2, [r7, #4]
 800f016:	429a      	cmp	r2, r3
 800f018:	d104      	bne.n	800f024 <tcp_process+0x738>
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	68da      	ldr	r2, [r3, #12]
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	60da      	str	r2, [r3, #12]
 800f022:	e005      	b.n	800f030 <tcp_process+0x744>
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	68db      	ldr	r3, [r3, #12]
 800f028:	60fb      	str	r3, [r7, #12]
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d1ef      	bne.n	800f010 <tcp_process+0x724>
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	2200      	movs	r2, #0
 800f034:	60da      	str	r2, [r3, #12]
 800f036:	4b1f      	ldr	r3, [pc, #124]	; (800f0b4 <tcp_process+0x7c8>)
 800f038:	2201      	movs	r2, #1
 800f03a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	220a      	movs	r2, #10
 800f040:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f042:	4b1d      	ldr	r3, [pc, #116]	; (800f0b8 <tcp_process+0x7cc>)
 800f044:	681a      	ldr	r2, [r3, #0]
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	60da      	str	r2, [r3, #12]
 800f04a:	4a1b      	ldr	r2, [pc, #108]	; (800f0b8 <tcp_process+0x7cc>)
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	6013      	str	r3, [r2, #0]
 800f050:	f003 f8a0 	bl	8012194 <tcp_timer_needed>
      }
      break;
 800f054:	e026      	b.n	800f0a4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f000 f93c 	bl	800f2d4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f05c:	4b17      	ldr	r3, [pc, #92]	; (800f0bc <tcp_process+0x7d0>)
 800f05e:	781b      	ldrb	r3, [r3, #0]
 800f060:	f003 0310 	and.w	r3, r3, #16
 800f064:	2b00      	cmp	r3, #0
 800f066:	d01f      	beq.n	800f0a8 <tcp_process+0x7bc>
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f06c:	4b14      	ldr	r3, [pc, #80]	; (800f0c0 <tcp_process+0x7d4>)
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	429a      	cmp	r2, r3
 800f072:	d119      	bne.n	800f0a8 <tcp_process+0x7bc>
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d115      	bne.n	800f0a8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f07c:	4b11      	ldr	r3, [pc, #68]	; (800f0c4 <tcp_process+0x7d8>)
 800f07e:	781b      	ldrb	r3, [r3, #0]
 800f080:	f043 0310 	orr.w	r3, r3, #16
 800f084:	b2da      	uxtb	r2, r3
 800f086:	4b0f      	ldr	r3, [pc, #60]	; (800f0c4 <tcp_process+0x7d8>)
 800f088:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f08a:	e00d      	b.n	800f0a8 <tcp_process+0x7bc>
    default:
      break;
 800f08c:	bf00      	nop
 800f08e:	e00c      	b.n	800f0aa <tcp_process+0x7be>
      break;
 800f090:	bf00      	nop
 800f092:	e00a      	b.n	800f0aa <tcp_process+0x7be>
      break;
 800f094:	bf00      	nop
 800f096:	e008      	b.n	800f0aa <tcp_process+0x7be>
      break;
 800f098:	bf00      	nop
 800f09a:	e006      	b.n	800f0aa <tcp_process+0x7be>
      break;
 800f09c:	bf00      	nop
 800f09e:	e004      	b.n	800f0aa <tcp_process+0x7be>
      break;
 800f0a0:	bf00      	nop
 800f0a2:	e002      	b.n	800f0aa <tcp_process+0x7be>
      break;
 800f0a4:	bf00      	nop
 800f0a6:	e000      	b.n	800f0aa <tcp_process+0x7be>
      break;
 800f0a8:	bf00      	nop
  }
  return ERR_OK;
 800f0aa:	2300      	movs	r3, #0
}
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	3724      	adds	r7, #36	; 0x24
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	bd90      	pop	{r4, r7, pc}
 800f0b4:	2000ab14 	.word	0x2000ab14
 800f0b8:	2000ab28 	.word	0x2000ab28
 800f0bc:	200040cc 	.word	0x200040cc
 800f0c0:	200040c4 	.word	0x200040c4
 800f0c4:	200040cd 	.word	0x200040cd
 800f0c8:	2000ab18 	.word	0x2000ab18

0800f0cc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f0cc:	b590      	push	{r4, r7, lr}
 800f0ce:	b085      	sub	sp, #20
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
 800f0d4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d106      	bne.n	800f0ea <tcp_oos_insert_segment+0x1e>
 800f0dc:	4b3b      	ldr	r3, [pc, #236]	; (800f1cc <tcp_oos_insert_segment+0x100>)
 800f0de:	f240 421f 	movw	r2, #1055	; 0x41f
 800f0e2:	493b      	ldr	r1, [pc, #236]	; (800f1d0 <tcp_oos_insert_segment+0x104>)
 800f0e4:	483b      	ldr	r0, [pc, #236]	; (800f1d4 <tcp_oos_insert_segment+0x108>)
 800f0e6:	f006 f925 	bl	8015334 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	68db      	ldr	r3, [r3, #12]
 800f0ee:	899b      	ldrh	r3, [r3, #12]
 800f0f0:	b29b      	uxth	r3, r3
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f7fb f920 	bl	800a338 <lwip_htons>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	b2db      	uxtb	r3, r3
 800f0fc:	f003 0301 	and.w	r3, r3, #1
 800f100:	2b00      	cmp	r3, #0
 800f102:	d028      	beq.n	800f156 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f104:	6838      	ldr	r0, [r7, #0]
 800f106:	f7fe f9af 	bl	800d468 <tcp_segs_free>
    next = NULL;
 800f10a:	2300      	movs	r3, #0
 800f10c:	603b      	str	r3, [r7, #0]
 800f10e:	e056      	b.n	800f1be <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	68db      	ldr	r3, [r3, #12]
 800f114:	899b      	ldrh	r3, [r3, #12]
 800f116:	b29b      	uxth	r3, r3
 800f118:	4618      	mov	r0, r3
 800f11a:	f7fb f90d 	bl	800a338 <lwip_htons>
 800f11e:	4603      	mov	r3, r0
 800f120:	b2db      	uxtb	r3, r3
 800f122:	f003 0301 	and.w	r3, r3, #1
 800f126:	2b00      	cmp	r3, #0
 800f128:	d00d      	beq.n	800f146 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	68db      	ldr	r3, [r3, #12]
 800f12e:	899b      	ldrh	r3, [r3, #12]
 800f130:	b29c      	uxth	r4, r3
 800f132:	2001      	movs	r0, #1
 800f134:	f7fb f900 	bl	800a338 <lwip_htons>
 800f138:	4603      	mov	r3, r0
 800f13a:	461a      	mov	r2, r3
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	68db      	ldr	r3, [r3, #12]
 800f140:	4322      	orrs	r2, r4
 800f142:	b292      	uxth	r2, r2
 800f144:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f14a:	683b      	ldr	r3, [r7, #0]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f150:	68f8      	ldr	r0, [r7, #12]
 800f152:	f7fe f99e 	bl	800d492 <tcp_seg_free>
    while (next &&
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d00e      	beq.n	800f17a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	891b      	ldrh	r3, [r3, #8]
 800f160:	461a      	mov	r2, r3
 800f162:	4b1d      	ldr	r3, [pc, #116]	; (800f1d8 <tcp_oos_insert_segment+0x10c>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	441a      	add	r2, r3
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	68db      	ldr	r3, [r3, #12]
 800f16c:	685b      	ldr	r3, [r3, #4]
 800f16e:	6839      	ldr	r1, [r7, #0]
 800f170:	8909      	ldrh	r1, [r1, #8]
 800f172:	440b      	add	r3, r1
 800f174:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f176:	2b00      	cmp	r3, #0
 800f178:	daca      	bge.n	800f110 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d01e      	beq.n	800f1be <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	891b      	ldrh	r3, [r3, #8]
 800f184:	461a      	mov	r2, r3
 800f186:	4b14      	ldr	r3, [pc, #80]	; (800f1d8 <tcp_oos_insert_segment+0x10c>)
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	441a      	add	r2, r3
 800f18c:	683b      	ldr	r3, [r7, #0]
 800f18e:	68db      	ldr	r3, [r3, #12]
 800f190:	685b      	ldr	r3, [r3, #4]
 800f192:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f194:	2b00      	cmp	r3, #0
 800f196:	dd12      	ble.n	800f1be <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	68db      	ldr	r3, [r3, #12]
 800f19c:	685b      	ldr	r3, [r3, #4]
 800f19e:	b29a      	uxth	r2, r3
 800f1a0:	4b0d      	ldr	r3, [pc, #52]	; (800f1d8 <tcp_oos_insert_segment+0x10c>)
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	b29b      	uxth	r3, r3
 800f1a6:	1ad3      	subs	r3, r2, r3
 800f1a8:	b29a      	uxth	r2, r3
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	685a      	ldr	r2, [r3, #4]
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	891b      	ldrh	r3, [r3, #8]
 800f1b6:	4619      	mov	r1, r3
 800f1b8:	4610      	mov	r0, r2
 800f1ba:	f7fc fb0b 	bl	800b7d4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	683a      	ldr	r2, [r7, #0]
 800f1c2:	601a      	str	r2, [r3, #0]
}
 800f1c4:	bf00      	nop
 800f1c6:	3714      	adds	r7, #20
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	bd90      	pop	{r4, r7, pc}
 800f1cc:	080184fc 	.word	0x080184fc
 800f1d0:	080187bc 	.word	0x080187bc
 800f1d4:	08018548 	.word	0x08018548
 800f1d8:	200040c0 	.word	0x200040c0

0800f1dc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f1dc:	b5b0      	push	{r4, r5, r7, lr}
 800f1de:	b086      	sub	sp, #24
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	60f8      	str	r0, [r7, #12]
 800f1e4:	60b9      	str	r1, [r7, #8]
 800f1e6:	607a      	str	r2, [r7, #4]
 800f1e8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f1ea:	e03e      	b.n	800f26a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f1ec:	68bb      	ldr	r3, [r7, #8]
 800f1ee:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f1f6:	697b      	ldr	r3, [r7, #20]
 800f1f8:	685b      	ldr	r3, [r3, #4]
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	f7fc fcfe 	bl	800bbfc <pbuf_clen>
 800f200:	4603      	mov	r3, r0
 800f202:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f20a:	8a7a      	ldrh	r2, [r7, #18]
 800f20c:	429a      	cmp	r2, r3
 800f20e:	d906      	bls.n	800f21e <tcp_free_acked_segments+0x42>
 800f210:	4b2a      	ldr	r3, [pc, #168]	; (800f2bc <tcp_free_acked_segments+0xe0>)
 800f212:	f240 4257 	movw	r2, #1111	; 0x457
 800f216:	492a      	ldr	r1, [pc, #168]	; (800f2c0 <tcp_free_acked_segments+0xe4>)
 800f218:	482a      	ldr	r0, [pc, #168]	; (800f2c4 <tcp_free_acked_segments+0xe8>)
 800f21a:	f006 f88b 	bl	8015334 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800f224:	8a7b      	ldrh	r3, [r7, #18]
 800f226:	1ad3      	subs	r3, r2, r3
 800f228:	b29a      	uxth	r2, r3
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f230:	697b      	ldr	r3, [r7, #20]
 800f232:	891a      	ldrh	r2, [r3, #8]
 800f234:	4b24      	ldr	r3, [pc, #144]	; (800f2c8 <tcp_free_acked_segments+0xec>)
 800f236:	881b      	ldrh	r3, [r3, #0]
 800f238:	4413      	add	r3, r2
 800f23a:	b29a      	uxth	r2, r3
 800f23c:	4b22      	ldr	r3, [pc, #136]	; (800f2c8 <tcp_free_acked_segments+0xec>)
 800f23e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f240:	6978      	ldr	r0, [r7, #20]
 800f242:	f7fe f926 	bl	800d492 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d00c      	beq.n	800f26a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f250:	68bb      	ldr	r3, [r7, #8]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d109      	bne.n	800f26a <tcp_free_acked_segments+0x8e>
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d106      	bne.n	800f26a <tcp_free_acked_segments+0x8e>
 800f25c:	4b17      	ldr	r3, [pc, #92]	; (800f2bc <tcp_free_acked_segments+0xe0>)
 800f25e:	f240 4261 	movw	r2, #1121	; 0x461
 800f262:	491a      	ldr	r1, [pc, #104]	; (800f2cc <tcp_free_acked_segments+0xf0>)
 800f264:	4817      	ldr	r0, [pc, #92]	; (800f2c4 <tcp_free_acked_segments+0xe8>)
 800f266:	f006 f865 	bl	8015334 <iprintf>
  while (seg_list != NULL &&
 800f26a:	68bb      	ldr	r3, [r7, #8]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d020      	beq.n	800f2b2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f270:	68bb      	ldr	r3, [r7, #8]
 800f272:	68db      	ldr	r3, [r3, #12]
 800f274:	685b      	ldr	r3, [r3, #4]
 800f276:	4618      	mov	r0, r3
 800f278:	f7fb f873 	bl	800a362 <lwip_htonl>
 800f27c:	4604      	mov	r4, r0
 800f27e:	68bb      	ldr	r3, [r7, #8]
 800f280:	891b      	ldrh	r3, [r3, #8]
 800f282:	461d      	mov	r5, r3
 800f284:	68bb      	ldr	r3, [r7, #8]
 800f286:	68db      	ldr	r3, [r3, #12]
 800f288:	899b      	ldrh	r3, [r3, #12]
 800f28a:	b29b      	uxth	r3, r3
 800f28c:	4618      	mov	r0, r3
 800f28e:	f7fb f853 	bl	800a338 <lwip_htons>
 800f292:	4603      	mov	r3, r0
 800f294:	b2db      	uxtb	r3, r3
 800f296:	f003 0303 	and.w	r3, r3, #3
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d001      	beq.n	800f2a2 <tcp_free_acked_segments+0xc6>
 800f29e:	2301      	movs	r3, #1
 800f2a0:	e000      	b.n	800f2a4 <tcp_free_acked_segments+0xc8>
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	442b      	add	r3, r5
 800f2a6:	18e2      	adds	r2, r4, r3
 800f2a8:	4b09      	ldr	r3, [pc, #36]	; (800f2d0 <tcp_free_acked_segments+0xf4>)
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	dd9c      	ble.n	800f1ec <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f2b2:	68bb      	ldr	r3, [r7, #8]
}
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	3718      	adds	r7, #24
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bdb0      	pop	{r4, r5, r7, pc}
 800f2bc:	080184fc 	.word	0x080184fc
 800f2c0:	080187e4 	.word	0x080187e4
 800f2c4:	08018548 	.word	0x08018548
 800f2c8:	200040c8 	.word	0x200040c8
 800f2cc:	0801880c 	.word	0x0801880c
 800f2d0:	200040c4 	.word	0x200040c4

0800f2d4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f2d4:	b5b0      	push	{r4, r5, r7, lr}
 800f2d6:	b094      	sub	sp, #80	; 0x50
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f2dc:	2300      	movs	r3, #0
 800f2de:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d106      	bne.n	800f2f4 <tcp_receive+0x20>
 800f2e6:	4ba6      	ldr	r3, [pc, #664]	; (800f580 <tcp_receive+0x2ac>)
 800f2e8:	f240 427b 	movw	r2, #1147	; 0x47b
 800f2ec:	49a5      	ldr	r1, [pc, #660]	; (800f584 <tcp_receive+0x2b0>)
 800f2ee:	48a6      	ldr	r0, [pc, #664]	; (800f588 <tcp_receive+0x2b4>)
 800f2f0:	f006 f820 	bl	8015334 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	7d1b      	ldrb	r3, [r3, #20]
 800f2f8:	2b03      	cmp	r3, #3
 800f2fa:	d806      	bhi.n	800f30a <tcp_receive+0x36>
 800f2fc:	4ba0      	ldr	r3, [pc, #640]	; (800f580 <tcp_receive+0x2ac>)
 800f2fe:	f240 427c 	movw	r2, #1148	; 0x47c
 800f302:	49a2      	ldr	r1, [pc, #648]	; (800f58c <tcp_receive+0x2b8>)
 800f304:	48a0      	ldr	r0, [pc, #640]	; (800f588 <tcp_receive+0x2b4>)
 800f306:	f006 f815 	bl	8015334 <iprintf>

  if (flags & TCP_ACK) {
 800f30a:	4ba1      	ldr	r3, [pc, #644]	; (800f590 <tcp_receive+0x2bc>)
 800f30c:	781b      	ldrb	r3, [r3, #0]
 800f30e:	f003 0310 	and.w	r3, r3, #16
 800f312:	2b00      	cmp	r3, #0
 800f314:	f000 8263 	beq.w	800f7de <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f31e:	461a      	mov	r2, r3
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f324:	4413      	add	r3, r2
 800f326:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f32c:	4b99      	ldr	r3, [pc, #612]	; (800f594 <tcp_receive+0x2c0>)
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	1ad3      	subs	r3, r2, r3
 800f332:	2b00      	cmp	r3, #0
 800f334:	db1b      	blt.n	800f36e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f33a:	4b96      	ldr	r3, [pc, #600]	; (800f594 <tcp_receive+0x2c0>)
 800f33c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f33e:	429a      	cmp	r2, r3
 800f340:	d106      	bne.n	800f350 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f346:	4b94      	ldr	r3, [pc, #592]	; (800f598 <tcp_receive+0x2c4>)
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	1ad3      	subs	r3, r2, r3
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	db0e      	blt.n	800f36e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f354:	4b90      	ldr	r3, [pc, #576]	; (800f598 <tcp_receive+0x2c4>)
 800f356:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f358:	429a      	cmp	r2, r3
 800f35a:	d125      	bne.n	800f3a8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f35c:	4b8f      	ldr	r3, [pc, #572]	; (800f59c <tcp_receive+0x2c8>)
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	89db      	ldrh	r3, [r3, #14]
 800f362:	b29a      	uxth	r2, r3
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f36a:	429a      	cmp	r2, r3
 800f36c:	d91c      	bls.n	800f3a8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f36e:	4b8b      	ldr	r3, [pc, #556]	; (800f59c <tcp_receive+0x2c8>)
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	89db      	ldrh	r3, [r3, #14]
 800f374:	b29a      	uxth	r2, r3
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f388:	429a      	cmp	r2, r3
 800f38a:	d205      	bcs.n	800f398 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800f398:	4b7e      	ldr	r3, [pc, #504]	; (800f594 <tcp_receive+0x2c0>)
 800f39a:	681a      	ldr	r2, [r3, #0]
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800f3a0:	4b7d      	ldr	r3, [pc, #500]	; (800f598 <tcp_receive+0x2c4>)
 800f3a2:	681a      	ldr	r2, [r3, #0]
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f3a8:	4b7b      	ldr	r3, [pc, #492]	; (800f598 <tcp_receive+0x2c4>)
 800f3aa:	681a      	ldr	r2, [r3, #0]
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3b0:	1ad3      	subs	r3, r2, r3
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	dc58      	bgt.n	800f468 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f3b6:	4b7a      	ldr	r3, [pc, #488]	; (800f5a0 <tcp_receive+0x2cc>)
 800f3b8:	881b      	ldrh	r3, [r3, #0]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d14b      	bne.n	800f456 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3c2:	687a      	ldr	r2, [r7, #4]
 800f3c4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800f3c8:	4413      	add	r3, r2
 800f3ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3cc:	429a      	cmp	r2, r3
 800f3ce:	d142      	bne.n	800f456 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	db3d      	blt.n	800f456 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f3de:	4b6e      	ldr	r3, [pc, #440]	; (800f598 <tcp_receive+0x2c4>)
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	429a      	cmp	r2, r3
 800f3e4:	d137      	bne.n	800f456 <tcp_receive+0x182>
              found_dupack = 1;
 800f3e6:	2301      	movs	r3, #1
 800f3e8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f3f0:	2bff      	cmp	r3, #255	; 0xff
 800f3f2:	d007      	beq.n	800f404 <tcp_receive+0x130>
                ++pcb->dupacks;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f3fa:	3301      	adds	r3, #1
 800f3fc:	b2da      	uxtb	r2, r3
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f40a:	2b03      	cmp	r3, #3
 800f40c:	d91b      	bls.n	800f446 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f418:	4413      	add	r3, r2
 800f41a:	b29a      	uxth	r2, r3
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f422:	429a      	cmp	r2, r3
 800f424:	d30a      	bcc.n	800f43c <tcp_receive+0x168>
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f430:	4413      	add	r3, r2
 800f432:	b29a      	uxth	r2, r3
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f43a:	e004      	b.n	800f446 <tcp_receive+0x172>
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f442:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f44c:	2b02      	cmp	r3, #2
 800f44e:	d902      	bls.n	800f456 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f450:	6878      	ldr	r0, [r7, #4]
 800f452:	f002 fb41 	bl	8011ad8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f458:	2b00      	cmp	r3, #0
 800f45a:	f040 8160 	bne.w	800f71e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	2200      	movs	r2, #0
 800f462:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f466:	e15a      	b.n	800f71e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f468:	4b4b      	ldr	r3, [pc, #300]	; (800f598 <tcp_receive+0x2c4>)
 800f46a:	681a      	ldr	r2, [r3, #0]
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f470:	1ad3      	subs	r3, r2, r3
 800f472:	3b01      	subs	r3, #1
 800f474:	2b00      	cmp	r3, #0
 800f476:	f2c0 814d 	blt.w	800f714 <tcp_receive+0x440>
 800f47a:	4b47      	ldr	r3, [pc, #284]	; (800f598 <tcp_receive+0x2c4>)
 800f47c:	681a      	ldr	r2, [r3, #0]
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f482:	1ad3      	subs	r3, r2, r3
 800f484:	2b00      	cmp	r3, #0
 800f486:	f300 8145 	bgt.w	800f714 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	8b5b      	ldrh	r3, [r3, #26]
 800f48e:	f003 0304 	and.w	r3, r3, #4
 800f492:	2b00      	cmp	r3, #0
 800f494:	d010      	beq.n	800f4b8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	8b5b      	ldrh	r3, [r3, #26]
 800f49a:	f023 0304 	bic.w	r3, r3, #4
 800f49e:	b29a      	uxth	r2, r3
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f4c6:	10db      	asrs	r3, r3, #3
 800f4c8:	b21b      	sxth	r3, r3
 800f4ca:	b29a      	uxth	r2, r3
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f4d2:	b29b      	uxth	r3, r3
 800f4d4:	4413      	add	r3, r2
 800f4d6:	b29b      	uxth	r3, r3
 800f4d8:	b21a      	sxth	r2, r3
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f4e0:	4b2d      	ldr	r3, [pc, #180]	; (800f598 <tcp_receive+0x2c4>)
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	b29a      	uxth	r2, r3
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4ea:	b29b      	uxth	r3, r3
 800f4ec:	1ad3      	subs	r3, r2, r3
 800f4ee:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f4f8:	4b27      	ldr	r3, [pc, #156]	; (800f598 <tcp_receive+0x2c4>)
 800f4fa:	681a      	ldr	r2, [r3, #0]
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	7d1b      	ldrb	r3, [r3, #20]
 800f504:	2b03      	cmp	r3, #3
 800f506:	f240 8096 	bls.w	800f636 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f516:	429a      	cmp	r2, r3
 800f518:	d244      	bcs.n	800f5a4 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	8b5b      	ldrh	r3, [r3, #26]
 800f51e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f522:	2b00      	cmp	r3, #0
 800f524:	d001      	beq.n	800f52a <tcp_receive+0x256>
 800f526:	2301      	movs	r3, #1
 800f528:	e000      	b.n	800f52c <tcp_receive+0x258>
 800f52a:	2302      	movs	r3, #2
 800f52c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f530:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f534:	b29a      	uxth	r2, r3
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f53a:	fb12 f303 	smulbb	r3, r2, r3
 800f53e:	b29b      	uxth	r3, r3
 800f540:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f542:	4293      	cmp	r3, r2
 800f544:	bf28      	it	cs
 800f546:	4613      	movcs	r3, r2
 800f548:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f550:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f552:	4413      	add	r3, r2
 800f554:	b29a      	uxth	r2, r3
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f55c:	429a      	cmp	r2, r3
 800f55e:	d309      	bcc.n	800f574 <tcp_receive+0x2a0>
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f566:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f568:	4413      	add	r3, r2
 800f56a:	b29a      	uxth	r2, r3
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f572:	e060      	b.n	800f636 <tcp_receive+0x362>
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f57a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f57e:	e05a      	b.n	800f636 <tcp_receive+0x362>
 800f580:	080184fc 	.word	0x080184fc
 800f584:	0801882c 	.word	0x0801882c
 800f588:	08018548 	.word	0x08018548
 800f58c:	08018848 	.word	0x08018848
 800f590:	200040cc 	.word	0x200040cc
 800f594:	200040c0 	.word	0x200040c0
 800f598:	200040c4 	.word	0x200040c4
 800f59c:	200040b0 	.word	0x200040b0
 800f5a0:	200040ca 	.word	0x200040ca
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f5aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f5ac:	4413      	add	r3, r2
 800f5ae:	b29a      	uxth	r2, r3
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f5b6:	429a      	cmp	r2, r3
 800f5b8:	d309      	bcc.n	800f5ce <tcp_receive+0x2fa>
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f5c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f5c2:	4413      	add	r3, r2
 800f5c4:	b29a      	uxth	r2, r3
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f5cc:	e004      	b.n	800f5d8 <tcp_receive+0x304>
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f5d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f5e4:	429a      	cmp	r2, r3
 800f5e6:	d326      	bcc.n	800f636 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f5f4:	1ad3      	subs	r3, r2, r3
 800f5f6:	b29a      	uxth	r2, r3
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f608:	4413      	add	r3, r2
 800f60a:	b29a      	uxth	r2, r3
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f612:	429a      	cmp	r2, r3
 800f614:	d30a      	bcc.n	800f62c <tcp_receive+0x358>
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f620:	4413      	add	r3, r2
 800f622:	b29a      	uxth	r2, r3
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f62a:	e004      	b.n	800f636 <tcp_receive+0x362>
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f632:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f63e:	4a98      	ldr	r2, [pc, #608]	; (800f8a0 <tcp_receive+0x5cc>)
 800f640:	6878      	ldr	r0, [r7, #4]
 800f642:	f7ff fdcb 	bl	800f1dc <tcp_free_acked_segments>
 800f646:	4602      	mov	r2, r0
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f654:	4a93      	ldr	r2, [pc, #588]	; (800f8a4 <tcp_receive+0x5d0>)
 800f656:	6878      	ldr	r0, [r7, #4]
 800f658:	f7ff fdc0 	bl	800f1dc <tcp_free_acked_segments>
 800f65c:	4602      	mov	r2, r0
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f666:	2b00      	cmp	r3, #0
 800f668:	d104      	bne.n	800f674 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f670:	861a      	strh	r2, [r3, #48]	; 0x30
 800f672:	e002      	b.n	800f67a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	2200      	movs	r2, #0
 800f678:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	2200      	movs	r2, #0
 800f67e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f684:	2b00      	cmp	r3, #0
 800f686:	d103      	bne.n	800f690 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	2200      	movs	r2, #0
 800f68c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f696:	4b84      	ldr	r3, [pc, #528]	; (800f8a8 <tcp_receive+0x5d4>)
 800f698:	881b      	ldrh	r3, [r3, #0]
 800f69a:	4413      	add	r3, r2
 800f69c:	b29a      	uxth	r2, r3
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	8b5b      	ldrh	r3, [r3, #26]
 800f6a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d035      	beq.n	800f71c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d118      	bne.n	800f6ea <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d00c      	beq.n	800f6da <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6c8:	68db      	ldr	r3, [r3, #12]
 800f6ca:	685b      	ldr	r3, [r3, #4]
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	f7fa fe48 	bl	800a362 <lwip_htonl>
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	dc20      	bgt.n	800f71c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	8b5b      	ldrh	r3, [r3, #26]
 800f6de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f6e2:	b29a      	uxth	r2, r3
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f6e8:	e018      	b.n	800f71c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6f2:	68db      	ldr	r3, [r3, #12]
 800f6f4:	685b      	ldr	r3, [r3, #4]
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	f7fa fe33 	bl	800a362 <lwip_htonl>
 800f6fc:	4603      	mov	r3, r0
 800f6fe:	1ae3      	subs	r3, r4, r3
 800f700:	2b00      	cmp	r3, #0
 800f702:	dc0b      	bgt.n	800f71c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	8b5b      	ldrh	r3, [r3, #26]
 800f708:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f70c:	b29a      	uxth	r2, r3
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f712:	e003      	b.n	800f71c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f714:	6878      	ldr	r0, [r7, #4]
 800f716:	f002 fbcd 	bl	8011eb4 <tcp_send_empty_ack>
 800f71a:	e000      	b.n	800f71e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f71c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f722:	2b00      	cmp	r3, #0
 800f724:	d05b      	beq.n	800f7de <tcp_receive+0x50a>
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f72a:	4b60      	ldr	r3, [pc, #384]	; (800f8ac <tcp_receive+0x5d8>)
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	1ad3      	subs	r3, r2, r3
 800f730:	2b00      	cmp	r3, #0
 800f732:	da54      	bge.n	800f7de <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f734:	4b5e      	ldr	r3, [pc, #376]	; (800f8b0 <tcp_receive+0x5dc>)
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	b29a      	uxth	r2, r3
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f73e:	b29b      	uxth	r3, r3
 800f740:	1ad3      	subs	r3, r2, r3
 800f742:	b29b      	uxth	r3, r3
 800f744:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f748:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f752:	10db      	asrs	r3, r3, #3
 800f754:	b21b      	sxth	r3, r3
 800f756:	b29b      	uxth	r3, r3
 800f758:	1ad3      	subs	r3, r2, r3
 800f75a:	b29b      	uxth	r3, r3
 800f75c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f766:	b29a      	uxth	r2, r3
 800f768:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f76c:	4413      	add	r3, r2
 800f76e:	b29b      	uxth	r3, r3
 800f770:	b21a      	sxth	r2, r3
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f776:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	da05      	bge.n	800f78a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800f77e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f782:	425b      	negs	r3, r3
 800f784:	b29b      	uxth	r3, r3
 800f786:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f78a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f794:	109b      	asrs	r3, r3, #2
 800f796:	b21b      	sxth	r3, r3
 800f798:	b29b      	uxth	r3, r3
 800f79a:	1ad3      	subs	r3, r2, r3
 800f79c:	b29b      	uxth	r3, r3
 800f79e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f7a8:	b29a      	uxth	r2, r3
 800f7aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f7ae:	4413      	add	r3, r2
 800f7b0:	b29b      	uxth	r3, r3
 800f7b2:	b21a      	sxth	r2, r3
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f7be:	10db      	asrs	r3, r3, #3
 800f7c0:	b21b      	sxth	r3, r3
 800f7c2:	b29a      	uxth	r2, r3
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f7ca:	b29b      	uxth	r3, r3
 800f7cc:	4413      	add	r3, r2
 800f7ce:	b29b      	uxth	r3, r3
 800f7d0:	b21a      	sxth	r2, r3
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2200      	movs	r2, #0
 800f7dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f7de:	4b35      	ldr	r3, [pc, #212]	; (800f8b4 <tcp_receive+0x5e0>)
 800f7e0:	881b      	ldrh	r3, [r3, #0]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	f000 84e1 	beq.w	80101aa <tcp_receive+0xed6>
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	7d1b      	ldrb	r3, [r3, #20]
 800f7ec:	2b06      	cmp	r3, #6
 800f7ee:	f200 84dc 	bhi.w	80101aa <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f7f6:	4b30      	ldr	r3, [pc, #192]	; (800f8b8 <tcp_receive+0x5e4>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	1ad3      	subs	r3, r2, r3
 800f7fc:	3b01      	subs	r3, #1
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	f2c0 808e 	blt.w	800f920 <tcp_receive+0x64c>
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f808:	4b2a      	ldr	r3, [pc, #168]	; (800f8b4 <tcp_receive+0x5e0>)
 800f80a:	881b      	ldrh	r3, [r3, #0]
 800f80c:	4619      	mov	r1, r3
 800f80e:	4b2a      	ldr	r3, [pc, #168]	; (800f8b8 <tcp_receive+0x5e4>)
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	440b      	add	r3, r1
 800f814:	1ad3      	subs	r3, r2, r3
 800f816:	3301      	adds	r3, #1
 800f818:	2b00      	cmp	r3, #0
 800f81a:	f300 8081 	bgt.w	800f920 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f81e:	4b27      	ldr	r3, [pc, #156]	; (800f8bc <tcp_receive+0x5e8>)
 800f820:	685b      	ldr	r3, [r3, #4]
 800f822:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f828:	4b23      	ldr	r3, [pc, #140]	; (800f8b8 <tcp_receive+0x5e4>)
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	1ad3      	subs	r3, r2, r3
 800f82e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f830:	4b22      	ldr	r3, [pc, #136]	; (800f8bc <tcp_receive+0x5e8>)
 800f832:	685b      	ldr	r3, [r3, #4]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d106      	bne.n	800f846 <tcp_receive+0x572>
 800f838:	4b21      	ldr	r3, [pc, #132]	; (800f8c0 <tcp_receive+0x5ec>)
 800f83a:	f240 5294 	movw	r2, #1428	; 0x594
 800f83e:	4921      	ldr	r1, [pc, #132]	; (800f8c4 <tcp_receive+0x5f0>)
 800f840:	4821      	ldr	r0, [pc, #132]	; (800f8c8 <tcp_receive+0x5f4>)
 800f842:	f005 fd77 	bl	8015334 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f848:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f84c:	4293      	cmp	r3, r2
 800f84e:	d906      	bls.n	800f85e <tcp_receive+0x58a>
 800f850:	4b1b      	ldr	r3, [pc, #108]	; (800f8c0 <tcp_receive+0x5ec>)
 800f852:	f240 5295 	movw	r2, #1429	; 0x595
 800f856:	491d      	ldr	r1, [pc, #116]	; (800f8cc <tcp_receive+0x5f8>)
 800f858:	481b      	ldr	r0, [pc, #108]	; (800f8c8 <tcp_receive+0x5f4>)
 800f85a:	f005 fd6b 	bl	8015334 <iprintf>
      off = (u16_t)off32;
 800f85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f860:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f864:	4b15      	ldr	r3, [pc, #84]	; (800f8bc <tcp_receive+0x5e8>)
 800f866:	685b      	ldr	r3, [r3, #4]
 800f868:	891b      	ldrh	r3, [r3, #8]
 800f86a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f86e:	429a      	cmp	r2, r3
 800f870:	d906      	bls.n	800f880 <tcp_receive+0x5ac>
 800f872:	4b13      	ldr	r3, [pc, #76]	; (800f8c0 <tcp_receive+0x5ec>)
 800f874:	f240 5297 	movw	r2, #1431	; 0x597
 800f878:	4915      	ldr	r1, [pc, #84]	; (800f8d0 <tcp_receive+0x5fc>)
 800f87a:	4813      	ldr	r0, [pc, #76]	; (800f8c8 <tcp_receive+0x5f4>)
 800f87c:	f005 fd5a 	bl	8015334 <iprintf>
      inseg.len -= off;
 800f880:	4b0e      	ldr	r3, [pc, #56]	; (800f8bc <tcp_receive+0x5e8>)
 800f882:	891a      	ldrh	r2, [r3, #8]
 800f884:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f888:	1ad3      	subs	r3, r2, r3
 800f88a:	b29a      	uxth	r2, r3
 800f88c:	4b0b      	ldr	r3, [pc, #44]	; (800f8bc <tcp_receive+0x5e8>)
 800f88e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f890:	4b0a      	ldr	r3, [pc, #40]	; (800f8bc <tcp_receive+0x5e8>)
 800f892:	685b      	ldr	r3, [r3, #4]
 800f894:	891a      	ldrh	r2, [r3, #8]
 800f896:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f89a:	1ad3      	subs	r3, r2, r3
 800f89c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f89e:	e029      	b.n	800f8f4 <tcp_receive+0x620>
 800f8a0:	08018864 	.word	0x08018864
 800f8a4:	0801886c 	.word	0x0801886c
 800f8a8:	200040c8 	.word	0x200040c8
 800f8ac:	200040c4 	.word	0x200040c4
 800f8b0:	2000ab1c 	.word	0x2000ab1c
 800f8b4:	200040ca 	.word	0x200040ca
 800f8b8:	200040c0 	.word	0x200040c0
 800f8bc:	200040a0 	.word	0x200040a0
 800f8c0:	080184fc 	.word	0x080184fc
 800f8c4:	08018874 	.word	0x08018874
 800f8c8:	08018548 	.word	0x08018548
 800f8cc:	08018884 	.word	0x08018884
 800f8d0:	08018894 	.word	0x08018894
        off -= p->len;
 800f8d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8d6:	895b      	ldrh	r3, [r3, #10]
 800f8d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f8dc:	1ad3      	subs	r3, r2, r3
 800f8de:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f8e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8e4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f8e6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f8e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f8ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f8f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8f6:	895b      	ldrh	r3, [r3, #10]
 800f8f8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f8fc:	429a      	cmp	r2, r3
 800f8fe:	d8e9      	bhi.n	800f8d4 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f900:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f904:	4619      	mov	r1, r3
 800f906:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f908:	f7fc f864 	bl	800b9d4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f910:	4a91      	ldr	r2, [pc, #580]	; (800fb58 <tcp_receive+0x884>)
 800f912:	6013      	str	r3, [r2, #0]
 800f914:	4b91      	ldr	r3, [pc, #580]	; (800fb5c <tcp_receive+0x888>)
 800f916:	68db      	ldr	r3, [r3, #12]
 800f918:	4a8f      	ldr	r2, [pc, #572]	; (800fb58 <tcp_receive+0x884>)
 800f91a:	6812      	ldr	r2, [r2, #0]
 800f91c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f91e:	e00d      	b.n	800f93c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f920:	4b8d      	ldr	r3, [pc, #564]	; (800fb58 <tcp_receive+0x884>)
 800f922:	681a      	ldr	r2, [r3, #0]
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f928:	1ad3      	subs	r3, r2, r3
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	da06      	bge.n	800f93c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	8b5b      	ldrh	r3, [r3, #26]
 800f932:	f043 0302 	orr.w	r3, r3, #2
 800f936:	b29a      	uxth	r2, r3
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f93c:	4b86      	ldr	r3, [pc, #536]	; (800fb58 <tcp_receive+0x884>)
 800f93e:	681a      	ldr	r2, [r3, #0]
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f944:	1ad3      	subs	r3, r2, r3
 800f946:	2b00      	cmp	r3, #0
 800f948:	f2c0 842a 	blt.w	80101a0 <tcp_receive+0xecc>
 800f94c:	4b82      	ldr	r3, [pc, #520]	; (800fb58 <tcp_receive+0x884>)
 800f94e:	681a      	ldr	r2, [r3, #0]
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f954:	6879      	ldr	r1, [r7, #4]
 800f956:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f958:	440b      	add	r3, r1
 800f95a:	1ad3      	subs	r3, r2, r3
 800f95c:	3301      	adds	r3, #1
 800f95e:	2b00      	cmp	r3, #0
 800f960:	f300 841e 	bgt.w	80101a0 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f968:	4b7b      	ldr	r3, [pc, #492]	; (800fb58 <tcp_receive+0x884>)
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	429a      	cmp	r2, r3
 800f96e:	f040 829a 	bne.w	800fea6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f972:	4b7a      	ldr	r3, [pc, #488]	; (800fb5c <tcp_receive+0x888>)
 800f974:	891c      	ldrh	r4, [r3, #8]
 800f976:	4b79      	ldr	r3, [pc, #484]	; (800fb5c <tcp_receive+0x888>)
 800f978:	68db      	ldr	r3, [r3, #12]
 800f97a:	899b      	ldrh	r3, [r3, #12]
 800f97c:	b29b      	uxth	r3, r3
 800f97e:	4618      	mov	r0, r3
 800f980:	f7fa fcda 	bl	800a338 <lwip_htons>
 800f984:	4603      	mov	r3, r0
 800f986:	b2db      	uxtb	r3, r3
 800f988:	f003 0303 	and.w	r3, r3, #3
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d001      	beq.n	800f994 <tcp_receive+0x6c0>
 800f990:	2301      	movs	r3, #1
 800f992:	e000      	b.n	800f996 <tcp_receive+0x6c2>
 800f994:	2300      	movs	r3, #0
 800f996:	4423      	add	r3, r4
 800f998:	b29a      	uxth	r2, r3
 800f99a:	4b71      	ldr	r3, [pc, #452]	; (800fb60 <tcp_receive+0x88c>)
 800f99c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f9a2:	4b6f      	ldr	r3, [pc, #444]	; (800fb60 <tcp_receive+0x88c>)
 800f9a4:	881b      	ldrh	r3, [r3, #0]
 800f9a6:	429a      	cmp	r2, r3
 800f9a8:	d275      	bcs.n	800fa96 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f9aa:	4b6c      	ldr	r3, [pc, #432]	; (800fb5c <tcp_receive+0x888>)
 800f9ac:	68db      	ldr	r3, [r3, #12]
 800f9ae:	899b      	ldrh	r3, [r3, #12]
 800f9b0:	b29b      	uxth	r3, r3
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	f7fa fcc0 	bl	800a338 <lwip_htons>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	b2db      	uxtb	r3, r3
 800f9bc:	f003 0301 	and.w	r3, r3, #1
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d01f      	beq.n	800fa04 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f9c4:	4b65      	ldr	r3, [pc, #404]	; (800fb5c <tcp_receive+0x888>)
 800f9c6:	68db      	ldr	r3, [r3, #12]
 800f9c8:	899b      	ldrh	r3, [r3, #12]
 800f9ca:	b29b      	uxth	r3, r3
 800f9cc:	b21b      	sxth	r3, r3
 800f9ce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f9d2:	b21c      	sxth	r4, r3
 800f9d4:	4b61      	ldr	r3, [pc, #388]	; (800fb5c <tcp_receive+0x888>)
 800f9d6:	68db      	ldr	r3, [r3, #12]
 800f9d8:	899b      	ldrh	r3, [r3, #12]
 800f9da:	b29b      	uxth	r3, r3
 800f9dc:	4618      	mov	r0, r3
 800f9de:	f7fa fcab 	bl	800a338 <lwip_htons>
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	b2db      	uxtb	r3, r3
 800f9e6:	b29b      	uxth	r3, r3
 800f9e8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f9ec:	b29b      	uxth	r3, r3
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	f7fa fca2 	bl	800a338 <lwip_htons>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	b21b      	sxth	r3, r3
 800f9f8:	4323      	orrs	r3, r4
 800f9fa:	b21a      	sxth	r2, r3
 800f9fc:	4b57      	ldr	r3, [pc, #348]	; (800fb5c <tcp_receive+0x888>)
 800f9fe:	68db      	ldr	r3, [r3, #12]
 800fa00:	b292      	uxth	r2, r2
 800fa02:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fa08:	4b54      	ldr	r3, [pc, #336]	; (800fb5c <tcp_receive+0x888>)
 800fa0a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fa0c:	4b53      	ldr	r3, [pc, #332]	; (800fb5c <tcp_receive+0x888>)
 800fa0e:	68db      	ldr	r3, [r3, #12]
 800fa10:	899b      	ldrh	r3, [r3, #12]
 800fa12:	b29b      	uxth	r3, r3
 800fa14:	4618      	mov	r0, r3
 800fa16:	f7fa fc8f 	bl	800a338 <lwip_htons>
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	b2db      	uxtb	r3, r3
 800fa1e:	f003 0302 	and.w	r3, r3, #2
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d005      	beq.n	800fa32 <tcp_receive+0x75e>
            inseg.len -= 1;
 800fa26:	4b4d      	ldr	r3, [pc, #308]	; (800fb5c <tcp_receive+0x888>)
 800fa28:	891b      	ldrh	r3, [r3, #8]
 800fa2a:	3b01      	subs	r3, #1
 800fa2c:	b29a      	uxth	r2, r3
 800fa2e:	4b4b      	ldr	r3, [pc, #300]	; (800fb5c <tcp_receive+0x888>)
 800fa30:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800fa32:	4b4a      	ldr	r3, [pc, #296]	; (800fb5c <tcp_receive+0x888>)
 800fa34:	685b      	ldr	r3, [r3, #4]
 800fa36:	4a49      	ldr	r2, [pc, #292]	; (800fb5c <tcp_receive+0x888>)
 800fa38:	8912      	ldrh	r2, [r2, #8]
 800fa3a:	4611      	mov	r1, r2
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	f7fb fec9 	bl	800b7d4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800fa42:	4b46      	ldr	r3, [pc, #280]	; (800fb5c <tcp_receive+0x888>)
 800fa44:	891c      	ldrh	r4, [r3, #8]
 800fa46:	4b45      	ldr	r3, [pc, #276]	; (800fb5c <tcp_receive+0x888>)
 800fa48:	68db      	ldr	r3, [r3, #12]
 800fa4a:	899b      	ldrh	r3, [r3, #12]
 800fa4c:	b29b      	uxth	r3, r3
 800fa4e:	4618      	mov	r0, r3
 800fa50:	f7fa fc72 	bl	800a338 <lwip_htons>
 800fa54:	4603      	mov	r3, r0
 800fa56:	b2db      	uxtb	r3, r3
 800fa58:	f003 0303 	and.w	r3, r3, #3
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d001      	beq.n	800fa64 <tcp_receive+0x790>
 800fa60:	2301      	movs	r3, #1
 800fa62:	e000      	b.n	800fa66 <tcp_receive+0x792>
 800fa64:	2300      	movs	r3, #0
 800fa66:	4423      	add	r3, r4
 800fa68:	b29a      	uxth	r2, r3
 800fa6a:	4b3d      	ldr	r3, [pc, #244]	; (800fb60 <tcp_receive+0x88c>)
 800fa6c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fa6e:	4b3c      	ldr	r3, [pc, #240]	; (800fb60 <tcp_receive+0x88c>)
 800fa70:	881b      	ldrh	r3, [r3, #0]
 800fa72:	461a      	mov	r2, r3
 800fa74:	4b38      	ldr	r3, [pc, #224]	; (800fb58 <tcp_receive+0x884>)
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	441a      	add	r2, r3
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa7e:	6879      	ldr	r1, [r7, #4]
 800fa80:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fa82:	440b      	add	r3, r1
 800fa84:	429a      	cmp	r2, r3
 800fa86:	d006      	beq.n	800fa96 <tcp_receive+0x7c2>
 800fa88:	4b36      	ldr	r3, [pc, #216]	; (800fb64 <tcp_receive+0x890>)
 800fa8a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800fa8e:	4936      	ldr	r1, [pc, #216]	; (800fb68 <tcp_receive+0x894>)
 800fa90:	4836      	ldr	r0, [pc, #216]	; (800fb6c <tcp_receive+0x898>)
 800fa92:	f005 fc4f 	bl	8015334 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	f000 80e7 	beq.w	800fc6e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800faa0:	4b2e      	ldr	r3, [pc, #184]	; (800fb5c <tcp_receive+0x888>)
 800faa2:	68db      	ldr	r3, [r3, #12]
 800faa4:	899b      	ldrh	r3, [r3, #12]
 800faa6:	b29b      	uxth	r3, r3
 800faa8:	4618      	mov	r0, r3
 800faaa:	f7fa fc45 	bl	800a338 <lwip_htons>
 800faae:	4603      	mov	r3, r0
 800fab0:	b2db      	uxtb	r3, r3
 800fab2:	f003 0301 	and.w	r3, r3, #1
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d010      	beq.n	800fadc <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800faba:	e00a      	b.n	800fad2 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fac0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fac6:	681a      	ldr	r2, [r3, #0]
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800facc:	68f8      	ldr	r0, [r7, #12]
 800face:	f7fd fce0 	bl	800d492 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d1f0      	bne.n	800fabc <tcp_receive+0x7e8>
 800fada:	e0c8      	b.n	800fc6e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fae0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800fae2:	e052      	b.n	800fb8a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fae6:	68db      	ldr	r3, [r3, #12]
 800fae8:	899b      	ldrh	r3, [r3, #12]
 800faea:	b29b      	uxth	r3, r3
 800faec:	4618      	mov	r0, r3
 800faee:	f7fa fc23 	bl	800a338 <lwip_htons>
 800faf2:	4603      	mov	r3, r0
 800faf4:	b2db      	uxtb	r3, r3
 800faf6:	f003 0301 	and.w	r3, r3, #1
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d03d      	beq.n	800fb7a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800fafe:	4b17      	ldr	r3, [pc, #92]	; (800fb5c <tcp_receive+0x888>)
 800fb00:	68db      	ldr	r3, [r3, #12]
 800fb02:	899b      	ldrh	r3, [r3, #12]
 800fb04:	b29b      	uxth	r3, r3
 800fb06:	4618      	mov	r0, r3
 800fb08:	f7fa fc16 	bl	800a338 <lwip_htons>
 800fb0c:	4603      	mov	r3, r0
 800fb0e:	b2db      	uxtb	r3, r3
 800fb10:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d130      	bne.n	800fb7a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800fb18:	4b10      	ldr	r3, [pc, #64]	; (800fb5c <tcp_receive+0x888>)
 800fb1a:	68db      	ldr	r3, [r3, #12]
 800fb1c:	899b      	ldrh	r3, [r3, #12]
 800fb1e:	b29c      	uxth	r4, r3
 800fb20:	2001      	movs	r0, #1
 800fb22:	f7fa fc09 	bl	800a338 <lwip_htons>
 800fb26:	4603      	mov	r3, r0
 800fb28:	461a      	mov	r2, r3
 800fb2a:	4b0c      	ldr	r3, [pc, #48]	; (800fb5c <tcp_receive+0x888>)
 800fb2c:	68db      	ldr	r3, [r3, #12]
 800fb2e:	4322      	orrs	r2, r4
 800fb30:	b292      	uxth	r2, r2
 800fb32:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800fb34:	4b09      	ldr	r3, [pc, #36]	; (800fb5c <tcp_receive+0x888>)
 800fb36:	891c      	ldrh	r4, [r3, #8]
 800fb38:	4b08      	ldr	r3, [pc, #32]	; (800fb5c <tcp_receive+0x888>)
 800fb3a:	68db      	ldr	r3, [r3, #12]
 800fb3c:	899b      	ldrh	r3, [r3, #12]
 800fb3e:	b29b      	uxth	r3, r3
 800fb40:	4618      	mov	r0, r3
 800fb42:	f7fa fbf9 	bl	800a338 <lwip_htons>
 800fb46:	4603      	mov	r3, r0
 800fb48:	b2db      	uxtb	r3, r3
 800fb4a:	f003 0303 	and.w	r3, r3, #3
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d00e      	beq.n	800fb70 <tcp_receive+0x89c>
 800fb52:	2301      	movs	r3, #1
 800fb54:	e00d      	b.n	800fb72 <tcp_receive+0x89e>
 800fb56:	bf00      	nop
 800fb58:	200040c0 	.word	0x200040c0
 800fb5c:	200040a0 	.word	0x200040a0
 800fb60:	200040ca 	.word	0x200040ca
 800fb64:	080184fc 	.word	0x080184fc
 800fb68:	080188a4 	.word	0x080188a4
 800fb6c:	08018548 	.word	0x08018548
 800fb70:	2300      	movs	r3, #0
 800fb72:	4423      	add	r3, r4
 800fb74:	b29a      	uxth	r2, r3
 800fb76:	4b98      	ldr	r3, [pc, #608]	; (800fdd8 <tcp_receive+0xb04>)
 800fb78:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800fb7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb7c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800fb7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800fb84:	6938      	ldr	r0, [r7, #16]
 800fb86:	f7fd fc84 	bl	800d492 <tcp_seg_free>
            while (next &&
 800fb8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d00e      	beq.n	800fbae <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800fb90:	4b91      	ldr	r3, [pc, #580]	; (800fdd8 <tcp_receive+0xb04>)
 800fb92:	881b      	ldrh	r3, [r3, #0]
 800fb94:	461a      	mov	r2, r3
 800fb96:	4b91      	ldr	r3, [pc, #580]	; (800fddc <tcp_receive+0xb08>)
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	441a      	add	r2, r3
 800fb9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb9e:	68db      	ldr	r3, [r3, #12]
 800fba0:	685b      	ldr	r3, [r3, #4]
 800fba2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fba4:	8909      	ldrh	r1, [r1, #8]
 800fba6:	440b      	add	r3, r1
 800fba8:	1ad3      	subs	r3, r2, r3
            while (next &&
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	da9a      	bge.n	800fae4 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800fbae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d059      	beq.n	800fc68 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800fbb4:	4b88      	ldr	r3, [pc, #544]	; (800fdd8 <tcp_receive+0xb04>)
 800fbb6:	881b      	ldrh	r3, [r3, #0]
 800fbb8:	461a      	mov	r2, r3
 800fbba:	4b88      	ldr	r3, [pc, #544]	; (800fddc <tcp_receive+0xb08>)
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	441a      	add	r2, r3
 800fbc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbc2:	68db      	ldr	r3, [r3, #12]
 800fbc4:	685b      	ldr	r3, [r3, #4]
 800fbc6:	1ad3      	subs	r3, r2, r3
            if (next &&
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	dd4d      	ble.n	800fc68 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800fbcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbce:	68db      	ldr	r3, [r3, #12]
 800fbd0:	685b      	ldr	r3, [r3, #4]
 800fbd2:	b29a      	uxth	r2, r3
 800fbd4:	4b81      	ldr	r3, [pc, #516]	; (800fddc <tcp_receive+0xb08>)
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	b29b      	uxth	r3, r3
 800fbda:	1ad3      	subs	r3, r2, r3
 800fbdc:	b29a      	uxth	r2, r3
 800fbde:	4b80      	ldr	r3, [pc, #512]	; (800fde0 <tcp_receive+0xb0c>)
 800fbe0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fbe2:	4b7f      	ldr	r3, [pc, #508]	; (800fde0 <tcp_receive+0xb0c>)
 800fbe4:	68db      	ldr	r3, [r3, #12]
 800fbe6:	899b      	ldrh	r3, [r3, #12]
 800fbe8:	b29b      	uxth	r3, r3
 800fbea:	4618      	mov	r0, r3
 800fbec:	f7fa fba4 	bl	800a338 <lwip_htons>
 800fbf0:	4603      	mov	r3, r0
 800fbf2:	b2db      	uxtb	r3, r3
 800fbf4:	f003 0302 	and.w	r3, r3, #2
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d005      	beq.n	800fc08 <tcp_receive+0x934>
                inseg.len -= 1;
 800fbfc:	4b78      	ldr	r3, [pc, #480]	; (800fde0 <tcp_receive+0xb0c>)
 800fbfe:	891b      	ldrh	r3, [r3, #8]
 800fc00:	3b01      	subs	r3, #1
 800fc02:	b29a      	uxth	r2, r3
 800fc04:	4b76      	ldr	r3, [pc, #472]	; (800fde0 <tcp_receive+0xb0c>)
 800fc06:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800fc08:	4b75      	ldr	r3, [pc, #468]	; (800fde0 <tcp_receive+0xb0c>)
 800fc0a:	685b      	ldr	r3, [r3, #4]
 800fc0c:	4a74      	ldr	r2, [pc, #464]	; (800fde0 <tcp_receive+0xb0c>)
 800fc0e:	8912      	ldrh	r2, [r2, #8]
 800fc10:	4611      	mov	r1, r2
 800fc12:	4618      	mov	r0, r3
 800fc14:	f7fb fdde 	bl	800b7d4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800fc18:	4b71      	ldr	r3, [pc, #452]	; (800fde0 <tcp_receive+0xb0c>)
 800fc1a:	891c      	ldrh	r4, [r3, #8]
 800fc1c:	4b70      	ldr	r3, [pc, #448]	; (800fde0 <tcp_receive+0xb0c>)
 800fc1e:	68db      	ldr	r3, [r3, #12]
 800fc20:	899b      	ldrh	r3, [r3, #12]
 800fc22:	b29b      	uxth	r3, r3
 800fc24:	4618      	mov	r0, r3
 800fc26:	f7fa fb87 	bl	800a338 <lwip_htons>
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	b2db      	uxtb	r3, r3
 800fc2e:	f003 0303 	and.w	r3, r3, #3
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d001      	beq.n	800fc3a <tcp_receive+0x966>
 800fc36:	2301      	movs	r3, #1
 800fc38:	e000      	b.n	800fc3c <tcp_receive+0x968>
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	4423      	add	r3, r4
 800fc3e:	b29a      	uxth	r2, r3
 800fc40:	4b65      	ldr	r3, [pc, #404]	; (800fdd8 <tcp_receive+0xb04>)
 800fc42:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800fc44:	4b64      	ldr	r3, [pc, #400]	; (800fdd8 <tcp_receive+0xb04>)
 800fc46:	881b      	ldrh	r3, [r3, #0]
 800fc48:	461a      	mov	r2, r3
 800fc4a:	4b64      	ldr	r3, [pc, #400]	; (800fddc <tcp_receive+0xb08>)
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	441a      	add	r2, r3
 800fc50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc52:	68db      	ldr	r3, [r3, #12]
 800fc54:	685b      	ldr	r3, [r3, #4]
 800fc56:	429a      	cmp	r2, r3
 800fc58:	d006      	beq.n	800fc68 <tcp_receive+0x994>
 800fc5a:	4b62      	ldr	r3, [pc, #392]	; (800fde4 <tcp_receive+0xb10>)
 800fc5c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800fc60:	4961      	ldr	r1, [pc, #388]	; (800fde8 <tcp_receive+0xb14>)
 800fc62:	4862      	ldr	r0, [pc, #392]	; (800fdec <tcp_receive+0xb18>)
 800fc64:	f005 fb66 	bl	8015334 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fc6c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800fc6e:	4b5a      	ldr	r3, [pc, #360]	; (800fdd8 <tcp_receive+0xb04>)
 800fc70:	881b      	ldrh	r3, [r3, #0]
 800fc72:	461a      	mov	r2, r3
 800fc74:	4b59      	ldr	r3, [pc, #356]	; (800fddc <tcp_receive+0xb08>)
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	441a      	add	r2, r3
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fc82:	4b55      	ldr	r3, [pc, #340]	; (800fdd8 <tcp_receive+0xb04>)
 800fc84:	881b      	ldrh	r3, [r3, #0]
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d206      	bcs.n	800fc98 <tcp_receive+0x9c4>
 800fc8a:	4b56      	ldr	r3, [pc, #344]	; (800fde4 <tcp_receive+0xb10>)
 800fc8c:	f240 6207 	movw	r2, #1543	; 0x607
 800fc90:	4957      	ldr	r1, [pc, #348]	; (800fdf0 <tcp_receive+0xb1c>)
 800fc92:	4856      	ldr	r0, [pc, #344]	; (800fdec <tcp_receive+0xb18>)
 800fc94:	f005 fb4e 	bl	8015334 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fc9c:	4b4e      	ldr	r3, [pc, #312]	; (800fdd8 <tcp_receive+0xb04>)
 800fc9e:	881b      	ldrh	r3, [r3, #0]
 800fca0:	1ad3      	subs	r3, r2, r3
 800fca2:	b29a      	uxth	r2, r3
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800fca8:	6878      	ldr	r0, [r7, #4]
 800fcaa:	f7fc fdb5 	bl	800c818 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800fcae:	4b4c      	ldr	r3, [pc, #304]	; (800fde0 <tcp_receive+0xb0c>)
 800fcb0:	685b      	ldr	r3, [r3, #4]
 800fcb2:	891b      	ldrh	r3, [r3, #8]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d006      	beq.n	800fcc6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800fcb8:	4b49      	ldr	r3, [pc, #292]	; (800fde0 <tcp_receive+0xb0c>)
 800fcba:	685b      	ldr	r3, [r3, #4]
 800fcbc:	4a4d      	ldr	r2, [pc, #308]	; (800fdf4 <tcp_receive+0xb20>)
 800fcbe:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800fcc0:	4b47      	ldr	r3, [pc, #284]	; (800fde0 <tcp_receive+0xb0c>)
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fcc6:	4b46      	ldr	r3, [pc, #280]	; (800fde0 <tcp_receive+0xb0c>)
 800fcc8:	68db      	ldr	r3, [r3, #12]
 800fcca:	899b      	ldrh	r3, [r3, #12]
 800fccc:	b29b      	uxth	r3, r3
 800fcce:	4618      	mov	r0, r3
 800fcd0:	f7fa fb32 	bl	800a338 <lwip_htons>
 800fcd4:	4603      	mov	r3, r0
 800fcd6:	b2db      	uxtb	r3, r3
 800fcd8:	f003 0301 	and.w	r3, r3, #1
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	f000 80b8 	beq.w	800fe52 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800fce2:	4b45      	ldr	r3, [pc, #276]	; (800fdf8 <tcp_receive+0xb24>)
 800fce4:	781b      	ldrb	r3, [r3, #0]
 800fce6:	f043 0320 	orr.w	r3, r3, #32
 800fcea:	b2da      	uxtb	r2, r3
 800fcec:	4b42      	ldr	r3, [pc, #264]	; (800fdf8 <tcp_receive+0xb24>)
 800fcee:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800fcf0:	e0af      	b.n	800fe52 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fcf6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fcfc:	68db      	ldr	r3, [r3, #12]
 800fcfe:	685b      	ldr	r3, [r3, #4]
 800fd00:	4a36      	ldr	r2, [pc, #216]	; (800fddc <tcp_receive+0xb08>)
 800fd02:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800fd04:	68bb      	ldr	r3, [r7, #8]
 800fd06:	891b      	ldrh	r3, [r3, #8]
 800fd08:	461c      	mov	r4, r3
 800fd0a:	68bb      	ldr	r3, [r7, #8]
 800fd0c:	68db      	ldr	r3, [r3, #12]
 800fd0e:	899b      	ldrh	r3, [r3, #12]
 800fd10:	b29b      	uxth	r3, r3
 800fd12:	4618      	mov	r0, r3
 800fd14:	f7fa fb10 	bl	800a338 <lwip_htons>
 800fd18:	4603      	mov	r3, r0
 800fd1a:	b2db      	uxtb	r3, r3
 800fd1c:	f003 0303 	and.w	r3, r3, #3
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d001      	beq.n	800fd28 <tcp_receive+0xa54>
 800fd24:	2301      	movs	r3, #1
 800fd26:	e000      	b.n	800fd2a <tcp_receive+0xa56>
 800fd28:	2300      	movs	r3, #0
 800fd2a:	191a      	adds	r2, r3, r4
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd30:	441a      	add	r2, r3
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fd3a:	461c      	mov	r4, r3
 800fd3c:	68bb      	ldr	r3, [r7, #8]
 800fd3e:	891b      	ldrh	r3, [r3, #8]
 800fd40:	461d      	mov	r5, r3
 800fd42:	68bb      	ldr	r3, [r7, #8]
 800fd44:	68db      	ldr	r3, [r3, #12]
 800fd46:	899b      	ldrh	r3, [r3, #12]
 800fd48:	b29b      	uxth	r3, r3
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	f7fa faf4 	bl	800a338 <lwip_htons>
 800fd50:	4603      	mov	r3, r0
 800fd52:	b2db      	uxtb	r3, r3
 800fd54:	f003 0303 	and.w	r3, r3, #3
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d001      	beq.n	800fd60 <tcp_receive+0xa8c>
 800fd5c:	2301      	movs	r3, #1
 800fd5e:	e000      	b.n	800fd62 <tcp_receive+0xa8e>
 800fd60:	2300      	movs	r3, #0
 800fd62:	442b      	add	r3, r5
 800fd64:	429c      	cmp	r4, r3
 800fd66:	d206      	bcs.n	800fd76 <tcp_receive+0xaa2>
 800fd68:	4b1e      	ldr	r3, [pc, #120]	; (800fde4 <tcp_receive+0xb10>)
 800fd6a:	f240 622b 	movw	r2, #1579	; 0x62b
 800fd6e:	4923      	ldr	r1, [pc, #140]	; (800fdfc <tcp_receive+0xb28>)
 800fd70:	481e      	ldr	r0, [pc, #120]	; (800fdec <tcp_receive+0xb18>)
 800fd72:	f005 fadf 	bl	8015334 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800fd76:	68bb      	ldr	r3, [r7, #8]
 800fd78:	891b      	ldrh	r3, [r3, #8]
 800fd7a:	461c      	mov	r4, r3
 800fd7c:	68bb      	ldr	r3, [r7, #8]
 800fd7e:	68db      	ldr	r3, [r3, #12]
 800fd80:	899b      	ldrh	r3, [r3, #12]
 800fd82:	b29b      	uxth	r3, r3
 800fd84:	4618      	mov	r0, r3
 800fd86:	f7fa fad7 	bl	800a338 <lwip_htons>
 800fd8a:	4603      	mov	r3, r0
 800fd8c:	b2db      	uxtb	r3, r3
 800fd8e:	f003 0303 	and.w	r3, r3, #3
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d001      	beq.n	800fd9a <tcp_receive+0xac6>
 800fd96:	2301      	movs	r3, #1
 800fd98:	e000      	b.n	800fd9c <tcp_receive+0xac8>
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	1919      	adds	r1, r3, r4
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fda2:	b28b      	uxth	r3, r1
 800fda4:	1ad3      	subs	r3, r2, r3
 800fda6:	b29a      	uxth	r2, r3
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800fdac:	6878      	ldr	r0, [r7, #4]
 800fdae:	f7fc fd33 	bl	800c818 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800fdb2:	68bb      	ldr	r3, [r7, #8]
 800fdb4:	685b      	ldr	r3, [r3, #4]
 800fdb6:	891b      	ldrh	r3, [r3, #8]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d028      	beq.n	800fe0e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800fdbc:	4b0d      	ldr	r3, [pc, #52]	; (800fdf4 <tcp_receive+0xb20>)
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d01d      	beq.n	800fe00 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800fdc4:	4b0b      	ldr	r3, [pc, #44]	; (800fdf4 <tcp_receive+0xb20>)
 800fdc6:	681a      	ldr	r2, [r3, #0]
 800fdc8:	68bb      	ldr	r3, [r7, #8]
 800fdca:	685b      	ldr	r3, [r3, #4]
 800fdcc:	4619      	mov	r1, r3
 800fdce:	4610      	mov	r0, r2
 800fdd0:	f7fb ff54 	bl	800bc7c <pbuf_cat>
 800fdd4:	e018      	b.n	800fe08 <tcp_receive+0xb34>
 800fdd6:	bf00      	nop
 800fdd8:	200040ca 	.word	0x200040ca
 800fddc:	200040c0 	.word	0x200040c0
 800fde0:	200040a0 	.word	0x200040a0
 800fde4:	080184fc 	.word	0x080184fc
 800fde8:	080188dc 	.word	0x080188dc
 800fdec:	08018548 	.word	0x08018548
 800fdf0:	08018918 	.word	0x08018918
 800fdf4:	200040d0 	.word	0x200040d0
 800fdf8:	200040cd 	.word	0x200040cd
 800fdfc:	08018938 	.word	0x08018938
            } else {
              recv_data = cseg->p;
 800fe00:	68bb      	ldr	r3, [r7, #8]
 800fe02:	685b      	ldr	r3, [r3, #4]
 800fe04:	4a70      	ldr	r2, [pc, #448]	; (800ffc8 <tcp_receive+0xcf4>)
 800fe06:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800fe08:	68bb      	ldr	r3, [r7, #8]
 800fe0a:	2200      	movs	r2, #0
 800fe0c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fe0e:	68bb      	ldr	r3, [r7, #8]
 800fe10:	68db      	ldr	r3, [r3, #12]
 800fe12:	899b      	ldrh	r3, [r3, #12]
 800fe14:	b29b      	uxth	r3, r3
 800fe16:	4618      	mov	r0, r3
 800fe18:	f7fa fa8e 	bl	800a338 <lwip_htons>
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	b2db      	uxtb	r3, r3
 800fe20:	f003 0301 	and.w	r3, r3, #1
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d00d      	beq.n	800fe44 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800fe28:	4b68      	ldr	r3, [pc, #416]	; (800ffcc <tcp_receive+0xcf8>)
 800fe2a:	781b      	ldrb	r3, [r3, #0]
 800fe2c:	f043 0320 	orr.w	r3, r3, #32
 800fe30:	b2da      	uxtb	r2, r3
 800fe32:	4b66      	ldr	r3, [pc, #408]	; (800ffcc <tcp_receive+0xcf8>)
 800fe34:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	7d1b      	ldrb	r3, [r3, #20]
 800fe3a:	2b04      	cmp	r3, #4
 800fe3c:	d102      	bne.n	800fe44 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	2207      	movs	r2, #7
 800fe42:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800fe44:	68bb      	ldr	r3, [r7, #8]
 800fe46:	681a      	ldr	r2, [r3, #0]
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800fe4c:	68b8      	ldr	r0, [r7, #8]
 800fe4e:	f7fd fb20 	bl	800d492 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d008      	beq.n	800fe6c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe5e:	68db      	ldr	r3, [r3, #12]
 800fe60:	685a      	ldr	r2, [r3, #4]
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800fe66:	429a      	cmp	r2, r3
 800fe68:	f43f af43 	beq.w	800fcf2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	8b5b      	ldrh	r3, [r3, #26]
 800fe70:	f003 0301 	and.w	r3, r3, #1
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d00e      	beq.n	800fe96 <tcp_receive+0xbc2>
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	8b5b      	ldrh	r3, [r3, #26]
 800fe7c:	f023 0301 	bic.w	r3, r3, #1
 800fe80:	b29a      	uxth	r2, r3
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	835a      	strh	r2, [r3, #26]
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	8b5b      	ldrh	r3, [r3, #26]
 800fe8a:	f043 0302 	orr.w	r3, r3, #2
 800fe8e:	b29a      	uxth	r2, r3
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fe94:	e188      	b.n	80101a8 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	8b5b      	ldrh	r3, [r3, #26]
 800fe9a:	f043 0301 	orr.w	r3, r3, #1
 800fe9e:	b29a      	uxth	r2, r3
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fea4:	e180      	b.n	80101a8 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d106      	bne.n	800febc <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800feae:	4848      	ldr	r0, [pc, #288]	; (800ffd0 <tcp_receive+0xcfc>)
 800feb0:	f7fd fb08 	bl	800d4c4 <tcp_seg_copy>
 800feb4:	4602      	mov	r2, r0
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	675a      	str	r2, [r3, #116]	; 0x74
 800feba:	e16d      	b.n	8010198 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800febc:	2300      	movs	r3, #0
 800febe:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fec4:	63bb      	str	r3, [r7, #56]	; 0x38
 800fec6:	e157      	b.n	8010178 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800fec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feca:	68db      	ldr	r3, [r3, #12]
 800fecc:	685a      	ldr	r2, [r3, #4]
 800fece:	4b41      	ldr	r3, [pc, #260]	; (800ffd4 <tcp_receive+0xd00>)
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	429a      	cmp	r2, r3
 800fed4:	d11d      	bne.n	800ff12 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800fed6:	4b3e      	ldr	r3, [pc, #248]	; (800ffd0 <tcp_receive+0xcfc>)
 800fed8:	891a      	ldrh	r2, [r3, #8]
 800feda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fedc:	891b      	ldrh	r3, [r3, #8]
 800fede:	429a      	cmp	r2, r3
 800fee0:	f240 814f 	bls.w	8010182 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fee4:	483a      	ldr	r0, [pc, #232]	; (800ffd0 <tcp_receive+0xcfc>)
 800fee6:	f7fd faed 	bl	800d4c4 <tcp_seg_copy>
 800feea:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800feec:	697b      	ldr	r3, [r7, #20]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	f000 8149 	beq.w	8010186 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800fef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d003      	beq.n	800ff02 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800fefa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fefc:	697a      	ldr	r2, [r7, #20]
 800fefe:	601a      	str	r2, [r3, #0]
 800ff00:	e002      	b.n	800ff08 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	697a      	ldr	r2, [r7, #20]
 800ff06:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ff08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ff0a:	6978      	ldr	r0, [r7, #20]
 800ff0c:	f7ff f8de 	bl	800f0cc <tcp_oos_insert_segment>
                }
                break;
 800ff10:	e139      	b.n	8010186 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ff12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d117      	bne.n	800ff48 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ff18:	4b2e      	ldr	r3, [pc, #184]	; (800ffd4 <tcp_receive+0xd00>)
 800ff1a:	681a      	ldr	r2, [r3, #0]
 800ff1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff1e:	68db      	ldr	r3, [r3, #12]
 800ff20:	685b      	ldr	r3, [r3, #4]
 800ff22:	1ad3      	subs	r3, r2, r3
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	da57      	bge.n	800ffd8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ff28:	4829      	ldr	r0, [pc, #164]	; (800ffd0 <tcp_receive+0xcfc>)
 800ff2a:	f7fd facb 	bl	800d4c4 <tcp_seg_copy>
 800ff2e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ff30:	69bb      	ldr	r3, [r7, #24]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	f000 8129 	beq.w	801018a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	69ba      	ldr	r2, [r7, #24]
 800ff3c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ff3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ff40:	69b8      	ldr	r0, [r7, #24]
 800ff42:	f7ff f8c3 	bl	800f0cc <tcp_oos_insert_segment>
                  }
                  break;
 800ff46:	e120      	b.n	801018a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ff48:	4b22      	ldr	r3, [pc, #136]	; (800ffd4 <tcp_receive+0xd00>)
 800ff4a:	681a      	ldr	r2, [r3, #0]
 800ff4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff4e:	68db      	ldr	r3, [r3, #12]
 800ff50:	685b      	ldr	r3, [r3, #4]
 800ff52:	1ad3      	subs	r3, r2, r3
 800ff54:	3b01      	subs	r3, #1
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	db3e      	blt.n	800ffd8 <tcp_receive+0xd04>
 800ff5a:	4b1e      	ldr	r3, [pc, #120]	; (800ffd4 <tcp_receive+0xd00>)
 800ff5c:	681a      	ldr	r2, [r3, #0]
 800ff5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff60:	68db      	ldr	r3, [r3, #12]
 800ff62:	685b      	ldr	r3, [r3, #4]
 800ff64:	1ad3      	subs	r3, r2, r3
 800ff66:	3301      	adds	r3, #1
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	dc35      	bgt.n	800ffd8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ff6c:	4818      	ldr	r0, [pc, #96]	; (800ffd0 <tcp_receive+0xcfc>)
 800ff6e:	f7fd faa9 	bl	800d4c4 <tcp_seg_copy>
 800ff72:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800ff74:	69fb      	ldr	r3, [r7, #28]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	f000 8109 	beq.w	801018e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ff7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff7e:	68db      	ldr	r3, [r3, #12]
 800ff80:	685b      	ldr	r3, [r3, #4]
 800ff82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff84:	8912      	ldrh	r2, [r2, #8]
 800ff86:	441a      	add	r2, r3
 800ff88:	4b12      	ldr	r3, [pc, #72]	; (800ffd4 <tcp_receive+0xd00>)
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	1ad3      	subs	r3, r2, r3
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	dd12      	ble.n	800ffb8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ff92:	4b10      	ldr	r3, [pc, #64]	; (800ffd4 <tcp_receive+0xd00>)
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	b29a      	uxth	r2, r3
 800ff98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff9a:	68db      	ldr	r3, [r3, #12]
 800ff9c:	685b      	ldr	r3, [r3, #4]
 800ff9e:	b29b      	uxth	r3, r3
 800ffa0:	1ad3      	subs	r3, r2, r3
 800ffa2:	b29a      	uxth	r2, r3
 800ffa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffa6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ffa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffaa:	685a      	ldr	r2, [r3, #4]
 800ffac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffae:	891b      	ldrh	r3, [r3, #8]
 800ffb0:	4619      	mov	r1, r3
 800ffb2:	4610      	mov	r0, r2
 800ffb4:	f7fb fc0e 	bl	800b7d4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ffb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffba:	69fa      	ldr	r2, [r7, #28]
 800ffbc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ffbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ffc0:	69f8      	ldr	r0, [r7, #28]
 800ffc2:	f7ff f883 	bl	800f0cc <tcp_oos_insert_segment>
                  }
                  break;
 800ffc6:	e0e2      	b.n	801018e <tcp_receive+0xeba>
 800ffc8:	200040d0 	.word	0x200040d0
 800ffcc:	200040cd 	.word	0x200040cd
 800ffd0:	200040a0 	.word	0x200040a0
 800ffd4:	200040c0 	.word	0x200040c0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800ffd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffda:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ffdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	f040 80c6 	bne.w	8010172 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ffe6:	4b80      	ldr	r3, [pc, #512]	; (80101e8 <tcp_receive+0xf14>)
 800ffe8:	681a      	ldr	r2, [r3, #0]
 800ffea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffec:	68db      	ldr	r3, [r3, #12]
 800ffee:	685b      	ldr	r3, [r3, #4]
 800fff0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	f340 80bd 	ble.w	8010172 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fffa:	68db      	ldr	r3, [r3, #12]
 800fffc:	899b      	ldrh	r3, [r3, #12]
 800fffe:	b29b      	uxth	r3, r3
 8010000:	4618      	mov	r0, r3
 8010002:	f7fa f999 	bl	800a338 <lwip_htons>
 8010006:	4603      	mov	r3, r0
 8010008:	b2db      	uxtb	r3, r3
 801000a:	f003 0301 	and.w	r3, r3, #1
 801000e:	2b00      	cmp	r3, #0
 8010010:	f040 80bf 	bne.w	8010192 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010014:	4875      	ldr	r0, [pc, #468]	; (80101ec <tcp_receive+0xf18>)
 8010016:	f7fd fa55 	bl	800d4c4 <tcp_seg_copy>
 801001a:	4602      	mov	r2, r0
 801001c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801001e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	2b00      	cmp	r3, #0
 8010026:	f000 80b6 	beq.w	8010196 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801002a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801002c:	68db      	ldr	r3, [r3, #12]
 801002e:	685b      	ldr	r3, [r3, #4]
 8010030:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010032:	8912      	ldrh	r2, [r2, #8]
 8010034:	441a      	add	r2, r3
 8010036:	4b6c      	ldr	r3, [pc, #432]	; (80101e8 <tcp_receive+0xf14>)
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	1ad3      	subs	r3, r2, r3
 801003c:	2b00      	cmp	r3, #0
 801003e:	dd12      	ble.n	8010066 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010040:	4b69      	ldr	r3, [pc, #420]	; (80101e8 <tcp_receive+0xf14>)
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	b29a      	uxth	r2, r3
 8010046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010048:	68db      	ldr	r3, [r3, #12]
 801004a:	685b      	ldr	r3, [r3, #4]
 801004c:	b29b      	uxth	r3, r3
 801004e:	1ad3      	subs	r3, r2, r3
 8010050:	b29a      	uxth	r2, r3
 8010052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010054:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8010056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010058:	685a      	ldr	r2, [r3, #4]
 801005a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801005c:	891b      	ldrh	r3, [r3, #8]
 801005e:	4619      	mov	r1, r3
 8010060:	4610      	mov	r0, r2
 8010062:	f7fb fbb7 	bl	800b7d4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8010066:	4b62      	ldr	r3, [pc, #392]	; (80101f0 <tcp_receive+0xf1c>)
 8010068:	881b      	ldrh	r3, [r3, #0]
 801006a:	461a      	mov	r2, r3
 801006c:	4b5e      	ldr	r3, [pc, #376]	; (80101e8 <tcp_receive+0xf14>)
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	441a      	add	r2, r3
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010076:	6879      	ldr	r1, [r7, #4]
 8010078:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801007a:	440b      	add	r3, r1
 801007c:	1ad3      	subs	r3, r2, r3
 801007e:	2b00      	cmp	r3, #0
 8010080:	f340 8089 	ble.w	8010196 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	68db      	ldr	r3, [r3, #12]
 801008a:	899b      	ldrh	r3, [r3, #12]
 801008c:	b29b      	uxth	r3, r3
 801008e:	4618      	mov	r0, r3
 8010090:	f7fa f952 	bl	800a338 <lwip_htons>
 8010094:	4603      	mov	r3, r0
 8010096:	b2db      	uxtb	r3, r3
 8010098:	f003 0301 	and.w	r3, r3, #1
 801009c:	2b00      	cmp	r3, #0
 801009e:	d022      	beq.n	80100e6 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80100a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	68db      	ldr	r3, [r3, #12]
 80100a6:	899b      	ldrh	r3, [r3, #12]
 80100a8:	b29b      	uxth	r3, r3
 80100aa:	b21b      	sxth	r3, r3
 80100ac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80100b0:	b21c      	sxth	r4, r3
 80100b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	68db      	ldr	r3, [r3, #12]
 80100b8:	899b      	ldrh	r3, [r3, #12]
 80100ba:	b29b      	uxth	r3, r3
 80100bc:	4618      	mov	r0, r3
 80100be:	f7fa f93b 	bl	800a338 <lwip_htons>
 80100c2:	4603      	mov	r3, r0
 80100c4:	b2db      	uxtb	r3, r3
 80100c6:	b29b      	uxth	r3, r3
 80100c8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80100cc:	b29b      	uxth	r3, r3
 80100ce:	4618      	mov	r0, r3
 80100d0:	f7fa f932 	bl	800a338 <lwip_htons>
 80100d4:	4603      	mov	r3, r0
 80100d6:	b21b      	sxth	r3, r3
 80100d8:	4323      	orrs	r3, r4
 80100da:	b21a      	sxth	r2, r3
 80100dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	68db      	ldr	r3, [r3, #12]
 80100e2:	b292      	uxth	r2, r2
 80100e4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100ea:	b29a      	uxth	r2, r3
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80100f0:	4413      	add	r3, r2
 80100f2:	b299      	uxth	r1, r3
 80100f4:	4b3c      	ldr	r3, [pc, #240]	; (80101e8 <tcp_receive+0xf14>)
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	b29a      	uxth	r2, r3
 80100fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	1a8a      	subs	r2, r1, r2
 8010100:	b292      	uxth	r2, r2
 8010102:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	685a      	ldr	r2, [r3, #4]
 801010a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	891b      	ldrh	r3, [r3, #8]
 8010110:	4619      	mov	r1, r3
 8010112:	4610      	mov	r0, r2
 8010114:	f7fb fb5e 	bl	800b7d4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	891c      	ldrh	r4, [r3, #8]
 801011e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	68db      	ldr	r3, [r3, #12]
 8010124:	899b      	ldrh	r3, [r3, #12]
 8010126:	b29b      	uxth	r3, r3
 8010128:	4618      	mov	r0, r3
 801012a:	f7fa f905 	bl	800a338 <lwip_htons>
 801012e:	4603      	mov	r3, r0
 8010130:	b2db      	uxtb	r3, r3
 8010132:	f003 0303 	and.w	r3, r3, #3
 8010136:	2b00      	cmp	r3, #0
 8010138:	d001      	beq.n	801013e <tcp_receive+0xe6a>
 801013a:	2301      	movs	r3, #1
 801013c:	e000      	b.n	8010140 <tcp_receive+0xe6c>
 801013e:	2300      	movs	r3, #0
 8010140:	4423      	add	r3, r4
 8010142:	b29a      	uxth	r2, r3
 8010144:	4b2a      	ldr	r3, [pc, #168]	; (80101f0 <tcp_receive+0xf1c>)
 8010146:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010148:	4b29      	ldr	r3, [pc, #164]	; (80101f0 <tcp_receive+0xf1c>)
 801014a:	881b      	ldrh	r3, [r3, #0]
 801014c:	461a      	mov	r2, r3
 801014e:	4b26      	ldr	r3, [pc, #152]	; (80101e8 <tcp_receive+0xf14>)
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	441a      	add	r2, r3
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010158:	6879      	ldr	r1, [r7, #4]
 801015a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801015c:	440b      	add	r3, r1
 801015e:	429a      	cmp	r2, r3
 8010160:	d019      	beq.n	8010196 <tcp_receive+0xec2>
 8010162:	4b24      	ldr	r3, [pc, #144]	; (80101f4 <tcp_receive+0xf20>)
 8010164:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8010168:	4923      	ldr	r1, [pc, #140]	; (80101f8 <tcp_receive+0xf24>)
 801016a:	4824      	ldr	r0, [pc, #144]	; (80101fc <tcp_receive+0xf28>)
 801016c:	f005 f8e2 	bl	8015334 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8010170:	e011      	b.n	8010196 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	63bb      	str	r3, [r7, #56]	; 0x38
 8010178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801017a:	2b00      	cmp	r3, #0
 801017c:	f47f aea4 	bne.w	800fec8 <tcp_receive+0xbf4>
 8010180:	e00a      	b.n	8010198 <tcp_receive+0xec4>
                break;
 8010182:	bf00      	nop
 8010184:	e008      	b.n	8010198 <tcp_receive+0xec4>
                break;
 8010186:	bf00      	nop
 8010188:	e006      	b.n	8010198 <tcp_receive+0xec4>
                  break;
 801018a:	bf00      	nop
 801018c:	e004      	b.n	8010198 <tcp_receive+0xec4>
                  break;
 801018e:	bf00      	nop
 8010190:	e002      	b.n	8010198 <tcp_receive+0xec4>
                  break;
 8010192:	bf00      	nop
 8010194:	e000      	b.n	8010198 <tcp_receive+0xec4>
                break;
 8010196:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010198:	6878      	ldr	r0, [r7, #4]
 801019a:	f001 fe8b 	bl	8011eb4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801019e:	e003      	b.n	80101a8 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80101a0:	6878      	ldr	r0, [r7, #4]
 80101a2:	f001 fe87 	bl	8011eb4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80101a6:	e01a      	b.n	80101de <tcp_receive+0xf0a>
 80101a8:	e019      	b.n	80101de <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80101aa:	4b0f      	ldr	r3, [pc, #60]	; (80101e8 <tcp_receive+0xf14>)
 80101ac:	681a      	ldr	r2, [r3, #0]
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101b2:	1ad3      	subs	r3, r2, r3
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	db0a      	blt.n	80101ce <tcp_receive+0xefa>
 80101b8:	4b0b      	ldr	r3, [pc, #44]	; (80101e8 <tcp_receive+0xf14>)
 80101ba:	681a      	ldr	r2, [r3, #0]
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101c0:	6879      	ldr	r1, [r7, #4]
 80101c2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80101c4:	440b      	add	r3, r1
 80101c6:	1ad3      	subs	r3, r2, r3
 80101c8:	3301      	adds	r3, #1
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	dd07      	ble.n	80101de <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	8b5b      	ldrh	r3, [r3, #26]
 80101d2:	f043 0302 	orr.w	r3, r3, #2
 80101d6:	b29a      	uxth	r2, r3
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80101dc:	e7ff      	b.n	80101de <tcp_receive+0xf0a>
 80101de:	bf00      	nop
 80101e0:	3750      	adds	r7, #80	; 0x50
 80101e2:	46bd      	mov	sp, r7
 80101e4:	bdb0      	pop	{r4, r5, r7, pc}
 80101e6:	bf00      	nop
 80101e8:	200040c0 	.word	0x200040c0
 80101ec:	200040a0 	.word	0x200040a0
 80101f0:	200040ca 	.word	0x200040ca
 80101f4:	080184fc 	.word	0x080184fc
 80101f8:	080188a4 	.word	0x080188a4
 80101fc:	08018548 	.word	0x08018548

08010200 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010200:	b480      	push	{r7}
 8010202:	b083      	sub	sp, #12
 8010204:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010206:	4b15      	ldr	r3, [pc, #84]	; (801025c <tcp_get_next_optbyte+0x5c>)
 8010208:	881b      	ldrh	r3, [r3, #0]
 801020a:	1c5a      	adds	r2, r3, #1
 801020c:	b291      	uxth	r1, r2
 801020e:	4a13      	ldr	r2, [pc, #76]	; (801025c <tcp_get_next_optbyte+0x5c>)
 8010210:	8011      	strh	r1, [r2, #0]
 8010212:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010214:	4b12      	ldr	r3, [pc, #72]	; (8010260 <tcp_get_next_optbyte+0x60>)
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d004      	beq.n	8010226 <tcp_get_next_optbyte+0x26>
 801021c:	4b11      	ldr	r3, [pc, #68]	; (8010264 <tcp_get_next_optbyte+0x64>)
 801021e:	881b      	ldrh	r3, [r3, #0]
 8010220:	88fa      	ldrh	r2, [r7, #6]
 8010222:	429a      	cmp	r2, r3
 8010224:	d208      	bcs.n	8010238 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8010226:	4b10      	ldr	r3, [pc, #64]	; (8010268 <tcp_get_next_optbyte+0x68>)
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	3314      	adds	r3, #20
 801022c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801022e:	88fb      	ldrh	r3, [r7, #6]
 8010230:	683a      	ldr	r2, [r7, #0]
 8010232:	4413      	add	r3, r2
 8010234:	781b      	ldrb	r3, [r3, #0]
 8010236:	e00b      	b.n	8010250 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010238:	88fb      	ldrh	r3, [r7, #6]
 801023a:	b2da      	uxtb	r2, r3
 801023c:	4b09      	ldr	r3, [pc, #36]	; (8010264 <tcp_get_next_optbyte+0x64>)
 801023e:	881b      	ldrh	r3, [r3, #0]
 8010240:	b2db      	uxtb	r3, r3
 8010242:	1ad3      	subs	r3, r2, r3
 8010244:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8010246:	4b06      	ldr	r3, [pc, #24]	; (8010260 <tcp_get_next_optbyte+0x60>)
 8010248:	681a      	ldr	r2, [r3, #0]
 801024a:	797b      	ldrb	r3, [r7, #5]
 801024c:	4413      	add	r3, r2
 801024e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010250:	4618      	mov	r0, r3
 8010252:	370c      	adds	r7, #12
 8010254:	46bd      	mov	sp, r7
 8010256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025a:	4770      	bx	lr
 801025c:	200040bc 	.word	0x200040bc
 8010260:	200040b8 	.word	0x200040b8
 8010264:	200040b6 	.word	0x200040b6
 8010268:	200040b0 	.word	0x200040b0

0801026c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b084      	sub	sp, #16
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d106      	bne.n	8010288 <tcp_parseopt+0x1c>
 801027a:	4b32      	ldr	r3, [pc, #200]	; (8010344 <tcp_parseopt+0xd8>)
 801027c:	f240 727d 	movw	r2, #1917	; 0x77d
 8010280:	4931      	ldr	r1, [pc, #196]	; (8010348 <tcp_parseopt+0xdc>)
 8010282:	4832      	ldr	r0, [pc, #200]	; (801034c <tcp_parseopt+0xe0>)
 8010284:	f005 f856 	bl	8015334 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010288:	4b31      	ldr	r3, [pc, #196]	; (8010350 <tcp_parseopt+0xe4>)
 801028a:	881b      	ldrh	r3, [r3, #0]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d055      	beq.n	801033c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010290:	4b30      	ldr	r3, [pc, #192]	; (8010354 <tcp_parseopt+0xe8>)
 8010292:	2200      	movs	r2, #0
 8010294:	801a      	strh	r2, [r3, #0]
 8010296:	e045      	b.n	8010324 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8010298:	f7ff ffb2 	bl	8010200 <tcp_get_next_optbyte>
 801029c:	4603      	mov	r3, r0
 801029e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80102a0:	7bfb      	ldrb	r3, [r7, #15]
 80102a2:	2b02      	cmp	r3, #2
 80102a4:	d006      	beq.n	80102b4 <tcp_parseopt+0x48>
 80102a6:	2b02      	cmp	r3, #2
 80102a8:	dc2b      	bgt.n	8010302 <tcp_parseopt+0x96>
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d041      	beq.n	8010332 <tcp_parseopt+0xc6>
 80102ae:	2b01      	cmp	r3, #1
 80102b0:	d127      	bne.n	8010302 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80102b2:	e037      	b.n	8010324 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80102b4:	f7ff ffa4 	bl	8010200 <tcp_get_next_optbyte>
 80102b8:	4603      	mov	r3, r0
 80102ba:	2b04      	cmp	r3, #4
 80102bc:	d13b      	bne.n	8010336 <tcp_parseopt+0xca>
 80102be:	4b25      	ldr	r3, [pc, #148]	; (8010354 <tcp_parseopt+0xe8>)
 80102c0:	881b      	ldrh	r3, [r3, #0]
 80102c2:	3301      	adds	r3, #1
 80102c4:	4a22      	ldr	r2, [pc, #136]	; (8010350 <tcp_parseopt+0xe4>)
 80102c6:	8812      	ldrh	r2, [r2, #0]
 80102c8:	4293      	cmp	r3, r2
 80102ca:	da34      	bge.n	8010336 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80102cc:	f7ff ff98 	bl	8010200 <tcp_get_next_optbyte>
 80102d0:	4603      	mov	r3, r0
 80102d2:	b29b      	uxth	r3, r3
 80102d4:	021b      	lsls	r3, r3, #8
 80102d6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80102d8:	f7ff ff92 	bl	8010200 <tcp_get_next_optbyte>
 80102dc:	4603      	mov	r3, r0
 80102de:	b29a      	uxth	r2, r3
 80102e0:	89bb      	ldrh	r3, [r7, #12]
 80102e2:	4313      	orrs	r3, r2
 80102e4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80102e6:	89bb      	ldrh	r3, [r7, #12]
 80102e8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80102ec:	d804      	bhi.n	80102f8 <tcp_parseopt+0x8c>
 80102ee:	89bb      	ldrh	r3, [r7, #12]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d001      	beq.n	80102f8 <tcp_parseopt+0x8c>
 80102f4:	89ba      	ldrh	r2, [r7, #12]
 80102f6:	e001      	b.n	80102fc <tcp_parseopt+0x90>
 80102f8:	f44f 7206 	mov.w	r2, #536	; 0x218
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8010300:	e010      	b.n	8010324 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8010302:	f7ff ff7d 	bl	8010200 <tcp_get_next_optbyte>
 8010306:	4603      	mov	r3, r0
 8010308:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801030a:	7afb      	ldrb	r3, [r7, #11]
 801030c:	2b01      	cmp	r3, #1
 801030e:	d914      	bls.n	801033a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010310:	7afb      	ldrb	r3, [r7, #11]
 8010312:	b29a      	uxth	r2, r3
 8010314:	4b0f      	ldr	r3, [pc, #60]	; (8010354 <tcp_parseopt+0xe8>)
 8010316:	881b      	ldrh	r3, [r3, #0]
 8010318:	4413      	add	r3, r2
 801031a:	b29b      	uxth	r3, r3
 801031c:	3b02      	subs	r3, #2
 801031e:	b29a      	uxth	r2, r3
 8010320:	4b0c      	ldr	r3, [pc, #48]	; (8010354 <tcp_parseopt+0xe8>)
 8010322:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010324:	4b0b      	ldr	r3, [pc, #44]	; (8010354 <tcp_parseopt+0xe8>)
 8010326:	881a      	ldrh	r2, [r3, #0]
 8010328:	4b09      	ldr	r3, [pc, #36]	; (8010350 <tcp_parseopt+0xe4>)
 801032a:	881b      	ldrh	r3, [r3, #0]
 801032c:	429a      	cmp	r2, r3
 801032e:	d3b3      	bcc.n	8010298 <tcp_parseopt+0x2c>
 8010330:	e004      	b.n	801033c <tcp_parseopt+0xd0>
          return;
 8010332:	bf00      	nop
 8010334:	e002      	b.n	801033c <tcp_parseopt+0xd0>
            return;
 8010336:	bf00      	nop
 8010338:	e000      	b.n	801033c <tcp_parseopt+0xd0>
            return;
 801033a:	bf00      	nop
      }
    }
  }
}
 801033c:	3710      	adds	r7, #16
 801033e:	46bd      	mov	sp, r7
 8010340:	bd80      	pop	{r7, pc}
 8010342:	bf00      	nop
 8010344:	080184fc 	.word	0x080184fc
 8010348:	08018960 	.word	0x08018960
 801034c:	08018548 	.word	0x08018548
 8010350:	200040b4 	.word	0x200040b4
 8010354:	200040bc 	.word	0x200040bc

08010358 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010358:	b480      	push	{r7}
 801035a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801035c:	4b05      	ldr	r3, [pc, #20]	; (8010374 <tcp_trigger_input_pcb_close+0x1c>)
 801035e:	781b      	ldrb	r3, [r3, #0]
 8010360:	f043 0310 	orr.w	r3, r3, #16
 8010364:	b2da      	uxtb	r2, r3
 8010366:	4b03      	ldr	r3, [pc, #12]	; (8010374 <tcp_trigger_input_pcb_close+0x1c>)
 8010368:	701a      	strb	r2, [r3, #0]
}
 801036a:	bf00      	nop
 801036c:	46bd      	mov	sp, r7
 801036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010372:	4770      	bx	lr
 8010374:	200040cd 	.word	0x200040cd

08010378 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b084      	sub	sp, #16
 801037c:	af00      	add	r7, sp, #0
 801037e:	60f8      	str	r0, [r7, #12]
 8010380:	60b9      	str	r1, [r7, #8]
 8010382:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	2b00      	cmp	r3, #0
 8010388:	d00a      	beq.n	80103a0 <tcp_route+0x28>
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	7a1b      	ldrb	r3, [r3, #8]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d006      	beq.n	80103a0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	7a1b      	ldrb	r3, [r3, #8]
 8010396:	4618      	mov	r0, r3
 8010398:	f7fb f814 	bl	800b3c4 <netif_get_by_index>
 801039c:	4603      	mov	r3, r0
 801039e:	e003      	b.n	80103a8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80103a0:	6878      	ldr	r0, [r7, #4]
 80103a2:	f003 fb3f 	bl	8013a24 <ip4_route>
 80103a6:	4603      	mov	r3, r0
  }
}
 80103a8:	4618      	mov	r0, r3
 80103aa:	3710      	adds	r7, #16
 80103ac:	46bd      	mov	sp, r7
 80103ae:	bd80      	pop	{r7, pc}

080103b0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80103b0:	b590      	push	{r4, r7, lr}
 80103b2:	b087      	sub	sp, #28
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	60f8      	str	r0, [r7, #12]
 80103b8:	60b9      	str	r1, [r7, #8]
 80103ba:	603b      	str	r3, [r7, #0]
 80103bc:	4613      	mov	r3, r2
 80103be:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d105      	bne.n	80103d2 <tcp_create_segment+0x22>
 80103c6:	4b44      	ldr	r3, [pc, #272]	; (80104d8 <tcp_create_segment+0x128>)
 80103c8:	22a3      	movs	r2, #163	; 0xa3
 80103ca:	4944      	ldr	r1, [pc, #272]	; (80104dc <tcp_create_segment+0x12c>)
 80103cc:	4844      	ldr	r0, [pc, #272]	; (80104e0 <tcp_create_segment+0x130>)
 80103ce:	f004 ffb1 	bl	8015334 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80103d2:	68bb      	ldr	r3, [r7, #8]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d105      	bne.n	80103e4 <tcp_create_segment+0x34>
 80103d8:	4b3f      	ldr	r3, [pc, #252]	; (80104d8 <tcp_create_segment+0x128>)
 80103da:	22a4      	movs	r2, #164	; 0xa4
 80103dc:	4941      	ldr	r1, [pc, #260]	; (80104e4 <tcp_create_segment+0x134>)
 80103de:	4840      	ldr	r0, [pc, #256]	; (80104e0 <tcp_create_segment+0x130>)
 80103e0:	f004 ffa8 	bl	8015334 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80103e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80103e8:	009b      	lsls	r3, r3, #2
 80103ea:	b2db      	uxtb	r3, r3
 80103ec:	f003 0304 	and.w	r3, r3, #4
 80103f0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80103f2:	2003      	movs	r0, #3
 80103f4:	f7fa fc7e 	bl	800acf4 <memp_malloc>
 80103f8:	6138      	str	r0, [r7, #16]
 80103fa:	693b      	ldr	r3, [r7, #16]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d104      	bne.n	801040a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010400:	68b8      	ldr	r0, [r7, #8]
 8010402:	f7fb fb6d 	bl	800bae0 <pbuf_free>
    return NULL;
 8010406:	2300      	movs	r3, #0
 8010408:	e061      	b.n	80104ce <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801040a:	693b      	ldr	r3, [r7, #16]
 801040c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010410:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010412:	693b      	ldr	r3, [r7, #16]
 8010414:	2200      	movs	r2, #0
 8010416:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010418:	693b      	ldr	r3, [r7, #16]
 801041a:	68ba      	ldr	r2, [r7, #8]
 801041c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801041e:	68bb      	ldr	r3, [r7, #8]
 8010420:	891a      	ldrh	r2, [r3, #8]
 8010422:	7dfb      	ldrb	r3, [r7, #23]
 8010424:	b29b      	uxth	r3, r3
 8010426:	429a      	cmp	r2, r3
 8010428:	d205      	bcs.n	8010436 <tcp_create_segment+0x86>
 801042a:	4b2b      	ldr	r3, [pc, #172]	; (80104d8 <tcp_create_segment+0x128>)
 801042c:	22b0      	movs	r2, #176	; 0xb0
 801042e:	492e      	ldr	r1, [pc, #184]	; (80104e8 <tcp_create_segment+0x138>)
 8010430:	482b      	ldr	r0, [pc, #172]	; (80104e0 <tcp_create_segment+0x130>)
 8010432:	f004 ff7f 	bl	8015334 <iprintf>
  seg->len = p->tot_len - optlen;
 8010436:	68bb      	ldr	r3, [r7, #8]
 8010438:	891a      	ldrh	r2, [r3, #8]
 801043a:	7dfb      	ldrb	r3, [r7, #23]
 801043c:	b29b      	uxth	r3, r3
 801043e:	1ad3      	subs	r3, r2, r3
 8010440:	b29a      	uxth	r2, r3
 8010442:	693b      	ldr	r3, [r7, #16]
 8010444:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8010446:	2114      	movs	r1, #20
 8010448:	68b8      	ldr	r0, [r7, #8]
 801044a:	f7fb fab3 	bl	800b9b4 <pbuf_add_header>
 801044e:	4603      	mov	r3, r0
 8010450:	2b00      	cmp	r3, #0
 8010452:	d004      	beq.n	801045e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010454:	6938      	ldr	r0, [r7, #16]
 8010456:	f7fd f81c 	bl	800d492 <tcp_seg_free>
    return NULL;
 801045a:	2300      	movs	r3, #0
 801045c:	e037      	b.n	80104ce <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801045e:	693b      	ldr	r3, [r7, #16]
 8010460:	685b      	ldr	r3, [r3, #4]
 8010462:	685a      	ldr	r2, [r3, #4]
 8010464:	693b      	ldr	r3, [r7, #16]
 8010466:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	8ada      	ldrh	r2, [r3, #22]
 801046c:	693b      	ldr	r3, [r7, #16]
 801046e:	68dc      	ldr	r4, [r3, #12]
 8010470:	4610      	mov	r0, r2
 8010472:	f7f9 ff61 	bl	800a338 <lwip_htons>
 8010476:	4603      	mov	r3, r0
 8010478:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	8b1a      	ldrh	r2, [r3, #24]
 801047e:	693b      	ldr	r3, [r7, #16]
 8010480:	68dc      	ldr	r4, [r3, #12]
 8010482:	4610      	mov	r0, r2
 8010484:	f7f9 ff58 	bl	800a338 <lwip_htons>
 8010488:	4603      	mov	r3, r0
 801048a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801048c:	693b      	ldr	r3, [r7, #16]
 801048e:	68dc      	ldr	r4, [r3, #12]
 8010490:	6838      	ldr	r0, [r7, #0]
 8010492:	f7f9 ff66 	bl	800a362 <lwip_htonl>
 8010496:	4603      	mov	r3, r0
 8010498:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801049a:	7dfb      	ldrb	r3, [r7, #23]
 801049c:	089b      	lsrs	r3, r3, #2
 801049e:	b2db      	uxtb	r3, r3
 80104a0:	b29b      	uxth	r3, r3
 80104a2:	3305      	adds	r3, #5
 80104a4:	b29b      	uxth	r3, r3
 80104a6:	031b      	lsls	r3, r3, #12
 80104a8:	b29a      	uxth	r2, r3
 80104aa:	79fb      	ldrb	r3, [r7, #7]
 80104ac:	b29b      	uxth	r3, r3
 80104ae:	4313      	orrs	r3, r2
 80104b0:	b29a      	uxth	r2, r3
 80104b2:	693b      	ldr	r3, [r7, #16]
 80104b4:	68dc      	ldr	r4, [r3, #12]
 80104b6:	4610      	mov	r0, r2
 80104b8:	f7f9 ff3e 	bl	800a338 <lwip_htons>
 80104bc:	4603      	mov	r3, r0
 80104be:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80104c0:	693b      	ldr	r3, [r7, #16]
 80104c2:	68db      	ldr	r3, [r3, #12]
 80104c4:	2200      	movs	r2, #0
 80104c6:	749a      	strb	r2, [r3, #18]
 80104c8:	2200      	movs	r2, #0
 80104ca:	74da      	strb	r2, [r3, #19]
  return seg;
 80104cc:	693b      	ldr	r3, [r7, #16]
}
 80104ce:	4618      	mov	r0, r3
 80104d0:	371c      	adds	r7, #28
 80104d2:	46bd      	mov	sp, r7
 80104d4:	bd90      	pop	{r4, r7, pc}
 80104d6:	bf00      	nop
 80104d8:	0801897c 	.word	0x0801897c
 80104dc:	080189b0 	.word	0x080189b0
 80104e0:	080189d0 	.word	0x080189d0
 80104e4:	080189f8 	.word	0x080189f8
 80104e8:	08018a1c 	.word	0x08018a1c

080104ec <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b086      	sub	sp, #24
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	607b      	str	r3, [r7, #4]
 80104f4:	4603      	mov	r3, r0
 80104f6:	73fb      	strb	r3, [r7, #15]
 80104f8:	460b      	mov	r3, r1
 80104fa:	81bb      	strh	r3, [r7, #12]
 80104fc:	4613      	mov	r3, r2
 80104fe:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8010500:	89bb      	ldrh	r3, [r7, #12]
 8010502:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d105      	bne.n	8010516 <tcp_pbuf_prealloc+0x2a>
 801050a:	4b30      	ldr	r3, [pc, #192]	; (80105cc <tcp_pbuf_prealloc+0xe0>)
 801050c:	22e8      	movs	r2, #232	; 0xe8
 801050e:	4930      	ldr	r1, [pc, #192]	; (80105d0 <tcp_pbuf_prealloc+0xe4>)
 8010510:	4830      	ldr	r0, [pc, #192]	; (80105d4 <tcp_pbuf_prealloc+0xe8>)
 8010512:	f004 ff0f 	bl	8015334 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8010516:	6a3b      	ldr	r3, [r7, #32]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d105      	bne.n	8010528 <tcp_pbuf_prealloc+0x3c>
 801051c:	4b2b      	ldr	r3, [pc, #172]	; (80105cc <tcp_pbuf_prealloc+0xe0>)
 801051e:	22e9      	movs	r2, #233	; 0xe9
 8010520:	492d      	ldr	r1, [pc, #180]	; (80105d8 <tcp_pbuf_prealloc+0xec>)
 8010522:	482c      	ldr	r0, [pc, #176]	; (80105d4 <tcp_pbuf_prealloc+0xe8>)
 8010524:	f004 ff06 	bl	8015334 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8010528:	89ba      	ldrh	r2, [r7, #12]
 801052a:	897b      	ldrh	r3, [r7, #10]
 801052c:	429a      	cmp	r2, r3
 801052e:	d221      	bcs.n	8010574 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010530:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010534:	f003 0302 	and.w	r3, r3, #2
 8010538:	2b00      	cmp	r3, #0
 801053a:	d111      	bne.n	8010560 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801053c:	6a3b      	ldr	r3, [r7, #32]
 801053e:	8b5b      	ldrh	r3, [r3, #26]
 8010540:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010544:	2b00      	cmp	r3, #0
 8010546:	d115      	bne.n	8010574 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8010548:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801054c:	2b00      	cmp	r3, #0
 801054e:	d007      	beq.n	8010560 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8010550:	6a3b      	ldr	r3, [r7, #32]
 8010552:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8010554:	2b00      	cmp	r3, #0
 8010556:	d103      	bne.n	8010560 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8010558:	6a3b      	ldr	r3, [r7, #32]
 801055a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801055c:	2b00      	cmp	r3, #0
 801055e:	d009      	beq.n	8010574 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010560:	89bb      	ldrh	r3, [r7, #12]
 8010562:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8010566:	f023 0203 	bic.w	r2, r3, #3
 801056a:	897b      	ldrh	r3, [r7, #10]
 801056c:	4293      	cmp	r3, r2
 801056e:	bf28      	it	cs
 8010570:	4613      	movcs	r3, r2
 8010572:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010574:	8af9      	ldrh	r1, [r7, #22]
 8010576:	7bfb      	ldrb	r3, [r7, #15]
 8010578:	f44f 7220 	mov.w	r2, #640	; 0x280
 801057c:	4618      	mov	r0, r3
 801057e:	f7fa ffcb 	bl	800b518 <pbuf_alloc>
 8010582:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010584:	693b      	ldr	r3, [r7, #16]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d101      	bne.n	801058e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801058a:	2300      	movs	r3, #0
 801058c:	e019      	b.n	80105c2 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801058e:	693b      	ldr	r3, [r7, #16]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d006      	beq.n	80105a4 <tcp_pbuf_prealloc+0xb8>
 8010596:	4b0d      	ldr	r3, [pc, #52]	; (80105cc <tcp_pbuf_prealloc+0xe0>)
 8010598:	f240 120b 	movw	r2, #267	; 0x10b
 801059c:	490f      	ldr	r1, [pc, #60]	; (80105dc <tcp_pbuf_prealloc+0xf0>)
 801059e:	480d      	ldr	r0, [pc, #52]	; (80105d4 <tcp_pbuf_prealloc+0xe8>)
 80105a0:	f004 fec8 	bl	8015334 <iprintf>
  *oversize = p->len - length;
 80105a4:	693b      	ldr	r3, [r7, #16]
 80105a6:	895a      	ldrh	r2, [r3, #10]
 80105a8:	89bb      	ldrh	r3, [r7, #12]
 80105aa:	1ad3      	subs	r3, r2, r3
 80105ac:	b29a      	uxth	r2, r3
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80105b2:	693b      	ldr	r3, [r7, #16]
 80105b4:	89ba      	ldrh	r2, [r7, #12]
 80105b6:	811a      	strh	r2, [r3, #8]
 80105b8:	693b      	ldr	r3, [r7, #16]
 80105ba:	891a      	ldrh	r2, [r3, #8]
 80105bc:	693b      	ldr	r3, [r7, #16]
 80105be:	815a      	strh	r2, [r3, #10]
  return p;
 80105c0:	693b      	ldr	r3, [r7, #16]
}
 80105c2:	4618      	mov	r0, r3
 80105c4:	3718      	adds	r7, #24
 80105c6:	46bd      	mov	sp, r7
 80105c8:	bd80      	pop	{r7, pc}
 80105ca:	bf00      	nop
 80105cc:	0801897c 	.word	0x0801897c
 80105d0:	08018a34 	.word	0x08018a34
 80105d4:	080189d0 	.word	0x080189d0
 80105d8:	08018a58 	.word	0x08018a58
 80105dc:	08018a78 	.word	0x08018a78

080105e0 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b082      	sub	sp, #8
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
 80105e8:	460b      	mov	r3, r1
 80105ea:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d106      	bne.n	8010600 <tcp_write_checks+0x20>
 80105f2:	4b33      	ldr	r3, [pc, #204]	; (80106c0 <tcp_write_checks+0xe0>)
 80105f4:	f240 1233 	movw	r2, #307	; 0x133
 80105f8:	4932      	ldr	r1, [pc, #200]	; (80106c4 <tcp_write_checks+0xe4>)
 80105fa:	4833      	ldr	r0, [pc, #204]	; (80106c8 <tcp_write_checks+0xe8>)
 80105fc:	f004 fe9a 	bl	8015334 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	7d1b      	ldrb	r3, [r3, #20]
 8010604:	2b04      	cmp	r3, #4
 8010606:	d00e      	beq.n	8010626 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801060c:	2b07      	cmp	r3, #7
 801060e:	d00a      	beq.n	8010626 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8010614:	2b02      	cmp	r3, #2
 8010616:	d006      	beq.n	8010626 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801061c:	2b03      	cmp	r3, #3
 801061e:	d002      	beq.n	8010626 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8010620:	f06f 030a 	mvn.w	r3, #10
 8010624:	e048      	b.n	80106b8 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8010626:	887b      	ldrh	r3, [r7, #2]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d101      	bne.n	8010630 <tcp_write_checks+0x50>
    return ERR_OK;
 801062c:	2300      	movs	r3, #0
 801062e:	e043      	b.n	80106b8 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010636:	887a      	ldrh	r2, [r7, #2]
 8010638:	429a      	cmp	r2, r3
 801063a:	d909      	bls.n	8010650 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	8b5b      	ldrh	r3, [r3, #26]
 8010640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010644:	b29a      	uxth	r2, r3
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801064a:	f04f 33ff 	mov.w	r3, #4294967295
 801064e:	e033      	b.n	80106b8 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010656:	2b08      	cmp	r3, #8
 8010658:	d909      	bls.n	801066e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	8b5b      	ldrh	r3, [r3, #26]
 801065e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010662:	b29a      	uxth	r2, r3
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010668:	f04f 33ff 	mov.w	r3, #4294967295
 801066c:	e024      	b.n	80106b8 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010674:	2b00      	cmp	r3, #0
 8010676:	d00f      	beq.n	8010698 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801067c:	2b00      	cmp	r3, #0
 801067e:	d11a      	bne.n	80106b6 <tcp_write_checks+0xd6>
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010684:	2b00      	cmp	r3, #0
 8010686:	d116      	bne.n	80106b6 <tcp_write_checks+0xd6>
 8010688:	4b0d      	ldr	r3, [pc, #52]	; (80106c0 <tcp_write_checks+0xe0>)
 801068a:	f240 1255 	movw	r2, #341	; 0x155
 801068e:	490f      	ldr	r1, [pc, #60]	; (80106cc <tcp_write_checks+0xec>)
 8010690:	480d      	ldr	r0, [pc, #52]	; (80106c8 <tcp_write_checks+0xe8>)
 8010692:	f004 fe4f 	bl	8015334 <iprintf>
 8010696:	e00e      	b.n	80106b6 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801069c:	2b00      	cmp	r3, #0
 801069e:	d103      	bne.n	80106a8 <tcp_write_checks+0xc8>
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d006      	beq.n	80106b6 <tcp_write_checks+0xd6>
 80106a8:	4b05      	ldr	r3, [pc, #20]	; (80106c0 <tcp_write_checks+0xe0>)
 80106aa:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80106ae:	4908      	ldr	r1, [pc, #32]	; (80106d0 <tcp_write_checks+0xf0>)
 80106b0:	4805      	ldr	r0, [pc, #20]	; (80106c8 <tcp_write_checks+0xe8>)
 80106b2:	f004 fe3f 	bl	8015334 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80106b6:	2300      	movs	r3, #0
}
 80106b8:	4618      	mov	r0, r3
 80106ba:	3708      	adds	r7, #8
 80106bc:	46bd      	mov	sp, r7
 80106be:	bd80      	pop	{r7, pc}
 80106c0:	0801897c 	.word	0x0801897c
 80106c4:	08018a8c 	.word	0x08018a8c
 80106c8:	080189d0 	.word	0x080189d0
 80106cc:	08018aac 	.word	0x08018aac
 80106d0:	08018ae8 	.word	0x08018ae8

080106d4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80106d4:	b590      	push	{r4, r7, lr}
 80106d6:	b09b      	sub	sp, #108	; 0x6c
 80106d8:	af04      	add	r7, sp, #16
 80106da:	60f8      	str	r0, [r7, #12]
 80106dc:	60b9      	str	r1, [r7, #8]
 80106de:	4611      	mov	r1, r2
 80106e0:	461a      	mov	r2, r3
 80106e2:	460b      	mov	r3, r1
 80106e4:	80fb      	strh	r3, [r7, #6]
 80106e6:	4613      	mov	r3, r2
 80106e8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80106ea:	2300      	movs	r3, #0
 80106ec:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80106ee:	2300      	movs	r3, #0
 80106f0:	653b      	str	r3, [r7, #80]	; 0x50
 80106f2:	2300      	movs	r3, #0
 80106f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80106f6:	2300      	movs	r3, #0
 80106f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80106fa:	2300      	movs	r3, #0
 80106fc:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80106fe:	2300      	movs	r3, #0
 8010700:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8010704:	2300      	movs	r3, #0
 8010706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801070a:	2300      	movs	r3, #0
 801070c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801070e:	2300      	movs	r3, #0
 8010710:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8010712:	2300      	movs	r3, #0
 8010714:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d109      	bne.n	8010730 <tcp_write+0x5c>
 801071c:	4ba4      	ldr	r3, [pc, #656]	; (80109b0 <tcp_write+0x2dc>)
 801071e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8010722:	49a4      	ldr	r1, [pc, #656]	; (80109b4 <tcp_write+0x2e0>)
 8010724:	48a4      	ldr	r0, [pc, #656]	; (80109b8 <tcp_write+0x2e4>)
 8010726:	f004 fe05 	bl	8015334 <iprintf>
 801072a:	f06f 030f 	mvn.w	r3, #15
 801072e:	e32a      	b.n	8010d86 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010736:	085b      	lsrs	r3, r3, #1
 8010738:	b29a      	uxth	r2, r3
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801073e:	4293      	cmp	r3, r2
 8010740:	bf28      	it	cs
 8010742:	4613      	movcs	r3, r2
 8010744:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8010746:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010748:	2b00      	cmp	r3, #0
 801074a:	d102      	bne.n	8010752 <tcp_write+0x7e>
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010750:	e000      	b.n	8010754 <tcp_write+0x80>
 8010752:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010754:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8010756:	68bb      	ldr	r3, [r7, #8]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d109      	bne.n	8010770 <tcp_write+0x9c>
 801075c:	4b94      	ldr	r3, [pc, #592]	; (80109b0 <tcp_write+0x2dc>)
 801075e:	f240 12ad 	movw	r2, #429	; 0x1ad
 8010762:	4996      	ldr	r1, [pc, #600]	; (80109bc <tcp_write+0x2e8>)
 8010764:	4894      	ldr	r0, [pc, #592]	; (80109b8 <tcp_write+0x2e4>)
 8010766:	f004 fde5 	bl	8015334 <iprintf>
 801076a:	f06f 030f 	mvn.w	r3, #15
 801076e:	e30a      	b.n	8010d86 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8010770:	88fb      	ldrh	r3, [r7, #6]
 8010772:	4619      	mov	r1, r3
 8010774:	68f8      	ldr	r0, [r7, #12]
 8010776:	f7ff ff33 	bl	80105e0 <tcp_write_checks>
 801077a:	4603      	mov	r3, r0
 801077c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8010780:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010784:	2b00      	cmp	r3, #0
 8010786:	d002      	beq.n	801078e <tcp_write+0xba>
    return err;
 8010788:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801078c:	e2fb      	b.n	8010d86 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010794:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010798:	2300      	movs	r3, #0
 801079a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	f000 80f6 	beq.w	8010994 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107ac:	653b      	str	r3, [r7, #80]	; 0x50
 80107ae:	e002      	b.n	80107b6 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80107b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80107b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d1f8      	bne.n	80107b0 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80107be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107c0:	7a9b      	ldrb	r3, [r3, #10]
 80107c2:	009b      	lsls	r3, r3, #2
 80107c4:	b29b      	uxth	r3, r3
 80107c6:	f003 0304 	and.w	r3, r3, #4
 80107ca:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80107cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80107ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107d0:	891b      	ldrh	r3, [r3, #8]
 80107d2:	4619      	mov	r1, r3
 80107d4:	8c3b      	ldrh	r3, [r7, #32]
 80107d6:	440b      	add	r3, r1
 80107d8:	429a      	cmp	r2, r3
 80107da:	da06      	bge.n	80107ea <tcp_write+0x116>
 80107dc:	4b74      	ldr	r3, [pc, #464]	; (80109b0 <tcp_write+0x2dc>)
 80107de:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80107e2:	4977      	ldr	r1, [pc, #476]	; (80109c0 <tcp_write+0x2ec>)
 80107e4:	4874      	ldr	r0, [pc, #464]	; (80109b8 <tcp_write+0x2e4>)
 80107e6:	f004 fda5 	bl	8015334 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80107ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107ec:	891a      	ldrh	r2, [r3, #8]
 80107ee:	8c3b      	ldrh	r3, [r7, #32]
 80107f0:	4413      	add	r3, r2
 80107f2:	b29b      	uxth	r3, r3
 80107f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80107f6:	1ad3      	subs	r3, r2, r3
 80107f8:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010800:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8010802:	8a7b      	ldrh	r3, [r7, #18]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d026      	beq.n	8010856 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8010808:	8a7b      	ldrh	r3, [r7, #18]
 801080a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801080c:	429a      	cmp	r2, r3
 801080e:	d206      	bcs.n	801081e <tcp_write+0x14a>
 8010810:	4b67      	ldr	r3, [pc, #412]	; (80109b0 <tcp_write+0x2dc>)
 8010812:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8010816:	496b      	ldr	r1, [pc, #428]	; (80109c4 <tcp_write+0x2f0>)
 8010818:	4867      	ldr	r0, [pc, #412]	; (80109b8 <tcp_write+0x2e4>)
 801081a:	f004 fd8b 	bl	8015334 <iprintf>
      seg = last_unsent;
 801081e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010820:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8010822:	8a7b      	ldrh	r3, [r7, #18]
 8010824:	88fa      	ldrh	r2, [r7, #6]
 8010826:	4293      	cmp	r3, r2
 8010828:	bf28      	it	cs
 801082a:	4613      	movcs	r3, r2
 801082c:	b29b      	uxth	r3, r3
 801082e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010830:	4293      	cmp	r3, r2
 8010832:	bf28      	it	cs
 8010834:	4613      	movcs	r3, r2
 8010836:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8010838:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801083c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801083e:	4413      	add	r3, r2
 8010840:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8010844:	8a7a      	ldrh	r2, [r7, #18]
 8010846:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010848:	1ad3      	subs	r3, r2, r3
 801084a:	b29b      	uxth	r3, r3
 801084c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801084e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010850:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010852:	1ad3      	subs	r3, r2, r3
 8010854:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8010856:	8a7b      	ldrh	r3, [r7, #18]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d00b      	beq.n	8010874 <tcp_write+0x1a0>
 801085c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010860:	88fb      	ldrh	r3, [r7, #6]
 8010862:	429a      	cmp	r2, r3
 8010864:	d006      	beq.n	8010874 <tcp_write+0x1a0>
 8010866:	4b52      	ldr	r3, [pc, #328]	; (80109b0 <tcp_write+0x2dc>)
 8010868:	f44f 7200 	mov.w	r2, #512	; 0x200
 801086c:	4956      	ldr	r1, [pc, #344]	; (80109c8 <tcp_write+0x2f4>)
 801086e:	4852      	ldr	r0, [pc, #328]	; (80109b8 <tcp_write+0x2e4>)
 8010870:	f004 fd60 	bl	8015334 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010874:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010878:	88fb      	ldrh	r3, [r7, #6]
 801087a:	429a      	cmp	r2, r3
 801087c:	f080 8167 	bcs.w	8010b4e <tcp_write+0x47a>
 8010880:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010882:	2b00      	cmp	r3, #0
 8010884:	f000 8163 	beq.w	8010b4e <tcp_write+0x47a>
 8010888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801088a:	891b      	ldrh	r3, [r3, #8]
 801088c:	2b00      	cmp	r3, #0
 801088e:	f000 815e 	beq.w	8010b4e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8010892:	88fa      	ldrh	r2, [r7, #6]
 8010894:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010898:	1ad2      	subs	r2, r2, r3
 801089a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801089c:	4293      	cmp	r3, r2
 801089e:	bfa8      	it	ge
 80108a0:	4613      	movge	r3, r2
 80108a2:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80108a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108a6:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80108a8:	797b      	ldrb	r3, [r7, #5]
 80108aa:	f003 0301 	and.w	r3, r3, #1
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d027      	beq.n	8010902 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80108b2:	f107 0012 	add.w	r0, r7, #18
 80108b6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80108b8:	8bf9      	ldrh	r1, [r7, #30]
 80108ba:	2301      	movs	r3, #1
 80108bc:	9302      	str	r3, [sp, #8]
 80108be:	797b      	ldrb	r3, [r7, #5]
 80108c0:	9301      	str	r3, [sp, #4]
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	9300      	str	r3, [sp, #0]
 80108c6:	4603      	mov	r3, r0
 80108c8:	2000      	movs	r0, #0
 80108ca:	f7ff fe0f 	bl	80104ec <tcp_pbuf_prealloc>
 80108ce:	6578      	str	r0, [r7, #84]	; 0x54
 80108d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	f000 8225 	beq.w	8010d22 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80108d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80108da:	6858      	ldr	r0, [r3, #4]
 80108dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80108e0:	68ba      	ldr	r2, [r7, #8]
 80108e2:	4413      	add	r3, r2
 80108e4:	8bfa      	ldrh	r2, [r7, #30]
 80108e6:	4619      	mov	r1, r3
 80108e8:	f004 fcf4 	bl	80152d4 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80108ec:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80108ee:	f7fb f985 	bl	800bbfc <pbuf_clen>
 80108f2:	4603      	mov	r3, r0
 80108f4:	461a      	mov	r2, r3
 80108f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80108fa:	4413      	add	r3, r2
 80108fc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8010900:	e041      	b.n	8010986 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8010902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010904:	685b      	ldr	r3, [r3, #4]
 8010906:	637b      	str	r3, [r7, #52]	; 0x34
 8010908:	e002      	b.n	8010910 <tcp_write+0x23c>
 801090a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	637b      	str	r3, [r7, #52]	; 0x34
 8010910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	2b00      	cmp	r3, #0
 8010916:	d1f8      	bne.n	801090a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801091a:	7b1b      	ldrb	r3, [r3, #12]
 801091c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010920:	2b00      	cmp	r3, #0
 8010922:	d115      	bne.n	8010950 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8010924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010926:	685b      	ldr	r3, [r3, #4]
 8010928:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801092a:	8952      	ldrh	r2, [r2, #10]
 801092c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801092e:	68ba      	ldr	r2, [r7, #8]
 8010930:	429a      	cmp	r2, r3
 8010932:	d10d      	bne.n	8010950 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8010934:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010938:	2b00      	cmp	r3, #0
 801093a:	d006      	beq.n	801094a <tcp_write+0x276>
 801093c:	4b1c      	ldr	r3, [pc, #112]	; (80109b0 <tcp_write+0x2dc>)
 801093e:	f240 2231 	movw	r2, #561	; 0x231
 8010942:	4922      	ldr	r1, [pc, #136]	; (80109cc <tcp_write+0x2f8>)
 8010944:	481c      	ldr	r0, [pc, #112]	; (80109b8 <tcp_write+0x2e4>)
 8010946:	f004 fcf5 	bl	8015334 <iprintf>
          extendlen = seglen;
 801094a:	8bfb      	ldrh	r3, [r7, #30]
 801094c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801094e:	e01a      	b.n	8010986 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8010950:	8bfb      	ldrh	r3, [r7, #30]
 8010952:	2201      	movs	r2, #1
 8010954:	4619      	mov	r1, r3
 8010956:	2000      	movs	r0, #0
 8010958:	f7fa fdde 	bl	800b518 <pbuf_alloc>
 801095c:	6578      	str	r0, [r7, #84]	; 0x54
 801095e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010960:	2b00      	cmp	r3, #0
 8010962:	f000 81e0 	beq.w	8010d26 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8010966:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801096a:	68ba      	ldr	r2, [r7, #8]
 801096c:	441a      	add	r2, r3
 801096e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010970:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8010972:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010974:	f7fb f942 	bl	800bbfc <pbuf_clen>
 8010978:	4603      	mov	r3, r0
 801097a:	461a      	mov	r2, r3
 801097c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010980:	4413      	add	r3, r2
 8010982:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8010986:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801098a:	8bfb      	ldrh	r3, [r7, #30]
 801098c:	4413      	add	r3, r2
 801098e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010992:	e0dc      	b.n	8010b4e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801099a:	2b00      	cmp	r3, #0
 801099c:	f000 80d7 	beq.w	8010b4e <tcp_write+0x47a>
 80109a0:	4b03      	ldr	r3, [pc, #12]	; (80109b0 <tcp_write+0x2dc>)
 80109a2:	f240 224a 	movw	r2, #586	; 0x24a
 80109a6:	490a      	ldr	r1, [pc, #40]	; (80109d0 <tcp_write+0x2fc>)
 80109a8:	4803      	ldr	r0, [pc, #12]	; (80109b8 <tcp_write+0x2e4>)
 80109aa:	f004 fcc3 	bl	8015334 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80109ae:	e0ce      	b.n	8010b4e <tcp_write+0x47a>
 80109b0:	0801897c 	.word	0x0801897c
 80109b4:	08018b1c 	.word	0x08018b1c
 80109b8:	080189d0 	.word	0x080189d0
 80109bc:	08018b34 	.word	0x08018b34
 80109c0:	08018b68 	.word	0x08018b68
 80109c4:	08018b80 	.word	0x08018b80
 80109c8:	08018ba0 	.word	0x08018ba0
 80109cc:	08018bc0 	.word	0x08018bc0
 80109d0:	08018bec 	.word	0x08018bec
    struct pbuf *p;
    u16_t left = len - pos;
 80109d4:	88fa      	ldrh	r2, [r7, #6]
 80109d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80109da:	1ad3      	subs	r3, r2, r3
 80109dc:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80109de:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80109e2:	b29b      	uxth	r3, r3
 80109e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80109e6:	1ad3      	subs	r3, r2, r3
 80109e8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80109ea:	8b7a      	ldrh	r2, [r7, #26]
 80109ec:	8bbb      	ldrh	r3, [r7, #28]
 80109ee:	4293      	cmp	r3, r2
 80109f0:	bf28      	it	cs
 80109f2:	4613      	movcs	r3, r2
 80109f4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80109f6:	797b      	ldrb	r3, [r7, #5]
 80109f8:	f003 0301 	and.w	r3, r3, #1
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d036      	beq.n	8010a6e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8010a00:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010a04:	b29a      	uxth	r2, r3
 8010a06:	8b3b      	ldrh	r3, [r7, #24]
 8010a08:	4413      	add	r3, r2
 8010a0a:	b299      	uxth	r1, r3
 8010a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	bf0c      	ite	eq
 8010a12:	2301      	moveq	r3, #1
 8010a14:	2300      	movne	r3, #0
 8010a16:	b2db      	uxtb	r3, r3
 8010a18:	f107 0012 	add.w	r0, r7, #18
 8010a1c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010a1e:	9302      	str	r3, [sp, #8]
 8010a20:	797b      	ldrb	r3, [r7, #5]
 8010a22:	9301      	str	r3, [sp, #4]
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	9300      	str	r3, [sp, #0]
 8010a28:	4603      	mov	r3, r0
 8010a2a:	2036      	movs	r0, #54	; 0x36
 8010a2c:	f7ff fd5e 	bl	80104ec <tcp_pbuf_prealloc>
 8010a30:	6338      	str	r0, [r7, #48]	; 0x30
 8010a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	f000 8178 	beq.w	8010d2a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8010a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a3c:	895b      	ldrh	r3, [r3, #10]
 8010a3e:	8b3a      	ldrh	r2, [r7, #24]
 8010a40:	429a      	cmp	r2, r3
 8010a42:	d906      	bls.n	8010a52 <tcp_write+0x37e>
 8010a44:	4b8c      	ldr	r3, [pc, #560]	; (8010c78 <tcp_write+0x5a4>)
 8010a46:	f240 2266 	movw	r2, #614	; 0x266
 8010a4a:	498c      	ldr	r1, [pc, #560]	; (8010c7c <tcp_write+0x5a8>)
 8010a4c:	488c      	ldr	r0, [pc, #560]	; (8010c80 <tcp_write+0x5ac>)
 8010a4e:	f004 fc71 	bl	8015334 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8010a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a54:	685a      	ldr	r2, [r3, #4]
 8010a56:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010a5a:	18d0      	adds	r0, r2, r3
 8010a5c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010a60:	68ba      	ldr	r2, [r7, #8]
 8010a62:	4413      	add	r3, r2
 8010a64:	8b3a      	ldrh	r2, [r7, #24]
 8010a66:	4619      	mov	r1, r3
 8010a68:	f004 fc34 	bl	80152d4 <memcpy>
 8010a6c:	e02f      	b.n	8010ace <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8010a6e:	8a7b      	ldrh	r3, [r7, #18]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d006      	beq.n	8010a82 <tcp_write+0x3ae>
 8010a74:	4b80      	ldr	r3, [pc, #512]	; (8010c78 <tcp_write+0x5a4>)
 8010a76:	f240 2271 	movw	r2, #625	; 0x271
 8010a7a:	4982      	ldr	r1, [pc, #520]	; (8010c84 <tcp_write+0x5b0>)
 8010a7c:	4880      	ldr	r0, [pc, #512]	; (8010c80 <tcp_write+0x5ac>)
 8010a7e:	f004 fc59 	bl	8015334 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8010a82:	8b3b      	ldrh	r3, [r7, #24]
 8010a84:	2201      	movs	r2, #1
 8010a86:	4619      	mov	r1, r3
 8010a88:	2036      	movs	r0, #54	; 0x36
 8010a8a:	f7fa fd45 	bl	800b518 <pbuf_alloc>
 8010a8e:	6178      	str	r0, [r7, #20]
 8010a90:	697b      	ldr	r3, [r7, #20]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	f000 814b 	beq.w	8010d2e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8010a98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010a9c:	68ba      	ldr	r2, [r7, #8]
 8010a9e:	441a      	add	r2, r3
 8010aa0:	697b      	ldr	r3, [r7, #20]
 8010aa2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010aa4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010aa8:	b29b      	uxth	r3, r3
 8010aaa:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010aae:	4619      	mov	r1, r3
 8010ab0:	2036      	movs	r0, #54	; 0x36
 8010ab2:	f7fa fd31 	bl	800b518 <pbuf_alloc>
 8010ab6:	6338      	str	r0, [r7, #48]	; 0x30
 8010ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d103      	bne.n	8010ac6 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8010abe:	6978      	ldr	r0, [r7, #20]
 8010ac0:	f7fb f80e 	bl	800bae0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8010ac4:	e136      	b.n	8010d34 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8010ac6:	6979      	ldr	r1, [r7, #20]
 8010ac8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010aca:	f7fb f8d7 	bl	800bc7c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8010ace:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ad0:	f7fb f894 	bl	800bbfc <pbuf_clen>
 8010ad4:	4603      	mov	r3, r0
 8010ad6:	461a      	mov	r2, r3
 8010ad8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010adc:	4413      	add	r3, r2
 8010ade:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8010ae2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010ae6:	2b09      	cmp	r3, #9
 8010ae8:	d903      	bls.n	8010af2 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8010aea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010aec:	f7fa fff8 	bl	800bae0 <pbuf_free>
      goto memerr;
 8010af0:	e120      	b.n	8010d34 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010af6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010afa:	441a      	add	r2, r3
 8010afc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010b00:	9300      	str	r3, [sp, #0]
 8010b02:	4613      	mov	r3, r2
 8010b04:	2200      	movs	r2, #0
 8010b06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010b08:	68f8      	ldr	r0, [r7, #12]
 8010b0a:	f7ff fc51 	bl	80103b0 <tcp_create_segment>
 8010b0e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8010b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	f000 810d 	beq.w	8010d32 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8010b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d102      	bne.n	8010b24 <tcp_write+0x450>
      queue = seg;
 8010b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b20:	647b      	str	r3, [r7, #68]	; 0x44
 8010b22:	e00c      	b.n	8010b3e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8010b24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d106      	bne.n	8010b38 <tcp_write+0x464>
 8010b2a:	4b53      	ldr	r3, [pc, #332]	; (8010c78 <tcp_write+0x5a4>)
 8010b2c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010b30:	4955      	ldr	r1, [pc, #340]	; (8010c88 <tcp_write+0x5b4>)
 8010b32:	4853      	ldr	r0, [pc, #332]	; (8010c80 <tcp_write+0x5ac>)
 8010b34:	f004 fbfe 	bl	8015334 <iprintf>
      prev_seg->next = seg;
 8010b38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010b3c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8010b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b40:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8010b42:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010b46:	8b3b      	ldrh	r3, [r7, #24]
 8010b48:	4413      	add	r3, r2
 8010b4a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8010b4e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010b52:	88fb      	ldrh	r3, [r7, #6]
 8010b54:	429a      	cmp	r2, r3
 8010b56:	f4ff af3d 	bcc.w	80109d4 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8010b5a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d02c      	beq.n	8010bba <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8010b60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b62:	685b      	ldr	r3, [r3, #4]
 8010b64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010b66:	e01e      	b.n	8010ba6 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8010b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b6a:	891a      	ldrh	r2, [r3, #8]
 8010b6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010b6e:	4413      	add	r3, r2
 8010b70:	b29a      	uxth	r2, r3
 8010b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b74:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8010b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d110      	bne.n	8010ba0 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8010b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b80:	685b      	ldr	r3, [r3, #4]
 8010b82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010b84:	8952      	ldrh	r2, [r2, #10]
 8010b86:	4413      	add	r3, r2
 8010b88:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010b8a:	68b9      	ldr	r1, [r7, #8]
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	f004 fba1 	bl	80152d4 <memcpy>
        p->len += oversize_used;
 8010b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b94:	895a      	ldrh	r2, [r3, #10]
 8010b96:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010b98:	4413      	add	r3, r2
 8010b9a:	b29a      	uxth	r2, r3
 8010b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b9e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8010ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d1dd      	bne.n	8010b68 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8010bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bae:	891a      	ldrh	r2, [r3, #8]
 8010bb0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010bb2:	4413      	add	r3, r2
 8010bb4:	b29a      	uxth	r2, r3
 8010bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bb8:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8010bba:	8a7a      	ldrh	r2, [r7, #18]
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8010bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d018      	beq.n	8010bfa <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8010bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d106      	bne.n	8010bdc <tcp_write+0x508>
 8010bce:	4b2a      	ldr	r3, [pc, #168]	; (8010c78 <tcp_write+0x5a4>)
 8010bd0:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8010bd4:	492d      	ldr	r1, [pc, #180]	; (8010c8c <tcp_write+0x5b8>)
 8010bd6:	482a      	ldr	r0, [pc, #168]	; (8010c80 <tcp_write+0x5ac>)
 8010bd8:	f004 fbac 	bl	8015334 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8010bdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bde:	685b      	ldr	r3, [r3, #4]
 8010be0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010be2:	4618      	mov	r0, r3
 8010be4:	f7fb f84a 	bl	800bc7c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8010be8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bea:	891a      	ldrh	r2, [r3, #8]
 8010bec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010bee:	891b      	ldrh	r3, [r3, #8]
 8010bf0:	4413      	add	r3, r2
 8010bf2:	b29a      	uxth	r2, r3
 8010bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bf6:	811a      	strh	r2, [r3, #8]
 8010bf8:	e037      	b.n	8010c6a <tcp_write+0x596>
  } else if (extendlen > 0) {
 8010bfa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d034      	beq.n	8010c6a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8010c00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d003      	beq.n	8010c0e <tcp_write+0x53a>
 8010c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c08:	685b      	ldr	r3, [r3, #4]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d106      	bne.n	8010c1c <tcp_write+0x548>
 8010c0e:	4b1a      	ldr	r3, [pc, #104]	; (8010c78 <tcp_write+0x5a4>)
 8010c10:	f240 22e6 	movw	r2, #742	; 0x2e6
 8010c14:	491e      	ldr	r1, [pc, #120]	; (8010c90 <tcp_write+0x5bc>)
 8010c16:	481a      	ldr	r0, [pc, #104]	; (8010c80 <tcp_write+0x5ac>)
 8010c18:	f004 fb8c 	bl	8015334 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010c1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c1e:	685b      	ldr	r3, [r3, #4]
 8010c20:	62bb      	str	r3, [r7, #40]	; 0x28
 8010c22:	e009      	b.n	8010c38 <tcp_write+0x564>
      p->tot_len += extendlen;
 8010c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c26:	891a      	ldrh	r2, [r3, #8]
 8010c28:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010c2a:	4413      	add	r3, r2
 8010c2c:	b29a      	uxth	r2, r3
 8010c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c30:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	62bb      	str	r3, [r7, #40]	; 0x28
 8010c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d1f1      	bne.n	8010c24 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8010c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c42:	891a      	ldrh	r2, [r3, #8]
 8010c44:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010c46:	4413      	add	r3, r2
 8010c48:	b29a      	uxth	r2, r3
 8010c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c4c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8010c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c50:	895a      	ldrh	r2, [r3, #10]
 8010c52:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010c54:	4413      	add	r3, r2
 8010c56:	b29a      	uxth	r2, r3
 8010c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c5a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8010c5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c5e:	891a      	ldrh	r2, [r3, #8]
 8010c60:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010c62:	4413      	add	r3, r2
 8010c64:	b29a      	uxth	r2, r3
 8010c66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c68:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8010c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d111      	bne.n	8010c94 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010c74:	66da      	str	r2, [r3, #108]	; 0x6c
 8010c76:	e010      	b.n	8010c9a <tcp_write+0x5c6>
 8010c78:	0801897c 	.word	0x0801897c
 8010c7c:	08018c1c 	.word	0x08018c1c
 8010c80:	080189d0 	.word	0x080189d0
 8010c84:	08018c5c 	.word	0x08018c5c
 8010c88:	08018c6c 	.word	0x08018c6c
 8010c8c:	08018c80 	.word	0x08018c80
 8010c90:	08018cb8 	.word	0x08018cb8
  } else {
    last_unsent->next = queue;
 8010c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010c98:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010c9e:	88fb      	ldrh	r3, [r7, #6]
 8010ca0:	441a      	add	r2, r3
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010cac:	88fb      	ldrh	r3, [r7, #6]
 8010cae:	1ad3      	subs	r3, r2, r3
 8010cb0:	b29a      	uxth	r2, r3
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010cbe:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d00e      	beq.n	8010cea <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d10a      	bne.n	8010cea <tcp_write+0x616>
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d106      	bne.n	8010cea <tcp_write+0x616>
 8010cdc:	4b2c      	ldr	r3, [pc, #176]	; (8010d90 <tcp_write+0x6bc>)
 8010cde:	f240 3212 	movw	r2, #786	; 0x312
 8010ce2:	492c      	ldr	r1, [pc, #176]	; (8010d94 <tcp_write+0x6c0>)
 8010ce4:	482c      	ldr	r0, [pc, #176]	; (8010d98 <tcp_write+0x6c4>)
 8010ce6:	f004 fb25 	bl	8015334 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8010cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d016      	beq.n	8010d1e <tcp_write+0x64a>
 8010cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cf2:	68db      	ldr	r3, [r3, #12]
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d012      	beq.n	8010d1e <tcp_write+0x64a>
 8010cf8:	797b      	ldrb	r3, [r7, #5]
 8010cfa:	f003 0302 	and.w	r3, r3, #2
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d10d      	bne.n	8010d1e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8010d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d04:	68db      	ldr	r3, [r3, #12]
 8010d06:	899b      	ldrh	r3, [r3, #12]
 8010d08:	b29c      	uxth	r4, r3
 8010d0a:	2008      	movs	r0, #8
 8010d0c:	f7f9 fb14 	bl	800a338 <lwip_htons>
 8010d10:	4603      	mov	r3, r0
 8010d12:	461a      	mov	r2, r3
 8010d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d16:	68db      	ldr	r3, [r3, #12]
 8010d18:	4322      	orrs	r2, r4
 8010d1a:	b292      	uxth	r2, r2
 8010d1c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8010d1e:	2300      	movs	r3, #0
 8010d20:	e031      	b.n	8010d86 <tcp_write+0x6b2>
          goto memerr;
 8010d22:	bf00      	nop
 8010d24:	e006      	b.n	8010d34 <tcp_write+0x660>
            goto memerr;
 8010d26:	bf00      	nop
 8010d28:	e004      	b.n	8010d34 <tcp_write+0x660>
        goto memerr;
 8010d2a:	bf00      	nop
 8010d2c:	e002      	b.n	8010d34 <tcp_write+0x660>
        goto memerr;
 8010d2e:	bf00      	nop
 8010d30:	e000      	b.n	8010d34 <tcp_write+0x660>
      goto memerr;
 8010d32:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	8b5b      	ldrh	r3, [r3, #26]
 8010d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d3c:	b29a      	uxth	r2, r3
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8010d42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d002      	beq.n	8010d4e <tcp_write+0x67a>
    pbuf_free(concat_p);
 8010d48:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010d4a:	f7fa fec9 	bl	800bae0 <pbuf_free>
  }
  if (queue != NULL) {
 8010d4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d002      	beq.n	8010d5a <tcp_write+0x686>
    tcp_segs_free(queue);
 8010d54:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010d56:	f7fc fb87 	bl	800d468 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d00e      	beq.n	8010d82 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d10a      	bne.n	8010d82 <tcp_write+0x6ae>
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d106      	bne.n	8010d82 <tcp_write+0x6ae>
 8010d74:	4b06      	ldr	r3, [pc, #24]	; (8010d90 <tcp_write+0x6bc>)
 8010d76:	f240 3227 	movw	r2, #807	; 0x327
 8010d7a:	4906      	ldr	r1, [pc, #24]	; (8010d94 <tcp_write+0x6c0>)
 8010d7c:	4806      	ldr	r0, [pc, #24]	; (8010d98 <tcp_write+0x6c4>)
 8010d7e:	f004 fad9 	bl	8015334 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8010d82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010d86:	4618      	mov	r0, r3
 8010d88:	375c      	adds	r7, #92	; 0x5c
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	bd90      	pop	{r4, r7, pc}
 8010d8e:	bf00      	nop
 8010d90:	0801897c 	.word	0x0801897c
 8010d94:	08018cf0 	.word	0x08018cf0
 8010d98:	080189d0 	.word	0x080189d0

08010d9c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010d9c:	b590      	push	{r4, r7, lr}
 8010d9e:	b08b      	sub	sp, #44	; 0x2c
 8010da0:	af02      	add	r7, sp, #8
 8010da2:	6078      	str	r0, [r7, #4]
 8010da4:	460b      	mov	r3, r1
 8010da6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010da8:	2300      	movs	r3, #0
 8010daa:	61fb      	str	r3, [r7, #28]
 8010dac:	2300      	movs	r3, #0
 8010dae:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010db0:	2300      	movs	r3, #0
 8010db2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d106      	bne.n	8010dc8 <tcp_split_unsent_seg+0x2c>
 8010dba:	4b95      	ldr	r3, [pc, #596]	; (8011010 <tcp_split_unsent_seg+0x274>)
 8010dbc:	f240 324b 	movw	r2, #843	; 0x34b
 8010dc0:	4994      	ldr	r1, [pc, #592]	; (8011014 <tcp_split_unsent_seg+0x278>)
 8010dc2:	4895      	ldr	r0, [pc, #596]	; (8011018 <tcp_split_unsent_seg+0x27c>)
 8010dc4:	f004 fab6 	bl	8015334 <iprintf>

  useg = pcb->unsent;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010dcc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010dce:	697b      	ldr	r3, [r7, #20]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d102      	bne.n	8010dda <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8010dd8:	e116      	b.n	8011008 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010dda:	887b      	ldrh	r3, [r7, #2]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d109      	bne.n	8010df4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010de0:	4b8b      	ldr	r3, [pc, #556]	; (8011010 <tcp_split_unsent_seg+0x274>)
 8010de2:	f240 3253 	movw	r2, #851	; 0x353
 8010de6:	498d      	ldr	r1, [pc, #564]	; (801101c <tcp_split_unsent_seg+0x280>)
 8010de8:	488b      	ldr	r0, [pc, #556]	; (8011018 <tcp_split_unsent_seg+0x27c>)
 8010dea:	f004 faa3 	bl	8015334 <iprintf>
    return ERR_VAL;
 8010dee:	f06f 0305 	mvn.w	r3, #5
 8010df2:	e109      	b.n	8011008 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010df4:	697b      	ldr	r3, [r7, #20]
 8010df6:	891b      	ldrh	r3, [r3, #8]
 8010df8:	887a      	ldrh	r2, [r7, #2]
 8010dfa:	429a      	cmp	r2, r3
 8010dfc:	d301      	bcc.n	8010e02 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010dfe:	2300      	movs	r3, #0
 8010e00:	e102      	b.n	8011008 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e06:	887a      	ldrh	r2, [r7, #2]
 8010e08:	429a      	cmp	r2, r3
 8010e0a:	d906      	bls.n	8010e1a <tcp_split_unsent_seg+0x7e>
 8010e0c:	4b80      	ldr	r3, [pc, #512]	; (8011010 <tcp_split_unsent_seg+0x274>)
 8010e0e:	f240 325b 	movw	r2, #859	; 0x35b
 8010e12:	4983      	ldr	r1, [pc, #524]	; (8011020 <tcp_split_unsent_seg+0x284>)
 8010e14:	4880      	ldr	r0, [pc, #512]	; (8011018 <tcp_split_unsent_seg+0x27c>)
 8010e16:	f004 fa8d 	bl	8015334 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010e1a:	697b      	ldr	r3, [r7, #20]
 8010e1c:	891b      	ldrh	r3, [r3, #8]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d106      	bne.n	8010e30 <tcp_split_unsent_seg+0x94>
 8010e22:	4b7b      	ldr	r3, [pc, #492]	; (8011010 <tcp_split_unsent_seg+0x274>)
 8010e24:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8010e28:	497e      	ldr	r1, [pc, #504]	; (8011024 <tcp_split_unsent_seg+0x288>)
 8010e2a:	487b      	ldr	r0, [pc, #492]	; (8011018 <tcp_split_unsent_seg+0x27c>)
 8010e2c:	f004 fa82 	bl	8015334 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010e30:	697b      	ldr	r3, [r7, #20]
 8010e32:	7a9b      	ldrb	r3, [r3, #10]
 8010e34:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010e36:	7bfb      	ldrb	r3, [r7, #15]
 8010e38:	009b      	lsls	r3, r3, #2
 8010e3a:	b2db      	uxtb	r3, r3
 8010e3c:	f003 0304 	and.w	r3, r3, #4
 8010e40:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8010e42:	697b      	ldr	r3, [r7, #20]
 8010e44:	891a      	ldrh	r2, [r3, #8]
 8010e46:	887b      	ldrh	r3, [r7, #2]
 8010e48:	1ad3      	subs	r3, r2, r3
 8010e4a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010e4c:	7bbb      	ldrb	r3, [r7, #14]
 8010e4e:	b29a      	uxth	r2, r3
 8010e50:	89bb      	ldrh	r3, [r7, #12]
 8010e52:	4413      	add	r3, r2
 8010e54:	b29b      	uxth	r3, r3
 8010e56:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010e5a:	4619      	mov	r1, r3
 8010e5c:	2036      	movs	r0, #54	; 0x36
 8010e5e:	f7fa fb5b 	bl	800b518 <pbuf_alloc>
 8010e62:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010e64:	693b      	ldr	r3, [r7, #16]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	f000 80b7 	beq.w	8010fda <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010e6c:	697b      	ldr	r3, [r7, #20]
 8010e6e:	685b      	ldr	r3, [r3, #4]
 8010e70:	891a      	ldrh	r2, [r3, #8]
 8010e72:	697b      	ldr	r3, [r7, #20]
 8010e74:	891b      	ldrh	r3, [r3, #8]
 8010e76:	1ad3      	subs	r3, r2, r3
 8010e78:	b29a      	uxth	r2, r3
 8010e7a:	887b      	ldrh	r3, [r7, #2]
 8010e7c:	4413      	add	r3, r2
 8010e7e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010e80:	697b      	ldr	r3, [r7, #20]
 8010e82:	6858      	ldr	r0, [r3, #4]
 8010e84:	693b      	ldr	r3, [r7, #16]
 8010e86:	685a      	ldr	r2, [r3, #4]
 8010e88:	7bbb      	ldrb	r3, [r7, #14]
 8010e8a:	18d1      	adds	r1, r2, r3
 8010e8c:	897b      	ldrh	r3, [r7, #10]
 8010e8e:	89ba      	ldrh	r2, [r7, #12]
 8010e90:	f7fb f81c 	bl	800becc <pbuf_copy_partial>
 8010e94:	4603      	mov	r3, r0
 8010e96:	461a      	mov	r2, r3
 8010e98:	89bb      	ldrh	r3, [r7, #12]
 8010e9a:	4293      	cmp	r3, r2
 8010e9c:	f040 809f 	bne.w	8010fde <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010ea0:	697b      	ldr	r3, [r7, #20]
 8010ea2:	68db      	ldr	r3, [r3, #12]
 8010ea4:	899b      	ldrh	r3, [r3, #12]
 8010ea6:	b29b      	uxth	r3, r3
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	f7f9 fa45 	bl	800a338 <lwip_htons>
 8010eae:	4603      	mov	r3, r0
 8010eb0:	b2db      	uxtb	r3, r3
 8010eb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010eb6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010eb8:	2300      	movs	r3, #0
 8010eba:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010ebc:	7efb      	ldrb	r3, [r7, #27]
 8010ebe:	f003 0308 	and.w	r3, r3, #8
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d007      	beq.n	8010ed6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010ec6:	7efb      	ldrb	r3, [r7, #27]
 8010ec8:	f023 0308 	bic.w	r3, r3, #8
 8010ecc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010ece:	7ebb      	ldrb	r3, [r7, #26]
 8010ed0:	f043 0308 	orr.w	r3, r3, #8
 8010ed4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010ed6:	7efb      	ldrb	r3, [r7, #27]
 8010ed8:	f003 0301 	and.w	r3, r3, #1
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d007      	beq.n	8010ef0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010ee0:	7efb      	ldrb	r3, [r7, #27]
 8010ee2:	f023 0301 	bic.w	r3, r3, #1
 8010ee6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010ee8:	7ebb      	ldrb	r3, [r7, #26]
 8010eea:	f043 0301 	orr.w	r3, r3, #1
 8010eee:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010ef0:	697b      	ldr	r3, [r7, #20]
 8010ef2:	68db      	ldr	r3, [r3, #12]
 8010ef4:	685b      	ldr	r3, [r3, #4]
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	f7f9 fa33 	bl	800a362 <lwip_htonl>
 8010efc:	4602      	mov	r2, r0
 8010efe:	887b      	ldrh	r3, [r7, #2]
 8010f00:	18d1      	adds	r1, r2, r3
 8010f02:	7eba      	ldrb	r2, [r7, #26]
 8010f04:	7bfb      	ldrb	r3, [r7, #15]
 8010f06:	9300      	str	r3, [sp, #0]
 8010f08:	460b      	mov	r3, r1
 8010f0a:	6939      	ldr	r1, [r7, #16]
 8010f0c:	6878      	ldr	r0, [r7, #4]
 8010f0e:	f7ff fa4f 	bl	80103b0 <tcp_create_segment>
 8010f12:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010f14:	69fb      	ldr	r3, [r7, #28]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d063      	beq.n	8010fe2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010f1a:	697b      	ldr	r3, [r7, #20]
 8010f1c:	685b      	ldr	r3, [r3, #4]
 8010f1e:	4618      	mov	r0, r3
 8010f20:	f7fa fe6c 	bl	800bbfc <pbuf_clen>
 8010f24:	4603      	mov	r3, r0
 8010f26:	461a      	mov	r2, r3
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010f2e:	1a9b      	subs	r3, r3, r2
 8010f30:	b29a      	uxth	r2, r3
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010f38:	697b      	ldr	r3, [r7, #20]
 8010f3a:	6858      	ldr	r0, [r3, #4]
 8010f3c:	697b      	ldr	r3, [r7, #20]
 8010f3e:	685b      	ldr	r3, [r3, #4]
 8010f40:	891a      	ldrh	r2, [r3, #8]
 8010f42:	89bb      	ldrh	r3, [r7, #12]
 8010f44:	1ad3      	subs	r3, r2, r3
 8010f46:	b29b      	uxth	r3, r3
 8010f48:	4619      	mov	r1, r3
 8010f4a:	f7fa fc43 	bl	800b7d4 <pbuf_realloc>
  useg->len -= remainder;
 8010f4e:	697b      	ldr	r3, [r7, #20]
 8010f50:	891a      	ldrh	r2, [r3, #8]
 8010f52:	89bb      	ldrh	r3, [r7, #12]
 8010f54:	1ad3      	subs	r3, r2, r3
 8010f56:	b29a      	uxth	r2, r3
 8010f58:	697b      	ldr	r3, [r7, #20]
 8010f5a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010f5c:	697b      	ldr	r3, [r7, #20]
 8010f5e:	68db      	ldr	r3, [r3, #12]
 8010f60:	899b      	ldrh	r3, [r3, #12]
 8010f62:	b29c      	uxth	r4, r3
 8010f64:	7efb      	ldrb	r3, [r7, #27]
 8010f66:	b29b      	uxth	r3, r3
 8010f68:	4618      	mov	r0, r3
 8010f6a:	f7f9 f9e5 	bl	800a338 <lwip_htons>
 8010f6e:	4603      	mov	r3, r0
 8010f70:	461a      	mov	r2, r3
 8010f72:	697b      	ldr	r3, [r7, #20]
 8010f74:	68db      	ldr	r3, [r3, #12]
 8010f76:	4322      	orrs	r2, r4
 8010f78:	b292      	uxth	r2, r2
 8010f7a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010f7c:	697b      	ldr	r3, [r7, #20]
 8010f7e:	685b      	ldr	r3, [r3, #4]
 8010f80:	4618      	mov	r0, r3
 8010f82:	f7fa fe3b 	bl	800bbfc <pbuf_clen>
 8010f86:	4603      	mov	r3, r0
 8010f88:	461a      	mov	r2, r3
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010f90:	4413      	add	r3, r2
 8010f92:	b29a      	uxth	r2, r3
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010f9a:	69fb      	ldr	r3, [r7, #28]
 8010f9c:	685b      	ldr	r3, [r3, #4]
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	f7fa fe2c 	bl	800bbfc <pbuf_clen>
 8010fa4:	4603      	mov	r3, r0
 8010fa6:	461a      	mov	r2, r3
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010fae:	4413      	add	r3, r2
 8010fb0:	b29a      	uxth	r2, r3
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010fb8:	697b      	ldr	r3, [r7, #20]
 8010fba:	681a      	ldr	r2, [r3, #0]
 8010fbc:	69fb      	ldr	r3, [r7, #28]
 8010fbe:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010fc0:	697b      	ldr	r3, [r7, #20]
 8010fc2:	69fa      	ldr	r2, [r7, #28]
 8010fc4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010fc6:	69fb      	ldr	r3, [r7, #28]
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d103      	bne.n	8010fd6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	2200      	movs	r2, #0
 8010fd2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	e016      	b.n	8011008 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010fda:	bf00      	nop
 8010fdc:	e002      	b.n	8010fe4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010fde:	bf00      	nop
 8010fe0:	e000      	b.n	8010fe4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010fe2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010fe4:	69fb      	ldr	r3, [r7, #28]
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d006      	beq.n	8010ff8 <tcp_split_unsent_seg+0x25c>
 8010fea:	4b09      	ldr	r3, [pc, #36]	; (8011010 <tcp_split_unsent_seg+0x274>)
 8010fec:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010ff0:	490d      	ldr	r1, [pc, #52]	; (8011028 <tcp_split_unsent_seg+0x28c>)
 8010ff2:	4809      	ldr	r0, [pc, #36]	; (8011018 <tcp_split_unsent_seg+0x27c>)
 8010ff4:	f004 f99e 	bl	8015334 <iprintf>
  if (p != NULL) {
 8010ff8:	693b      	ldr	r3, [r7, #16]
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d002      	beq.n	8011004 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010ffe:	6938      	ldr	r0, [r7, #16]
 8011000:	f7fa fd6e 	bl	800bae0 <pbuf_free>
  }

  return ERR_MEM;
 8011004:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011008:	4618      	mov	r0, r3
 801100a:	3724      	adds	r7, #36	; 0x24
 801100c:	46bd      	mov	sp, r7
 801100e:	bd90      	pop	{r4, r7, pc}
 8011010:	0801897c 	.word	0x0801897c
 8011014:	08018d10 	.word	0x08018d10
 8011018:	080189d0 	.word	0x080189d0
 801101c:	08018d34 	.word	0x08018d34
 8011020:	08018d58 	.word	0x08018d58
 8011024:	08018d68 	.word	0x08018d68
 8011028:	08018d78 	.word	0x08018d78

0801102c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801102c:	b590      	push	{r4, r7, lr}
 801102e:	b085      	sub	sp, #20
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d106      	bne.n	8011048 <tcp_send_fin+0x1c>
 801103a:	4b21      	ldr	r3, [pc, #132]	; (80110c0 <tcp_send_fin+0x94>)
 801103c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8011040:	4920      	ldr	r1, [pc, #128]	; (80110c4 <tcp_send_fin+0x98>)
 8011042:	4821      	ldr	r0, [pc, #132]	; (80110c8 <tcp_send_fin+0x9c>)
 8011044:	f004 f976 	bl	8015334 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801104c:	2b00      	cmp	r3, #0
 801104e:	d02e      	beq.n	80110ae <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011054:	60fb      	str	r3, [r7, #12]
 8011056:	e002      	b.n	801105e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d1f8      	bne.n	8011058 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	68db      	ldr	r3, [r3, #12]
 801106a:	899b      	ldrh	r3, [r3, #12]
 801106c:	b29b      	uxth	r3, r3
 801106e:	4618      	mov	r0, r3
 8011070:	f7f9 f962 	bl	800a338 <lwip_htons>
 8011074:	4603      	mov	r3, r0
 8011076:	b2db      	uxtb	r3, r3
 8011078:	f003 0307 	and.w	r3, r3, #7
 801107c:	2b00      	cmp	r3, #0
 801107e:	d116      	bne.n	80110ae <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	68db      	ldr	r3, [r3, #12]
 8011084:	899b      	ldrh	r3, [r3, #12]
 8011086:	b29c      	uxth	r4, r3
 8011088:	2001      	movs	r0, #1
 801108a:	f7f9 f955 	bl	800a338 <lwip_htons>
 801108e:	4603      	mov	r3, r0
 8011090:	461a      	mov	r2, r3
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	68db      	ldr	r3, [r3, #12]
 8011096:	4322      	orrs	r2, r4
 8011098:	b292      	uxth	r2, r2
 801109a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	8b5b      	ldrh	r3, [r3, #26]
 80110a0:	f043 0320 	orr.w	r3, r3, #32
 80110a4:	b29a      	uxth	r2, r3
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80110aa:	2300      	movs	r3, #0
 80110ac:	e004      	b.n	80110b8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80110ae:	2101      	movs	r1, #1
 80110b0:	6878      	ldr	r0, [r7, #4]
 80110b2:	f000 f80b 	bl	80110cc <tcp_enqueue_flags>
 80110b6:	4603      	mov	r3, r0
}
 80110b8:	4618      	mov	r0, r3
 80110ba:	3714      	adds	r7, #20
 80110bc:	46bd      	mov	sp, r7
 80110be:	bd90      	pop	{r4, r7, pc}
 80110c0:	0801897c 	.word	0x0801897c
 80110c4:	08018d84 	.word	0x08018d84
 80110c8:	080189d0 	.word	0x080189d0

080110cc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80110cc:	b580      	push	{r7, lr}
 80110ce:	b08a      	sub	sp, #40	; 0x28
 80110d0:	af02      	add	r7, sp, #8
 80110d2:	6078      	str	r0, [r7, #4]
 80110d4:	460b      	mov	r3, r1
 80110d6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80110d8:	2300      	movs	r3, #0
 80110da:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80110dc:	2300      	movs	r3, #0
 80110de:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80110e0:	78fb      	ldrb	r3, [r7, #3]
 80110e2:	f003 0303 	and.w	r3, r3, #3
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d106      	bne.n	80110f8 <tcp_enqueue_flags+0x2c>
 80110ea:	4b67      	ldr	r3, [pc, #412]	; (8011288 <tcp_enqueue_flags+0x1bc>)
 80110ec:	f240 4211 	movw	r2, #1041	; 0x411
 80110f0:	4966      	ldr	r1, [pc, #408]	; (801128c <tcp_enqueue_flags+0x1c0>)
 80110f2:	4867      	ldr	r0, [pc, #412]	; (8011290 <tcp_enqueue_flags+0x1c4>)
 80110f4:	f004 f91e 	bl	8015334 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d106      	bne.n	801110c <tcp_enqueue_flags+0x40>
 80110fe:	4b62      	ldr	r3, [pc, #392]	; (8011288 <tcp_enqueue_flags+0x1bc>)
 8011100:	f240 4213 	movw	r2, #1043	; 0x413
 8011104:	4963      	ldr	r1, [pc, #396]	; (8011294 <tcp_enqueue_flags+0x1c8>)
 8011106:	4862      	ldr	r0, [pc, #392]	; (8011290 <tcp_enqueue_flags+0x1c4>)
 8011108:	f004 f914 	bl	8015334 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801110c:	78fb      	ldrb	r3, [r7, #3]
 801110e:	f003 0302 	and.w	r3, r3, #2
 8011112:	2b00      	cmp	r3, #0
 8011114:	d001      	beq.n	801111a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011116:	2301      	movs	r3, #1
 8011118:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801111a:	7ffb      	ldrb	r3, [r7, #31]
 801111c:	009b      	lsls	r3, r3, #2
 801111e:	b2db      	uxtb	r3, r3
 8011120:	f003 0304 	and.w	r3, r3, #4
 8011124:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011126:	7dfb      	ldrb	r3, [r7, #23]
 8011128:	b29b      	uxth	r3, r3
 801112a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801112e:	4619      	mov	r1, r3
 8011130:	2036      	movs	r0, #54	; 0x36
 8011132:	f7fa f9f1 	bl	800b518 <pbuf_alloc>
 8011136:	6138      	str	r0, [r7, #16]
 8011138:	693b      	ldr	r3, [r7, #16]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d109      	bne.n	8011152 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	8b5b      	ldrh	r3, [r3, #26]
 8011142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011146:	b29a      	uxth	r2, r3
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801114c:	f04f 33ff 	mov.w	r3, #4294967295
 8011150:	e095      	b.n	801127e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011152:	693b      	ldr	r3, [r7, #16]
 8011154:	895a      	ldrh	r2, [r3, #10]
 8011156:	7dfb      	ldrb	r3, [r7, #23]
 8011158:	b29b      	uxth	r3, r3
 801115a:	429a      	cmp	r2, r3
 801115c:	d206      	bcs.n	801116c <tcp_enqueue_flags+0xa0>
 801115e:	4b4a      	ldr	r3, [pc, #296]	; (8011288 <tcp_enqueue_flags+0x1bc>)
 8011160:	f240 4239 	movw	r2, #1081	; 0x439
 8011164:	494c      	ldr	r1, [pc, #304]	; (8011298 <tcp_enqueue_flags+0x1cc>)
 8011166:	484a      	ldr	r0, [pc, #296]	; (8011290 <tcp_enqueue_flags+0x1c4>)
 8011168:	f004 f8e4 	bl	8015334 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011170:	78fa      	ldrb	r2, [r7, #3]
 8011172:	7ffb      	ldrb	r3, [r7, #31]
 8011174:	9300      	str	r3, [sp, #0]
 8011176:	460b      	mov	r3, r1
 8011178:	6939      	ldr	r1, [r7, #16]
 801117a:	6878      	ldr	r0, [r7, #4]
 801117c:	f7ff f918 	bl	80103b0 <tcp_create_segment>
 8011180:	60f8      	str	r0, [r7, #12]
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	2b00      	cmp	r3, #0
 8011186:	d109      	bne.n	801119c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	8b5b      	ldrh	r3, [r3, #26]
 801118c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011190:	b29a      	uxth	r2, r3
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011196:	f04f 33ff 	mov.w	r3, #4294967295
 801119a:	e070      	b.n	801127e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	68db      	ldr	r3, [r3, #12]
 80111a0:	f003 0303 	and.w	r3, r3, #3
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d006      	beq.n	80111b6 <tcp_enqueue_flags+0xea>
 80111a8:	4b37      	ldr	r3, [pc, #220]	; (8011288 <tcp_enqueue_flags+0x1bc>)
 80111aa:	f240 4242 	movw	r2, #1090	; 0x442
 80111ae:	493b      	ldr	r1, [pc, #236]	; (801129c <tcp_enqueue_flags+0x1d0>)
 80111b0:	4837      	ldr	r0, [pc, #220]	; (8011290 <tcp_enqueue_flags+0x1c4>)
 80111b2:	f004 f8bf 	bl	8015334 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	891b      	ldrh	r3, [r3, #8]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d006      	beq.n	80111cc <tcp_enqueue_flags+0x100>
 80111be:	4b32      	ldr	r3, [pc, #200]	; (8011288 <tcp_enqueue_flags+0x1bc>)
 80111c0:	f240 4243 	movw	r2, #1091	; 0x443
 80111c4:	4936      	ldr	r1, [pc, #216]	; (80112a0 <tcp_enqueue_flags+0x1d4>)
 80111c6:	4832      	ldr	r0, [pc, #200]	; (8011290 <tcp_enqueue_flags+0x1c4>)
 80111c8:	f004 f8b4 	bl	8015334 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d103      	bne.n	80111dc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	68fa      	ldr	r2, [r7, #12]
 80111d8:	66da      	str	r2, [r3, #108]	; 0x6c
 80111da:	e00d      	b.n	80111f8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111e0:	61bb      	str	r3, [r7, #24]
 80111e2:	e002      	b.n	80111ea <tcp_enqueue_flags+0x11e>
 80111e4:	69bb      	ldr	r3, [r7, #24]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	61bb      	str	r3, [r7, #24]
 80111ea:	69bb      	ldr	r3, [r7, #24]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d1f8      	bne.n	80111e4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80111f2:	69bb      	ldr	r3, [r7, #24]
 80111f4:	68fa      	ldr	r2, [r7, #12]
 80111f6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	2200      	movs	r2, #0
 80111fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011200:	78fb      	ldrb	r3, [r7, #3]
 8011202:	f003 0302 	and.w	r3, r3, #2
 8011206:	2b00      	cmp	r3, #0
 8011208:	d104      	bne.n	8011214 <tcp_enqueue_flags+0x148>
 801120a:	78fb      	ldrb	r3, [r7, #3]
 801120c:	f003 0301 	and.w	r3, r3, #1
 8011210:	2b00      	cmp	r3, #0
 8011212:	d004      	beq.n	801121e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011218:	1c5a      	adds	r2, r3, #1
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801121e:	78fb      	ldrb	r3, [r7, #3]
 8011220:	f003 0301 	and.w	r3, r3, #1
 8011224:	2b00      	cmp	r3, #0
 8011226:	d006      	beq.n	8011236 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	8b5b      	ldrh	r3, [r3, #26]
 801122c:	f043 0320 	orr.w	r3, r3, #32
 8011230:	b29a      	uxth	r2, r3
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	685b      	ldr	r3, [r3, #4]
 801123a:	4618      	mov	r0, r3
 801123c:	f7fa fcde 	bl	800bbfc <pbuf_clen>
 8011240:	4603      	mov	r3, r0
 8011242:	461a      	mov	r2, r3
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801124a:	4413      	add	r3, r2
 801124c:	b29a      	uxth	r2, r3
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801125a:	2b00      	cmp	r3, #0
 801125c:	d00e      	beq.n	801127c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011262:	2b00      	cmp	r3, #0
 8011264:	d10a      	bne.n	801127c <tcp_enqueue_flags+0x1b0>
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801126a:	2b00      	cmp	r3, #0
 801126c:	d106      	bne.n	801127c <tcp_enqueue_flags+0x1b0>
 801126e:	4b06      	ldr	r3, [pc, #24]	; (8011288 <tcp_enqueue_flags+0x1bc>)
 8011270:	f240 4265 	movw	r2, #1125	; 0x465
 8011274:	490b      	ldr	r1, [pc, #44]	; (80112a4 <tcp_enqueue_flags+0x1d8>)
 8011276:	4806      	ldr	r0, [pc, #24]	; (8011290 <tcp_enqueue_flags+0x1c4>)
 8011278:	f004 f85c 	bl	8015334 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801127c:	2300      	movs	r3, #0
}
 801127e:	4618      	mov	r0, r3
 8011280:	3720      	adds	r7, #32
 8011282:	46bd      	mov	sp, r7
 8011284:	bd80      	pop	{r7, pc}
 8011286:	bf00      	nop
 8011288:	0801897c 	.word	0x0801897c
 801128c:	08018da0 	.word	0x08018da0
 8011290:	080189d0 	.word	0x080189d0
 8011294:	08018df8 	.word	0x08018df8
 8011298:	08018e18 	.word	0x08018e18
 801129c:	08018e54 	.word	0x08018e54
 80112a0:	08018e6c 	.word	0x08018e6c
 80112a4:	08018e98 	.word	0x08018e98

080112a8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80112a8:	b5b0      	push	{r4, r5, r7, lr}
 80112aa:	b08a      	sub	sp, #40	; 0x28
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d106      	bne.n	80112c4 <tcp_output+0x1c>
 80112b6:	4b9e      	ldr	r3, [pc, #632]	; (8011530 <tcp_output+0x288>)
 80112b8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80112bc:	499d      	ldr	r1, [pc, #628]	; (8011534 <tcp_output+0x28c>)
 80112be:	489e      	ldr	r0, [pc, #632]	; (8011538 <tcp_output+0x290>)
 80112c0:	f004 f838 	bl	8015334 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	7d1b      	ldrb	r3, [r3, #20]
 80112c8:	2b01      	cmp	r3, #1
 80112ca:	d106      	bne.n	80112da <tcp_output+0x32>
 80112cc:	4b98      	ldr	r3, [pc, #608]	; (8011530 <tcp_output+0x288>)
 80112ce:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80112d2:	499a      	ldr	r1, [pc, #616]	; (801153c <tcp_output+0x294>)
 80112d4:	4898      	ldr	r0, [pc, #608]	; (8011538 <tcp_output+0x290>)
 80112d6:	f004 f82d 	bl	8015334 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80112da:	4b99      	ldr	r3, [pc, #612]	; (8011540 <tcp_output+0x298>)
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	687a      	ldr	r2, [r7, #4]
 80112e0:	429a      	cmp	r2, r3
 80112e2:	d101      	bne.n	80112e8 <tcp_output+0x40>
    return ERR_OK;
 80112e4:	2300      	movs	r3, #0
 80112e6:	e1ce      	b.n	8011686 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80112f4:	4293      	cmp	r3, r2
 80112f6:	bf28      	it	cs
 80112f8:	4613      	movcs	r3, r2
 80112fa:	b29b      	uxth	r3, r3
 80112fc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011302:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8011304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011306:	2b00      	cmp	r3, #0
 8011308:	d10b      	bne.n	8011322 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	8b5b      	ldrh	r3, [r3, #26]
 801130e:	f003 0302 	and.w	r3, r3, #2
 8011312:	2b00      	cmp	r3, #0
 8011314:	f000 81aa 	beq.w	801166c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8011318:	6878      	ldr	r0, [r7, #4]
 801131a:	f000 fdcb 	bl	8011eb4 <tcp_send_empty_ack>
 801131e:	4603      	mov	r3, r0
 8011320:	e1b1      	b.n	8011686 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8011322:	6879      	ldr	r1, [r7, #4]
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	3304      	adds	r3, #4
 8011328:	461a      	mov	r2, r3
 801132a:	6878      	ldr	r0, [r7, #4]
 801132c:	f7ff f824 	bl	8010378 <tcp_route>
 8011330:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011332:	697b      	ldr	r3, [r7, #20]
 8011334:	2b00      	cmp	r3, #0
 8011336:	d102      	bne.n	801133e <tcp_output+0x96>
    return ERR_RTE;
 8011338:	f06f 0303 	mvn.w	r3, #3
 801133c:	e1a3      	b.n	8011686 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d003      	beq.n	801134c <tcp_output+0xa4>
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d111      	bne.n	8011370 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801134c:	697b      	ldr	r3, [r7, #20]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d002      	beq.n	8011358 <tcp_output+0xb0>
 8011352:	697b      	ldr	r3, [r7, #20]
 8011354:	3304      	adds	r3, #4
 8011356:	e000      	b.n	801135a <tcp_output+0xb2>
 8011358:	2300      	movs	r3, #0
 801135a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801135c:	693b      	ldr	r3, [r7, #16]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d102      	bne.n	8011368 <tcp_output+0xc0>
      return ERR_RTE;
 8011362:	f06f 0303 	mvn.w	r3, #3
 8011366:	e18e      	b.n	8011686 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011368:	693b      	ldr	r3, [r7, #16]
 801136a:	681a      	ldr	r2, [r3, #0]
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011372:	68db      	ldr	r3, [r3, #12]
 8011374:	685b      	ldr	r3, [r3, #4]
 8011376:	4618      	mov	r0, r3
 8011378:	f7f8 fff3 	bl	800a362 <lwip_htonl>
 801137c:	4602      	mov	r2, r0
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011382:	1ad3      	subs	r3, r2, r3
 8011384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011386:	8912      	ldrh	r2, [r2, #8]
 8011388:	4413      	add	r3, r2
 801138a:	69ba      	ldr	r2, [r7, #24]
 801138c:	429a      	cmp	r2, r3
 801138e:	d227      	bcs.n	80113e0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011396:	461a      	mov	r2, r3
 8011398:	69bb      	ldr	r3, [r7, #24]
 801139a:	4293      	cmp	r3, r2
 801139c:	d114      	bne.n	80113c8 <tcp_output+0x120>
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d110      	bne.n	80113c8 <tcp_output+0x120>
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d10b      	bne.n	80113c8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	2200      	movs	r2, #0
 80113b4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	2201      	movs	r2, #1
 80113bc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	2200      	movs	r2, #0
 80113c4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	8b5b      	ldrh	r3, [r3, #26]
 80113cc:	f003 0302 	and.w	r3, r3, #2
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	f000 814d 	beq.w	8011670 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80113d6:	6878      	ldr	r0, [r7, #4]
 80113d8:	f000 fd6c 	bl	8011eb4 <tcp_send_empty_ack>
 80113dc:	4603      	mov	r3, r0
 80113de:	e152      	b.n	8011686 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	2200      	movs	r2, #0
 80113e4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80113ec:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80113ee:	6a3b      	ldr	r3, [r7, #32]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	f000 811c 	beq.w	801162e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80113f6:	e002      	b.n	80113fe <tcp_output+0x156>
 80113f8:	6a3b      	ldr	r3, [r7, #32]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	623b      	str	r3, [r7, #32]
 80113fe:	6a3b      	ldr	r3, [r7, #32]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d1f8      	bne.n	80113f8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011406:	e112      	b.n	801162e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801140a:	68db      	ldr	r3, [r3, #12]
 801140c:	899b      	ldrh	r3, [r3, #12]
 801140e:	b29b      	uxth	r3, r3
 8011410:	4618      	mov	r0, r3
 8011412:	f7f8 ff91 	bl	800a338 <lwip_htons>
 8011416:	4603      	mov	r3, r0
 8011418:	b2db      	uxtb	r3, r3
 801141a:	f003 0304 	and.w	r3, r3, #4
 801141e:	2b00      	cmp	r3, #0
 8011420:	d006      	beq.n	8011430 <tcp_output+0x188>
 8011422:	4b43      	ldr	r3, [pc, #268]	; (8011530 <tcp_output+0x288>)
 8011424:	f240 5236 	movw	r2, #1334	; 0x536
 8011428:	4946      	ldr	r1, [pc, #280]	; (8011544 <tcp_output+0x29c>)
 801142a:	4843      	ldr	r0, [pc, #268]	; (8011538 <tcp_output+0x290>)
 801142c:	f003 ff82 	bl	8015334 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011434:	2b00      	cmp	r3, #0
 8011436:	d01f      	beq.n	8011478 <tcp_output+0x1d0>
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	8b5b      	ldrh	r3, [r3, #26]
 801143c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011440:	2b00      	cmp	r3, #0
 8011442:	d119      	bne.n	8011478 <tcp_output+0x1d0>
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011448:	2b00      	cmp	r3, #0
 801144a:	d00b      	beq.n	8011464 <tcp_output+0x1bc>
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d110      	bne.n	8011478 <tcp_output+0x1d0>
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801145a:	891a      	ldrh	r2, [r3, #8]
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011460:	429a      	cmp	r2, r3
 8011462:	d209      	bcs.n	8011478 <tcp_output+0x1d0>
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801146a:	2b00      	cmp	r3, #0
 801146c:	d004      	beq.n	8011478 <tcp_output+0x1d0>
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011474:	2b08      	cmp	r3, #8
 8011476:	d901      	bls.n	801147c <tcp_output+0x1d4>
 8011478:	2301      	movs	r3, #1
 801147a:	e000      	b.n	801147e <tcp_output+0x1d6>
 801147c:	2300      	movs	r3, #0
 801147e:	2b00      	cmp	r3, #0
 8011480:	d106      	bne.n	8011490 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	8b5b      	ldrh	r3, [r3, #26]
 8011486:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801148a:	2b00      	cmp	r3, #0
 801148c:	f000 80e4 	beq.w	8011658 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	7d1b      	ldrb	r3, [r3, #20]
 8011494:	2b02      	cmp	r3, #2
 8011496:	d00d      	beq.n	80114b4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801149a:	68db      	ldr	r3, [r3, #12]
 801149c:	899b      	ldrh	r3, [r3, #12]
 801149e:	b29c      	uxth	r4, r3
 80114a0:	2010      	movs	r0, #16
 80114a2:	f7f8 ff49 	bl	800a338 <lwip_htons>
 80114a6:	4603      	mov	r3, r0
 80114a8:	461a      	mov	r2, r3
 80114aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ac:	68db      	ldr	r3, [r3, #12]
 80114ae:	4322      	orrs	r2, r4
 80114b0:	b292      	uxth	r2, r2
 80114b2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80114b4:	697a      	ldr	r2, [r7, #20]
 80114b6:	6879      	ldr	r1, [r7, #4]
 80114b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80114ba:	f000 f909 	bl	80116d0 <tcp_output_segment>
 80114be:	4603      	mov	r3, r0
 80114c0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80114c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d009      	beq.n	80114de <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	8b5b      	ldrh	r3, [r3, #26]
 80114ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114d2:	b29a      	uxth	r2, r3
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	835a      	strh	r2, [r3, #26]
      return err;
 80114d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80114dc:	e0d3      	b.n	8011686 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80114de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114e0:	681a      	ldr	r2, [r3, #0]
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	7d1b      	ldrb	r3, [r3, #20]
 80114ea:	2b02      	cmp	r3, #2
 80114ec:	d006      	beq.n	80114fc <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	8b5b      	ldrh	r3, [r3, #26]
 80114f2:	f023 0303 	bic.w	r3, r3, #3
 80114f6:	b29a      	uxth	r2, r3
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80114fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114fe:	68db      	ldr	r3, [r3, #12]
 8011500:	685b      	ldr	r3, [r3, #4]
 8011502:	4618      	mov	r0, r3
 8011504:	f7f8 ff2d 	bl	800a362 <lwip_htonl>
 8011508:	4604      	mov	r4, r0
 801150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801150c:	891b      	ldrh	r3, [r3, #8]
 801150e:	461d      	mov	r5, r3
 8011510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011512:	68db      	ldr	r3, [r3, #12]
 8011514:	899b      	ldrh	r3, [r3, #12]
 8011516:	b29b      	uxth	r3, r3
 8011518:	4618      	mov	r0, r3
 801151a:	f7f8 ff0d 	bl	800a338 <lwip_htons>
 801151e:	4603      	mov	r3, r0
 8011520:	b2db      	uxtb	r3, r3
 8011522:	f003 0303 	and.w	r3, r3, #3
 8011526:	2b00      	cmp	r3, #0
 8011528:	d00e      	beq.n	8011548 <tcp_output+0x2a0>
 801152a:	2301      	movs	r3, #1
 801152c:	e00d      	b.n	801154a <tcp_output+0x2a2>
 801152e:	bf00      	nop
 8011530:	0801897c 	.word	0x0801897c
 8011534:	08018ec0 	.word	0x08018ec0
 8011538:	080189d0 	.word	0x080189d0
 801153c:	08018ed8 	.word	0x08018ed8
 8011540:	2000ab2c 	.word	0x2000ab2c
 8011544:	08018f00 	.word	0x08018f00
 8011548:	2300      	movs	r3, #0
 801154a:	442b      	add	r3, r5
 801154c:	4423      	add	r3, r4
 801154e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011554:	68bb      	ldr	r3, [r7, #8]
 8011556:	1ad3      	subs	r3, r2, r3
 8011558:	2b00      	cmp	r3, #0
 801155a:	da02      	bge.n	8011562 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	68ba      	ldr	r2, [r7, #8]
 8011560:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011564:	891b      	ldrh	r3, [r3, #8]
 8011566:	461c      	mov	r4, r3
 8011568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801156a:	68db      	ldr	r3, [r3, #12]
 801156c:	899b      	ldrh	r3, [r3, #12]
 801156e:	b29b      	uxth	r3, r3
 8011570:	4618      	mov	r0, r3
 8011572:	f7f8 fee1 	bl	800a338 <lwip_htons>
 8011576:	4603      	mov	r3, r0
 8011578:	b2db      	uxtb	r3, r3
 801157a:	f003 0303 	and.w	r3, r3, #3
 801157e:	2b00      	cmp	r3, #0
 8011580:	d001      	beq.n	8011586 <tcp_output+0x2de>
 8011582:	2301      	movs	r3, #1
 8011584:	e000      	b.n	8011588 <tcp_output+0x2e0>
 8011586:	2300      	movs	r3, #0
 8011588:	4423      	add	r3, r4
 801158a:	2b00      	cmp	r3, #0
 801158c:	d049      	beq.n	8011622 <tcp_output+0x37a>
      seg->next = NULL;
 801158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011590:	2200      	movs	r2, #0
 8011592:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011598:	2b00      	cmp	r3, #0
 801159a:	d105      	bne.n	80115a8 <tcp_output+0x300>
        pcb->unacked = seg;
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115a0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80115a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115a4:	623b      	str	r3, [r7, #32]
 80115a6:	e03f      	b.n	8011628 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80115a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115aa:	68db      	ldr	r3, [r3, #12]
 80115ac:	685b      	ldr	r3, [r3, #4]
 80115ae:	4618      	mov	r0, r3
 80115b0:	f7f8 fed7 	bl	800a362 <lwip_htonl>
 80115b4:	4604      	mov	r4, r0
 80115b6:	6a3b      	ldr	r3, [r7, #32]
 80115b8:	68db      	ldr	r3, [r3, #12]
 80115ba:	685b      	ldr	r3, [r3, #4]
 80115bc:	4618      	mov	r0, r3
 80115be:	f7f8 fed0 	bl	800a362 <lwip_htonl>
 80115c2:	4603      	mov	r3, r0
 80115c4:	1ae3      	subs	r3, r4, r3
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	da24      	bge.n	8011614 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	3370      	adds	r3, #112	; 0x70
 80115ce:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80115d0:	e002      	b.n	80115d8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80115d2:	69fb      	ldr	r3, [r7, #28]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80115d8:	69fb      	ldr	r3, [r7, #28]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d011      	beq.n	8011604 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80115e0:	69fb      	ldr	r3, [r7, #28]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	68db      	ldr	r3, [r3, #12]
 80115e6:	685b      	ldr	r3, [r3, #4]
 80115e8:	4618      	mov	r0, r3
 80115ea:	f7f8 feba 	bl	800a362 <lwip_htonl>
 80115ee:	4604      	mov	r4, r0
 80115f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115f2:	68db      	ldr	r3, [r3, #12]
 80115f4:	685b      	ldr	r3, [r3, #4]
 80115f6:	4618      	mov	r0, r3
 80115f8:	f7f8 feb3 	bl	800a362 <lwip_htonl>
 80115fc:	4603      	mov	r3, r0
 80115fe:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011600:	2b00      	cmp	r3, #0
 8011602:	dbe6      	blt.n	80115d2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8011604:	69fb      	ldr	r3, [r7, #28]
 8011606:	681a      	ldr	r2, [r3, #0]
 8011608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801160a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801160c:	69fb      	ldr	r3, [r7, #28]
 801160e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011610:	601a      	str	r2, [r3, #0]
 8011612:	e009      	b.n	8011628 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011614:	6a3b      	ldr	r3, [r7, #32]
 8011616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011618:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801161a:	6a3b      	ldr	r3, [r7, #32]
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	623b      	str	r3, [r7, #32]
 8011620:	e002      	b.n	8011628 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011622:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011624:	f7fb ff35 	bl	800d492 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801162c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011630:	2b00      	cmp	r3, #0
 8011632:	d012      	beq.n	801165a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011636:	68db      	ldr	r3, [r3, #12]
 8011638:	685b      	ldr	r3, [r3, #4]
 801163a:	4618      	mov	r0, r3
 801163c:	f7f8 fe91 	bl	800a362 <lwip_htonl>
 8011640:	4602      	mov	r2, r0
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011646:	1ad3      	subs	r3, r2, r3
 8011648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801164a:	8912      	ldrh	r2, [r2, #8]
 801164c:	4413      	add	r3, r2
  while (seg != NULL &&
 801164e:	69ba      	ldr	r2, [r7, #24]
 8011650:	429a      	cmp	r2, r3
 8011652:	f4bf aed9 	bcs.w	8011408 <tcp_output+0x160>
 8011656:	e000      	b.n	801165a <tcp_output+0x3b2>
      break;
 8011658:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801165e:	2b00      	cmp	r3, #0
 8011660:	d108      	bne.n	8011674 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	2200      	movs	r2, #0
 8011666:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801166a:	e004      	b.n	8011676 <tcp_output+0x3ce>
    goto output_done;
 801166c:	bf00      	nop
 801166e:	e002      	b.n	8011676 <tcp_output+0x3ce>
    goto output_done;
 8011670:	bf00      	nop
 8011672:	e000      	b.n	8011676 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011674:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	8b5b      	ldrh	r3, [r3, #26]
 801167a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801167e:	b29a      	uxth	r2, r3
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011684:	2300      	movs	r3, #0
}
 8011686:	4618      	mov	r0, r3
 8011688:	3728      	adds	r7, #40	; 0x28
 801168a:	46bd      	mov	sp, r7
 801168c:	bdb0      	pop	{r4, r5, r7, pc}
 801168e:	bf00      	nop

08011690 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b082      	sub	sp, #8
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	2b00      	cmp	r3, #0
 801169c:	d106      	bne.n	80116ac <tcp_output_segment_busy+0x1c>
 801169e:	4b09      	ldr	r3, [pc, #36]	; (80116c4 <tcp_output_segment_busy+0x34>)
 80116a0:	f240 529a 	movw	r2, #1434	; 0x59a
 80116a4:	4908      	ldr	r1, [pc, #32]	; (80116c8 <tcp_output_segment_busy+0x38>)
 80116a6:	4809      	ldr	r0, [pc, #36]	; (80116cc <tcp_output_segment_busy+0x3c>)
 80116a8:	f003 fe44 	bl	8015334 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	685b      	ldr	r3, [r3, #4]
 80116b0:	7b9b      	ldrb	r3, [r3, #14]
 80116b2:	2b01      	cmp	r3, #1
 80116b4:	d001      	beq.n	80116ba <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80116b6:	2301      	movs	r3, #1
 80116b8:	e000      	b.n	80116bc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80116ba:	2300      	movs	r3, #0
}
 80116bc:	4618      	mov	r0, r3
 80116be:	3708      	adds	r7, #8
 80116c0:	46bd      	mov	sp, r7
 80116c2:	bd80      	pop	{r7, pc}
 80116c4:	0801897c 	.word	0x0801897c
 80116c8:	08018f18 	.word	0x08018f18
 80116cc:	080189d0 	.word	0x080189d0

080116d0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80116d0:	b5b0      	push	{r4, r5, r7, lr}
 80116d2:	b08c      	sub	sp, #48	; 0x30
 80116d4:	af04      	add	r7, sp, #16
 80116d6:	60f8      	str	r0, [r7, #12]
 80116d8:	60b9      	str	r1, [r7, #8]
 80116da:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d106      	bne.n	80116f0 <tcp_output_segment+0x20>
 80116e2:	4b63      	ldr	r3, [pc, #396]	; (8011870 <tcp_output_segment+0x1a0>)
 80116e4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80116e8:	4962      	ldr	r1, [pc, #392]	; (8011874 <tcp_output_segment+0x1a4>)
 80116ea:	4863      	ldr	r0, [pc, #396]	; (8011878 <tcp_output_segment+0x1a8>)
 80116ec:	f003 fe22 	bl	8015334 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80116f0:	68bb      	ldr	r3, [r7, #8]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d106      	bne.n	8011704 <tcp_output_segment+0x34>
 80116f6:	4b5e      	ldr	r3, [pc, #376]	; (8011870 <tcp_output_segment+0x1a0>)
 80116f8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80116fc:	495f      	ldr	r1, [pc, #380]	; (801187c <tcp_output_segment+0x1ac>)
 80116fe:	485e      	ldr	r0, [pc, #376]	; (8011878 <tcp_output_segment+0x1a8>)
 8011700:	f003 fe18 	bl	8015334 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d106      	bne.n	8011718 <tcp_output_segment+0x48>
 801170a:	4b59      	ldr	r3, [pc, #356]	; (8011870 <tcp_output_segment+0x1a0>)
 801170c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8011710:	495b      	ldr	r1, [pc, #364]	; (8011880 <tcp_output_segment+0x1b0>)
 8011712:	4859      	ldr	r0, [pc, #356]	; (8011878 <tcp_output_segment+0x1a8>)
 8011714:	f003 fe0e 	bl	8015334 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011718:	68f8      	ldr	r0, [r7, #12]
 801171a:	f7ff ffb9 	bl	8011690 <tcp_output_segment_busy>
 801171e:	4603      	mov	r3, r0
 8011720:	2b00      	cmp	r3, #0
 8011722:	d001      	beq.n	8011728 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011724:	2300      	movs	r3, #0
 8011726:	e09f      	b.n	8011868 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011728:	68bb      	ldr	r3, [r7, #8]
 801172a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	68dc      	ldr	r4, [r3, #12]
 8011730:	4610      	mov	r0, r2
 8011732:	f7f8 fe16 	bl	800a362 <lwip_htonl>
 8011736:	4603      	mov	r3, r0
 8011738:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801173a:	68bb      	ldr	r3, [r7, #8]
 801173c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	68dc      	ldr	r4, [r3, #12]
 8011742:	4610      	mov	r0, r2
 8011744:	f7f8 fdf8 	bl	800a338 <lwip_htons>
 8011748:	4603      	mov	r3, r0
 801174a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801174c:	68bb      	ldr	r3, [r7, #8]
 801174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011750:	68ba      	ldr	r2, [r7, #8]
 8011752:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011754:	441a      	add	r2, r3
 8011756:	68bb      	ldr	r3, [r7, #8]
 8011758:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	68db      	ldr	r3, [r3, #12]
 801175e:	3314      	adds	r3, #20
 8011760:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	7a9b      	ldrb	r3, [r3, #10]
 8011766:	f003 0301 	and.w	r3, r3, #1
 801176a:	2b00      	cmp	r3, #0
 801176c:	d015      	beq.n	801179a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801176e:	68bb      	ldr	r3, [r7, #8]
 8011770:	3304      	adds	r3, #4
 8011772:	461a      	mov	r2, r3
 8011774:	6879      	ldr	r1, [r7, #4]
 8011776:	f44f 7006 	mov.w	r0, #536	; 0x218
 801177a:	f7fc fa37 	bl	800dbec <tcp_eff_send_mss_netif>
 801177e:	4603      	mov	r3, r0
 8011780:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011782:	8b7b      	ldrh	r3, [r7, #26]
 8011784:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011788:	4618      	mov	r0, r3
 801178a:	f7f8 fdea 	bl	800a362 <lwip_htonl>
 801178e:	4602      	mov	r2, r0
 8011790:	69fb      	ldr	r3, [r7, #28]
 8011792:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011794:	69fb      	ldr	r3, [r7, #28]
 8011796:	3304      	adds	r3, #4
 8011798:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801179a:	68bb      	ldr	r3, [r7, #8]
 801179c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	da02      	bge.n	80117aa <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80117a4:	68bb      	ldr	r3, [r7, #8]
 80117a6:	2200      	movs	r2, #0
 80117a8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80117aa:	68bb      	ldr	r3, [r7, #8]
 80117ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d10c      	bne.n	80117cc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80117b2:	4b34      	ldr	r3, [pc, #208]	; (8011884 <tcp_output_segment+0x1b4>)
 80117b4:	681a      	ldr	r2, [r3, #0]
 80117b6:	68bb      	ldr	r3, [r7, #8]
 80117b8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	68db      	ldr	r3, [r3, #12]
 80117be:	685b      	ldr	r3, [r3, #4]
 80117c0:	4618      	mov	r0, r3
 80117c2:	f7f8 fdce 	bl	800a362 <lwip_htonl>
 80117c6:	4602      	mov	r2, r0
 80117c8:	68bb      	ldr	r3, [r7, #8]
 80117ca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	68da      	ldr	r2, [r3, #12]
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	685b      	ldr	r3, [r3, #4]
 80117d4:	685b      	ldr	r3, [r3, #4]
 80117d6:	1ad3      	subs	r3, r2, r3
 80117d8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	685b      	ldr	r3, [r3, #4]
 80117de:	8959      	ldrh	r1, [r3, #10]
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	685b      	ldr	r3, [r3, #4]
 80117e4:	8b3a      	ldrh	r2, [r7, #24]
 80117e6:	1a8a      	subs	r2, r1, r2
 80117e8:	b292      	uxth	r2, r2
 80117ea:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	685b      	ldr	r3, [r3, #4]
 80117f0:	8919      	ldrh	r1, [r3, #8]
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	685b      	ldr	r3, [r3, #4]
 80117f6:	8b3a      	ldrh	r2, [r7, #24]
 80117f8:	1a8a      	subs	r2, r1, r2
 80117fa:	b292      	uxth	r2, r2
 80117fc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	685b      	ldr	r3, [r3, #4]
 8011802:	68fa      	ldr	r2, [r7, #12]
 8011804:	68d2      	ldr	r2, [r2, #12]
 8011806:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	68db      	ldr	r3, [r3, #12]
 801180c:	2200      	movs	r2, #0
 801180e:	741a      	strb	r2, [r3, #16]
 8011810:	2200      	movs	r2, #0
 8011812:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	68db      	ldr	r3, [r3, #12]
 8011818:	f103 0214 	add.w	r2, r3, #20
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	7a9b      	ldrb	r3, [r3, #10]
 8011820:	009b      	lsls	r3, r3, #2
 8011822:	f003 0304 	and.w	r3, r3, #4
 8011826:	4413      	add	r3, r2
 8011828:	69fa      	ldr	r2, [r7, #28]
 801182a:	429a      	cmp	r2, r3
 801182c:	d006      	beq.n	801183c <tcp_output_segment+0x16c>
 801182e:	4b10      	ldr	r3, [pc, #64]	; (8011870 <tcp_output_segment+0x1a0>)
 8011830:	f240 621c 	movw	r2, #1564	; 0x61c
 8011834:	4914      	ldr	r1, [pc, #80]	; (8011888 <tcp_output_segment+0x1b8>)
 8011836:	4810      	ldr	r0, [pc, #64]	; (8011878 <tcp_output_segment+0x1a8>)
 8011838:	f003 fd7c 	bl	8015334 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	6858      	ldr	r0, [r3, #4]
 8011840:	68b9      	ldr	r1, [r7, #8]
 8011842:	68bb      	ldr	r3, [r7, #8]
 8011844:	1d1c      	adds	r4, r3, #4
 8011846:	68bb      	ldr	r3, [r7, #8]
 8011848:	7add      	ldrb	r5, [r3, #11]
 801184a:	68bb      	ldr	r3, [r7, #8]
 801184c:	7a9b      	ldrb	r3, [r3, #10]
 801184e:	687a      	ldr	r2, [r7, #4]
 8011850:	9202      	str	r2, [sp, #8]
 8011852:	2206      	movs	r2, #6
 8011854:	9201      	str	r2, [sp, #4]
 8011856:	9300      	str	r3, [sp, #0]
 8011858:	462b      	mov	r3, r5
 801185a:	4622      	mov	r2, r4
 801185c:	f002 faa0 	bl	8013da0 <ip4_output_if>
 8011860:	4603      	mov	r3, r0
 8011862:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011864:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011868:	4618      	mov	r0, r3
 801186a:	3720      	adds	r7, #32
 801186c:	46bd      	mov	sp, r7
 801186e:	bdb0      	pop	{r4, r5, r7, pc}
 8011870:	0801897c 	.word	0x0801897c
 8011874:	08018f40 	.word	0x08018f40
 8011878:	080189d0 	.word	0x080189d0
 801187c:	08018f60 	.word	0x08018f60
 8011880:	08018f80 	.word	0x08018f80
 8011884:	2000ab1c 	.word	0x2000ab1c
 8011888:	08018fa4 	.word	0x08018fa4

0801188c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801188c:	b5b0      	push	{r4, r5, r7, lr}
 801188e:	b084      	sub	sp, #16
 8011890:	af00      	add	r7, sp, #0
 8011892:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d106      	bne.n	80118a8 <tcp_rexmit_rto_prepare+0x1c>
 801189a:	4b31      	ldr	r3, [pc, #196]	; (8011960 <tcp_rexmit_rto_prepare+0xd4>)
 801189c:	f240 6263 	movw	r2, #1635	; 0x663
 80118a0:	4930      	ldr	r1, [pc, #192]	; (8011964 <tcp_rexmit_rto_prepare+0xd8>)
 80118a2:	4831      	ldr	r0, [pc, #196]	; (8011968 <tcp_rexmit_rto_prepare+0xdc>)
 80118a4:	f003 fd46 	bl	8015334 <iprintf>

  if (pcb->unacked == NULL) {
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d102      	bne.n	80118b6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80118b0:	f06f 0305 	mvn.w	r3, #5
 80118b4:	e050      	b.n	8011958 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118ba:	60fb      	str	r3, [r7, #12]
 80118bc:	e00b      	b.n	80118d6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80118be:	68f8      	ldr	r0, [r7, #12]
 80118c0:	f7ff fee6 	bl	8011690 <tcp_output_segment_busy>
 80118c4:	4603      	mov	r3, r0
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d002      	beq.n	80118d0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80118ca:	f06f 0305 	mvn.w	r3, #5
 80118ce:	e043      	b.n	8011958 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	60fb      	str	r3, [r7, #12]
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d1ef      	bne.n	80118be <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80118de:	68f8      	ldr	r0, [r7, #12]
 80118e0:	f7ff fed6 	bl	8011690 <tcp_output_segment_busy>
 80118e4:	4603      	mov	r3, r0
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d002      	beq.n	80118f0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80118ea:	f06f 0305 	mvn.w	r3, #5
 80118ee:	e033      	b.n	8011958 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	2200      	movs	r2, #0
 8011904:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	8b5b      	ldrh	r3, [r3, #26]
 801190a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801190e:	b29a      	uxth	r2, r3
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	68db      	ldr	r3, [r3, #12]
 8011918:	685b      	ldr	r3, [r3, #4]
 801191a:	4618      	mov	r0, r3
 801191c:	f7f8 fd21 	bl	800a362 <lwip_htonl>
 8011920:	4604      	mov	r4, r0
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	891b      	ldrh	r3, [r3, #8]
 8011926:	461d      	mov	r5, r3
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	68db      	ldr	r3, [r3, #12]
 801192c:	899b      	ldrh	r3, [r3, #12]
 801192e:	b29b      	uxth	r3, r3
 8011930:	4618      	mov	r0, r3
 8011932:	f7f8 fd01 	bl	800a338 <lwip_htons>
 8011936:	4603      	mov	r3, r0
 8011938:	b2db      	uxtb	r3, r3
 801193a:	f003 0303 	and.w	r3, r3, #3
 801193e:	2b00      	cmp	r3, #0
 8011940:	d001      	beq.n	8011946 <tcp_rexmit_rto_prepare+0xba>
 8011942:	2301      	movs	r3, #1
 8011944:	e000      	b.n	8011948 <tcp_rexmit_rto_prepare+0xbc>
 8011946:	2300      	movs	r3, #0
 8011948:	442b      	add	r3, r5
 801194a:	18e2      	adds	r2, r4, r3
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	2200      	movs	r2, #0
 8011954:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8011956:	2300      	movs	r3, #0
}
 8011958:	4618      	mov	r0, r3
 801195a:	3710      	adds	r7, #16
 801195c:	46bd      	mov	sp, r7
 801195e:	bdb0      	pop	{r4, r5, r7, pc}
 8011960:	0801897c 	.word	0x0801897c
 8011964:	08018fb8 	.word	0x08018fb8
 8011968:	080189d0 	.word	0x080189d0

0801196c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801196c:	b580      	push	{r7, lr}
 801196e:	b082      	sub	sp, #8
 8011970:	af00      	add	r7, sp, #0
 8011972:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d106      	bne.n	8011988 <tcp_rexmit_rto_commit+0x1c>
 801197a:	4b0d      	ldr	r3, [pc, #52]	; (80119b0 <tcp_rexmit_rto_commit+0x44>)
 801197c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011980:	490c      	ldr	r1, [pc, #48]	; (80119b4 <tcp_rexmit_rto_commit+0x48>)
 8011982:	480d      	ldr	r0, [pc, #52]	; (80119b8 <tcp_rexmit_rto_commit+0x4c>)
 8011984:	f003 fcd6 	bl	8015334 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801198e:	2bff      	cmp	r3, #255	; 0xff
 8011990:	d007      	beq.n	80119a2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011998:	3301      	adds	r3, #1
 801199a:	b2da      	uxtb	r2, r3
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80119a2:	6878      	ldr	r0, [r7, #4]
 80119a4:	f7ff fc80 	bl	80112a8 <tcp_output>
}
 80119a8:	bf00      	nop
 80119aa:	3708      	adds	r7, #8
 80119ac:	46bd      	mov	sp, r7
 80119ae:	bd80      	pop	{r7, pc}
 80119b0:	0801897c 	.word	0x0801897c
 80119b4:	08018fdc 	.word	0x08018fdc
 80119b8:	080189d0 	.word	0x080189d0

080119bc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80119bc:	b580      	push	{r7, lr}
 80119be:	b082      	sub	sp, #8
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d106      	bne.n	80119d8 <tcp_rexmit_rto+0x1c>
 80119ca:	4b0a      	ldr	r3, [pc, #40]	; (80119f4 <tcp_rexmit_rto+0x38>)
 80119cc:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80119d0:	4909      	ldr	r1, [pc, #36]	; (80119f8 <tcp_rexmit_rto+0x3c>)
 80119d2:	480a      	ldr	r0, [pc, #40]	; (80119fc <tcp_rexmit_rto+0x40>)
 80119d4:	f003 fcae 	bl	8015334 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80119d8:	6878      	ldr	r0, [r7, #4]
 80119da:	f7ff ff57 	bl	801188c <tcp_rexmit_rto_prepare>
 80119de:	4603      	mov	r3, r0
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d102      	bne.n	80119ea <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80119e4:	6878      	ldr	r0, [r7, #4]
 80119e6:	f7ff ffc1 	bl	801196c <tcp_rexmit_rto_commit>
  }
}
 80119ea:	bf00      	nop
 80119ec:	3708      	adds	r7, #8
 80119ee:	46bd      	mov	sp, r7
 80119f0:	bd80      	pop	{r7, pc}
 80119f2:	bf00      	nop
 80119f4:	0801897c 	.word	0x0801897c
 80119f8:	08019000 	.word	0x08019000
 80119fc:	080189d0 	.word	0x080189d0

08011a00 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011a00:	b590      	push	{r4, r7, lr}
 8011a02:	b085      	sub	sp, #20
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d106      	bne.n	8011a1c <tcp_rexmit+0x1c>
 8011a0e:	4b2f      	ldr	r3, [pc, #188]	; (8011acc <tcp_rexmit+0xcc>)
 8011a10:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8011a14:	492e      	ldr	r1, [pc, #184]	; (8011ad0 <tcp_rexmit+0xd0>)
 8011a16:	482f      	ldr	r0, [pc, #188]	; (8011ad4 <tcp_rexmit+0xd4>)
 8011a18:	f003 fc8c 	bl	8015334 <iprintf>

  if (pcb->unacked == NULL) {
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d102      	bne.n	8011a2a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8011a24:	f06f 0305 	mvn.w	r3, #5
 8011a28:	e04c      	b.n	8011ac4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a2e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8011a30:	68b8      	ldr	r0, [r7, #8]
 8011a32:	f7ff fe2d 	bl	8011690 <tcp_output_segment_busy>
 8011a36:	4603      	mov	r3, r0
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d002      	beq.n	8011a42 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8011a3c:	f06f 0305 	mvn.w	r3, #5
 8011a40:	e040      	b.n	8011ac4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8011a42:	68bb      	ldr	r3, [r7, #8]
 8011a44:	681a      	ldr	r2, [r3, #0]
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	336c      	adds	r3, #108	; 0x6c
 8011a4e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011a50:	e002      	b.n	8011a58 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d011      	beq.n	8011a84 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	68db      	ldr	r3, [r3, #12]
 8011a66:	685b      	ldr	r3, [r3, #4]
 8011a68:	4618      	mov	r0, r3
 8011a6a:	f7f8 fc7a 	bl	800a362 <lwip_htonl>
 8011a6e:	4604      	mov	r4, r0
 8011a70:	68bb      	ldr	r3, [r7, #8]
 8011a72:	68db      	ldr	r3, [r3, #12]
 8011a74:	685b      	ldr	r3, [r3, #4]
 8011a76:	4618      	mov	r0, r3
 8011a78:	f7f8 fc73 	bl	800a362 <lwip_htonl>
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	dbe6      	blt.n	8011a52 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	681a      	ldr	r2, [r3, #0]
 8011a88:	68bb      	ldr	r3, [r7, #8]
 8011a8a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	68ba      	ldr	r2, [r7, #8]
 8011a90:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8011a92:	68bb      	ldr	r3, [r7, #8]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d103      	bne.n	8011aa2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	2200      	movs	r2, #0
 8011a9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011aa8:	2bff      	cmp	r3, #255	; 0xff
 8011aaa:	d007      	beq.n	8011abc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011ab2:	3301      	adds	r3, #1
 8011ab4:	b2da      	uxtb	r2, r3
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	2200      	movs	r2, #0
 8011ac0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8011ac2:	2300      	movs	r3, #0
}
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	3714      	adds	r7, #20
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	bd90      	pop	{r4, r7, pc}
 8011acc:	0801897c 	.word	0x0801897c
 8011ad0:	0801901c 	.word	0x0801901c
 8011ad4:	080189d0 	.word	0x080189d0

08011ad8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b082      	sub	sp, #8
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d106      	bne.n	8011af4 <tcp_rexmit_fast+0x1c>
 8011ae6:	4b2a      	ldr	r3, [pc, #168]	; (8011b90 <tcp_rexmit_fast+0xb8>)
 8011ae8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8011aec:	4929      	ldr	r1, [pc, #164]	; (8011b94 <tcp_rexmit_fast+0xbc>)
 8011aee:	482a      	ldr	r0, [pc, #168]	; (8011b98 <tcp_rexmit_fast+0xc0>)
 8011af0:	f003 fc20 	bl	8015334 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d045      	beq.n	8011b88 <tcp_rexmit_fast+0xb0>
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	8b5b      	ldrh	r3, [r3, #26]
 8011b00:	f003 0304 	and.w	r3, r3, #4
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d13f      	bne.n	8011b88 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8011b08:	6878      	ldr	r0, [r7, #4]
 8011b0a:	f7ff ff79 	bl	8011a00 <tcp_rexmit>
 8011b0e:	4603      	mov	r3, r0
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d139      	bne.n	8011b88 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011b20:	4293      	cmp	r3, r2
 8011b22:	bf28      	it	cs
 8011b24:	4613      	movcs	r3, r2
 8011b26:	b29b      	uxth	r3, r3
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	da00      	bge.n	8011b2e <tcp_rexmit_fast+0x56>
 8011b2c:	3301      	adds	r3, #1
 8011b2e:	105b      	asrs	r3, r3, #1
 8011b30:	b29a      	uxth	r2, r3
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011b3e:	461a      	mov	r2, r3
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b44:	005b      	lsls	r3, r3, #1
 8011b46:	429a      	cmp	r2, r3
 8011b48:	d206      	bcs.n	8011b58 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b4e:	005b      	lsls	r3, r3, #1
 8011b50:	b29a      	uxth	r2, r3
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b62:	4619      	mov	r1, r3
 8011b64:	0049      	lsls	r1, r1, #1
 8011b66:	440b      	add	r3, r1
 8011b68:	b29b      	uxth	r3, r3
 8011b6a:	4413      	add	r3, r2
 8011b6c:	b29a      	uxth	r2, r3
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	8b5b      	ldrh	r3, [r3, #26]
 8011b78:	f043 0304 	orr.w	r3, r3, #4
 8011b7c:	b29a      	uxth	r2, r3
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	2200      	movs	r2, #0
 8011b86:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8011b88:	bf00      	nop
 8011b8a:	3708      	adds	r7, #8
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	bd80      	pop	{r7, pc}
 8011b90:	0801897c 	.word	0x0801897c
 8011b94:	08019034 	.word	0x08019034
 8011b98:	080189d0 	.word	0x080189d0

08011b9c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8011b9c:	b580      	push	{r7, lr}
 8011b9e:	b086      	sub	sp, #24
 8011ba0:	af00      	add	r7, sp, #0
 8011ba2:	60f8      	str	r0, [r7, #12]
 8011ba4:	607b      	str	r3, [r7, #4]
 8011ba6:	460b      	mov	r3, r1
 8011ba8:	817b      	strh	r3, [r7, #10]
 8011baa:	4613      	mov	r3, r2
 8011bac:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8011bae:	897a      	ldrh	r2, [r7, #10]
 8011bb0:	893b      	ldrh	r3, [r7, #8]
 8011bb2:	4413      	add	r3, r2
 8011bb4:	b29b      	uxth	r3, r3
 8011bb6:	3314      	adds	r3, #20
 8011bb8:	b29b      	uxth	r3, r3
 8011bba:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011bbe:	4619      	mov	r1, r3
 8011bc0:	2022      	movs	r0, #34	; 0x22
 8011bc2:	f7f9 fca9 	bl	800b518 <pbuf_alloc>
 8011bc6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011bc8:	697b      	ldr	r3, [r7, #20]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d04d      	beq.n	8011c6a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011bce:	897b      	ldrh	r3, [r7, #10]
 8011bd0:	3313      	adds	r3, #19
 8011bd2:	697a      	ldr	r2, [r7, #20]
 8011bd4:	8952      	ldrh	r2, [r2, #10]
 8011bd6:	4293      	cmp	r3, r2
 8011bd8:	db06      	blt.n	8011be8 <tcp_output_alloc_header_common+0x4c>
 8011bda:	4b26      	ldr	r3, [pc, #152]	; (8011c74 <tcp_output_alloc_header_common+0xd8>)
 8011bdc:	f240 7223 	movw	r2, #1827	; 0x723
 8011be0:	4925      	ldr	r1, [pc, #148]	; (8011c78 <tcp_output_alloc_header_common+0xdc>)
 8011be2:	4826      	ldr	r0, [pc, #152]	; (8011c7c <tcp_output_alloc_header_common+0xe0>)
 8011be4:	f003 fba6 	bl	8015334 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011be8:	697b      	ldr	r3, [r7, #20]
 8011bea:	685b      	ldr	r3, [r3, #4]
 8011bec:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8011bee:	8c3b      	ldrh	r3, [r7, #32]
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	f7f8 fba1 	bl	800a338 <lwip_htons>
 8011bf6:	4603      	mov	r3, r0
 8011bf8:	461a      	mov	r2, r3
 8011bfa:	693b      	ldr	r3, [r7, #16]
 8011bfc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8011bfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011c00:	4618      	mov	r0, r3
 8011c02:	f7f8 fb99 	bl	800a338 <lwip_htons>
 8011c06:	4603      	mov	r3, r0
 8011c08:	461a      	mov	r2, r3
 8011c0a:	693b      	ldr	r3, [r7, #16]
 8011c0c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8011c0e:	693b      	ldr	r3, [r7, #16]
 8011c10:	687a      	ldr	r2, [r7, #4]
 8011c12:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8011c14:	68f8      	ldr	r0, [r7, #12]
 8011c16:	f7f8 fba4 	bl	800a362 <lwip_htonl>
 8011c1a:	4602      	mov	r2, r0
 8011c1c:	693b      	ldr	r3, [r7, #16]
 8011c1e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8011c20:	897b      	ldrh	r3, [r7, #10]
 8011c22:	089b      	lsrs	r3, r3, #2
 8011c24:	b29b      	uxth	r3, r3
 8011c26:	3305      	adds	r3, #5
 8011c28:	b29b      	uxth	r3, r3
 8011c2a:	031b      	lsls	r3, r3, #12
 8011c2c:	b29a      	uxth	r2, r3
 8011c2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011c32:	b29b      	uxth	r3, r3
 8011c34:	4313      	orrs	r3, r2
 8011c36:	b29b      	uxth	r3, r3
 8011c38:	4618      	mov	r0, r3
 8011c3a:	f7f8 fb7d 	bl	800a338 <lwip_htons>
 8011c3e:	4603      	mov	r3, r0
 8011c40:	461a      	mov	r2, r3
 8011c42:	693b      	ldr	r3, [r7, #16]
 8011c44:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8011c46:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011c48:	4618      	mov	r0, r3
 8011c4a:	f7f8 fb75 	bl	800a338 <lwip_htons>
 8011c4e:	4603      	mov	r3, r0
 8011c50:	461a      	mov	r2, r3
 8011c52:	693b      	ldr	r3, [r7, #16]
 8011c54:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8011c56:	693b      	ldr	r3, [r7, #16]
 8011c58:	2200      	movs	r2, #0
 8011c5a:	741a      	strb	r2, [r3, #16]
 8011c5c:	2200      	movs	r2, #0
 8011c5e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011c60:	693b      	ldr	r3, [r7, #16]
 8011c62:	2200      	movs	r2, #0
 8011c64:	749a      	strb	r2, [r3, #18]
 8011c66:	2200      	movs	r2, #0
 8011c68:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8011c6a:	697b      	ldr	r3, [r7, #20]
}
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	3718      	adds	r7, #24
 8011c70:	46bd      	mov	sp, r7
 8011c72:	bd80      	pop	{r7, pc}
 8011c74:	0801897c 	.word	0x0801897c
 8011c78:	08019054 	.word	0x08019054
 8011c7c:	080189d0 	.word	0x080189d0

08011c80 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011c80:	b5b0      	push	{r4, r5, r7, lr}
 8011c82:	b08a      	sub	sp, #40	; 0x28
 8011c84:	af04      	add	r7, sp, #16
 8011c86:	60f8      	str	r0, [r7, #12]
 8011c88:	607b      	str	r3, [r7, #4]
 8011c8a:	460b      	mov	r3, r1
 8011c8c:	817b      	strh	r3, [r7, #10]
 8011c8e:	4613      	mov	r3, r2
 8011c90:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d106      	bne.n	8011ca6 <tcp_output_alloc_header+0x26>
 8011c98:	4b15      	ldr	r3, [pc, #84]	; (8011cf0 <tcp_output_alloc_header+0x70>)
 8011c9a:	f240 7242 	movw	r2, #1858	; 0x742
 8011c9e:	4915      	ldr	r1, [pc, #84]	; (8011cf4 <tcp_output_alloc_header+0x74>)
 8011ca0:	4815      	ldr	r0, [pc, #84]	; (8011cf8 <tcp_output_alloc_header+0x78>)
 8011ca2:	f003 fb47 	bl	8015334 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	8adb      	ldrh	r3, [r3, #22]
 8011cae:	68fa      	ldr	r2, [r7, #12]
 8011cb0:	8b12      	ldrh	r2, [r2, #24]
 8011cb2:	68f9      	ldr	r1, [r7, #12]
 8011cb4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8011cb6:	893d      	ldrh	r5, [r7, #8]
 8011cb8:	897c      	ldrh	r4, [r7, #10]
 8011cba:	9103      	str	r1, [sp, #12]
 8011cbc:	2110      	movs	r1, #16
 8011cbe:	9102      	str	r1, [sp, #8]
 8011cc0:	9201      	str	r2, [sp, #4]
 8011cc2:	9300      	str	r3, [sp, #0]
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	462a      	mov	r2, r5
 8011cc8:	4621      	mov	r1, r4
 8011cca:	f7ff ff67 	bl	8011b9c <tcp_output_alloc_header_common>
 8011cce:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011cd0:	697b      	ldr	r3, [r7, #20]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d006      	beq.n	8011ce4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cda:	68fa      	ldr	r2, [r7, #12]
 8011cdc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011cde:	441a      	add	r2, r3
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8011ce4:	697b      	ldr	r3, [r7, #20]
}
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	3718      	adds	r7, #24
 8011cea:	46bd      	mov	sp, r7
 8011cec:	bdb0      	pop	{r4, r5, r7, pc}
 8011cee:	bf00      	nop
 8011cf0:	0801897c 	.word	0x0801897c
 8011cf4:	08019084 	.word	0x08019084
 8011cf8:	080189d0 	.word	0x080189d0

08011cfc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	b088      	sub	sp, #32
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	60f8      	str	r0, [r7, #12]
 8011d04:	60b9      	str	r1, [r7, #8]
 8011d06:	4611      	mov	r1, r2
 8011d08:	461a      	mov	r2, r3
 8011d0a:	460b      	mov	r3, r1
 8011d0c:	71fb      	strb	r3, [r7, #7]
 8011d0e:	4613      	mov	r3, r2
 8011d10:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8011d12:	2300      	movs	r3, #0
 8011d14:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8011d16:	68bb      	ldr	r3, [r7, #8]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d106      	bne.n	8011d2a <tcp_output_fill_options+0x2e>
 8011d1c:	4b13      	ldr	r3, [pc, #76]	; (8011d6c <tcp_output_fill_options+0x70>)
 8011d1e:	f240 7256 	movw	r2, #1878	; 0x756
 8011d22:	4913      	ldr	r1, [pc, #76]	; (8011d70 <tcp_output_fill_options+0x74>)
 8011d24:	4813      	ldr	r0, [pc, #76]	; (8011d74 <tcp_output_fill_options+0x78>)
 8011d26:	f003 fb05 	bl	8015334 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8011d2a:	68bb      	ldr	r3, [r7, #8]
 8011d2c:	685b      	ldr	r3, [r3, #4]
 8011d2e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8011d30:	69bb      	ldr	r3, [r7, #24]
 8011d32:	3314      	adds	r3, #20
 8011d34:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8011d36:	69bb      	ldr	r3, [r7, #24]
 8011d38:	f103 0214 	add.w	r2, r3, #20
 8011d3c:	8bfb      	ldrh	r3, [r7, #30]
 8011d3e:	009b      	lsls	r3, r3, #2
 8011d40:	4619      	mov	r1, r3
 8011d42:	79fb      	ldrb	r3, [r7, #7]
 8011d44:	009b      	lsls	r3, r3, #2
 8011d46:	f003 0304 	and.w	r3, r3, #4
 8011d4a:	440b      	add	r3, r1
 8011d4c:	4413      	add	r3, r2
 8011d4e:	697a      	ldr	r2, [r7, #20]
 8011d50:	429a      	cmp	r2, r3
 8011d52:	d006      	beq.n	8011d62 <tcp_output_fill_options+0x66>
 8011d54:	4b05      	ldr	r3, [pc, #20]	; (8011d6c <tcp_output_fill_options+0x70>)
 8011d56:	f240 7275 	movw	r2, #1909	; 0x775
 8011d5a:	4907      	ldr	r1, [pc, #28]	; (8011d78 <tcp_output_fill_options+0x7c>)
 8011d5c:	4805      	ldr	r0, [pc, #20]	; (8011d74 <tcp_output_fill_options+0x78>)
 8011d5e:	f003 fae9 	bl	8015334 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8011d62:	bf00      	nop
 8011d64:	3720      	adds	r7, #32
 8011d66:	46bd      	mov	sp, r7
 8011d68:	bd80      	pop	{r7, pc}
 8011d6a:	bf00      	nop
 8011d6c:	0801897c 	.word	0x0801897c
 8011d70:	080190ac 	.word	0x080190ac
 8011d74:	080189d0 	.word	0x080189d0
 8011d78:	08018fa4 	.word	0x08018fa4

08011d7c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	b08a      	sub	sp, #40	; 0x28
 8011d80:	af04      	add	r7, sp, #16
 8011d82:	60f8      	str	r0, [r7, #12]
 8011d84:	60b9      	str	r1, [r7, #8]
 8011d86:	607a      	str	r2, [r7, #4]
 8011d88:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011d8a:	68bb      	ldr	r3, [r7, #8]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d106      	bne.n	8011d9e <tcp_output_control_segment+0x22>
 8011d90:	4b1c      	ldr	r3, [pc, #112]	; (8011e04 <tcp_output_control_segment+0x88>)
 8011d92:	f240 7287 	movw	r2, #1927	; 0x787
 8011d96:	491c      	ldr	r1, [pc, #112]	; (8011e08 <tcp_output_control_segment+0x8c>)
 8011d98:	481c      	ldr	r0, [pc, #112]	; (8011e0c <tcp_output_control_segment+0x90>)
 8011d9a:	f003 facb 	bl	8015334 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011d9e:	683a      	ldr	r2, [r7, #0]
 8011da0:	6879      	ldr	r1, [r7, #4]
 8011da2:	68f8      	ldr	r0, [r7, #12]
 8011da4:	f7fe fae8 	bl	8010378 <tcp_route>
 8011da8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011daa:	693b      	ldr	r3, [r7, #16]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d102      	bne.n	8011db6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011db0:	23fc      	movs	r3, #252	; 0xfc
 8011db2:	75fb      	strb	r3, [r7, #23]
 8011db4:	e01c      	b.n	8011df0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d006      	beq.n	8011dca <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	7adb      	ldrb	r3, [r3, #11]
 8011dc0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	7a9b      	ldrb	r3, [r3, #10]
 8011dc6:	757b      	strb	r3, [r7, #21]
 8011dc8:	e003      	b.n	8011dd2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011dca:	23ff      	movs	r3, #255	; 0xff
 8011dcc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011dce:	2300      	movs	r3, #0
 8011dd0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011dd2:	7dba      	ldrb	r2, [r7, #22]
 8011dd4:	693b      	ldr	r3, [r7, #16]
 8011dd6:	9302      	str	r3, [sp, #8]
 8011dd8:	2306      	movs	r3, #6
 8011dda:	9301      	str	r3, [sp, #4]
 8011ddc:	7d7b      	ldrb	r3, [r7, #21]
 8011dde:	9300      	str	r3, [sp, #0]
 8011de0:	4613      	mov	r3, r2
 8011de2:	683a      	ldr	r2, [r7, #0]
 8011de4:	6879      	ldr	r1, [r7, #4]
 8011de6:	68b8      	ldr	r0, [r7, #8]
 8011de8:	f001 ffda 	bl	8013da0 <ip4_output_if>
 8011dec:	4603      	mov	r3, r0
 8011dee:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011df0:	68b8      	ldr	r0, [r7, #8]
 8011df2:	f7f9 fe75 	bl	800bae0 <pbuf_free>
  return err;
 8011df6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	3718      	adds	r7, #24
 8011dfe:	46bd      	mov	sp, r7
 8011e00:	bd80      	pop	{r7, pc}
 8011e02:	bf00      	nop
 8011e04:	0801897c 	.word	0x0801897c
 8011e08:	080190d4 	.word	0x080190d4
 8011e0c:	080189d0 	.word	0x080189d0

08011e10 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8011e10:	b590      	push	{r4, r7, lr}
 8011e12:	b08b      	sub	sp, #44	; 0x2c
 8011e14:	af04      	add	r7, sp, #16
 8011e16:	60f8      	str	r0, [r7, #12]
 8011e18:	60b9      	str	r1, [r7, #8]
 8011e1a:	607a      	str	r2, [r7, #4]
 8011e1c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8011e1e:	683b      	ldr	r3, [r7, #0]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d106      	bne.n	8011e32 <tcp_rst+0x22>
 8011e24:	4b1f      	ldr	r3, [pc, #124]	; (8011ea4 <tcp_rst+0x94>)
 8011e26:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8011e2a:	491f      	ldr	r1, [pc, #124]	; (8011ea8 <tcp_rst+0x98>)
 8011e2c:	481f      	ldr	r0, [pc, #124]	; (8011eac <tcp_rst+0x9c>)
 8011e2e:	f003 fa81 	bl	8015334 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8011e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d106      	bne.n	8011e46 <tcp_rst+0x36>
 8011e38:	4b1a      	ldr	r3, [pc, #104]	; (8011ea4 <tcp_rst+0x94>)
 8011e3a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8011e3e:	491c      	ldr	r1, [pc, #112]	; (8011eb0 <tcp_rst+0xa0>)
 8011e40:	481a      	ldr	r0, [pc, #104]	; (8011eac <tcp_rst+0x9c>)
 8011e42:	f003 fa77 	bl	8015334 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011e46:	2300      	movs	r3, #0
 8011e48:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8011e4a:	f246 0308 	movw	r3, #24584	; 0x6008
 8011e4e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011e50:	7dfb      	ldrb	r3, [r7, #23]
 8011e52:	b29c      	uxth	r4, r3
 8011e54:	68b8      	ldr	r0, [r7, #8]
 8011e56:	f7f8 fa84 	bl	800a362 <lwip_htonl>
 8011e5a:	4602      	mov	r2, r0
 8011e5c:	8abb      	ldrh	r3, [r7, #20]
 8011e5e:	9303      	str	r3, [sp, #12]
 8011e60:	2314      	movs	r3, #20
 8011e62:	9302      	str	r3, [sp, #8]
 8011e64:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011e66:	9301      	str	r3, [sp, #4]
 8011e68:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011e6a:	9300      	str	r3, [sp, #0]
 8011e6c:	4613      	mov	r3, r2
 8011e6e:	2200      	movs	r2, #0
 8011e70:	4621      	mov	r1, r4
 8011e72:	6878      	ldr	r0, [r7, #4]
 8011e74:	f7ff fe92 	bl	8011b9c <tcp_output_alloc_header_common>
 8011e78:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011e7a:	693b      	ldr	r3, [r7, #16]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d00c      	beq.n	8011e9a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011e80:	7dfb      	ldrb	r3, [r7, #23]
 8011e82:	2200      	movs	r2, #0
 8011e84:	6939      	ldr	r1, [r7, #16]
 8011e86:	68f8      	ldr	r0, [r7, #12]
 8011e88:	f7ff ff38 	bl	8011cfc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e8e:	683a      	ldr	r2, [r7, #0]
 8011e90:	6939      	ldr	r1, [r7, #16]
 8011e92:	68f8      	ldr	r0, [r7, #12]
 8011e94:	f7ff ff72 	bl	8011d7c <tcp_output_control_segment>
 8011e98:	e000      	b.n	8011e9c <tcp_rst+0x8c>
    return;
 8011e9a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011e9c:	371c      	adds	r7, #28
 8011e9e:	46bd      	mov	sp, r7
 8011ea0:	bd90      	pop	{r4, r7, pc}
 8011ea2:	bf00      	nop
 8011ea4:	0801897c 	.word	0x0801897c
 8011ea8:	08019100 	.word	0x08019100
 8011eac:	080189d0 	.word	0x080189d0
 8011eb0:	0801911c 	.word	0x0801911c

08011eb4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011eb4:	b590      	push	{r4, r7, lr}
 8011eb6:	b087      	sub	sp, #28
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d106      	bne.n	8011ed8 <tcp_send_empty_ack+0x24>
 8011eca:	4b28      	ldr	r3, [pc, #160]	; (8011f6c <tcp_send_empty_ack+0xb8>)
 8011ecc:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8011ed0:	4927      	ldr	r1, [pc, #156]	; (8011f70 <tcp_send_empty_ack+0xbc>)
 8011ed2:	4828      	ldr	r0, [pc, #160]	; (8011f74 <tcp_send_empty_ack+0xc0>)
 8011ed4:	f003 fa2e 	bl	8015334 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011ed8:	7dfb      	ldrb	r3, [r7, #23]
 8011eda:	009b      	lsls	r3, r3, #2
 8011edc:	b2db      	uxtb	r3, r3
 8011ede:	f003 0304 	and.w	r3, r3, #4
 8011ee2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011ee4:	7d7b      	ldrb	r3, [r7, #21]
 8011ee6:	b29c      	uxth	r4, r3
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011eec:	4618      	mov	r0, r3
 8011eee:	f7f8 fa38 	bl	800a362 <lwip_htonl>
 8011ef2:	4603      	mov	r3, r0
 8011ef4:	2200      	movs	r2, #0
 8011ef6:	4621      	mov	r1, r4
 8011ef8:	6878      	ldr	r0, [r7, #4]
 8011efa:	f7ff fec1 	bl	8011c80 <tcp_output_alloc_header>
 8011efe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011f00:	693b      	ldr	r3, [r7, #16]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d109      	bne.n	8011f1a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	8b5b      	ldrh	r3, [r3, #26]
 8011f0a:	f043 0303 	orr.w	r3, r3, #3
 8011f0e:	b29a      	uxth	r2, r3
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011f14:	f06f 0301 	mvn.w	r3, #1
 8011f18:	e023      	b.n	8011f62 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011f1a:	7dbb      	ldrb	r3, [r7, #22]
 8011f1c:	7dfa      	ldrb	r2, [r7, #23]
 8011f1e:	6939      	ldr	r1, [r7, #16]
 8011f20:	6878      	ldr	r0, [r7, #4]
 8011f22:	f7ff feeb 	bl	8011cfc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011f26:	687a      	ldr	r2, [r7, #4]
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	3304      	adds	r3, #4
 8011f2c:	6939      	ldr	r1, [r7, #16]
 8011f2e:	6878      	ldr	r0, [r7, #4]
 8011f30:	f7ff ff24 	bl	8011d7c <tcp_output_control_segment>
 8011f34:	4603      	mov	r3, r0
 8011f36:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011f38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d007      	beq.n	8011f50 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	8b5b      	ldrh	r3, [r3, #26]
 8011f44:	f043 0303 	orr.w	r3, r3, #3
 8011f48:	b29a      	uxth	r2, r3
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	835a      	strh	r2, [r3, #26]
 8011f4e:	e006      	b.n	8011f5e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	8b5b      	ldrh	r3, [r3, #26]
 8011f54:	f023 0303 	bic.w	r3, r3, #3
 8011f58:	b29a      	uxth	r2, r3
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011f62:	4618      	mov	r0, r3
 8011f64:	371c      	adds	r7, #28
 8011f66:	46bd      	mov	sp, r7
 8011f68:	bd90      	pop	{r4, r7, pc}
 8011f6a:	bf00      	nop
 8011f6c:	0801897c 	.word	0x0801897c
 8011f70:	08019138 	.word	0x08019138
 8011f74:	080189d0 	.word	0x080189d0

08011f78 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011f78:	b590      	push	{r4, r7, lr}
 8011f7a:	b087      	sub	sp, #28
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011f80:	2300      	movs	r3, #0
 8011f82:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d106      	bne.n	8011f98 <tcp_keepalive+0x20>
 8011f8a:	4b18      	ldr	r3, [pc, #96]	; (8011fec <tcp_keepalive+0x74>)
 8011f8c:	f640 0224 	movw	r2, #2084	; 0x824
 8011f90:	4917      	ldr	r1, [pc, #92]	; (8011ff0 <tcp_keepalive+0x78>)
 8011f92:	4818      	ldr	r0, [pc, #96]	; (8011ff4 <tcp_keepalive+0x7c>)
 8011f94:	f003 f9ce 	bl	8015334 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011f98:	7dfb      	ldrb	r3, [r7, #23]
 8011f9a:	b29c      	uxth	r4, r3
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011fa0:	3b01      	subs	r3, #1
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	f7f8 f9dd 	bl	800a362 <lwip_htonl>
 8011fa8:	4603      	mov	r3, r0
 8011faa:	2200      	movs	r2, #0
 8011fac:	4621      	mov	r1, r4
 8011fae:	6878      	ldr	r0, [r7, #4]
 8011fb0:	f7ff fe66 	bl	8011c80 <tcp_output_alloc_header>
 8011fb4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011fb6:	693b      	ldr	r3, [r7, #16]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d102      	bne.n	8011fc2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8011fc0:	e010      	b.n	8011fe4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011fc2:	7dfb      	ldrb	r3, [r7, #23]
 8011fc4:	2200      	movs	r2, #0
 8011fc6:	6939      	ldr	r1, [r7, #16]
 8011fc8:	6878      	ldr	r0, [r7, #4]
 8011fca:	f7ff fe97 	bl	8011cfc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011fce:	687a      	ldr	r2, [r7, #4]
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	3304      	adds	r3, #4
 8011fd4:	6939      	ldr	r1, [r7, #16]
 8011fd6:	6878      	ldr	r0, [r7, #4]
 8011fd8:	f7ff fed0 	bl	8011d7c <tcp_output_control_segment>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	371c      	adds	r7, #28
 8011fe8:	46bd      	mov	sp, r7
 8011fea:	bd90      	pop	{r4, r7, pc}
 8011fec:	0801897c 	.word	0x0801897c
 8011ff0:	08019158 	.word	0x08019158
 8011ff4:	080189d0 	.word	0x080189d0

08011ff8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011ff8:	b590      	push	{r4, r7, lr}
 8011ffa:	b08b      	sub	sp, #44	; 0x2c
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012000:	2300      	movs	r3, #0
 8012002:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	2b00      	cmp	r3, #0
 801200a:	d106      	bne.n	801201a <tcp_zero_window_probe+0x22>
 801200c:	4b4c      	ldr	r3, [pc, #304]	; (8012140 <tcp_zero_window_probe+0x148>)
 801200e:	f640 024f 	movw	r2, #2127	; 0x84f
 8012012:	494c      	ldr	r1, [pc, #304]	; (8012144 <tcp_zero_window_probe+0x14c>)
 8012014:	484c      	ldr	r0, [pc, #304]	; (8012148 <tcp_zero_window_probe+0x150>)
 8012016:	f003 f98d 	bl	8015334 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801201e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012020:	6a3b      	ldr	r3, [r7, #32]
 8012022:	2b00      	cmp	r3, #0
 8012024:	d101      	bne.n	801202a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012026:	2300      	movs	r3, #0
 8012028:	e086      	b.n	8012138 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012030:	2bff      	cmp	r3, #255	; 0xff
 8012032:	d007      	beq.n	8012044 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801203a:	3301      	adds	r3, #1
 801203c:	b2da      	uxtb	r2, r3
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012044:	6a3b      	ldr	r3, [r7, #32]
 8012046:	68db      	ldr	r3, [r3, #12]
 8012048:	899b      	ldrh	r3, [r3, #12]
 801204a:	b29b      	uxth	r3, r3
 801204c:	4618      	mov	r0, r3
 801204e:	f7f8 f973 	bl	800a338 <lwip_htons>
 8012052:	4603      	mov	r3, r0
 8012054:	b2db      	uxtb	r3, r3
 8012056:	f003 0301 	and.w	r3, r3, #1
 801205a:	2b00      	cmp	r3, #0
 801205c:	d005      	beq.n	801206a <tcp_zero_window_probe+0x72>
 801205e:	6a3b      	ldr	r3, [r7, #32]
 8012060:	891b      	ldrh	r3, [r3, #8]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d101      	bne.n	801206a <tcp_zero_window_probe+0x72>
 8012066:	2301      	movs	r3, #1
 8012068:	e000      	b.n	801206c <tcp_zero_window_probe+0x74>
 801206a:	2300      	movs	r3, #0
 801206c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801206e:	7ffb      	ldrb	r3, [r7, #31]
 8012070:	2b00      	cmp	r3, #0
 8012072:	bf0c      	ite	eq
 8012074:	2301      	moveq	r3, #1
 8012076:	2300      	movne	r3, #0
 8012078:	b2db      	uxtb	r3, r3
 801207a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801207c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012080:	b299      	uxth	r1, r3
 8012082:	6a3b      	ldr	r3, [r7, #32]
 8012084:	68db      	ldr	r3, [r3, #12]
 8012086:	685b      	ldr	r3, [r3, #4]
 8012088:	8bba      	ldrh	r2, [r7, #28]
 801208a:	6878      	ldr	r0, [r7, #4]
 801208c:	f7ff fdf8 	bl	8011c80 <tcp_output_alloc_header>
 8012090:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012092:	69bb      	ldr	r3, [r7, #24]
 8012094:	2b00      	cmp	r3, #0
 8012096:	d102      	bne.n	801209e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012098:	f04f 33ff 	mov.w	r3, #4294967295
 801209c:	e04c      	b.n	8012138 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801209e:	69bb      	ldr	r3, [r7, #24]
 80120a0:	685b      	ldr	r3, [r3, #4]
 80120a2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80120a4:	7ffb      	ldrb	r3, [r7, #31]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d011      	beq.n	80120ce <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80120aa:	697b      	ldr	r3, [r7, #20]
 80120ac:	899b      	ldrh	r3, [r3, #12]
 80120ae:	b29b      	uxth	r3, r3
 80120b0:	b21b      	sxth	r3, r3
 80120b2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80120b6:	b21c      	sxth	r4, r3
 80120b8:	2011      	movs	r0, #17
 80120ba:	f7f8 f93d 	bl	800a338 <lwip_htons>
 80120be:	4603      	mov	r3, r0
 80120c0:	b21b      	sxth	r3, r3
 80120c2:	4323      	orrs	r3, r4
 80120c4:	b21b      	sxth	r3, r3
 80120c6:	b29a      	uxth	r2, r3
 80120c8:	697b      	ldr	r3, [r7, #20]
 80120ca:	819a      	strh	r2, [r3, #12]
 80120cc:	e010      	b.n	80120f0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80120ce:	69bb      	ldr	r3, [r7, #24]
 80120d0:	685b      	ldr	r3, [r3, #4]
 80120d2:	3314      	adds	r3, #20
 80120d4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80120d6:	6a3b      	ldr	r3, [r7, #32]
 80120d8:	6858      	ldr	r0, [r3, #4]
 80120da:	6a3b      	ldr	r3, [r7, #32]
 80120dc:	685b      	ldr	r3, [r3, #4]
 80120de:	891a      	ldrh	r2, [r3, #8]
 80120e0:	6a3b      	ldr	r3, [r7, #32]
 80120e2:	891b      	ldrh	r3, [r3, #8]
 80120e4:	1ad3      	subs	r3, r2, r3
 80120e6:	b29b      	uxth	r3, r3
 80120e8:	2201      	movs	r2, #1
 80120ea:	6939      	ldr	r1, [r7, #16]
 80120ec:	f7f9 feee 	bl	800becc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80120f0:	6a3b      	ldr	r3, [r7, #32]
 80120f2:	68db      	ldr	r3, [r3, #12]
 80120f4:	685b      	ldr	r3, [r3, #4]
 80120f6:	4618      	mov	r0, r3
 80120f8:	f7f8 f933 	bl	800a362 <lwip_htonl>
 80120fc:	4603      	mov	r3, r0
 80120fe:	3301      	adds	r3, #1
 8012100:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	1ad3      	subs	r3, r2, r3
 801210a:	2b00      	cmp	r3, #0
 801210c:	da02      	bge.n	8012114 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	68fa      	ldr	r2, [r7, #12]
 8012112:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012114:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012118:	2200      	movs	r2, #0
 801211a:	69b9      	ldr	r1, [r7, #24]
 801211c:	6878      	ldr	r0, [r7, #4]
 801211e:	f7ff fded 	bl	8011cfc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012122:	687a      	ldr	r2, [r7, #4]
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	3304      	adds	r3, #4
 8012128:	69b9      	ldr	r1, [r7, #24]
 801212a:	6878      	ldr	r0, [r7, #4]
 801212c:	f7ff fe26 	bl	8011d7c <tcp_output_control_segment>
 8012130:	4603      	mov	r3, r0
 8012132:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012134:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012138:	4618      	mov	r0, r3
 801213a:	372c      	adds	r7, #44	; 0x2c
 801213c:	46bd      	mov	sp, r7
 801213e:	bd90      	pop	{r4, r7, pc}
 8012140:	0801897c 	.word	0x0801897c
 8012144:	08019174 	.word	0x08019174
 8012148:	080189d0 	.word	0x080189d0

0801214c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801214c:	b580      	push	{r7, lr}
 801214e:	b082      	sub	sp, #8
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012154:	f7fa f80c 	bl	800c170 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012158:	4b0a      	ldr	r3, [pc, #40]	; (8012184 <tcpip_tcp_timer+0x38>)
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d103      	bne.n	8012168 <tcpip_tcp_timer+0x1c>
 8012160:	4b09      	ldr	r3, [pc, #36]	; (8012188 <tcpip_tcp_timer+0x3c>)
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d005      	beq.n	8012174 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012168:	2200      	movs	r2, #0
 801216a:	4908      	ldr	r1, [pc, #32]	; (801218c <tcpip_tcp_timer+0x40>)
 801216c:	20fa      	movs	r0, #250	; 0xfa
 801216e:	f000 f8f3 	bl	8012358 <sys_timeout>
 8012172:	e003      	b.n	801217c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012174:	4b06      	ldr	r3, [pc, #24]	; (8012190 <tcpip_tcp_timer+0x44>)
 8012176:	2200      	movs	r2, #0
 8012178:	601a      	str	r2, [r3, #0]
  }
}
 801217a:	bf00      	nop
 801217c:	bf00      	nop
 801217e:	3708      	adds	r7, #8
 8012180:	46bd      	mov	sp, r7
 8012182:	bd80      	pop	{r7, pc}
 8012184:	2000ab18 	.word	0x2000ab18
 8012188:	2000ab28 	.word	0x2000ab28
 801218c:	0801214d 	.word	0x0801214d
 8012190:	200040dc 	.word	0x200040dc

08012194 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012194:	b580      	push	{r7, lr}
 8012196:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012198:	4b0a      	ldr	r3, [pc, #40]	; (80121c4 <tcp_timer_needed+0x30>)
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	2b00      	cmp	r3, #0
 801219e:	d10f      	bne.n	80121c0 <tcp_timer_needed+0x2c>
 80121a0:	4b09      	ldr	r3, [pc, #36]	; (80121c8 <tcp_timer_needed+0x34>)
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d103      	bne.n	80121b0 <tcp_timer_needed+0x1c>
 80121a8:	4b08      	ldr	r3, [pc, #32]	; (80121cc <tcp_timer_needed+0x38>)
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d007      	beq.n	80121c0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80121b0:	4b04      	ldr	r3, [pc, #16]	; (80121c4 <tcp_timer_needed+0x30>)
 80121b2:	2201      	movs	r2, #1
 80121b4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80121b6:	2200      	movs	r2, #0
 80121b8:	4905      	ldr	r1, [pc, #20]	; (80121d0 <tcp_timer_needed+0x3c>)
 80121ba:	20fa      	movs	r0, #250	; 0xfa
 80121bc:	f000 f8cc 	bl	8012358 <sys_timeout>
  }
}
 80121c0:	bf00      	nop
 80121c2:	bd80      	pop	{r7, pc}
 80121c4:	200040dc 	.word	0x200040dc
 80121c8:	2000ab18 	.word	0x2000ab18
 80121cc:	2000ab28 	.word	0x2000ab28
 80121d0:	0801214d 	.word	0x0801214d

080121d4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b086      	sub	sp, #24
 80121d8:	af00      	add	r7, sp, #0
 80121da:	60f8      	str	r0, [r7, #12]
 80121dc:	60b9      	str	r1, [r7, #8]
 80121de:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80121e0:	200a      	movs	r0, #10
 80121e2:	f7f8 fd87 	bl	800acf4 <memp_malloc>
 80121e6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80121e8:	693b      	ldr	r3, [r7, #16]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d109      	bne.n	8012202 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80121ee:	693b      	ldr	r3, [r7, #16]
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d151      	bne.n	8012298 <sys_timeout_abs+0xc4>
 80121f4:	4b2a      	ldr	r3, [pc, #168]	; (80122a0 <sys_timeout_abs+0xcc>)
 80121f6:	22be      	movs	r2, #190	; 0xbe
 80121f8:	492a      	ldr	r1, [pc, #168]	; (80122a4 <sys_timeout_abs+0xd0>)
 80121fa:	482b      	ldr	r0, [pc, #172]	; (80122a8 <sys_timeout_abs+0xd4>)
 80121fc:	f003 f89a 	bl	8015334 <iprintf>
    return;
 8012200:	e04a      	b.n	8012298 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8012202:	693b      	ldr	r3, [r7, #16]
 8012204:	2200      	movs	r2, #0
 8012206:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012208:	693b      	ldr	r3, [r7, #16]
 801220a:	68ba      	ldr	r2, [r7, #8]
 801220c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801220e:	693b      	ldr	r3, [r7, #16]
 8012210:	687a      	ldr	r2, [r7, #4]
 8012212:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012214:	693b      	ldr	r3, [r7, #16]
 8012216:	68fa      	ldr	r2, [r7, #12]
 8012218:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801221a:	4b24      	ldr	r3, [pc, #144]	; (80122ac <sys_timeout_abs+0xd8>)
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d103      	bne.n	801222a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8012222:	4a22      	ldr	r2, [pc, #136]	; (80122ac <sys_timeout_abs+0xd8>)
 8012224:	693b      	ldr	r3, [r7, #16]
 8012226:	6013      	str	r3, [r2, #0]
    return;
 8012228:	e037      	b.n	801229a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801222a:	693b      	ldr	r3, [r7, #16]
 801222c:	685a      	ldr	r2, [r3, #4]
 801222e:	4b1f      	ldr	r3, [pc, #124]	; (80122ac <sys_timeout_abs+0xd8>)
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	685b      	ldr	r3, [r3, #4]
 8012234:	1ad3      	subs	r3, r2, r3
 8012236:	0fdb      	lsrs	r3, r3, #31
 8012238:	f003 0301 	and.w	r3, r3, #1
 801223c:	b2db      	uxtb	r3, r3
 801223e:	2b00      	cmp	r3, #0
 8012240:	d007      	beq.n	8012252 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8012242:	4b1a      	ldr	r3, [pc, #104]	; (80122ac <sys_timeout_abs+0xd8>)
 8012244:	681a      	ldr	r2, [r3, #0]
 8012246:	693b      	ldr	r3, [r7, #16]
 8012248:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801224a:	4a18      	ldr	r2, [pc, #96]	; (80122ac <sys_timeout_abs+0xd8>)
 801224c:	693b      	ldr	r3, [r7, #16]
 801224e:	6013      	str	r3, [r2, #0]
 8012250:	e023      	b.n	801229a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012252:	4b16      	ldr	r3, [pc, #88]	; (80122ac <sys_timeout_abs+0xd8>)
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	617b      	str	r3, [r7, #20]
 8012258:	e01a      	b.n	8012290 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801225a:	697b      	ldr	r3, [r7, #20]
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	2b00      	cmp	r3, #0
 8012260:	d00b      	beq.n	801227a <sys_timeout_abs+0xa6>
 8012262:	693b      	ldr	r3, [r7, #16]
 8012264:	685a      	ldr	r2, [r3, #4]
 8012266:	697b      	ldr	r3, [r7, #20]
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	685b      	ldr	r3, [r3, #4]
 801226c:	1ad3      	subs	r3, r2, r3
 801226e:	0fdb      	lsrs	r3, r3, #31
 8012270:	f003 0301 	and.w	r3, r3, #1
 8012274:	b2db      	uxtb	r3, r3
 8012276:	2b00      	cmp	r3, #0
 8012278:	d007      	beq.n	801228a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801227a:	697b      	ldr	r3, [r7, #20]
 801227c:	681a      	ldr	r2, [r3, #0]
 801227e:	693b      	ldr	r3, [r7, #16]
 8012280:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012282:	697b      	ldr	r3, [r7, #20]
 8012284:	693a      	ldr	r2, [r7, #16]
 8012286:	601a      	str	r2, [r3, #0]
        break;
 8012288:	e007      	b.n	801229a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801228a:	697b      	ldr	r3, [r7, #20]
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	617b      	str	r3, [r7, #20]
 8012290:	697b      	ldr	r3, [r7, #20]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d1e1      	bne.n	801225a <sys_timeout_abs+0x86>
 8012296:	e000      	b.n	801229a <sys_timeout_abs+0xc6>
    return;
 8012298:	bf00      	nop
      }
    }
  }
}
 801229a:	3718      	adds	r7, #24
 801229c:	46bd      	mov	sp, r7
 801229e:	bd80      	pop	{r7, pc}
 80122a0:	08019198 	.word	0x08019198
 80122a4:	080191cc 	.word	0x080191cc
 80122a8:	0801920c 	.word	0x0801920c
 80122ac:	200040d4 	.word	0x200040d4

080122b0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80122b0:	b580      	push	{r7, lr}
 80122b2:	b086      	sub	sp, #24
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80122bc:	697b      	ldr	r3, [r7, #20]
 80122be:	685b      	ldr	r3, [r3, #4]
 80122c0:	4798      	blx	r3

  now = sys_now();
 80122c2:	f7f3 f92f 	bl	8005524 <sys_now>
 80122c6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80122c8:	697b      	ldr	r3, [r7, #20]
 80122ca:	681a      	ldr	r2, [r3, #0]
 80122cc:	4b0f      	ldr	r3, [pc, #60]	; (801230c <lwip_cyclic_timer+0x5c>)
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	4413      	add	r3, r2
 80122d2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80122d4:	68fa      	ldr	r2, [r7, #12]
 80122d6:	693b      	ldr	r3, [r7, #16]
 80122d8:	1ad3      	subs	r3, r2, r3
 80122da:	0fdb      	lsrs	r3, r3, #31
 80122dc:	f003 0301 	and.w	r3, r3, #1
 80122e0:	b2db      	uxtb	r3, r3
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d009      	beq.n	80122fa <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80122e6:	697b      	ldr	r3, [r7, #20]
 80122e8:	681a      	ldr	r2, [r3, #0]
 80122ea:	693b      	ldr	r3, [r7, #16]
 80122ec:	4413      	add	r3, r2
 80122ee:	687a      	ldr	r2, [r7, #4]
 80122f0:	4907      	ldr	r1, [pc, #28]	; (8012310 <lwip_cyclic_timer+0x60>)
 80122f2:	4618      	mov	r0, r3
 80122f4:	f7ff ff6e 	bl	80121d4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80122f8:	e004      	b.n	8012304 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80122fa:	687a      	ldr	r2, [r7, #4]
 80122fc:	4904      	ldr	r1, [pc, #16]	; (8012310 <lwip_cyclic_timer+0x60>)
 80122fe:	68f8      	ldr	r0, [r7, #12]
 8012300:	f7ff ff68 	bl	80121d4 <sys_timeout_abs>
}
 8012304:	bf00      	nop
 8012306:	3718      	adds	r7, #24
 8012308:	46bd      	mov	sp, r7
 801230a:	bd80      	pop	{r7, pc}
 801230c:	200040d8 	.word	0x200040d8
 8012310:	080122b1 	.word	0x080122b1

08012314 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012314:	b580      	push	{r7, lr}
 8012316:	b082      	sub	sp, #8
 8012318:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801231a:	2301      	movs	r3, #1
 801231c:	607b      	str	r3, [r7, #4]
 801231e:	e00e      	b.n	801233e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012320:	4a0b      	ldr	r2, [pc, #44]	; (8012350 <sys_timeouts_init+0x3c>)
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	00db      	lsls	r3, r3, #3
 801232c:	4a08      	ldr	r2, [pc, #32]	; (8012350 <sys_timeouts_init+0x3c>)
 801232e:	4413      	add	r3, r2
 8012330:	461a      	mov	r2, r3
 8012332:	4908      	ldr	r1, [pc, #32]	; (8012354 <sys_timeouts_init+0x40>)
 8012334:	f000 f810 	bl	8012358 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	3301      	adds	r3, #1
 801233c:	607b      	str	r3, [r7, #4]
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	2b02      	cmp	r3, #2
 8012342:	d9ed      	bls.n	8012320 <sys_timeouts_init+0xc>
  }
}
 8012344:	bf00      	nop
 8012346:	bf00      	nop
 8012348:	3708      	adds	r7, #8
 801234a:	46bd      	mov	sp, r7
 801234c:	bd80      	pop	{r7, pc}
 801234e:	bf00      	nop
 8012350:	08019e38 	.word	0x08019e38
 8012354:	080122b1 	.word	0x080122b1

08012358 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012358:	b580      	push	{r7, lr}
 801235a:	b086      	sub	sp, #24
 801235c:	af00      	add	r7, sp, #0
 801235e:	60f8      	str	r0, [r7, #12]
 8012360:	60b9      	str	r1, [r7, #8]
 8012362:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801236a:	d306      	bcc.n	801237a <sys_timeout+0x22>
 801236c:	4b0a      	ldr	r3, [pc, #40]	; (8012398 <sys_timeout+0x40>)
 801236e:	f240 1229 	movw	r2, #297	; 0x129
 8012372:	490a      	ldr	r1, [pc, #40]	; (801239c <sys_timeout+0x44>)
 8012374:	480a      	ldr	r0, [pc, #40]	; (80123a0 <sys_timeout+0x48>)
 8012376:	f002 ffdd 	bl	8015334 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801237a:	f7f3 f8d3 	bl	8005524 <sys_now>
 801237e:	4602      	mov	r2, r0
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	4413      	add	r3, r2
 8012384:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012386:	687a      	ldr	r2, [r7, #4]
 8012388:	68b9      	ldr	r1, [r7, #8]
 801238a:	6978      	ldr	r0, [r7, #20]
 801238c:	f7ff ff22 	bl	80121d4 <sys_timeout_abs>
#endif
}
 8012390:	bf00      	nop
 8012392:	3718      	adds	r7, #24
 8012394:	46bd      	mov	sp, r7
 8012396:	bd80      	pop	{r7, pc}
 8012398:	08019198 	.word	0x08019198
 801239c:	08019234 	.word	0x08019234
 80123a0:	0801920c 	.word	0x0801920c

080123a4 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b084      	sub	sp, #16
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]
 80123ac:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80123ae:	4b19      	ldr	r3, [pc, #100]	; (8012414 <sys_untimeout+0x70>)
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d029      	beq.n	801240a <sys_untimeout+0x66>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 80123b6:	4b17      	ldr	r3, [pc, #92]	; (8012414 <sys_untimeout+0x70>)
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	60bb      	str	r3, [r7, #8]
 80123bc:	2300      	movs	r3, #0
 80123be:	60fb      	str	r3, [r7, #12]
 80123c0:	e01f      	b.n	8012402 <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 80123c2:	68bb      	ldr	r3, [r7, #8]
 80123c4:	689b      	ldr	r3, [r3, #8]
 80123c6:	687a      	ldr	r2, [r7, #4]
 80123c8:	429a      	cmp	r2, r3
 80123ca:	d115      	bne.n	80123f8 <sys_untimeout+0x54>
 80123cc:	68bb      	ldr	r3, [r7, #8]
 80123ce:	68db      	ldr	r3, [r3, #12]
 80123d0:	683a      	ldr	r2, [r7, #0]
 80123d2:	429a      	cmp	r2, r3
 80123d4:	d110      	bne.n	80123f8 <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d104      	bne.n	80123e6 <sys_untimeout+0x42>
        next_timeout = t->next;
 80123dc:	68bb      	ldr	r3, [r7, #8]
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	4a0c      	ldr	r2, [pc, #48]	; (8012414 <sys_untimeout+0x70>)
 80123e2:	6013      	str	r3, [r2, #0]
 80123e4:	e003      	b.n	80123ee <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 80123e6:	68bb      	ldr	r3, [r7, #8]
 80123e8:	681a      	ldr	r2, [r3, #0]
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 80123ee:	68b9      	ldr	r1, [r7, #8]
 80123f0:	200a      	movs	r0, #10
 80123f2:	f7f8 fcd1 	bl	800ad98 <memp_free>
      return;
 80123f6:	e009      	b.n	801240c <sys_untimeout+0x68>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 80123f8:	68bb      	ldr	r3, [r7, #8]
 80123fa:	60fb      	str	r3, [r7, #12]
 80123fc:	68bb      	ldr	r3, [r7, #8]
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	60bb      	str	r3, [r7, #8]
 8012402:	68bb      	ldr	r3, [r7, #8]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d1dc      	bne.n	80123c2 <sys_untimeout+0x1e>
    }
  }
  return;
 8012408:	e000      	b.n	801240c <sys_untimeout+0x68>
    return;
 801240a:	bf00      	nop
}
 801240c:	3710      	adds	r7, #16
 801240e:	46bd      	mov	sp, r7
 8012410:	bd80      	pop	{r7, pc}
 8012412:	bf00      	nop
 8012414:	200040d4 	.word	0x200040d4

08012418 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012418:	b580      	push	{r7, lr}
 801241a:	b084      	sub	sp, #16
 801241c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801241e:	f7f3 f881 	bl	8005524 <sys_now>
 8012422:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8012424:	4b17      	ldr	r3, [pc, #92]	; (8012484 <sys_check_timeouts+0x6c>)
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801242a:	68bb      	ldr	r3, [r7, #8]
 801242c:	2b00      	cmp	r3, #0
 801242e:	d022      	beq.n	8012476 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012430:	68bb      	ldr	r3, [r7, #8]
 8012432:	685b      	ldr	r3, [r3, #4]
 8012434:	68fa      	ldr	r2, [r7, #12]
 8012436:	1ad3      	subs	r3, r2, r3
 8012438:	0fdb      	lsrs	r3, r3, #31
 801243a:	f003 0301 	and.w	r3, r3, #1
 801243e:	b2db      	uxtb	r3, r3
 8012440:	2b00      	cmp	r3, #0
 8012442:	d11a      	bne.n	801247a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012444:	68bb      	ldr	r3, [r7, #8]
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	4a0e      	ldr	r2, [pc, #56]	; (8012484 <sys_check_timeouts+0x6c>)
 801244a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801244c:	68bb      	ldr	r3, [r7, #8]
 801244e:	689b      	ldr	r3, [r3, #8]
 8012450:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012452:	68bb      	ldr	r3, [r7, #8]
 8012454:	68db      	ldr	r3, [r3, #12]
 8012456:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012458:	68bb      	ldr	r3, [r7, #8]
 801245a:	685b      	ldr	r3, [r3, #4]
 801245c:	4a0a      	ldr	r2, [pc, #40]	; (8012488 <sys_check_timeouts+0x70>)
 801245e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012460:	68b9      	ldr	r1, [r7, #8]
 8012462:	200a      	movs	r0, #10
 8012464:	f7f8 fc98 	bl	800ad98 <memp_free>
    if (handler != NULL) {
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d0da      	beq.n	8012424 <sys_check_timeouts+0xc>
      handler(arg);
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	6838      	ldr	r0, [r7, #0]
 8012472:	4798      	blx	r3
  do {
 8012474:	e7d6      	b.n	8012424 <sys_check_timeouts+0xc>
      return;
 8012476:	bf00      	nop
 8012478:	e000      	b.n	801247c <sys_check_timeouts+0x64>
      return;
 801247a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801247c:	3710      	adds	r7, #16
 801247e:	46bd      	mov	sp, r7
 8012480:	bd80      	pop	{r7, pc}
 8012482:	bf00      	nop
 8012484:	200040d4 	.word	0x200040d4
 8012488:	200040d8 	.word	0x200040d8

0801248c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801248c:	b580      	push	{r7, lr}
 801248e:	b082      	sub	sp, #8
 8012490:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8012492:	4b16      	ldr	r3, [pc, #88]	; (80124ec <sys_timeouts_sleeptime+0x60>)
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d102      	bne.n	80124a0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801249a:	f04f 33ff 	mov.w	r3, #4294967295
 801249e:	e020      	b.n	80124e2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80124a0:	f7f3 f840 	bl	8005524 <sys_now>
 80124a4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80124a6:	4b11      	ldr	r3, [pc, #68]	; (80124ec <sys_timeouts_sleeptime+0x60>)
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	685a      	ldr	r2, [r3, #4]
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	1ad3      	subs	r3, r2, r3
 80124b0:	0fdb      	lsrs	r3, r3, #31
 80124b2:	f003 0301 	and.w	r3, r3, #1
 80124b6:	b2db      	uxtb	r3, r3
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d001      	beq.n	80124c0 <sys_timeouts_sleeptime+0x34>
    return 0;
 80124bc:	2300      	movs	r3, #0
 80124be:	e010      	b.n	80124e2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80124c0:	4b0a      	ldr	r3, [pc, #40]	; (80124ec <sys_timeouts_sleeptime+0x60>)
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	685a      	ldr	r2, [r3, #4]
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	1ad3      	subs	r3, r2, r3
 80124ca:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80124cc:	683b      	ldr	r3, [r7, #0]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	da06      	bge.n	80124e0 <sys_timeouts_sleeptime+0x54>
 80124d2:	4b07      	ldr	r3, [pc, #28]	; (80124f0 <sys_timeouts_sleeptime+0x64>)
 80124d4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80124d8:	4906      	ldr	r1, [pc, #24]	; (80124f4 <sys_timeouts_sleeptime+0x68>)
 80124da:	4807      	ldr	r0, [pc, #28]	; (80124f8 <sys_timeouts_sleeptime+0x6c>)
 80124dc:	f002 ff2a 	bl	8015334 <iprintf>
    return ret;
 80124e0:	683b      	ldr	r3, [r7, #0]
  }
}
 80124e2:	4618      	mov	r0, r3
 80124e4:	3708      	adds	r7, #8
 80124e6:	46bd      	mov	sp, r7
 80124e8:	bd80      	pop	{r7, pc}
 80124ea:	bf00      	nop
 80124ec:	200040d4 	.word	0x200040d4
 80124f0:	08019198 	.word	0x08019198
 80124f4:	0801926c 	.word	0x0801926c
 80124f8:	0801920c 	.word	0x0801920c

080124fc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80124fc:	b580      	push	{r7, lr}
 80124fe:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012500:	f002 ffa6 	bl	8015450 <rand>
 8012504:	4603      	mov	r3, r0
 8012506:	b29b      	uxth	r3, r3
 8012508:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801250c:	b29b      	uxth	r3, r3
 801250e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8012512:	b29a      	uxth	r2, r3
 8012514:	4b01      	ldr	r3, [pc, #4]	; (801251c <udp_init+0x20>)
 8012516:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012518:	bf00      	nop
 801251a:	bd80      	pop	{r7, pc}
 801251c:	20000018 	.word	0x20000018

08012520 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012520:	b580      	push	{r7, lr}
 8012522:	b084      	sub	sp, #16
 8012524:	af00      	add	r7, sp, #0
 8012526:	60f8      	str	r0, [r7, #12]
 8012528:	60b9      	str	r1, [r7, #8]
 801252a:	4613      	mov	r3, r2
 801252c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	2b00      	cmp	r3, #0
 8012532:	d105      	bne.n	8012540 <udp_input_local_match+0x20>
 8012534:	4b27      	ldr	r3, [pc, #156]	; (80125d4 <udp_input_local_match+0xb4>)
 8012536:	2287      	movs	r2, #135	; 0x87
 8012538:	4927      	ldr	r1, [pc, #156]	; (80125d8 <udp_input_local_match+0xb8>)
 801253a:	4828      	ldr	r0, [pc, #160]	; (80125dc <udp_input_local_match+0xbc>)
 801253c:	f002 fefa 	bl	8015334 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012540:	68bb      	ldr	r3, [r7, #8]
 8012542:	2b00      	cmp	r3, #0
 8012544:	d105      	bne.n	8012552 <udp_input_local_match+0x32>
 8012546:	4b23      	ldr	r3, [pc, #140]	; (80125d4 <udp_input_local_match+0xb4>)
 8012548:	2288      	movs	r2, #136	; 0x88
 801254a:	4925      	ldr	r1, [pc, #148]	; (80125e0 <udp_input_local_match+0xc0>)
 801254c:	4823      	ldr	r0, [pc, #140]	; (80125dc <udp_input_local_match+0xbc>)
 801254e:	f002 fef1 	bl	8015334 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	7a1b      	ldrb	r3, [r3, #8]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d00b      	beq.n	8012572 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	7a1a      	ldrb	r2, [r3, #8]
 801255e:	4b21      	ldr	r3, [pc, #132]	; (80125e4 <udp_input_local_match+0xc4>)
 8012560:	685b      	ldr	r3, [r3, #4]
 8012562:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012566:	3301      	adds	r3, #1
 8012568:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801256a:	429a      	cmp	r2, r3
 801256c:	d001      	beq.n	8012572 <udp_input_local_match+0x52>
    return 0;
 801256e:	2300      	movs	r3, #0
 8012570:	e02b      	b.n	80125ca <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012572:	79fb      	ldrb	r3, [r7, #7]
 8012574:	2b00      	cmp	r3, #0
 8012576:	d018      	beq.n	80125aa <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	2b00      	cmp	r3, #0
 801257c:	d013      	beq.n	80125a6 <udp_input_local_match+0x86>
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d00f      	beq.n	80125a6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012586:	4b17      	ldr	r3, [pc, #92]	; (80125e4 <udp_input_local_match+0xc4>)
 8012588:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801258a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801258e:	d00a      	beq.n	80125a6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	681a      	ldr	r2, [r3, #0]
 8012594:	4b13      	ldr	r3, [pc, #76]	; (80125e4 <udp_input_local_match+0xc4>)
 8012596:	695b      	ldr	r3, [r3, #20]
 8012598:	405a      	eors	r2, r3
 801259a:	68bb      	ldr	r3, [r7, #8]
 801259c:	3308      	adds	r3, #8
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d110      	bne.n	80125c8 <udp_input_local_match+0xa8>
          return 1;
 80125a6:	2301      	movs	r3, #1
 80125a8:	e00f      	b.n	80125ca <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d009      	beq.n	80125c4 <udp_input_local_match+0xa4>
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d005      	beq.n	80125c4 <udp_input_local_match+0xa4>
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	681a      	ldr	r2, [r3, #0]
 80125bc:	4b09      	ldr	r3, [pc, #36]	; (80125e4 <udp_input_local_match+0xc4>)
 80125be:	695b      	ldr	r3, [r3, #20]
 80125c0:	429a      	cmp	r2, r3
 80125c2:	d101      	bne.n	80125c8 <udp_input_local_match+0xa8>
        return 1;
 80125c4:	2301      	movs	r3, #1
 80125c6:	e000      	b.n	80125ca <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80125c8:	2300      	movs	r3, #0
}
 80125ca:	4618      	mov	r0, r3
 80125cc:	3710      	adds	r7, #16
 80125ce:	46bd      	mov	sp, r7
 80125d0:	bd80      	pop	{r7, pc}
 80125d2:	bf00      	nop
 80125d4:	08019280 	.word	0x08019280
 80125d8:	080192b0 	.word	0x080192b0
 80125dc:	080192d4 	.word	0x080192d4
 80125e0:	080192fc 	.word	0x080192fc
 80125e4:	20007404 	.word	0x20007404

080125e8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80125e8:	b590      	push	{r4, r7, lr}
 80125ea:	b08d      	sub	sp, #52	; 0x34
 80125ec:	af02      	add	r7, sp, #8
 80125ee:	6078      	str	r0, [r7, #4]
 80125f0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80125f2:	2300      	movs	r3, #0
 80125f4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d105      	bne.n	8012608 <udp_input+0x20>
 80125fc:	4b7c      	ldr	r3, [pc, #496]	; (80127f0 <udp_input+0x208>)
 80125fe:	22cf      	movs	r2, #207	; 0xcf
 8012600:	497c      	ldr	r1, [pc, #496]	; (80127f4 <udp_input+0x20c>)
 8012602:	487d      	ldr	r0, [pc, #500]	; (80127f8 <udp_input+0x210>)
 8012604:	f002 fe96 	bl	8015334 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012608:	683b      	ldr	r3, [r7, #0]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d105      	bne.n	801261a <udp_input+0x32>
 801260e:	4b78      	ldr	r3, [pc, #480]	; (80127f0 <udp_input+0x208>)
 8012610:	22d0      	movs	r2, #208	; 0xd0
 8012612:	497a      	ldr	r1, [pc, #488]	; (80127fc <udp_input+0x214>)
 8012614:	4878      	ldr	r0, [pc, #480]	; (80127f8 <udp_input+0x210>)
 8012616:	f002 fe8d 	bl	8015334 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	895b      	ldrh	r3, [r3, #10]
 801261e:	2b07      	cmp	r3, #7
 8012620:	d803      	bhi.n	801262a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012622:	6878      	ldr	r0, [r7, #4]
 8012624:	f7f9 fa5c 	bl	800bae0 <pbuf_free>
    goto end;
 8012628:	e0de      	b.n	80127e8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	685b      	ldr	r3, [r3, #4]
 801262e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012630:	4b73      	ldr	r3, [pc, #460]	; (8012800 <udp_input+0x218>)
 8012632:	695b      	ldr	r3, [r3, #20]
 8012634:	4a72      	ldr	r2, [pc, #456]	; (8012800 <udp_input+0x218>)
 8012636:	6812      	ldr	r2, [r2, #0]
 8012638:	4611      	mov	r1, r2
 801263a:	4618      	mov	r0, r3
 801263c:	f001 fc88 	bl	8013f50 <ip4_addr_isbroadcast_u32>
 8012640:	4603      	mov	r3, r0
 8012642:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012644:	697b      	ldr	r3, [r7, #20]
 8012646:	881b      	ldrh	r3, [r3, #0]
 8012648:	b29b      	uxth	r3, r3
 801264a:	4618      	mov	r0, r3
 801264c:	f7f7 fe74 	bl	800a338 <lwip_htons>
 8012650:	4603      	mov	r3, r0
 8012652:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012654:	697b      	ldr	r3, [r7, #20]
 8012656:	885b      	ldrh	r3, [r3, #2]
 8012658:	b29b      	uxth	r3, r3
 801265a:	4618      	mov	r0, r3
 801265c:	f7f7 fe6c 	bl	800a338 <lwip_htons>
 8012660:	4603      	mov	r3, r0
 8012662:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012664:	2300      	movs	r3, #0
 8012666:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8012668:	2300      	movs	r3, #0
 801266a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801266c:	2300      	movs	r3, #0
 801266e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012670:	4b64      	ldr	r3, [pc, #400]	; (8012804 <udp_input+0x21c>)
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	627b      	str	r3, [r7, #36]	; 0x24
 8012676:	e054      	b.n	8012722 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801267a:	8a5b      	ldrh	r3, [r3, #18]
 801267c:	89fa      	ldrh	r2, [r7, #14]
 801267e:	429a      	cmp	r2, r3
 8012680:	d14a      	bne.n	8012718 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8012682:	7cfb      	ldrb	r3, [r7, #19]
 8012684:	461a      	mov	r2, r3
 8012686:	6839      	ldr	r1, [r7, #0]
 8012688:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801268a:	f7ff ff49 	bl	8012520 <udp_input_local_match>
 801268e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012690:	2b00      	cmp	r3, #0
 8012692:	d041      	beq.n	8012718 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8012694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012696:	7c1b      	ldrb	r3, [r3, #16]
 8012698:	f003 0304 	and.w	r3, r3, #4
 801269c:	2b00      	cmp	r3, #0
 801269e:	d11d      	bne.n	80126dc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80126a0:	69fb      	ldr	r3, [r7, #28]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d102      	bne.n	80126ac <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80126a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126a8:	61fb      	str	r3, [r7, #28]
 80126aa:	e017      	b.n	80126dc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80126ac:	7cfb      	ldrb	r3, [r7, #19]
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d014      	beq.n	80126dc <udp_input+0xf4>
 80126b2:	4b53      	ldr	r3, [pc, #332]	; (8012800 <udp_input+0x218>)
 80126b4:	695b      	ldr	r3, [r3, #20]
 80126b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126ba:	d10f      	bne.n	80126dc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80126bc:	69fb      	ldr	r3, [r7, #28]
 80126be:	681a      	ldr	r2, [r3, #0]
 80126c0:	683b      	ldr	r3, [r7, #0]
 80126c2:	3304      	adds	r3, #4
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	429a      	cmp	r2, r3
 80126c8:	d008      	beq.n	80126dc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80126ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126cc:	681a      	ldr	r2, [r3, #0]
 80126ce:	683b      	ldr	r3, [r7, #0]
 80126d0:	3304      	adds	r3, #4
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	429a      	cmp	r2, r3
 80126d6:	d101      	bne.n	80126dc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80126d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126da:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80126dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126de:	8a9b      	ldrh	r3, [r3, #20]
 80126e0:	8a3a      	ldrh	r2, [r7, #16]
 80126e2:	429a      	cmp	r2, r3
 80126e4:	d118      	bne.n	8012718 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80126e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126e8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d005      	beq.n	80126fa <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80126ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126f0:	685a      	ldr	r2, [r3, #4]
 80126f2:	4b43      	ldr	r3, [pc, #268]	; (8012800 <udp_input+0x218>)
 80126f4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80126f6:	429a      	cmp	r2, r3
 80126f8:	d10e      	bne.n	8012718 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80126fa:	6a3b      	ldr	r3, [r7, #32]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d014      	beq.n	801272a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012702:	68da      	ldr	r2, [r3, #12]
 8012704:	6a3b      	ldr	r3, [r7, #32]
 8012706:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012708:	4b3e      	ldr	r3, [pc, #248]	; (8012804 <udp_input+0x21c>)
 801270a:	681a      	ldr	r2, [r3, #0]
 801270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801270e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012710:	4a3c      	ldr	r2, [pc, #240]	; (8012804 <udp_input+0x21c>)
 8012712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012714:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012716:	e008      	b.n	801272a <udp_input+0x142>
      }
    }

    prev = pcb;
 8012718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801271a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801271e:	68db      	ldr	r3, [r3, #12]
 8012720:	627b      	str	r3, [r7, #36]	; 0x24
 8012722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012724:	2b00      	cmp	r3, #0
 8012726:	d1a7      	bne.n	8012678 <udp_input+0x90>
 8012728:	e000      	b.n	801272c <udp_input+0x144>
        break;
 801272a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801272e:	2b00      	cmp	r3, #0
 8012730:	d101      	bne.n	8012736 <udp_input+0x14e>
    pcb = uncon_pcb;
 8012732:	69fb      	ldr	r3, [r7, #28]
 8012734:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012738:	2b00      	cmp	r3, #0
 801273a:	d002      	beq.n	8012742 <udp_input+0x15a>
    for_us = 1;
 801273c:	2301      	movs	r3, #1
 801273e:	76fb      	strb	r3, [r7, #27]
 8012740:	e00a      	b.n	8012758 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012742:	683b      	ldr	r3, [r7, #0]
 8012744:	3304      	adds	r3, #4
 8012746:	681a      	ldr	r2, [r3, #0]
 8012748:	4b2d      	ldr	r3, [pc, #180]	; (8012800 <udp_input+0x218>)
 801274a:	695b      	ldr	r3, [r3, #20]
 801274c:	429a      	cmp	r2, r3
 801274e:	bf0c      	ite	eq
 8012750:	2301      	moveq	r3, #1
 8012752:	2300      	movne	r3, #0
 8012754:	b2db      	uxtb	r3, r3
 8012756:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012758:	7efb      	ldrb	r3, [r7, #27]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d041      	beq.n	80127e2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801275e:	2108      	movs	r1, #8
 8012760:	6878      	ldr	r0, [r7, #4]
 8012762:	f7f9 f937 	bl	800b9d4 <pbuf_remove_header>
 8012766:	4603      	mov	r3, r0
 8012768:	2b00      	cmp	r3, #0
 801276a:	d00a      	beq.n	8012782 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801276c:	4b20      	ldr	r3, [pc, #128]	; (80127f0 <udp_input+0x208>)
 801276e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8012772:	4925      	ldr	r1, [pc, #148]	; (8012808 <udp_input+0x220>)
 8012774:	4820      	ldr	r0, [pc, #128]	; (80127f8 <udp_input+0x210>)
 8012776:	f002 fddd 	bl	8015334 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801277a:	6878      	ldr	r0, [r7, #4]
 801277c:	f7f9 f9b0 	bl	800bae0 <pbuf_free>
      goto end;
 8012780:	e032      	b.n	80127e8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8012782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012784:	2b00      	cmp	r3, #0
 8012786:	d012      	beq.n	80127ae <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801278a:	699b      	ldr	r3, [r3, #24]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d00a      	beq.n	80127a6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012792:	699c      	ldr	r4, [r3, #24]
 8012794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012796:	69d8      	ldr	r0, [r3, #28]
 8012798:	8a3b      	ldrh	r3, [r7, #16]
 801279a:	9300      	str	r3, [sp, #0]
 801279c:	4b1b      	ldr	r3, [pc, #108]	; (801280c <udp_input+0x224>)
 801279e:	687a      	ldr	r2, [r7, #4]
 80127a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80127a2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80127a4:	e021      	b.n	80127ea <udp_input+0x202>
        pbuf_free(p);
 80127a6:	6878      	ldr	r0, [r7, #4]
 80127a8:	f7f9 f99a 	bl	800bae0 <pbuf_free>
        goto end;
 80127ac:	e01c      	b.n	80127e8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80127ae:	7cfb      	ldrb	r3, [r7, #19]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d112      	bne.n	80127da <udp_input+0x1f2>
 80127b4:	4b12      	ldr	r3, [pc, #72]	; (8012800 <udp_input+0x218>)
 80127b6:	695b      	ldr	r3, [r3, #20]
 80127b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80127bc:	2be0      	cmp	r3, #224	; 0xe0
 80127be:	d00c      	beq.n	80127da <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80127c0:	4b0f      	ldr	r3, [pc, #60]	; (8012800 <udp_input+0x218>)
 80127c2:	899b      	ldrh	r3, [r3, #12]
 80127c4:	3308      	adds	r3, #8
 80127c6:	b29b      	uxth	r3, r3
 80127c8:	b21b      	sxth	r3, r3
 80127ca:	4619      	mov	r1, r3
 80127cc:	6878      	ldr	r0, [r7, #4]
 80127ce:	f7f9 f974 	bl	800baba <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80127d2:	2103      	movs	r1, #3
 80127d4:	6878      	ldr	r0, [r7, #4]
 80127d6:	f001 f89b 	bl	8013910 <icmp_dest_unreach>
      pbuf_free(p);
 80127da:	6878      	ldr	r0, [r7, #4]
 80127dc:	f7f9 f980 	bl	800bae0 <pbuf_free>
  return;
 80127e0:	e003      	b.n	80127ea <udp_input+0x202>
    pbuf_free(p);
 80127e2:	6878      	ldr	r0, [r7, #4]
 80127e4:	f7f9 f97c 	bl	800bae0 <pbuf_free>
  return;
 80127e8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80127ea:	372c      	adds	r7, #44	; 0x2c
 80127ec:	46bd      	mov	sp, r7
 80127ee:	bd90      	pop	{r4, r7, pc}
 80127f0:	08019280 	.word	0x08019280
 80127f4:	08019324 	.word	0x08019324
 80127f8:	080192d4 	.word	0x080192d4
 80127fc:	0801933c 	.word	0x0801933c
 8012800:	20007404 	.word	0x20007404
 8012804:	2000ab30 	.word	0x2000ab30
 8012808:	08019358 	.word	0x08019358
 801280c:	20007414 	.word	0x20007414

08012810 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012810:	b480      	push	{r7}
 8012812:	b085      	sub	sp, #20
 8012814:	af00      	add	r7, sp, #0
 8012816:	6078      	str	r0, [r7, #4]
 8012818:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d01e      	beq.n	801285e <udp_netif_ip_addr_changed+0x4e>
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	2b00      	cmp	r3, #0
 8012826:	d01a      	beq.n	801285e <udp_netif_ip_addr_changed+0x4e>
 8012828:	683b      	ldr	r3, [r7, #0]
 801282a:	2b00      	cmp	r3, #0
 801282c:	d017      	beq.n	801285e <udp_netif_ip_addr_changed+0x4e>
 801282e:	683b      	ldr	r3, [r7, #0]
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d013      	beq.n	801285e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012836:	4b0d      	ldr	r3, [pc, #52]	; (801286c <udp_netif_ip_addr_changed+0x5c>)
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	60fb      	str	r3, [r7, #12]
 801283c:	e00c      	b.n	8012858 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	681a      	ldr	r2, [r3, #0]
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	429a      	cmp	r2, r3
 8012848:	d103      	bne.n	8012852 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801284a:	683b      	ldr	r3, [r7, #0]
 801284c:	681a      	ldr	r2, [r3, #0]
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	68db      	ldr	r3, [r3, #12]
 8012856:	60fb      	str	r3, [r7, #12]
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d1ef      	bne.n	801283e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801285e:	bf00      	nop
 8012860:	3714      	adds	r7, #20
 8012862:	46bd      	mov	sp, r7
 8012864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012868:	4770      	bx	lr
 801286a:	bf00      	nop
 801286c:	2000ab30 	.word	0x2000ab30

08012870 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8012870:	b580      	push	{r7, lr}
 8012872:	b082      	sub	sp, #8
 8012874:	af00      	add	r7, sp, #0
 8012876:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8012878:	4915      	ldr	r1, [pc, #84]	; (80128d0 <etharp_free_entry+0x60>)
 801287a:	687a      	ldr	r2, [r7, #4]
 801287c:	4613      	mov	r3, r2
 801287e:	005b      	lsls	r3, r3, #1
 8012880:	4413      	add	r3, r2
 8012882:	00db      	lsls	r3, r3, #3
 8012884:	440b      	add	r3, r1
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	2b00      	cmp	r3, #0
 801288a:	d013      	beq.n	80128b4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801288c:	4910      	ldr	r1, [pc, #64]	; (80128d0 <etharp_free_entry+0x60>)
 801288e:	687a      	ldr	r2, [r7, #4]
 8012890:	4613      	mov	r3, r2
 8012892:	005b      	lsls	r3, r3, #1
 8012894:	4413      	add	r3, r2
 8012896:	00db      	lsls	r3, r3, #3
 8012898:	440b      	add	r3, r1
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	4618      	mov	r0, r3
 801289e:	f7f9 f91f 	bl	800bae0 <pbuf_free>
    arp_table[i].q = NULL;
 80128a2:	490b      	ldr	r1, [pc, #44]	; (80128d0 <etharp_free_entry+0x60>)
 80128a4:	687a      	ldr	r2, [r7, #4]
 80128a6:	4613      	mov	r3, r2
 80128a8:	005b      	lsls	r3, r3, #1
 80128aa:	4413      	add	r3, r2
 80128ac:	00db      	lsls	r3, r3, #3
 80128ae:	440b      	add	r3, r1
 80128b0:	2200      	movs	r2, #0
 80128b2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80128b4:	4906      	ldr	r1, [pc, #24]	; (80128d0 <etharp_free_entry+0x60>)
 80128b6:	687a      	ldr	r2, [r7, #4]
 80128b8:	4613      	mov	r3, r2
 80128ba:	005b      	lsls	r3, r3, #1
 80128bc:	4413      	add	r3, r2
 80128be:	00db      	lsls	r3, r3, #3
 80128c0:	440b      	add	r3, r1
 80128c2:	3314      	adds	r3, #20
 80128c4:	2200      	movs	r2, #0
 80128c6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80128c8:	bf00      	nop
 80128ca:	3708      	adds	r7, #8
 80128cc:	46bd      	mov	sp, r7
 80128ce:	bd80      	pop	{r7, pc}
 80128d0:	200040e0 	.word	0x200040e0

080128d4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80128d4:	b580      	push	{r7, lr}
 80128d6:	b082      	sub	sp, #8
 80128d8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80128da:	2300      	movs	r3, #0
 80128dc:	607b      	str	r3, [r7, #4]
 80128de:	e096      	b.n	8012a0e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80128e0:	494f      	ldr	r1, [pc, #316]	; (8012a20 <etharp_tmr+0x14c>)
 80128e2:	687a      	ldr	r2, [r7, #4]
 80128e4:	4613      	mov	r3, r2
 80128e6:	005b      	lsls	r3, r3, #1
 80128e8:	4413      	add	r3, r2
 80128ea:	00db      	lsls	r3, r3, #3
 80128ec:	440b      	add	r3, r1
 80128ee:	3314      	adds	r3, #20
 80128f0:	781b      	ldrb	r3, [r3, #0]
 80128f2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80128f4:	78fb      	ldrb	r3, [r7, #3]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	f000 8086 	beq.w	8012a08 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80128fc:	4948      	ldr	r1, [pc, #288]	; (8012a20 <etharp_tmr+0x14c>)
 80128fe:	687a      	ldr	r2, [r7, #4]
 8012900:	4613      	mov	r3, r2
 8012902:	005b      	lsls	r3, r3, #1
 8012904:	4413      	add	r3, r2
 8012906:	00db      	lsls	r3, r3, #3
 8012908:	440b      	add	r3, r1
 801290a:	3312      	adds	r3, #18
 801290c:	881b      	ldrh	r3, [r3, #0]
 801290e:	3301      	adds	r3, #1
 8012910:	b298      	uxth	r0, r3
 8012912:	4943      	ldr	r1, [pc, #268]	; (8012a20 <etharp_tmr+0x14c>)
 8012914:	687a      	ldr	r2, [r7, #4]
 8012916:	4613      	mov	r3, r2
 8012918:	005b      	lsls	r3, r3, #1
 801291a:	4413      	add	r3, r2
 801291c:	00db      	lsls	r3, r3, #3
 801291e:	440b      	add	r3, r1
 8012920:	3312      	adds	r3, #18
 8012922:	4602      	mov	r2, r0
 8012924:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012926:	493e      	ldr	r1, [pc, #248]	; (8012a20 <etharp_tmr+0x14c>)
 8012928:	687a      	ldr	r2, [r7, #4]
 801292a:	4613      	mov	r3, r2
 801292c:	005b      	lsls	r3, r3, #1
 801292e:	4413      	add	r3, r2
 8012930:	00db      	lsls	r3, r3, #3
 8012932:	440b      	add	r3, r1
 8012934:	3312      	adds	r3, #18
 8012936:	881b      	ldrh	r3, [r3, #0]
 8012938:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801293c:	d215      	bcs.n	801296a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801293e:	4938      	ldr	r1, [pc, #224]	; (8012a20 <etharp_tmr+0x14c>)
 8012940:	687a      	ldr	r2, [r7, #4]
 8012942:	4613      	mov	r3, r2
 8012944:	005b      	lsls	r3, r3, #1
 8012946:	4413      	add	r3, r2
 8012948:	00db      	lsls	r3, r3, #3
 801294a:	440b      	add	r3, r1
 801294c:	3314      	adds	r3, #20
 801294e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012950:	2b01      	cmp	r3, #1
 8012952:	d10e      	bne.n	8012972 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012954:	4932      	ldr	r1, [pc, #200]	; (8012a20 <etharp_tmr+0x14c>)
 8012956:	687a      	ldr	r2, [r7, #4]
 8012958:	4613      	mov	r3, r2
 801295a:	005b      	lsls	r3, r3, #1
 801295c:	4413      	add	r3, r2
 801295e:	00db      	lsls	r3, r3, #3
 8012960:	440b      	add	r3, r1
 8012962:	3312      	adds	r3, #18
 8012964:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012966:	2b04      	cmp	r3, #4
 8012968:	d903      	bls.n	8012972 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801296a:	6878      	ldr	r0, [r7, #4]
 801296c:	f7ff ff80 	bl	8012870 <etharp_free_entry>
 8012970:	e04a      	b.n	8012a08 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8012972:	492b      	ldr	r1, [pc, #172]	; (8012a20 <etharp_tmr+0x14c>)
 8012974:	687a      	ldr	r2, [r7, #4]
 8012976:	4613      	mov	r3, r2
 8012978:	005b      	lsls	r3, r3, #1
 801297a:	4413      	add	r3, r2
 801297c:	00db      	lsls	r3, r3, #3
 801297e:	440b      	add	r3, r1
 8012980:	3314      	adds	r3, #20
 8012982:	781b      	ldrb	r3, [r3, #0]
 8012984:	2b03      	cmp	r3, #3
 8012986:	d10a      	bne.n	801299e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012988:	4925      	ldr	r1, [pc, #148]	; (8012a20 <etharp_tmr+0x14c>)
 801298a:	687a      	ldr	r2, [r7, #4]
 801298c:	4613      	mov	r3, r2
 801298e:	005b      	lsls	r3, r3, #1
 8012990:	4413      	add	r3, r2
 8012992:	00db      	lsls	r3, r3, #3
 8012994:	440b      	add	r3, r1
 8012996:	3314      	adds	r3, #20
 8012998:	2204      	movs	r2, #4
 801299a:	701a      	strb	r2, [r3, #0]
 801299c:	e034      	b.n	8012a08 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801299e:	4920      	ldr	r1, [pc, #128]	; (8012a20 <etharp_tmr+0x14c>)
 80129a0:	687a      	ldr	r2, [r7, #4]
 80129a2:	4613      	mov	r3, r2
 80129a4:	005b      	lsls	r3, r3, #1
 80129a6:	4413      	add	r3, r2
 80129a8:	00db      	lsls	r3, r3, #3
 80129aa:	440b      	add	r3, r1
 80129ac:	3314      	adds	r3, #20
 80129ae:	781b      	ldrb	r3, [r3, #0]
 80129b0:	2b04      	cmp	r3, #4
 80129b2:	d10a      	bne.n	80129ca <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80129b4:	491a      	ldr	r1, [pc, #104]	; (8012a20 <etharp_tmr+0x14c>)
 80129b6:	687a      	ldr	r2, [r7, #4]
 80129b8:	4613      	mov	r3, r2
 80129ba:	005b      	lsls	r3, r3, #1
 80129bc:	4413      	add	r3, r2
 80129be:	00db      	lsls	r3, r3, #3
 80129c0:	440b      	add	r3, r1
 80129c2:	3314      	adds	r3, #20
 80129c4:	2202      	movs	r2, #2
 80129c6:	701a      	strb	r2, [r3, #0]
 80129c8:	e01e      	b.n	8012a08 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80129ca:	4915      	ldr	r1, [pc, #84]	; (8012a20 <etharp_tmr+0x14c>)
 80129cc:	687a      	ldr	r2, [r7, #4]
 80129ce:	4613      	mov	r3, r2
 80129d0:	005b      	lsls	r3, r3, #1
 80129d2:	4413      	add	r3, r2
 80129d4:	00db      	lsls	r3, r3, #3
 80129d6:	440b      	add	r3, r1
 80129d8:	3314      	adds	r3, #20
 80129da:	781b      	ldrb	r3, [r3, #0]
 80129dc:	2b01      	cmp	r3, #1
 80129de:	d113      	bne.n	8012a08 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80129e0:	490f      	ldr	r1, [pc, #60]	; (8012a20 <etharp_tmr+0x14c>)
 80129e2:	687a      	ldr	r2, [r7, #4]
 80129e4:	4613      	mov	r3, r2
 80129e6:	005b      	lsls	r3, r3, #1
 80129e8:	4413      	add	r3, r2
 80129ea:	00db      	lsls	r3, r3, #3
 80129ec:	440b      	add	r3, r1
 80129ee:	3308      	adds	r3, #8
 80129f0:	6818      	ldr	r0, [r3, #0]
 80129f2:	687a      	ldr	r2, [r7, #4]
 80129f4:	4613      	mov	r3, r2
 80129f6:	005b      	lsls	r3, r3, #1
 80129f8:	4413      	add	r3, r2
 80129fa:	00db      	lsls	r3, r3, #3
 80129fc:	4a08      	ldr	r2, [pc, #32]	; (8012a20 <etharp_tmr+0x14c>)
 80129fe:	4413      	add	r3, r2
 8012a00:	3304      	adds	r3, #4
 8012a02:	4619      	mov	r1, r3
 8012a04:	f000 fe6e 	bl	80136e4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	3301      	adds	r3, #1
 8012a0c:	607b      	str	r3, [r7, #4]
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	2b09      	cmp	r3, #9
 8012a12:	f77f af65 	ble.w	80128e0 <etharp_tmr+0xc>
      }
    }
  }
}
 8012a16:	bf00      	nop
 8012a18:	bf00      	nop
 8012a1a:	3708      	adds	r7, #8
 8012a1c:	46bd      	mov	sp, r7
 8012a1e:	bd80      	pop	{r7, pc}
 8012a20:	200040e0 	.word	0x200040e0

08012a24 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8012a24:	b580      	push	{r7, lr}
 8012a26:	b08a      	sub	sp, #40	; 0x28
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	60f8      	str	r0, [r7, #12]
 8012a2c:	460b      	mov	r3, r1
 8012a2e:	607a      	str	r2, [r7, #4]
 8012a30:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8012a32:	230a      	movs	r3, #10
 8012a34:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012a36:	230a      	movs	r3, #10
 8012a38:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8012a3a:	230a      	movs	r3, #10
 8012a3c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8012a3e:	2300      	movs	r3, #0
 8012a40:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8012a42:	230a      	movs	r3, #10
 8012a44:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8012a46:	2300      	movs	r3, #0
 8012a48:	83bb      	strh	r3, [r7, #28]
 8012a4a:	2300      	movs	r3, #0
 8012a4c:	837b      	strh	r3, [r7, #26]
 8012a4e:	2300      	movs	r3, #0
 8012a50:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012a52:	2300      	movs	r3, #0
 8012a54:	843b      	strh	r3, [r7, #32]
 8012a56:	e0ae      	b.n	8012bb6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8012a58:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a5c:	49a6      	ldr	r1, [pc, #664]	; (8012cf8 <etharp_find_entry+0x2d4>)
 8012a5e:	4613      	mov	r3, r2
 8012a60:	005b      	lsls	r3, r3, #1
 8012a62:	4413      	add	r3, r2
 8012a64:	00db      	lsls	r3, r3, #3
 8012a66:	440b      	add	r3, r1
 8012a68:	3314      	adds	r3, #20
 8012a6a:	781b      	ldrb	r3, [r3, #0]
 8012a6c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8012a6e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012a72:	2b0a      	cmp	r3, #10
 8012a74:	d105      	bne.n	8012a82 <etharp_find_entry+0x5e>
 8012a76:	7dfb      	ldrb	r3, [r7, #23]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d102      	bne.n	8012a82 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012a7c:	8c3b      	ldrh	r3, [r7, #32]
 8012a7e:	847b      	strh	r3, [r7, #34]	; 0x22
 8012a80:	e095      	b.n	8012bae <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8012a82:	7dfb      	ldrb	r3, [r7, #23]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	f000 8092 	beq.w	8012bae <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8012a8a:	7dfb      	ldrb	r3, [r7, #23]
 8012a8c:	2b01      	cmp	r3, #1
 8012a8e:	d009      	beq.n	8012aa4 <etharp_find_entry+0x80>
 8012a90:	7dfb      	ldrb	r3, [r7, #23]
 8012a92:	2b01      	cmp	r3, #1
 8012a94:	d806      	bhi.n	8012aa4 <etharp_find_entry+0x80>
 8012a96:	4b99      	ldr	r3, [pc, #612]	; (8012cfc <etharp_find_entry+0x2d8>)
 8012a98:	f240 1223 	movw	r2, #291	; 0x123
 8012a9c:	4998      	ldr	r1, [pc, #608]	; (8012d00 <etharp_find_entry+0x2dc>)
 8012a9e:	4899      	ldr	r0, [pc, #612]	; (8012d04 <etharp_find_entry+0x2e0>)
 8012aa0:	f002 fc48 	bl	8015334 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d020      	beq.n	8012aec <etharp_find_entry+0xc8>
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	6819      	ldr	r1, [r3, #0]
 8012aae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012ab2:	4891      	ldr	r0, [pc, #580]	; (8012cf8 <etharp_find_entry+0x2d4>)
 8012ab4:	4613      	mov	r3, r2
 8012ab6:	005b      	lsls	r3, r3, #1
 8012ab8:	4413      	add	r3, r2
 8012aba:	00db      	lsls	r3, r3, #3
 8012abc:	4403      	add	r3, r0
 8012abe:	3304      	adds	r3, #4
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	4299      	cmp	r1, r3
 8012ac4:	d112      	bne.n	8012aec <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d00c      	beq.n	8012ae6 <etharp_find_entry+0xc2>
 8012acc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012ad0:	4989      	ldr	r1, [pc, #548]	; (8012cf8 <etharp_find_entry+0x2d4>)
 8012ad2:	4613      	mov	r3, r2
 8012ad4:	005b      	lsls	r3, r3, #1
 8012ad6:	4413      	add	r3, r2
 8012ad8:	00db      	lsls	r3, r3, #3
 8012ada:	440b      	add	r3, r1
 8012adc:	3308      	adds	r3, #8
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	687a      	ldr	r2, [r7, #4]
 8012ae2:	429a      	cmp	r2, r3
 8012ae4:	d102      	bne.n	8012aec <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8012ae6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012aea:	e100      	b.n	8012cee <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012aec:	7dfb      	ldrb	r3, [r7, #23]
 8012aee:	2b01      	cmp	r3, #1
 8012af0:	d140      	bne.n	8012b74 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8012af2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012af6:	4980      	ldr	r1, [pc, #512]	; (8012cf8 <etharp_find_entry+0x2d4>)
 8012af8:	4613      	mov	r3, r2
 8012afa:	005b      	lsls	r3, r3, #1
 8012afc:	4413      	add	r3, r2
 8012afe:	00db      	lsls	r3, r3, #3
 8012b00:	440b      	add	r3, r1
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d01a      	beq.n	8012b3e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8012b08:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b0c:	497a      	ldr	r1, [pc, #488]	; (8012cf8 <etharp_find_entry+0x2d4>)
 8012b0e:	4613      	mov	r3, r2
 8012b10:	005b      	lsls	r3, r3, #1
 8012b12:	4413      	add	r3, r2
 8012b14:	00db      	lsls	r3, r3, #3
 8012b16:	440b      	add	r3, r1
 8012b18:	3312      	adds	r3, #18
 8012b1a:	881b      	ldrh	r3, [r3, #0]
 8012b1c:	8bba      	ldrh	r2, [r7, #28]
 8012b1e:	429a      	cmp	r2, r3
 8012b20:	d845      	bhi.n	8012bae <etharp_find_entry+0x18a>
            old_queue = i;
 8012b22:	8c3b      	ldrh	r3, [r7, #32]
 8012b24:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8012b26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b2a:	4973      	ldr	r1, [pc, #460]	; (8012cf8 <etharp_find_entry+0x2d4>)
 8012b2c:	4613      	mov	r3, r2
 8012b2e:	005b      	lsls	r3, r3, #1
 8012b30:	4413      	add	r3, r2
 8012b32:	00db      	lsls	r3, r3, #3
 8012b34:	440b      	add	r3, r1
 8012b36:	3312      	adds	r3, #18
 8012b38:	881b      	ldrh	r3, [r3, #0]
 8012b3a:	83bb      	strh	r3, [r7, #28]
 8012b3c:	e037      	b.n	8012bae <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8012b3e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b42:	496d      	ldr	r1, [pc, #436]	; (8012cf8 <etharp_find_entry+0x2d4>)
 8012b44:	4613      	mov	r3, r2
 8012b46:	005b      	lsls	r3, r3, #1
 8012b48:	4413      	add	r3, r2
 8012b4a:	00db      	lsls	r3, r3, #3
 8012b4c:	440b      	add	r3, r1
 8012b4e:	3312      	adds	r3, #18
 8012b50:	881b      	ldrh	r3, [r3, #0]
 8012b52:	8b7a      	ldrh	r2, [r7, #26]
 8012b54:	429a      	cmp	r2, r3
 8012b56:	d82a      	bhi.n	8012bae <etharp_find_entry+0x18a>
            old_pending = i;
 8012b58:	8c3b      	ldrh	r3, [r7, #32]
 8012b5a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8012b5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b60:	4965      	ldr	r1, [pc, #404]	; (8012cf8 <etharp_find_entry+0x2d4>)
 8012b62:	4613      	mov	r3, r2
 8012b64:	005b      	lsls	r3, r3, #1
 8012b66:	4413      	add	r3, r2
 8012b68:	00db      	lsls	r3, r3, #3
 8012b6a:	440b      	add	r3, r1
 8012b6c:	3312      	adds	r3, #18
 8012b6e:	881b      	ldrh	r3, [r3, #0]
 8012b70:	837b      	strh	r3, [r7, #26]
 8012b72:	e01c      	b.n	8012bae <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8012b74:	7dfb      	ldrb	r3, [r7, #23]
 8012b76:	2b01      	cmp	r3, #1
 8012b78:	d919      	bls.n	8012bae <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8012b7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b7e:	495e      	ldr	r1, [pc, #376]	; (8012cf8 <etharp_find_entry+0x2d4>)
 8012b80:	4613      	mov	r3, r2
 8012b82:	005b      	lsls	r3, r3, #1
 8012b84:	4413      	add	r3, r2
 8012b86:	00db      	lsls	r3, r3, #3
 8012b88:	440b      	add	r3, r1
 8012b8a:	3312      	adds	r3, #18
 8012b8c:	881b      	ldrh	r3, [r3, #0]
 8012b8e:	8b3a      	ldrh	r2, [r7, #24]
 8012b90:	429a      	cmp	r2, r3
 8012b92:	d80c      	bhi.n	8012bae <etharp_find_entry+0x18a>
            old_stable = i;
 8012b94:	8c3b      	ldrh	r3, [r7, #32]
 8012b96:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8012b98:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b9c:	4956      	ldr	r1, [pc, #344]	; (8012cf8 <etharp_find_entry+0x2d4>)
 8012b9e:	4613      	mov	r3, r2
 8012ba0:	005b      	lsls	r3, r3, #1
 8012ba2:	4413      	add	r3, r2
 8012ba4:	00db      	lsls	r3, r3, #3
 8012ba6:	440b      	add	r3, r1
 8012ba8:	3312      	adds	r3, #18
 8012baa:	881b      	ldrh	r3, [r3, #0]
 8012bac:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012bae:	8c3b      	ldrh	r3, [r7, #32]
 8012bb0:	3301      	adds	r3, #1
 8012bb2:	b29b      	uxth	r3, r3
 8012bb4:	843b      	strh	r3, [r7, #32]
 8012bb6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012bba:	2b09      	cmp	r3, #9
 8012bbc:	f77f af4c 	ble.w	8012a58 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012bc0:	7afb      	ldrb	r3, [r7, #11]
 8012bc2:	f003 0302 	and.w	r3, r3, #2
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d108      	bne.n	8012bdc <etharp_find_entry+0x1b8>
 8012bca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012bce:	2b0a      	cmp	r3, #10
 8012bd0:	d107      	bne.n	8012be2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8012bd2:	7afb      	ldrb	r3, [r7, #11]
 8012bd4:	f003 0301 	and.w	r3, r3, #1
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d102      	bne.n	8012be2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8012be0:	e085      	b.n	8012cee <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8012be2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012be6:	2b09      	cmp	r3, #9
 8012be8:	dc02      	bgt.n	8012bf0 <etharp_find_entry+0x1cc>
    i = empty;
 8012bea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012bec:	843b      	strh	r3, [r7, #32]
 8012bee:	e039      	b.n	8012c64 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012bf0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8012bf4:	2b09      	cmp	r3, #9
 8012bf6:	dc14      	bgt.n	8012c22 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8012bf8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012bfa:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8012bfc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012c00:	493d      	ldr	r1, [pc, #244]	; (8012cf8 <etharp_find_entry+0x2d4>)
 8012c02:	4613      	mov	r3, r2
 8012c04:	005b      	lsls	r3, r3, #1
 8012c06:	4413      	add	r3, r2
 8012c08:	00db      	lsls	r3, r3, #3
 8012c0a:	440b      	add	r3, r1
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d018      	beq.n	8012c44 <etharp_find_entry+0x220>
 8012c12:	4b3a      	ldr	r3, [pc, #232]	; (8012cfc <etharp_find_entry+0x2d8>)
 8012c14:	f240 126d 	movw	r2, #365	; 0x16d
 8012c18:	493b      	ldr	r1, [pc, #236]	; (8012d08 <etharp_find_entry+0x2e4>)
 8012c1a:	483a      	ldr	r0, [pc, #232]	; (8012d04 <etharp_find_entry+0x2e0>)
 8012c1c:	f002 fb8a 	bl	8015334 <iprintf>
 8012c20:	e010      	b.n	8012c44 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8012c22:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8012c26:	2b09      	cmp	r3, #9
 8012c28:	dc02      	bgt.n	8012c30 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8012c2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012c2c:	843b      	strh	r3, [r7, #32]
 8012c2e:	e009      	b.n	8012c44 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012c30:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012c34:	2b09      	cmp	r3, #9
 8012c36:	dc02      	bgt.n	8012c3e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012c38:	8bfb      	ldrh	r3, [r7, #30]
 8012c3a:	843b      	strh	r3, [r7, #32]
 8012c3c:	e002      	b.n	8012c44 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8012c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8012c42:	e054      	b.n	8012cee <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012c44:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012c48:	2b09      	cmp	r3, #9
 8012c4a:	dd06      	ble.n	8012c5a <etharp_find_entry+0x236>
 8012c4c:	4b2b      	ldr	r3, [pc, #172]	; (8012cfc <etharp_find_entry+0x2d8>)
 8012c4e:	f240 127f 	movw	r2, #383	; 0x17f
 8012c52:	492e      	ldr	r1, [pc, #184]	; (8012d0c <etharp_find_entry+0x2e8>)
 8012c54:	482b      	ldr	r0, [pc, #172]	; (8012d04 <etharp_find_entry+0x2e0>)
 8012c56:	f002 fb6d 	bl	8015334 <iprintf>
    etharp_free_entry(i);
 8012c5a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012c5e:	4618      	mov	r0, r3
 8012c60:	f7ff fe06 	bl	8012870 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012c64:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012c68:	2b09      	cmp	r3, #9
 8012c6a:	dd06      	ble.n	8012c7a <etharp_find_entry+0x256>
 8012c6c:	4b23      	ldr	r3, [pc, #140]	; (8012cfc <etharp_find_entry+0x2d8>)
 8012c6e:	f240 1283 	movw	r2, #387	; 0x183
 8012c72:	4926      	ldr	r1, [pc, #152]	; (8012d0c <etharp_find_entry+0x2e8>)
 8012c74:	4823      	ldr	r0, [pc, #140]	; (8012d04 <etharp_find_entry+0x2e0>)
 8012c76:	f002 fb5d 	bl	8015334 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012c7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012c7e:	491e      	ldr	r1, [pc, #120]	; (8012cf8 <etharp_find_entry+0x2d4>)
 8012c80:	4613      	mov	r3, r2
 8012c82:	005b      	lsls	r3, r3, #1
 8012c84:	4413      	add	r3, r2
 8012c86:	00db      	lsls	r3, r3, #3
 8012c88:	440b      	add	r3, r1
 8012c8a:	3314      	adds	r3, #20
 8012c8c:	781b      	ldrb	r3, [r3, #0]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d006      	beq.n	8012ca0 <etharp_find_entry+0x27c>
 8012c92:	4b1a      	ldr	r3, [pc, #104]	; (8012cfc <etharp_find_entry+0x2d8>)
 8012c94:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8012c98:	491d      	ldr	r1, [pc, #116]	; (8012d10 <etharp_find_entry+0x2ec>)
 8012c9a:	481a      	ldr	r0, [pc, #104]	; (8012d04 <etharp_find_entry+0x2e0>)
 8012c9c:	f002 fb4a 	bl	8015334 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d00b      	beq.n	8012cbe <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8012ca6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	6819      	ldr	r1, [r3, #0]
 8012cae:	4812      	ldr	r0, [pc, #72]	; (8012cf8 <etharp_find_entry+0x2d4>)
 8012cb0:	4613      	mov	r3, r2
 8012cb2:	005b      	lsls	r3, r3, #1
 8012cb4:	4413      	add	r3, r2
 8012cb6:	00db      	lsls	r3, r3, #3
 8012cb8:	4403      	add	r3, r0
 8012cba:	3304      	adds	r3, #4
 8012cbc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8012cbe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012cc2:	490d      	ldr	r1, [pc, #52]	; (8012cf8 <etharp_find_entry+0x2d4>)
 8012cc4:	4613      	mov	r3, r2
 8012cc6:	005b      	lsls	r3, r3, #1
 8012cc8:	4413      	add	r3, r2
 8012cca:	00db      	lsls	r3, r3, #3
 8012ccc:	440b      	add	r3, r1
 8012cce:	3312      	adds	r3, #18
 8012cd0:	2200      	movs	r2, #0
 8012cd2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8012cd4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012cd8:	4907      	ldr	r1, [pc, #28]	; (8012cf8 <etharp_find_entry+0x2d4>)
 8012cda:	4613      	mov	r3, r2
 8012cdc:	005b      	lsls	r3, r3, #1
 8012cde:	4413      	add	r3, r2
 8012ce0:	00db      	lsls	r3, r3, #3
 8012ce2:	440b      	add	r3, r1
 8012ce4:	3308      	adds	r3, #8
 8012ce6:	687a      	ldr	r2, [r7, #4]
 8012ce8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8012cea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8012cee:	4618      	mov	r0, r3
 8012cf0:	3728      	adds	r7, #40	; 0x28
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	bd80      	pop	{r7, pc}
 8012cf6:	bf00      	nop
 8012cf8:	200040e0 	.word	0x200040e0
 8012cfc:	080195e4 	.word	0x080195e4
 8012d00:	0801961c 	.word	0x0801961c
 8012d04:	0801965c 	.word	0x0801965c
 8012d08:	08019684 	.word	0x08019684
 8012d0c:	0801969c 	.word	0x0801969c
 8012d10:	080196b0 	.word	0x080196b0

08012d14 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8012d14:	b580      	push	{r7, lr}
 8012d16:	b088      	sub	sp, #32
 8012d18:	af02      	add	r7, sp, #8
 8012d1a:	60f8      	str	r0, [r7, #12]
 8012d1c:	60b9      	str	r1, [r7, #8]
 8012d1e:	607a      	str	r2, [r7, #4]
 8012d20:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012d28:	2b06      	cmp	r3, #6
 8012d2a:	d006      	beq.n	8012d3a <etharp_update_arp_entry+0x26>
 8012d2c:	4b48      	ldr	r3, [pc, #288]	; (8012e50 <etharp_update_arp_entry+0x13c>)
 8012d2e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8012d32:	4948      	ldr	r1, [pc, #288]	; (8012e54 <etharp_update_arp_entry+0x140>)
 8012d34:	4848      	ldr	r0, [pc, #288]	; (8012e58 <etharp_update_arp_entry+0x144>)
 8012d36:	f002 fafd 	bl	8015334 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012d3a:	68bb      	ldr	r3, [r7, #8]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d012      	beq.n	8012d66 <etharp_update_arp_entry+0x52>
 8012d40:	68bb      	ldr	r3, [r7, #8]
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d00e      	beq.n	8012d66 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012d48:	68bb      	ldr	r3, [r7, #8]
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	68f9      	ldr	r1, [r7, #12]
 8012d4e:	4618      	mov	r0, r3
 8012d50:	f001 f8fe 	bl	8013f50 <ip4_addr_isbroadcast_u32>
 8012d54:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d105      	bne.n	8012d66 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012d5a:	68bb      	ldr	r3, [r7, #8]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012d62:	2be0      	cmp	r3, #224	; 0xe0
 8012d64:	d102      	bne.n	8012d6c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012d66:	f06f 030f 	mvn.w	r3, #15
 8012d6a:	e06c      	b.n	8012e46 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012d6c:	78fb      	ldrb	r3, [r7, #3]
 8012d6e:	68fa      	ldr	r2, [r7, #12]
 8012d70:	4619      	mov	r1, r3
 8012d72:	68b8      	ldr	r0, [r7, #8]
 8012d74:	f7ff fe56 	bl	8012a24 <etharp_find_entry>
 8012d78:	4603      	mov	r3, r0
 8012d7a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012d7c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	da02      	bge.n	8012d8a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012d84:	8afb      	ldrh	r3, [r7, #22]
 8012d86:	b25b      	sxtb	r3, r3
 8012d88:	e05d      	b.n	8012e46 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012d8a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012d8e:	4933      	ldr	r1, [pc, #204]	; (8012e5c <etharp_update_arp_entry+0x148>)
 8012d90:	4613      	mov	r3, r2
 8012d92:	005b      	lsls	r3, r3, #1
 8012d94:	4413      	add	r3, r2
 8012d96:	00db      	lsls	r3, r3, #3
 8012d98:	440b      	add	r3, r1
 8012d9a:	3314      	adds	r3, #20
 8012d9c:	2202      	movs	r2, #2
 8012d9e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012da0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012da4:	492d      	ldr	r1, [pc, #180]	; (8012e5c <etharp_update_arp_entry+0x148>)
 8012da6:	4613      	mov	r3, r2
 8012da8:	005b      	lsls	r3, r3, #1
 8012daa:	4413      	add	r3, r2
 8012dac:	00db      	lsls	r3, r3, #3
 8012dae:	440b      	add	r3, r1
 8012db0:	3308      	adds	r3, #8
 8012db2:	68fa      	ldr	r2, [r7, #12]
 8012db4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8012db6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012dba:	4613      	mov	r3, r2
 8012dbc:	005b      	lsls	r3, r3, #1
 8012dbe:	4413      	add	r3, r2
 8012dc0:	00db      	lsls	r3, r3, #3
 8012dc2:	3308      	adds	r3, #8
 8012dc4:	4a25      	ldr	r2, [pc, #148]	; (8012e5c <etharp_update_arp_entry+0x148>)
 8012dc6:	4413      	add	r3, r2
 8012dc8:	3304      	adds	r3, #4
 8012dca:	2206      	movs	r2, #6
 8012dcc:	6879      	ldr	r1, [r7, #4]
 8012dce:	4618      	mov	r0, r3
 8012dd0:	f002 fa80 	bl	80152d4 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012dd4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012dd8:	4920      	ldr	r1, [pc, #128]	; (8012e5c <etharp_update_arp_entry+0x148>)
 8012dda:	4613      	mov	r3, r2
 8012ddc:	005b      	lsls	r3, r3, #1
 8012dde:	4413      	add	r3, r2
 8012de0:	00db      	lsls	r3, r3, #3
 8012de2:	440b      	add	r3, r1
 8012de4:	3312      	adds	r3, #18
 8012de6:	2200      	movs	r2, #0
 8012de8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8012dea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012dee:	491b      	ldr	r1, [pc, #108]	; (8012e5c <etharp_update_arp_entry+0x148>)
 8012df0:	4613      	mov	r3, r2
 8012df2:	005b      	lsls	r3, r3, #1
 8012df4:	4413      	add	r3, r2
 8012df6:	00db      	lsls	r3, r3, #3
 8012df8:	440b      	add	r3, r1
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d021      	beq.n	8012e44 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8012e00:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012e04:	4915      	ldr	r1, [pc, #84]	; (8012e5c <etharp_update_arp_entry+0x148>)
 8012e06:	4613      	mov	r3, r2
 8012e08:	005b      	lsls	r3, r3, #1
 8012e0a:	4413      	add	r3, r2
 8012e0c:	00db      	lsls	r3, r3, #3
 8012e0e:	440b      	add	r3, r1
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8012e14:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012e18:	4910      	ldr	r1, [pc, #64]	; (8012e5c <etharp_update_arp_entry+0x148>)
 8012e1a:	4613      	mov	r3, r2
 8012e1c:	005b      	lsls	r3, r3, #1
 8012e1e:	4413      	add	r3, r2
 8012e20:	00db      	lsls	r3, r3, #3
 8012e22:	440b      	add	r3, r1
 8012e24:	2200      	movs	r2, #0
 8012e26:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8012e2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012e32:	9300      	str	r3, [sp, #0]
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	6939      	ldr	r1, [r7, #16]
 8012e38:	68f8      	ldr	r0, [r7, #12]
 8012e3a:	f002 f8bb 	bl	8014fb4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8012e3e:	6938      	ldr	r0, [r7, #16]
 8012e40:	f7f8 fe4e 	bl	800bae0 <pbuf_free>
  }
  return ERR_OK;
 8012e44:	2300      	movs	r3, #0
}
 8012e46:	4618      	mov	r0, r3
 8012e48:	3718      	adds	r7, #24
 8012e4a:	46bd      	mov	sp, r7
 8012e4c:	bd80      	pop	{r7, pc}
 8012e4e:	bf00      	nop
 8012e50:	080195e4 	.word	0x080195e4
 8012e54:	080196dc 	.word	0x080196dc
 8012e58:	0801965c 	.word	0x0801965c
 8012e5c:	200040e0 	.word	0x200040e0

08012e60 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8012e60:	b580      	push	{r7, lr}
 8012e62:	b084      	sub	sp, #16
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012e68:	2300      	movs	r3, #0
 8012e6a:	60fb      	str	r3, [r7, #12]
 8012e6c:	e01e      	b.n	8012eac <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8012e6e:	4913      	ldr	r1, [pc, #76]	; (8012ebc <etharp_cleanup_netif+0x5c>)
 8012e70:	68fa      	ldr	r2, [r7, #12]
 8012e72:	4613      	mov	r3, r2
 8012e74:	005b      	lsls	r3, r3, #1
 8012e76:	4413      	add	r3, r2
 8012e78:	00db      	lsls	r3, r3, #3
 8012e7a:	440b      	add	r3, r1
 8012e7c:	3314      	adds	r3, #20
 8012e7e:	781b      	ldrb	r3, [r3, #0]
 8012e80:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8012e82:	7afb      	ldrb	r3, [r7, #11]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d00e      	beq.n	8012ea6 <etharp_cleanup_netif+0x46>
 8012e88:	490c      	ldr	r1, [pc, #48]	; (8012ebc <etharp_cleanup_netif+0x5c>)
 8012e8a:	68fa      	ldr	r2, [r7, #12]
 8012e8c:	4613      	mov	r3, r2
 8012e8e:	005b      	lsls	r3, r3, #1
 8012e90:	4413      	add	r3, r2
 8012e92:	00db      	lsls	r3, r3, #3
 8012e94:	440b      	add	r3, r1
 8012e96:	3308      	adds	r3, #8
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	687a      	ldr	r2, [r7, #4]
 8012e9c:	429a      	cmp	r2, r3
 8012e9e:	d102      	bne.n	8012ea6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012ea0:	68f8      	ldr	r0, [r7, #12]
 8012ea2:	f7ff fce5 	bl	8012870 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	3301      	adds	r3, #1
 8012eaa:	60fb      	str	r3, [r7, #12]
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	2b09      	cmp	r3, #9
 8012eb0:	dddd      	ble.n	8012e6e <etharp_cleanup_netif+0xe>
    }
  }
}
 8012eb2:	bf00      	nop
 8012eb4:	bf00      	nop
 8012eb6:	3710      	adds	r7, #16
 8012eb8:	46bd      	mov	sp, r7
 8012eba:	bd80      	pop	{r7, pc}
 8012ebc:	200040e0 	.word	0x200040e0

08012ec0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012ec0:	b5b0      	push	{r4, r5, r7, lr}
 8012ec2:	b08a      	sub	sp, #40	; 0x28
 8012ec4:	af04      	add	r7, sp, #16
 8012ec6:	6078      	str	r0, [r7, #4]
 8012ec8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012eca:	683b      	ldr	r3, [r7, #0]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d107      	bne.n	8012ee0 <etharp_input+0x20>
 8012ed0:	4b3d      	ldr	r3, [pc, #244]	; (8012fc8 <etharp_input+0x108>)
 8012ed2:	f240 228a 	movw	r2, #650	; 0x28a
 8012ed6:	493d      	ldr	r1, [pc, #244]	; (8012fcc <etharp_input+0x10c>)
 8012ed8:	483d      	ldr	r0, [pc, #244]	; (8012fd0 <etharp_input+0x110>)
 8012eda:	f002 fa2b 	bl	8015334 <iprintf>
 8012ede:	e06f      	b.n	8012fc0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	685b      	ldr	r3, [r3, #4]
 8012ee4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012ee6:	693b      	ldr	r3, [r7, #16]
 8012ee8:	881b      	ldrh	r3, [r3, #0]
 8012eea:	b29b      	uxth	r3, r3
 8012eec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012ef0:	d10c      	bne.n	8012f0c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012ef2:	693b      	ldr	r3, [r7, #16]
 8012ef4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012ef6:	2b06      	cmp	r3, #6
 8012ef8:	d108      	bne.n	8012f0c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012efa:	693b      	ldr	r3, [r7, #16]
 8012efc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012efe:	2b04      	cmp	r3, #4
 8012f00:	d104      	bne.n	8012f0c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8012f02:	693b      	ldr	r3, [r7, #16]
 8012f04:	885b      	ldrh	r3, [r3, #2]
 8012f06:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012f08:	2b08      	cmp	r3, #8
 8012f0a:	d003      	beq.n	8012f14 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012f0c:	6878      	ldr	r0, [r7, #4]
 8012f0e:	f7f8 fde7 	bl	800bae0 <pbuf_free>
    return;
 8012f12:	e055      	b.n	8012fc0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8012f14:	693b      	ldr	r3, [r7, #16]
 8012f16:	330e      	adds	r3, #14
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012f1c:	693b      	ldr	r3, [r7, #16]
 8012f1e:	3318      	adds	r3, #24
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012f24:	683b      	ldr	r3, [r7, #0]
 8012f26:	3304      	adds	r3, #4
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d102      	bne.n	8012f34 <etharp_input+0x74>
    for_us = 0;
 8012f2e:	2300      	movs	r3, #0
 8012f30:	75fb      	strb	r3, [r7, #23]
 8012f32:	e009      	b.n	8012f48 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012f34:	68ba      	ldr	r2, [r7, #8]
 8012f36:	683b      	ldr	r3, [r7, #0]
 8012f38:	3304      	adds	r3, #4
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	429a      	cmp	r2, r3
 8012f3e:	bf0c      	ite	eq
 8012f40:	2301      	moveq	r3, #1
 8012f42:	2300      	movne	r3, #0
 8012f44:	b2db      	uxtb	r3, r3
 8012f46:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012f48:	693b      	ldr	r3, [r7, #16]
 8012f4a:	f103 0208 	add.w	r2, r3, #8
 8012f4e:	7dfb      	ldrb	r3, [r7, #23]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d001      	beq.n	8012f58 <etharp_input+0x98>
 8012f54:	2301      	movs	r3, #1
 8012f56:	e000      	b.n	8012f5a <etharp_input+0x9a>
 8012f58:	2302      	movs	r3, #2
 8012f5a:	f107 010c 	add.w	r1, r7, #12
 8012f5e:	6838      	ldr	r0, [r7, #0]
 8012f60:	f7ff fed8 	bl	8012d14 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8012f64:	693b      	ldr	r3, [r7, #16]
 8012f66:	88db      	ldrh	r3, [r3, #6]
 8012f68:	b29b      	uxth	r3, r3
 8012f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012f6e:	d003      	beq.n	8012f78 <etharp_input+0xb8>
 8012f70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012f74:	d01e      	beq.n	8012fb4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8012f76:	e020      	b.n	8012fba <etharp_input+0xfa>
      if (for_us) {
 8012f78:	7dfb      	ldrb	r3, [r7, #23]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d01c      	beq.n	8012fb8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8012f7e:	683b      	ldr	r3, [r7, #0]
 8012f80:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012f84:	693b      	ldr	r3, [r7, #16]
 8012f86:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012f8a:	683b      	ldr	r3, [r7, #0]
 8012f8c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8012f90:	683b      	ldr	r3, [r7, #0]
 8012f92:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012f94:	693a      	ldr	r2, [r7, #16]
 8012f96:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012f98:	2102      	movs	r1, #2
 8012f9a:	9103      	str	r1, [sp, #12]
 8012f9c:	f107 010c 	add.w	r1, r7, #12
 8012fa0:	9102      	str	r1, [sp, #8]
 8012fa2:	9201      	str	r2, [sp, #4]
 8012fa4:	9300      	str	r3, [sp, #0]
 8012fa6:	462b      	mov	r3, r5
 8012fa8:	4622      	mov	r2, r4
 8012faa:	4601      	mov	r1, r0
 8012fac:	6838      	ldr	r0, [r7, #0]
 8012fae:	f000 faeb 	bl	8013588 <etharp_raw>
      break;
 8012fb2:	e001      	b.n	8012fb8 <etharp_input+0xf8>
      break;
 8012fb4:	bf00      	nop
 8012fb6:	e000      	b.n	8012fba <etharp_input+0xfa>
      break;
 8012fb8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012fba:	6878      	ldr	r0, [r7, #4]
 8012fbc:	f7f8 fd90 	bl	800bae0 <pbuf_free>
}
 8012fc0:	3718      	adds	r7, #24
 8012fc2:	46bd      	mov	sp, r7
 8012fc4:	bdb0      	pop	{r4, r5, r7, pc}
 8012fc6:	bf00      	nop
 8012fc8:	080195e4 	.word	0x080195e4
 8012fcc:	08019734 	.word	0x08019734
 8012fd0:	0801965c 	.word	0x0801965c

08012fd4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	b086      	sub	sp, #24
 8012fd8:	af02      	add	r7, sp, #8
 8012fda:	60f8      	str	r0, [r7, #12]
 8012fdc:	60b9      	str	r1, [r7, #8]
 8012fde:	4613      	mov	r3, r2
 8012fe0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012fe2:	79fa      	ldrb	r2, [r7, #7]
 8012fe4:	4944      	ldr	r1, [pc, #272]	; (80130f8 <etharp_output_to_arp_index+0x124>)
 8012fe6:	4613      	mov	r3, r2
 8012fe8:	005b      	lsls	r3, r3, #1
 8012fea:	4413      	add	r3, r2
 8012fec:	00db      	lsls	r3, r3, #3
 8012fee:	440b      	add	r3, r1
 8012ff0:	3314      	adds	r3, #20
 8012ff2:	781b      	ldrb	r3, [r3, #0]
 8012ff4:	2b01      	cmp	r3, #1
 8012ff6:	d806      	bhi.n	8013006 <etharp_output_to_arp_index+0x32>
 8012ff8:	4b40      	ldr	r3, [pc, #256]	; (80130fc <etharp_output_to_arp_index+0x128>)
 8012ffa:	f240 22ee 	movw	r2, #750	; 0x2ee
 8012ffe:	4940      	ldr	r1, [pc, #256]	; (8013100 <etharp_output_to_arp_index+0x12c>)
 8013000:	4840      	ldr	r0, [pc, #256]	; (8013104 <etharp_output_to_arp_index+0x130>)
 8013002:	f002 f997 	bl	8015334 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8013006:	79fa      	ldrb	r2, [r7, #7]
 8013008:	493b      	ldr	r1, [pc, #236]	; (80130f8 <etharp_output_to_arp_index+0x124>)
 801300a:	4613      	mov	r3, r2
 801300c:	005b      	lsls	r3, r3, #1
 801300e:	4413      	add	r3, r2
 8013010:	00db      	lsls	r3, r3, #3
 8013012:	440b      	add	r3, r1
 8013014:	3314      	adds	r3, #20
 8013016:	781b      	ldrb	r3, [r3, #0]
 8013018:	2b02      	cmp	r3, #2
 801301a:	d153      	bne.n	80130c4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801301c:	79fa      	ldrb	r2, [r7, #7]
 801301e:	4936      	ldr	r1, [pc, #216]	; (80130f8 <etharp_output_to_arp_index+0x124>)
 8013020:	4613      	mov	r3, r2
 8013022:	005b      	lsls	r3, r3, #1
 8013024:	4413      	add	r3, r2
 8013026:	00db      	lsls	r3, r3, #3
 8013028:	440b      	add	r3, r1
 801302a:	3312      	adds	r3, #18
 801302c:	881b      	ldrh	r3, [r3, #0]
 801302e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8013032:	d919      	bls.n	8013068 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8013034:	79fa      	ldrb	r2, [r7, #7]
 8013036:	4613      	mov	r3, r2
 8013038:	005b      	lsls	r3, r3, #1
 801303a:	4413      	add	r3, r2
 801303c:	00db      	lsls	r3, r3, #3
 801303e:	4a2e      	ldr	r2, [pc, #184]	; (80130f8 <etharp_output_to_arp_index+0x124>)
 8013040:	4413      	add	r3, r2
 8013042:	3304      	adds	r3, #4
 8013044:	4619      	mov	r1, r3
 8013046:	68f8      	ldr	r0, [r7, #12]
 8013048:	f000 fb4c 	bl	80136e4 <etharp_request>
 801304c:	4603      	mov	r3, r0
 801304e:	2b00      	cmp	r3, #0
 8013050:	d138      	bne.n	80130c4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013052:	79fa      	ldrb	r2, [r7, #7]
 8013054:	4928      	ldr	r1, [pc, #160]	; (80130f8 <etharp_output_to_arp_index+0x124>)
 8013056:	4613      	mov	r3, r2
 8013058:	005b      	lsls	r3, r3, #1
 801305a:	4413      	add	r3, r2
 801305c:	00db      	lsls	r3, r3, #3
 801305e:	440b      	add	r3, r1
 8013060:	3314      	adds	r3, #20
 8013062:	2203      	movs	r2, #3
 8013064:	701a      	strb	r2, [r3, #0]
 8013066:	e02d      	b.n	80130c4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8013068:	79fa      	ldrb	r2, [r7, #7]
 801306a:	4923      	ldr	r1, [pc, #140]	; (80130f8 <etharp_output_to_arp_index+0x124>)
 801306c:	4613      	mov	r3, r2
 801306e:	005b      	lsls	r3, r3, #1
 8013070:	4413      	add	r3, r2
 8013072:	00db      	lsls	r3, r3, #3
 8013074:	440b      	add	r3, r1
 8013076:	3312      	adds	r3, #18
 8013078:	881b      	ldrh	r3, [r3, #0]
 801307a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801307e:	d321      	bcc.n	80130c4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013080:	79fa      	ldrb	r2, [r7, #7]
 8013082:	4613      	mov	r3, r2
 8013084:	005b      	lsls	r3, r3, #1
 8013086:	4413      	add	r3, r2
 8013088:	00db      	lsls	r3, r3, #3
 801308a:	4a1b      	ldr	r2, [pc, #108]	; (80130f8 <etharp_output_to_arp_index+0x124>)
 801308c:	4413      	add	r3, r2
 801308e:	1d19      	adds	r1, r3, #4
 8013090:	79fa      	ldrb	r2, [r7, #7]
 8013092:	4613      	mov	r3, r2
 8013094:	005b      	lsls	r3, r3, #1
 8013096:	4413      	add	r3, r2
 8013098:	00db      	lsls	r3, r3, #3
 801309a:	3308      	adds	r3, #8
 801309c:	4a16      	ldr	r2, [pc, #88]	; (80130f8 <etharp_output_to_arp_index+0x124>)
 801309e:	4413      	add	r3, r2
 80130a0:	3304      	adds	r3, #4
 80130a2:	461a      	mov	r2, r3
 80130a4:	68f8      	ldr	r0, [r7, #12]
 80130a6:	f000 fafb 	bl	80136a0 <etharp_request_dst>
 80130aa:	4603      	mov	r3, r0
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d109      	bne.n	80130c4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80130b0:	79fa      	ldrb	r2, [r7, #7]
 80130b2:	4911      	ldr	r1, [pc, #68]	; (80130f8 <etharp_output_to_arp_index+0x124>)
 80130b4:	4613      	mov	r3, r2
 80130b6:	005b      	lsls	r3, r3, #1
 80130b8:	4413      	add	r3, r2
 80130ba:	00db      	lsls	r3, r3, #3
 80130bc:	440b      	add	r3, r1
 80130be:	3314      	adds	r3, #20
 80130c0:	2203      	movs	r2, #3
 80130c2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80130ca:	79fa      	ldrb	r2, [r7, #7]
 80130cc:	4613      	mov	r3, r2
 80130ce:	005b      	lsls	r3, r3, #1
 80130d0:	4413      	add	r3, r2
 80130d2:	00db      	lsls	r3, r3, #3
 80130d4:	3308      	adds	r3, #8
 80130d6:	4a08      	ldr	r2, [pc, #32]	; (80130f8 <etharp_output_to_arp_index+0x124>)
 80130d8:	4413      	add	r3, r2
 80130da:	3304      	adds	r3, #4
 80130dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80130e0:	9200      	str	r2, [sp, #0]
 80130e2:	460a      	mov	r2, r1
 80130e4:	68b9      	ldr	r1, [r7, #8]
 80130e6:	68f8      	ldr	r0, [r7, #12]
 80130e8:	f001 ff64 	bl	8014fb4 <ethernet_output>
 80130ec:	4603      	mov	r3, r0
}
 80130ee:	4618      	mov	r0, r3
 80130f0:	3710      	adds	r7, #16
 80130f2:	46bd      	mov	sp, r7
 80130f4:	bd80      	pop	{r7, pc}
 80130f6:	bf00      	nop
 80130f8:	200040e0 	.word	0x200040e0
 80130fc:	080195e4 	.word	0x080195e4
 8013100:	08019754 	.word	0x08019754
 8013104:	0801965c 	.word	0x0801965c

08013108 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8013108:	b580      	push	{r7, lr}
 801310a:	b08a      	sub	sp, #40	; 0x28
 801310c:	af02      	add	r7, sp, #8
 801310e:	60f8      	str	r0, [r7, #12]
 8013110:	60b9      	str	r1, [r7, #8]
 8013112:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d106      	bne.n	801312c <etharp_output+0x24>
 801311e:	4b73      	ldr	r3, [pc, #460]	; (80132ec <etharp_output+0x1e4>)
 8013120:	f240 321e 	movw	r2, #798	; 0x31e
 8013124:	4972      	ldr	r1, [pc, #456]	; (80132f0 <etharp_output+0x1e8>)
 8013126:	4873      	ldr	r0, [pc, #460]	; (80132f4 <etharp_output+0x1ec>)
 8013128:	f002 f904 	bl	8015334 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801312c:	68bb      	ldr	r3, [r7, #8]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d106      	bne.n	8013140 <etharp_output+0x38>
 8013132:	4b6e      	ldr	r3, [pc, #440]	; (80132ec <etharp_output+0x1e4>)
 8013134:	f240 321f 	movw	r2, #799	; 0x31f
 8013138:	496f      	ldr	r1, [pc, #444]	; (80132f8 <etharp_output+0x1f0>)
 801313a:	486e      	ldr	r0, [pc, #440]	; (80132f4 <etharp_output+0x1ec>)
 801313c:	f002 f8fa 	bl	8015334 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	2b00      	cmp	r3, #0
 8013144:	d106      	bne.n	8013154 <etharp_output+0x4c>
 8013146:	4b69      	ldr	r3, [pc, #420]	; (80132ec <etharp_output+0x1e4>)
 8013148:	f44f 7248 	mov.w	r2, #800	; 0x320
 801314c:	496b      	ldr	r1, [pc, #428]	; (80132fc <etharp_output+0x1f4>)
 801314e:	4869      	ldr	r0, [pc, #420]	; (80132f4 <etharp_output+0x1ec>)
 8013150:	f002 f8f0 	bl	8015334 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	68f9      	ldr	r1, [r7, #12]
 801315a:	4618      	mov	r0, r3
 801315c:	f000 fef8 	bl	8013f50 <ip4_addr_isbroadcast_u32>
 8013160:	4603      	mov	r3, r0
 8013162:	2b00      	cmp	r3, #0
 8013164:	d002      	beq.n	801316c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8013166:	4b66      	ldr	r3, [pc, #408]	; (8013300 <etharp_output+0x1f8>)
 8013168:	61fb      	str	r3, [r7, #28]
 801316a:	e0af      	b.n	80132cc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013174:	2be0      	cmp	r3, #224	; 0xe0
 8013176:	d118      	bne.n	80131aa <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8013178:	2301      	movs	r3, #1
 801317a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801317c:	2300      	movs	r3, #0
 801317e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013180:	235e      	movs	r3, #94	; 0x5e
 8013182:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	3301      	adds	r3, #1
 8013188:	781b      	ldrb	r3, [r3, #0]
 801318a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801318e:	b2db      	uxtb	r3, r3
 8013190:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	3302      	adds	r3, #2
 8013196:	781b      	ldrb	r3, [r3, #0]
 8013198:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	3303      	adds	r3, #3
 801319e:	781b      	ldrb	r3, [r3, #0]
 80131a0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80131a2:	f107 0310 	add.w	r3, r7, #16
 80131a6:	61fb      	str	r3, [r7, #28]
 80131a8:	e090      	b.n	80132cc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	681a      	ldr	r2, [r3, #0]
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	3304      	adds	r3, #4
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	405a      	eors	r2, r3
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	3308      	adds	r3, #8
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	4013      	ands	r3, r2
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d012      	beq.n	80131e8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80131c8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80131cc:	4293      	cmp	r3, r2
 80131ce:	d00b      	beq.n	80131e8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80131d0:	68fb      	ldr	r3, [r7, #12]
 80131d2:	330c      	adds	r3, #12
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d003      	beq.n	80131e2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	330c      	adds	r3, #12
 80131de:	61bb      	str	r3, [r7, #24]
 80131e0:	e002      	b.n	80131e8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80131e2:	f06f 0303 	mvn.w	r3, #3
 80131e6:	e07d      	b.n	80132e4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80131e8:	4b46      	ldr	r3, [pc, #280]	; (8013304 <etharp_output+0x1fc>)
 80131ea:	781b      	ldrb	r3, [r3, #0]
 80131ec:	4619      	mov	r1, r3
 80131ee:	4a46      	ldr	r2, [pc, #280]	; (8013308 <etharp_output+0x200>)
 80131f0:	460b      	mov	r3, r1
 80131f2:	005b      	lsls	r3, r3, #1
 80131f4:	440b      	add	r3, r1
 80131f6:	00db      	lsls	r3, r3, #3
 80131f8:	4413      	add	r3, r2
 80131fa:	3314      	adds	r3, #20
 80131fc:	781b      	ldrb	r3, [r3, #0]
 80131fe:	2b01      	cmp	r3, #1
 8013200:	d925      	bls.n	801324e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013202:	4b40      	ldr	r3, [pc, #256]	; (8013304 <etharp_output+0x1fc>)
 8013204:	781b      	ldrb	r3, [r3, #0]
 8013206:	4619      	mov	r1, r3
 8013208:	4a3f      	ldr	r2, [pc, #252]	; (8013308 <etharp_output+0x200>)
 801320a:	460b      	mov	r3, r1
 801320c:	005b      	lsls	r3, r3, #1
 801320e:	440b      	add	r3, r1
 8013210:	00db      	lsls	r3, r3, #3
 8013212:	4413      	add	r3, r2
 8013214:	3308      	adds	r3, #8
 8013216:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013218:	68fa      	ldr	r2, [r7, #12]
 801321a:	429a      	cmp	r2, r3
 801321c:	d117      	bne.n	801324e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801321e:	69bb      	ldr	r3, [r7, #24]
 8013220:	681a      	ldr	r2, [r3, #0]
 8013222:	4b38      	ldr	r3, [pc, #224]	; (8013304 <etharp_output+0x1fc>)
 8013224:	781b      	ldrb	r3, [r3, #0]
 8013226:	4618      	mov	r0, r3
 8013228:	4937      	ldr	r1, [pc, #220]	; (8013308 <etharp_output+0x200>)
 801322a:	4603      	mov	r3, r0
 801322c:	005b      	lsls	r3, r3, #1
 801322e:	4403      	add	r3, r0
 8013230:	00db      	lsls	r3, r3, #3
 8013232:	440b      	add	r3, r1
 8013234:	3304      	adds	r3, #4
 8013236:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013238:	429a      	cmp	r2, r3
 801323a:	d108      	bne.n	801324e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801323c:	4b31      	ldr	r3, [pc, #196]	; (8013304 <etharp_output+0x1fc>)
 801323e:	781b      	ldrb	r3, [r3, #0]
 8013240:	461a      	mov	r2, r3
 8013242:	68b9      	ldr	r1, [r7, #8]
 8013244:	68f8      	ldr	r0, [r7, #12]
 8013246:	f7ff fec5 	bl	8012fd4 <etharp_output_to_arp_index>
 801324a:	4603      	mov	r3, r0
 801324c:	e04a      	b.n	80132e4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801324e:	2300      	movs	r3, #0
 8013250:	75fb      	strb	r3, [r7, #23]
 8013252:	e031      	b.n	80132b8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013254:	7dfa      	ldrb	r2, [r7, #23]
 8013256:	492c      	ldr	r1, [pc, #176]	; (8013308 <etharp_output+0x200>)
 8013258:	4613      	mov	r3, r2
 801325a:	005b      	lsls	r3, r3, #1
 801325c:	4413      	add	r3, r2
 801325e:	00db      	lsls	r3, r3, #3
 8013260:	440b      	add	r3, r1
 8013262:	3314      	adds	r3, #20
 8013264:	781b      	ldrb	r3, [r3, #0]
 8013266:	2b01      	cmp	r3, #1
 8013268:	d923      	bls.n	80132b2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801326a:	7dfa      	ldrb	r2, [r7, #23]
 801326c:	4926      	ldr	r1, [pc, #152]	; (8013308 <etharp_output+0x200>)
 801326e:	4613      	mov	r3, r2
 8013270:	005b      	lsls	r3, r3, #1
 8013272:	4413      	add	r3, r2
 8013274:	00db      	lsls	r3, r3, #3
 8013276:	440b      	add	r3, r1
 8013278:	3308      	adds	r3, #8
 801327a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801327c:	68fa      	ldr	r2, [r7, #12]
 801327e:	429a      	cmp	r2, r3
 8013280:	d117      	bne.n	80132b2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8013282:	69bb      	ldr	r3, [r7, #24]
 8013284:	6819      	ldr	r1, [r3, #0]
 8013286:	7dfa      	ldrb	r2, [r7, #23]
 8013288:	481f      	ldr	r0, [pc, #124]	; (8013308 <etharp_output+0x200>)
 801328a:	4613      	mov	r3, r2
 801328c:	005b      	lsls	r3, r3, #1
 801328e:	4413      	add	r3, r2
 8013290:	00db      	lsls	r3, r3, #3
 8013292:	4403      	add	r3, r0
 8013294:	3304      	adds	r3, #4
 8013296:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8013298:	4299      	cmp	r1, r3
 801329a:	d10a      	bne.n	80132b2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801329c:	4a19      	ldr	r2, [pc, #100]	; (8013304 <etharp_output+0x1fc>)
 801329e:	7dfb      	ldrb	r3, [r7, #23]
 80132a0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80132a2:	7dfb      	ldrb	r3, [r7, #23]
 80132a4:	461a      	mov	r2, r3
 80132a6:	68b9      	ldr	r1, [r7, #8]
 80132a8:	68f8      	ldr	r0, [r7, #12]
 80132aa:	f7ff fe93 	bl	8012fd4 <etharp_output_to_arp_index>
 80132ae:	4603      	mov	r3, r0
 80132b0:	e018      	b.n	80132e4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80132b2:	7dfb      	ldrb	r3, [r7, #23]
 80132b4:	3301      	adds	r3, #1
 80132b6:	75fb      	strb	r3, [r7, #23]
 80132b8:	7dfb      	ldrb	r3, [r7, #23]
 80132ba:	2b09      	cmp	r3, #9
 80132bc:	d9ca      	bls.n	8013254 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80132be:	68ba      	ldr	r2, [r7, #8]
 80132c0:	69b9      	ldr	r1, [r7, #24]
 80132c2:	68f8      	ldr	r0, [r7, #12]
 80132c4:	f000 f822 	bl	801330c <etharp_query>
 80132c8:	4603      	mov	r3, r0
 80132ca:	e00b      	b.n	80132e4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80132d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80132d6:	9300      	str	r3, [sp, #0]
 80132d8:	69fb      	ldr	r3, [r7, #28]
 80132da:	68b9      	ldr	r1, [r7, #8]
 80132dc:	68f8      	ldr	r0, [r7, #12]
 80132de:	f001 fe69 	bl	8014fb4 <ethernet_output>
 80132e2:	4603      	mov	r3, r0
}
 80132e4:	4618      	mov	r0, r3
 80132e6:	3720      	adds	r7, #32
 80132e8:	46bd      	mov	sp, r7
 80132ea:	bd80      	pop	{r7, pc}
 80132ec:	080195e4 	.word	0x080195e4
 80132f0:	08019734 	.word	0x08019734
 80132f4:	0801965c 	.word	0x0801965c
 80132f8:	08019784 	.word	0x08019784
 80132fc:	08019724 	.word	0x08019724
 8013300:	08019e54 	.word	0x08019e54
 8013304:	200041d0 	.word	0x200041d0
 8013308:	200040e0 	.word	0x200040e0

0801330c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801330c:	b580      	push	{r7, lr}
 801330e:	b08c      	sub	sp, #48	; 0x30
 8013310:	af02      	add	r7, sp, #8
 8013312:	60f8      	str	r0, [r7, #12]
 8013314:	60b9      	str	r1, [r7, #8]
 8013316:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	3326      	adds	r3, #38	; 0x26
 801331c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801331e:	23ff      	movs	r3, #255	; 0xff
 8013320:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8013324:	2300      	movs	r3, #0
 8013326:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013328:	68bb      	ldr	r3, [r7, #8]
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	68f9      	ldr	r1, [r7, #12]
 801332e:	4618      	mov	r0, r3
 8013330:	f000 fe0e 	bl	8013f50 <ip4_addr_isbroadcast_u32>
 8013334:	4603      	mov	r3, r0
 8013336:	2b00      	cmp	r3, #0
 8013338:	d10c      	bne.n	8013354 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801333a:	68bb      	ldr	r3, [r7, #8]
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013342:	2be0      	cmp	r3, #224	; 0xe0
 8013344:	d006      	beq.n	8013354 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013346:	68bb      	ldr	r3, [r7, #8]
 8013348:	2b00      	cmp	r3, #0
 801334a:	d003      	beq.n	8013354 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801334c:	68bb      	ldr	r3, [r7, #8]
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d102      	bne.n	801335a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013354:	f06f 030f 	mvn.w	r3, #15
 8013358:	e101      	b.n	801355e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801335a:	68fa      	ldr	r2, [r7, #12]
 801335c:	2101      	movs	r1, #1
 801335e:	68b8      	ldr	r0, [r7, #8]
 8013360:	f7ff fb60 	bl	8012a24 <etharp_find_entry>
 8013364:	4603      	mov	r3, r0
 8013366:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8013368:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801336c:	2b00      	cmp	r3, #0
 801336e:	da02      	bge.n	8013376 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8013370:	8a7b      	ldrh	r3, [r7, #18]
 8013372:	b25b      	sxtb	r3, r3
 8013374:	e0f3      	b.n	801355e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8013376:	8a7b      	ldrh	r3, [r7, #18]
 8013378:	2b7e      	cmp	r3, #126	; 0x7e
 801337a:	d906      	bls.n	801338a <etharp_query+0x7e>
 801337c:	4b7a      	ldr	r3, [pc, #488]	; (8013568 <etharp_query+0x25c>)
 801337e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8013382:	497a      	ldr	r1, [pc, #488]	; (801356c <etharp_query+0x260>)
 8013384:	487a      	ldr	r0, [pc, #488]	; (8013570 <etharp_query+0x264>)
 8013386:	f001 ffd5 	bl	8015334 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801338a:	8a7b      	ldrh	r3, [r7, #18]
 801338c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801338e:	7c7a      	ldrb	r2, [r7, #17]
 8013390:	4978      	ldr	r1, [pc, #480]	; (8013574 <etharp_query+0x268>)
 8013392:	4613      	mov	r3, r2
 8013394:	005b      	lsls	r3, r3, #1
 8013396:	4413      	add	r3, r2
 8013398:	00db      	lsls	r3, r3, #3
 801339a:	440b      	add	r3, r1
 801339c:	3314      	adds	r3, #20
 801339e:	781b      	ldrb	r3, [r3, #0]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d115      	bne.n	80133d0 <etharp_query+0xc4>
    is_new_entry = 1;
 80133a4:	2301      	movs	r3, #1
 80133a6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80133a8:	7c7a      	ldrb	r2, [r7, #17]
 80133aa:	4972      	ldr	r1, [pc, #456]	; (8013574 <etharp_query+0x268>)
 80133ac:	4613      	mov	r3, r2
 80133ae:	005b      	lsls	r3, r3, #1
 80133b0:	4413      	add	r3, r2
 80133b2:	00db      	lsls	r3, r3, #3
 80133b4:	440b      	add	r3, r1
 80133b6:	3314      	adds	r3, #20
 80133b8:	2201      	movs	r2, #1
 80133ba:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80133bc:	7c7a      	ldrb	r2, [r7, #17]
 80133be:	496d      	ldr	r1, [pc, #436]	; (8013574 <etharp_query+0x268>)
 80133c0:	4613      	mov	r3, r2
 80133c2:	005b      	lsls	r3, r3, #1
 80133c4:	4413      	add	r3, r2
 80133c6:	00db      	lsls	r3, r3, #3
 80133c8:	440b      	add	r3, r1
 80133ca:	3308      	adds	r3, #8
 80133cc:	68fa      	ldr	r2, [r7, #12]
 80133ce:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80133d0:	7c7a      	ldrb	r2, [r7, #17]
 80133d2:	4968      	ldr	r1, [pc, #416]	; (8013574 <etharp_query+0x268>)
 80133d4:	4613      	mov	r3, r2
 80133d6:	005b      	lsls	r3, r3, #1
 80133d8:	4413      	add	r3, r2
 80133da:	00db      	lsls	r3, r3, #3
 80133dc:	440b      	add	r3, r1
 80133de:	3314      	adds	r3, #20
 80133e0:	781b      	ldrb	r3, [r3, #0]
 80133e2:	2b01      	cmp	r3, #1
 80133e4:	d011      	beq.n	801340a <etharp_query+0xfe>
 80133e6:	7c7a      	ldrb	r2, [r7, #17]
 80133e8:	4962      	ldr	r1, [pc, #392]	; (8013574 <etharp_query+0x268>)
 80133ea:	4613      	mov	r3, r2
 80133ec:	005b      	lsls	r3, r3, #1
 80133ee:	4413      	add	r3, r2
 80133f0:	00db      	lsls	r3, r3, #3
 80133f2:	440b      	add	r3, r1
 80133f4:	3314      	adds	r3, #20
 80133f6:	781b      	ldrb	r3, [r3, #0]
 80133f8:	2b01      	cmp	r3, #1
 80133fa:	d806      	bhi.n	801340a <etharp_query+0xfe>
 80133fc:	4b5a      	ldr	r3, [pc, #360]	; (8013568 <etharp_query+0x25c>)
 80133fe:	f240 32cd 	movw	r2, #973	; 0x3cd
 8013402:	495d      	ldr	r1, [pc, #372]	; (8013578 <etharp_query+0x26c>)
 8013404:	485a      	ldr	r0, [pc, #360]	; (8013570 <etharp_query+0x264>)
 8013406:	f001 ff95 	bl	8015334 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801340a:	6a3b      	ldr	r3, [r7, #32]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d102      	bne.n	8013416 <etharp_query+0x10a>
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	2b00      	cmp	r3, #0
 8013414:	d10c      	bne.n	8013430 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8013416:	68b9      	ldr	r1, [r7, #8]
 8013418:	68f8      	ldr	r0, [r7, #12]
 801341a:	f000 f963 	bl	80136e4 <etharp_request>
 801341e:	4603      	mov	r3, r0
 8013420:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	2b00      	cmp	r3, #0
 8013428:	d102      	bne.n	8013430 <etharp_query+0x124>
      return result;
 801342a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801342e:	e096      	b.n	801355e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	2b00      	cmp	r3, #0
 8013434:	d106      	bne.n	8013444 <etharp_query+0x138>
 8013436:	4b4c      	ldr	r3, [pc, #304]	; (8013568 <etharp_query+0x25c>)
 8013438:	f240 32e1 	movw	r2, #993	; 0x3e1
 801343c:	494f      	ldr	r1, [pc, #316]	; (801357c <etharp_query+0x270>)
 801343e:	484c      	ldr	r0, [pc, #304]	; (8013570 <etharp_query+0x264>)
 8013440:	f001 ff78 	bl	8015334 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8013444:	7c7a      	ldrb	r2, [r7, #17]
 8013446:	494b      	ldr	r1, [pc, #300]	; (8013574 <etharp_query+0x268>)
 8013448:	4613      	mov	r3, r2
 801344a:	005b      	lsls	r3, r3, #1
 801344c:	4413      	add	r3, r2
 801344e:	00db      	lsls	r3, r3, #3
 8013450:	440b      	add	r3, r1
 8013452:	3314      	adds	r3, #20
 8013454:	781b      	ldrb	r3, [r3, #0]
 8013456:	2b01      	cmp	r3, #1
 8013458:	d917      	bls.n	801348a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801345a:	4a49      	ldr	r2, [pc, #292]	; (8013580 <etharp_query+0x274>)
 801345c:	7c7b      	ldrb	r3, [r7, #17]
 801345e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013460:	7c7a      	ldrb	r2, [r7, #17]
 8013462:	4613      	mov	r3, r2
 8013464:	005b      	lsls	r3, r3, #1
 8013466:	4413      	add	r3, r2
 8013468:	00db      	lsls	r3, r3, #3
 801346a:	3308      	adds	r3, #8
 801346c:	4a41      	ldr	r2, [pc, #260]	; (8013574 <etharp_query+0x268>)
 801346e:	4413      	add	r3, r2
 8013470:	3304      	adds	r3, #4
 8013472:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013476:	9200      	str	r2, [sp, #0]
 8013478:	697a      	ldr	r2, [r7, #20]
 801347a:	6879      	ldr	r1, [r7, #4]
 801347c:	68f8      	ldr	r0, [r7, #12]
 801347e:	f001 fd99 	bl	8014fb4 <ethernet_output>
 8013482:	4603      	mov	r3, r0
 8013484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013488:	e067      	b.n	801355a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801348a:	7c7a      	ldrb	r2, [r7, #17]
 801348c:	4939      	ldr	r1, [pc, #228]	; (8013574 <etharp_query+0x268>)
 801348e:	4613      	mov	r3, r2
 8013490:	005b      	lsls	r3, r3, #1
 8013492:	4413      	add	r3, r2
 8013494:	00db      	lsls	r3, r3, #3
 8013496:	440b      	add	r3, r1
 8013498:	3314      	adds	r3, #20
 801349a:	781b      	ldrb	r3, [r3, #0]
 801349c:	2b01      	cmp	r3, #1
 801349e:	d15c      	bne.n	801355a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80134a0:	2300      	movs	r3, #0
 80134a2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80134a8:	e01c      	b.n	80134e4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80134aa:	69fb      	ldr	r3, [r7, #28]
 80134ac:	895a      	ldrh	r2, [r3, #10]
 80134ae:	69fb      	ldr	r3, [r7, #28]
 80134b0:	891b      	ldrh	r3, [r3, #8]
 80134b2:	429a      	cmp	r2, r3
 80134b4:	d10a      	bne.n	80134cc <etharp_query+0x1c0>
 80134b6:	69fb      	ldr	r3, [r7, #28]
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d006      	beq.n	80134cc <etharp_query+0x1c0>
 80134be:	4b2a      	ldr	r3, [pc, #168]	; (8013568 <etharp_query+0x25c>)
 80134c0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80134c4:	492f      	ldr	r1, [pc, #188]	; (8013584 <etharp_query+0x278>)
 80134c6:	482a      	ldr	r0, [pc, #168]	; (8013570 <etharp_query+0x264>)
 80134c8:	f001 ff34 	bl	8015334 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80134cc:	69fb      	ldr	r3, [r7, #28]
 80134ce:	7b1b      	ldrb	r3, [r3, #12]
 80134d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d002      	beq.n	80134de <etharp_query+0x1d2>
        copy_needed = 1;
 80134d8:	2301      	movs	r3, #1
 80134da:	61bb      	str	r3, [r7, #24]
        break;
 80134dc:	e005      	b.n	80134ea <etharp_query+0x1de>
      }
      p = p->next;
 80134de:	69fb      	ldr	r3, [r7, #28]
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80134e4:	69fb      	ldr	r3, [r7, #28]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d1df      	bne.n	80134aa <etharp_query+0x19e>
    }
    if (copy_needed) {
 80134ea:	69bb      	ldr	r3, [r7, #24]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d007      	beq.n	8013500 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80134f0:	687a      	ldr	r2, [r7, #4]
 80134f2:	f44f 7120 	mov.w	r1, #640	; 0x280
 80134f6:	200e      	movs	r0, #14
 80134f8:	f7f8 fd84 	bl	800c004 <pbuf_clone>
 80134fc:	61f8      	str	r0, [r7, #28]
 80134fe:	e004      	b.n	801350a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8013504:	69f8      	ldr	r0, [r7, #28]
 8013506:	f7f8 fb91 	bl	800bc2c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801350a:	69fb      	ldr	r3, [r7, #28]
 801350c:	2b00      	cmp	r3, #0
 801350e:	d021      	beq.n	8013554 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8013510:	7c7a      	ldrb	r2, [r7, #17]
 8013512:	4918      	ldr	r1, [pc, #96]	; (8013574 <etharp_query+0x268>)
 8013514:	4613      	mov	r3, r2
 8013516:	005b      	lsls	r3, r3, #1
 8013518:	4413      	add	r3, r2
 801351a:	00db      	lsls	r3, r3, #3
 801351c:	440b      	add	r3, r1
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d00a      	beq.n	801353a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8013524:	7c7a      	ldrb	r2, [r7, #17]
 8013526:	4913      	ldr	r1, [pc, #76]	; (8013574 <etharp_query+0x268>)
 8013528:	4613      	mov	r3, r2
 801352a:	005b      	lsls	r3, r3, #1
 801352c:	4413      	add	r3, r2
 801352e:	00db      	lsls	r3, r3, #3
 8013530:	440b      	add	r3, r1
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	4618      	mov	r0, r3
 8013536:	f7f8 fad3 	bl	800bae0 <pbuf_free>
      }
      arp_table[i].q = p;
 801353a:	7c7a      	ldrb	r2, [r7, #17]
 801353c:	490d      	ldr	r1, [pc, #52]	; (8013574 <etharp_query+0x268>)
 801353e:	4613      	mov	r3, r2
 8013540:	005b      	lsls	r3, r3, #1
 8013542:	4413      	add	r3, r2
 8013544:	00db      	lsls	r3, r3, #3
 8013546:	440b      	add	r3, r1
 8013548:	69fa      	ldr	r2, [r7, #28]
 801354a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801354c:	2300      	movs	r3, #0
 801354e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013552:	e002      	b.n	801355a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8013554:	23ff      	movs	r3, #255	; 0xff
 8013556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801355a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801355e:	4618      	mov	r0, r3
 8013560:	3728      	adds	r7, #40	; 0x28
 8013562:	46bd      	mov	sp, r7
 8013564:	bd80      	pop	{r7, pc}
 8013566:	bf00      	nop
 8013568:	080195e4 	.word	0x080195e4
 801356c:	08019790 	.word	0x08019790
 8013570:	0801965c 	.word	0x0801965c
 8013574:	200040e0 	.word	0x200040e0
 8013578:	080197a0 	.word	0x080197a0
 801357c:	08019784 	.word	0x08019784
 8013580:	200041d0 	.word	0x200041d0
 8013584:	080197c8 	.word	0x080197c8

08013588 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8013588:	b580      	push	{r7, lr}
 801358a:	b08a      	sub	sp, #40	; 0x28
 801358c:	af02      	add	r7, sp, #8
 801358e:	60f8      	str	r0, [r7, #12]
 8013590:	60b9      	str	r1, [r7, #8]
 8013592:	607a      	str	r2, [r7, #4]
 8013594:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8013596:	2300      	movs	r3, #0
 8013598:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	2b00      	cmp	r3, #0
 801359e:	d106      	bne.n	80135ae <etharp_raw+0x26>
 80135a0:	4b3a      	ldr	r3, [pc, #232]	; (801368c <etharp_raw+0x104>)
 80135a2:	f240 4257 	movw	r2, #1111	; 0x457
 80135a6:	493a      	ldr	r1, [pc, #232]	; (8013690 <etharp_raw+0x108>)
 80135a8:	483a      	ldr	r0, [pc, #232]	; (8013694 <etharp_raw+0x10c>)
 80135aa:	f001 fec3 	bl	8015334 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80135ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 80135b2:	211c      	movs	r1, #28
 80135b4:	200e      	movs	r0, #14
 80135b6:	f7f7 ffaf 	bl	800b518 <pbuf_alloc>
 80135ba:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80135bc:	69bb      	ldr	r3, [r7, #24]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d102      	bne.n	80135c8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80135c2:	f04f 33ff 	mov.w	r3, #4294967295
 80135c6:	e05d      	b.n	8013684 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80135c8:	69bb      	ldr	r3, [r7, #24]
 80135ca:	895b      	ldrh	r3, [r3, #10]
 80135cc:	2b1b      	cmp	r3, #27
 80135ce:	d806      	bhi.n	80135de <etharp_raw+0x56>
 80135d0:	4b2e      	ldr	r3, [pc, #184]	; (801368c <etharp_raw+0x104>)
 80135d2:	f240 4262 	movw	r2, #1122	; 0x462
 80135d6:	4930      	ldr	r1, [pc, #192]	; (8013698 <etharp_raw+0x110>)
 80135d8:	482e      	ldr	r0, [pc, #184]	; (8013694 <etharp_raw+0x10c>)
 80135da:	f001 feab 	bl	8015334 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80135de:	69bb      	ldr	r3, [r7, #24]
 80135e0:	685b      	ldr	r3, [r3, #4]
 80135e2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80135e4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80135e6:	4618      	mov	r0, r3
 80135e8:	f7f6 fea6 	bl	800a338 <lwip_htons>
 80135ec:	4603      	mov	r3, r0
 80135ee:	461a      	mov	r2, r3
 80135f0:	697b      	ldr	r3, [r7, #20]
 80135f2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80135fa:	2b06      	cmp	r3, #6
 80135fc:	d006      	beq.n	801360c <etharp_raw+0x84>
 80135fe:	4b23      	ldr	r3, [pc, #140]	; (801368c <etharp_raw+0x104>)
 8013600:	f240 4269 	movw	r2, #1129	; 0x469
 8013604:	4925      	ldr	r1, [pc, #148]	; (801369c <etharp_raw+0x114>)
 8013606:	4823      	ldr	r0, [pc, #140]	; (8013694 <etharp_raw+0x10c>)
 8013608:	f001 fe94 	bl	8015334 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801360c:	697b      	ldr	r3, [r7, #20]
 801360e:	3308      	adds	r3, #8
 8013610:	2206      	movs	r2, #6
 8013612:	6839      	ldr	r1, [r7, #0]
 8013614:	4618      	mov	r0, r3
 8013616:	f001 fe5d 	bl	80152d4 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801361a:	697b      	ldr	r3, [r7, #20]
 801361c:	3312      	adds	r3, #18
 801361e:	2206      	movs	r2, #6
 8013620:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013622:	4618      	mov	r0, r3
 8013624:	f001 fe56 	bl	80152d4 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8013628:	697b      	ldr	r3, [r7, #20]
 801362a:	330e      	adds	r3, #14
 801362c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801362e:	6812      	ldr	r2, [r2, #0]
 8013630:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8013632:	697b      	ldr	r3, [r7, #20]
 8013634:	3318      	adds	r3, #24
 8013636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013638:	6812      	ldr	r2, [r2, #0]
 801363a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801363c:	697b      	ldr	r3, [r7, #20]
 801363e:	2200      	movs	r2, #0
 8013640:	701a      	strb	r2, [r3, #0]
 8013642:	2200      	movs	r2, #0
 8013644:	f042 0201 	orr.w	r2, r2, #1
 8013648:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801364a:	697b      	ldr	r3, [r7, #20]
 801364c:	2200      	movs	r2, #0
 801364e:	f042 0208 	orr.w	r2, r2, #8
 8013652:	709a      	strb	r2, [r3, #2]
 8013654:	2200      	movs	r2, #0
 8013656:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8013658:	697b      	ldr	r3, [r7, #20]
 801365a:	2206      	movs	r2, #6
 801365c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801365e:	697b      	ldr	r3, [r7, #20]
 8013660:	2204      	movs	r2, #4
 8013662:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8013664:	f640 0306 	movw	r3, #2054	; 0x806
 8013668:	9300      	str	r3, [sp, #0]
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	68ba      	ldr	r2, [r7, #8]
 801366e:	69b9      	ldr	r1, [r7, #24]
 8013670:	68f8      	ldr	r0, [r7, #12]
 8013672:	f001 fc9f 	bl	8014fb4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8013676:	69b8      	ldr	r0, [r7, #24]
 8013678:	f7f8 fa32 	bl	800bae0 <pbuf_free>
  p = NULL;
 801367c:	2300      	movs	r3, #0
 801367e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8013680:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013684:	4618      	mov	r0, r3
 8013686:	3720      	adds	r7, #32
 8013688:	46bd      	mov	sp, r7
 801368a:	bd80      	pop	{r7, pc}
 801368c:	080195e4 	.word	0x080195e4
 8013690:	08019734 	.word	0x08019734
 8013694:	0801965c 	.word	0x0801965c
 8013698:	080197e4 	.word	0x080197e4
 801369c:	08019818 	.word	0x08019818

080136a0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80136a0:	b580      	push	{r7, lr}
 80136a2:	b088      	sub	sp, #32
 80136a4:	af04      	add	r7, sp, #16
 80136a6:	60f8      	str	r0, [r7, #12]
 80136a8:	60b9      	str	r1, [r7, #8]
 80136aa:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80136bc:	2201      	movs	r2, #1
 80136be:	9203      	str	r2, [sp, #12]
 80136c0:	68ba      	ldr	r2, [r7, #8]
 80136c2:	9202      	str	r2, [sp, #8]
 80136c4:	4a06      	ldr	r2, [pc, #24]	; (80136e0 <etharp_request_dst+0x40>)
 80136c6:	9201      	str	r2, [sp, #4]
 80136c8:	9300      	str	r3, [sp, #0]
 80136ca:	4603      	mov	r3, r0
 80136cc:	687a      	ldr	r2, [r7, #4]
 80136ce:	68f8      	ldr	r0, [r7, #12]
 80136d0:	f7ff ff5a 	bl	8013588 <etharp_raw>
 80136d4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80136d6:	4618      	mov	r0, r3
 80136d8:	3710      	adds	r7, #16
 80136da:	46bd      	mov	sp, r7
 80136dc:	bd80      	pop	{r7, pc}
 80136de:	bf00      	nop
 80136e0:	08019e5c 	.word	0x08019e5c

080136e4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80136e4:	b580      	push	{r7, lr}
 80136e6:	b082      	sub	sp, #8
 80136e8:	af00      	add	r7, sp, #0
 80136ea:	6078      	str	r0, [r7, #4]
 80136ec:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80136ee:	4a05      	ldr	r2, [pc, #20]	; (8013704 <etharp_request+0x20>)
 80136f0:	6839      	ldr	r1, [r7, #0]
 80136f2:	6878      	ldr	r0, [r7, #4]
 80136f4:	f7ff ffd4 	bl	80136a0 <etharp_request_dst>
 80136f8:	4603      	mov	r3, r0
}
 80136fa:	4618      	mov	r0, r3
 80136fc:	3708      	adds	r7, #8
 80136fe:	46bd      	mov	sp, r7
 8013700:	bd80      	pop	{r7, pc}
 8013702:	bf00      	nop
 8013704:	08019e54 	.word	0x08019e54

08013708 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8013708:	b580      	push	{r7, lr}
 801370a:	b08e      	sub	sp, #56	; 0x38
 801370c:	af04      	add	r7, sp, #16
 801370e:	6078      	str	r0, [r7, #4]
 8013710:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8013712:	4b79      	ldr	r3, [pc, #484]	; (80138f8 <icmp_input+0x1f0>)
 8013714:	689b      	ldr	r3, [r3, #8]
 8013716:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8013718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801371a:	781b      	ldrb	r3, [r3, #0]
 801371c:	f003 030f 	and.w	r3, r3, #15
 8013720:	b2db      	uxtb	r3, r3
 8013722:	009b      	lsls	r3, r3, #2
 8013724:	b2db      	uxtb	r3, r3
 8013726:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8013728:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801372a:	2b13      	cmp	r3, #19
 801372c:	f240 80cd 	bls.w	80138ca <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	895b      	ldrh	r3, [r3, #10]
 8013734:	2b03      	cmp	r3, #3
 8013736:	f240 80ca 	bls.w	80138ce <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	685b      	ldr	r3, [r3, #4]
 801373e:	781b      	ldrb	r3, [r3, #0]
 8013740:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8013744:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8013748:	2b00      	cmp	r3, #0
 801374a:	f000 80b7 	beq.w	80138bc <icmp_input+0x1b4>
 801374e:	2b08      	cmp	r3, #8
 8013750:	f040 80b7 	bne.w	80138c2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8013754:	4b69      	ldr	r3, [pc, #420]	; (80138fc <icmp_input+0x1f4>)
 8013756:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013758:	4b67      	ldr	r3, [pc, #412]	; (80138f8 <icmp_input+0x1f0>)
 801375a:	695b      	ldr	r3, [r3, #20]
 801375c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013760:	2be0      	cmp	r3, #224	; 0xe0
 8013762:	f000 80bb 	beq.w	80138dc <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8013766:	4b64      	ldr	r3, [pc, #400]	; (80138f8 <icmp_input+0x1f0>)
 8013768:	695b      	ldr	r3, [r3, #20]
 801376a:	4a63      	ldr	r2, [pc, #396]	; (80138f8 <icmp_input+0x1f0>)
 801376c:	6812      	ldr	r2, [r2, #0]
 801376e:	4611      	mov	r1, r2
 8013770:	4618      	mov	r0, r3
 8013772:	f000 fbed 	bl	8013f50 <ip4_addr_isbroadcast_u32>
 8013776:	4603      	mov	r3, r0
 8013778:	2b00      	cmp	r3, #0
 801377a:	f040 80b1 	bne.w	80138e0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	891b      	ldrh	r3, [r3, #8]
 8013782:	2b07      	cmp	r3, #7
 8013784:	f240 80a5 	bls.w	80138d2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013788:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801378a:	330e      	adds	r3, #14
 801378c:	4619      	mov	r1, r3
 801378e:	6878      	ldr	r0, [r7, #4]
 8013790:	f7f8 f910 	bl	800b9b4 <pbuf_add_header>
 8013794:	4603      	mov	r3, r0
 8013796:	2b00      	cmp	r3, #0
 8013798:	d04b      	beq.n	8013832 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	891a      	ldrh	r2, [r3, #8]
 801379e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80137a0:	4413      	add	r3, r2
 80137a2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	891b      	ldrh	r3, [r3, #8]
 80137a8:	8b7a      	ldrh	r2, [r7, #26]
 80137aa:	429a      	cmp	r2, r3
 80137ac:	f0c0 809a 	bcc.w	80138e4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80137b0:	8b7b      	ldrh	r3, [r7, #26]
 80137b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80137b6:	4619      	mov	r1, r3
 80137b8:	200e      	movs	r0, #14
 80137ba:	f7f7 fead 	bl	800b518 <pbuf_alloc>
 80137be:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80137c0:	697b      	ldr	r3, [r7, #20]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	f000 8090 	beq.w	80138e8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80137c8:	697b      	ldr	r3, [r7, #20]
 80137ca:	895b      	ldrh	r3, [r3, #10]
 80137cc:	461a      	mov	r2, r3
 80137ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80137d0:	3308      	adds	r3, #8
 80137d2:	429a      	cmp	r2, r3
 80137d4:	d203      	bcs.n	80137de <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80137d6:	6978      	ldr	r0, [r7, #20]
 80137d8:	f7f8 f982 	bl	800bae0 <pbuf_free>
          goto icmperr;
 80137dc:	e085      	b.n	80138ea <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80137de:	697b      	ldr	r3, [r7, #20]
 80137e0:	685b      	ldr	r3, [r3, #4]
 80137e2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80137e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80137e6:	4618      	mov	r0, r3
 80137e8:	f001 fd74 	bl	80152d4 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80137ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80137ee:	4619      	mov	r1, r3
 80137f0:	6978      	ldr	r0, [r7, #20]
 80137f2:	f7f8 f8ef 	bl	800b9d4 <pbuf_remove_header>
 80137f6:	4603      	mov	r3, r0
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d009      	beq.n	8013810 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80137fc:	4b40      	ldr	r3, [pc, #256]	; (8013900 <icmp_input+0x1f8>)
 80137fe:	22b6      	movs	r2, #182	; 0xb6
 8013800:	4940      	ldr	r1, [pc, #256]	; (8013904 <icmp_input+0x1fc>)
 8013802:	4841      	ldr	r0, [pc, #260]	; (8013908 <icmp_input+0x200>)
 8013804:	f001 fd96 	bl	8015334 <iprintf>
          pbuf_free(r);
 8013808:	6978      	ldr	r0, [r7, #20]
 801380a:	f7f8 f969 	bl	800bae0 <pbuf_free>
          goto icmperr;
 801380e:	e06c      	b.n	80138ea <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8013810:	6879      	ldr	r1, [r7, #4]
 8013812:	6978      	ldr	r0, [r7, #20]
 8013814:	f7f8 fa88 	bl	800bd28 <pbuf_copy>
 8013818:	4603      	mov	r3, r0
 801381a:	2b00      	cmp	r3, #0
 801381c:	d003      	beq.n	8013826 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801381e:	6978      	ldr	r0, [r7, #20]
 8013820:	f7f8 f95e 	bl	800bae0 <pbuf_free>
          goto icmperr;
 8013824:	e061      	b.n	80138ea <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8013826:	6878      	ldr	r0, [r7, #4]
 8013828:	f7f8 f95a 	bl	800bae0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801382c:	697b      	ldr	r3, [r7, #20]
 801382e:	607b      	str	r3, [r7, #4]
 8013830:	e00f      	b.n	8013852 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013832:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013834:	330e      	adds	r3, #14
 8013836:	4619      	mov	r1, r3
 8013838:	6878      	ldr	r0, [r7, #4]
 801383a:	f7f8 f8cb 	bl	800b9d4 <pbuf_remove_header>
 801383e:	4603      	mov	r3, r0
 8013840:	2b00      	cmp	r3, #0
 8013842:	d006      	beq.n	8013852 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8013844:	4b2e      	ldr	r3, [pc, #184]	; (8013900 <icmp_input+0x1f8>)
 8013846:	22c7      	movs	r2, #199	; 0xc7
 8013848:	4930      	ldr	r1, [pc, #192]	; (801390c <icmp_input+0x204>)
 801384a:	482f      	ldr	r0, [pc, #188]	; (8013908 <icmp_input+0x200>)
 801384c:	f001 fd72 	bl	8015334 <iprintf>
          goto icmperr;
 8013850:	e04b      	b.n	80138ea <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	685b      	ldr	r3, [r3, #4]
 8013856:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8013858:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801385a:	4619      	mov	r1, r3
 801385c:	6878      	ldr	r0, [r7, #4]
 801385e:	f7f8 f8a9 	bl	800b9b4 <pbuf_add_header>
 8013862:	4603      	mov	r3, r0
 8013864:	2b00      	cmp	r3, #0
 8013866:	d12b      	bne.n	80138c0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	685b      	ldr	r3, [r3, #4]
 801386c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801386e:	69fb      	ldr	r3, [r7, #28]
 8013870:	681a      	ldr	r2, [r3, #0]
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8013876:	4b20      	ldr	r3, [pc, #128]	; (80138f8 <icmp_input+0x1f0>)
 8013878:	691a      	ldr	r2, [r3, #16]
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801387e:	693b      	ldr	r3, [r7, #16]
 8013880:	2200      	movs	r2, #0
 8013882:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8013884:	693b      	ldr	r3, [r7, #16]
 8013886:	2200      	movs	r2, #0
 8013888:	709a      	strb	r2, [r3, #2]
 801388a:	2200      	movs	r2, #0
 801388c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	22ff      	movs	r2, #255	; 0xff
 8013892:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	2200      	movs	r2, #0
 8013898:	729a      	strb	r2, [r3, #10]
 801389a:	2200      	movs	r2, #0
 801389c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801389e:	683b      	ldr	r3, [r7, #0]
 80138a0:	9302      	str	r3, [sp, #8]
 80138a2:	2301      	movs	r3, #1
 80138a4:	9301      	str	r3, [sp, #4]
 80138a6:	2300      	movs	r3, #0
 80138a8:	9300      	str	r3, [sp, #0]
 80138aa:	23ff      	movs	r3, #255	; 0xff
 80138ac:	2200      	movs	r2, #0
 80138ae:	69f9      	ldr	r1, [r7, #28]
 80138b0:	6878      	ldr	r0, [r7, #4]
 80138b2:	f000 fa75 	bl	8013da0 <ip4_output_if>
 80138b6:	4603      	mov	r3, r0
 80138b8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80138ba:	e001      	b.n	80138c0 <icmp_input+0x1b8>
      break;
 80138bc:	bf00      	nop
 80138be:	e000      	b.n	80138c2 <icmp_input+0x1ba>
      break;
 80138c0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80138c2:	6878      	ldr	r0, [r7, #4]
 80138c4:	f7f8 f90c 	bl	800bae0 <pbuf_free>
  return;
 80138c8:	e013      	b.n	80138f2 <icmp_input+0x1ea>
    goto lenerr;
 80138ca:	bf00      	nop
 80138cc:	e002      	b.n	80138d4 <icmp_input+0x1cc>
    goto lenerr;
 80138ce:	bf00      	nop
 80138d0:	e000      	b.n	80138d4 <icmp_input+0x1cc>
        goto lenerr;
 80138d2:	bf00      	nop
lenerr:
  pbuf_free(p);
 80138d4:	6878      	ldr	r0, [r7, #4]
 80138d6:	f7f8 f903 	bl	800bae0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80138da:	e00a      	b.n	80138f2 <icmp_input+0x1ea>
        goto icmperr;
 80138dc:	bf00      	nop
 80138de:	e004      	b.n	80138ea <icmp_input+0x1e2>
        goto icmperr;
 80138e0:	bf00      	nop
 80138e2:	e002      	b.n	80138ea <icmp_input+0x1e2>
          goto icmperr;
 80138e4:	bf00      	nop
 80138e6:	e000      	b.n	80138ea <icmp_input+0x1e2>
          goto icmperr;
 80138e8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80138ea:	6878      	ldr	r0, [r7, #4]
 80138ec:	f7f8 f8f8 	bl	800bae0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80138f0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80138f2:	3728      	adds	r7, #40	; 0x28
 80138f4:	46bd      	mov	sp, r7
 80138f6:	bd80      	pop	{r7, pc}
 80138f8:	20007404 	.word	0x20007404
 80138fc:	20007418 	.word	0x20007418
 8013900:	0801985c 	.word	0x0801985c
 8013904:	08019894 	.word	0x08019894
 8013908:	080198cc 	.word	0x080198cc
 801390c:	080198f4 	.word	0x080198f4

08013910 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8013910:	b580      	push	{r7, lr}
 8013912:	b082      	sub	sp, #8
 8013914:	af00      	add	r7, sp, #0
 8013916:	6078      	str	r0, [r7, #4]
 8013918:	460b      	mov	r3, r1
 801391a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801391c:	78fb      	ldrb	r3, [r7, #3]
 801391e:	461a      	mov	r2, r3
 8013920:	2103      	movs	r1, #3
 8013922:	6878      	ldr	r0, [r7, #4]
 8013924:	f000 f814 	bl	8013950 <icmp_send_response>
}
 8013928:	bf00      	nop
 801392a:	3708      	adds	r7, #8
 801392c:	46bd      	mov	sp, r7
 801392e:	bd80      	pop	{r7, pc}

08013930 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8013930:	b580      	push	{r7, lr}
 8013932:	b082      	sub	sp, #8
 8013934:	af00      	add	r7, sp, #0
 8013936:	6078      	str	r0, [r7, #4]
 8013938:	460b      	mov	r3, r1
 801393a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801393c:	78fb      	ldrb	r3, [r7, #3]
 801393e:	461a      	mov	r2, r3
 8013940:	210b      	movs	r1, #11
 8013942:	6878      	ldr	r0, [r7, #4]
 8013944:	f000 f804 	bl	8013950 <icmp_send_response>
}
 8013948:	bf00      	nop
 801394a:	3708      	adds	r7, #8
 801394c:	46bd      	mov	sp, r7
 801394e:	bd80      	pop	{r7, pc}

08013950 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013950:	b580      	push	{r7, lr}
 8013952:	b08c      	sub	sp, #48	; 0x30
 8013954:	af04      	add	r7, sp, #16
 8013956:	6078      	str	r0, [r7, #4]
 8013958:	460b      	mov	r3, r1
 801395a:	70fb      	strb	r3, [r7, #3]
 801395c:	4613      	mov	r3, r2
 801395e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013960:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013964:	2124      	movs	r1, #36	; 0x24
 8013966:	2022      	movs	r0, #34	; 0x22
 8013968:	f7f7 fdd6 	bl	800b518 <pbuf_alloc>
 801396c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801396e:	69fb      	ldr	r3, [r7, #28]
 8013970:	2b00      	cmp	r3, #0
 8013972:	d04c      	beq.n	8013a0e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8013974:	69fb      	ldr	r3, [r7, #28]
 8013976:	895b      	ldrh	r3, [r3, #10]
 8013978:	2b23      	cmp	r3, #35	; 0x23
 801397a:	d806      	bhi.n	801398a <icmp_send_response+0x3a>
 801397c:	4b26      	ldr	r3, [pc, #152]	; (8013a18 <icmp_send_response+0xc8>)
 801397e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8013982:	4926      	ldr	r1, [pc, #152]	; (8013a1c <icmp_send_response+0xcc>)
 8013984:	4826      	ldr	r0, [pc, #152]	; (8013a20 <icmp_send_response+0xd0>)
 8013986:	f001 fcd5 	bl	8015334 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	685b      	ldr	r3, [r3, #4]
 801398e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8013990:	69fb      	ldr	r3, [r7, #28]
 8013992:	685b      	ldr	r3, [r3, #4]
 8013994:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8013996:	697b      	ldr	r3, [r7, #20]
 8013998:	78fa      	ldrb	r2, [r7, #3]
 801399a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801399c:	697b      	ldr	r3, [r7, #20]
 801399e:	78ba      	ldrb	r2, [r7, #2]
 80139a0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80139a2:	697b      	ldr	r3, [r7, #20]
 80139a4:	2200      	movs	r2, #0
 80139a6:	711a      	strb	r2, [r3, #4]
 80139a8:	2200      	movs	r2, #0
 80139aa:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80139ac:	697b      	ldr	r3, [r7, #20]
 80139ae:	2200      	movs	r2, #0
 80139b0:	719a      	strb	r2, [r3, #6]
 80139b2:	2200      	movs	r2, #0
 80139b4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80139b6:	69fb      	ldr	r3, [r7, #28]
 80139b8:	685b      	ldr	r3, [r3, #4]
 80139ba:	f103 0008 	add.w	r0, r3, #8
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	685b      	ldr	r3, [r3, #4]
 80139c2:	221c      	movs	r2, #28
 80139c4:	4619      	mov	r1, r3
 80139c6:	f001 fc85 	bl	80152d4 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80139ca:	69bb      	ldr	r3, [r7, #24]
 80139cc:	68db      	ldr	r3, [r3, #12]
 80139ce:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80139d0:	f107 030c 	add.w	r3, r7, #12
 80139d4:	4618      	mov	r0, r3
 80139d6:	f000 f825 	bl	8013a24 <ip4_route>
 80139da:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80139dc:	693b      	ldr	r3, [r7, #16]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d011      	beq.n	8013a06 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80139e2:	697b      	ldr	r3, [r7, #20]
 80139e4:	2200      	movs	r2, #0
 80139e6:	709a      	strb	r2, [r3, #2]
 80139e8:	2200      	movs	r2, #0
 80139ea:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80139ec:	f107 020c 	add.w	r2, r7, #12
 80139f0:	693b      	ldr	r3, [r7, #16]
 80139f2:	9302      	str	r3, [sp, #8]
 80139f4:	2301      	movs	r3, #1
 80139f6:	9301      	str	r3, [sp, #4]
 80139f8:	2300      	movs	r3, #0
 80139fa:	9300      	str	r3, [sp, #0]
 80139fc:	23ff      	movs	r3, #255	; 0xff
 80139fe:	2100      	movs	r1, #0
 8013a00:	69f8      	ldr	r0, [r7, #28]
 8013a02:	f000 f9cd 	bl	8013da0 <ip4_output_if>
  }
  pbuf_free(q);
 8013a06:	69f8      	ldr	r0, [r7, #28]
 8013a08:	f7f8 f86a 	bl	800bae0 <pbuf_free>
 8013a0c:	e000      	b.n	8013a10 <icmp_send_response+0xc0>
    return;
 8013a0e:	bf00      	nop
}
 8013a10:	3720      	adds	r7, #32
 8013a12:	46bd      	mov	sp, r7
 8013a14:	bd80      	pop	{r7, pc}
 8013a16:	bf00      	nop
 8013a18:	0801985c 	.word	0x0801985c
 8013a1c:	08019928 	.word	0x08019928
 8013a20:	080198cc 	.word	0x080198cc

08013a24 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8013a24:	b480      	push	{r7}
 8013a26:	b085      	sub	sp, #20
 8013a28:	af00      	add	r7, sp, #0
 8013a2a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8013a2c:	4b33      	ldr	r3, [pc, #204]	; (8013afc <ip4_route+0xd8>)
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	60fb      	str	r3, [r7, #12]
 8013a32:	e036      	b.n	8013aa2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013a3a:	f003 0301 	and.w	r3, r3, #1
 8013a3e:	b2db      	uxtb	r3, r3
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d02b      	beq.n	8013a9c <ip4_route+0x78>
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013a4a:	089b      	lsrs	r3, r3, #2
 8013a4c:	f003 0301 	and.w	r3, r3, #1
 8013a50:	b2db      	uxtb	r3, r3
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d022      	beq.n	8013a9c <ip4_route+0x78>
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	3304      	adds	r3, #4
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d01d      	beq.n	8013a9c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	681a      	ldr	r2, [r3, #0]
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	3304      	adds	r3, #4
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	405a      	eors	r2, r3
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	3308      	adds	r3, #8
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	4013      	ands	r3, r2
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d101      	bne.n	8013a7c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	e038      	b.n	8013aee <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013a82:	f003 0302 	and.w	r3, r3, #2
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d108      	bne.n	8013a9c <ip4_route+0x78>
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	681a      	ldr	r2, [r3, #0]
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	330c      	adds	r3, #12
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	429a      	cmp	r2, r3
 8013a96:	d101      	bne.n	8013a9c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	e028      	b.n	8013aee <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	60fb      	str	r3, [r7, #12]
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d1c5      	bne.n	8013a34 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013aa8:	4b15      	ldr	r3, [pc, #84]	; (8013b00 <ip4_route+0xdc>)
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d01a      	beq.n	8013ae6 <ip4_route+0xc2>
 8013ab0:	4b13      	ldr	r3, [pc, #76]	; (8013b00 <ip4_route+0xdc>)
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013ab8:	f003 0301 	and.w	r3, r3, #1
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d012      	beq.n	8013ae6 <ip4_route+0xc2>
 8013ac0:	4b0f      	ldr	r3, [pc, #60]	; (8013b00 <ip4_route+0xdc>)
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013ac8:	f003 0304 	and.w	r3, r3, #4
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d00a      	beq.n	8013ae6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013ad0:	4b0b      	ldr	r3, [pc, #44]	; (8013b00 <ip4_route+0xdc>)
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	3304      	adds	r3, #4
 8013ad6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d004      	beq.n	8013ae6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	b2db      	uxtb	r3, r3
 8013ae2:	2b7f      	cmp	r3, #127	; 0x7f
 8013ae4:	d101      	bne.n	8013aea <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8013ae6:	2300      	movs	r3, #0
 8013ae8:	e001      	b.n	8013aee <ip4_route+0xca>
  }

  return netif_default;
 8013aea:	4b05      	ldr	r3, [pc, #20]	; (8013b00 <ip4_route+0xdc>)
 8013aec:	681b      	ldr	r3, [r3, #0]
}
 8013aee:	4618      	mov	r0, r3
 8013af0:	3714      	adds	r7, #20
 8013af2:	46bd      	mov	sp, r7
 8013af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af8:	4770      	bx	lr
 8013afa:	bf00      	nop
 8013afc:	2000ab08 	.word	0x2000ab08
 8013b00:	2000ab0c 	.word	0x2000ab0c

08013b04 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8013b04:	b580      	push	{r7, lr}
 8013b06:	b082      	sub	sp, #8
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013b12:	f003 0301 	and.w	r3, r3, #1
 8013b16:	b2db      	uxtb	r3, r3
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d016      	beq.n	8013b4a <ip4_input_accept+0x46>
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	3304      	adds	r3, #4
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d011      	beq.n	8013b4a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013b26:	4b0b      	ldr	r3, [pc, #44]	; (8013b54 <ip4_input_accept+0x50>)
 8013b28:	695a      	ldr	r2, [r3, #20]
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	3304      	adds	r3, #4
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	429a      	cmp	r2, r3
 8013b32:	d008      	beq.n	8013b46 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8013b34:	4b07      	ldr	r3, [pc, #28]	; (8013b54 <ip4_input_accept+0x50>)
 8013b36:	695b      	ldr	r3, [r3, #20]
 8013b38:	6879      	ldr	r1, [r7, #4]
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	f000 fa08 	bl	8013f50 <ip4_addr_isbroadcast_u32>
 8013b40:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d001      	beq.n	8013b4a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8013b46:	2301      	movs	r3, #1
 8013b48:	e000      	b.n	8013b4c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8013b4a:	2300      	movs	r3, #0
}
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	3708      	adds	r7, #8
 8013b50:	46bd      	mov	sp, r7
 8013b52:	bd80      	pop	{r7, pc}
 8013b54:	20007404 	.word	0x20007404

08013b58 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8013b58:	b580      	push	{r7, lr}
 8013b5a:	b086      	sub	sp, #24
 8013b5c:	af00      	add	r7, sp, #0
 8013b5e:	6078      	str	r0, [r7, #4]
 8013b60:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	685b      	ldr	r3, [r3, #4]
 8013b66:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8013b68:	697b      	ldr	r3, [r7, #20]
 8013b6a:	781b      	ldrb	r3, [r3, #0]
 8013b6c:	091b      	lsrs	r3, r3, #4
 8013b6e:	b2db      	uxtb	r3, r3
 8013b70:	2b04      	cmp	r3, #4
 8013b72:	d004      	beq.n	8013b7e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8013b74:	6878      	ldr	r0, [r7, #4]
 8013b76:	f7f7 ffb3 	bl	800bae0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8013b7a:	2300      	movs	r3, #0
 8013b7c:	e107      	b.n	8013d8e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8013b7e:	697b      	ldr	r3, [r7, #20]
 8013b80:	781b      	ldrb	r3, [r3, #0]
 8013b82:	f003 030f 	and.w	r3, r3, #15
 8013b86:	b2db      	uxtb	r3, r3
 8013b88:	009b      	lsls	r3, r3, #2
 8013b8a:	b2db      	uxtb	r3, r3
 8013b8c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013b8e:	697b      	ldr	r3, [r7, #20]
 8013b90:	885b      	ldrh	r3, [r3, #2]
 8013b92:	b29b      	uxth	r3, r3
 8013b94:	4618      	mov	r0, r3
 8013b96:	f7f6 fbcf 	bl	800a338 <lwip_htons>
 8013b9a:	4603      	mov	r3, r0
 8013b9c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	891b      	ldrh	r3, [r3, #8]
 8013ba2:	89ba      	ldrh	r2, [r7, #12]
 8013ba4:	429a      	cmp	r2, r3
 8013ba6:	d204      	bcs.n	8013bb2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8013ba8:	89bb      	ldrh	r3, [r7, #12]
 8013baa:	4619      	mov	r1, r3
 8013bac:	6878      	ldr	r0, [r7, #4]
 8013bae:	f7f7 fe11 	bl	800b7d4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	895b      	ldrh	r3, [r3, #10]
 8013bb6:	89fa      	ldrh	r2, [r7, #14]
 8013bb8:	429a      	cmp	r2, r3
 8013bba:	d807      	bhi.n	8013bcc <ip4_input+0x74>
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	891b      	ldrh	r3, [r3, #8]
 8013bc0:	89ba      	ldrh	r2, [r7, #12]
 8013bc2:	429a      	cmp	r2, r3
 8013bc4:	d802      	bhi.n	8013bcc <ip4_input+0x74>
 8013bc6:	89fb      	ldrh	r3, [r7, #14]
 8013bc8:	2b13      	cmp	r3, #19
 8013bca:	d804      	bhi.n	8013bd6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8013bcc:	6878      	ldr	r0, [r7, #4]
 8013bce:	f7f7 ff87 	bl	800bae0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8013bd2:	2300      	movs	r3, #0
 8013bd4:	e0db      	b.n	8013d8e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8013bd6:	697b      	ldr	r3, [r7, #20]
 8013bd8:	691b      	ldr	r3, [r3, #16]
 8013bda:	4a6f      	ldr	r2, [pc, #444]	; (8013d98 <ip4_input+0x240>)
 8013bdc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8013bde:	697b      	ldr	r3, [r7, #20]
 8013be0:	68db      	ldr	r3, [r3, #12]
 8013be2:	4a6d      	ldr	r2, [pc, #436]	; (8013d98 <ip4_input+0x240>)
 8013be4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013be6:	4b6c      	ldr	r3, [pc, #432]	; (8013d98 <ip4_input+0x240>)
 8013be8:	695b      	ldr	r3, [r3, #20]
 8013bea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013bee:	2be0      	cmp	r3, #224	; 0xe0
 8013bf0:	d112      	bne.n	8013c18 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8013bf2:	683b      	ldr	r3, [r7, #0]
 8013bf4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013bf8:	f003 0301 	and.w	r3, r3, #1
 8013bfc:	b2db      	uxtb	r3, r3
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d007      	beq.n	8013c12 <ip4_input+0xba>
 8013c02:	683b      	ldr	r3, [r7, #0]
 8013c04:	3304      	adds	r3, #4
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d002      	beq.n	8013c12 <ip4_input+0xba>
      netif = inp;
 8013c0c:	683b      	ldr	r3, [r7, #0]
 8013c0e:	613b      	str	r3, [r7, #16]
 8013c10:	e02a      	b.n	8013c68 <ip4_input+0x110>
    } else {
      netif = NULL;
 8013c12:	2300      	movs	r3, #0
 8013c14:	613b      	str	r3, [r7, #16]
 8013c16:	e027      	b.n	8013c68 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8013c18:	6838      	ldr	r0, [r7, #0]
 8013c1a:	f7ff ff73 	bl	8013b04 <ip4_input_accept>
 8013c1e:	4603      	mov	r3, r0
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d002      	beq.n	8013c2a <ip4_input+0xd2>
      netif = inp;
 8013c24:	683b      	ldr	r3, [r7, #0]
 8013c26:	613b      	str	r3, [r7, #16]
 8013c28:	e01e      	b.n	8013c68 <ip4_input+0x110>
    } else {
      netif = NULL;
 8013c2a:	2300      	movs	r3, #0
 8013c2c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8013c2e:	4b5a      	ldr	r3, [pc, #360]	; (8013d98 <ip4_input+0x240>)
 8013c30:	695b      	ldr	r3, [r3, #20]
 8013c32:	b2db      	uxtb	r3, r3
 8013c34:	2b7f      	cmp	r3, #127	; 0x7f
 8013c36:	d017      	beq.n	8013c68 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8013c38:	4b58      	ldr	r3, [pc, #352]	; (8013d9c <ip4_input+0x244>)
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	613b      	str	r3, [r7, #16]
 8013c3e:	e00e      	b.n	8013c5e <ip4_input+0x106>
          if (netif == inp) {
 8013c40:	693a      	ldr	r2, [r7, #16]
 8013c42:	683b      	ldr	r3, [r7, #0]
 8013c44:	429a      	cmp	r2, r3
 8013c46:	d006      	beq.n	8013c56 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8013c48:	6938      	ldr	r0, [r7, #16]
 8013c4a:	f7ff ff5b 	bl	8013b04 <ip4_input_accept>
 8013c4e:	4603      	mov	r3, r0
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d108      	bne.n	8013c66 <ip4_input+0x10e>
 8013c54:	e000      	b.n	8013c58 <ip4_input+0x100>
            continue;
 8013c56:	bf00      	nop
        NETIF_FOREACH(netif) {
 8013c58:	693b      	ldr	r3, [r7, #16]
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	613b      	str	r3, [r7, #16]
 8013c5e:	693b      	ldr	r3, [r7, #16]
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d1ed      	bne.n	8013c40 <ip4_input+0xe8>
 8013c64:	e000      	b.n	8013c68 <ip4_input+0x110>
            break;
 8013c66:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013c68:	4b4b      	ldr	r3, [pc, #300]	; (8013d98 <ip4_input+0x240>)
 8013c6a:	691b      	ldr	r3, [r3, #16]
 8013c6c:	6839      	ldr	r1, [r7, #0]
 8013c6e:	4618      	mov	r0, r3
 8013c70:	f000 f96e 	bl	8013f50 <ip4_addr_isbroadcast_u32>
 8013c74:	4603      	mov	r3, r0
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d105      	bne.n	8013c86 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8013c7a:	4b47      	ldr	r3, [pc, #284]	; (8013d98 <ip4_input+0x240>)
 8013c7c:	691b      	ldr	r3, [r3, #16]
 8013c7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013c82:	2be0      	cmp	r3, #224	; 0xe0
 8013c84:	d104      	bne.n	8013c90 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8013c86:	6878      	ldr	r0, [r7, #4]
 8013c88:	f7f7 ff2a 	bl	800bae0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	e07e      	b.n	8013d8e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013c90:	693b      	ldr	r3, [r7, #16]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d104      	bne.n	8013ca0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8013c96:	6878      	ldr	r0, [r7, #4]
 8013c98:	f7f7 ff22 	bl	800bae0 <pbuf_free>
    return ERR_OK;
 8013c9c:	2300      	movs	r3, #0
 8013c9e:	e076      	b.n	8013d8e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013ca0:	697b      	ldr	r3, [r7, #20]
 8013ca2:	88db      	ldrh	r3, [r3, #6]
 8013ca4:	b29b      	uxth	r3, r3
 8013ca6:	461a      	mov	r2, r3
 8013ca8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8013cac:	4013      	ands	r3, r2
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d00b      	beq.n	8013cca <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8013cb2:	6878      	ldr	r0, [r7, #4]
 8013cb4:	f000 fdbc 	bl	8014830 <ip4_reass>
 8013cb8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d101      	bne.n	8013cc4 <ip4_input+0x16c>
      return ERR_OK;
 8013cc0:	2300      	movs	r3, #0
 8013cc2:	e064      	b.n	8013d8e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	685b      	ldr	r3, [r3, #4]
 8013cc8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8013cca:	4a33      	ldr	r2, [pc, #204]	; (8013d98 <ip4_input+0x240>)
 8013ccc:	693b      	ldr	r3, [r7, #16]
 8013cce:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013cd0:	4a31      	ldr	r2, [pc, #196]	; (8013d98 <ip4_input+0x240>)
 8013cd2:	683b      	ldr	r3, [r7, #0]
 8013cd4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8013cd6:	4a30      	ldr	r2, [pc, #192]	; (8013d98 <ip4_input+0x240>)
 8013cd8:	697b      	ldr	r3, [r7, #20]
 8013cda:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8013cdc:	697b      	ldr	r3, [r7, #20]
 8013cde:	781b      	ldrb	r3, [r3, #0]
 8013ce0:	f003 030f 	and.w	r3, r3, #15
 8013ce4:	b2db      	uxtb	r3, r3
 8013ce6:	009b      	lsls	r3, r3, #2
 8013ce8:	b2db      	uxtb	r3, r3
 8013cea:	b29a      	uxth	r2, r3
 8013cec:	4b2a      	ldr	r3, [pc, #168]	; (8013d98 <ip4_input+0x240>)
 8013cee:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013cf0:	89fb      	ldrh	r3, [r7, #14]
 8013cf2:	4619      	mov	r1, r3
 8013cf4:	6878      	ldr	r0, [r7, #4]
 8013cf6:	f7f7 fe6d 	bl	800b9d4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8013cfa:	697b      	ldr	r3, [r7, #20]
 8013cfc:	7a5b      	ldrb	r3, [r3, #9]
 8013cfe:	2b11      	cmp	r3, #17
 8013d00:	d006      	beq.n	8013d10 <ip4_input+0x1b8>
 8013d02:	2b11      	cmp	r3, #17
 8013d04:	dc13      	bgt.n	8013d2e <ip4_input+0x1d6>
 8013d06:	2b01      	cmp	r3, #1
 8013d08:	d00c      	beq.n	8013d24 <ip4_input+0x1cc>
 8013d0a:	2b06      	cmp	r3, #6
 8013d0c:	d005      	beq.n	8013d1a <ip4_input+0x1c2>
 8013d0e:	e00e      	b.n	8013d2e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8013d10:	6839      	ldr	r1, [r7, #0]
 8013d12:	6878      	ldr	r0, [r7, #4]
 8013d14:	f7fe fc68 	bl	80125e8 <udp_input>
        break;
 8013d18:	e026      	b.n	8013d68 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8013d1a:	6839      	ldr	r1, [r7, #0]
 8013d1c:	6878      	ldr	r0, [r7, #4]
 8013d1e:	f7fa f823 	bl	800dd68 <tcp_input>
        break;
 8013d22:	e021      	b.n	8013d68 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8013d24:	6839      	ldr	r1, [r7, #0]
 8013d26:	6878      	ldr	r0, [r7, #4]
 8013d28:	f7ff fcee 	bl	8013708 <icmp_input>
        break;
 8013d2c:	e01c      	b.n	8013d68 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013d2e:	4b1a      	ldr	r3, [pc, #104]	; (8013d98 <ip4_input+0x240>)
 8013d30:	695b      	ldr	r3, [r3, #20]
 8013d32:	6939      	ldr	r1, [r7, #16]
 8013d34:	4618      	mov	r0, r3
 8013d36:	f000 f90b 	bl	8013f50 <ip4_addr_isbroadcast_u32>
 8013d3a:	4603      	mov	r3, r0
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d10f      	bne.n	8013d60 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013d40:	4b15      	ldr	r3, [pc, #84]	; (8013d98 <ip4_input+0x240>)
 8013d42:	695b      	ldr	r3, [r3, #20]
 8013d44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013d48:	2be0      	cmp	r3, #224	; 0xe0
 8013d4a:	d009      	beq.n	8013d60 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8013d4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013d50:	4619      	mov	r1, r3
 8013d52:	6878      	ldr	r0, [r7, #4]
 8013d54:	f7f7 feb1 	bl	800baba <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013d58:	2102      	movs	r1, #2
 8013d5a:	6878      	ldr	r0, [r7, #4]
 8013d5c:	f7ff fdd8 	bl	8013910 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8013d60:	6878      	ldr	r0, [r7, #4]
 8013d62:	f7f7 febd 	bl	800bae0 <pbuf_free>
        break;
 8013d66:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8013d68:	4b0b      	ldr	r3, [pc, #44]	; (8013d98 <ip4_input+0x240>)
 8013d6a:	2200      	movs	r2, #0
 8013d6c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8013d6e:	4b0a      	ldr	r3, [pc, #40]	; (8013d98 <ip4_input+0x240>)
 8013d70:	2200      	movs	r2, #0
 8013d72:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8013d74:	4b08      	ldr	r3, [pc, #32]	; (8013d98 <ip4_input+0x240>)
 8013d76:	2200      	movs	r2, #0
 8013d78:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8013d7a:	4b07      	ldr	r3, [pc, #28]	; (8013d98 <ip4_input+0x240>)
 8013d7c:	2200      	movs	r2, #0
 8013d7e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013d80:	4b05      	ldr	r3, [pc, #20]	; (8013d98 <ip4_input+0x240>)
 8013d82:	2200      	movs	r2, #0
 8013d84:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8013d86:	4b04      	ldr	r3, [pc, #16]	; (8013d98 <ip4_input+0x240>)
 8013d88:	2200      	movs	r2, #0
 8013d8a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013d8c:	2300      	movs	r3, #0
}
 8013d8e:	4618      	mov	r0, r3
 8013d90:	3718      	adds	r7, #24
 8013d92:	46bd      	mov	sp, r7
 8013d94:	bd80      	pop	{r7, pc}
 8013d96:	bf00      	nop
 8013d98:	20007404 	.word	0x20007404
 8013d9c:	2000ab08 	.word	0x2000ab08

08013da0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013da0:	b580      	push	{r7, lr}
 8013da2:	b08a      	sub	sp, #40	; 0x28
 8013da4:	af04      	add	r7, sp, #16
 8013da6:	60f8      	str	r0, [r7, #12]
 8013da8:	60b9      	str	r1, [r7, #8]
 8013daa:	607a      	str	r2, [r7, #4]
 8013dac:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013dae:	68bb      	ldr	r3, [r7, #8]
 8013db0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d009      	beq.n	8013dcc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013db8:	68bb      	ldr	r3, [r7, #8]
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d003      	beq.n	8013dc6 <ip4_output_if+0x26>
 8013dbe:	68bb      	ldr	r3, [r7, #8]
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d102      	bne.n	8013dcc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8013dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dc8:	3304      	adds	r3, #4
 8013dca:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013dcc:	78fa      	ldrb	r2, [r7, #3]
 8013dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dd0:	9302      	str	r3, [sp, #8]
 8013dd2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013dd6:	9301      	str	r3, [sp, #4]
 8013dd8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013ddc:	9300      	str	r3, [sp, #0]
 8013dde:	4613      	mov	r3, r2
 8013de0:	687a      	ldr	r2, [r7, #4]
 8013de2:	6979      	ldr	r1, [r7, #20]
 8013de4:	68f8      	ldr	r0, [r7, #12]
 8013de6:	f000 f805 	bl	8013df4 <ip4_output_if_src>
 8013dea:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013dec:	4618      	mov	r0, r3
 8013dee:	3718      	adds	r7, #24
 8013df0:	46bd      	mov	sp, r7
 8013df2:	bd80      	pop	{r7, pc}

08013df4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8013df4:	b580      	push	{r7, lr}
 8013df6:	b088      	sub	sp, #32
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	60f8      	str	r0, [r7, #12]
 8013dfc:	60b9      	str	r1, [r7, #8]
 8013dfe:	607a      	str	r2, [r7, #4]
 8013e00:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	7b9b      	ldrb	r3, [r3, #14]
 8013e06:	2b01      	cmp	r3, #1
 8013e08:	d006      	beq.n	8013e18 <ip4_output_if_src+0x24>
 8013e0a:	4b4b      	ldr	r3, [pc, #300]	; (8013f38 <ip4_output_if_src+0x144>)
 8013e0c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8013e10:	494a      	ldr	r1, [pc, #296]	; (8013f3c <ip4_output_if_src+0x148>)
 8013e12:	484b      	ldr	r0, [pc, #300]	; (8013f40 <ip4_output_if_src+0x14c>)
 8013e14:	f001 fa8e 	bl	8015334 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d060      	beq.n	8013ee0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8013e1e:	2314      	movs	r3, #20
 8013e20:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8013e22:	2114      	movs	r1, #20
 8013e24:	68f8      	ldr	r0, [r7, #12]
 8013e26:	f7f7 fdc5 	bl	800b9b4 <pbuf_add_header>
 8013e2a:	4603      	mov	r3, r0
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d002      	beq.n	8013e36 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013e30:	f06f 0301 	mvn.w	r3, #1
 8013e34:	e07c      	b.n	8013f30 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	685b      	ldr	r3, [r3, #4]
 8013e3a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013e3c:	68fb      	ldr	r3, [r7, #12]
 8013e3e:	895b      	ldrh	r3, [r3, #10]
 8013e40:	2b13      	cmp	r3, #19
 8013e42:	d806      	bhi.n	8013e52 <ip4_output_if_src+0x5e>
 8013e44:	4b3c      	ldr	r3, [pc, #240]	; (8013f38 <ip4_output_if_src+0x144>)
 8013e46:	f44f 7262 	mov.w	r2, #904	; 0x388
 8013e4a:	493e      	ldr	r1, [pc, #248]	; (8013f44 <ip4_output_if_src+0x150>)
 8013e4c:	483c      	ldr	r0, [pc, #240]	; (8013f40 <ip4_output_if_src+0x14c>)
 8013e4e:	f001 fa71 	bl	8015334 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8013e52:	69fb      	ldr	r3, [r7, #28]
 8013e54:	78fa      	ldrb	r2, [r7, #3]
 8013e56:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013e58:	69fb      	ldr	r3, [r7, #28]
 8013e5a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8013e5e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	681a      	ldr	r2, [r3, #0]
 8013e64:	69fb      	ldr	r3, [r7, #28]
 8013e66:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013e68:	8b7b      	ldrh	r3, [r7, #26]
 8013e6a:	089b      	lsrs	r3, r3, #2
 8013e6c:	b29b      	uxth	r3, r3
 8013e6e:	b2db      	uxtb	r3, r3
 8013e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013e74:	b2da      	uxtb	r2, r3
 8013e76:	69fb      	ldr	r3, [r7, #28]
 8013e78:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013e7a:	69fb      	ldr	r3, [r7, #28]
 8013e7c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013e80:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	891b      	ldrh	r3, [r3, #8]
 8013e86:	4618      	mov	r0, r3
 8013e88:	f7f6 fa56 	bl	800a338 <lwip_htons>
 8013e8c:	4603      	mov	r3, r0
 8013e8e:	461a      	mov	r2, r3
 8013e90:	69fb      	ldr	r3, [r7, #28]
 8013e92:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8013e94:	69fb      	ldr	r3, [r7, #28]
 8013e96:	2200      	movs	r2, #0
 8013e98:	719a      	strb	r2, [r3, #6]
 8013e9a:	2200      	movs	r2, #0
 8013e9c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013e9e:	4b2a      	ldr	r3, [pc, #168]	; (8013f48 <ip4_output_if_src+0x154>)
 8013ea0:	881b      	ldrh	r3, [r3, #0]
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	f7f6 fa48 	bl	800a338 <lwip_htons>
 8013ea8:	4603      	mov	r3, r0
 8013eaa:	461a      	mov	r2, r3
 8013eac:	69fb      	ldr	r3, [r7, #28]
 8013eae:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013eb0:	4b25      	ldr	r3, [pc, #148]	; (8013f48 <ip4_output_if_src+0x154>)
 8013eb2:	881b      	ldrh	r3, [r3, #0]
 8013eb4:	3301      	adds	r3, #1
 8013eb6:	b29a      	uxth	r2, r3
 8013eb8:	4b23      	ldr	r3, [pc, #140]	; (8013f48 <ip4_output_if_src+0x154>)
 8013eba:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013ebc:	68bb      	ldr	r3, [r7, #8]
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d104      	bne.n	8013ecc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8013ec2:	4b22      	ldr	r3, [pc, #136]	; (8013f4c <ip4_output_if_src+0x158>)
 8013ec4:	681a      	ldr	r2, [r3, #0]
 8013ec6:	69fb      	ldr	r3, [r7, #28]
 8013ec8:	60da      	str	r2, [r3, #12]
 8013eca:	e003      	b.n	8013ed4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013ecc:	68bb      	ldr	r3, [r7, #8]
 8013ece:	681a      	ldr	r2, [r3, #0]
 8013ed0:	69fb      	ldr	r3, [r7, #28]
 8013ed2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013ed4:	69fb      	ldr	r3, [r7, #28]
 8013ed6:	2200      	movs	r2, #0
 8013ed8:	729a      	strb	r2, [r3, #10]
 8013eda:	2200      	movs	r2, #0
 8013edc:	72da      	strb	r2, [r3, #11]
 8013ede:	e00f      	b.n	8013f00 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	895b      	ldrh	r3, [r3, #10]
 8013ee4:	2b13      	cmp	r3, #19
 8013ee6:	d802      	bhi.n	8013eee <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013ee8:	f06f 0301 	mvn.w	r3, #1
 8013eec:	e020      	b.n	8013f30 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	685b      	ldr	r3, [r3, #4]
 8013ef2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8013ef4:	69fb      	ldr	r3, [r7, #28]
 8013ef6:	691b      	ldr	r3, [r3, #16]
 8013ef8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013efa:	f107 0314 	add.w	r3, r7, #20
 8013efe:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f02:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d00c      	beq.n	8013f22 <ip4_output_if_src+0x12e>
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	891a      	ldrh	r2, [r3, #8]
 8013f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f0e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013f10:	429a      	cmp	r2, r3
 8013f12:	d906      	bls.n	8013f22 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8013f14:	687a      	ldr	r2, [r7, #4]
 8013f16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013f18:	68f8      	ldr	r0, [r7, #12]
 8013f1a:	f000 fe77 	bl	8014c0c <ip4_frag>
 8013f1e:	4603      	mov	r3, r0
 8013f20:	e006      	b.n	8013f30 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8013f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f24:	695b      	ldr	r3, [r3, #20]
 8013f26:	687a      	ldr	r2, [r7, #4]
 8013f28:	68f9      	ldr	r1, [r7, #12]
 8013f2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013f2c:	4798      	blx	r3
 8013f2e:	4603      	mov	r3, r0
}
 8013f30:	4618      	mov	r0, r3
 8013f32:	3720      	adds	r7, #32
 8013f34:	46bd      	mov	sp, r7
 8013f36:	bd80      	pop	{r7, pc}
 8013f38:	08019954 	.word	0x08019954
 8013f3c:	08019988 	.word	0x08019988
 8013f40:	08019994 	.word	0x08019994
 8013f44:	080199bc 	.word	0x080199bc
 8013f48:	200041d2 	.word	0x200041d2
 8013f4c:	08019e50 	.word	0x08019e50

08013f50 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013f50:	b480      	push	{r7}
 8013f52:	b085      	sub	sp, #20
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	6078      	str	r0, [r7, #4]
 8013f58:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f64:	d002      	beq.n	8013f6c <ip4_addr_isbroadcast_u32+0x1c>
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d101      	bne.n	8013f70 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013f6c:	2301      	movs	r3, #1
 8013f6e:	e02a      	b.n	8013fc6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013f70:	683b      	ldr	r3, [r7, #0]
 8013f72:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013f76:	f003 0302 	and.w	r3, r3, #2
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d101      	bne.n	8013f82 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013f7e:	2300      	movs	r3, #0
 8013f80:	e021      	b.n	8013fc6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8013f82:	683b      	ldr	r3, [r7, #0]
 8013f84:	3304      	adds	r3, #4
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	687a      	ldr	r2, [r7, #4]
 8013f8a:	429a      	cmp	r2, r3
 8013f8c:	d101      	bne.n	8013f92 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013f8e:	2300      	movs	r3, #0
 8013f90:	e019      	b.n	8013fc6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013f92:	68fa      	ldr	r2, [r7, #12]
 8013f94:	683b      	ldr	r3, [r7, #0]
 8013f96:	3304      	adds	r3, #4
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	405a      	eors	r2, r3
 8013f9c:	683b      	ldr	r3, [r7, #0]
 8013f9e:	3308      	adds	r3, #8
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	4013      	ands	r3, r2
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d10d      	bne.n	8013fc4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013fa8:	683b      	ldr	r3, [r7, #0]
 8013faa:	3308      	adds	r3, #8
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	43da      	mvns	r2, r3
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013fb4:	683b      	ldr	r3, [r7, #0]
 8013fb6:	3308      	adds	r3, #8
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013fbc:	429a      	cmp	r2, r3
 8013fbe:	d101      	bne.n	8013fc4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013fc0:	2301      	movs	r3, #1
 8013fc2:	e000      	b.n	8013fc6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013fc4:	2300      	movs	r3, #0
  }
}
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	3714      	adds	r7, #20
 8013fca:	46bd      	mov	sp, r7
 8013fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fd0:	4770      	bx	lr
	...

08013fd4 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8013fd4:	b580      	push	{r7, lr}
 8013fd6:	b08a      	sub	sp, #40	; 0x28
 8013fd8:	af00      	add	r7, sp, #0
 8013fda:	6078      	str	r0, [r7, #4]
 8013fdc:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 8013fde:	f107 030c 	add.w	r3, r7, #12
 8013fe2:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	781b      	ldrb	r3, [r3, #0]
 8013fe8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8013fec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013ff0:	3301      	adds	r3, #1
 8013ff2:	4a89      	ldr	r2, [pc, #548]	; (8014218 <ip4addr_aton+0x244>)
 8013ff4:	4413      	add	r3, r2
 8013ff6:	781b      	ldrb	r3, [r3, #0]
 8013ff8:	f003 0304 	and.w	r3, r3, #4
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d101      	bne.n	8014004 <ip4addr_aton+0x30>
      return 0;
 8014000:	2300      	movs	r3, #0
 8014002:	e105      	b.n	8014210 <ip4addr_aton+0x23c>
    }
    val = 0;
 8014004:	2300      	movs	r3, #0
 8014006:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 8014008:	230a      	movs	r3, #10
 801400a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 801400e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014012:	2b30      	cmp	r3, #48	; 0x30
 8014014:	d11c      	bne.n	8014050 <ip4addr_aton+0x7c>
      c = *++cp;
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	3301      	adds	r3, #1
 801401a:	607b      	str	r3, [r7, #4]
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	781b      	ldrb	r3, [r3, #0]
 8014020:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 8014024:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014028:	2b78      	cmp	r3, #120	; 0x78
 801402a:	d003      	beq.n	8014034 <ip4addr_aton+0x60>
 801402c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014030:	2b58      	cmp	r3, #88	; 0x58
 8014032:	d10a      	bne.n	801404a <ip4addr_aton+0x76>
        base = 16;
 8014034:	2310      	movs	r3, #16
 8014036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	3301      	adds	r3, #1
 801403e:	607b      	str	r3, [r7, #4]
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	781b      	ldrb	r3, [r3, #0]
 8014044:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8014048:	e002      	b.n	8014050 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 801404a:	2308      	movs	r3, #8
 801404c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8014050:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014054:	3301      	adds	r3, #1
 8014056:	4a70      	ldr	r2, [pc, #448]	; (8014218 <ip4addr_aton+0x244>)
 8014058:	4413      	add	r3, r2
 801405a:	781b      	ldrb	r3, [r3, #0]
 801405c:	f003 0304 	and.w	r3, r3, #4
 8014060:	2b00      	cmp	r3, #0
 8014062:	d011      	beq.n	8014088 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 8014064:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801406a:	fb02 f203 	mul.w	r2, r2, r3
 801406e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014072:	4413      	add	r3, r2
 8014074:	3b30      	subs	r3, #48	; 0x30
 8014076:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	3301      	adds	r3, #1
 801407c:	607b      	str	r3, [r7, #4]
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	781b      	ldrb	r3, [r3, #0]
 8014082:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8014086:	e7e3      	b.n	8014050 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8014088:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801408c:	2b10      	cmp	r3, #16
 801408e:	d127      	bne.n	80140e0 <ip4addr_aton+0x10c>
 8014090:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014094:	3301      	adds	r3, #1
 8014096:	4a60      	ldr	r2, [pc, #384]	; (8014218 <ip4addr_aton+0x244>)
 8014098:	4413      	add	r3, r2
 801409a:	781b      	ldrb	r3, [r3, #0]
 801409c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d01d      	beq.n	80140e0 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 80140a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140a6:	011b      	lsls	r3, r3, #4
 80140a8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80140ac:	f102 010a 	add.w	r1, r2, #10
 80140b0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80140b4:	3201      	adds	r2, #1
 80140b6:	4858      	ldr	r0, [pc, #352]	; (8014218 <ip4addr_aton+0x244>)
 80140b8:	4402      	add	r2, r0
 80140ba:	7812      	ldrb	r2, [r2, #0]
 80140bc:	f002 0203 	and.w	r2, r2, #3
 80140c0:	2a02      	cmp	r2, #2
 80140c2:	d101      	bne.n	80140c8 <ip4addr_aton+0xf4>
 80140c4:	2261      	movs	r2, #97	; 0x61
 80140c6:	e000      	b.n	80140ca <ip4addr_aton+0xf6>
 80140c8:	2241      	movs	r2, #65	; 0x41
 80140ca:	1a8a      	subs	r2, r1, r2
 80140cc:	4313      	orrs	r3, r2
 80140ce:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	3301      	adds	r3, #1
 80140d4:	607b      	str	r3, [r7, #4]
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	781b      	ldrb	r3, [r3, #0]
 80140da:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 80140de:	e7b7      	b.n	8014050 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 80140e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80140e4:	2b2e      	cmp	r3, #46	; 0x2e
 80140e6:	d114      	bne.n	8014112 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 80140e8:	f107 030c 	add.w	r3, r7, #12
 80140ec:	330c      	adds	r3, #12
 80140ee:	69fa      	ldr	r2, [r7, #28]
 80140f0:	429a      	cmp	r2, r3
 80140f2:	d301      	bcc.n	80140f8 <ip4addr_aton+0x124>
        return 0;
 80140f4:	2300      	movs	r3, #0
 80140f6:	e08b      	b.n	8014210 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 80140f8:	69fb      	ldr	r3, [r7, #28]
 80140fa:	1d1a      	adds	r2, r3, #4
 80140fc:	61fa      	str	r2, [r7, #28]
 80140fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014100:	601a      	str	r2, [r3, #0]
      c = *++cp;
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	3301      	adds	r3, #1
 8014106:	607b      	str	r3, [r7, #4]
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	781b      	ldrb	r3, [r3, #0]
 801410c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 8014110:	e76c      	b.n	8013fec <ip4addr_aton+0x18>
    } else {
      break;
 8014112:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 8014114:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014118:	2b00      	cmp	r3, #0
 801411a:	d00b      	beq.n	8014134 <ip4addr_aton+0x160>
 801411c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014120:	3301      	adds	r3, #1
 8014122:	4a3d      	ldr	r2, [pc, #244]	; (8014218 <ip4addr_aton+0x244>)
 8014124:	4413      	add	r3, r2
 8014126:	781b      	ldrb	r3, [r3, #0]
 8014128:	f003 0308 	and.w	r3, r3, #8
 801412c:	2b00      	cmp	r3, #0
 801412e:	d101      	bne.n	8014134 <ip4addr_aton+0x160>
    return 0;
 8014130:	2300      	movs	r3, #0
 8014132:	e06d      	b.n	8014210 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8014134:	f107 030c 	add.w	r3, r7, #12
 8014138:	69fa      	ldr	r2, [r7, #28]
 801413a:	1ad3      	subs	r3, r2, r3
 801413c:	109b      	asrs	r3, r3, #2
 801413e:	3301      	adds	r3, #1
 8014140:	2b04      	cmp	r3, #4
 8014142:	d853      	bhi.n	80141ec <ip4addr_aton+0x218>
 8014144:	a201      	add	r2, pc, #4	; (adr r2, 801414c <ip4addr_aton+0x178>)
 8014146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801414a:	bf00      	nop
 801414c:	08014161 	.word	0x08014161
 8014150:	080141fb 	.word	0x080141fb
 8014154:	08014165 	.word	0x08014165
 8014158:	08014187 	.word	0x08014187
 801415c:	080141b5 	.word	0x080141b5

    case 0:
      return 0;       /* initial nondigit */
 8014160:	2300      	movs	r3, #0
 8014162:	e055      	b.n	8014210 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 8014164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014166:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801416a:	d301      	bcc.n	8014170 <ip4addr_aton+0x19c>
        return 0;
 801416c:	2300      	movs	r3, #0
 801416e:	e04f      	b.n	8014210 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	2bff      	cmp	r3, #255	; 0xff
 8014174:	d901      	bls.n	801417a <ip4addr_aton+0x1a6>
        return 0;
 8014176:	2300      	movs	r3, #0
 8014178:	e04a      	b.n	8014210 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 801417a:	68fb      	ldr	r3, [r7, #12]
 801417c:	061b      	lsls	r3, r3, #24
 801417e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014180:	4313      	orrs	r3, r2
 8014182:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8014184:	e03a      	b.n	80141fc <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 8014186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801418c:	d301      	bcc.n	8014192 <ip4addr_aton+0x1be>
        return 0;
 801418e:	2300      	movs	r3, #0
 8014190:	e03e      	b.n	8014210 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	2bff      	cmp	r3, #255	; 0xff
 8014196:	d802      	bhi.n	801419e <ip4addr_aton+0x1ca>
 8014198:	693b      	ldr	r3, [r7, #16]
 801419a:	2bff      	cmp	r3, #255	; 0xff
 801419c:	d901      	bls.n	80141a2 <ip4addr_aton+0x1ce>
        return 0;
 801419e:	2300      	movs	r3, #0
 80141a0:	e036      	b.n	8014210 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	061a      	lsls	r2, r3, #24
 80141a6:	693b      	ldr	r3, [r7, #16]
 80141a8:	041b      	lsls	r3, r3, #16
 80141aa:	4313      	orrs	r3, r2
 80141ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141ae:	4313      	orrs	r3, r2
 80141b0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80141b2:	e023      	b.n	80141fc <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 80141b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141b6:	2bff      	cmp	r3, #255	; 0xff
 80141b8:	d901      	bls.n	80141be <ip4addr_aton+0x1ea>
        return 0;
 80141ba:	2300      	movs	r3, #0
 80141bc:	e028      	b.n	8014210 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 80141be:	68fb      	ldr	r3, [r7, #12]
 80141c0:	2bff      	cmp	r3, #255	; 0xff
 80141c2:	d805      	bhi.n	80141d0 <ip4addr_aton+0x1fc>
 80141c4:	693b      	ldr	r3, [r7, #16]
 80141c6:	2bff      	cmp	r3, #255	; 0xff
 80141c8:	d802      	bhi.n	80141d0 <ip4addr_aton+0x1fc>
 80141ca:	697b      	ldr	r3, [r7, #20]
 80141cc:	2bff      	cmp	r3, #255	; 0xff
 80141ce:	d901      	bls.n	80141d4 <ip4addr_aton+0x200>
        return 0;
 80141d0:	2300      	movs	r3, #0
 80141d2:	e01d      	b.n	8014210 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 80141d4:	68fb      	ldr	r3, [r7, #12]
 80141d6:	061a      	lsls	r2, r3, #24
 80141d8:	693b      	ldr	r3, [r7, #16]
 80141da:	041b      	lsls	r3, r3, #16
 80141dc:	431a      	orrs	r2, r3
 80141de:	697b      	ldr	r3, [r7, #20]
 80141e0:	021b      	lsls	r3, r3, #8
 80141e2:	4313      	orrs	r3, r2
 80141e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141e6:	4313      	orrs	r3, r2
 80141e8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80141ea:	e007      	b.n	80141fc <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 80141ec:	4b0b      	ldr	r3, [pc, #44]	; (801421c <ip4addr_aton+0x248>)
 80141ee:	22f9      	movs	r2, #249	; 0xf9
 80141f0:	490b      	ldr	r1, [pc, #44]	; (8014220 <ip4addr_aton+0x24c>)
 80141f2:	480c      	ldr	r0, [pc, #48]	; (8014224 <ip4addr_aton+0x250>)
 80141f4:	f001 f89e 	bl	8015334 <iprintf>
      break;
 80141f8:	e000      	b.n	80141fc <ip4addr_aton+0x228>
      break;
 80141fa:	bf00      	nop
  }
  if (addr) {
 80141fc:	683b      	ldr	r3, [r7, #0]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d005      	beq.n	801420e <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8014202:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014204:	f7f6 f8ad 	bl	800a362 <lwip_htonl>
 8014208:	4602      	mov	r2, r0
 801420a:	683b      	ldr	r3, [r7, #0]
 801420c:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801420e:	2301      	movs	r3, #1
}
 8014210:	4618      	mov	r0, r3
 8014212:	3728      	adds	r7, #40	; 0x28
 8014214:	46bd      	mov	sp, r7
 8014216:	bd80      	pop	{r7, pc}
 8014218:	08019e6c 	.word	0x08019e6c
 801421c:	080199ec 	.word	0x080199ec
 8014220:	08019a28 	.word	0x08019a28
 8014224:	08019a34 	.word	0x08019a34

08014228 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8014228:	b580      	push	{r7, lr}
 801422a:	b084      	sub	sp, #16
 801422c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801422e:	2300      	movs	r3, #0
 8014230:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8014232:	4b12      	ldr	r3, [pc, #72]	; (801427c <ip_reass_tmr+0x54>)
 8014234:	681b      	ldr	r3, [r3, #0]
 8014236:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8014238:	e018      	b.n	801426c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801423a:	68fb      	ldr	r3, [r7, #12]
 801423c:	7fdb      	ldrb	r3, [r3, #31]
 801423e:	2b00      	cmp	r3, #0
 8014240:	d00b      	beq.n	801425a <ip_reass_tmr+0x32>
      r->timer--;
 8014242:	68fb      	ldr	r3, [r7, #12]
 8014244:	7fdb      	ldrb	r3, [r3, #31]
 8014246:	3b01      	subs	r3, #1
 8014248:	b2da      	uxtb	r2, r3
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	60fb      	str	r3, [r7, #12]
 8014258:	e008      	b.n	801426c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8014264:	68b9      	ldr	r1, [r7, #8]
 8014266:	6878      	ldr	r0, [r7, #4]
 8014268:	f000 f80a 	bl	8014280 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	2b00      	cmp	r3, #0
 8014270:	d1e3      	bne.n	801423a <ip_reass_tmr+0x12>
    }
  }
}
 8014272:	bf00      	nop
 8014274:	bf00      	nop
 8014276:	3710      	adds	r7, #16
 8014278:	46bd      	mov	sp, r7
 801427a:	bd80      	pop	{r7, pc}
 801427c:	200041d4 	.word	0x200041d4

08014280 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014280:	b580      	push	{r7, lr}
 8014282:	b088      	sub	sp, #32
 8014284:	af00      	add	r7, sp, #0
 8014286:	6078      	str	r0, [r7, #4]
 8014288:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801428a:	2300      	movs	r3, #0
 801428c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801428e:	683a      	ldr	r2, [r7, #0]
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	429a      	cmp	r2, r3
 8014294:	d105      	bne.n	80142a2 <ip_reass_free_complete_datagram+0x22>
 8014296:	4b45      	ldr	r3, [pc, #276]	; (80143ac <ip_reass_free_complete_datagram+0x12c>)
 8014298:	22ab      	movs	r2, #171	; 0xab
 801429a:	4945      	ldr	r1, [pc, #276]	; (80143b0 <ip_reass_free_complete_datagram+0x130>)
 801429c:	4845      	ldr	r0, [pc, #276]	; (80143b4 <ip_reass_free_complete_datagram+0x134>)
 801429e:	f001 f849 	bl	8015334 <iprintf>
  if (prev != NULL) {
 80142a2:	683b      	ldr	r3, [r7, #0]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d00a      	beq.n	80142be <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80142a8:	683b      	ldr	r3, [r7, #0]
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	687a      	ldr	r2, [r7, #4]
 80142ae:	429a      	cmp	r2, r3
 80142b0:	d005      	beq.n	80142be <ip_reass_free_complete_datagram+0x3e>
 80142b2:	4b3e      	ldr	r3, [pc, #248]	; (80143ac <ip_reass_free_complete_datagram+0x12c>)
 80142b4:	22ad      	movs	r2, #173	; 0xad
 80142b6:	4940      	ldr	r1, [pc, #256]	; (80143b8 <ip_reass_free_complete_datagram+0x138>)
 80142b8:	483e      	ldr	r0, [pc, #248]	; (80143b4 <ip_reass_free_complete_datagram+0x134>)
 80142ba:	f001 f83b 	bl	8015334 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	685b      	ldr	r3, [r3, #4]
 80142c2:	685b      	ldr	r3, [r3, #4]
 80142c4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80142c6:	697b      	ldr	r3, [r7, #20]
 80142c8:	889b      	ldrh	r3, [r3, #4]
 80142ca:	b29b      	uxth	r3, r3
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d12a      	bne.n	8014326 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	685b      	ldr	r3, [r3, #4]
 80142d4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80142d6:	697b      	ldr	r3, [r7, #20]
 80142d8:	681a      	ldr	r2, [r3, #0]
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80142de:	69bb      	ldr	r3, [r7, #24]
 80142e0:	6858      	ldr	r0, [r3, #4]
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	3308      	adds	r3, #8
 80142e6:	2214      	movs	r2, #20
 80142e8:	4619      	mov	r1, r3
 80142ea:	f000 fff3 	bl	80152d4 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80142ee:	2101      	movs	r1, #1
 80142f0:	69b8      	ldr	r0, [r7, #24]
 80142f2:	f7ff fb1d 	bl	8013930 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80142f6:	69b8      	ldr	r0, [r7, #24]
 80142f8:	f7f7 fc80 	bl	800bbfc <pbuf_clen>
 80142fc:	4603      	mov	r3, r0
 80142fe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014300:	8bfa      	ldrh	r2, [r7, #30]
 8014302:	8a7b      	ldrh	r3, [r7, #18]
 8014304:	4413      	add	r3, r2
 8014306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801430a:	db05      	blt.n	8014318 <ip_reass_free_complete_datagram+0x98>
 801430c:	4b27      	ldr	r3, [pc, #156]	; (80143ac <ip_reass_free_complete_datagram+0x12c>)
 801430e:	22bc      	movs	r2, #188	; 0xbc
 8014310:	492a      	ldr	r1, [pc, #168]	; (80143bc <ip_reass_free_complete_datagram+0x13c>)
 8014312:	4828      	ldr	r0, [pc, #160]	; (80143b4 <ip_reass_free_complete_datagram+0x134>)
 8014314:	f001 f80e 	bl	8015334 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014318:	8bfa      	ldrh	r2, [r7, #30]
 801431a:	8a7b      	ldrh	r3, [r7, #18]
 801431c:	4413      	add	r3, r2
 801431e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8014320:	69b8      	ldr	r0, [r7, #24]
 8014322:	f7f7 fbdd 	bl	800bae0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	685b      	ldr	r3, [r3, #4]
 801432a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801432c:	e01f      	b.n	801436e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801432e:	69bb      	ldr	r3, [r7, #24]
 8014330:	685b      	ldr	r3, [r3, #4]
 8014332:	617b      	str	r3, [r7, #20]
    pcur = p;
 8014334:	69bb      	ldr	r3, [r7, #24]
 8014336:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8014338:	697b      	ldr	r3, [r7, #20]
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801433e:	68f8      	ldr	r0, [r7, #12]
 8014340:	f7f7 fc5c 	bl	800bbfc <pbuf_clen>
 8014344:	4603      	mov	r3, r0
 8014346:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014348:	8bfa      	ldrh	r2, [r7, #30]
 801434a:	8a7b      	ldrh	r3, [r7, #18]
 801434c:	4413      	add	r3, r2
 801434e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014352:	db05      	blt.n	8014360 <ip_reass_free_complete_datagram+0xe0>
 8014354:	4b15      	ldr	r3, [pc, #84]	; (80143ac <ip_reass_free_complete_datagram+0x12c>)
 8014356:	22cc      	movs	r2, #204	; 0xcc
 8014358:	4918      	ldr	r1, [pc, #96]	; (80143bc <ip_reass_free_complete_datagram+0x13c>)
 801435a:	4816      	ldr	r0, [pc, #88]	; (80143b4 <ip_reass_free_complete_datagram+0x134>)
 801435c:	f000 ffea 	bl	8015334 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014360:	8bfa      	ldrh	r2, [r7, #30]
 8014362:	8a7b      	ldrh	r3, [r7, #18]
 8014364:	4413      	add	r3, r2
 8014366:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8014368:	68f8      	ldr	r0, [r7, #12]
 801436a:	f7f7 fbb9 	bl	800bae0 <pbuf_free>
  while (p != NULL) {
 801436e:	69bb      	ldr	r3, [r7, #24]
 8014370:	2b00      	cmp	r3, #0
 8014372:	d1dc      	bne.n	801432e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8014374:	6839      	ldr	r1, [r7, #0]
 8014376:	6878      	ldr	r0, [r7, #4]
 8014378:	f000 f8c2 	bl	8014500 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801437c:	4b10      	ldr	r3, [pc, #64]	; (80143c0 <ip_reass_free_complete_datagram+0x140>)
 801437e:	881b      	ldrh	r3, [r3, #0]
 8014380:	8bfa      	ldrh	r2, [r7, #30]
 8014382:	429a      	cmp	r2, r3
 8014384:	d905      	bls.n	8014392 <ip_reass_free_complete_datagram+0x112>
 8014386:	4b09      	ldr	r3, [pc, #36]	; (80143ac <ip_reass_free_complete_datagram+0x12c>)
 8014388:	22d2      	movs	r2, #210	; 0xd2
 801438a:	490e      	ldr	r1, [pc, #56]	; (80143c4 <ip_reass_free_complete_datagram+0x144>)
 801438c:	4809      	ldr	r0, [pc, #36]	; (80143b4 <ip_reass_free_complete_datagram+0x134>)
 801438e:	f000 ffd1 	bl	8015334 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8014392:	4b0b      	ldr	r3, [pc, #44]	; (80143c0 <ip_reass_free_complete_datagram+0x140>)
 8014394:	881a      	ldrh	r2, [r3, #0]
 8014396:	8bfb      	ldrh	r3, [r7, #30]
 8014398:	1ad3      	subs	r3, r2, r3
 801439a:	b29a      	uxth	r2, r3
 801439c:	4b08      	ldr	r3, [pc, #32]	; (80143c0 <ip_reass_free_complete_datagram+0x140>)
 801439e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80143a0:	8bfb      	ldrh	r3, [r7, #30]
}
 80143a2:	4618      	mov	r0, r3
 80143a4:	3720      	adds	r7, #32
 80143a6:	46bd      	mov	sp, r7
 80143a8:	bd80      	pop	{r7, pc}
 80143aa:	bf00      	nop
 80143ac:	08019a5c 	.word	0x08019a5c
 80143b0:	08019a98 	.word	0x08019a98
 80143b4:	08019aa4 	.word	0x08019aa4
 80143b8:	08019acc 	.word	0x08019acc
 80143bc:	08019ae0 	.word	0x08019ae0
 80143c0:	200041d8 	.word	0x200041d8
 80143c4:	08019b00 	.word	0x08019b00

080143c8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80143c8:	b580      	push	{r7, lr}
 80143ca:	b08a      	sub	sp, #40	; 0x28
 80143cc:	af00      	add	r7, sp, #0
 80143ce:	6078      	str	r0, [r7, #4]
 80143d0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80143d2:	2300      	movs	r3, #0
 80143d4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80143d6:	2300      	movs	r3, #0
 80143d8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80143da:	2300      	movs	r3, #0
 80143dc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80143de:	2300      	movs	r3, #0
 80143e0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80143e2:	2300      	movs	r3, #0
 80143e4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80143e6:	4b28      	ldr	r3, [pc, #160]	; (8014488 <ip_reass_remove_oldest_datagram+0xc0>)
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80143ec:	e030      	b.n	8014450 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80143ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143f0:	695a      	ldr	r2, [r3, #20]
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	68db      	ldr	r3, [r3, #12]
 80143f6:	429a      	cmp	r2, r3
 80143f8:	d10c      	bne.n	8014414 <ip_reass_remove_oldest_datagram+0x4c>
 80143fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143fc:	699a      	ldr	r2, [r3, #24]
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	691b      	ldr	r3, [r3, #16]
 8014402:	429a      	cmp	r2, r3
 8014404:	d106      	bne.n	8014414 <ip_reass_remove_oldest_datagram+0x4c>
 8014406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014408:	899a      	ldrh	r2, [r3, #12]
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	889b      	ldrh	r3, [r3, #4]
 801440e:	b29b      	uxth	r3, r3
 8014410:	429a      	cmp	r2, r3
 8014412:	d014      	beq.n	801443e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8014414:	693b      	ldr	r3, [r7, #16]
 8014416:	3301      	adds	r3, #1
 8014418:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801441a:	6a3b      	ldr	r3, [r7, #32]
 801441c:	2b00      	cmp	r3, #0
 801441e:	d104      	bne.n	801442a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8014420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014422:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014424:	69fb      	ldr	r3, [r7, #28]
 8014426:	61bb      	str	r3, [r7, #24]
 8014428:	e009      	b.n	801443e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801442c:	7fda      	ldrb	r2, [r3, #31]
 801442e:	6a3b      	ldr	r3, [r7, #32]
 8014430:	7fdb      	ldrb	r3, [r3, #31]
 8014432:	429a      	cmp	r2, r3
 8014434:	d803      	bhi.n	801443e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8014436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014438:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801443a:	69fb      	ldr	r3, [r7, #28]
 801443c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	2b00      	cmp	r3, #0
 8014444:	d001      	beq.n	801444a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8014446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014448:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014452:	2b00      	cmp	r3, #0
 8014454:	d1cb      	bne.n	80143ee <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8014456:	6a3b      	ldr	r3, [r7, #32]
 8014458:	2b00      	cmp	r3, #0
 801445a:	d008      	beq.n	801446e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801445c:	69b9      	ldr	r1, [r7, #24]
 801445e:	6a38      	ldr	r0, [r7, #32]
 8014460:	f7ff ff0e 	bl	8014280 <ip_reass_free_complete_datagram>
 8014464:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8014466:	697a      	ldr	r2, [r7, #20]
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	4413      	add	r3, r2
 801446c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801446e:	697a      	ldr	r2, [r7, #20]
 8014470:	683b      	ldr	r3, [r7, #0]
 8014472:	429a      	cmp	r2, r3
 8014474:	da02      	bge.n	801447c <ip_reass_remove_oldest_datagram+0xb4>
 8014476:	693b      	ldr	r3, [r7, #16]
 8014478:	2b01      	cmp	r3, #1
 801447a:	dcac      	bgt.n	80143d6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801447c:	697b      	ldr	r3, [r7, #20]
}
 801447e:	4618      	mov	r0, r3
 8014480:	3728      	adds	r7, #40	; 0x28
 8014482:	46bd      	mov	sp, r7
 8014484:	bd80      	pop	{r7, pc}
 8014486:	bf00      	nop
 8014488:	200041d4 	.word	0x200041d4

0801448c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801448c:	b580      	push	{r7, lr}
 801448e:	b084      	sub	sp, #16
 8014490:	af00      	add	r7, sp, #0
 8014492:	6078      	str	r0, [r7, #4]
 8014494:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014496:	2004      	movs	r0, #4
 8014498:	f7f6 fc2c 	bl	800acf4 <memp_malloc>
 801449c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d110      	bne.n	80144c6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80144a4:	6839      	ldr	r1, [r7, #0]
 80144a6:	6878      	ldr	r0, [r7, #4]
 80144a8:	f7ff ff8e 	bl	80143c8 <ip_reass_remove_oldest_datagram>
 80144ac:	4602      	mov	r2, r0
 80144ae:	683b      	ldr	r3, [r7, #0]
 80144b0:	4293      	cmp	r3, r2
 80144b2:	dc03      	bgt.n	80144bc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80144b4:	2004      	movs	r0, #4
 80144b6:	f7f6 fc1d 	bl	800acf4 <memp_malloc>
 80144ba:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d101      	bne.n	80144c6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80144c2:	2300      	movs	r3, #0
 80144c4:	e016      	b.n	80144f4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80144c6:	2220      	movs	r2, #32
 80144c8:	2100      	movs	r1, #0
 80144ca:	68f8      	ldr	r0, [r7, #12]
 80144cc:	f000 ff2a 	bl	8015324 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	220f      	movs	r2, #15
 80144d4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80144d6:	4b09      	ldr	r3, [pc, #36]	; (80144fc <ip_reass_enqueue_new_datagram+0x70>)
 80144d8:	681a      	ldr	r2, [r3, #0]
 80144da:	68fb      	ldr	r3, [r7, #12]
 80144dc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80144de:	4a07      	ldr	r2, [pc, #28]	; (80144fc <ip_reass_enqueue_new_datagram+0x70>)
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	3308      	adds	r3, #8
 80144e8:	2214      	movs	r2, #20
 80144ea:	6879      	ldr	r1, [r7, #4]
 80144ec:	4618      	mov	r0, r3
 80144ee:	f000 fef1 	bl	80152d4 <memcpy>
  return ipr;
 80144f2:	68fb      	ldr	r3, [r7, #12]
}
 80144f4:	4618      	mov	r0, r3
 80144f6:	3710      	adds	r7, #16
 80144f8:	46bd      	mov	sp, r7
 80144fa:	bd80      	pop	{r7, pc}
 80144fc:	200041d4 	.word	0x200041d4

08014500 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014500:	b580      	push	{r7, lr}
 8014502:	b082      	sub	sp, #8
 8014504:	af00      	add	r7, sp, #0
 8014506:	6078      	str	r0, [r7, #4]
 8014508:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801450a:	4b10      	ldr	r3, [pc, #64]	; (801454c <ip_reass_dequeue_datagram+0x4c>)
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	687a      	ldr	r2, [r7, #4]
 8014510:	429a      	cmp	r2, r3
 8014512:	d104      	bne.n	801451e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	4a0c      	ldr	r2, [pc, #48]	; (801454c <ip_reass_dequeue_datagram+0x4c>)
 801451a:	6013      	str	r3, [r2, #0]
 801451c:	e00d      	b.n	801453a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801451e:	683b      	ldr	r3, [r7, #0]
 8014520:	2b00      	cmp	r3, #0
 8014522:	d106      	bne.n	8014532 <ip_reass_dequeue_datagram+0x32>
 8014524:	4b0a      	ldr	r3, [pc, #40]	; (8014550 <ip_reass_dequeue_datagram+0x50>)
 8014526:	f240 1245 	movw	r2, #325	; 0x145
 801452a:	490a      	ldr	r1, [pc, #40]	; (8014554 <ip_reass_dequeue_datagram+0x54>)
 801452c:	480a      	ldr	r0, [pc, #40]	; (8014558 <ip_reass_dequeue_datagram+0x58>)
 801452e:	f000 ff01 	bl	8015334 <iprintf>
    prev->next = ipr->next;
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	681a      	ldr	r2, [r3, #0]
 8014536:	683b      	ldr	r3, [r7, #0]
 8014538:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801453a:	6879      	ldr	r1, [r7, #4]
 801453c:	2004      	movs	r0, #4
 801453e:	f7f6 fc2b 	bl	800ad98 <memp_free>
}
 8014542:	bf00      	nop
 8014544:	3708      	adds	r7, #8
 8014546:	46bd      	mov	sp, r7
 8014548:	bd80      	pop	{r7, pc}
 801454a:	bf00      	nop
 801454c:	200041d4 	.word	0x200041d4
 8014550:	08019a5c 	.word	0x08019a5c
 8014554:	08019b24 	.word	0x08019b24
 8014558:	08019aa4 	.word	0x08019aa4

0801455c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801455c:	b580      	push	{r7, lr}
 801455e:	b08c      	sub	sp, #48	; 0x30
 8014560:	af00      	add	r7, sp, #0
 8014562:	60f8      	str	r0, [r7, #12]
 8014564:	60b9      	str	r1, [r7, #8]
 8014566:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8014568:	2300      	movs	r3, #0
 801456a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801456c:	2301      	movs	r3, #1
 801456e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8014570:	68bb      	ldr	r3, [r7, #8]
 8014572:	685b      	ldr	r3, [r3, #4]
 8014574:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014576:	69fb      	ldr	r3, [r7, #28]
 8014578:	885b      	ldrh	r3, [r3, #2]
 801457a:	b29b      	uxth	r3, r3
 801457c:	4618      	mov	r0, r3
 801457e:	f7f5 fedb 	bl	800a338 <lwip_htons>
 8014582:	4603      	mov	r3, r0
 8014584:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8014586:	69fb      	ldr	r3, [r7, #28]
 8014588:	781b      	ldrb	r3, [r3, #0]
 801458a:	f003 030f 	and.w	r3, r3, #15
 801458e:	b2db      	uxtb	r3, r3
 8014590:	009b      	lsls	r3, r3, #2
 8014592:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8014594:	7e7b      	ldrb	r3, [r7, #25]
 8014596:	b29b      	uxth	r3, r3
 8014598:	8b7a      	ldrh	r2, [r7, #26]
 801459a:	429a      	cmp	r2, r3
 801459c:	d202      	bcs.n	80145a4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801459e:	f04f 33ff 	mov.w	r3, #4294967295
 80145a2:	e135      	b.n	8014810 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80145a4:	7e7b      	ldrb	r3, [r7, #25]
 80145a6:	b29b      	uxth	r3, r3
 80145a8:	8b7a      	ldrh	r2, [r7, #26]
 80145aa:	1ad3      	subs	r3, r2, r3
 80145ac:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80145ae:	69fb      	ldr	r3, [r7, #28]
 80145b0:	88db      	ldrh	r3, [r3, #6]
 80145b2:	b29b      	uxth	r3, r3
 80145b4:	4618      	mov	r0, r3
 80145b6:	f7f5 febf 	bl	800a338 <lwip_htons>
 80145ba:	4603      	mov	r3, r0
 80145bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80145c0:	b29b      	uxth	r3, r3
 80145c2:	00db      	lsls	r3, r3, #3
 80145c4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80145c6:	68bb      	ldr	r3, [r7, #8]
 80145c8:	685b      	ldr	r3, [r3, #4]
 80145ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80145cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145ce:	2200      	movs	r2, #0
 80145d0:	701a      	strb	r2, [r3, #0]
 80145d2:	2200      	movs	r2, #0
 80145d4:	705a      	strb	r2, [r3, #1]
 80145d6:	2200      	movs	r2, #0
 80145d8:	709a      	strb	r2, [r3, #2]
 80145da:	2200      	movs	r2, #0
 80145dc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80145de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145e0:	8afa      	ldrh	r2, [r7, #22]
 80145e2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80145e4:	8afa      	ldrh	r2, [r7, #22]
 80145e6:	8b7b      	ldrh	r3, [r7, #26]
 80145e8:	4413      	add	r3, r2
 80145ea:	b29a      	uxth	r2, r3
 80145ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145ee:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80145f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145f2:	88db      	ldrh	r3, [r3, #6]
 80145f4:	b29b      	uxth	r3, r3
 80145f6:	8afa      	ldrh	r2, [r7, #22]
 80145f8:	429a      	cmp	r2, r3
 80145fa:	d902      	bls.n	8014602 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80145fc:	f04f 33ff 	mov.w	r3, #4294967295
 8014600:	e106      	b.n	8014810 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	685b      	ldr	r3, [r3, #4]
 8014606:	627b      	str	r3, [r7, #36]	; 0x24
 8014608:	e068      	b.n	80146dc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801460c:	685b      	ldr	r3, [r3, #4]
 801460e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8014610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014612:	889b      	ldrh	r3, [r3, #4]
 8014614:	b29a      	uxth	r2, r3
 8014616:	693b      	ldr	r3, [r7, #16]
 8014618:	889b      	ldrh	r3, [r3, #4]
 801461a:	b29b      	uxth	r3, r3
 801461c:	429a      	cmp	r2, r3
 801461e:	d235      	bcs.n	801468c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8014620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014624:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8014626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014628:	2b00      	cmp	r3, #0
 801462a:	d020      	beq.n	801466e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801462c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801462e:	889b      	ldrh	r3, [r3, #4]
 8014630:	b29a      	uxth	r2, r3
 8014632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014634:	88db      	ldrh	r3, [r3, #6]
 8014636:	b29b      	uxth	r3, r3
 8014638:	429a      	cmp	r2, r3
 801463a:	d307      	bcc.n	801464c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801463c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801463e:	88db      	ldrh	r3, [r3, #6]
 8014640:	b29a      	uxth	r2, r3
 8014642:	693b      	ldr	r3, [r7, #16]
 8014644:	889b      	ldrh	r3, [r3, #4]
 8014646:	b29b      	uxth	r3, r3
 8014648:	429a      	cmp	r2, r3
 801464a:	d902      	bls.n	8014652 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801464c:	f04f 33ff 	mov.w	r3, #4294967295
 8014650:	e0de      	b.n	8014810 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8014652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014654:	68ba      	ldr	r2, [r7, #8]
 8014656:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8014658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801465a:	88db      	ldrh	r3, [r3, #6]
 801465c:	b29a      	uxth	r2, r3
 801465e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014660:	889b      	ldrh	r3, [r3, #4]
 8014662:	b29b      	uxth	r3, r3
 8014664:	429a      	cmp	r2, r3
 8014666:	d03d      	beq.n	80146e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014668:	2300      	movs	r3, #0
 801466a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801466c:	e03a      	b.n	80146e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801466e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014670:	88db      	ldrh	r3, [r3, #6]
 8014672:	b29a      	uxth	r2, r3
 8014674:	693b      	ldr	r3, [r7, #16]
 8014676:	889b      	ldrh	r3, [r3, #4]
 8014678:	b29b      	uxth	r3, r3
 801467a:	429a      	cmp	r2, r3
 801467c:	d902      	bls.n	8014684 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801467e:	f04f 33ff 	mov.w	r3, #4294967295
 8014682:	e0c5      	b.n	8014810 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8014684:	68fb      	ldr	r3, [r7, #12]
 8014686:	68ba      	ldr	r2, [r7, #8]
 8014688:	605a      	str	r2, [r3, #4]
      break;
 801468a:	e02b      	b.n	80146e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801468c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801468e:	889b      	ldrh	r3, [r3, #4]
 8014690:	b29a      	uxth	r2, r3
 8014692:	693b      	ldr	r3, [r7, #16]
 8014694:	889b      	ldrh	r3, [r3, #4]
 8014696:	b29b      	uxth	r3, r3
 8014698:	429a      	cmp	r2, r3
 801469a:	d102      	bne.n	80146a2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801469c:	f04f 33ff 	mov.w	r3, #4294967295
 80146a0:	e0b6      	b.n	8014810 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80146a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146a4:	889b      	ldrh	r3, [r3, #4]
 80146a6:	b29a      	uxth	r2, r3
 80146a8:	693b      	ldr	r3, [r7, #16]
 80146aa:	88db      	ldrh	r3, [r3, #6]
 80146ac:	b29b      	uxth	r3, r3
 80146ae:	429a      	cmp	r2, r3
 80146b0:	d202      	bcs.n	80146b8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80146b2:	f04f 33ff 	mov.w	r3, #4294967295
 80146b6:	e0ab      	b.n	8014810 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80146b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d009      	beq.n	80146d2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80146be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146c0:	88db      	ldrh	r3, [r3, #6]
 80146c2:	b29a      	uxth	r2, r3
 80146c4:	693b      	ldr	r3, [r7, #16]
 80146c6:	889b      	ldrh	r3, [r3, #4]
 80146c8:	b29b      	uxth	r3, r3
 80146ca:	429a      	cmp	r2, r3
 80146cc:	d001      	beq.n	80146d2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80146ce:	2300      	movs	r3, #0
 80146d0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80146d2:	693b      	ldr	r3, [r7, #16]
 80146d4:	681b      	ldr	r3, [r3, #0]
 80146d6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80146d8:	693b      	ldr	r3, [r7, #16]
 80146da:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80146dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d193      	bne.n	801460a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80146e2:	e000      	b.n	80146e6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80146e4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80146e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d12d      	bne.n	8014748 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80146ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d01c      	beq.n	801472c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80146f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146f4:	88db      	ldrh	r3, [r3, #6]
 80146f6:	b29a      	uxth	r2, r3
 80146f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146fa:	889b      	ldrh	r3, [r3, #4]
 80146fc:	b29b      	uxth	r3, r3
 80146fe:	429a      	cmp	r2, r3
 8014700:	d906      	bls.n	8014710 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8014702:	4b45      	ldr	r3, [pc, #276]	; (8014818 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014704:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8014708:	4944      	ldr	r1, [pc, #272]	; (801481c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801470a:	4845      	ldr	r0, [pc, #276]	; (8014820 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801470c:	f000 fe12 	bl	8015334 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8014710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014712:	68ba      	ldr	r2, [r7, #8]
 8014714:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8014716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014718:	88db      	ldrh	r3, [r3, #6]
 801471a:	b29a      	uxth	r2, r3
 801471c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801471e:	889b      	ldrh	r3, [r3, #4]
 8014720:	b29b      	uxth	r3, r3
 8014722:	429a      	cmp	r2, r3
 8014724:	d010      	beq.n	8014748 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8014726:	2300      	movs	r3, #0
 8014728:	623b      	str	r3, [r7, #32]
 801472a:	e00d      	b.n	8014748 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801472c:	68fb      	ldr	r3, [r7, #12]
 801472e:	685b      	ldr	r3, [r3, #4]
 8014730:	2b00      	cmp	r3, #0
 8014732:	d006      	beq.n	8014742 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8014734:	4b38      	ldr	r3, [pc, #224]	; (8014818 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014736:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801473a:	493a      	ldr	r1, [pc, #232]	; (8014824 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801473c:	4838      	ldr	r0, [pc, #224]	; (8014820 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801473e:	f000 fdf9 	bl	8015334 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	68ba      	ldr	r2, [r7, #8]
 8014746:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d105      	bne.n	801475a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	7f9b      	ldrb	r3, [r3, #30]
 8014752:	f003 0301 	and.w	r3, r3, #1
 8014756:	2b00      	cmp	r3, #0
 8014758:	d059      	beq.n	801480e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801475a:	6a3b      	ldr	r3, [r7, #32]
 801475c:	2b00      	cmp	r3, #0
 801475e:	d04f      	beq.n	8014800 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	685b      	ldr	r3, [r3, #4]
 8014764:	2b00      	cmp	r3, #0
 8014766:	d006      	beq.n	8014776 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	685b      	ldr	r3, [r3, #4]
 801476c:	685b      	ldr	r3, [r3, #4]
 801476e:	889b      	ldrh	r3, [r3, #4]
 8014770:	b29b      	uxth	r3, r3
 8014772:	2b00      	cmp	r3, #0
 8014774:	d002      	beq.n	801477c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8014776:	2300      	movs	r3, #0
 8014778:	623b      	str	r3, [r7, #32]
 801477a:	e041      	b.n	8014800 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801477c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801477e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8014780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014786:	e012      	b.n	80147ae <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8014788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801478a:	685b      	ldr	r3, [r3, #4]
 801478c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801478e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014790:	88db      	ldrh	r3, [r3, #6]
 8014792:	b29a      	uxth	r2, r3
 8014794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014796:	889b      	ldrh	r3, [r3, #4]
 8014798:	b29b      	uxth	r3, r3
 801479a:	429a      	cmp	r2, r3
 801479c:	d002      	beq.n	80147a4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801479e:	2300      	movs	r3, #0
 80147a0:	623b      	str	r3, [r7, #32]
            break;
 80147a2:	e007      	b.n	80147b4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80147a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147a6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80147a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80147ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d1e9      	bne.n	8014788 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80147b4:	6a3b      	ldr	r3, [r7, #32]
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d022      	beq.n	8014800 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	685b      	ldr	r3, [r3, #4]
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d106      	bne.n	80147d0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80147c2:	4b15      	ldr	r3, [pc, #84]	; (8014818 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80147c4:	f240 12df 	movw	r2, #479	; 0x1df
 80147c8:	4917      	ldr	r1, [pc, #92]	; (8014828 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80147ca:	4815      	ldr	r0, [pc, #84]	; (8014820 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80147cc:	f000 fdb2 	bl	8015334 <iprintf>
          LWIP_ASSERT("sanity check",
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	685b      	ldr	r3, [r3, #4]
 80147d4:	685b      	ldr	r3, [r3, #4]
 80147d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80147d8:	429a      	cmp	r2, r3
 80147da:	d106      	bne.n	80147ea <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80147dc:	4b0e      	ldr	r3, [pc, #56]	; (8014818 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80147de:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80147e2:	4911      	ldr	r1, [pc, #68]	; (8014828 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80147e4:	480e      	ldr	r0, [pc, #56]	; (8014820 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80147e6:	f000 fda5 	bl	8015334 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80147ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d006      	beq.n	8014800 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80147f2:	4b09      	ldr	r3, [pc, #36]	; (8014818 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80147f4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80147f8:	490c      	ldr	r1, [pc, #48]	; (801482c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80147fa:	4809      	ldr	r0, [pc, #36]	; (8014820 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80147fc:	f000 fd9a 	bl	8015334 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8014800:	6a3b      	ldr	r3, [r7, #32]
 8014802:	2b00      	cmp	r3, #0
 8014804:	bf14      	ite	ne
 8014806:	2301      	movne	r3, #1
 8014808:	2300      	moveq	r3, #0
 801480a:	b2db      	uxtb	r3, r3
 801480c:	e000      	b.n	8014810 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801480e:	2300      	movs	r3, #0
}
 8014810:	4618      	mov	r0, r3
 8014812:	3730      	adds	r7, #48	; 0x30
 8014814:	46bd      	mov	sp, r7
 8014816:	bd80      	pop	{r7, pc}
 8014818:	08019a5c 	.word	0x08019a5c
 801481c:	08019b40 	.word	0x08019b40
 8014820:	08019aa4 	.word	0x08019aa4
 8014824:	08019b60 	.word	0x08019b60
 8014828:	08019b98 	.word	0x08019b98
 801482c:	08019ba8 	.word	0x08019ba8

08014830 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8014830:	b580      	push	{r7, lr}
 8014832:	b08e      	sub	sp, #56	; 0x38
 8014834:	af00      	add	r7, sp, #0
 8014836:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	685b      	ldr	r3, [r3, #4]
 801483c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801483e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014840:	781b      	ldrb	r3, [r3, #0]
 8014842:	f003 030f 	and.w	r3, r3, #15
 8014846:	b2db      	uxtb	r3, r3
 8014848:	009b      	lsls	r3, r3, #2
 801484a:	b2db      	uxtb	r3, r3
 801484c:	2b14      	cmp	r3, #20
 801484e:	f040 8167 	bne.w	8014b20 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8014852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014854:	88db      	ldrh	r3, [r3, #6]
 8014856:	b29b      	uxth	r3, r3
 8014858:	4618      	mov	r0, r3
 801485a:	f7f5 fd6d 	bl	800a338 <lwip_htons>
 801485e:	4603      	mov	r3, r0
 8014860:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014864:	b29b      	uxth	r3, r3
 8014866:	00db      	lsls	r3, r3, #3
 8014868:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801486a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801486c:	885b      	ldrh	r3, [r3, #2]
 801486e:	b29b      	uxth	r3, r3
 8014870:	4618      	mov	r0, r3
 8014872:	f7f5 fd61 	bl	800a338 <lwip_htons>
 8014876:	4603      	mov	r3, r0
 8014878:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801487a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801487c:	781b      	ldrb	r3, [r3, #0]
 801487e:	f003 030f 	and.w	r3, r3, #15
 8014882:	b2db      	uxtb	r3, r3
 8014884:	009b      	lsls	r3, r3, #2
 8014886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801488a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801488e:	b29b      	uxth	r3, r3
 8014890:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014892:	429a      	cmp	r2, r3
 8014894:	f0c0 8146 	bcc.w	8014b24 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8014898:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801489c:	b29b      	uxth	r3, r3
 801489e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80148a0:	1ad3      	subs	r3, r2, r3
 80148a2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80148a4:	6878      	ldr	r0, [r7, #4]
 80148a6:	f7f7 f9a9 	bl	800bbfc <pbuf_clen>
 80148aa:	4603      	mov	r3, r0
 80148ac:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80148ae:	4b9f      	ldr	r3, [pc, #636]	; (8014b2c <ip4_reass+0x2fc>)
 80148b0:	881b      	ldrh	r3, [r3, #0]
 80148b2:	461a      	mov	r2, r3
 80148b4:	8c3b      	ldrh	r3, [r7, #32]
 80148b6:	4413      	add	r3, r2
 80148b8:	2b0a      	cmp	r3, #10
 80148ba:	dd10      	ble.n	80148de <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80148bc:	8c3b      	ldrh	r3, [r7, #32]
 80148be:	4619      	mov	r1, r3
 80148c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80148c2:	f7ff fd81 	bl	80143c8 <ip_reass_remove_oldest_datagram>
 80148c6:	4603      	mov	r3, r0
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	f000 812d 	beq.w	8014b28 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80148ce:	4b97      	ldr	r3, [pc, #604]	; (8014b2c <ip4_reass+0x2fc>)
 80148d0:	881b      	ldrh	r3, [r3, #0]
 80148d2:	461a      	mov	r2, r3
 80148d4:	8c3b      	ldrh	r3, [r7, #32]
 80148d6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80148d8:	2b0a      	cmp	r3, #10
 80148da:	f300 8125 	bgt.w	8014b28 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80148de:	4b94      	ldr	r3, [pc, #592]	; (8014b30 <ip4_reass+0x300>)
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	633b      	str	r3, [r7, #48]	; 0x30
 80148e4:	e015      	b.n	8014912 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80148e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148e8:	695a      	ldr	r2, [r3, #20]
 80148ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148ec:	68db      	ldr	r3, [r3, #12]
 80148ee:	429a      	cmp	r2, r3
 80148f0:	d10c      	bne.n	801490c <ip4_reass+0xdc>
 80148f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148f4:	699a      	ldr	r2, [r3, #24]
 80148f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148f8:	691b      	ldr	r3, [r3, #16]
 80148fa:	429a      	cmp	r2, r3
 80148fc:	d106      	bne.n	801490c <ip4_reass+0xdc>
 80148fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014900:	899a      	ldrh	r2, [r3, #12]
 8014902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014904:	889b      	ldrh	r3, [r3, #4]
 8014906:	b29b      	uxth	r3, r3
 8014908:	429a      	cmp	r2, r3
 801490a:	d006      	beq.n	801491a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801490c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	633b      	str	r3, [r7, #48]	; 0x30
 8014912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014914:	2b00      	cmp	r3, #0
 8014916:	d1e6      	bne.n	80148e6 <ip4_reass+0xb6>
 8014918:	e000      	b.n	801491c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801491a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801491c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801491e:	2b00      	cmp	r3, #0
 8014920:	d109      	bne.n	8014936 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8014922:	8c3b      	ldrh	r3, [r7, #32]
 8014924:	4619      	mov	r1, r3
 8014926:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014928:	f7ff fdb0 	bl	801448c <ip_reass_enqueue_new_datagram>
 801492c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801492e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014930:	2b00      	cmp	r3, #0
 8014932:	d11c      	bne.n	801496e <ip4_reass+0x13e>
      goto nullreturn;
 8014934:	e109      	b.n	8014b4a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014938:	88db      	ldrh	r3, [r3, #6]
 801493a:	b29b      	uxth	r3, r3
 801493c:	4618      	mov	r0, r3
 801493e:	f7f5 fcfb 	bl	800a338 <lwip_htons>
 8014942:	4603      	mov	r3, r0
 8014944:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014948:	2b00      	cmp	r3, #0
 801494a:	d110      	bne.n	801496e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801494c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801494e:	89db      	ldrh	r3, [r3, #14]
 8014950:	4618      	mov	r0, r3
 8014952:	f7f5 fcf1 	bl	800a338 <lwip_htons>
 8014956:	4603      	mov	r3, r0
 8014958:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801495c:	2b00      	cmp	r3, #0
 801495e:	d006      	beq.n	801496e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014962:	3308      	adds	r3, #8
 8014964:	2214      	movs	r2, #20
 8014966:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014968:	4618      	mov	r0, r3
 801496a:	f000 fcb3 	bl	80152d4 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801496e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014970:	88db      	ldrh	r3, [r3, #6]
 8014972:	b29b      	uxth	r3, r3
 8014974:	f003 0320 	and.w	r3, r3, #32
 8014978:	2b00      	cmp	r3, #0
 801497a:	bf0c      	ite	eq
 801497c:	2301      	moveq	r3, #1
 801497e:	2300      	movne	r3, #0
 8014980:	b2db      	uxtb	r3, r3
 8014982:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8014984:	69fb      	ldr	r3, [r7, #28]
 8014986:	2b00      	cmp	r3, #0
 8014988:	d00e      	beq.n	80149a8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801498a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801498c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801498e:	4413      	add	r3, r2
 8014990:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8014992:	8b7a      	ldrh	r2, [r7, #26]
 8014994:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014996:	429a      	cmp	r2, r3
 8014998:	f0c0 80a0 	bcc.w	8014adc <ip4_reass+0x2ac>
 801499c:	8b7b      	ldrh	r3, [r7, #26]
 801499e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80149a2:	4293      	cmp	r3, r2
 80149a4:	f200 809a 	bhi.w	8014adc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80149a8:	69fa      	ldr	r2, [r7, #28]
 80149aa:	6879      	ldr	r1, [r7, #4]
 80149ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80149ae:	f7ff fdd5 	bl	801455c <ip_reass_chain_frag_into_datagram_and_validate>
 80149b2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80149b4:	697b      	ldr	r3, [r7, #20]
 80149b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149ba:	f000 8091 	beq.w	8014ae0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80149be:	4b5b      	ldr	r3, [pc, #364]	; (8014b2c <ip4_reass+0x2fc>)
 80149c0:	881a      	ldrh	r2, [r3, #0]
 80149c2:	8c3b      	ldrh	r3, [r7, #32]
 80149c4:	4413      	add	r3, r2
 80149c6:	b29a      	uxth	r2, r3
 80149c8:	4b58      	ldr	r3, [pc, #352]	; (8014b2c <ip4_reass+0x2fc>)
 80149ca:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80149cc:	69fb      	ldr	r3, [r7, #28]
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d00d      	beq.n	80149ee <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80149d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80149d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80149d6:	4413      	add	r3, r2
 80149d8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80149da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149dc:	8a7a      	ldrh	r2, [r7, #18]
 80149de:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80149e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149e2:	7f9b      	ldrb	r3, [r3, #30]
 80149e4:	f043 0301 	orr.w	r3, r3, #1
 80149e8:	b2da      	uxtb	r2, r3
 80149ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149ec:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80149ee:	697b      	ldr	r3, [r7, #20]
 80149f0:	2b01      	cmp	r3, #1
 80149f2:	d171      	bne.n	8014ad8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80149f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149f6:	8b9b      	ldrh	r3, [r3, #28]
 80149f8:	3314      	adds	r3, #20
 80149fa:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80149fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149fe:	685b      	ldr	r3, [r3, #4]
 8014a00:	685b      	ldr	r3, [r3, #4]
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8014a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a08:	685b      	ldr	r3, [r3, #4]
 8014a0a:	685b      	ldr	r3, [r3, #4]
 8014a0c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8014a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a10:	3308      	adds	r3, #8
 8014a12:	2214      	movs	r2, #20
 8014a14:	4619      	mov	r1, r3
 8014a16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014a18:	f000 fc5c 	bl	80152d4 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8014a1c:	8a3b      	ldrh	r3, [r7, #16]
 8014a1e:	4618      	mov	r0, r3
 8014a20:	f7f5 fc8a 	bl	800a338 <lwip_htons>
 8014a24:	4603      	mov	r3, r0
 8014a26:	461a      	mov	r2, r3
 8014a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a2a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8014a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a2e:	2200      	movs	r2, #0
 8014a30:	719a      	strb	r2, [r3, #6]
 8014a32:	2200      	movs	r2, #0
 8014a34:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8014a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a38:	2200      	movs	r2, #0
 8014a3a:	729a      	strb	r2, [r3, #10]
 8014a3c:	2200      	movs	r2, #0
 8014a3e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8014a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a42:	685b      	ldr	r3, [r3, #4]
 8014a44:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8014a46:	e00d      	b.n	8014a64 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8014a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a4a:	685b      	ldr	r3, [r3, #4]
 8014a4c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8014a4e:	2114      	movs	r1, #20
 8014a50:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014a52:	f7f6 ffbf 	bl	800b9d4 <pbuf_remove_header>
      pbuf_cat(p, r);
 8014a56:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014a58:	6878      	ldr	r0, [r7, #4]
 8014a5a:	f7f7 f90f 	bl	800bc7c <pbuf_cat>
      r = iprh->next_pbuf;
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8014a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d1ee      	bne.n	8014a48 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8014a6a:	4b31      	ldr	r3, [pc, #196]	; (8014b30 <ip4_reass+0x300>)
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a70:	429a      	cmp	r2, r3
 8014a72:	d102      	bne.n	8014a7a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8014a74:	2300      	movs	r3, #0
 8014a76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014a78:	e010      	b.n	8014a9c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014a7a:	4b2d      	ldr	r3, [pc, #180]	; (8014b30 <ip4_reass+0x300>)
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014a80:	e007      	b.n	8014a92 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8014a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a84:	681b      	ldr	r3, [r3, #0]
 8014a86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a88:	429a      	cmp	r2, r3
 8014a8a:	d006      	beq.n	8014a9a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d1f4      	bne.n	8014a82 <ip4_reass+0x252>
 8014a98:	e000      	b.n	8014a9c <ip4_reass+0x26c>
          break;
 8014a9a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8014a9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014a9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014aa0:	f7ff fd2e 	bl	8014500 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8014aa4:	6878      	ldr	r0, [r7, #4]
 8014aa6:	f7f7 f8a9 	bl	800bbfc <pbuf_clen>
 8014aaa:	4603      	mov	r3, r0
 8014aac:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8014aae:	4b1f      	ldr	r3, [pc, #124]	; (8014b2c <ip4_reass+0x2fc>)
 8014ab0:	881b      	ldrh	r3, [r3, #0]
 8014ab2:	8c3a      	ldrh	r2, [r7, #32]
 8014ab4:	429a      	cmp	r2, r3
 8014ab6:	d906      	bls.n	8014ac6 <ip4_reass+0x296>
 8014ab8:	4b1e      	ldr	r3, [pc, #120]	; (8014b34 <ip4_reass+0x304>)
 8014aba:	f240 229b 	movw	r2, #667	; 0x29b
 8014abe:	491e      	ldr	r1, [pc, #120]	; (8014b38 <ip4_reass+0x308>)
 8014ac0:	481e      	ldr	r0, [pc, #120]	; (8014b3c <ip4_reass+0x30c>)
 8014ac2:	f000 fc37 	bl	8015334 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8014ac6:	4b19      	ldr	r3, [pc, #100]	; (8014b2c <ip4_reass+0x2fc>)
 8014ac8:	881a      	ldrh	r2, [r3, #0]
 8014aca:	8c3b      	ldrh	r3, [r7, #32]
 8014acc:	1ad3      	subs	r3, r2, r3
 8014ace:	b29a      	uxth	r2, r3
 8014ad0:	4b16      	ldr	r3, [pc, #88]	; (8014b2c <ip4_reass+0x2fc>)
 8014ad2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	e03c      	b.n	8014b52 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8014ad8:	2300      	movs	r3, #0
 8014ada:	e03a      	b.n	8014b52 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8014adc:	bf00      	nop
 8014ade:	e000      	b.n	8014ae2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8014ae0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8014ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d106      	bne.n	8014af6 <ip4_reass+0x2c6>
 8014ae8:	4b12      	ldr	r3, [pc, #72]	; (8014b34 <ip4_reass+0x304>)
 8014aea:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8014aee:	4914      	ldr	r1, [pc, #80]	; (8014b40 <ip4_reass+0x310>)
 8014af0:	4812      	ldr	r0, [pc, #72]	; (8014b3c <ip4_reass+0x30c>)
 8014af2:	f000 fc1f 	bl	8015334 <iprintf>
  if (ipr->p == NULL) {
 8014af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014af8:	685b      	ldr	r3, [r3, #4]
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d124      	bne.n	8014b48 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8014afe:	4b0c      	ldr	r3, [pc, #48]	; (8014b30 <ip4_reass+0x300>)
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014b04:	429a      	cmp	r2, r3
 8014b06:	d006      	beq.n	8014b16 <ip4_reass+0x2e6>
 8014b08:	4b0a      	ldr	r3, [pc, #40]	; (8014b34 <ip4_reass+0x304>)
 8014b0a:	f240 22ab 	movw	r2, #683	; 0x2ab
 8014b0e:	490d      	ldr	r1, [pc, #52]	; (8014b44 <ip4_reass+0x314>)
 8014b10:	480a      	ldr	r0, [pc, #40]	; (8014b3c <ip4_reass+0x30c>)
 8014b12:	f000 fc0f 	bl	8015334 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8014b16:	2100      	movs	r1, #0
 8014b18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014b1a:	f7ff fcf1 	bl	8014500 <ip_reass_dequeue_datagram>
 8014b1e:	e014      	b.n	8014b4a <ip4_reass+0x31a>
    goto nullreturn;
 8014b20:	bf00      	nop
 8014b22:	e012      	b.n	8014b4a <ip4_reass+0x31a>
    goto nullreturn;
 8014b24:	bf00      	nop
 8014b26:	e010      	b.n	8014b4a <ip4_reass+0x31a>
      goto nullreturn;
 8014b28:	bf00      	nop
 8014b2a:	e00e      	b.n	8014b4a <ip4_reass+0x31a>
 8014b2c:	200041d8 	.word	0x200041d8
 8014b30:	200041d4 	.word	0x200041d4
 8014b34:	08019a5c 	.word	0x08019a5c
 8014b38:	08019bcc 	.word	0x08019bcc
 8014b3c:	08019aa4 	.word	0x08019aa4
 8014b40:	08019be8 	.word	0x08019be8
 8014b44:	08019bf4 	.word	0x08019bf4
  }

nullreturn:
 8014b48:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8014b4a:	6878      	ldr	r0, [r7, #4]
 8014b4c:	f7f6 ffc8 	bl	800bae0 <pbuf_free>
  return NULL;
 8014b50:	2300      	movs	r3, #0
}
 8014b52:	4618      	mov	r0, r3
 8014b54:	3738      	adds	r7, #56	; 0x38
 8014b56:	46bd      	mov	sp, r7
 8014b58:	bd80      	pop	{r7, pc}
 8014b5a:	bf00      	nop

08014b5c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8014b5c:	b580      	push	{r7, lr}
 8014b5e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8014b60:	2005      	movs	r0, #5
 8014b62:	f7f6 f8c7 	bl	800acf4 <memp_malloc>
 8014b66:	4603      	mov	r3, r0
}
 8014b68:	4618      	mov	r0, r3
 8014b6a:	bd80      	pop	{r7, pc}

08014b6c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8014b6c:	b580      	push	{r7, lr}
 8014b6e:	b082      	sub	sp, #8
 8014b70:	af00      	add	r7, sp, #0
 8014b72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d106      	bne.n	8014b88 <ip_frag_free_pbuf_custom_ref+0x1c>
 8014b7a:	4b07      	ldr	r3, [pc, #28]	; (8014b98 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014b7c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8014b80:	4906      	ldr	r1, [pc, #24]	; (8014b9c <ip_frag_free_pbuf_custom_ref+0x30>)
 8014b82:	4807      	ldr	r0, [pc, #28]	; (8014ba0 <ip_frag_free_pbuf_custom_ref+0x34>)
 8014b84:	f000 fbd6 	bl	8015334 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8014b88:	6879      	ldr	r1, [r7, #4]
 8014b8a:	2005      	movs	r0, #5
 8014b8c:	f7f6 f904 	bl	800ad98 <memp_free>
}
 8014b90:	bf00      	nop
 8014b92:	3708      	adds	r7, #8
 8014b94:	46bd      	mov	sp, r7
 8014b96:	bd80      	pop	{r7, pc}
 8014b98:	08019a5c 	.word	0x08019a5c
 8014b9c:	08019c14 	.word	0x08019c14
 8014ba0:	08019aa4 	.word	0x08019aa4

08014ba4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014ba4:	b580      	push	{r7, lr}
 8014ba6:	b084      	sub	sp, #16
 8014ba8:	af00      	add	r7, sp, #0
 8014baa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d106      	bne.n	8014bc4 <ipfrag_free_pbuf_custom+0x20>
 8014bb6:	4b11      	ldr	r3, [pc, #68]	; (8014bfc <ipfrag_free_pbuf_custom+0x58>)
 8014bb8:	f240 22ce 	movw	r2, #718	; 0x2ce
 8014bbc:	4910      	ldr	r1, [pc, #64]	; (8014c00 <ipfrag_free_pbuf_custom+0x5c>)
 8014bbe:	4811      	ldr	r0, [pc, #68]	; (8014c04 <ipfrag_free_pbuf_custom+0x60>)
 8014bc0:	f000 fbb8 	bl	8015334 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014bc4:	68fa      	ldr	r2, [r7, #12]
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	429a      	cmp	r2, r3
 8014bca:	d006      	beq.n	8014bda <ipfrag_free_pbuf_custom+0x36>
 8014bcc:	4b0b      	ldr	r3, [pc, #44]	; (8014bfc <ipfrag_free_pbuf_custom+0x58>)
 8014bce:	f240 22cf 	movw	r2, #719	; 0x2cf
 8014bd2:	490d      	ldr	r1, [pc, #52]	; (8014c08 <ipfrag_free_pbuf_custom+0x64>)
 8014bd4:	480b      	ldr	r0, [pc, #44]	; (8014c04 <ipfrag_free_pbuf_custom+0x60>)
 8014bd6:	f000 fbad 	bl	8015334 <iprintf>
  if (pcr->original != NULL) {
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	695b      	ldr	r3, [r3, #20]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d004      	beq.n	8014bec <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	695b      	ldr	r3, [r3, #20]
 8014be6:	4618      	mov	r0, r3
 8014be8:	f7f6 ff7a 	bl	800bae0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8014bec:	68f8      	ldr	r0, [r7, #12]
 8014bee:	f7ff ffbd 	bl	8014b6c <ip_frag_free_pbuf_custom_ref>
}
 8014bf2:	bf00      	nop
 8014bf4:	3710      	adds	r7, #16
 8014bf6:	46bd      	mov	sp, r7
 8014bf8:	bd80      	pop	{r7, pc}
 8014bfa:	bf00      	nop
 8014bfc:	08019a5c 	.word	0x08019a5c
 8014c00:	08019c20 	.word	0x08019c20
 8014c04:	08019aa4 	.word	0x08019aa4
 8014c08:	08019c2c 	.word	0x08019c2c

08014c0c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8014c0c:	b580      	push	{r7, lr}
 8014c0e:	b094      	sub	sp, #80	; 0x50
 8014c10:	af02      	add	r7, sp, #8
 8014c12:	60f8      	str	r0, [r7, #12]
 8014c14:	60b9      	str	r1, [r7, #8]
 8014c16:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8014c18:	2300      	movs	r3, #0
 8014c1a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8014c1e:	68bb      	ldr	r3, [r7, #8]
 8014c20:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014c22:	3b14      	subs	r3, #20
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	da00      	bge.n	8014c2a <ip4_frag+0x1e>
 8014c28:	3307      	adds	r3, #7
 8014c2a:	10db      	asrs	r3, r3, #3
 8014c2c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8014c2e:	2314      	movs	r3, #20
 8014c30:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	685b      	ldr	r3, [r3, #4]
 8014c36:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8014c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c3a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8014c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c3e:	781b      	ldrb	r3, [r3, #0]
 8014c40:	f003 030f 	and.w	r3, r3, #15
 8014c44:	b2db      	uxtb	r3, r3
 8014c46:	009b      	lsls	r3, r3, #2
 8014c48:	b2db      	uxtb	r3, r3
 8014c4a:	2b14      	cmp	r3, #20
 8014c4c:	d002      	beq.n	8014c54 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8014c4e:	f06f 0305 	mvn.w	r3, #5
 8014c52:	e110      	b.n	8014e76 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	895b      	ldrh	r3, [r3, #10]
 8014c58:	2b13      	cmp	r3, #19
 8014c5a:	d809      	bhi.n	8014c70 <ip4_frag+0x64>
 8014c5c:	4b88      	ldr	r3, [pc, #544]	; (8014e80 <ip4_frag+0x274>)
 8014c5e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8014c62:	4988      	ldr	r1, [pc, #544]	; (8014e84 <ip4_frag+0x278>)
 8014c64:	4888      	ldr	r0, [pc, #544]	; (8014e88 <ip4_frag+0x27c>)
 8014c66:	f000 fb65 	bl	8015334 <iprintf>
 8014c6a:	f06f 0305 	mvn.w	r3, #5
 8014c6e:	e102      	b.n	8014e76 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c72:	88db      	ldrh	r3, [r3, #6]
 8014c74:	b29b      	uxth	r3, r3
 8014c76:	4618      	mov	r0, r3
 8014c78:	f7f5 fb5e 	bl	800a338 <lwip_htons>
 8014c7c:	4603      	mov	r3, r0
 8014c7e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8014c80:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014c82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014c86:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8014c8a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014c8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014c90:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	891b      	ldrh	r3, [r3, #8]
 8014c96:	3b14      	subs	r3, #20
 8014c98:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8014c9c:	e0e1      	b.n	8014e62 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8014c9e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014ca0:	00db      	lsls	r3, r3, #3
 8014ca2:	b29b      	uxth	r3, r3
 8014ca4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014ca8:	4293      	cmp	r3, r2
 8014caa:	bf28      	it	cs
 8014cac:	4613      	movcs	r3, r2
 8014cae:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8014cb0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014cb4:	2114      	movs	r1, #20
 8014cb6:	200e      	movs	r0, #14
 8014cb8:	f7f6 fc2e 	bl	800b518 <pbuf_alloc>
 8014cbc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8014cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	f000 80d5 	beq.w	8014e70 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8014cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cc8:	895b      	ldrh	r3, [r3, #10]
 8014cca:	2b13      	cmp	r3, #19
 8014ccc:	d806      	bhi.n	8014cdc <ip4_frag+0xd0>
 8014cce:	4b6c      	ldr	r3, [pc, #432]	; (8014e80 <ip4_frag+0x274>)
 8014cd0:	f44f 7249 	mov.w	r2, #804	; 0x324
 8014cd4:	496d      	ldr	r1, [pc, #436]	; (8014e8c <ip4_frag+0x280>)
 8014cd6:	486c      	ldr	r0, [pc, #432]	; (8014e88 <ip4_frag+0x27c>)
 8014cd8:	f000 fb2c 	bl	8015334 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cde:	685b      	ldr	r3, [r3, #4]
 8014ce0:	2214      	movs	r2, #20
 8014ce2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014ce4:	4618      	mov	r0, r3
 8014ce6:	f000 faf5 	bl	80152d4 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8014cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cec:	685b      	ldr	r3, [r3, #4]
 8014cee:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8014cf0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014cf2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8014cf6:	e064      	b.n	8014dc2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	895a      	ldrh	r2, [r3, #10]
 8014cfc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014cfe:	1ad3      	subs	r3, r2, r3
 8014d00:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	895b      	ldrh	r3, [r3, #10]
 8014d06:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014d08:	429a      	cmp	r2, r3
 8014d0a:	d906      	bls.n	8014d1a <ip4_frag+0x10e>
 8014d0c:	4b5c      	ldr	r3, [pc, #368]	; (8014e80 <ip4_frag+0x274>)
 8014d0e:	f240 322d 	movw	r2, #813	; 0x32d
 8014d12:	495f      	ldr	r1, [pc, #380]	; (8014e90 <ip4_frag+0x284>)
 8014d14:	485c      	ldr	r0, [pc, #368]	; (8014e88 <ip4_frag+0x27c>)
 8014d16:	f000 fb0d 	bl	8015334 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8014d1a:	8bfa      	ldrh	r2, [r7, #30]
 8014d1c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014d20:	4293      	cmp	r3, r2
 8014d22:	bf28      	it	cs
 8014d24:	4613      	movcs	r3, r2
 8014d26:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8014d2a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d105      	bne.n	8014d3e <ip4_frag+0x132>
        poff = 0;
 8014d32:	2300      	movs	r3, #0
 8014d34:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	60fb      	str	r3, [r7, #12]
        continue;
 8014d3c:	e041      	b.n	8014dc2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8014d3e:	f7ff ff0d 	bl	8014b5c <ip_frag_alloc_pbuf_custom_ref>
 8014d42:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8014d44:	69bb      	ldr	r3, [r7, #24]
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d103      	bne.n	8014d52 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8014d4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014d4c:	f7f6 fec8 	bl	800bae0 <pbuf_free>
        goto memerr;
 8014d50:	e08f      	b.n	8014e72 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014d52:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014d58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014d5a:	4413      	add	r3, r2
 8014d5c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8014d60:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8014d64:	9201      	str	r2, [sp, #4]
 8014d66:	9300      	str	r3, [sp, #0]
 8014d68:	4603      	mov	r3, r0
 8014d6a:	2241      	movs	r2, #65	; 0x41
 8014d6c:	2000      	movs	r0, #0
 8014d6e:	f7f6 fcfd 	bl	800b76c <pbuf_alloced_custom>
 8014d72:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8014d74:	697b      	ldr	r3, [r7, #20]
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d106      	bne.n	8014d88 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8014d7a:	69b8      	ldr	r0, [r7, #24]
 8014d7c:	f7ff fef6 	bl	8014b6c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8014d80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014d82:	f7f6 fead 	bl	800bae0 <pbuf_free>
        goto memerr;
 8014d86:	e074      	b.n	8014e72 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8014d88:	68f8      	ldr	r0, [r7, #12]
 8014d8a:	f7f6 ff4f 	bl	800bc2c <pbuf_ref>
      pcr->original = p;
 8014d8e:	69bb      	ldr	r3, [r7, #24]
 8014d90:	68fa      	ldr	r2, [r7, #12]
 8014d92:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014d94:	69bb      	ldr	r3, [r7, #24]
 8014d96:	4a3f      	ldr	r2, [pc, #252]	; (8014e94 <ip4_frag+0x288>)
 8014d98:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8014d9a:	6979      	ldr	r1, [r7, #20]
 8014d9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014d9e:	f7f6 ff6d 	bl	800bc7c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8014da2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8014da6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014daa:	1ad3      	subs	r3, r2, r3
 8014dac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8014db0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d004      	beq.n	8014dc2 <ip4_frag+0x1b6>
        poff = 0;
 8014db8:	2300      	movs	r3, #0
 8014dba:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8014dc2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d196      	bne.n	8014cf8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8014dca:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014dcc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014dd0:	4413      	add	r3, r2
 8014dd2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014dd4:	68bb      	ldr	r3, [r7, #8]
 8014dd6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014dd8:	f1a3 0213 	sub.w	r2, r3, #19
 8014ddc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014de0:	429a      	cmp	r2, r3
 8014de2:	bfcc      	ite	gt
 8014de4:	2301      	movgt	r3, #1
 8014de6:	2300      	movle	r3, #0
 8014de8:	b2db      	uxtb	r3, r3
 8014dea:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8014dec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014df0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014df4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8014df6:	6a3b      	ldr	r3, [r7, #32]
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d002      	beq.n	8014e02 <ip4_frag+0x1f6>
 8014dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d003      	beq.n	8014e0a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8014e02:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014e04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014e08:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8014e0a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014e0c:	4618      	mov	r0, r3
 8014e0e:	f7f5 fa93 	bl	800a338 <lwip_htons>
 8014e12:	4603      	mov	r3, r0
 8014e14:	461a      	mov	r2, r3
 8014e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e18:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8014e1a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014e1c:	3314      	adds	r3, #20
 8014e1e:	b29b      	uxth	r3, r3
 8014e20:	4618      	mov	r0, r3
 8014e22:	f7f5 fa89 	bl	800a338 <lwip_htons>
 8014e26:	4603      	mov	r3, r0
 8014e28:	461a      	mov	r2, r3
 8014e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e2c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8014e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e30:	2200      	movs	r2, #0
 8014e32:	729a      	strb	r2, [r3, #10]
 8014e34:	2200      	movs	r2, #0
 8014e36:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014e38:	68bb      	ldr	r3, [r7, #8]
 8014e3a:	695b      	ldr	r3, [r3, #20]
 8014e3c:	687a      	ldr	r2, [r7, #4]
 8014e3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014e40:	68b8      	ldr	r0, [r7, #8]
 8014e42:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014e44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014e46:	f7f6 fe4b 	bl	800bae0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8014e4a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014e4e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014e50:	1ad3      	subs	r3, r2, r3
 8014e52:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8014e56:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8014e5a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014e5c:	4413      	add	r3, r2
 8014e5e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8014e62:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	f47f af19 	bne.w	8014c9e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8014e6c:	2300      	movs	r3, #0
 8014e6e:	e002      	b.n	8014e76 <ip4_frag+0x26a>
      goto memerr;
 8014e70:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8014e72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014e76:	4618      	mov	r0, r3
 8014e78:	3748      	adds	r7, #72	; 0x48
 8014e7a:	46bd      	mov	sp, r7
 8014e7c:	bd80      	pop	{r7, pc}
 8014e7e:	bf00      	nop
 8014e80:	08019a5c 	.word	0x08019a5c
 8014e84:	08019c38 	.word	0x08019c38
 8014e88:	08019aa4 	.word	0x08019aa4
 8014e8c:	08019c54 	.word	0x08019c54
 8014e90:	08019c74 	.word	0x08019c74
 8014e94:	08014ba5 	.word	0x08014ba5

08014e98 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014e98:	b580      	push	{r7, lr}
 8014e9a:	b086      	sub	sp, #24
 8014e9c:	af00      	add	r7, sp, #0
 8014e9e:	6078      	str	r0, [r7, #4]
 8014ea0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8014ea2:	230e      	movs	r3, #14
 8014ea4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	895b      	ldrh	r3, [r3, #10]
 8014eaa:	2b0e      	cmp	r3, #14
 8014eac:	d96e      	bls.n	8014f8c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	7bdb      	ldrb	r3, [r3, #15]
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d106      	bne.n	8014ec4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8014eb6:	683b      	ldr	r3, [r7, #0]
 8014eb8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014ebc:	3301      	adds	r3, #1
 8014ebe:	b2da      	uxtb	r2, r3
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	685b      	ldr	r3, [r3, #4]
 8014ec8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8014eca:	693b      	ldr	r3, [r7, #16]
 8014ecc:	7b1a      	ldrb	r2, [r3, #12]
 8014ece:	7b5b      	ldrb	r3, [r3, #13]
 8014ed0:	021b      	lsls	r3, r3, #8
 8014ed2:	4313      	orrs	r3, r2
 8014ed4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014ed6:	693b      	ldr	r3, [r7, #16]
 8014ed8:	781b      	ldrb	r3, [r3, #0]
 8014eda:	f003 0301 	and.w	r3, r3, #1
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d023      	beq.n	8014f2a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014ee2:	693b      	ldr	r3, [r7, #16]
 8014ee4:	781b      	ldrb	r3, [r3, #0]
 8014ee6:	2b01      	cmp	r3, #1
 8014ee8:	d10f      	bne.n	8014f0a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014eea:	693b      	ldr	r3, [r7, #16]
 8014eec:	785b      	ldrb	r3, [r3, #1]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d11b      	bne.n	8014f2a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014ef2:	693b      	ldr	r3, [r7, #16]
 8014ef4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014ef6:	2b5e      	cmp	r3, #94	; 0x5e
 8014ef8:	d117      	bne.n	8014f2a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	7b5b      	ldrb	r3, [r3, #13]
 8014efe:	f043 0310 	orr.w	r3, r3, #16
 8014f02:	b2da      	uxtb	r2, r3
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	735a      	strb	r2, [r3, #13]
 8014f08:	e00f      	b.n	8014f2a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8014f0a:	693b      	ldr	r3, [r7, #16]
 8014f0c:	2206      	movs	r2, #6
 8014f0e:	4928      	ldr	r1, [pc, #160]	; (8014fb0 <ethernet_input+0x118>)
 8014f10:	4618      	mov	r0, r3
 8014f12:	f000 f9d1 	bl	80152b8 <memcmp>
 8014f16:	4603      	mov	r3, r0
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d106      	bne.n	8014f2a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	7b5b      	ldrb	r3, [r3, #13]
 8014f20:	f043 0308 	orr.w	r3, r3, #8
 8014f24:	b2da      	uxtb	r2, r3
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014f2a:	89fb      	ldrh	r3, [r7, #14]
 8014f2c:	2b08      	cmp	r3, #8
 8014f2e:	d003      	beq.n	8014f38 <ethernet_input+0xa0>
 8014f30:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8014f34:	d014      	beq.n	8014f60 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014f36:	e032      	b.n	8014f9e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014f38:	683b      	ldr	r3, [r7, #0]
 8014f3a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014f3e:	f003 0308 	and.w	r3, r3, #8
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d024      	beq.n	8014f90 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014f46:	8afb      	ldrh	r3, [r7, #22]
 8014f48:	4619      	mov	r1, r3
 8014f4a:	6878      	ldr	r0, [r7, #4]
 8014f4c:	f7f6 fd42 	bl	800b9d4 <pbuf_remove_header>
 8014f50:	4603      	mov	r3, r0
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d11e      	bne.n	8014f94 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8014f56:	6839      	ldr	r1, [r7, #0]
 8014f58:	6878      	ldr	r0, [r7, #4]
 8014f5a:	f7fe fdfd 	bl	8013b58 <ip4_input>
      break;
 8014f5e:	e013      	b.n	8014f88 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014f60:	683b      	ldr	r3, [r7, #0]
 8014f62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014f66:	f003 0308 	and.w	r3, r3, #8
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d014      	beq.n	8014f98 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014f6e:	8afb      	ldrh	r3, [r7, #22]
 8014f70:	4619      	mov	r1, r3
 8014f72:	6878      	ldr	r0, [r7, #4]
 8014f74:	f7f6 fd2e 	bl	800b9d4 <pbuf_remove_header>
 8014f78:	4603      	mov	r3, r0
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d10e      	bne.n	8014f9c <ethernet_input+0x104>
        etharp_input(p, netif);
 8014f7e:	6839      	ldr	r1, [r7, #0]
 8014f80:	6878      	ldr	r0, [r7, #4]
 8014f82:	f7fd ff9d 	bl	8012ec0 <etharp_input>
      break;
 8014f86:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8014f88:	2300      	movs	r3, #0
 8014f8a:	e00c      	b.n	8014fa6 <ethernet_input+0x10e>
    goto free_and_return;
 8014f8c:	bf00      	nop
 8014f8e:	e006      	b.n	8014f9e <ethernet_input+0x106>
        goto free_and_return;
 8014f90:	bf00      	nop
 8014f92:	e004      	b.n	8014f9e <ethernet_input+0x106>
        goto free_and_return;
 8014f94:	bf00      	nop
 8014f96:	e002      	b.n	8014f9e <ethernet_input+0x106>
        goto free_and_return;
 8014f98:	bf00      	nop
 8014f9a:	e000      	b.n	8014f9e <ethernet_input+0x106>
        goto free_and_return;
 8014f9c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8014f9e:	6878      	ldr	r0, [r7, #4]
 8014fa0:	f7f6 fd9e 	bl	800bae0 <pbuf_free>
  return ERR_OK;
 8014fa4:	2300      	movs	r3, #0
}
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	3718      	adds	r7, #24
 8014faa:	46bd      	mov	sp, r7
 8014fac:	bd80      	pop	{r7, pc}
 8014fae:	bf00      	nop
 8014fb0:	08019e54 	.word	0x08019e54

08014fb4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014fb4:	b580      	push	{r7, lr}
 8014fb6:	b086      	sub	sp, #24
 8014fb8:	af00      	add	r7, sp, #0
 8014fba:	60f8      	str	r0, [r7, #12]
 8014fbc:	60b9      	str	r1, [r7, #8]
 8014fbe:	607a      	str	r2, [r7, #4]
 8014fc0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014fc2:	8c3b      	ldrh	r3, [r7, #32]
 8014fc4:	4618      	mov	r0, r3
 8014fc6:	f7f5 f9b7 	bl	800a338 <lwip_htons>
 8014fca:	4603      	mov	r3, r0
 8014fcc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014fce:	210e      	movs	r1, #14
 8014fd0:	68b8      	ldr	r0, [r7, #8]
 8014fd2:	f7f6 fcef 	bl	800b9b4 <pbuf_add_header>
 8014fd6:	4603      	mov	r3, r0
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d125      	bne.n	8015028 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014fdc:	68bb      	ldr	r3, [r7, #8]
 8014fde:	685b      	ldr	r3, [r3, #4]
 8014fe0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014fe2:	693b      	ldr	r3, [r7, #16]
 8014fe4:	8afa      	ldrh	r2, [r7, #22]
 8014fe6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014fe8:	693b      	ldr	r3, [r7, #16]
 8014fea:	2206      	movs	r2, #6
 8014fec:	6839      	ldr	r1, [r7, #0]
 8014fee:	4618      	mov	r0, r3
 8014ff0:	f000 f970 	bl	80152d4 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014ff4:	693b      	ldr	r3, [r7, #16]
 8014ff6:	3306      	adds	r3, #6
 8014ff8:	2206      	movs	r2, #6
 8014ffa:	6879      	ldr	r1, [r7, #4]
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	f000 f969 	bl	80152d4 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8015002:	68fb      	ldr	r3, [r7, #12]
 8015004:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015008:	2b06      	cmp	r3, #6
 801500a:	d006      	beq.n	801501a <ethernet_output+0x66>
 801500c:	4b0a      	ldr	r3, [pc, #40]	; (8015038 <ethernet_output+0x84>)
 801500e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8015012:	490a      	ldr	r1, [pc, #40]	; (801503c <ethernet_output+0x88>)
 8015014:	480a      	ldr	r0, [pc, #40]	; (8015040 <ethernet_output+0x8c>)
 8015016:	f000 f98d 	bl	8015334 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	699b      	ldr	r3, [r3, #24]
 801501e:	68b9      	ldr	r1, [r7, #8]
 8015020:	68f8      	ldr	r0, [r7, #12]
 8015022:	4798      	blx	r3
 8015024:	4603      	mov	r3, r0
 8015026:	e002      	b.n	801502e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8015028:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801502a:	f06f 0301 	mvn.w	r3, #1
}
 801502e:	4618      	mov	r0, r3
 8015030:	3718      	adds	r7, #24
 8015032:	46bd      	mov	sp, r7
 8015034:	bd80      	pop	{r7, pc}
 8015036:	bf00      	nop
 8015038:	08019c84 	.word	0x08019c84
 801503c:	08019cbc 	.word	0x08019cbc
 8015040:	08019cf0 	.word	0x08019cf0

08015044 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8015044:	b580      	push	{r7, lr}
 8015046:	b086      	sub	sp, #24
 8015048:	af00      	add	r7, sp, #0
 801504a:	6078      	str	r0, [r7, #4]
 801504c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801504e:	683b      	ldr	r3, [r7, #0]
 8015050:	60bb      	str	r3, [r7, #8]
 8015052:	2304      	movs	r3, #4
 8015054:	60fb      	str	r3, [r7, #12]
 8015056:	2300      	movs	r3, #0
 8015058:	613b      	str	r3, [r7, #16]
 801505a:	2300      	movs	r3, #0
 801505c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801505e:	f107 0308 	add.w	r3, r7, #8
 8015062:	2100      	movs	r1, #0
 8015064:	4618      	mov	r0, r3
 8015066:	f7f0 fd1b 	bl	8005aa0 <osMessageCreate>
 801506a:	4602      	mov	r2, r0
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	2b00      	cmp	r3, #0
 8015076:	d102      	bne.n	801507e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8015078:	f04f 33ff 	mov.w	r3, #4294967295
 801507c:	e000      	b.n	8015080 <sys_mbox_new+0x3c>

  return ERR_OK;
 801507e:	2300      	movs	r3, #0
}
 8015080:	4618      	mov	r0, r3
 8015082:	3718      	adds	r7, #24
 8015084:	46bd      	mov	sp, r7
 8015086:	bd80      	pop	{r7, pc}

08015088 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8015088:	b580      	push	{r7, lr}
 801508a:	b084      	sub	sp, #16
 801508c:	af00      	add	r7, sp, #0
 801508e:	6078      	str	r0, [r7, #4]
 8015090:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	6839      	ldr	r1, [r7, #0]
 8015098:	2200      	movs	r2, #0
 801509a:	4618      	mov	r0, r3
 801509c:	f7f0 fd28 	bl	8005af0 <osMessagePut>
 80150a0:	4603      	mov	r3, r0
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d102      	bne.n	80150ac <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80150a6:	2300      	movs	r3, #0
 80150a8:	73fb      	strb	r3, [r7, #15]
 80150aa:	e001      	b.n	80150b0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80150ac:	23ff      	movs	r3, #255	; 0xff
 80150ae:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80150b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80150b4:	4618      	mov	r0, r3
 80150b6:	3710      	adds	r7, #16
 80150b8:	46bd      	mov	sp, r7
 80150ba:	bd80      	pop	{r7, pc}

080150bc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80150bc:	b580      	push	{r7, lr}
 80150be:	b08c      	sub	sp, #48	; 0x30
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	61f8      	str	r0, [r7, #28]
 80150c4:	61b9      	str	r1, [r7, #24]
 80150c6:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80150c8:	f7f0 fb27 	bl	800571a <osKernelSysTick>
 80150cc:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80150ce:	697b      	ldr	r3, [r7, #20]
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d017      	beq.n	8015104 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80150d4:	69fb      	ldr	r3, [r7, #28]
 80150d6:	6819      	ldr	r1, [r3, #0]
 80150d8:	f107 0320 	add.w	r3, r7, #32
 80150dc:	697a      	ldr	r2, [r7, #20]
 80150de:	4618      	mov	r0, r3
 80150e0:	f7f0 fd46 	bl	8005b70 <osMessageGet>

    if(event.status == osEventMessage)
 80150e4:	6a3b      	ldr	r3, [r7, #32]
 80150e6:	2b10      	cmp	r3, #16
 80150e8:	d109      	bne.n	80150fe <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80150ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150ec:	461a      	mov	r2, r3
 80150ee:	69bb      	ldr	r3, [r7, #24]
 80150f0:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80150f2:	f7f0 fb12 	bl	800571a <osKernelSysTick>
 80150f6:	4602      	mov	r2, r0
 80150f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150fa:	1ad3      	subs	r3, r2, r3
 80150fc:	e019      	b.n	8015132 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80150fe:	f04f 33ff 	mov.w	r3, #4294967295
 8015102:	e016      	b.n	8015132 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8015104:	69fb      	ldr	r3, [r7, #28]
 8015106:	6819      	ldr	r1, [r3, #0]
 8015108:	463b      	mov	r3, r7
 801510a:	f04f 32ff 	mov.w	r2, #4294967295
 801510e:	4618      	mov	r0, r3
 8015110:	f7f0 fd2e 	bl	8005b70 <osMessageGet>
 8015114:	f107 0320 	add.w	r3, r7, #32
 8015118:	463a      	mov	r2, r7
 801511a:	ca07      	ldmia	r2, {r0, r1, r2}
 801511c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8015120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015122:	461a      	mov	r2, r3
 8015124:	69bb      	ldr	r3, [r7, #24]
 8015126:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8015128:	f7f0 faf7 	bl	800571a <osKernelSysTick>
 801512c:	4602      	mov	r2, r0
 801512e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015130:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8015132:	4618      	mov	r0, r3
 8015134:	3730      	adds	r7, #48	; 0x30
 8015136:	46bd      	mov	sp, r7
 8015138:	bd80      	pop	{r7, pc}

0801513a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801513a:	b480      	push	{r7}
 801513c:	b083      	sub	sp, #12
 801513e:	af00      	add	r7, sp, #0
 8015140:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	681b      	ldr	r3, [r3, #0]
 8015146:	2b00      	cmp	r3, #0
 8015148:	d101      	bne.n	801514e <sys_mbox_valid+0x14>
    return 0;
 801514a:	2300      	movs	r3, #0
 801514c:	e000      	b.n	8015150 <sys_mbox_valid+0x16>
  else
    return 1;
 801514e:	2301      	movs	r3, #1
}
 8015150:	4618      	mov	r0, r3
 8015152:	370c      	adds	r7, #12
 8015154:	46bd      	mov	sp, r7
 8015156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801515a:	4770      	bx	lr

0801515c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801515c:	b580      	push	{r7, lr}
 801515e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8015160:	4803      	ldr	r0, [pc, #12]	; (8015170 <sys_init+0x14>)
 8015162:	f7f0 fb4a 	bl	80057fa <osMutexCreate>
 8015166:	4603      	mov	r3, r0
 8015168:	4a02      	ldr	r2, [pc, #8]	; (8015174 <sys_init+0x18>)
 801516a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801516c:	bf00      	nop
 801516e:	bd80      	pop	{r7, pc}
 8015170:	08019e64 	.word	0x08019e64
 8015174:	2000ab38 	.word	0x2000ab38

08015178 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8015178:	b580      	push	{r7, lr}
 801517a:	b084      	sub	sp, #16
 801517c:	af00      	add	r7, sp, #0
 801517e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8015180:	2300      	movs	r3, #0
 8015182:	60bb      	str	r3, [r7, #8]
 8015184:	2300      	movs	r3, #0
 8015186:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8015188:	f107 0308 	add.w	r3, r7, #8
 801518c:	4618      	mov	r0, r3
 801518e:	f7f0 fb34 	bl	80057fa <osMutexCreate>
 8015192:	4602      	mov	r2, r0
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	2b00      	cmp	r3, #0
 801519e:	d102      	bne.n	80151a6 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80151a0:	f04f 33ff 	mov.w	r3, #4294967295
 80151a4:	e000      	b.n	80151a8 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80151a6:	2300      	movs	r3, #0
}
 80151a8:	4618      	mov	r0, r3
 80151aa:	3710      	adds	r7, #16
 80151ac:	46bd      	mov	sp, r7
 80151ae:	bd80      	pop	{r7, pc}

080151b0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80151b0:	b580      	push	{r7, lr}
 80151b2:	b082      	sub	sp, #8
 80151b4:	af00      	add	r7, sp, #0
 80151b6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	681b      	ldr	r3, [r3, #0]
 80151bc:	f04f 31ff 	mov.w	r1, #4294967295
 80151c0:	4618      	mov	r0, r3
 80151c2:	f7f0 fb33 	bl	800582c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80151c6:	bf00      	nop
 80151c8:	3708      	adds	r7, #8
 80151ca:	46bd      	mov	sp, r7
 80151cc:	bd80      	pop	{r7, pc}

080151ce <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80151ce:	b580      	push	{r7, lr}
 80151d0:	b082      	sub	sp, #8
 80151d2:	af00      	add	r7, sp, #0
 80151d4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	4618      	mov	r0, r3
 80151dc:	f7f0 fb74 	bl	80058c8 <osMutexRelease>
}
 80151e0:	bf00      	nop
 80151e2:	3708      	adds	r7, #8
 80151e4:	46bd      	mov	sp, r7
 80151e6:	bd80      	pop	{r7, pc}

080151e8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80151e8:	b580      	push	{r7, lr}
 80151ea:	b08c      	sub	sp, #48	; 0x30
 80151ec:	af00      	add	r7, sp, #0
 80151ee:	60f8      	str	r0, [r7, #12]
 80151f0:	60b9      	str	r1, [r7, #8]
 80151f2:	607a      	str	r2, [r7, #4]
 80151f4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80151f6:	f107 0314 	add.w	r3, r7, #20
 80151fa:	2200      	movs	r2, #0
 80151fc:	601a      	str	r2, [r3, #0]
 80151fe:	605a      	str	r2, [r3, #4]
 8015200:	609a      	str	r2, [r3, #8]
 8015202:	60da      	str	r2, [r3, #12]
 8015204:	611a      	str	r2, [r3, #16]
 8015206:	615a      	str	r2, [r3, #20]
 8015208:	619a      	str	r2, [r3, #24]
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	617b      	str	r3, [r7, #20]
 801520e:	68bb      	ldr	r3, [r7, #8]
 8015210:	61bb      	str	r3, [r7, #24]
 8015212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015214:	b21b      	sxth	r3, r3
 8015216:	83bb      	strh	r3, [r7, #28]
 8015218:	683b      	ldr	r3, [r7, #0]
 801521a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801521c:	f107 0314 	add.w	r3, r7, #20
 8015220:	6879      	ldr	r1, [r7, #4]
 8015222:	4618      	mov	r0, r3
 8015224:	f7f0 fa89 	bl	800573a <osThreadCreate>
 8015228:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801522a:	4618      	mov	r0, r3
 801522c:	3730      	adds	r7, #48	; 0x30
 801522e:	46bd      	mov	sp, r7
 8015230:	bd80      	pop	{r7, pc}
	...

08015234 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8015234:	b580      	push	{r7, lr}
 8015236:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8015238:	4b04      	ldr	r3, [pc, #16]	; (801524c <sys_arch_protect+0x18>)
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	f04f 31ff 	mov.w	r1, #4294967295
 8015240:	4618      	mov	r0, r3
 8015242:	f7f0 faf3 	bl	800582c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8015246:	2301      	movs	r3, #1
}
 8015248:	4618      	mov	r0, r3
 801524a:	bd80      	pop	{r7, pc}
 801524c:	2000ab38 	.word	0x2000ab38

08015250 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8015250:	b580      	push	{r7, lr}
 8015252:	b082      	sub	sp, #8
 8015254:	af00      	add	r7, sp, #0
 8015256:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8015258:	4b04      	ldr	r3, [pc, #16]	; (801526c <sys_arch_unprotect+0x1c>)
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	4618      	mov	r0, r3
 801525e:	f7f0 fb33 	bl	80058c8 <osMutexRelease>
}
 8015262:	bf00      	nop
 8015264:	3708      	adds	r7, #8
 8015266:	46bd      	mov	sp, r7
 8015268:	bd80      	pop	{r7, pc}
 801526a:	bf00      	nop
 801526c:	2000ab38 	.word	0x2000ab38

08015270 <__libc_init_array>:
 8015270:	b570      	push	{r4, r5, r6, lr}
 8015272:	4d0d      	ldr	r5, [pc, #52]	; (80152a8 <__libc_init_array+0x38>)
 8015274:	4c0d      	ldr	r4, [pc, #52]	; (80152ac <__libc_init_array+0x3c>)
 8015276:	1b64      	subs	r4, r4, r5
 8015278:	10a4      	asrs	r4, r4, #2
 801527a:	2600      	movs	r6, #0
 801527c:	42a6      	cmp	r6, r4
 801527e:	d109      	bne.n	8015294 <__libc_init_array+0x24>
 8015280:	4d0b      	ldr	r5, [pc, #44]	; (80152b0 <__libc_init_array+0x40>)
 8015282:	4c0c      	ldr	r4, [pc, #48]	; (80152b4 <__libc_init_array+0x44>)
 8015284:	f001 faa4 	bl	80167d0 <_init>
 8015288:	1b64      	subs	r4, r4, r5
 801528a:	10a4      	asrs	r4, r4, #2
 801528c:	2600      	movs	r6, #0
 801528e:	42a6      	cmp	r6, r4
 8015290:	d105      	bne.n	801529e <__libc_init_array+0x2e>
 8015292:	bd70      	pop	{r4, r5, r6, pc}
 8015294:	f855 3b04 	ldr.w	r3, [r5], #4
 8015298:	4798      	blx	r3
 801529a:	3601      	adds	r6, #1
 801529c:	e7ee      	b.n	801527c <__libc_init_array+0xc>
 801529e:	f855 3b04 	ldr.w	r3, [r5], #4
 80152a2:	4798      	blx	r3
 80152a4:	3601      	adds	r6, #1
 80152a6:	e7f2      	b.n	801528e <__libc_init_array+0x1e>
 80152a8:	0801a0c4 	.word	0x0801a0c4
 80152ac:	0801a0c4 	.word	0x0801a0c4
 80152b0:	0801a0c4 	.word	0x0801a0c4
 80152b4:	0801a0c8 	.word	0x0801a0c8

080152b8 <memcmp>:
 80152b8:	b530      	push	{r4, r5, lr}
 80152ba:	3901      	subs	r1, #1
 80152bc:	2400      	movs	r4, #0
 80152be:	42a2      	cmp	r2, r4
 80152c0:	d101      	bne.n	80152c6 <memcmp+0xe>
 80152c2:	2000      	movs	r0, #0
 80152c4:	e005      	b.n	80152d2 <memcmp+0x1a>
 80152c6:	5d03      	ldrb	r3, [r0, r4]
 80152c8:	3401      	adds	r4, #1
 80152ca:	5d0d      	ldrb	r5, [r1, r4]
 80152cc:	42ab      	cmp	r3, r5
 80152ce:	d0f6      	beq.n	80152be <memcmp+0x6>
 80152d0:	1b58      	subs	r0, r3, r5
 80152d2:	bd30      	pop	{r4, r5, pc}

080152d4 <memcpy>:
 80152d4:	440a      	add	r2, r1
 80152d6:	4291      	cmp	r1, r2
 80152d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80152dc:	d100      	bne.n	80152e0 <memcpy+0xc>
 80152de:	4770      	bx	lr
 80152e0:	b510      	push	{r4, lr}
 80152e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80152e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80152ea:	4291      	cmp	r1, r2
 80152ec:	d1f9      	bne.n	80152e2 <memcpy+0xe>
 80152ee:	bd10      	pop	{r4, pc}

080152f0 <memmove>:
 80152f0:	4288      	cmp	r0, r1
 80152f2:	b510      	push	{r4, lr}
 80152f4:	eb01 0402 	add.w	r4, r1, r2
 80152f8:	d902      	bls.n	8015300 <memmove+0x10>
 80152fa:	4284      	cmp	r4, r0
 80152fc:	4623      	mov	r3, r4
 80152fe:	d807      	bhi.n	8015310 <memmove+0x20>
 8015300:	1e43      	subs	r3, r0, #1
 8015302:	42a1      	cmp	r1, r4
 8015304:	d008      	beq.n	8015318 <memmove+0x28>
 8015306:	f811 2b01 	ldrb.w	r2, [r1], #1
 801530a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801530e:	e7f8      	b.n	8015302 <memmove+0x12>
 8015310:	4402      	add	r2, r0
 8015312:	4601      	mov	r1, r0
 8015314:	428a      	cmp	r2, r1
 8015316:	d100      	bne.n	801531a <memmove+0x2a>
 8015318:	bd10      	pop	{r4, pc}
 801531a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801531e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015322:	e7f7      	b.n	8015314 <memmove+0x24>

08015324 <memset>:
 8015324:	4402      	add	r2, r0
 8015326:	4603      	mov	r3, r0
 8015328:	4293      	cmp	r3, r2
 801532a:	d100      	bne.n	801532e <memset+0xa>
 801532c:	4770      	bx	lr
 801532e:	f803 1b01 	strb.w	r1, [r3], #1
 8015332:	e7f9      	b.n	8015328 <memset+0x4>

08015334 <iprintf>:
 8015334:	b40f      	push	{r0, r1, r2, r3}
 8015336:	4b0a      	ldr	r3, [pc, #40]	; (8015360 <iprintf+0x2c>)
 8015338:	b513      	push	{r0, r1, r4, lr}
 801533a:	681c      	ldr	r4, [r3, #0]
 801533c:	b124      	cbz	r4, 8015348 <iprintf+0x14>
 801533e:	69a3      	ldr	r3, [r4, #24]
 8015340:	b913      	cbnz	r3, 8015348 <iprintf+0x14>
 8015342:	4620      	mov	r0, r4
 8015344:	f000 faf0 	bl	8015928 <__sinit>
 8015348:	ab05      	add	r3, sp, #20
 801534a:	9a04      	ldr	r2, [sp, #16]
 801534c:	68a1      	ldr	r1, [r4, #8]
 801534e:	9301      	str	r3, [sp, #4]
 8015350:	4620      	mov	r0, r4
 8015352:	f000 fe37 	bl	8015fc4 <_vfiprintf_r>
 8015356:	b002      	add	sp, #8
 8015358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801535c:	b004      	add	sp, #16
 801535e:	4770      	bx	lr
 8015360:	2000001c 	.word	0x2000001c

08015364 <_puts_r>:
 8015364:	b570      	push	{r4, r5, r6, lr}
 8015366:	460e      	mov	r6, r1
 8015368:	4605      	mov	r5, r0
 801536a:	b118      	cbz	r0, 8015374 <_puts_r+0x10>
 801536c:	6983      	ldr	r3, [r0, #24]
 801536e:	b90b      	cbnz	r3, 8015374 <_puts_r+0x10>
 8015370:	f000 fada 	bl	8015928 <__sinit>
 8015374:	69ab      	ldr	r3, [r5, #24]
 8015376:	68ac      	ldr	r4, [r5, #8]
 8015378:	b913      	cbnz	r3, 8015380 <_puts_r+0x1c>
 801537a:	4628      	mov	r0, r5
 801537c:	f000 fad4 	bl	8015928 <__sinit>
 8015380:	4b2c      	ldr	r3, [pc, #176]	; (8015434 <_puts_r+0xd0>)
 8015382:	429c      	cmp	r4, r3
 8015384:	d120      	bne.n	80153c8 <_puts_r+0x64>
 8015386:	686c      	ldr	r4, [r5, #4]
 8015388:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801538a:	07db      	lsls	r3, r3, #31
 801538c:	d405      	bmi.n	801539a <_puts_r+0x36>
 801538e:	89a3      	ldrh	r3, [r4, #12]
 8015390:	0598      	lsls	r0, r3, #22
 8015392:	d402      	bmi.n	801539a <_puts_r+0x36>
 8015394:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015396:	f000 fb77 	bl	8015a88 <__retarget_lock_acquire_recursive>
 801539a:	89a3      	ldrh	r3, [r4, #12]
 801539c:	0719      	lsls	r1, r3, #28
 801539e:	d51d      	bpl.n	80153dc <_puts_r+0x78>
 80153a0:	6923      	ldr	r3, [r4, #16]
 80153a2:	b1db      	cbz	r3, 80153dc <_puts_r+0x78>
 80153a4:	3e01      	subs	r6, #1
 80153a6:	68a3      	ldr	r3, [r4, #8]
 80153a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80153ac:	3b01      	subs	r3, #1
 80153ae:	60a3      	str	r3, [r4, #8]
 80153b0:	bb39      	cbnz	r1, 8015402 <_puts_r+0x9e>
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	da38      	bge.n	8015428 <_puts_r+0xc4>
 80153b6:	4622      	mov	r2, r4
 80153b8:	210a      	movs	r1, #10
 80153ba:	4628      	mov	r0, r5
 80153bc:	f000 f8bc 	bl	8015538 <__swbuf_r>
 80153c0:	3001      	adds	r0, #1
 80153c2:	d011      	beq.n	80153e8 <_puts_r+0x84>
 80153c4:	250a      	movs	r5, #10
 80153c6:	e011      	b.n	80153ec <_puts_r+0x88>
 80153c8:	4b1b      	ldr	r3, [pc, #108]	; (8015438 <_puts_r+0xd4>)
 80153ca:	429c      	cmp	r4, r3
 80153cc:	d101      	bne.n	80153d2 <_puts_r+0x6e>
 80153ce:	68ac      	ldr	r4, [r5, #8]
 80153d0:	e7da      	b.n	8015388 <_puts_r+0x24>
 80153d2:	4b1a      	ldr	r3, [pc, #104]	; (801543c <_puts_r+0xd8>)
 80153d4:	429c      	cmp	r4, r3
 80153d6:	bf08      	it	eq
 80153d8:	68ec      	ldreq	r4, [r5, #12]
 80153da:	e7d5      	b.n	8015388 <_puts_r+0x24>
 80153dc:	4621      	mov	r1, r4
 80153de:	4628      	mov	r0, r5
 80153e0:	f000 f8fc 	bl	80155dc <__swsetup_r>
 80153e4:	2800      	cmp	r0, #0
 80153e6:	d0dd      	beq.n	80153a4 <_puts_r+0x40>
 80153e8:	f04f 35ff 	mov.w	r5, #4294967295
 80153ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80153ee:	07da      	lsls	r2, r3, #31
 80153f0:	d405      	bmi.n	80153fe <_puts_r+0x9a>
 80153f2:	89a3      	ldrh	r3, [r4, #12]
 80153f4:	059b      	lsls	r3, r3, #22
 80153f6:	d402      	bmi.n	80153fe <_puts_r+0x9a>
 80153f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80153fa:	f000 fb46 	bl	8015a8a <__retarget_lock_release_recursive>
 80153fe:	4628      	mov	r0, r5
 8015400:	bd70      	pop	{r4, r5, r6, pc}
 8015402:	2b00      	cmp	r3, #0
 8015404:	da04      	bge.n	8015410 <_puts_r+0xac>
 8015406:	69a2      	ldr	r2, [r4, #24]
 8015408:	429a      	cmp	r2, r3
 801540a:	dc06      	bgt.n	801541a <_puts_r+0xb6>
 801540c:	290a      	cmp	r1, #10
 801540e:	d004      	beq.n	801541a <_puts_r+0xb6>
 8015410:	6823      	ldr	r3, [r4, #0]
 8015412:	1c5a      	adds	r2, r3, #1
 8015414:	6022      	str	r2, [r4, #0]
 8015416:	7019      	strb	r1, [r3, #0]
 8015418:	e7c5      	b.n	80153a6 <_puts_r+0x42>
 801541a:	4622      	mov	r2, r4
 801541c:	4628      	mov	r0, r5
 801541e:	f000 f88b 	bl	8015538 <__swbuf_r>
 8015422:	3001      	adds	r0, #1
 8015424:	d1bf      	bne.n	80153a6 <_puts_r+0x42>
 8015426:	e7df      	b.n	80153e8 <_puts_r+0x84>
 8015428:	6823      	ldr	r3, [r4, #0]
 801542a:	250a      	movs	r5, #10
 801542c:	1c5a      	adds	r2, r3, #1
 801542e:	6022      	str	r2, [r4, #0]
 8015430:	701d      	strb	r5, [r3, #0]
 8015432:	e7db      	b.n	80153ec <_puts_r+0x88>
 8015434:	0801a048 	.word	0x0801a048
 8015438:	0801a068 	.word	0x0801a068
 801543c:	0801a028 	.word	0x0801a028

08015440 <puts>:
 8015440:	4b02      	ldr	r3, [pc, #8]	; (801544c <puts+0xc>)
 8015442:	4601      	mov	r1, r0
 8015444:	6818      	ldr	r0, [r3, #0]
 8015446:	f7ff bf8d 	b.w	8015364 <_puts_r>
 801544a:	bf00      	nop
 801544c:	2000001c 	.word	0x2000001c

08015450 <rand>:
 8015450:	4b17      	ldr	r3, [pc, #92]	; (80154b0 <rand+0x60>)
 8015452:	b510      	push	{r4, lr}
 8015454:	681c      	ldr	r4, [r3, #0]
 8015456:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015458:	b9b3      	cbnz	r3, 8015488 <rand+0x38>
 801545a:	2018      	movs	r0, #24
 801545c:	f000 fb7a 	bl	8015b54 <malloc>
 8015460:	63a0      	str	r0, [r4, #56]	; 0x38
 8015462:	b928      	cbnz	r0, 8015470 <rand+0x20>
 8015464:	4602      	mov	r2, r0
 8015466:	4b13      	ldr	r3, [pc, #76]	; (80154b4 <rand+0x64>)
 8015468:	4813      	ldr	r0, [pc, #76]	; (80154b8 <rand+0x68>)
 801546a:	214e      	movs	r1, #78	; 0x4e
 801546c:	f000 f924 	bl	80156b8 <__assert_func>
 8015470:	4a12      	ldr	r2, [pc, #72]	; (80154bc <rand+0x6c>)
 8015472:	4b13      	ldr	r3, [pc, #76]	; (80154c0 <rand+0x70>)
 8015474:	e9c0 2300 	strd	r2, r3, [r0]
 8015478:	4b12      	ldr	r3, [pc, #72]	; (80154c4 <rand+0x74>)
 801547a:	6083      	str	r3, [r0, #8]
 801547c:	230b      	movs	r3, #11
 801547e:	8183      	strh	r3, [r0, #12]
 8015480:	2201      	movs	r2, #1
 8015482:	2300      	movs	r3, #0
 8015484:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8015488:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801548a:	480f      	ldr	r0, [pc, #60]	; (80154c8 <rand+0x78>)
 801548c:	690a      	ldr	r2, [r1, #16]
 801548e:	694b      	ldr	r3, [r1, #20]
 8015490:	4c0e      	ldr	r4, [pc, #56]	; (80154cc <rand+0x7c>)
 8015492:	4350      	muls	r0, r2
 8015494:	fb04 0003 	mla	r0, r4, r3, r0
 8015498:	fba2 3404 	umull	r3, r4, r2, r4
 801549c:	1c5a      	adds	r2, r3, #1
 801549e:	4404      	add	r4, r0
 80154a0:	f144 0000 	adc.w	r0, r4, #0
 80154a4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80154a8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80154ac:	bd10      	pop	{r4, pc}
 80154ae:	bf00      	nop
 80154b0:	2000001c 	.word	0x2000001c
 80154b4:	08019f74 	.word	0x08019f74
 80154b8:	08019f8b 	.word	0x08019f8b
 80154bc:	abcd330e 	.word	0xabcd330e
 80154c0:	e66d1234 	.word	0xe66d1234
 80154c4:	0005deec 	.word	0x0005deec
 80154c8:	5851f42d 	.word	0x5851f42d
 80154cc:	4c957f2d 	.word	0x4c957f2d

080154d0 <sniprintf>:
 80154d0:	b40c      	push	{r2, r3}
 80154d2:	b530      	push	{r4, r5, lr}
 80154d4:	4b17      	ldr	r3, [pc, #92]	; (8015534 <sniprintf+0x64>)
 80154d6:	1e0c      	subs	r4, r1, #0
 80154d8:	681d      	ldr	r5, [r3, #0]
 80154da:	b09d      	sub	sp, #116	; 0x74
 80154dc:	da08      	bge.n	80154f0 <sniprintf+0x20>
 80154de:	238b      	movs	r3, #139	; 0x8b
 80154e0:	602b      	str	r3, [r5, #0]
 80154e2:	f04f 30ff 	mov.w	r0, #4294967295
 80154e6:	b01d      	add	sp, #116	; 0x74
 80154e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80154ec:	b002      	add	sp, #8
 80154ee:	4770      	bx	lr
 80154f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80154f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80154f8:	bf14      	ite	ne
 80154fa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80154fe:	4623      	moveq	r3, r4
 8015500:	9304      	str	r3, [sp, #16]
 8015502:	9307      	str	r3, [sp, #28]
 8015504:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015508:	9002      	str	r0, [sp, #8]
 801550a:	9006      	str	r0, [sp, #24]
 801550c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015510:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015512:	ab21      	add	r3, sp, #132	; 0x84
 8015514:	a902      	add	r1, sp, #8
 8015516:	4628      	mov	r0, r5
 8015518:	9301      	str	r3, [sp, #4]
 801551a:	f000 fc29 	bl	8015d70 <_svfiprintf_r>
 801551e:	1c43      	adds	r3, r0, #1
 8015520:	bfbc      	itt	lt
 8015522:	238b      	movlt	r3, #139	; 0x8b
 8015524:	602b      	strlt	r3, [r5, #0]
 8015526:	2c00      	cmp	r4, #0
 8015528:	d0dd      	beq.n	80154e6 <sniprintf+0x16>
 801552a:	9b02      	ldr	r3, [sp, #8]
 801552c:	2200      	movs	r2, #0
 801552e:	701a      	strb	r2, [r3, #0]
 8015530:	e7d9      	b.n	80154e6 <sniprintf+0x16>
 8015532:	bf00      	nop
 8015534:	2000001c 	.word	0x2000001c

08015538 <__swbuf_r>:
 8015538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801553a:	460e      	mov	r6, r1
 801553c:	4614      	mov	r4, r2
 801553e:	4605      	mov	r5, r0
 8015540:	b118      	cbz	r0, 801554a <__swbuf_r+0x12>
 8015542:	6983      	ldr	r3, [r0, #24]
 8015544:	b90b      	cbnz	r3, 801554a <__swbuf_r+0x12>
 8015546:	f000 f9ef 	bl	8015928 <__sinit>
 801554a:	4b21      	ldr	r3, [pc, #132]	; (80155d0 <__swbuf_r+0x98>)
 801554c:	429c      	cmp	r4, r3
 801554e:	d12b      	bne.n	80155a8 <__swbuf_r+0x70>
 8015550:	686c      	ldr	r4, [r5, #4]
 8015552:	69a3      	ldr	r3, [r4, #24]
 8015554:	60a3      	str	r3, [r4, #8]
 8015556:	89a3      	ldrh	r3, [r4, #12]
 8015558:	071a      	lsls	r2, r3, #28
 801555a:	d52f      	bpl.n	80155bc <__swbuf_r+0x84>
 801555c:	6923      	ldr	r3, [r4, #16]
 801555e:	b36b      	cbz	r3, 80155bc <__swbuf_r+0x84>
 8015560:	6923      	ldr	r3, [r4, #16]
 8015562:	6820      	ldr	r0, [r4, #0]
 8015564:	1ac0      	subs	r0, r0, r3
 8015566:	6963      	ldr	r3, [r4, #20]
 8015568:	b2f6      	uxtb	r6, r6
 801556a:	4283      	cmp	r3, r0
 801556c:	4637      	mov	r7, r6
 801556e:	dc04      	bgt.n	801557a <__swbuf_r+0x42>
 8015570:	4621      	mov	r1, r4
 8015572:	4628      	mov	r0, r5
 8015574:	f000 f944 	bl	8015800 <_fflush_r>
 8015578:	bb30      	cbnz	r0, 80155c8 <__swbuf_r+0x90>
 801557a:	68a3      	ldr	r3, [r4, #8]
 801557c:	3b01      	subs	r3, #1
 801557e:	60a3      	str	r3, [r4, #8]
 8015580:	6823      	ldr	r3, [r4, #0]
 8015582:	1c5a      	adds	r2, r3, #1
 8015584:	6022      	str	r2, [r4, #0]
 8015586:	701e      	strb	r6, [r3, #0]
 8015588:	6963      	ldr	r3, [r4, #20]
 801558a:	3001      	adds	r0, #1
 801558c:	4283      	cmp	r3, r0
 801558e:	d004      	beq.n	801559a <__swbuf_r+0x62>
 8015590:	89a3      	ldrh	r3, [r4, #12]
 8015592:	07db      	lsls	r3, r3, #31
 8015594:	d506      	bpl.n	80155a4 <__swbuf_r+0x6c>
 8015596:	2e0a      	cmp	r6, #10
 8015598:	d104      	bne.n	80155a4 <__swbuf_r+0x6c>
 801559a:	4621      	mov	r1, r4
 801559c:	4628      	mov	r0, r5
 801559e:	f000 f92f 	bl	8015800 <_fflush_r>
 80155a2:	b988      	cbnz	r0, 80155c8 <__swbuf_r+0x90>
 80155a4:	4638      	mov	r0, r7
 80155a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80155a8:	4b0a      	ldr	r3, [pc, #40]	; (80155d4 <__swbuf_r+0x9c>)
 80155aa:	429c      	cmp	r4, r3
 80155ac:	d101      	bne.n	80155b2 <__swbuf_r+0x7a>
 80155ae:	68ac      	ldr	r4, [r5, #8]
 80155b0:	e7cf      	b.n	8015552 <__swbuf_r+0x1a>
 80155b2:	4b09      	ldr	r3, [pc, #36]	; (80155d8 <__swbuf_r+0xa0>)
 80155b4:	429c      	cmp	r4, r3
 80155b6:	bf08      	it	eq
 80155b8:	68ec      	ldreq	r4, [r5, #12]
 80155ba:	e7ca      	b.n	8015552 <__swbuf_r+0x1a>
 80155bc:	4621      	mov	r1, r4
 80155be:	4628      	mov	r0, r5
 80155c0:	f000 f80c 	bl	80155dc <__swsetup_r>
 80155c4:	2800      	cmp	r0, #0
 80155c6:	d0cb      	beq.n	8015560 <__swbuf_r+0x28>
 80155c8:	f04f 37ff 	mov.w	r7, #4294967295
 80155cc:	e7ea      	b.n	80155a4 <__swbuf_r+0x6c>
 80155ce:	bf00      	nop
 80155d0:	0801a048 	.word	0x0801a048
 80155d4:	0801a068 	.word	0x0801a068
 80155d8:	0801a028 	.word	0x0801a028

080155dc <__swsetup_r>:
 80155dc:	4b32      	ldr	r3, [pc, #200]	; (80156a8 <__swsetup_r+0xcc>)
 80155de:	b570      	push	{r4, r5, r6, lr}
 80155e0:	681d      	ldr	r5, [r3, #0]
 80155e2:	4606      	mov	r6, r0
 80155e4:	460c      	mov	r4, r1
 80155e6:	b125      	cbz	r5, 80155f2 <__swsetup_r+0x16>
 80155e8:	69ab      	ldr	r3, [r5, #24]
 80155ea:	b913      	cbnz	r3, 80155f2 <__swsetup_r+0x16>
 80155ec:	4628      	mov	r0, r5
 80155ee:	f000 f99b 	bl	8015928 <__sinit>
 80155f2:	4b2e      	ldr	r3, [pc, #184]	; (80156ac <__swsetup_r+0xd0>)
 80155f4:	429c      	cmp	r4, r3
 80155f6:	d10f      	bne.n	8015618 <__swsetup_r+0x3c>
 80155f8:	686c      	ldr	r4, [r5, #4]
 80155fa:	89a3      	ldrh	r3, [r4, #12]
 80155fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015600:	0719      	lsls	r1, r3, #28
 8015602:	d42c      	bmi.n	801565e <__swsetup_r+0x82>
 8015604:	06dd      	lsls	r5, r3, #27
 8015606:	d411      	bmi.n	801562c <__swsetup_r+0x50>
 8015608:	2309      	movs	r3, #9
 801560a:	6033      	str	r3, [r6, #0]
 801560c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015610:	81a3      	strh	r3, [r4, #12]
 8015612:	f04f 30ff 	mov.w	r0, #4294967295
 8015616:	e03e      	b.n	8015696 <__swsetup_r+0xba>
 8015618:	4b25      	ldr	r3, [pc, #148]	; (80156b0 <__swsetup_r+0xd4>)
 801561a:	429c      	cmp	r4, r3
 801561c:	d101      	bne.n	8015622 <__swsetup_r+0x46>
 801561e:	68ac      	ldr	r4, [r5, #8]
 8015620:	e7eb      	b.n	80155fa <__swsetup_r+0x1e>
 8015622:	4b24      	ldr	r3, [pc, #144]	; (80156b4 <__swsetup_r+0xd8>)
 8015624:	429c      	cmp	r4, r3
 8015626:	bf08      	it	eq
 8015628:	68ec      	ldreq	r4, [r5, #12]
 801562a:	e7e6      	b.n	80155fa <__swsetup_r+0x1e>
 801562c:	0758      	lsls	r0, r3, #29
 801562e:	d512      	bpl.n	8015656 <__swsetup_r+0x7a>
 8015630:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015632:	b141      	cbz	r1, 8015646 <__swsetup_r+0x6a>
 8015634:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015638:	4299      	cmp	r1, r3
 801563a:	d002      	beq.n	8015642 <__swsetup_r+0x66>
 801563c:	4630      	mov	r0, r6
 801563e:	f000 fa91 	bl	8015b64 <_free_r>
 8015642:	2300      	movs	r3, #0
 8015644:	6363      	str	r3, [r4, #52]	; 0x34
 8015646:	89a3      	ldrh	r3, [r4, #12]
 8015648:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801564c:	81a3      	strh	r3, [r4, #12]
 801564e:	2300      	movs	r3, #0
 8015650:	6063      	str	r3, [r4, #4]
 8015652:	6923      	ldr	r3, [r4, #16]
 8015654:	6023      	str	r3, [r4, #0]
 8015656:	89a3      	ldrh	r3, [r4, #12]
 8015658:	f043 0308 	orr.w	r3, r3, #8
 801565c:	81a3      	strh	r3, [r4, #12]
 801565e:	6923      	ldr	r3, [r4, #16]
 8015660:	b94b      	cbnz	r3, 8015676 <__swsetup_r+0x9a>
 8015662:	89a3      	ldrh	r3, [r4, #12]
 8015664:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801566c:	d003      	beq.n	8015676 <__swsetup_r+0x9a>
 801566e:	4621      	mov	r1, r4
 8015670:	4630      	mov	r0, r6
 8015672:	f000 fa2f 	bl	8015ad4 <__smakebuf_r>
 8015676:	89a0      	ldrh	r0, [r4, #12]
 8015678:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801567c:	f010 0301 	ands.w	r3, r0, #1
 8015680:	d00a      	beq.n	8015698 <__swsetup_r+0xbc>
 8015682:	2300      	movs	r3, #0
 8015684:	60a3      	str	r3, [r4, #8]
 8015686:	6963      	ldr	r3, [r4, #20]
 8015688:	425b      	negs	r3, r3
 801568a:	61a3      	str	r3, [r4, #24]
 801568c:	6923      	ldr	r3, [r4, #16]
 801568e:	b943      	cbnz	r3, 80156a2 <__swsetup_r+0xc6>
 8015690:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015694:	d1ba      	bne.n	801560c <__swsetup_r+0x30>
 8015696:	bd70      	pop	{r4, r5, r6, pc}
 8015698:	0781      	lsls	r1, r0, #30
 801569a:	bf58      	it	pl
 801569c:	6963      	ldrpl	r3, [r4, #20]
 801569e:	60a3      	str	r3, [r4, #8]
 80156a0:	e7f4      	b.n	801568c <__swsetup_r+0xb0>
 80156a2:	2000      	movs	r0, #0
 80156a4:	e7f7      	b.n	8015696 <__swsetup_r+0xba>
 80156a6:	bf00      	nop
 80156a8:	2000001c 	.word	0x2000001c
 80156ac:	0801a048 	.word	0x0801a048
 80156b0:	0801a068 	.word	0x0801a068
 80156b4:	0801a028 	.word	0x0801a028

080156b8 <__assert_func>:
 80156b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80156ba:	4614      	mov	r4, r2
 80156bc:	461a      	mov	r2, r3
 80156be:	4b09      	ldr	r3, [pc, #36]	; (80156e4 <__assert_func+0x2c>)
 80156c0:	681b      	ldr	r3, [r3, #0]
 80156c2:	4605      	mov	r5, r0
 80156c4:	68d8      	ldr	r0, [r3, #12]
 80156c6:	b14c      	cbz	r4, 80156dc <__assert_func+0x24>
 80156c8:	4b07      	ldr	r3, [pc, #28]	; (80156e8 <__assert_func+0x30>)
 80156ca:	9100      	str	r1, [sp, #0]
 80156cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80156d0:	4906      	ldr	r1, [pc, #24]	; (80156ec <__assert_func+0x34>)
 80156d2:	462b      	mov	r3, r5
 80156d4:	f000 f9a6 	bl	8015a24 <fiprintf>
 80156d8:	f000 ff9e 	bl	8016618 <abort>
 80156dc:	4b04      	ldr	r3, [pc, #16]	; (80156f0 <__assert_func+0x38>)
 80156de:	461c      	mov	r4, r3
 80156e0:	e7f3      	b.n	80156ca <__assert_func+0x12>
 80156e2:	bf00      	nop
 80156e4:	2000001c 	.word	0x2000001c
 80156e8:	08019fea 	.word	0x08019fea
 80156ec:	08019ff7 	.word	0x08019ff7
 80156f0:	0801a025 	.word	0x0801a025

080156f4 <__sflush_r>:
 80156f4:	898a      	ldrh	r2, [r1, #12]
 80156f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156fa:	4605      	mov	r5, r0
 80156fc:	0710      	lsls	r0, r2, #28
 80156fe:	460c      	mov	r4, r1
 8015700:	d458      	bmi.n	80157b4 <__sflush_r+0xc0>
 8015702:	684b      	ldr	r3, [r1, #4]
 8015704:	2b00      	cmp	r3, #0
 8015706:	dc05      	bgt.n	8015714 <__sflush_r+0x20>
 8015708:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801570a:	2b00      	cmp	r3, #0
 801570c:	dc02      	bgt.n	8015714 <__sflush_r+0x20>
 801570e:	2000      	movs	r0, #0
 8015710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015714:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015716:	2e00      	cmp	r6, #0
 8015718:	d0f9      	beq.n	801570e <__sflush_r+0x1a>
 801571a:	2300      	movs	r3, #0
 801571c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015720:	682f      	ldr	r7, [r5, #0]
 8015722:	602b      	str	r3, [r5, #0]
 8015724:	d032      	beq.n	801578c <__sflush_r+0x98>
 8015726:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015728:	89a3      	ldrh	r3, [r4, #12]
 801572a:	075a      	lsls	r2, r3, #29
 801572c:	d505      	bpl.n	801573a <__sflush_r+0x46>
 801572e:	6863      	ldr	r3, [r4, #4]
 8015730:	1ac0      	subs	r0, r0, r3
 8015732:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015734:	b10b      	cbz	r3, 801573a <__sflush_r+0x46>
 8015736:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015738:	1ac0      	subs	r0, r0, r3
 801573a:	2300      	movs	r3, #0
 801573c:	4602      	mov	r2, r0
 801573e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015740:	6a21      	ldr	r1, [r4, #32]
 8015742:	4628      	mov	r0, r5
 8015744:	47b0      	blx	r6
 8015746:	1c43      	adds	r3, r0, #1
 8015748:	89a3      	ldrh	r3, [r4, #12]
 801574a:	d106      	bne.n	801575a <__sflush_r+0x66>
 801574c:	6829      	ldr	r1, [r5, #0]
 801574e:	291d      	cmp	r1, #29
 8015750:	d82c      	bhi.n	80157ac <__sflush_r+0xb8>
 8015752:	4a2a      	ldr	r2, [pc, #168]	; (80157fc <__sflush_r+0x108>)
 8015754:	40ca      	lsrs	r2, r1
 8015756:	07d6      	lsls	r6, r2, #31
 8015758:	d528      	bpl.n	80157ac <__sflush_r+0xb8>
 801575a:	2200      	movs	r2, #0
 801575c:	6062      	str	r2, [r4, #4]
 801575e:	04d9      	lsls	r1, r3, #19
 8015760:	6922      	ldr	r2, [r4, #16]
 8015762:	6022      	str	r2, [r4, #0]
 8015764:	d504      	bpl.n	8015770 <__sflush_r+0x7c>
 8015766:	1c42      	adds	r2, r0, #1
 8015768:	d101      	bne.n	801576e <__sflush_r+0x7a>
 801576a:	682b      	ldr	r3, [r5, #0]
 801576c:	b903      	cbnz	r3, 8015770 <__sflush_r+0x7c>
 801576e:	6560      	str	r0, [r4, #84]	; 0x54
 8015770:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015772:	602f      	str	r7, [r5, #0]
 8015774:	2900      	cmp	r1, #0
 8015776:	d0ca      	beq.n	801570e <__sflush_r+0x1a>
 8015778:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801577c:	4299      	cmp	r1, r3
 801577e:	d002      	beq.n	8015786 <__sflush_r+0x92>
 8015780:	4628      	mov	r0, r5
 8015782:	f000 f9ef 	bl	8015b64 <_free_r>
 8015786:	2000      	movs	r0, #0
 8015788:	6360      	str	r0, [r4, #52]	; 0x34
 801578a:	e7c1      	b.n	8015710 <__sflush_r+0x1c>
 801578c:	6a21      	ldr	r1, [r4, #32]
 801578e:	2301      	movs	r3, #1
 8015790:	4628      	mov	r0, r5
 8015792:	47b0      	blx	r6
 8015794:	1c41      	adds	r1, r0, #1
 8015796:	d1c7      	bne.n	8015728 <__sflush_r+0x34>
 8015798:	682b      	ldr	r3, [r5, #0]
 801579a:	2b00      	cmp	r3, #0
 801579c:	d0c4      	beq.n	8015728 <__sflush_r+0x34>
 801579e:	2b1d      	cmp	r3, #29
 80157a0:	d001      	beq.n	80157a6 <__sflush_r+0xb2>
 80157a2:	2b16      	cmp	r3, #22
 80157a4:	d101      	bne.n	80157aa <__sflush_r+0xb6>
 80157a6:	602f      	str	r7, [r5, #0]
 80157a8:	e7b1      	b.n	801570e <__sflush_r+0x1a>
 80157aa:	89a3      	ldrh	r3, [r4, #12]
 80157ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80157b0:	81a3      	strh	r3, [r4, #12]
 80157b2:	e7ad      	b.n	8015710 <__sflush_r+0x1c>
 80157b4:	690f      	ldr	r7, [r1, #16]
 80157b6:	2f00      	cmp	r7, #0
 80157b8:	d0a9      	beq.n	801570e <__sflush_r+0x1a>
 80157ba:	0793      	lsls	r3, r2, #30
 80157bc:	680e      	ldr	r6, [r1, #0]
 80157be:	bf08      	it	eq
 80157c0:	694b      	ldreq	r3, [r1, #20]
 80157c2:	600f      	str	r7, [r1, #0]
 80157c4:	bf18      	it	ne
 80157c6:	2300      	movne	r3, #0
 80157c8:	eba6 0807 	sub.w	r8, r6, r7
 80157cc:	608b      	str	r3, [r1, #8]
 80157ce:	f1b8 0f00 	cmp.w	r8, #0
 80157d2:	dd9c      	ble.n	801570e <__sflush_r+0x1a>
 80157d4:	6a21      	ldr	r1, [r4, #32]
 80157d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80157d8:	4643      	mov	r3, r8
 80157da:	463a      	mov	r2, r7
 80157dc:	4628      	mov	r0, r5
 80157de:	47b0      	blx	r6
 80157e0:	2800      	cmp	r0, #0
 80157e2:	dc06      	bgt.n	80157f2 <__sflush_r+0xfe>
 80157e4:	89a3      	ldrh	r3, [r4, #12]
 80157e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80157ea:	81a3      	strh	r3, [r4, #12]
 80157ec:	f04f 30ff 	mov.w	r0, #4294967295
 80157f0:	e78e      	b.n	8015710 <__sflush_r+0x1c>
 80157f2:	4407      	add	r7, r0
 80157f4:	eba8 0800 	sub.w	r8, r8, r0
 80157f8:	e7e9      	b.n	80157ce <__sflush_r+0xda>
 80157fa:	bf00      	nop
 80157fc:	20400001 	.word	0x20400001

08015800 <_fflush_r>:
 8015800:	b538      	push	{r3, r4, r5, lr}
 8015802:	690b      	ldr	r3, [r1, #16]
 8015804:	4605      	mov	r5, r0
 8015806:	460c      	mov	r4, r1
 8015808:	b913      	cbnz	r3, 8015810 <_fflush_r+0x10>
 801580a:	2500      	movs	r5, #0
 801580c:	4628      	mov	r0, r5
 801580e:	bd38      	pop	{r3, r4, r5, pc}
 8015810:	b118      	cbz	r0, 801581a <_fflush_r+0x1a>
 8015812:	6983      	ldr	r3, [r0, #24]
 8015814:	b90b      	cbnz	r3, 801581a <_fflush_r+0x1a>
 8015816:	f000 f887 	bl	8015928 <__sinit>
 801581a:	4b14      	ldr	r3, [pc, #80]	; (801586c <_fflush_r+0x6c>)
 801581c:	429c      	cmp	r4, r3
 801581e:	d11b      	bne.n	8015858 <_fflush_r+0x58>
 8015820:	686c      	ldr	r4, [r5, #4]
 8015822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015826:	2b00      	cmp	r3, #0
 8015828:	d0ef      	beq.n	801580a <_fflush_r+0xa>
 801582a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801582c:	07d0      	lsls	r0, r2, #31
 801582e:	d404      	bmi.n	801583a <_fflush_r+0x3a>
 8015830:	0599      	lsls	r1, r3, #22
 8015832:	d402      	bmi.n	801583a <_fflush_r+0x3a>
 8015834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015836:	f000 f927 	bl	8015a88 <__retarget_lock_acquire_recursive>
 801583a:	4628      	mov	r0, r5
 801583c:	4621      	mov	r1, r4
 801583e:	f7ff ff59 	bl	80156f4 <__sflush_r>
 8015842:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015844:	07da      	lsls	r2, r3, #31
 8015846:	4605      	mov	r5, r0
 8015848:	d4e0      	bmi.n	801580c <_fflush_r+0xc>
 801584a:	89a3      	ldrh	r3, [r4, #12]
 801584c:	059b      	lsls	r3, r3, #22
 801584e:	d4dd      	bmi.n	801580c <_fflush_r+0xc>
 8015850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015852:	f000 f91a 	bl	8015a8a <__retarget_lock_release_recursive>
 8015856:	e7d9      	b.n	801580c <_fflush_r+0xc>
 8015858:	4b05      	ldr	r3, [pc, #20]	; (8015870 <_fflush_r+0x70>)
 801585a:	429c      	cmp	r4, r3
 801585c:	d101      	bne.n	8015862 <_fflush_r+0x62>
 801585e:	68ac      	ldr	r4, [r5, #8]
 8015860:	e7df      	b.n	8015822 <_fflush_r+0x22>
 8015862:	4b04      	ldr	r3, [pc, #16]	; (8015874 <_fflush_r+0x74>)
 8015864:	429c      	cmp	r4, r3
 8015866:	bf08      	it	eq
 8015868:	68ec      	ldreq	r4, [r5, #12]
 801586a:	e7da      	b.n	8015822 <_fflush_r+0x22>
 801586c:	0801a048 	.word	0x0801a048
 8015870:	0801a068 	.word	0x0801a068
 8015874:	0801a028 	.word	0x0801a028

08015878 <std>:
 8015878:	2300      	movs	r3, #0
 801587a:	b510      	push	{r4, lr}
 801587c:	4604      	mov	r4, r0
 801587e:	e9c0 3300 	strd	r3, r3, [r0]
 8015882:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015886:	6083      	str	r3, [r0, #8]
 8015888:	8181      	strh	r1, [r0, #12]
 801588a:	6643      	str	r3, [r0, #100]	; 0x64
 801588c:	81c2      	strh	r2, [r0, #14]
 801588e:	6183      	str	r3, [r0, #24]
 8015890:	4619      	mov	r1, r3
 8015892:	2208      	movs	r2, #8
 8015894:	305c      	adds	r0, #92	; 0x5c
 8015896:	f7ff fd45 	bl	8015324 <memset>
 801589a:	4b05      	ldr	r3, [pc, #20]	; (80158b0 <std+0x38>)
 801589c:	6263      	str	r3, [r4, #36]	; 0x24
 801589e:	4b05      	ldr	r3, [pc, #20]	; (80158b4 <std+0x3c>)
 80158a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80158a2:	4b05      	ldr	r3, [pc, #20]	; (80158b8 <std+0x40>)
 80158a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80158a6:	4b05      	ldr	r3, [pc, #20]	; (80158bc <std+0x44>)
 80158a8:	6224      	str	r4, [r4, #32]
 80158aa:	6323      	str	r3, [r4, #48]	; 0x30
 80158ac:	bd10      	pop	{r4, pc}
 80158ae:	bf00      	nop
 80158b0:	0801656d 	.word	0x0801656d
 80158b4:	0801658f 	.word	0x0801658f
 80158b8:	080165c7 	.word	0x080165c7
 80158bc:	080165eb 	.word	0x080165eb

080158c0 <_cleanup_r>:
 80158c0:	4901      	ldr	r1, [pc, #4]	; (80158c8 <_cleanup_r+0x8>)
 80158c2:	f000 b8c1 	b.w	8015a48 <_fwalk_reent>
 80158c6:	bf00      	nop
 80158c8:	08015801 	.word	0x08015801

080158cc <__sfmoreglue>:
 80158cc:	b570      	push	{r4, r5, r6, lr}
 80158ce:	1e4a      	subs	r2, r1, #1
 80158d0:	2568      	movs	r5, #104	; 0x68
 80158d2:	4355      	muls	r5, r2
 80158d4:	460e      	mov	r6, r1
 80158d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80158da:	f000 f993 	bl	8015c04 <_malloc_r>
 80158de:	4604      	mov	r4, r0
 80158e0:	b140      	cbz	r0, 80158f4 <__sfmoreglue+0x28>
 80158e2:	2100      	movs	r1, #0
 80158e4:	e9c0 1600 	strd	r1, r6, [r0]
 80158e8:	300c      	adds	r0, #12
 80158ea:	60a0      	str	r0, [r4, #8]
 80158ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80158f0:	f7ff fd18 	bl	8015324 <memset>
 80158f4:	4620      	mov	r0, r4
 80158f6:	bd70      	pop	{r4, r5, r6, pc}

080158f8 <__sfp_lock_acquire>:
 80158f8:	4801      	ldr	r0, [pc, #4]	; (8015900 <__sfp_lock_acquire+0x8>)
 80158fa:	f000 b8c5 	b.w	8015a88 <__retarget_lock_acquire_recursive>
 80158fe:	bf00      	nop
 8015900:	2000ab44 	.word	0x2000ab44

08015904 <__sfp_lock_release>:
 8015904:	4801      	ldr	r0, [pc, #4]	; (801590c <__sfp_lock_release+0x8>)
 8015906:	f000 b8c0 	b.w	8015a8a <__retarget_lock_release_recursive>
 801590a:	bf00      	nop
 801590c:	2000ab44 	.word	0x2000ab44

08015910 <__sinit_lock_acquire>:
 8015910:	4801      	ldr	r0, [pc, #4]	; (8015918 <__sinit_lock_acquire+0x8>)
 8015912:	f000 b8b9 	b.w	8015a88 <__retarget_lock_acquire_recursive>
 8015916:	bf00      	nop
 8015918:	2000ab3f 	.word	0x2000ab3f

0801591c <__sinit_lock_release>:
 801591c:	4801      	ldr	r0, [pc, #4]	; (8015924 <__sinit_lock_release+0x8>)
 801591e:	f000 b8b4 	b.w	8015a8a <__retarget_lock_release_recursive>
 8015922:	bf00      	nop
 8015924:	2000ab3f 	.word	0x2000ab3f

08015928 <__sinit>:
 8015928:	b510      	push	{r4, lr}
 801592a:	4604      	mov	r4, r0
 801592c:	f7ff fff0 	bl	8015910 <__sinit_lock_acquire>
 8015930:	69a3      	ldr	r3, [r4, #24]
 8015932:	b11b      	cbz	r3, 801593c <__sinit+0x14>
 8015934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015938:	f7ff bff0 	b.w	801591c <__sinit_lock_release>
 801593c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015940:	6523      	str	r3, [r4, #80]	; 0x50
 8015942:	4b13      	ldr	r3, [pc, #76]	; (8015990 <__sinit+0x68>)
 8015944:	4a13      	ldr	r2, [pc, #76]	; (8015994 <__sinit+0x6c>)
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	62a2      	str	r2, [r4, #40]	; 0x28
 801594a:	42a3      	cmp	r3, r4
 801594c:	bf04      	itt	eq
 801594e:	2301      	moveq	r3, #1
 8015950:	61a3      	streq	r3, [r4, #24]
 8015952:	4620      	mov	r0, r4
 8015954:	f000 f820 	bl	8015998 <__sfp>
 8015958:	6060      	str	r0, [r4, #4]
 801595a:	4620      	mov	r0, r4
 801595c:	f000 f81c 	bl	8015998 <__sfp>
 8015960:	60a0      	str	r0, [r4, #8]
 8015962:	4620      	mov	r0, r4
 8015964:	f000 f818 	bl	8015998 <__sfp>
 8015968:	2200      	movs	r2, #0
 801596a:	60e0      	str	r0, [r4, #12]
 801596c:	2104      	movs	r1, #4
 801596e:	6860      	ldr	r0, [r4, #4]
 8015970:	f7ff ff82 	bl	8015878 <std>
 8015974:	68a0      	ldr	r0, [r4, #8]
 8015976:	2201      	movs	r2, #1
 8015978:	2109      	movs	r1, #9
 801597a:	f7ff ff7d 	bl	8015878 <std>
 801597e:	68e0      	ldr	r0, [r4, #12]
 8015980:	2202      	movs	r2, #2
 8015982:	2112      	movs	r1, #18
 8015984:	f7ff ff78 	bl	8015878 <std>
 8015988:	2301      	movs	r3, #1
 801598a:	61a3      	str	r3, [r4, #24]
 801598c:	e7d2      	b.n	8015934 <__sinit+0xc>
 801598e:	bf00      	nop
 8015990:	08019f70 	.word	0x08019f70
 8015994:	080158c1 	.word	0x080158c1

08015998 <__sfp>:
 8015998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801599a:	4607      	mov	r7, r0
 801599c:	f7ff ffac 	bl	80158f8 <__sfp_lock_acquire>
 80159a0:	4b1e      	ldr	r3, [pc, #120]	; (8015a1c <__sfp+0x84>)
 80159a2:	681e      	ldr	r6, [r3, #0]
 80159a4:	69b3      	ldr	r3, [r6, #24]
 80159a6:	b913      	cbnz	r3, 80159ae <__sfp+0x16>
 80159a8:	4630      	mov	r0, r6
 80159aa:	f7ff ffbd 	bl	8015928 <__sinit>
 80159ae:	3648      	adds	r6, #72	; 0x48
 80159b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80159b4:	3b01      	subs	r3, #1
 80159b6:	d503      	bpl.n	80159c0 <__sfp+0x28>
 80159b8:	6833      	ldr	r3, [r6, #0]
 80159ba:	b30b      	cbz	r3, 8015a00 <__sfp+0x68>
 80159bc:	6836      	ldr	r6, [r6, #0]
 80159be:	e7f7      	b.n	80159b0 <__sfp+0x18>
 80159c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80159c4:	b9d5      	cbnz	r5, 80159fc <__sfp+0x64>
 80159c6:	4b16      	ldr	r3, [pc, #88]	; (8015a20 <__sfp+0x88>)
 80159c8:	60e3      	str	r3, [r4, #12]
 80159ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80159ce:	6665      	str	r5, [r4, #100]	; 0x64
 80159d0:	f000 f859 	bl	8015a86 <__retarget_lock_init_recursive>
 80159d4:	f7ff ff96 	bl	8015904 <__sfp_lock_release>
 80159d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80159dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80159e0:	6025      	str	r5, [r4, #0]
 80159e2:	61a5      	str	r5, [r4, #24]
 80159e4:	2208      	movs	r2, #8
 80159e6:	4629      	mov	r1, r5
 80159e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80159ec:	f7ff fc9a 	bl	8015324 <memset>
 80159f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80159f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80159f8:	4620      	mov	r0, r4
 80159fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80159fc:	3468      	adds	r4, #104	; 0x68
 80159fe:	e7d9      	b.n	80159b4 <__sfp+0x1c>
 8015a00:	2104      	movs	r1, #4
 8015a02:	4638      	mov	r0, r7
 8015a04:	f7ff ff62 	bl	80158cc <__sfmoreglue>
 8015a08:	4604      	mov	r4, r0
 8015a0a:	6030      	str	r0, [r6, #0]
 8015a0c:	2800      	cmp	r0, #0
 8015a0e:	d1d5      	bne.n	80159bc <__sfp+0x24>
 8015a10:	f7ff ff78 	bl	8015904 <__sfp_lock_release>
 8015a14:	230c      	movs	r3, #12
 8015a16:	603b      	str	r3, [r7, #0]
 8015a18:	e7ee      	b.n	80159f8 <__sfp+0x60>
 8015a1a:	bf00      	nop
 8015a1c:	08019f70 	.word	0x08019f70
 8015a20:	ffff0001 	.word	0xffff0001

08015a24 <fiprintf>:
 8015a24:	b40e      	push	{r1, r2, r3}
 8015a26:	b503      	push	{r0, r1, lr}
 8015a28:	4601      	mov	r1, r0
 8015a2a:	ab03      	add	r3, sp, #12
 8015a2c:	4805      	ldr	r0, [pc, #20]	; (8015a44 <fiprintf+0x20>)
 8015a2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015a32:	6800      	ldr	r0, [r0, #0]
 8015a34:	9301      	str	r3, [sp, #4]
 8015a36:	f000 fac5 	bl	8015fc4 <_vfiprintf_r>
 8015a3a:	b002      	add	sp, #8
 8015a3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015a40:	b003      	add	sp, #12
 8015a42:	4770      	bx	lr
 8015a44:	2000001c 	.word	0x2000001c

08015a48 <_fwalk_reent>:
 8015a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015a4c:	4606      	mov	r6, r0
 8015a4e:	4688      	mov	r8, r1
 8015a50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015a54:	2700      	movs	r7, #0
 8015a56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015a5a:	f1b9 0901 	subs.w	r9, r9, #1
 8015a5e:	d505      	bpl.n	8015a6c <_fwalk_reent+0x24>
 8015a60:	6824      	ldr	r4, [r4, #0]
 8015a62:	2c00      	cmp	r4, #0
 8015a64:	d1f7      	bne.n	8015a56 <_fwalk_reent+0xe>
 8015a66:	4638      	mov	r0, r7
 8015a68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a6c:	89ab      	ldrh	r3, [r5, #12]
 8015a6e:	2b01      	cmp	r3, #1
 8015a70:	d907      	bls.n	8015a82 <_fwalk_reent+0x3a>
 8015a72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015a76:	3301      	adds	r3, #1
 8015a78:	d003      	beq.n	8015a82 <_fwalk_reent+0x3a>
 8015a7a:	4629      	mov	r1, r5
 8015a7c:	4630      	mov	r0, r6
 8015a7e:	47c0      	blx	r8
 8015a80:	4307      	orrs	r7, r0
 8015a82:	3568      	adds	r5, #104	; 0x68
 8015a84:	e7e9      	b.n	8015a5a <_fwalk_reent+0x12>

08015a86 <__retarget_lock_init_recursive>:
 8015a86:	4770      	bx	lr

08015a88 <__retarget_lock_acquire_recursive>:
 8015a88:	4770      	bx	lr

08015a8a <__retarget_lock_release_recursive>:
 8015a8a:	4770      	bx	lr

08015a8c <__swhatbuf_r>:
 8015a8c:	b570      	push	{r4, r5, r6, lr}
 8015a8e:	460e      	mov	r6, r1
 8015a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a94:	2900      	cmp	r1, #0
 8015a96:	b096      	sub	sp, #88	; 0x58
 8015a98:	4614      	mov	r4, r2
 8015a9a:	461d      	mov	r5, r3
 8015a9c:	da07      	bge.n	8015aae <__swhatbuf_r+0x22>
 8015a9e:	2300      	movs	r3, #0
 8015aa0:	602b      	str	r3, [r5, #0]
 8015aa2:	89b3      	ldrh	r3, [r6, #12]
 8015aa4:	061a      	lsls	r2, r3, #24
 8015aa6:	d410      	bmi.n	8015aca <__swhatbuf_r+0x3e>
 8015aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015aac:	e00e      	b.n	8015acc <__swhatbuf_r+0x40>
 8015aae:	466a      	mov	r2, sp
 8015ab0:	f000 fdca 	bl	8016648 <_fstat_r>
 8015ab4:	2800      	cmp	r0, #0
 8015ab6:	dbf2      	blt.n	8015a9e <__swhatbuf_r+0x12>
 8015ab8:	9a01      	ldr	r2, [sp, #4]
 8015aba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015abe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015ac2:	425a      	negs	r2, r3
 8015ac4:	415a      	adcs	r2, r3
 8015ac6:	602a      	str	r2, [r5, #0]
 8015ac8:	e7ee      	b.n	8015aa8 <__swhatbuf_r+0x1c>
 8015aca:	2340      	movs	r3, #64	; 0x40
 8015acc:	2000      	movs	r0, #0
 8015ace:	6023      	str	r3, [r4, #0]
 8015ad0:	b016      	add	sp, #88	; 0x58
 8015ad2:	bd70      	pop	{r4, r5, r6, pc}

08015ad4 <__smakebuf_r>:
 8015ad4:	898b      	ldrh	r3, [r1, #12]
 8015ad6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015ad8:	079d      	lsls	r5, r3, #30
 8015ada:	4606      	mov	r6, r0
 8015adc:	460c      	mov	r4, r1
 8015ade:	d507      	bpl.n	8015af0 <__smakebuf_r+0x1c>
 8015ae0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015ae4:	6023      	str	r3, [r4, #0]
 8015ae6:	6123      	str	r3, [r4, #16]
 8015ae8:	2301      	movs	r3, #1
 8015aea:	6163      	str	r3, [r4, #20]
 8015aec:	b002      	add	sp, #8
 8015aee:	bd70      	pop	{r4, r5, r6, pc}
 8015af0:	ab01      	add	r3, sp, #4
 8015af2:	466a      	mov	r2, sp
 8015af4:	f7ff ffca 	bl	8015a8c <__swhatbuf_r>
 8015af8:	9900      	ldr	r1, [sp, #0]
 8015afa:	4605      	mov	r5, r0
 8015afc:	4630      	mov	r0, r6
 8015afe:	f000 f881 	bl	8015c04 <_malloc_r>
 8015b02:	b948      	cbnz	r0, 8015b18 <__smakebuf_r+0x44>
 8015b04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015b08:	059a      	lsls	r2, r3, #22
 8015b0a:	d4ef      	bmi.n	8015aec <__smakebuf_r+0x18>
 8015b0c:	f023 0303 	bic.w	r3, r3, #3
 8015b10:	f043 0302 	orr.w	r3, r3, #2
 8015b14:	81a3      	strh	r3, [r4, #12]
 8015b16:	e7e3      	b.n	8015ae0 <__smakebuf_r+0xc>
 8015b18:	4b0d      	ldr	r3, [pc, #52]	; (8015b50 <__smakebuf_r+0x7c>)
 8015b1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8015b1c:	89a3      	ldrh	r3, [r4, #12]
 8015b1e:	6020      	str	r0, [r4, #0]
 8015b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015b24:	81a3      	strh	r3, [r4, #12]
 8015b26:	9b00      	ldr	r3, [sp, #0]
 8015b28:	6163      	str	r3, [r4, #20]
 8015b2a:	9b01      	ldr	r3, [sp, #4]
 8015b2c:	6120      	str	r0, [r4, #16]
 8015b2e:	b15b      	cbz	r3, 8015b48 <__smakebuf_r+0x74>
 8015b30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015b34:	4630      	mov	r0, r6
 8015b36:	f000 fd99 	bl	801666c <_isatty_r>
 8015b3a:	b128      	cbz	r0, 8015b48 <__smakebuf_r+0x74>
 8015b3c:	89a3      	ldrh	r3, [r4, #12]
 8015b3e:	f023 0303 	bic.w	r3, r3, #3
 8015b42:	f043 0301 	orr.w	r3, r3, #1
 8015b46:	81a3      	strh	r3, [r4, #12]
 8015b48:	89a0      	ldrh	r0, [r4, #12]
 8015b4a:	4305      	orrs	r5, r0
 8015b4c:	81a5      	strh	r5, [r4, #12]
 8015b4e:	e7cd      	b.n	8015aec <__smakebuf_r+0x18>
 8015b50:	080158c1 	.word	0x080158c1

08015b54 <malloc>:
 8015b54:	4b02      	ldr	r3, [pc, #8]	; (8015b60 <malloc+0xc>)
 8015b56:	4601      	mov	r1, r0
 8015b58:	6818      	ldr	r0, [r3, #0]
 8015b5a:	f000 b853 	b.w	8015c04 <_malloc_r>
 8015b5e:	bf00      	nop
 8015b60:	2000001c 	.word	0x2000001c

08015b64 <_free_r>:
 8015b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015b66:	2900      	cmp	r1, #0
 8015b68:	d048      	beq.n	8015bfc <_free_r+0x98>
 8015b6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015b6e:	9001      	str	r0, [sp, #4]
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	f1a1 0404 	sub.w	r4, r1, #4
 8015b76:	bfb8      	it	lt
 8015b78:	18e4      	addlt	r4, r4, r3
 8015b7a:	f000 fd99 	bl	80166b0 <__malloc_lock>
 8015b7e:	4a20      	ldr	r2, [pc, #128]	; (8015c00 <_free_r+0x9c>)
 8015b80:	9801      	ldr	r0, [sp, #4]
 8015b82:	6813      	ldr	r3, [r2, #0]
 8015b84:	4615      	mov	r5, r2
 8015b86:	b933      	cbnz	r3, 8015b96 <_free_r+0x32>
 8015b88:	6063      	str	r3, [r4, #4]
 8015b8a:	6014      	str	r4, [r2, #0]
 8015b8c:	b003      	add	sp, #12
 8015b8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015b92:	f000 bd93 	b.w	80166bc <__malloc_unlock>
 8015b96:	42a3      	cmp	r3, r4
 8015b98:	d90b      	bls.n	8015bb2 <_free_r+0x4e>
 8015b9a:	6821      	ldr	r1, [r4, #0]
 8015b9c:	1862      	adds	r2, r4, r1
 8015b9e:	4293      	cmp	r3, r2
 8015ba0:	bf04      	itt	eq
 8015ba2:	681a      	ldreq	r2, [r3, #0]
 8015ba4:	685b      	ldreq	r3, [r3, #4]
 8015ba6:	6063      	str	r3, [r4, #4]
 8015ba8:	bf04      	itt	eq
 8015baa:	1852      	addeq	r2, r2, r1
 8015bac:	6022      	streq	r2, [r4, #0]
 8015bae:	602c      	str	r4, [r5, #0]
 8015bb0:	e7ec      	b.n	8015b8c <_free_r+0x28>
 8015bb2:	461a      	mov	r2, r3
 8015bb4:	685b      	ldr	r3, [r3, #4]
 8015bb6:	b10b      	cbz	r3, 8015bbc <_free_r+0x58>
 8015bb8:	42a3      	cmp	r3, r4
 8015bba:	d9fa      	bls.n	8015bb2 <_free_r+0x4e>
 8015bbc:	6811      	ldr	r1, [r2, #0]
 8015bbe:	1855      	adds	r5, r2, r1
 8015bc0:	42a5      	cmp	r5, r4
 8015bc2:	d10b      	bne.n	8015bdc <_free_r+0x78>
 8015bc4:	6824      	ldr	r4, [r4, #0]
 8015bc6:	4421      	add	r1, r4
 8015bc8:	1854      	adds	r4, r2, r1
 8015bca:	42a3      	cmp	r3, r4
 8015bcc:	6011      	str	r1, [r2, #0]
 8015bce:	d1dd      	bne.n	8015b8c <_free_r+0x28>
 8015bd0:	681c      	ldr	r4, [r3, #0]
 8015bd2:	685b      	ldr	r3, [r3, #4]
 8015bd4:	6053      	str	r3, [r2, #4]
 8015bd6:	4421      	add	r1, r4
 8015bd8:	6011      	str	r1, [r2, #0]
 8015bda:	e7d7      	b.n	8015b8c <_free_r+0x28>
 8015bdc:	d902      	bls.n	8015be4 <_free_r+0x80>
 8015bde:	230c      	movs	r3, #12
 8015be0:	6003      	str	r3, [r0, #0]
 8015be2:	e7d3      	b.n	8015b8c <_free_r+0x28>
 8015be4:	6825      	ldr	r5, [r4, #0]
 8015be6:	1961      	adds	r1, r4, r5
 8015be8:	428b      	cmp	r3, r1
 8015bea:	bf04      	itt	eq
 8015bec:	6819      	ldreq	r1, [r3, #0]
 8015bee:	685b      	ldreq	r3, [r3, #4]
 8015bf0:	6063      	str	r3, [r4, #4]
 8015bf2:	bf04      	itt	eq
 8015bf4:	1949      	addeq	r1, r1, r5
 8015bf6:	6021      	streq	r1, [r4, #0]
 8015bf8:	6054      	str	r4, [r2, #4]
 8015bfa:	e7c7      	b.n	8015b8c <_free_r+0x28>
 8015bfc:	b003      	add	sp, #12
 8015bfe:	bd30      	pop	{r4, r5, pc}
 8015c00:	200041dc 	.word	0x200041dc

08015c04 <_malloc_r>:
 8015c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c06:	1ccd      	adds	r5, r1, #3
 8015c08:	f025 0503 	bic.w	r5, r5, #3
 8015c0c:	3508      	adds	r5, #8
 8015c0e:	2d0c      	cmp	r5, #12
 8015c10:	bf38      	it	cc
 8015c12:	250c      	movcc	r5, #12
 8015c14:	2d00      	cmp	r5, #0
 8015c16:	4606      	mov	r6, r0
 8015c18:	db01      	blt.n	8015c1e <_malloc_r+0x1a>
 8015c1a:	42a9      	cmp	r1, r5
 8015c1c:	d903      	bls.n	8015c26 <_malloc_r+0x22>
 8015c1e:	230c      	movs	r3, #12
 8015c20:	6033      	str	r3, [r6, #0]
 8015c22:	2000      	movs	r0, #0
 8015c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c26:	f000 fd43 	bl	80166b0 <__malloc_lock>
 8015c2a:	4921      	ldr	r1, [pc, #132]	; (8015cb0 <_malloc_r+0xac>)
 8015c2c:	680a      	ldr	r2, [r1, #0]
 8015c2e:	4614      	mov	r4, r2
 8015c30:	b99c      	cbnz	r4, 8015c5a <_malloc_r+0x56>
 8015c32:	4f20      	ldr	r7, [pc, #128]	; (8015cb4 <_malloc_r+0xb0>)
 8015c34:	683b      	ldr	r3, [r7, #0]
 8015c36:	b923      	cbnz	r3, 8015c42 <_malloc_r+0x3e>
 8015c38:	4621      	mov	r1, r4
 8015c3a:	4630      	mov	r0, r6
 8015c3c:	f000 fc86 	bl	801654c <_sbrk_r>
 8015c40:	6038      	str	r0, [r7, #0]
 8015c42:	4629      	mov	r1, r5
 8015c44:	4630      	mov	r0, r6
 8015c46:	f000 fc81 	bl	801654c <_sbrk_r>
 8015c4a:	1c43      	adds	r3, r0, #1
 8015c4c:	d123      	bne.n	8015c96 <_malloc_r+0x92>
 8015c4e:	230c      	movs	r3, #12
 8015c50:	6033      	str	r3, [r6, #0]
 8015c52:	4630      	mov	r0, r6
 8015c54:	f000 fd32 	bl	80166bc <__malloc_unlock>
 8015c58:	e7e3      	b.n	8015c22 <_malloc_r+0x1e>
 8015c5a:	6823      	ldr	r3, [r4, #0]
 8015c5c:	1b5b      	subs	r3, r3, r5
 8015c5e:	d417      	bmi.n	8015c90 <_malloc_r+0x8c>
 8015c60:	2b0b      	cmp	r3, #11
 8015c62:	d903      	bls.n	8015c6c <_malloc_r+0x68>
 8015c64:	6023      	str	r3, [r4, #0]
 8015c66:	441c      	add	r4, r3
 8015c68:	6025      	str	r5, [r4, #0]
 8015c6a:	e004      	b.n	8015c76 <_malloc_r+0x72>
 8015c6c:	6863      	ldr	r3, [r4, #4]
 8015c6e:	42a2      	cmp	r2, r4
 8015c70:	bf0c      	ite	eq
 8015c72:	600b      	streq	r3, [r1, #0]
 8015c74:	6053      	strne	r3, [r2, #4]
 8015c76:	4630      	mov	r0, r6
 8015c78:	f000 fd20 	bl	80166bc <__malloc_unlock>
 8015c7c:	f104 000b 	add.w	r0, r4, #11
 8015c80:	1d23      	adds	r3, r4, #4
 8015c82:	f020 0007 	bic.w	r0, r0, #7
 8015c86:	1ac2      	subs	r2, r0, r3
 8015c88:	d0cc      	beq.n	8015c24 <_malloc_r+0x20>
 8015c8a:	1a1b      	subs	r3, r3, r0
 8015c8c:	50a3      	str	r3, [r4, r2]
 8015c8e:	e7c9      	b.n	8015c24 <_malloc_r+0x20>
 8015c90:	4622      	mov	r2, r4
 8015c92:	6864      	ldr	r4, [r4, #4]
 8015c94:	e7cc      	b.n	8015c30 <_malloc_r+0x2c>
 8015c96:	1cc4      	adds	r4, r0, #3
 8015c98:	f024 0403 	bic.w	r4, r4, #3
 8015c9c:	42a0      	cmp	r0, r4
 8015c9e:	d0e3      	beq.n	8015c68 <_malloc_r+0x64>
 8015ca0:	1a21      	subs	r1, r4, r0
 8015ca2:	4630      	mov	r0, r6
 8015ca4:	f000 fc52 	bl	801654c <_sbrk_r>
 8015ca8:	3001      	adds	r0, #1
 8015caa:	d1dd      	bne.n	8015c68 <_malloc_r+0x64>
 8015cac:	e7cf      	b.n	8015c4e <_malloc_r+0x4a>
 8015cae:	bf00      	nop
 8015cb0:	200041dc 	.word	0x200041dc
 8015cb4:	200041e0 	.word	0x200041e0

08015cb8 <__ssputs_r>:
 8015cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015cbc:	688e      	ldr	r6, [r1, #8]
 8015cbe:	429e      	cmp	r6, r3
 8015cc0:	4682      	mov	sl, r0
 8015cc2:	460c      	mov	r4, r1
 8015cc4:	4690      	mov	r8, r2
 8015cc6:	461f      	mov	r7, r3
 8015cc8:	d838      	bhi.n	8015d3c <__ssputs_r+0x84>
 8015cca:	898a      	ldrh	r2, [r1, #12]
 8015ccc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015cd0:	d032      	beq.n	8015d38 <__ssputs_r+0x80>
 8015cd2:	6825      	ldr	r5, [r4, #0]
 8015cd4:	6909      	ldr	r1, [r1, #16]
 8015cd6:	eba5 0901 	sub.w	r9, r5, r1
 8015cda:	6965      	ldr	r5, [r4, #20]
 8015cdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015ce0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015ce4:	3301      	adds	r3, #1
 8015ce6:	444b      	add	r3, r9
 8015ce8:	106d      	asrs	r5, r5, #1
 8015cea:	429d      	cmp	r5, r3
 8015cec:	bf38      	it	cc
 8015cee:	461d      	movcc	r5, r3
 8015cf0:	0553      	lsls	r3, r2, #21
 8015cf2:	d531      	bpl.n	8015d58 <__ssputs_r+0xa0>
 8015cf4:	4629      	mov	r1, r5
 8015cf6:	f7ff ff85 	bl	8015c04 <_malloc_r>
 8015cfa:	4606      	mov	r6, r0
 8015cfc:	b950      	cbnz	r0, 8015d14 <__ssputs_r+0x5c>
 8015cfe:	230c      	movs	r3, #12
 8015d00:	f8ca 3000 	str.w	r3, [sl]
 8015d04:	89a3      	ldrh	r3, [r4, #12]
 8015d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015d0a:	81a3      	strh	r3, [r4, #12]
 8015d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8015d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d14:	6921      	ldr	r1, [r4, #16]
 8015d16:	464a      	mov	r2, r9
 8015d18:	f7ff fadc 	bl	80152d4 <memcpy>
 8015d1c:	89a3      	ldrh	r3, [r4, #12]
 8015d1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015d26:	81a3      	strh	r3, [r4, #12]
 8015d28:	6126      	str	r6, [r4, #16]
 8015d2a:	6165      	str	r5, [r4, #20]
 8015d2c:	444e      	add	r6, r9
 8015d2e:	eba5 0509 	sub.w	r5, r5, r9
 8015d32:	6026      	str	r6, [r4, #0]
 8015d34:	60a5      	str	r5, [r4, #8]
 8015d36:	463e      	mov	r6, r7
 8015d38:	42be      	cmp	r6, r7
 8015d3a:	d900      	bls.n	8015d3e <__ssputs_r+0x86>
 8015d3c:	463e      	mov	r6, r7
 8015d3e:	4632      	mov	r2, r6
 8015d40:	6820      	ldr	r0, [r4, #0]
 8015d42:	4641      	mov	r1, r8
 8015d44:	f7ff fad4 	bl	80152f0 <memmove>
 8015d48:	68a3      	ldr	r3, [r4, #8]
 8015d4a:	6822      	ldr	r2, [r4, #0]
 8015d4c:	1b9b      	subs	r3, r3, r6
 8015d4e:	4432      	add	r2, r6
 8015d50:	60a3      	str	r3, [r4, #8]
 8015d52:	6022      	str	r2, [r4, #0]
 8015d54:	2000      	movs	r0, #0
 8015d56:	e7db      	b.n	8015d10 <__ssputs_r+0x58>
 8015d58:	462a      	mov	r2, r5
 8015d5a:	f000 fcb5 	bl	80166c8 <_realloc_r>
 8015d5e:	4606      	mov	r6, r0
 8015d60:	2800      	cmp	r0, #0
 8015d62:	d1e1      	bne.n	8015d28 <__ssputs_r+0x70>
 8015d64:	6921      	ldr	r1, [r4, #16]
 8015d66:	4650      	mov	r0, sl
 8015d68:	f7ff fefc 	bl	8015b64 <_free_r>
 8015d6c:	e7c7      	b.n	8015cfe <__ssputs_r+0x46>
	...

08015d70 <_svfiprintf_r>:
 8015d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d74:	4698      	mov	r8, r3
 8015d76:	898b      	ldrh	r3, [r1, #12]
 8015d78:	061b      	lsls	r3, r3, #24
 8015d7a:	b09d      	sub	sp, #116	; 0x74
 8015d7c:	4607      	mov	r7, r0
 8015d7e:	460d      	mov	r5, r1
 8015d80:	4614      	mov	r4, r2
 8015d82:	d50e      	bpl.n	8015da2 <_svfiprintf_r+0x32>
 8015d84:	690b      	ldr	r3, [r1, #16]
 8015d86:	b963      	cbnz	r3, 8015da2 <_svfiprintf_r+0x32>
 8015d88:	2140      	movs	r1, #64	; 0x40
 8015d8a:	f7ff ff3b 	bl	8015c04 <_malloc_r>
 8015d8e:	6028      	str	r0, [r5, #0]
 8015d90:	6128      	str	r0, [r5, #16]
 8015d92:	b920      	cbnz	r0, 8015d9e <_svfiprintf_r+0x2e>
 8015d94:	230c      	movs	r3, #12
 8015d96:	603b      	str	r3, [r7, #0]
 8015d98:	f04f 30ff 	mov.w	r0, #4294967295
 8015d9c:	e0d1      	b.n	8015f42 <_svfiprintf_r+0x1d2>
 8015d9e:	2340      	movs	r3, #64	; 0x40
 8015da0:	616b      	str	r3, [r5, #20]
 8015da2:	2300      	movs	r3, #0
 8015da4:	9309      	str	r3, [sp, #36]	; 0x24
 8015da6:	2320      	movs	r3, #32
 8015da8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015dac:	f8cd 800c 	str.w	r8, [sp, #12]
 8015db0:	2330      	movs	r3, #48	; 0x30
 8015db2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015f5c <_svfiprintf_r+0x1ec>
 8015db6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015dba:	f04f 0901 	mov.w	r9, #1
 8015dbe:	4623      	mov	r3, r4
 8015dc0:	469a      	mov	sl, r3
 8015dc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015dc6:	b10a      	cbz	r2, 8015dcc <_svfiprintf_r+0x5c>
 8015dc8:	2a25      	cmp	r2, #37	; 0x25
 8015dca:	d1f9      	bne.n	8015dc0 <_svfiprintf_r+0x50>
 8015dcc:	ebba 0b04 	subs.w	fp, sl, r4
 8015dd0:	d00b      	beq.n	8015dea <_svfiprintf_r+0x7a>
 8015dd2:	465b      	mov	r3, fp
 8015dd4:	4622      	mov	r2, r4
 8015dd6:	4629      	mov	r1, r5
 8015dd8:	4638      	mov	r0, r7
 8015dda:	f7ff ff6d 	bl	8015cb8 <__ssputs_r>
 8015dde:	3001      	adds	r0, #1
 8015de0:	f000 80aa 	beq.w	8015f38 <_svfiprintf_r+0x1c8>
 8015de4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015de6:	445a      	add	r2, fp
 8015de8:	9209      	str	r2, [sp, #36]	; 0x24
 8015dea:	f89a 3000 	ldrb.w	r3, [sl]
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	f000 80a2 	beq.w	8015f38 <_svfiprintf_r+0x1c8>
 8015df4:	2300      	movs	r3, #0
 8015df6:	f04f 32ff 	mov.w	r2, #4294967295
 8015dfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015dfe:	f10a 0a01 	add.w	sl, sl, #1
 8015e02:	9304      	str	r3, [sp, #16]
 8015e04:	9307      	str	r3, [sp, #28]
 8015e06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015e0a:	931a      	str	r3, [sp, #104]	; 0x68
 8015e0c:	4654      	mov	r4, sl
 8015e0e:	2205      	movs	r2, #5
 8015e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015e14:	4851      	ldr	r0, [pc, #324]	; (8015f5c <_svfiprintf_r+0x1ec>)
 8015e16:	f7ea fa2b 	bl	8000270 <memchr>
 8015e1a:	9a04      	ldr	r2, [sp, #16]
 8015e1c:	b9d8      	cbnz	r0, 8015e56 <_svfiprintf_r+0xe6>
 8015e1e:	06d0      	lsls	r0, r2, #27
 8015e20:	bf44      	itt	mi
 8015e22:	2320      	movmi	r3, #32
 8015e24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015e28:	0711      	lsls	r1, r2, #28
 8015e2a:	bf44      	itt	mi
 8015e2c:	232b      	movmi	r3, #43	; 0x2b
 8015e2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015e32:	f89a 3000 	ldrb.w	r3, [sl]
 8015e36:	2b2a      	cmp	r3, #42	; 0x2a
 8015e38:	d015      	beq.n	8015e66 <_svfiprintf_r+0xf6>
 8015e3a:	9a07      	ldr	r2, [sp, #28]
 8015e3c:	4654      	mov	r4, sl
 8015e3e:	2000      	movs	r0, #0
 8015e40:	f04f 0c0a 	mov.w	ip, #10
 8015e44:	4621      	mov	r1, r4
 8015e46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015e4a:	3b30      	subs	r3, #48	; 0x30
 8015e4c:	2b09      	cmp	r3, #9
 8015e4e:	d94e      	bls.n	8015eee <_svfiprintf_r+0x17e>
 8015e50:	b1b0      	cbz	r0, 8015e80 <_svfiprintf_r+0x110>
 8015e52:	9207      	str	r2, [sp, #28]
 8015e54:	e014      	b.n	8015e80 <_svfiprintf_r+0x110>
 8015e56:	eba0 0308 	sub.w	r3, r0, r8
 8015e5a:	fa09 f303 	lsl.w	r3, r9, r3
 8015e5e:	4313      	orrs	r3, r2
 8015e60:	9304      	str	r3, [sp, #16]
 8015e62:	46a2      	mov	sl, r4
 8015e64:	e7d2      	b.n	8015e0c <_svfiprintf_r+0x9c>
 8015e66:	9b03      	ldr	r3, [sp, #12]
 8015e68:	1d19      	adds	r1, r3, #4
 8015e6a:	681b      	ldr	r3, [r3, #0]
 8015e6c:	9103      	str	r1, [sp, #12]
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	bfbb      	ittet	lt
 8015e72:	425b      	neglt	r3, r3
 8015e74:	f042 0202 	orrlt.w	r2, r2, #2
 8015e78:	9307      	strge	r3, [sp, #28]
 8015e7a:	9307      	strlt	r3, [sp, #28]
 8015e7c:	bfb8      	it	lt
 8015e7e:	9204      	strlt	r2, [sp, #16]
 8015e80:	7823      	ldrb	r3, [r4, #0]
 8015e82:	2b2e      	cmp	r3, #46	; 0x2e
 8015e84:	d10c      	bne.n	8015ea0 <_svfiprintf_r+0x130>
 8015e86:	7863      	ldrb	r3, [r4, #1]
 8015e88:	2b2a      	cmp	r3, #42	; 0x2a
 8015e8a:	d135      	bne.n	8015ef8 <_svfiprintf_r+0x188>
 8015e8c:	9b03      	ldr	r3, [sp, #12]
 8015e8e:	1d1a      	adds	r2, r3, #4
 8015e90:	681b      	ldr	r3, [r3, #0]
 8015e92:	9203      	str	r2, [sp, #12]
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	bfb8      	it	lt
 8015e98:	f04f 33ff 	movlt.w	r3, #4294967295
 8015e9c:	3402      	adds	r4, #2
 8015e9e:	9305      	str	r3, [sp, #20]
 8015ea0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015f6c <_svfiprintf_r+0x1fc>
 8015ea4:	7821      	ldrb	r1, [r4, #0]
 8015ea6:	2203      	movs	r2, #3
 8015ea8:	4650      	mov	r0, sl
 8015eaa:	f7ea f9e1 	bl	8000270 <memchr>
 8015eae:	b140      	cbz	r0, 8015ec2 <_svfiprintf_r+0x152>
 8015eb0:	2340      	movs	r3, #64	; 0x40
 8015eb2:	eba0 000a 	sub.w	r0, r0, sl
 8015eb6:	fa03 f000 	lsl.w	r0, r3, r0
 8015eba:	9b04      	ldr	r3, [sp, #16]
 8015ebc:	4303      	orrs	r3, r0
 8015ebe:	3401      	adds	r4, #1
 8015ec0:	9304      	str	r3, [sp, #16]
 8015ec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015ec6:	4826      	ldr	r0, [pc, #152]	; (8015f60 <_svfiprintf_r+0x1f0>)
 8015ec8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015ecc:	2206      	movs	r2, #6
 8015ece:	f7ea f9cf 	bl	8000270 <memchr>
 8015ed2:	2800      	cmp	r0, #0
 8015ed4:	d038      	beq.n	8015f48 <_svfiprintf_r+0x1d8>
 8015ed6:	4b23      	ldr	r3, [pc, #140]	; (8015f64 <_svfiprintf_r+0x1f4>)
 8015ed8:	bb1b      	cbnz	r3, 8015f22 <_svfiprintf_r+0x1b2>
 8015eda:	9b03      	ldr	r3, [sp, #12]
 8015edc:	3307      	adds	r3, #7
 8015ede:	f023 0307 	bic.w	r3, r3, #7
 8015ee2:	3308      	adds	r3, #8
 8015ee4:	9303      	str	r3, [sp, #12]
 8015ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ee8:	4433      	add	r3, r6
 8015eea:	9309      	str	r3, [sp, #36]	; 0x24
 8015eec:	e767      	b.n	8015dbe <_svfiprintf_r+0x4e>
 8015eee:	fb0c 3202 	mla	r2, ip, r2, r3
 8015ef2:	460c      	mov	r4, r1
 8015ef4:	2001      	movs	r0, #1
 8015ef6:	e7a5      	b.n	8015e44 <_svfiprintf_r+0xd4>
 8015ef8:	2300      	movs	r3, #0
 8015efa:	3401      	adds	r4, #1
 8015efc:	9305      	str	r3, [sp, #20]
 8015efe:	4619      	mov	r1, r3
 8015f00:	f04f 0c0a 	mov.w	ip, #10
 8015f04:	4620      	mov	r0, r4
 8015f06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015f0a:	3a30      	subs	r2, #48	; 0x30
 8015f0c:	2a09      	cmp	r2, #9
 8015f0e:	d903      	bls.n	8015f18 <_svfiprintf_r+0x1a8>
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d0c5      	beq.n	8015ea0 <_svfiprintf_r+0x130>
 8015f14:	9105      	str	r1, [sp, #20]
 8015f16:	e7c3      	b.n	8015ea0 <_svfiprintf_r+0x130>
 8015f18:	fb0c 2101 	mla	r1, ip, r1, r2
 8015f1c:	4604      	mov	r4, r0
 8015f1e:	2301      	movs	r3, #1
 8015f20:	e7f0      	b.n	8015f04 <_svfiprintf_r+0x194>
 8015f22:	ab03      	add	r3, sp, #12
 8015f24:	9300      	str	r3, [sp, #0]
 8015f26:	462a      	mov	r2, r5
 8015f28:	4b0f      	ldr	r3, [pc, #60]	; (8015f68 <_svfiprintf_r+0x1f8>)
 8015f2a:	a904      	add	r1, sp, #16
 8015f2c:	4638      	mov	r0, r7
 8015f2e:	f3af 8000 	nop.w
 8015f32:	1c42      	adds	r2, r0, #1
 8015f34:	4606      	mov	r6, r0
 8015f36:	d1d6      	bne.n	8015ee6 <_svfiprintf_r+0x176>
 8015f38:	89ab      	ldrh	r3, [r5, #12]
 8015f3a:	065b      	lsls	r3, r3, #25
 8015f3c:	f53f af2c 	bmi.w	8015d98 <_svfiprintf_r+0x28>
 8015f40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015f42:	b01d      	add	sp, #116	; 0x74
 8015f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f48:	ab03      	add	r3, sp, #12
 8015f4a:	9300      	str	r3, [sp, #0]
 8015f4c:	462a      	mov	r2, r5
 8015f4e:	4b06      	ldr	r3, [pc, #24]	; (8015f68 <_svfiprintf_r+0x1f8>)
 8015f50:	a904      	add	r1, sp, #16
 8015f52:	4638      	mov	r0, r7
 8015f54:	f000 f9d4 	bl	8016300 <_printf_i>
 8015f58:	e7eb      	b.n	8015f32 <_svfiprintf_r+0x1c2>
 8015f5a:	bf00      	nop
 8015f5c:	0801a088 	.word	0x0801a088
 8015f60:	0801a092 	.word	0x0801a092
 8015f64:	00000000 	.word	0x00000000
 8015f68:	08015cb9 	.word	0x08015cb9
 8015f6c:	0801a08e 	.word	0x0801a08e

08015f70 <__sfputc_r>:
 8015f70:	6893      	ldr	r3, [r2, #8]
 8015f72:	3b01      	subs	r3, #1
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	b410      	push	{r4}
 8015f78:	6093      	str	r3, [r2, #8]
 8015f7a:	da08      	bge.n	8015f8e <__sfputc_r+0x1e>
 8015f7c:	6994      	ldr	r4, [r2, #24]
 8015f7e:	42a3      	cmp	r3, r4
 8015f80:	db01      	blt.n	8015f86 <__sfputc_r+0x16>
 8015f82:	290a      	cmp	r1, #10
 8015f84:	d103      	bne.n	8015f8e <__sfputc_r+0x1e>
 8015f86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015f8a:	f7ff bad5 	b.w	8015538 <__swbuf_r>
 8015f8e:	6813      	ldr	r3, [r2, #0]
 8015f90:	1c58      	adds	r0, r3, #1
 8015f92:	6010      	str	r0, [r2, #0]
 8015f94:	7019      	strb	r1, [r3, #0]
 8015f96:	4608      	mov	r0, r1
 8015f98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015f9c:	4770      	bx	lr

08015f9e <__sfputs_r>:
 8015f9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fa0:	4606      	mov	r6, r0
 8015fa2:	460f      	mov	r7, r1
 8015fa4:	4614      	mov	r4, r2
 8015fa6:	18d5      	adds	r5, r2, r3
 8015fa8:	42ac      	cmp	r4, r5
 8015faa:	d101      	bne.n	8015fb0 <__sfputs_r+0x12>
 8015fac:	2000      	movs	r0, #0
 8015fae:	e007      	b.n	8015fc0 <__sfputs_r+0x22>
 8015fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015fb4:	463a      	mov	r2, r7
 8015fb6:	4630      	mov	r0, r6
 8015fb8:	f7ff ffda 	bl	8015f70 <__sfputc_r>
 8015fbc:	1c43      	adds	r3, r0, #1
 8015fbe:	d1f3      	bne.n	8015fa8 <__sfputs_r+0xa>
 8015fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015fc4 <_vfiprintf_r>:
 8015fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fc8:	460d      	mov	r5, r1
 8015fca:	b09d      	sub	sp, #116	; 0x74
 8015fcc:	4614      	mov	r4, r2
 8015fce:	4698      	mov	r8, r3
 8015fd0:	4606      	mov	r6, r0
 8015fd2:	b118      	cbz	r0, 8015fdc <_vfiprintf_r+0x18>
 8015fd4:	6983      	ldr	r3, [r0, #24]
 8015fd6:	b90b      	cbnz	r3, 8015fdc <_vfiprintf_r+0x18>
 8015fd8:	f7ff fca6 	bl	8015928 <__sinit>
 8015fdc:	4b89      	ldr	r3, [pc, #548]	; (8016204 <_vfiprintf_r+0x240>)
 8015fde:	429d      	cmp	r5, r3
 8015fe0:	d11b      	bne.n	801601a <_vfiprintf_r+0x56>
 8015fe2:	6875      	ldr	r5, [r6, #4]
 8015fe4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015fe6:	07d9      	lsls	r1, r3, #31
 8015fe8:	d405      	bmi.n	8015ff6 <_vfiprintf_r+0x32>
 8015fea:	89ab      	ldrh	r3, [r5, #12]
 8015fec:	059a      	lsls	r2, r3, #22
 8015fee:	d402      	bmi.n	8015ff6 <_vfiprintf_r+0x32>
 8015ff0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015ff2:	f7ff fd49 	bl	8015a88 <__retarget_lock_acquire_recursive>
 8015ff6:	89ab      	ldrh	r3, [r5, #12]
 8015ff8:	071b      	lsls	r3, r3, #28
 8015ffa:	d501      	bpl.n	8016000 <_vfiprintf_r+0x3c>
 8015ffc:	692b      	ldr	r3, [r5, #16]
 8015ffe:	b9eb      	cbnz	r3, 801603c <_vfiprintf_r+0x78>
 8016000:	4629      	mov	r1, r5
 8016002:	4630      	mov	r0, r6
 8016004:	f7ff faea 	bl	80155dc <__swsetup_r>
 8016008:	b1c0      	cbz	r0, 801603c <_vfiprintf_r+0x78>
 801600a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801600c:	07dc      	lsls	r4, r3, #31
 801600e:	d50e      	bpl.n	801602e <_vfiprintf_r+0x6a>
 8016010:	f04f 30ff 	mov.w	r0, #4294967295
 8016014:	b01d      	add	sp, #116	; 0x74
 8016016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801601a:	4b7b      	ldr	r3, [pc, #492]	; (8016208 <_vfiprintf_r+0x244>)
 801601c:	429d      	cmp	r5, r3
 801601e:	d101      	bne.n	8016024 <_vfiprintf_r+0x60>
 8016020:	68b5      	ldr	r5, [r6, #8]
 8016022:	e7df      	b.n	8015fe4 <_vfiprintf_r+0x20>
 8016024:	4b79      	ldr	r3, [pc, #484]	; (801620c <_vfiprintf_r+0x248>)
 8016026:	429d      	cmp	r5, r3
 8016028:	bf08      	it	eq
 801602a:	68f5      	ldreq	r5, [r6, #12]
 801602c:	e7da      	b.n	8015fe4 <_vfiprintf_r+0x20>
 801602e:	89ab      	ldrh	r3, [r5, #12]
 8016030:	0598      	lsls	r0, r3, #22
 8016032:	d4ed      	bmi.n	8016010 <_vfiprintf_r+0x4c>
 8016034:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016036:	f7ff fd28 	bl	8015a8a <__retarget_lock_release_recursive>
 801603a:	e7e9      	b.n	8016010 <_vfiprintf_r+0x4c>
 801603c:	2300      	movs	r3, #0
 801603e:	9309      	str	r3, [sp, #36]	; 0x24
 8016040:	2320      	movs	r3, #32
 8016042:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016046:	f8cd 800c 	str.w	r8, [sp, #12]
 801604a:	2330      	movs	r3, #48	; 0x30
 801604c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016210 <_vfiprintf_r+0x24c>
 8016050:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016054:	f04f 0901 	mov.w	r9, #1
 8016058:	4623      	mov	r3, r4
 801605a:	469a      	mov	sl, r3
 801605c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016060:	b10a      	cbz	r2, 8016066 <_vfiprintf_r+0xa2>
 8016062:	2a25      	cmp	r2, #37	; 0x25
 8016064:	d1f9      	bne.n	801605a <_vfiprintf_r+0x96>
 8016066:	ebba 0b04 	subs.w	fp, sl, r4
 801606a:	d00b      	beq.n	8016084 <_vfiprintf_r+0xc0>
 801606c:	465b      	mov	r3, fp
 801606e:	4622      	mov	r2, r4
 8016070:	4629      	mov	r1, r5
 8016072:	4630      	mov	r0, r6
 8016074:	f7ff ff93 	bl	8015f9e <__sfputs_r>
 8016078:	3001      	adds	r0, #1
 801607a:	f000 80aa 	beq.w	80161d2 <_vfiprintf_r+0x20e>
 801607e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016080:	445a      	add	r2, fp
 8016082:	9209      	str	r2, [sp, #36]	; 0x24
 8016084:	f89a 3000 	ldrb.w	r3, [sl]
 8016088:	2b00      	cmp	r3, #0
 801608a:	f000 80a2 	beq.w	80161d2 <_vfiprintf_r+0x20e>
 801608e:	2300      	movs	r3, #0
 8016090:	f04f 32ff 	mov.w	r2, #4294967295
 8016094:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016098:	f10a 0a01 	add.w	sl, sl, #1
 801609c:	9304      	str	r3, [sp, #16]
 801609e:	9307      	str	r3, [sp, #28]
 80160a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80160a4:	931a      	str	r3, [sp, #104]	; 0x68
 80160a6:	4654      	mov	r4, sl
 80160a8:	2205      	movs	r2, #5
 80160aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80160ae:	4858      	ldr	r0, [pc, #352]	; (8016210 <_vfiprintf_r+0x24c>)
 80160b0:	f7ea f8de 	bl	8000270 <memchr>
 80160b4:	9a04      	ldr	r2, [sp, #16]
 80160b6:	b9d8      	cbnz	r0, 80160f0 <_vfiprintf_r+0x12c>
 80160b8:	06d1      	lsls	r1, r2, #27
 80160ba:	bf44      	itt	mi
 80160bc:	2320      	movmi	r3, #32
 80160be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80160c2:	0713      	lsls	r3, r2, #28
 80160c4:	bf44      	itt	mi
 80160c6:	232b      	movmi	r3, #43	; 0x2b
 80160c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80160cc:	f89a 3000 	ldrb.w	r3, [sl]
 80160d0:	2b2a      	cmp	r3, #42	; 0x2a
 80160d2:	d015      	beq.n	8016100 <_vfiprintf_r+0x13c>
 80160d4:	9a07      	ldr	r2, [sp, #28]
 80160d6:	4654      	mov	r4, sl
 80160d8:	2000      	movs	r0, #0
 80160da:	f04f 0c0a 	mov.w	ip, #10
 80160de:	4621      	mov	r1, r4
 80160e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80160e4:	3b30      	subs	r3, #48	; 0x30
 80160e6:	2b09      	cmp	r3, #9
 80160e8:	d94e      	bls.n	8016188 <_vfiprintf_r+0x1c4>
 80160ea:	b1b0      	cbz	r0, 801611a <_vfiprintf_r+0x156>
 80160ec:	9207      	str	r2, [sp, #28]
 80160ee:	e014      	b.n	801611a <_vfiprintf_r+0x156>
 80160f0:	eba0 0308 	sub.w	r3, r0, r8
 80160f4:	fa09 f303 	lsl.w	r3, r9, r3
 80160f8:	4313      	orrs	r3, r2
 80160fa:	9304      	str	r3, [sp, #16]
 80160fc:	46a2      	mov	sl, r4
 80160fe:	e7d2      	b.n	80160a6 <_vfiprintf_r+0xe2>
 8016100:	9b03      	ldr	r3, [sp, #12]
 8016102:	1d19      	adds	r1, r3, #4
 8016104:	681b      	ldr	r3, [r3, #0]
 8016106:	9103      	str	r1, [sp, #12]
 8016108:	2b00      	cmp	r3, #0
 801610a:	bfbb      	ittet	lt
 801610c:	425b      	neglt	r3, r3
 801610e:	f042 0202 	orrlt.w	r2, r2, #2
 8016112:	9307      	strge	r3, [sp, #28]
 8016114:	9307      	strlt	r3, [sp, #28]
 8016116:	bfb8      	it	lt
 8016118:	9204      	strlt	r2, [sp, #16]
 801611a:	7823      	ldrb	r3, [r4, #0]
 801611c:	2b2e      	cmp	r3, #46	; 0x2e
 801611e:	d10c      	bne.n	801613a <_vfiprintf_r+0x176>
 8016120:	7863      	ldrb	r3, [r4, #1]
 8016122:	2b2a      	cmp	r3, #42	; 0x2a
 8016124:	d135      	bne.n	8016192 <_vfiprintf_r+0x1ce>
 8016126:	9b03      	ldr	r3, [sp, #12]
 8016128:	1d1a      	adds	r2, r3, #4
 801612a:	681b      	ldr	r3, [r3, #0]
 801612c:	9203      	str	r2, [sp, #12]
 801612e:	2b00      	cmp	r3, #0
 8016130:	bfb8      	it	lt
 8016132:	f04f 33ff 	movlt.w	r3, #4294967295
 8016136:	3402      	adds	r4, #2
 8016138:	9305      	str	r3, [sp, #20]
 801613a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016220 <_vfiprintf_r+0x25c>
 801613e:	7821      	ldrb	r1, [r4, #0]
 8016140:	2203      	movs	r2, #3
 8016142:	4650      	mov	r0, sl
 8016144:	f7ea f894 	bl	8000270 <memchr>
 8016148:	b140      	cbz	r0, 801615c <_vfiprintf_r+0x198>
 801614a:	2340      	movs	r3, #64	; 0x40
 801614c:	eba0 000a 	sub.w	r0, r0, sl
 8016150:	fa03 f000 	lsl.w	r0, r3, r0
 8016154:	9b04      	ldr	r3, [sp, #16]
 8016156:	4303      	orrs	r3, r0
 8016158:	3401      	adds	r4, #1
 801615a:	9304      	str	r3, [sp, #16]
 801615c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016160:	482c      	ldr	r0, [pc, #176]	; (8016214 <_vfiprintf_r+0x250>)
 8016162:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016166:	2206      	movs	r2, #6
 8016168:	f7ea f882 	bl	8000270 <memchr>
 801616c:	2800      	cmp	r0, #0
 801616e:	d03f      	beq.n	80161f0 <_vfiprintf_r+0x22c>
 8016170:	4b29      	ldr	r3, [pc, #164]	; (8016218 <_vfiprintf_r+0x254>)
 8016172:	bb1b      	cbnz	r3, 80161bc <_vfiprintf_r+0x1f8>
 8016174:	9b03      	ldr	r3, [sp, #12]
 8016176:	3307      	adds	r3, #7
 8016178:	f023 0307 	bic.w	r3, r3, #7
 801617c:	3308      	adds	r3, #8
 801617e:	9303      	str	r3, [sp, #12]
 8016180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016182:	443b      	add	r3, r7
 8016184:	9309      	str	r3, [sp, #36]	; 0x24
 8016186:	e767      	b.n	8016058 <_vfiprintf_r+0x94>
 8016188:	fb0c 3202 	mla	r2, ip, r2, r3
 801618c:	460c      	mov	r4, r1
 801618e:	2001      	movs	r0, #1
 8016190:	e7a5      	b.n	80160de <_vfiprintf_r+0x11a>
 8016192:	2300      	movs	r3, #0
 8016194:	3401      	adds	r4, #1
 8016196:	9305      	str	r3, [sp, #20]
 8016198:	4619      	mov	r1, r3
 801619a:	f04f 0c0a 	mov.w	ip, #10
 801619e:	4620      	mov	r0, r4
 80161a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80161a4:	3a30      	subs	r2, #48	; 0x30
 80161a6:	2a09      	cmp	r2, #9
 80161a8:	d903      	bls.n	80161b2 <_vfiprintf_r+0x1ee>
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d0c5      	beq.n	801613a <_vfiprintf_r+0x176>
 80161ae:	9105      	str	r1, [sp, #20]
 80161b0:	e7c3      	b.n	801613a <_vfiprintf_r+0x176>
 80161b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80161b6:	4604      	mov	r4, r0
 80161b8:	2301      	movs	r3, #1
 80161ba:	e7f0      	b.n	801619e <_vfiprintf_r+0x1da>
 80161bc:	ab03      	add	r3, sp, #12
 80161be:	9300      	str	r3, [sp, #0]
 80161c0:	462a      	mov	r2, r5
 80161c2:	4b16      	ldr	r3, [pc, #88]	; (801621c <_vfiprintf_r+0x258>)
 80161c4:	a904      	add	r1, sp, #16
 80161c6:	4630      	mov	r0, r6
 80161c8:	f3af 8000 	nop.w
 80161cc:	4607      	mov	r7, r0
 80161ce:	1c78      	adds	r0, r7, #1
 80161d0:	d1d6      	bne.n	8016180 <_vfiprintf_r+0x1bc>
 80161d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80161d4:	07d9      	lsls	r1, r3, #31
 80161d6:	d405      	bmi.n	80161e4 <_vfiprintf_r+0x220>
 80161d8:	89ab      	ldrh	r3, [r5, #12]
 80161da:	059a      	lsls	r2, r3, #22
 80161dc:	d402      	bmi.n	80161e4 <_vfiprintf_r+0x220>
 80161de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80161e0:	f7ff fc53 	bl	8015a8a <__retarget_lock_release_recursive>
 80161e4:	89ab      	ldrh	r3, [r5, #12]
 80161e6:	065b      	lsls	r3, r3, #25
 80161e8:	f53f af12 	bmi.w	8016010 <_vfiprintf_r+0x4c>
 80161ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80161ee:	e711      	b.n	8016014 <_vfiprintf_r+0x50>
 80161f0:	ab03      	add	r3, sp, #12
 80161f2:	9300      	str	r3, [sp, #0]
 80161f4:	462a      	mov	r2, r5
 80161f6:	4b09      	ldr	r3, [pc, #36]	; (801621c <_vfiprintf_r+0x258>)
 80161f8:	a904      	add	r1, sp, #16
 80161fa:	4630      	mov	r0, r6
 80161fc:	f000 f880 	bl	8016300 <_printf_i>
 8016200:	e7e4      	b.n	80161cc <_vfiprintf_r+0x208>
 8016202:	bf00      	nop
 8016204:	0801a048 	.word	0x0801a048
 8016208:	0801a068 	.word	0x0801a068
 801620c:	0801a028 	.word	0x0801a028
 8016210:	0801a088 	.word	0x0801a088
 8016214:	0801a092 	.word	0x0801a092
 8016218:	00000000 	.word	0x00000000
 801621c:	08015f9f 	.word	0x08015f9f
 8016220:	0801a08e 	.word	0x0801a08e

08016224 <_printf_common>:
 8016224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016228:	4616      	mov	r6, r2
 801622a:	4699      	mov	r9, r3
 801622c:	688a      	ldr	r2, [r1, #8]
 801622e:	690b      	ldr	r3, [r1, #16]
 8016230:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016234:	4293      	cmp	r3, r2
 8016236:	bfb8      	it	lt
 8016238:	4613      	movlt	r3, r2
 801623a:	6033      	str	r3, [r6, #0]
 801623c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016240:	4607      	mov	r7, r0
 8016242:	460c      	mov	r4, r1
 8016244:	b10a      	cbz	r2, 801624a <_printf_common+0x26>
 8016246:	3301      	adds	r3, #1
 8016248:	6033      	str	r3, [r6, #0]
 801624a:	6823      	ldr	r3, [r4, #0]
 801624c:	0699      	lsls	r1, r3, #26
 801624e:	bf42      	ittt	mi
 8016250:	6833      	ldrmi	r3, [r6, #0]
 8016252:	3302      	addmi	r3, #2
 8016254:	6033      	strmi	r3, [r6, #0]
 8016256:	6825      	ldr	r5, [r4, #0]
 8016258:	f015 0506 	ands.w	r5, r5, #6
 801625c:	d106      	bne.n	801626c <_printf_common+0x48>
 801625e:	f104 0a19 	add.w	sl, r4, #25
 8016262:	68e3      	ldr	r3, [r4, #12]
 8016264:	6832      	ldr	r2, [r6, #0]
 8016266:	1a9b      	subs	r3, r3, r2
 8016268:	42ab      	cmp	r3, r5
 801626a:	dc26      	bgt.n	80162ba <_printf_common+0x96>
 801626c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016270:	1e13      	subs	r3, r2, #0
 8016272:	6822      	ldr	r2, [r4, #0]
 8016274:	bf18      	it	ne
 8016276:	2301      	movne	r3, #1
 8016278:	0692      	lsls	r2, r2, #26
 801627a:	d42b      	bmi.n	80162d4 <_printf_common+0xb0>
 801627c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016280:	4649      	mov	r1, r9
 8016282:	4638      	mov	r0, r7
 8016284:	47c0      	blx	r8
 8016286:	3001      	adds	r0, #1
 8016288:	d01e      	beq.n	80162c8 <_printf_common+0xa4>
 801628a:	6823      	ldr	r3, [r4, #0]
 801628c:	68e5      	ldr	r5, [r4, #12]
 801628e:	6832      	ldr	r2, [r6, #0]
 8016290:	f003 0306 	and.w	r3, r3, #6
 8016294:	2b04      	cmp	r3, #4
 8016296:	bf08      	it	eq
 8016298:	1aad      	subeq	r5, r5, r2
 801629a:	68a3      	ldr	r3, [r4, #8]
 801629c:	6922      	ldr	r2, [r4, #16]
 801629e:	bf0c      	ite	eq
 80162a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80162a4:	2500      	movne	r5, #0
 80162a6:	4293      	cmp	r3, r2
 80162a8:	bfc4      	itt	gt
 80162aa:	1a9b      	subgt	r3, r3, r2
 80162ac:	18ed      	addgt	r5, r5, r3
 80162ae:	2600      	movs	r6, #0
 80162b0:	341a      	adds	r4, #26
 80162b2:	42b5      	cmp	r5, r6
 80162b4:	d11a      	bne.n	80162ec <_printf_common+0xc8>
 80162b6:	2000      	movs	r0, #0
 80162b8:	e008      	b.n	80162cc <_printf_common+0xa8>
 80162ba:	2301      	movs	r3, #1
 80162bc:	4652      	mov	r2, sl
 80162be:	4649      	mov	r1, r9
 80162c0:	4638      	mov	r0, r7
 80162c2:	47c0      	blx	r8
 80162c4:	3001      	adds	r0, #1
 80162c6:	d103      	bne.n	80162d0 <_printf_common+0xac>
 80162c8:	f04f 30ff 	mov.w	r0, #4294967295
 80162cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80162d0:	3501      	adds	r5, #1
 80162d2:	e7c6      	b.n	8016262 <_printf_common+0x3e>
 80162d4:	18e1      	adds	r1, r4, r3
 80162d6:	1c5a      	adds	r2, r3, #1
 80162d8:	2030      	movs	r0, #48	; 0x30
 80162da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80162de:	4422      	add	r2, r4
 80162e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80162e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80162e8:	3302      	adds	r3, #2
 80162ea:	e7c7      	b.n	801627c <_printf_common+0x58>
 80162ec:	2301      	movs	r3, #1
 80162ee:	4622      	mov	r2, r4
 80162f0:	4649      	mov	r1, r9
 80162f2:	4638      	mov	r0, r7
 80162f4:	47c0      	blx	r8
 80162f6:	3001      	adds	r0, #1
 80162f8:	d0e6      	beq.n	80162c8 <_printf_common+0xa4>
 80162fa:	3601      	adds	r6, #1
 80162fc:	e7d9      	b.n	80162b2 <_printf_common+0x8e>
	...

08016300 <_printf_i>:
 8016300:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016304:	460c      	mov	r4, r1
 8016306:	4691      	mov	r9, r2
 8016308:	7e27      	ldrb	r7, [r4, #24]
 801630a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801630c:	2f78      	cmp	r7, #120	; 0x78
 801630e:	4680      	mov	r8, r0
 8016310:	469a      	mov	sl, r3
 8016312:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016316:	d807      	bhi.n	8016328 <_printf_i+0x28>
 8016318:	2f62      	cmp	r7, #98	; 0x62
 801631a:	d80a      	bhi.n	8016332 <_printf_i+0x32>
 801631c:	2f00      	cmp	r7, #0
 801631e:	f000 80d8 	beq.w	80164d2 <_printf_i+0x1d2>
 8016322:	2f58      	cmp	r7, #88	; 0x58
 8016324:	f000 80a3 	beq.w	801646e <_printf_i+0x16e>
 8016328:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801632c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016330:	e03a      	b.n	80163a8 <_printf_i+0xa8>
 8016332:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016336:	2b15      	cmp	r3, #21
 8016338:	d8f6      	bhi.n	8016328 <_printf_i+0x28>
 801633a:	a001      	add	r0, pc, #4	; (adr r0, 8016340 <_printf_i+0x40>)
 801633c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8016340:	08016399 	.word	0x08016399
 8016344:	080163ad 	.word	0x080163ad
 8016348:	08016329 	.word	0x08016329
 801634c:	08016329 	.word	0x08016329
 8016350:	08016329 	.word	0x08016329
 8016354:	08016329 	.word	0x08016329
 8016358:	080163ad 	.word	0x080163ad
 801635c:	08016329 	.word	0x08016329
 8016360:	08016329 	.word	0x08016329
 8016364:	08016329 	.word	0x08016329
 8016368:	08016329 	.word	0x08016329
 801636c:	080164b9 	.word	0x080164b9
 8016370:	080163dd 	.word	0x080163dd
 8016374:	0801649b 	.word	0x0801649b
 8016378:	08016329 	.word	0x08016329
 801637c:	08016329 	.word	0x08016329
 8016380:	080164db 	.word	0x080164db
 8016384:	08016329 	.word	0x08016329
 8016388:	080163dd 	.word	0x080163dd
 801638c:	08016329 	.word	0x08016329
 8016390:	08016329 	.word	0x08016329
 8016394:	080164a3 	.word	0x080164a3
 8016398:	680b      	ldr	r3, [r1, #0]
 801639a:	1d1a      	adds	r2, r3, #4
 801639c:	681b      	ldr	r3, [r3, #0]
 801639e:	600a      	str	r2, [r1, #0]
 80163a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80163a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80163a8:	2301      	movs	r3, #1
 80163aa:	e0a3      	b.n	80164f4 <_printf_i+0x1f4>
 80163ac:	6825      	ldr	r5, [r4, #0]
 80163ae:	6808      	ldr	r0, [r1, #0]
 80163b0:	062e      	lsls	r6, r5, #24
 80163b2:	f100 0304 	add.w	r3, r0, #4
 80163b6:	d50a      	bpl.n	80163ce <_printf_i+0xce>
 80163b8:	6805      	ldr	r5, [r0, #0]
 80163ba:	600b      	str	r3, [r1, #0]
 80163bc:	2d00      	cmp	r5, #0
 80163be:	da03      	bge.n	80163c8 <_printf_i+0xc8>
 80163c0:	232d      	movs	r3, #45	; 0x2d
 80163c2:	426d      	negs	r5, r5
 80163c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80163c8:	485e      	ldr	r0, [pc, #376]	; (8016544 <_printf_i+0x244>)
 80163ca:	230a      	movs	r3, #10
 80163cc:	e019      	b.n	8016402 <_printf_i+0x102>
 80163ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80163d2:	6805      	ldr	r5, [r0, #0]
 80163d4:	600b      	str	r3, [r1, #0]
 80163d6:	bf18      	it	ne
 80163d8:	b22d      	sxthne	r5, r5
 80163da:	e7ef      	b.n	80163bc <_printf_i+0xbc>
 80163dc:	680b      	ldr	r3, [r1, #0]
 80163de:	6825      	ldr	r5, [r4, #0]
 80163e0:	1d18      	adds	r0, r3, #4
 80163e2:	6008      	str	r0, [r1, #0]
 80163e4:	0628      	lsls	r0, r5, #24
 80163e6:	d501      	bpl.n	80163ec <_printf_i+0xec>
 80163e8:	681d      	ldr	r5, [r3, #0]
 80163ea:	e002      	b.n	80163f2 <_printf_i+0xf2>
 80163ec:	0669      	lsls	r1, r5, #25
 80163ee:	d5fb      	bpl.n	80163e8 <_printf_i+0xe8>
 80163f0:	881d      	ldrh	r5, [r3, #0]
 80163f2:	4854      	ldr	r0, [pc, #336]	; (8016544 <_printf_i+0x244>)
 80163f4:	2f6f      	cmp	r7, #111	; 0x6f
 80163f6:	bf0c      	ite	eq
 80163f8:	2308      	moveq	r3, #8
 80163fa:	230a      	movne	r3, #10
 80163fc:	2100      	movs	r1, #0
 80163fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016402:	6866      	ldr	r6, [r4, #4]
 8016404:	60a6      	str	r6, [r4, #8]
 8016406:	2e00      	cmp	r6, #0
 8016408:	bfa2      	ittt	ge
 801640a:	6821      	ldrge	r1, [r4, #0]
 801640c:	f021 0104 	bicge.w	r1, r1, #4
 8016410:	6021      	strge	r1, [r4, #0]
 8016412:	b90d      	cbnz	r5, 8016418 <_printf_i+0x118>
 8016414:	2e00      	cmp	r6, #0
 8016416:	d04d      	beq.n	80164b4 <_printf_i+0x1b4>
 8016418:	4616      	mov	r6, r2
 801641a:	fbb5 f1f3 	udiv	r1, r5, r3
 801641e:	fb03 5711 	mls	r7, r3, r1, r5
 8016422:	5dc7      	ldrb	r7, [r0, r7]
 8016424:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016428:	462f      	mov	r7, r5
 801642a:	42bb      	cmp	r3, r7
 801642c:	460d      	mov	r5, r1
 801642e:	d9f4      	bls.n	801641a <_printf_i+0x11a>
 8016430:	2b08      	cmp	r3, #8
 8016432:	d10b      	bne.n	801644c <_printf_i+0x14c>
 8016434:	6823      	ldr	r3, [r4, #0]
 8016436:	07df      	lsls	r7, r3, #31
 8016438:	d508      	bpl.n	801644c <_printf_i+0x14c>
 801643a:	6923      	ldr	r3, [r4, #16]
 801643c:	6861      	ldr	r1, [r4, #4]
 801643e:	4299      	cmp	r1, r3
 8016440:	bfde      	ittt	le
 8016442:	2330      	movle	r3, #48	; 0x30
 8016444:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016448:	f106 36ff 	addle.w	r6, r6, #4294967295
 801644c:	1b92      	subs	r2, r2, r6
 801644e:	6122      	str	r2, [r4, #16]
 8016450:	f8cd a000 	str.w	sl, [sp]
 8016454:	464b      	mov	r3, r9
 8016456:	aa03      	add	r2, sp, #12
 8016458:	4621      	mov	r1, r4
 801645a:	4640      	mov	r0, r8
 801645c:	f7ff fee2 	bl	8016224 <_printf_common>
 8016460:	3001      	adds	r0, #1
 8016462:	d14c      	bne.n	80164fe <_printf_i+0x1fe>
 8016464:	f04f 30ff 	mov.w	r0, #4294967295
 8016468:	b004      	add	sp, #16
 801646a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801646e:	4835      	ldr	r0, [pc, #212]	; (8016544 <_printf_i+0x244>)
 8016470:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016474:	6823      	ldr	r3, [r4, #0]
 8016476:	680e      	ldr	r6, [r1, #0]
 8016478:	061f      	lsls	r7, r3, #24
 801647a:	f856 5b04 	ldr.w	r5, [r6], #4
 801647e:	600e      	str	r6, [r1, #0]
 8016480:	d514      	bpl.n	80164ac <_printf_i+0x1ac>
 8016482:	07d9      	lsls	r1, r3, #31
 8016484:	bf44      	itt	mi
 8016486:	f043 0320 	orrmi.w	r3, r3, #32
 801648a:	6023      	strmi	r3, [r4, #0]
 801648c:	b91d      	cbnz	r5, 8016496 <_printf_i+0x196>
 801648e:	6823      	ldr	r3, [r4, #0]
 8016490:	f023 0320 	bic.w	r3, r3, #32
 8016494:	6023      	str	r3, [r4, #0]
 8016496:	2310      	movs	r3, #16
 8016498:	e7b0      	b.n	80163fc <_printf_i+0xfc>
 801649a:	6823      	ldr	r3, [r4, #0]
 801649c:	f043 0320 	orr.w	r3, r3, #32
 80164a0:	6023      	str	r3, [r4, #0]
 80164a2:	2378      	movs	r3, #120	; 0x78
 80164a4:	4828      	ldr	r0, [pc, #160]	; (8016548 <_printf_i+0x248>)
 80164a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80164aa:	e7e3      	b.n	8016474 <_printf_i+0x174>
 80164ac:	065e      	lsls	r6, r3, #25
 80164ae:	bf48      	it	mi
 80164b0:	b2ad      	uxthmi	r5, r5
 80164b2:	e7e6      	b.n	8016482 <_printf_i+0x182>
 80164b4:	4616      	mov	r6, r2
 80164b6:	e7bb      	b.n	8016430 <_printf_i+0x130>
 80164b8:	680b      	ldr	r3, [r1, #0]
 80164ba:	6826      	ldr	r6, [r4, #0]
 80164bc:	6960      	ldr	r0, [r4, #20]
 80164be:	1d1d      	adds	r5, r3, #4
 80164c0:	600d      	str	r5, [r1, #0]
 80164c2:	0635      	lsls	r5, r6, #24
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	d501      	bpl.n	80164cc <_printf_i+0x1cc>
 80164c8:	6018      	str	r0, [r3, #0]
 80164ca:	e002      	b.n	80164d2 <_printf_i+0x1d2>
 80164cc:	0671      	lsls	r1, r6, #25
 80164ce:	d5fb      	bpl.n	80164c8 <_printf_i+0x1c8>
 80164d0:	8018      	strh	r0, [r3, #0]
 80164d2:	2300      	movs	r3, #0
 80164d4:	6123      	str	r3, [r4, #16]
 80164d6:	4616      	mov	r6, r2
 80164d8:	e7ba      	b.n	8016450 <_printf_i+0x150>
 80164da:	680b      	ldr	r3, [r1, #0]
 80164dc:	1d1a      	adds	r2, r3, #4
 80164de:	600a      	str	r2, [r1, #0]
 80164e0:	681e      	ldr	r6, [r3, #0]
 80164e2:	6862      	ldr	r2, [r4, #4]
 80164e4:	2100      	movs	r1, #0
 80164e6:	4630      	mov	r0, r6
 80164e8:	f7e9 fec2 	bl	8000270 <memchr>
 80164ec:	b108      	cbz	r0, 80164f2 <_printf_i+0x1f2>
 80164ee:	1b80      	subs	r0, r0, r6
 80164f0:	6060      	str	r0, [r4, #4]
 80164f2:	6863      	ldr	r3, [r4, #4]
 80164f4:	6123      	str	r3, [r4, #16]
 80164f6:	2300      	movs	r3, #0
 80164f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80164fc:	e7a8      	b.n	8016450 <_printf_i+0x150>
 80164fe:	6923      	ldr	r3, [r4, #16]
 8016500:	4632      	mov	r2, r6
 8016502:	4649      	mov	r1, r9
 8016504:	4640      	mov	r0, r8
 8016506:	47d0      	blx	sl
 8016508:	3001      	adds	r0, #1
 801650a:	d0ab      	beq.n	8016464 <_printf_i+0x164>
 801650c:	6823      	ldr	r3, [r4, #0]
 801650e:	079b      	lsls	r3, r3, #30
 8016510:	d413      	bmi.n	801653a <_printf_i+0x23a>
 8016512:	68e0      	ldr	r0, [r4, #12]
 8016514:	9b03      	ldr	r3, [sp, #12]
 8016516:	4298      	cmp	r0, r3
 8016518:	bfb8      	it	lt
 801651a:	4618      	movlt	r0, r3
 801651c:	e7a4      	b.n	8016468 <_printf_i+0x168>
 801651e:	2301      	movs	r3, #1
 8016520:	4632      	mov	r2, r6
 8016522:	4649      	mov	r1, r9
 8016524:	4640      	mov	r0, r8
 8016526:	47d0      	blx	sl
 8016528:	3001      	adds	r0, #1
 801652a:	d09b      	beq.n	8016464 <_printf_i+0x164>
 801652c:	3501      	adds	r5, #1
 801652e:	68e3      	ldr	r3, [r4, #12]
 8016530:	9903      	ldr	r1, [sp, #12]
 8016532:	1a5b      	subs	r3, r3, r1
 8016534:	42ab      	cmp	r3, r5
 8016536:	dcf2      	bgt.n	801651e <_printf_i+0x21e>
 8016538:	e7eb      	b.n	8016512 <_printf_i+0x212>
 801653a:	2500      	movs	r5, #0
 801653c:	f104 0619 	add.w	r6, r4, #25
 8016540:	e7f5      	b.n	801652e <_printf_i+0x22e>
 8016542:	bf00      	nop
 8016544:	0801a099 	.word	0x0801a099
 8016548:	0801a0aa 	.word	0x0801a0aa

0801654c <_sbrk_r>:
 801654c:	b538      	push	{r3, r4, r5, lr}
 801654e:	4d06      	ldr	r5, [pc, #24]	; (8016568 <_sbrk_r+0x1c>)
 8016550:	2300      	movs	r3, #0
 8016552:	4604      	mov	r4, r0
 8016554:	4608      	mov	r0, r1
 8016556:	602b      	str	r3, [r5, #0]
 8016558:	f7ea fd2e 	bl	8000fb8 <_sbrk>
 801655c:	1c43      	adds	r3, r0, #1
 801655e:	d102      	bne.n	8016566 <_sbrk_r+0x1a>
 8016560:	682b      	ldr	r3, [r5, #0]
 8016562:	b103      	cbz	r3, 8016566 <_sbrk_r+0x1a>
 8016564:	6023      	str	r3, [r4, #0]
 8016566:	bd38      	pop	{r3, r4, r5, pc}
 8016568:	2000ab34 	.word	0x2000ab34

0801656c <__sread>:
 801656c:	b510      	push	{r4, lr}
 801656e:	460c      	mov	r4, r1
 8016570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016574:	f000 f8ce 	bl	8016714 <_read_r>
 8016578:	2800      	cmp	r0, #0
 801657a:	bfab      	itete	ge
 801657c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801657e:	89a3      	ldrhlt	r3, [r4, #12]
 8016580:	181b      	addge	r3, r3, r0
 8016582:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016586:	bfac      	ite	ge
 8016588:	6563      	strge	r3, [r4, #84]	; 0x54
 801658a:	81a3      	strhlt	r3, [r4, #12]
 801658c:	bd10      	pop	{r4, pc}

0801658e <__swrite>:
 801658e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016592:	461f      	mov	r7, r3
 8016594:	898b      	ldrh	r3, [r1, #12]
 8016596:	05db      	lsls	r3, r3, #23
 8016598:	4605      	mov	r5, r0
 801659a:	460c      	mov	r4, r1
 801659c:	4616      	mov	r6, r2
 801659e:	d505      	bpl.n	80165ac <__swrite+0x1e>
 80165a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80165a4:	2302      	movs	r3, #2
 80165a6:	2200      	movs	r2, #0
 80165a8:	f000 f870 	bl	801668c <_lseek_r>
 80165ac:	89a3      	ldrh	r3, [r4, #12]
 80165ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80165b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80165b6:	81a3      	strh	r3, [r4, #12]
 80165b8:	4632      	mov	r2, r6
 80165ba:	463b      	mov	r3, r7
 80165bc:	4628      	mov	r0, r5
 80165be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80165c2:	f000 b817 	b.w	80165f4 <_write_r>

080165c6 <__sseek>:
 80165c6:	b510      	push	{r4, lr}
 80165c8:	460c      	mov	r4, r1
 80165ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80165ce:	f000 f85d 	bl	801668c <_lseek_r>
 80165d2:	1c43      	adds	r3, r0, #1
 80165d4:	89a3      	ldrh	r3, [r4, #12]
 80165d6:	bf15      	itete	ne
 80165d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80165da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80165de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80165e2:	81a3      	strheq	r3, [r4, #12]
 80165e4:	bf18      	it	ne
 80165e6:	81a3      	strhne	r3, [r4, #12]
 80165e8:	bd10      	pop	{r4, pc}

080165ea <__sclose>:
 80165ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80165ee:	f000 b81b 	b.w	8016628 <_close_r>
	...

080165f4 <_write_r>:
 80165f4:	b538      	push	{r3, r4, r5, lr}
 80165f6:	4d07      	ldr	r5, [pc, #28]	; (8016614 <_write_r+0x20>)
 80165f8:	4604      	mov	r4, r0
 80165fa:	4608      	mov	r0, r1
 80165fc:	4611      	mov	r1, r2
 80165fe:	2200      	movs	r2, #0
 8016600:	602a      	str	r2, [r5, #0]
 8016602:	461a      	mov	r2, r3
 8016604:	f7ea fc87 	bl	8000f16 <_write>
 8016608:	1c43      	adds	r3, r0, #1
 801660a:	d102      	bne.n	8016612 <_write_r+0x1e>
 801660c:	682b      	ldr	r3, [r5, #0]
 801660e:	b103      	cbz	r3, 8016612 <_write_r+0x1e>
 8016610:	6023      	str	r3, [r4, #0]
 8016612:	bd38      	pop	{r3, r4, r5, pc}
 8016614:	2000ab34 	.word	0x2000ab34

08016618 <abort>:
 8016618:	b508      	push	{r3, lr}
 801661a:	2006      	movs	r0, #6
 801661c:	f000 f8b4 	bl	8016788 <raise>
 8016620:	2001      	movs	r0, #1
 8016622:	f7ea fc51 	bl	8000ec8 <_exit>
	...

08016628 <_close_r>:
 8016628:	b538      	push	{r3, r4, r5, lr}
 801662a:	4d06      	ldr	r5, [pc, #24]	; (8016644 <_close_r+0x1c>)
 801662c:	2300      	movs	r3, #0
 801662e:	4604      	mov	r4, r0
 8016630:	4608      	mov	r0, r1
 8016632:	602b      	str	r3, [r5, #0]
 8016634:	f7ea fc8b 	bl	8000f4e <_close>
 8016638:	1c43      	adds	r3, r0, #1
 801663a:	d102      	bne.n	8016642 <_close_r+0x1a>
 801663c:	682b      	ldr	r3, [r5, #0]
 801663e:	b103      	cbz	r3, 8016642 <_close_r+0x1a>
 8016640:	6023      	str	r3, [r4, #0]
 8016642:	bd38      	pop	{r3, r4, r5, pc}
 8016644:	2000ab34 	.word	0x2000ab34

08016648 <_fstat_r>:
 8016648:	b538      	push	{r3, r4, r5, lr}
 801664a:	4d07      	ldr	r5, [pc, #28]	; (8016668 <_fstat_r+0x20>)
 801664c:	2300      	movs	r3, #0
 801664e:	4604      	mov	r4, r0
 8016650:	4608      	mov	r0, r1
 8016652:	4611      	mov	r1, r2
 8016654:	602b      	str	r3, [r5, #0]
 8016656:	f7ea fc86 	bl	8000f66 <_fstat>
 801665a:	1c43      	adds	r3, r0, #1
 801665c:	d102      	bne.n	8016664 <_fstat_r+0x1c>
 801665e:	682b      	ldr	r3, [r5, #0]
 8016660:	b103      	cbz	r3, 8016664 <_fstat_r+0x1c>
 8016662:	6023      	str	r3, [r4, #0]
 8016664:	bd38      	pop	{r3, r4, r5, pc}
 8016666:	bf00      	nop
 8016668:	2000ab34 	.word	0x2000ab34

0801666c <_isatty_r>:
 801666c:	b538      	push	{r3, r4, r5, lr}
 801666e:	4d06      	ldr	r5, [pc, #24]	; (8016688 <_isatty_r+0x1c>)
 8016670:	2300      	movs	r3, #0
 8016672:	4604      	mov	r4, r0
 8016674:	4608      	mov	r0, r1
 8016676:	602b      	str	r3, [r5, #0]
 8016678:	f7ea fc85 	bl	8000f86 <_isatty>
 801667c:	1c43      	adds	r3, r0, #1
 801667e:	d102      	bne.n	8016686 <_isatty_r+0x1a>
 8016680:	682b      	ldr	r3, [r5, #0]
 8016682:	b103      	cbz	r3, 8016686 <_isatty_r+0x1a>
 8016684:	6023      	str	r3, [r4, #0]
 8016686:	bd38      	pop	{r3, r4, r5, pc}
 8016688:	2000ab34 	.word	0x2000ab34

0801668c <_lseek_r>:
 801668c:	b538      	push	{r3, r4, r5, lr}
 801668e:	4d07      	ldr	r5, [pc, #28]	; (80166ac <_lseek_r+0x20>)
 8016690:	4604      	mov	r4, r0
 8016692:	4608      	mov	r0, r1
 8016694:	4611      	mov	r1, r2
 8016696:	2200      	movs	r2, #0
 8016698:	602a      	str	r2, [r5, #0]
 801669a:	461a      	mov	r2, r3
 801669c:	f7ea fc7e 	bl	8000f9c <_lseek>
 80166a0:	1c43      	adds	r3, r0, #1
 80166a2:	d102      	bne.n	80166aa <_lseek_r+0x1e>
 80166a4:	682b      	ldr	r3, [r5, #0]
 80166a6:	b103      	cbz	r3, 80166aa <_lseek_r+0x1e>
 80166a8:	6023      	str	r3, [r4, #0]
 80166aa:	bd38      	pop	{r3, r4, r5, pc}
 80166ac:	2000ab34 	.word	0x2000ab34

080166b0 <__malloc_lock>:
 80166b0:	4801      	ldr	r0, [pc, #4]	; (80166b8 <__malloc_lock+0x8>)
 80166b2:	f7ff b9e9 	b.w	8015a88 <__retarget_lock_acquire_recursive>
 80166b6:	bf00      	nop
 80166b8:	2000ab40 	.word	0x2000ab40

080166bc <__malloc_unlock>:
 80166bc:	4801      	ldr	r0, [pc, #4]	; (80166c4 <__malloc_unlock+0x8>)
 80166be:	f7ff b9e4 	b.w	8015a8a <__retarget_lock_release_recursive>
 80166c2:	bf00      	nop
 80166c4:	2000ab40 	.word	0x2000ab40

080166c8 <_realloc_r>:
 80166c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166ca:	4607      	mov	r7, r0
 80166cc:	4614      	mov	r4, r2
 80166ce:	460e      	mov	r6, r1
 80166d0:	b921      	cbnz	r1, 80166dc <_realloc_r+0x14>
 80166d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80166d6:	4611      	mov	r1, r2
 80166d8:	f7ff ba94 	b.w	8015c04 <_malloc_r>
 80166dc:	b922      	cbnz	r2, 80166e8 <_realloc_r+0x20>
 80166de:	f7ff fa41 	bl	8015b64 <_free_r>
 80166e2:	4625      	mov	r5, r4
 80166e4:	4628      	mov	r0, r5
 80166e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80166e8:	f000 f86a 	bl	80167c0 <_malloc_usable_size_r>
 80166ec:	42a0      	cmp	r0, r4
 80166ee:	d20f      	bcs.n	8016710 <_realloc_r+0x48>
 80166f0:	4621      	mov	r1, r4
 80166f2:	4638      	mov	r0, r7
 80166f4:	f7ff fa86 	bl	8015c04 <_malloc_r>
 80166f8:	4605      	mov	r5, r0
 80166fa:	2800      	cmp	r0, #0
 80166fc:	d0f2      	beq.n	80166e4 <_realloc_r+0x1c>
 80166fe:	4631      	mov	r1, r6
 8016700:	4622      	mov	r2, r4
 8016702:	f7fe fde7 	bl	80152d4 <memcpy>
 8016706:	4631      	mov	r1, r6
 8016708:	4638      	mov	r0, r7
 801670a:	f7ff fa2b 	bl	8015b64 <_free_r>
 801670e:	e7e9      	b.n	80166e4 <_realloc_r+0x1c>
 8016710:	4635      	mov	r5, r6
 8016712:	e7e7      	b.n	80166e4 <_realloc_r+0x1c>

08016714 <_read_r>:
 8016714:	b538      	push	{r3, r4, r5, lr}
 8016716:	4d07      	ldr	r5, [pc, #28]	; (8016734 <_read_r+0x20>)
 8016718:	4604      	mov	r4, r0
 801671a:	4608      	mov	r0, r1
 801671c:	4611      	mov	r1, r2
 801671e:	2200      	movs	r2, #0
 8016720:	602a      	str	r2, [r5, #0]
 8016722:	461a      	mov	r2, r3
 8016724:	f7ea fbda 	bl	8000edc <_read>
 8016728:	1c43      	adds	r3, r0, #1
 801672a:	d102      	bne.n	8016732 <_read_r+0x1e>
 801672c:	682b      	ldr	r3, [r5, #0]
 801672e:	b103      	cbz	r3, 8016732 <_read_r+0x1e>
 8016730:	6023      	str	r3, [r4, #0]
 8016732:	bd38      	pop	{r3, r4, r5, pc}
 8016734:	2000ab34 	.word	0x2000ab34

08016738 <_raise_r>:
 8016738:	291f      	cmp	r1, #31
 801673a:	b538      	push	{r3, r4, r5, lr}
 801673c:	4604      	mov	r4, r0
 801673e:	460d      	mov	r5, r1
 8016740:	d904      	bls.n	801674c <_raise_r+0x14>
 8016742:	2316      	movs	r3, #22
 8016744:	6003      	str	r3, [r0, #0]
 8016746:	f04f 30ff 	mov.w	r0, #4294967295
 801674a:	bd38      	pop	{r3, r4, r5, pc}
 801674c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801674e:	b112      	cbz	r2, 8016756 <_raise_r+0x1e>
 8016750:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016754:	b94b      	cbnz	r3, 801676a <_raise_r+0x32>
 8016756:	4620      	mov	r0, r4
 8016758:	f000 f830 	bl	80167bc <_getpid_r>
 801675c:	462a      	mov	r2, r5
 801675e:	4601      	mov	r1, r0
 8016760:	4620      	mov	r0, r4
 8016762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016766:	f000 b817 	b.w	8016798 <_kill_r>
 801676a:	2b01      	cmp	r3, #1
 801676c:	d00a      	beq.n	8016784 <_raise_r+0x4c>
 801676e:	1c59      	adds	r1, r3, #1
 8016770:	d103      	bne.n	801677a <_raise_r+0x42>
 8016772:	2316      	movs	r3, #22
 8016774:	6003      	str	r3, [r0, #0]
 8016776:	2001      	movs	r0, #1
 8016778:	e7e7      	b.n	801674a <_raise_r+0x12>
 801677a:	2400      	movs	r4, #0
 801677c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016780:	4628      	mov	r0, r5
 8016782:	4798      	blx	r3
 8016784:	2000      	movs	r0, #0
 8016786:	e7e0      	b.n	801674a <_raise_r+0x12>

08016788 <raise>:
 8016788:	4b02      	ldr	r3, [pc, #8]	; (8016794 <raise+0xc>)
 801678a:	4601      	mov	r1, r0
 801678c:	6818      	ldr	r0, [r3, #0]
 801678e:	f7ff bfd3 	b.w	8016738 <_raise_r>
 8016792:	bf00      	nop
 8016794:	2000001c 	.word	0x2000001c

08016798 <_kill_r>:
 8016798:	b538      	push	{r3, r4, r5, lr}
 801679a:	4d07      	ldr	r5, [pc, #28]	; (80167b8 <_kill_r+0x20>)
 801679c:	2300      	movs	r3, #0
 801679e:	4604      	mov	r4, r0
 80167a0:	4608      	mov	r0, r1
 80167a2:	4611      	mov	r1, r2
 80167a4:	602b      	str	r3, [r5, #0]
 80167a6:	f7ea fb7d 	bl	8000ea4 <_kill>
 80167aa:	1c43      	adds	r3, r0, #1
 80167ac:	d102      	bne.n	80167b4 <_kill_r+0x1c>
 80167ae:	682b      	ldr	r3, [r5, #0]
 80167b0:	b103      	cbz	r3, 80167b4 <_kill_r+0x1c>
 80167b2:	6023      	str	r3, [r4, #0]
 80167b4:	bd38      	pop	{r3, r4, r5, pc}
 80167b6:	bf00      	nop
 80167b8:	2000ab34 	.word	0x2000ab34

080167bc <_getpid_r>:
 80167bc:	f7ea bb6a 	b.w	8000e94 <_getpid>

080167c0 <_malloc_usable_size_r>:
 80167c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80167c4:	1f18      	subs	r0, r3, #4
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	bfbc      	itt	lt
 80167ca:	580b      	ldrlt	r3, [r1, r0]
 80167cc:	18c0      	addlt	r0, r0, r3
 80167ce:	4770      	bx	lr

080167d0 <_init>:
 80167d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167d2:	bf00      	nop
 80167d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80167d6:	bc08      	pop	{r3}
 80167d8:	469e      	mov	lr, r3
 80167da:	4770      	bx	lr

080167dc <_fini>:
 80167dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167de:	bf00      	nop
 80167e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80167e2:	bc08      	pop	{r3}
 80167e4:	469e      	mov	lr, r3
 80167e6:	4770      	bx	lr
