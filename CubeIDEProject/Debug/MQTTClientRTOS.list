
MQTTClientRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015ddc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000038dc  08015fdc  08015fdc  00025fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080198b8  080198b8  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  080198b8  080198b8  000298b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080198c0  080198c0  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080198c0  080198c0  000298c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080198c4  080198c4  000298c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080198c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000aac8  20000080  08019948  00030080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000ab48  08019948  0003ab48  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00042603  00000000  00000000  000300ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007ed7  00000000  00000000  000726b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021c8  00000000  00000000  0007a588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000020d0  00000000  00000000  0007c750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037b0f  00000000  00000000  0007e820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033fb7  00000000  00000000  000b632f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00121ce7  00000000  00000000  000ea2e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0020bfcd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009394  00000000  00000000  0020c020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	08015fc4 	.word	0x08015fc4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	08015fc4 	.word	0x08015fc4

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	60f8      	str	r0, [r7, #12]
 8000610:	60b9      	str	r1, [r7, #8]
 8000612:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	4a07      	ldr	r2, [pc, #28]	; (8000634 <vApplicationGetIdleTaskMemory+0x2c>)
 8000618:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	4a06      	ldr	r2, [pc, #24]	; (8000638 <vApplicationGetIdleTaskMemory+0x30>)
 800061e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2280      	movs	r2, #128	; 0x80
 8000624:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000626:	bf00      	nop
 8000628:	3714      	adds	r7, #20
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	2000009c 	.word	0x2000009c
 8000638:	200000f0 	.word	0x200000f0

0800063c <mqtt_incoming_publish_cb>:
   If RAM and CPU budget allows it, the easiest implementation might be to just take a copy of
   the topic string and use it in mqtt_incoming_data_cb
*/
static int inpub_id;
static void mqtt_incoming_publish_cb(void *arg, const char *topic, u32_t tot_len)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
  printf("Incoming publish at topic %s with total length %u\n", topic, (unsigned int)tot_len);
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	68b9      	ldr	r1, [r7, #8]
 800064c:	480e      	ldr	r0, [pc, #56]	; (8000688 <mqtt_incoming_publish_cb+0x4c>)
 800064e:	f014 fc29 	bl	8014ea4 <iprintf>

  /* Decode topic string into a user defined reference */
  if(strcmp(topic, "print_payload") == 0) {
 8000652:	490e      	ldr	r1, [pc, #56]	; (800068c <mqtt_incoming_publish_cb+0x50>)
 8000654:	68b8      	ldr	r0, [r7, #8]
 8000656:	f7ff fdf3 	bl	8000240 <strcmp>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d103      	bne.n	8000668 <mqtt_incoming_publish_cb+0x2c>
    inpub_id = 0;
 8000660:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <mqtt_incoming_publish_cb+0x54>)
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
    inpub_id = 1;
  } else {
    /* For all other topics */
    inpub_id = 2;
  }
}
 8000666:	e00a      	b.n	800067e <mqtt_incoming_publish_cb+0x42>
  } else if(topic[0] == 'A') {
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b41      	cmp	r3, #65	; 0x41
 800066e:	d103      	bne.n	8000678 <mqtt_incoming_publish_cb+0x3c>
    inpub_id = 1;
 8000670:	4b07      	ldr	r3, [pc, #28]	; (8000690 <mqtt_incoming_publish_cb+0x54>)
 8000672:	2201      	movs	r2, #1
 8000674:	601a      	str	r2, [r3, #0]
}
 8000676:	e002      	b.n	800067e <mqtt_incoming_publish_cb+0x42>
    inpub_id = 2;
 8000678:	4b05      	ldr	r3, [pc, #20]	; (8000690 <mqtt_incoming_publish_cb+0x54>)
 800067a:	2202      	movs	r2, #2
 800067c:	601a      	str	r2, [r3, #0]
}
 800067e:	bf00      	nop
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	0801602c 	.word	0x0801602c
 800068c:	08016060 	.word	0x08016060
 8000690:	200002f0 	.word	0x200002f0

08000694 <mqtt_incoming_data_cb>:

static void mqtt_incoming_data_cb(void *arg, const u8_t *data, u16_t len, u8_t flags)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	4611      	mov	r1, r2
 80006a0:	461a      	mov	r2, r3
 80006a2:	460b      	mov	r3, r1
 80006a4:	80fb      	strh	r3, [r7, #6]
 80006a6:	4613      	mov	r3, r2
 80006a8:	717b      	strb	r3, [r7, #5]
  printf("Incoming publish payload with length %d, flags %u\n", len, (unsigned int)flags);
 80006aa:	88fb      	ldrh	r3, [r7, #6]
 80006ac:	797a      	ldrb	r2, [r7, #5]
 80006ae:	4619      	mov	r1, r3
 80006b0:	4811      	ldr	r0, [pc, #68]	; (80006f8 <mqtt_incoming_data_cb+0x64>)
 80006b2:	f014 fbf7 	bl	8014ea4 <iprintf>

  if(flags & MQTT_DATA_FLAG_LAST) {
 80006b6:	797b      	ldrb	r3, [r7, #5]
 80006b8:	f003 0301 	and.w	r3, r3, #1
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d016      	beq.n	80006ee <mqtt_incoming_data_cb+0x5a>
    /* Last fragment of payload received (or whole part if payload fits receive buffer
       See MQTT_VAR_HEADER_BUFFER_LEN)  */

    /* Call function or do action depending on reference, in this case inpub_id */
    if(inpub_id == 0) {
 80006c0:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <mqtt_incoming_data_cb+0x68>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d10b      	bne.n	80006e0 <mqtt_incoming_data_cb+0x4c>
      /* Don't trust the publisher, check zero termination */
      if(data[len-1] == 0) {
 80006c8:	88fb      	ldrh	r3, [r7, #6]
 80006ca:	3b01      	subs	r3, #1
 80006cc:	68ba      	ldr	r2, [r7, #8]
 80006ce:	4413      	add	r3, r2
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d10b      	bne.n	80006ee <mqtt_incoming_data_cb+0x5a>
        printf("mqtt_incoming_data_cb: %s\n", (const char *)data);
 80006d6:	68b9      	ldr	r1, [r7, #8]
 80006d8:	4809      	ldr	r0, [pc, #36]	; (8000700 <mqtt_incoming_data_cb+0x6c>)
 80006da:	f014 fbe3 	bl	8014ea4 <iprintf>
      printf("mqtt_incoming_data_cb: Ignoring payload...\n");
    }
  } else {
    /* Handle fragmented payload, store in buffer, write to file or whatever */
  }
}
 80006de:	e006      	b.n	80006ee <mqtt_incoming_data_cb+0x5a>
    } else if(inpub_id == 1) {
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <mqtt_incoming_data_cb+0x68>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d002      	beq.n	80006ee <mqtt_incoming_data_cb+0x5a>
      printf("mqtt_incoming_data_cb: Ignoring payload...\n");
 80006e8:	4806      	ldr	r0, [pc, #24]	; (8000704 <mqtt_incoming_data_cb+0x70>)
 80006ea:	f014 fc61 	bl	8014fb0 <puts>
}
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	08016070 	.word	0x08016070
 80006fc:	200002f0 	.word	0x200002f0
 8000700:	080160a4 	.word	0x080160a4
 8000704:	080160c0 	.word	0x080160c0

08000708 <mqtt_sub_request_cb>:

static void mqtt_sub_request_cb(void *arg, err_t result)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	460b      	mov	r3, r1
 8000712:	70fb      	strb	r3, [r7, #3]
  /* Just print the result code here for simplicity,
     normal behaviour would be to take some action if subscribe fails like
     notifying user, retry subscribe or disconnect from server */
  printf("Subscribe result: %d\n", result);
 8000714:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000718:	4619      	mov	r1, r3
 800071a:	4803      	ldr	r0, [pc, #12]	; (8000728 <mqtt_sub_request_cb+0x20>)
 800071c:	f014 fbc2 	bl	8014ea4 <iprintf>
}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	080160ec 	.word	0x080160ec

0800072c <mqtt_connection_cb>:


static void mqtt_connection_cb(mqtt_client_t *client, void *arg, mqtt_connection_status_t status)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b088      	sub	sp, #32
 8000730:	af02      	add	r7, sp, #8
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	4613      	mov	r3, r2
 8000738:	80fb      	strh	r3, [r7, #6]
  err_t err;
  if(status == MQTT_CONNECT_ACCEPTED) {
 800073a:	88fb      	ldrh	r3, [r7, #6]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d11f      	bne.n	8000780 <mqtt_connection_cb+0x54>
    printf("mqtt_connection_cb: Successfully connected\n");
 8000740:	4815      	ldr	r0, [pc, #84]	; (8000798 <mqtt_connection_cb+0x6c>)
 8000742:	f014 fc35 	bl	8014fb0 <puts>

    /* Setup callback for incoming publish requests */
    mqtt_set_inpub_callback(client, mqtt_incoming_publish_cb, mqtt_incoming_data_cb, arg);
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	4a14      	ldr	r2, [pc, #80]	; (800079c <mqtt_connection_cb+0x70>)
 800074a:	4915      	ldr	r1, [pc, #84]	; (80007a0 <mqtt_connection_cb+0x74>)
 800074c:	68f8      	ldr	r0, [r7, #12]
 800074e:	f009 f91b 	bl	8009988 <mqtt_set_inpub_callback>

    /* Subscribe to a topic named "subtopic" with QoS level 1, call mqtt_sub_request_cb with result */
    err = mqtt_subscribe(client, "subtopic", 1, mqtt_sub_request_cb, arg);
 8000752:	2301      	movs	r3, #1
 8000754:	9301      	str	r3, [sp, #4]
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <mqtt_connection_cb+0x78>)
 800075c:	2201      	movs	r2, #1
 800075e:	4912      	ldr	r1, [pc, #72]	; (80007a8 <mqtt_connection_cb+0x7c>)
 8000760:	68f8      	ldr	r0, [r7, #12]
 8000762:	f009 f83b 	bl	80097dc <mqtt_sub_unsub>
 8000766:	4603      	mov	r3, r0
 8000768:	75fb      	strb	r3, [r7, #23]

    if(err != ERR_OK) {
 800076a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d00e      	beq.n	8000790 <mqtt_connection_cb+0x64>
      printf("mqtt_subscribe return: %d\n", err);
 8000772:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000776:	4619      	mov	r1, r3
 8000778:	480c      	ldr	r0, [pc, #48]	; (80007ac <mqtt_connection_cb+0x80>)
 800077a:	f014 fb93 	bl	8014ea4 <iprintf>
    printf("mqtt_connection_cb: Disconnected, reason: %d\n", status);

    /* Its more nice to be connected, so try to reconnect */
    example_do_connect(client);
  }
}
 800077e:	e007      	b.n	8000790 <mqtt_connection_cb+0x64>
    printf("mqtt_connection_cb: Disconnected, reason: %d\n", status);
 8000780:	88fb      	ldrh	r3, [r7, #6]
 8000782:	4619      	mov	r1, r3
 8000784:	480a      	ldr	r0, [pc, #40]	; (80007b0 <mqtt_connection_cb+0x84>)
 8000786:	f014 fb8d 	bl	8014ea4 <iprintf>
    example_do_connect(client);
 800078a:	68f8      	ldr	r0, [r7, #12]
 800078c:	f000 f812 	bl	80007b4 <example_do_connect>
}
 8000790:	bf00      	nop
 8000792:	3718      	adds	r7, #24
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	08016104 	.word	0x08016104
 800079c:	08000695 	.word	0x08000695
 80007a0:	0800063d 	.word	0x0800063d
 80007a4:	08000709 	.word	0x08000709
 80007a8:	08016130 	.word	0x08016130
 80007ac:	0801613c 	.word	0x0801613c
 80007b0:	08016158 	.word	0x08016158

080007b4 <example_do_connect>:



void example_do_connect(mqtt_client_t *client)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08c      	sub	sp, #48	; 0x30
 80007b8:	af02      	add	r7, sp, #8
 80007ba:	6078      	str	r0, [r7, #4]
  struct mqtt_connect_client_info_t ci;
  err_t err;

  /* Setup an empty client info structure */
  memset(&ci, 0, sizeof(ci));
 80007bc:	f107 0308 	add.w	r3, r7, #8
 80007c0:	221c      	movs	r2, #28
 80007c2:	2100      	movs	r1, #0
 80007c4:	4618      	mov	r0, r3
 80007c6:	f014 fb65 	bl	8014e94 <memset>

  /* Minimal amount of information required is client identifier, so set it here */
  ci.client_id = "lwip_test";
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <example_do_connect+0x54>)
 80007cc:	60bb      	str	r3, [r7, #8]
  /* Initiate client and connect to server, if this fails immediately an error code is returned
     otherwise mqtt_connection_cb will be called with connection result after attempting
     to establish a connection with the server.
     For now MQTT version 3.1.1 is always used */

  err = mqtt_client_connect(client, &ip_addr, MQTT_PORT, mqtt_connection_cb, 0, &ci);
 80007ce:	f107 0308 	add.w	r3, r7, #8
 80007d2:	9301      	str	r3, [sp, #4]
 80007d4:	2300      	movs	r3, #0
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <example_do_connect+0x58>)
 80007da:	f240 725b 	movw	r2, #1883	; 0x75b
 80007de:	490c      	ldr	r1, [pc, #48]	; (8000810 <example_do_connect+0x5c>)
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f009 f8ff 	bl	80099e4 <mqtt_client_connect>
 80007e6:	4603      	mov	r3, r0
 80007e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27



  if(err != ERR_OK) {
 80007ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d005      	beq.n	8000800 <example_do_connect+0x4c>
    printf("mqtt_connect return %d\n", err);
 80007f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80007f8:	4619      	mov	r1, r3
 80007fa:	4806      	ldr	r0, [pc, #24]	; (8000814 <example_do_connect+0x60>)
 80007fc:	f014 fb52 	bl	8014ea4 <iprintf>
  }
}
 8000800:	bf00      	nop
 8000802:	3728      	adds	r7, #40	; 0x28
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	08016188 	.word	0x08016188
 800080c:	0800072d 	.word	0x0800072d
 8000810:	2000426c 	.word	0x2000426c
 8000814:	08016194 	.word	0x08016194

08000818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000818:	b5b0      	push	{r4, r5, r7, lr}
 800081a:	b088      	sub	sp, #32
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081e:	f000 fbd2 	bl	8000fc6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000822:	f000 f81d 	bl	8000860 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000826:	f000 f8df 	bl	80009e8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800082a:	f000 f8ad 	bl	8000988 <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800082e:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <main+0x40>)
 8000830:	1d3c      	adds	r4, r7, #4
 8000832:	461d      	mov	r5, r3
 8000834:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000836:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000838:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800083c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f004 fe5e 	bl	8005506 <osThreadCreate>
 800084a:	4603      	mov	r3, r0
 800084c:	4a03      	ldr	r2, [pc, #12]	; (800085c <main+0x44>)
 800084e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000850:	f004 fe42 	bl	80054d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000854:	e7fe      	b.n	8000854 <main+0x3c>
 8000856:	bf00      	nop
 8000858:	080161ac 	.word	0x080161ac
 800085c:	200041e4 	.word	0x200041e4

08000860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b0b8      	sub	sp, #224	; 0xe0
 8000864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000866:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800086a:	2234      	movs	r2, #52	; 0x34
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f014 fb10 	bl	8014e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000874:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000884:	f107 0308 	add.w	r3, r7, #8
 8000888:	2290      	movs	r2, #144	; 0x90
 800088a:	2100      	movs	r1, #0
 800088c:	4618      	mov	r0, r3
 800088e:	f014 fb01 	bl	8014e94 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000892:	f002 f815 	bl	80028c0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000896:	4b3a      	ldr	r3, [pc, #232]	; (8000980 <SystemClock_Config+0x120>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	4a39      	ldr	r2, [pc, #228]	; (8000980 <SystemClock_Config+0x120>)
 800089c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a0:	6413      	str	r3, [r2, #64]	; 0x40
 80008a2:	4b37      	ldr	r3, [pc, #220]	; (8000980 <SystemClock_Config+0x120>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008ae:	4b35      	ldr	r3, [pc, #212]	; (8000984 <SystemClock_Config+0x124>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008b6:	4a33      	ldr	r2, [pc, #204]	; (8000984 <SystemClock_Config+0x124>)
 80008b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008bc:	6013      	str	r3, [r2, #0]
 80008be:	4b31      	ldr	r3, [pc, #196]	; (8000984 <SystemClock_Config+0x124>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008ca:	2302      	movs	r3, #2
 80008cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d0:	2301      	movs	r3, #1
 80008d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008d6:	2310      	movs	r3, #16
 80008d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008dc:	2302      	movs	r3, #2
 80008de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008e2:	2300      	movs	r3, #0
 80008e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008e8:	2308      	movs	r3, #8
 80008ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 80008ee:	2360      	movs	r3, #96	; 0x60
 80008f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008f4:	2302      	movs	r3, #2
 80008f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008fa:	2304      	movs	r3, #4
 80008fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000900:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000904:	4618      	mov	r0, r3
 8000906:	f002 f83b 	bl	8002980 <HAL_RCC_OscConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000910:	f000 f960 	bl	8000bd4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000914:	f001 ffe4 	bl	80028e0 <HAL_PWREx_EnableOverDrive>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800091e:	f000 f959 	bl	8000bd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000922:	230f      	movs	r3, #15
 8000924:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000928:	2302      	movs	r3, #2
 800092a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800092e:	2300      	movs	r3, #0
 8000930:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000934:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000938:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000942:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000946:	2103      	movs	r1, #3
 8000948:	4618      	mov	r0, r3
 800094a:	f002 fac7 	bl	8002edc <HAL_RCC_ClockConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000954:	f000 f93e 	bl	8000bd4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000958:	f44f 7380 	mov.w	r3, #256	; 0x100
 800095c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800095e:	2300      	movs	r3, #0
 8000960:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000962:	f107 0308 	add.w	r3, r7, #8
 8000966:	4618      	mov	r0, r3
 8000968:	f002 fcec 	bl	8003344 <HAL_RCCEx_PeriphCLKConfig>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <SystemClock_Config+0x116>
  {
    Error_Handler();
 8000972:	f000 f92f 	bl	8000bd4 <Error_Handler>
  }
}
 8000976:	bf00      	nop
 8000978:	37e0      	adds	r7, #224	; 0xe0
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40023800 	.word	0x40023800
 8000984:	40007000 	.word	0x40007000

08000988 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 800098e:	4a15      	ldr	r2, [pc, #84]	; (80009e4 <MX_USART3_UART_Init+0x5c>)
 8000990:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 8000994:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000998:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 80009ae:	220c      	movs	r2, #12
 80009b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 80009cc:	f003 fbc2 	bl	8004154 <HAL_UART_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009d6:	f000 f8fd 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200041e8 	.word	0x200041e8
 80009e4:	40004800 	.word	0x40004800

080009e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08c      	sub	sp, #48	; 0x30
 80009ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
 80009fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fe:	4b55      	ldr	r3, [pc, #340]	; (8000b54 <MX_GPIO_Init+0x16c>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a54      	ldr	r2, [pc, #336]	; (8000b54 <MX_GPIO_Init+0x16c>)
 8000a04:	f043 0304 	orr.w	r3, r3, #4
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b52      	ldr	r3, [pc, #328]	; (8000b54 <MX_GPIO_Init+0x16c>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0304 	and.w	r3, r3, #4
 8000a12:	61bb      	str	r3, [r7, #24]
 8000a14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a16:	4b4f      	ldr	r3, [pc, #316]	; (8000b54 <MX_GPIO_Init+0x16c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a4e      	ldr	r2, [pc, #312]	; (8000b54 <MX_GPIO_Init+0x16c>)
 8000a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b4c      	ldr	r3, [pc, #304]	; (8000b54 <MX_GPIO_Init+0x16c>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	4b49      	ldr	r3, [pc, #292]	; (8000b54 <MX_GPIO_Init+0x16c>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a48      	ldr	r2, [pc, #288]	; (8000b54 <MX_GPIO_Init+0x16c>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b46      	ldr	r3, [pc, #280]	; (8000b54 <MX_GPIO_Init+0x16c>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a46:	4b43      	ldr	r3, [pc, #268]	; (8000b54 <MX_GPIO_Init+0x16c>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a42      	ldr	r2, [pc, #264]	; (8000b54 <MX_GPIO_Init+0x16c>)
 8000a4c:	f043 0302 	orr.w	r3, r3, #2
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b40      	ldr	r3, [pc, #256]	; (8000b54 <MX_GPIO_Init+0x16c>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0302 	and.w	r3, r3, #2
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a5e:	4b3d      	ldr	r3, [pc, #244]	; (8000b54 <MX_GPIO_Init+0x16c>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a3c      	ldr	r2, [pc, #240]	; (8000b54 <MX_GPIO_Init+0x16c>)
 8000a64:	f043 0308 	orr.w	r3, r3, #8
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b3a      	ldr	r3, [pc, #232]	; (8000b54 <MX_GPIO_Init+0x16c>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0308 	and.w	r3, r3, #8
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a76:	4b37      	ldr	r3, [pc, #220]	; (8000b54 <MX_GPIO_Init+0x16c>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a36      	ldr	r2, [pc, #216]	; (8000b54 <MX_GPIO_Init+0x16c>)
 8000a7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b34      	ldr	r3, [pc, #208]	; (8000b54 <MX_GPIO_Init+0x16c>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a94:	4830      	ldr	r0, [pc, #192]	; (8000b58 <MX_GPIO_Init+0x170>)
 8000a96:	f001 fef9 	bl	800288c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2140      	movs	r1, #64	; 0x40
 8000a9e:	482f      	ldr	r0, [pc, #188]	; (8000b5c <MX_GPIO_Init+0x174>)
 8000aa0:	f001 fef4 	bl	800288c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000aa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aaa:	4b2d      	ldr	r3, [pc, #180]	; (8000b60 <MX_GPIO_Init+0x178>)
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	482a      	ldr	r0, [pc, #168]	; (8000b64 <MX_GPIO_Init+0x17c>)
 8000aba:	f001 fd3b 	bl	8002534 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000abe:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4820      	ldr	r0, [pc, #128]	; (8000b58 <MX_GPIO_Init+0x170>)
 8000ad8:	f001 fd2c 	bl	8002534 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000adc:	2340      	movs	r3, #64	; 0x40
 8000ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aec:	f107 031c 	add.w	r3, r7, #28
 8000af0:	4619      	mov	r1, r3
 8000af2:	481a      	ldr	r0, [pc, #104]	; (8000b5c <MX_GPIO_Init+0x174>)
 8000af4:	f001 fd1e 	bl	8002534 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000af8:	2380      	movs	r3, #128	; 0x80
 8000afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afc:	2300      	movs	r3, #0
 8000afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4814      	ldr	r0, [pc, #80]	; (8000b5c <MX_GPIO_Init+0x174>)
 8000b0c:	f001 fd12 	bl	8002534 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b10:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b22:	230a      	movs	r3, #10
 8000b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	480e      	ldr	r0, [pc, #56]	; (8000b68 <MX_GPIO_Init+0x180>)
 8000b2e:	f001 fd01 	bl	8002534 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b40:	f107 031c 	add.w	r3, r7, #28
 8000b44:	4619      	mov	r1, r3
 8000b46:	4808      	ldr	r0, [pc, #32]	; (8000b68 <MX_GPIO_Init+0x180>)
 8000b48:	f001 fcf4 	bl	8002534 <HAL_GPIO_Init>

}
 8000b4c:	bf00      	nop
 8000b4e:	3730      	adds	r7, #48	; 0x30
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40020400 	.word	0x40020400
 8000b5c:	40021800 	.word	0x40021800
 8000b60:	10110000 	.word	0x10110000
 8000b64:	40020800 	.word	0x40020800
 8000b68:	40020000 	.word	0x40020000

08000b6c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000b74:	f003 ff06 	bl	8004984 <MX_LWIP_Init>

  /* USER CODE BEGIN 5 */
static const char mqtt_server[13] ={'1','9','2','.','1','6','8','.','0','.','1','0','6'};
client = mqtt_client_new();
 8000b78:	f008 ff2a 	bl	80099d0 <mqtt_client_new>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	4a09      	ldr	r2, [pc, #36]	; (8000ba4 <StartDefaultTask+0x38>)
 8000b80:	6013      	str	r3, [r2, #0]
ipaddr_aton(mqtt_server,&ip_addr);
 8000b82:	4909      	ldr	r1, [pc, #36]	; (8000ba8 <StartDefaultTask+0x3c>)
 8000b84:	4809      	ldr	r0, [pc, #36]	; (8000bac <StartDefaultTask+0x40>)
 8000b86:	f012 fff7 	bl	8013b78 <ip4addr_aton>
  //IP_ADDR4( ip_addr,192,168,0,106);

    if(client != NULL) {
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <StartDefaultTask+0x38>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d004      	beq.n	8000b9c <StartDefaultTask+0x30>
      example_do_connect(client);
 8000b92:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <StartDefaultTask+0x38>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fe0c 	bl	80007b4 <example_do_connect>


  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	f004 fcfe 	bl	800559e <osDelay>
 8000ba2:	e7fb      	b.n	8000b9c <StartDefaultTask+0x30>
 8000ba4:	20004270 	.word	0x20004270
 8000ba8:	2000426c 	.word	0x2000426c
 8000bac:	08019514 	.word	0x08019514

08000bb0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d101      	bne.n	8000bc6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bc2:	f000 fa0d 	bl	8000fe0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40000400 	.word	0x40000400

08000bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd8:	b672      	cpsid	i
}
 8000bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <Error_Handler+0x8>
	...

08000be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000be6:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <HAL_MspInit+0x4c>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	4a10      	ldr	r2, [pc, #64]	; (8000c2c <HAL_MspInit+0x4c>)
 8000bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <HAL_MspInit+0x4c>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <HAL_MspInit+0x4c>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c02:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <HAL_MspInit+0x4c>)
 8000c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c08:	6453      	str	r3, [r2, #68]	; 0x44
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <HAL_MspInit+0x4c>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	210f      	movs	r1, #15
 8000c1a:	f06f 0001 	mvn.w	r0, #1
 8000c1e:	f000 fadb 	bl	80011d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40023800 	.word	0x40023800

08000c30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a17      	ldr	r2, [pc, #92]	; (8000cac <HAL_UART_MspInit+0x7c>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d128      	bne.n	8000ca4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c52:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <HAL_UART_MspInit+0x80>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	4a16      	ldr	r2, [pc, #88]	; (8000cb0 <HAL_UART_MspInit+0x80>)
 8000c58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5e:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <HAL_UART_MspInit+0x80>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c6a:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <HAL_UART_MspInit+0x80>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a10      	ldr	r2, [pc, #64]	; (8000cb0 <HAL_UART_MspInit+0x80>)
 8000c70:	f043 0308 	orr.w	r3, r3, #8
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <HAL_UART_MspInit+0x80>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0308 	and.w	r3, r3, #8
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c90:	2303      	movs	r3, #3
 8000c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c94:	2307      	movs	r3, #7
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <HAL_UART_MspInit+0x84>)
 8000ca0:	f001 fc48 	bl	8002534 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ca4:	bf00      	nop
 8000ca6:	3728      	adds	r7, #40	; 0x28
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40004800 	.word	0x40004800
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40020c00 	.word	0x40020c00

08000cb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08c      	sub	sp, #48	; 0x30
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	6879      	ldr	r1, [r7, #4]
 8000ccc:	201d      	movs	r0, #29
 8000cce:	f000 fa83 	bl	80011d8 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000cd2:	201d      	movs	r0, #29
 8000cd4:	f000 fa9c 	bl	8001210 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000cd8:	4b1f      	ldr	r3, [pc, #124]	; (8000d58 <HAL_InitTick+0xa0>)
 8000cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cdc:	4a1e      	ldr	r2, [pc, #120]	; (8000d58 <HAL_InitTick+0xa0>)
 8000cde:	f043 0302 	orr.w	r3, r3, #2
 8000ce2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce4:	4b1c      	ldr	r3, [pc, #112]	; (8000d58 <HAL_InitTick+0xa0>)
 8000ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce8:	f003 0302 	and.w	r3, r3, #2
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cf0:	f107 0210 	add.w	r2, r7, #16
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4611      	mov	r1, r2
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f002 faf0 	bl	80032e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000d00:	f002 fac6 	bl	8003290 <HAL_RCC_GetPCLK1Freq>
 8000d04:	4603      	mov	r3, r0
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d0c:	4a13      	ldr	r2, [pc, #76]	; (8000d5c <HAL_InitTick+0xa4>)
 8000d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d12:	0c9b      	lsrs	r3, r3, #18
 8000d14:	3b01      	subs	r3, #1
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <HAL_InitTick+0xa8>)
 8000d1a:	4a12      	ldr	r2, [pc, #72]	; (8000d64 <HAL_InitTick+0xac>)
 8000d1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <HAL_InitTick+0xa8>)
 8000d20:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d24:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000d26:	4a0e      	ldr	r2, [pc, #56]	; (8000d60 <HAL_InitTick+0xa8>)
 8000d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d2a:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <HAL_InitTick+0xa8>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <HAL_InitTick+0xa8>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8000d38:	4809      	ldr	r0, [pc, #36]	; (8000d60 <HAL_InitTick+0xa8>)
 8000d3a:	f002 ff2b 	bl	8003b94 <HAL_TIM_Base_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d104      	bne.n	8000d4e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8000d44:	4806      	ldr	r0, [pc, #24]	; (8000d60 <HAL_InitTick+0xa8>)
 8000d46:	f002 ff87 	bl	8003c58 <HAL_TIM_Base_Start_IT>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	e000      	b.n	8000d50 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3730      	adds	r7, #48	; 0x30
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	431bde83 	.word	0x431bde83
 8000d60:	20004274 	.word	0x20004274
 8000d64:	40000400 	.word	0x40000400

08000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <NMI_Handler+0x4>

08000d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <HardFault_Handler+0x4>

08000d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <MemManage_Handler+0x4>

08000d7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <BusFault_Handler+0x4>

08000d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <UsageFault_Handler+0x4>

08000d86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <TIM3_IRQHandler+0x10>)
 8000d9a:	f002 ffd5 	bl	8003d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20004274 	.word	0x20004274

08000da8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000dac:	4802      	ldr	r0, [pc, #8]	; (8000db8 <ETH_IRQHandler+0x10>)
 8000dae:	f000 fe1f 	bl	80019f0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20005be8 	.word	0x20005be8

08000dbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
	return 1;
 8000dc0:	2301      	movs	r3, #1
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <_kill>:

int _kill(int pid, int sig)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000dd6:	4b05      	ldr	r3, [pc, #20]	; (8000dec <_kill+0x20>)
 8000dd8:	2216      	movs	r2, #22
 8000dda:	601a      	str	r2, [r3, #0]
	return -1;
 8000ddc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	2000ab34 	.word	0x2000ab34

08000df0 <_exit>:

void _exit (int status)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000df8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff ffe5 	bl	8000dcc <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e02:	e7fe      	b.n	8000e02 <_exit+0x12>

08000e04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	e00a      	b.n	8000e2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e16:	f3af 8000 	nop.w
 8000e1a:	4601      	mov	r1, r0
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	1c5a      	adds	r2, r3, #1
 8000e20:	60ba      	str	r2, [r7, #8]
 8000e22:	b2ca      	uxtb	r2, r1
 8000e24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	697a      	ldr	r2, [r7, #20]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	dbf0      	blt.n	8000e16 <_read+0x12>
	}

return len;
 8000e34:	687b      	ldr	r3, [r7, #4]
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b086      	sub	sp, #24
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	60f8      	str	r0, [r7, #12]
 8000e46:	60b9      	str	r1, [r7, #8]
 8000e48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
 8000e4e:	e009      	b.n	8000e64 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	1c5a      	adds	r2, r3, #1
 8000e54:	60ba      	str	r2, [r7, #8]
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	3301      	adds	r3, #1
 8000e62:	617b      	str	r3, [r7, #20]
 8000e64:	697a      	ldr	r2, [r7, #20]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	dbf1      	blt.n	8000e50 <_write+0x12>
	}
	return len;
 8000e6c:	687b      	ldr	r3, [r7, #4]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <_close>:

int _close(int file)
{
 8000e76:	b480      	push	{r7}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
	return -1;
 8000e7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b083      	sub	sp, #12
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
 8000e96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e9e:	605a      	str	r2, [r3, #4]
	return 0;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <_isatty>:

int _isatty(int file)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
	return 1;
 8000eb6:	2301      	movs	r3, #1
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
	return 0;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
	...

08000ee0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b087      	sub	sp, #28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee8:	4a14      	ldr	r2, [pc, #80]	; (8000f3c <_sbrk+0x5c>)
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <_sbrk+0x60>)
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef4:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <_sbrk+0x64>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d102      	bne.n	8000f02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000efc:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <_sbrk+0x64>)
 8000efe:	4a12      	ldr	r2, [pc, #72]	; (8000f48 <_sbrk+0x68>)
 8000f00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d205      	bcs.n	8000f1c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <_sbrk+0x6c>)
 8000f12:	220c      	movs	r2, #12
 8000f14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f16:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1a:	e009      	b.n	8000f30 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f1c:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <_sbrk+0x64>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f22:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <_sbrk+0x64>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	4a06      	ldr	r2, [pc, #24]	; (8000f44 <_sbrk+0x64>)
 8000f2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	371c      	adds	r7, #28
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	20080000 	.word	0x20080000
 8000f40:	00000400 	.word	0x00000400
 8000f44:	200002f4 	.word	0x200002f4
 8000f48:	2000ab48 	.word	0x2000ab48
 8000f4c:	2000ab34 	.word	0x2000ab34

08000f50 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <SystemInit+0x20>)
 8000f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f5a:	4a05      	ldr	r2, [pc, #20]	; (8000f70 <SystemInit+0x20>)
 8000f5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f78:	480d      	ldr	r0, [pc, #52]	; (8000fb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f7a:	490e      	ldr	r1, [pc, #56]	; (8000fb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f7c:	4a0e      	ldr	r2, [pc, #56]	; (8000fb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f80:	e002      	b.n	8000f88 <LoopCopyDataInit>

08000f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f86:	3304      	adds	r3, #4

08000f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f8c:	d3f9      	bcc.n	8000f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8e:	4a0b      	ldr	r2, [pc, #44]	; (8000fbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f90:	4c0b      	ldr	r4, [pc, #44]	; (8000fc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f94:	e001      	b.n	8000f9a <LoopFillZerobss>

08000f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f98:	3204      	adds	r2, #4

08000f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f9c:	d3fb      	bcc.n	8000f96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f9e:	f7ff ffd7 	bl	8000f50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fa2:	f013 ff37 	bl	8014e14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fa6:	f7ff fc37 	bl	8000818 <main>
  bx  lr    
 8000faa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fac:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000fb8:	080198c8 	.word	0x080198c8
  ldr r2, =_sbss
 8000fbc:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000fc0:	2000ab48 	.word	0x2000ab48

08000fc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc4:	e7fe      	b.n	8000fc4 <ADC_IRQHandler>

08000fc6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fca:	2003      	movs	r0, #3
 8000fcc:	f000 f8f9 	bl	80011c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f7ff fe71 	bl	8000cb8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000fd6:	f7ff fe03 	bl	8000be0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000fda:	2300      	movs	r3, #0
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x20>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_IncTick+0x24>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4413      	add	r3, r2
 8000ff0:	4a04      	ldr	r2, [pc, #16]	; (8001004 <HAL_IncTick+0x24>)
 8000ff2:	6013      	str	r3, [r2, #0]
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	20000008 	.word	0x20000008
 8001004:	200042c0 	.word	0x200042c0

08001008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return uwTick;
 800100c:	4b03      	ldr	r3, [pc, #12]	; (800101c <HAL_GetTick+0x14>)
 800100e:	681b      	ldr	r3, [r3, #0]
}
 8001010:	4618      	mov	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	200042c0 	.word	0x200042c0

08001020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001028:	f7ff ffee 	bl	8001008 <HAL_GetTick>
 800102c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001038:	d005      	beq.n	8001046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <HAL_Delay+0x44>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	461a      	mov	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4413      	add	r3, r2
 8001044:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001046:	bf00      	nop
 8001048:	f7ff ffde 	bl	8001008 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	429a      	cmp	r2, r3
 8001056:	d8f7      	bhi.n	8001048 <HAL_Delay+0x28>
  {
  }
}
 8001058:	bf00      	nop
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000008 	.word	0x20000008

08001068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001078:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <__NVIC_SetPriorityGrouping+0x40>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001084:	4013      	ands	r3, r2
 8001086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 8001092:	4313      	orrs	r3, r2
 8001094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001096:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <__NVIC_SetPriorityGrouping+0x40>)
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	60d3      	str	r3, [r2, #12]
}
 800109c:	bf00      	nop
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000ed00 	.word	0xe000ed00
 80010ac:	05fa0000 	.word	0x05fa0000

080010b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <__NVIC_GetPriorityGrouping+0x18>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	f003 0307 	and.w	r3, r3, #7
}
 80010be:	4618      	mov	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	db0b      	blt.n	80010f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	f003 021f 	and.w	r2, r3, #31
 80010e4:	4907      	ldr	r1, [pc, #28]	; (8001104 <__NVIC_EnableIRQ+0x38>)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	095b      	lsrs	r3, r3, #5
 80010ec:	2001      	movs	r0, #1
 80010ee:	fa00 f202 	lsl.w	r2, r0, r2
 80010f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000e100 	.word	0xe000e100

08001108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	2b00      	cmp	r3, #0
 800111a:	db0a      	blt.n	8001132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	b2da      	uxtb	r2, r3
 8001120:	490c      	ldr	r1, [pc, #48]	; (8001154 <__NVIC_SetPriority+0x4c>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	0112      	lsls	r2, r2, #4
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	440b      	add	r3, r1
 800112c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001130:	e00a      	b.n	8001148 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4908      	ldr	r1, [pc, #32]	; (8001158 <__NVIC_SetPriority+0x50>)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	3b04      	subs	r3, #4
 8001140:	0112      	lsls	r2, r2, #4
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	440b      	add	r3, r1
 8001146:	761a      	strb	r2, [r3, #24]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000e100 	.word	0xe000e100
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	; 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f1c3 0307 	rsb	r3, r3, #7
 8001176:	2b04      	cmp	r3, #4
 8001178:	bf28      	it	cs
 800117a:	2304      	movcs	r3, #4
 800117c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3304      	adds	r3, #4
 8001182:	2b06      	cmp	r3, #6
 8001184:	d902      	bls.n	800118c <NVIC_EncodePriority+0x30>
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3b03      	subs	r3, #3
 800118a:	e000      	b.n	800118e <NVIC_EncodePriority+0x32>
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	f04f 32ff 	mov.w	r2, #4294967295
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43da      	mvns	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	401a      	ands	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a4:	f04f 31ff 	mov.w	r1, #4294967295
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	43d9      	mvns	r1, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	4313      	orrs	r3, r2
         );
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3724      	adds	r7, #36	; 0x24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ff4c 	bl	8001068 <__NVIC_SetPriorityGrouping>
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
 80011e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ea:	f7ff ff61 	bl	80010b0 <__NVIC_GetPriorityGrouping>
 80011ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	68b9      	ldr	r1, [r7, #8]
 80011f4:	6978      	ldr	r0, [r7, #20]
 80011f6:	f7ff ffb1 	bl	800115c <NVIC_EncodePriority>
 80011fa:	4602      	mov	r2, r0
 80011fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001200:	4611      	mov	r1, r2
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ff80 	bl	8001108 <__NVIC_SetPriority>
}
 8001208:	bf00      	nop
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff ff54 	bl	80010cc <__NVIC_EnableIRQ>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 800123c:	4ba9      	ldr	r3, [pc, #676]	; (80014e4 <HAL_ETH_Init+0x2b8>)
 800123e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001244:	2300      	movs	r3, #0
 8001246:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e181      	b.n	8001556 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d106      	bne.n	800126c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f003 fcea 	bl	8004c40 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126c:	4b9e      	ldr	r3, [pc, #632]	; (80014e8 <HAL_ETH_Init+0x2bc>)
 800126e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001270:	4a9d      	ldr	r2, [pc, #628]	; (80014e8 <HAL_ETH_Init+0x2bc>)
 8001272:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001276:	6453      	str	r3, [r2, #68]	; 0x44
 8001278:	4b9b      	ldr	r3, [pc, #620]	; (80014e8 <HAL_ETH_Init+0x2bc>)
 800127a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001284:	4b99      	ldr	r3, [pc, #612]	; (80014ec <HAL_ETH_Init+0x2c0>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	4a98      	ldr	r2, [pc, #608]	; (80014ec <HAL_ETH_Init+0x2c0>)
 800128a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800128e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001290:	4b96      	ldr	r3, [pc, #600]	; (80014ec <HAL_ETH_Init+0x2c0>)
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a1b      	ldr	r3, [r3, #32]
 8001298:	4994      	ldr	r1, [pc, #592]	; (80014ec <HAL_ETH_Init+0x2c0>)
 800129a:	4313      	orrs	r3, r2
 800129c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f042 0201 	orr.w	r2, r2, #1
 80012b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012b4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80012b6:	f7ff fea7 	bl	8001008 <HAL_GetTick>
 80012ba:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80012bc:	e011      	b.n	80012e2 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80012be:	f7ff fea3 	bl	8001008 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012cc:	d909      	bls.n	80012e2 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2203      	movs	r2, #3
 80012d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e139      	b.n	8001556 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1e4      	bne.n	80012be <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	f023 031c 	bic.w	r3, r3, #28
 8001302:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001304:	f001 ffb8 	bl	8003278 <HAL_RCC_GetHCLKFreq>
 8001308:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	4a78      	ldr	r2, [pc, #480]	; (80014f0 <HAL_ETH_Init+0x2c4>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d908      	bls.n	8001324 <HAL_ETH_Init+0xf8>
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	4a77      	ldr	r2, [pc, #476]	; (80014f4 <HAL_ETH_Init+0x2c8>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d804      	bhi.n	8001324 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	f043 0308 	orr.w	r3, r3, #8
 8001320:	61fb      	str	r3, [r7, #28]
 8001322:	e027      	b.n	8001374 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	4a73      	ldr	r2, [pc, #460]	; (80014f4 <HAL_ETH_Init+0x2c8>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d908      	bls.n	800133e <HAL_ETH_Init+0x112>
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	4a6d      	ldr	r2, [pc, #436]	; (80014e4 <HAL_ETH_Init+0x2b8>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d204      	bcs.n	800133e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f043 030c 	orr.w	r3, r3, #12
 800133a:	61fb      	str	r3, [r7, #28]
 800133c:	e01a      	b.n	8001374 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	4a68      	ldr	r2, [pc, #416]	; (80014e4 <HAL_ETH_Init+0x2b8>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d303      	bcc.n	800134e <HAL_ETH_Init+0x122>
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	4a6b      	ldr	r2, [pc, #428]	; (80014f8 <HAL_ETH_Init+0x2cc>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d911      	bls.n	8001372 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	4a69      	ldr	r2, [pc, #420]	; (80014f8 <HAL_ETH_Init+0x2cc>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d908      	bls.n	8001368 <HAL_ETH_Init+0x13c>
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	4a68      	ldr	r2, [pc, #416]	; (80014fc <HAL_ETH_Init+0x2d0>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d804      	bhi.n	8001368 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	f043 0304 	orr.w	r3, r3, #4
 8001364:	61fb      	str	r3, [r7, #28]
 8001366:	e005      	b.n	8001374 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f043 0310 	orr.w	r3, r3, #16
 800136e:	61fb      	str	r3, [r7, #28]
 8001370:	e000      	b.n	8001374 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001372:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	69fa      	ldr	r2, [r7, #28]
 800137a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800137c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001380:	2100      	movs	r1, #0
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 fc17 	bl	8001bb6 <HAL_ETH_WritePHYRegister>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d00b      	beq.n	80013a6 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001392:	6939      	ldr	r1, [r7, #16]
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f000 fdcd 	bl	8001f34 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2201      	movs	r2, #1
 800139e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e0d7      	b.n	8001556 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80013a6:	20ff      	movs	r0, #255	; 0xff
 80013a8:	f7ff fe3a 	bl	8001020 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f000 80a5 	beq.w	8001500 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80013b6:	f7ff fe27 	bl	8001008 <HAL_GetTick>
 80013ba:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	461a      	mov	r2, r3
 80013c2:	2101      	movs	r1, #1
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f000 fb8e 	bl	8001ae6 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80013ca:	f7ff fe1d 	bl	8001008 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d8:	4293      	cmp	r3, r2
 80013da:	d90f      	bls.n	80013fc <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80013e0:	6939      	ldr	r1, [r7, #16]
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 fda6 	bl	8001f34 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2201      	movs	r2, #1
 80013ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e0ac      	b.n	8001556 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f003 0304 	and.w	r3, r3, #4
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0da      	beq.n	80013bc <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001406:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800140a:	2100      	movs	r1, #0
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f000 fbd2 	bl	8001bb6 <HAL_ETH_WritePHYRegister>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d00b      	beq.n	8001430 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800141c:	6939      	ldr	r1, [r7, #16]
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f000 fd88 	bl	8001f34 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800142c:	2301      	movs	r3, #1
 800142e:	e092      	b.n	8001556 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001430:	f7ff fdea 	bl	8001008 <HAL_GetTick>
 8001434:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001436:	f107 030c 	add.w	r3, r7, #12
 800143a:	461a      	mov	r2, r3
 800143c:	2101      	movs	r1, #1
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 fb51 	bl	8001ae6 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001444:	f7ff fde0 	bl	8001008 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001452:	4293      	cmp	r3, r2
 8001454:	d90f      	bls.n	8001476 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800145a:	6939      	ldr	r1, [r7, #16]
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 fd69 	bl	8001f34 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2201      	movs	r2, #1
 8001466:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e06f      	b.n	8001556 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f003 0320 	and.w	r3, r3, #32
 800147c:	2b00      	cmp	r3, #0
 800147e:	d0da      	beq.n	8001436 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001480:	f107 030c 	add.w	r3, r7, #12
 8001484:	461a      	mov	r2, r3
 8001486:	2110      	movs	r1, #16
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 fb2c 	bl	8001ae6 <HAL_ETH_ReadPHYRegister>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00b      	beq.n	80014ac <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001498:	6939      	ldr	r1, [r7, #16]
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 fd4a 	bl	8001f34 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2201      	movs	r2, #1
 80014a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80014a8:	2301      	movs	r3, #1
 80014aa:	e054      	b.n	8001556 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f003 0304 	and.w	r3, r3, #4
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d004      	beq.n	80014c0 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	e002      	b.n	80014c6 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	e035      	b.n	8001544 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	e030      	b.n	8001544 <HAL_ETH_Init+0x318>
 80014e2:	bf00      	nop
 80014e4:	03938700 	.word	0x03938700
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40013800 	.word	0x40013800
 80014f0:	01312cff 	.word	0x01312cff
 80014f4:	02160ebf 	.word	0x02160ebf
 80014f8:	05f5e0ff 	.word	0x05f5e0ff
 80014fc:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	08db      	lsrs	r3, r3, #3
 8001506:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	085b      	lsrs	r3, r3, #1
 800150e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001510:	4313      	orrs	r3, r2
 8001512:	b29b      	uxth	r3, r3
 8001514:	461a      	mov	r2, r3
 8001516:	2100      	movs	r1, #0
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f000 fb4c 	bl	8001bb6 <HAL_ETH_WritePHYRegister>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d00b      	beq.n	800153c <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001528:	6939      	ldr	r1, [r7, #16]
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 fd02 	bl	8001f34 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2201      	movs	r2, #1
 8001534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e00c      	b.n	8001556 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800153c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001540:	f7ff fd6e 	bl	8001020 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001544:	6939      	ldr	r1, [r7, #16]
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 fcf4 	bl	8001f34 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3720      	adds	r7, #32
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop

08001560 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001560:	b480      	push	{r7}
 8001562:	b087      	sub	sp, #28
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
 800156c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001578:	2b01      	cmp	r3, #1
 800157a:	d101      	bne.n	8001580 <HAL_ETH_DMATxDescListInit+0x20>
 800157c:	2302      	movs	r3, #2
 800157e:	e052      	b.n	8001626 <HAL_ETH_DMATxDescListInit+0xc6>
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2201      	movs	r2, #1
 8001584:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2202      	movs	r2, #2
 800158c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	e030      	b.n	80015fe <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	015b      	lsls	r3, r3, #5
 80015a0:	68ba      	ldr	r2, [r7, #8]
 80015a2:	4413      	add	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80015ac:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80015b4:	fb02 f303 	mul.w	r3, r2, r3
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	4413      	add	r3, r2
 80015bc:	461a      	mov	r2, r3
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d105      	bne.n	80015d6 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	3b01      	subs	r3, #1
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d208      	bcs.n	80015f2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	3301      	adds	r3, #1
 80015e4:	015b      	lsls	r3, r3, #5
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	4413      	add	r3, r2
 80015ea:	461a      	mov	r2, r3
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	60da      	str	r2, [r3, #12]
 80015f0:	e002      	b.n	80015f8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	3301      	adds	r3, #1
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	429a      	cmp	r2, r3
 8001604:	d3ca      	bcc.n	800159c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6819      	ldr	r1, [r3, #0]
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	f241 0310 	movw	r3, #4112	; 0x1010
 8001610:	440b      	add	r3, r1
 8001612:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	371c      	adds	r7, #28
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001632:	b480      	push	{r7}
 8001634:	b087      	sub	sp, #28
 8001636:	af00      	add	r7, sp, #0
 8001638:	60f8      	str	r0, [r7, #12]
 800163a:	60b9      	str	r1, [r7, #8]
 800163c:	607a      	str	r2, [r7, #4]
 800163e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800164a:	2b01      	cmp	r3, #1
 800164c:	d101      	bne.n	8001652 <HAL_ETH_DMARxDescListInit+0x20>
 800164e:	2302      	movs	r3, #2
 8001650:	e056      	b.n	8001700 <HAL_ETH_DMARxDescListInit+0xce>
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2202      	movs	r2, #2
 800165e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	68ba      	ldr	r2, [r7, #8]
 8001666:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	e034      	b.n	80016d8 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	015b      	lsls	r3, r3, #5
 8001672:	68ba      	ldr	r2, [r7, #8]
 8001674:	4413      	add	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800167e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001686:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800168e:	fb02 f303 	mul.w	r3, r2, r3
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	461a      	mov	r2, r3
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d105      	bne.n	80016b0 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d208      	bcs.n	80016cc <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	3301      	adds	r3, #1
 80016be:	015b      	lsls	r3, r3, #5
 80016c0:	68ba      	ldr	r2, [r7, #8]
 80016c2:	4413      	add	r3, r2
 80016c4:	461a      	mov	r2, r3
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	e002      	b.n	80016d2 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80016cc:	68ba      	ldr	r2, [r7, #8]
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	3301      	adds	r3, #1
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	697a      	ldr	r2, [r7, #20]
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d3c6      	bcc.n	800166e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6819      	ldr	r1, [r3, #0]
 80016e4:	68ba      	ldr	r2, [r7, #8]
 80016e6:	f241 030c 	movw	r3, #4108	; 0x100c
 80016ea:	440b      	add	r3, r1
 80016ec:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2201      	movs	r2, #1
 80016f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	371c      	adds	r7, #28
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800170c:	b480      	push	{r7}
 800170e:	b087      	sub	sp, #28
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001728:	2b01      	cmp	r3, #1
 800172a:	d101      	bne.n	8001730 <HAL_ETH_TransmitFrame+0x24>
 800172c:	2302      	movs	r3, #2
 800172e:	e0cd      	b.n	80018cc <HAL_ETH_TransmitFrame+0x1c0>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2202      	movs	r2, #2
 800173c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d109      	bne.n	800175a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2201      	movs	r2, #1
 800174a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001756:	2301      	movs	r3, #1
 8001758:	e0b8      	b.n	80018cc <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	da09      	bge.n	8001778 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2212      	movs	r2, #18
 8001768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e0a9      	b.n	80018cc <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800177e:	4293      	cmp	r3, r2
 8001780:	d915      	bls.n	80017ae <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	4a54      	ldr	r2, [pc, #336]	; (80018d8 <HAL_ETH_TransmitFrame+0x1cc>)
 8001786:	fba2 2303 	umull	r2, r3, r2, r3
 800178a:	0a9b      	lsrs	r3, r3, #10
 800178c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	4b51      	ldr	r3, [pc, #324]	; (80018d8 <HAL_ETH_TransmitFrame+0x1cc>)
 8001792:	fba3 1302 	umull	r1, r3, r3, r2
 8001796:	0a9b      	lsrs	r3, r3, #10
 8001798:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800179c:	fb01 f303 	mul.w	r3, r1, r3
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d005      	beq.n	80017b2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	3301      	adds	r3, #1
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	e001      	b.n	80017b2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 80017ae:	2301      	movs	r3, #1
 80017b0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d11c      	bne.n	80017f2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80017c6:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80017d2:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017de:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017e2:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	461a      	mov	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80017f0:	e04b      	b.n	800188a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80017f2:	2300      	movs	r3, #0
 80017f4:	613b      	str	r3, [r7, #16]
 80017f6:	e044      	b.n	8001882 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001802:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001806:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d107      	bne.n	800181e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001818:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800181c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001822:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001826:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	3b01      	subs	r3, #1
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	429a      	cmp	r2, r3
 8001830:	d116      	bne.n	8001860 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001840:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	4a25      	ldr	r2, [pc, #148]	; (80018dc <HAL_ETH_TransmitFrame+0x1d0>)
 8001846:	fb02 f203 	mul.w	r2, r2, r3
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	4413      	add	r3, r2
 800184e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001852:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800185e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800186e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	461a      	mov	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	3301      	adds	r3, #1
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	429a      	cmp	r2, r3
 8001888:	d3b6      	bcc.n	80017f8 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001892:	4413      	add	r3, r2
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00d      	beq.n	80018ba <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	f241 0314 	movw	r3, #4116	; 0x1014
 80018a6:	4413      	add	r3, r2
 80018a8:	2204      	movs	r2, #4
 80018aa:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	f241 0304 	movw	r3, #4100	; 0x1004
 80018b4:	4413      	add	r3, r2
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2201      	movs	r2, #1
 80018be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	371c      	adds	r7, #28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	ac02b00b 	.word	0xac02b00b
 80018dc:	fffffa0c 	.word	0xfffffa0c

080018e0 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d101      	bne.n	80018fa <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80018f6:	2302      	movs	r3, #2
 80018f8:	e074      	b.n	80019e4 <HAL_ETH_GetReceivedFrame_IT+0x104>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2202      	movs	r2, #2
 8001906:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800190a:	e05a      	b.n	80019c2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	3301      	adds	r3, #1
 8001910:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800191c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001920:	d10d      	bne.n	800193e <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2201      	movs	r2, #1
 800192e:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	461a      	mov	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	629a      	str	r2, [r3, #40]	; 0x28
 800193c:	e041      	b.n	80019c2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001948:	2b00      	cmp	r3, #0
 800194a:	d10b      	bne.n	8001964 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001950:	1c5a      	adds	r2, r3, #1
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	461a      	mov	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	629a      	str	r2, [r3, #40]	; 0x28
 8001962:	e02e      	b.n	80019c2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001970:	1c5a      	adds	r2, r3, #1
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800197a:	2b01      	cmp	r3, #1
 800197c:	d103      	bne.n	8001986 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	0c1b      	lsrs	r3, r3, #16
 800198e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001992:	1f1a      	subs	r2, r3, #4
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199c:	689a      	ldr	r2, [r3, #8]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	461a      	mov	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80019be:	2300      	movs	r3, #0
 80019c0:	e010      	b.n	80019e4 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	db02      	blt.n	80019d2 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2b03      	cmp	r3, #3
 80019d0:	d99c      	bls.n	800190c <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	f241 0314 	movw	r3, #4116	; 0x1014
 8001a00:	4413      	add	r3, r2
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a08:	2b40      	cmp	r3, #64	; 0x40
 8001a0a:	d112      	bne.n	8001a32 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f003 f9d7 	bl	8004dc0 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	f241 0314 	movw	r3, #4116	; 0x1014
 8001a1a:	4413      	add	r3, r2
 8001a1c:	2240      	movs	r2, #64	; 0x40
 8001a1e:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a30:	e01b      	b.n	8001a6a <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	f241 0314 	movw	r3, #4116	; 0x1014
 8001a3a:	4413      	add	r3, r2
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d111      	bne.n	8001a6a <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 f839 	bl	8001abe <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	f241 0314 	movw	r3, #4116	; 0x1014
 8001a54:	4413      	add	r3, r2
 8001a56:	2201      	movs	r2, #1
 8001a58:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001a72:	4413      	add	r3, r2
 8001a74:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a78:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001a82:	4413      	add	r3, r2
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a8e:	d112      	bne.n	8001ab6 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 f81e 	bl	8001ad2 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	f241 0314 	movw	r3, #4116	; 0x1014
 8001a9e:	4413      	add	r3, r2
 8001aa0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001aa4:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b086      	sub	sp, #24
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	60f8      	str	r0, [r7, #12]
 8001aee:	460b      	mov	r3, r1
 8001af0:	607a      	str	r2, [r7, #4]
 8001af2:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b82      	cmp	r3, #130	; 0x82
 8001b06:	d101      	bne.n	8001b0c <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	e050      	b.n	8001bae <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2282      	movs	r2, #130	; 0x82
 8001b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f003 031c 	and.w	r3, r3, #28
 8001b22:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8a1b      	ldrh	r3, [r3, #16]
 8001b28:	02db      	lsls	r3, r3, #11
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001b32:	897b      	ldrh	r3, [r7, #10]
 8001b34:	019b      	lsls	r3, r3, #6
 8001b36:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	f023 0302 	bic.w	r3, r3, #2
 8001b46:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b58:	f7ff fa56 	bl	8001008 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b5e:	e015      	b.n	8001b8c <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001b60:	f7ff fa52 	bl	8001008 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b6e:	d309      	bcc.n	8001b84 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e014      	b.n	8001bae <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1e4      	bne.n	8001b60 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b086      	sub	sp, #24
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	60f8      	str	r0, [r7, #12]
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	607a      	str	r2, [r7, #4]
 8001bc2:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b42      	cmp	r3, #66	; 0x42
 8001bd6:	d101      	bne.n	8001bdc <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	e04e      	b.n	8001c7a <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2242      	movs	r2, #66	; 0x42
 8001be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	f003 031c 	and.w	r3, r3, #28
 8001bf2:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	8a1b      	ldrh	r3, [r3, #16]
 8001bf8:	02db      	lsls	r3, r3, #11
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001c02:	897b      	ldrh	r3, [r7, #10]
 8001c04:	019b      	lsls	r3, r3, #6
 8001c06:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001c0a:	697a      	ldr	r2, [r7, #20]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	f043 0302 	orr.w	r3, r3, #2
 8001c16:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001c32:	f7ff f9e9 	bl	8001008 <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c38:	e015      	b.n	8001c66 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001c3a:	f7ff f9e5 	bl	8001008 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c48:	d309      	bcc.n	8001c5e <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e00d      	b.n	8001c7a <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1e4      	bne.n	8001c3a <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d101      	bne.n	8001c98 <HAL_ETH_Start+0x16>
 8001c94:	2302      	movs	r3, #2
 8001c96:	e01f      	b.n	8001cd8 <HAL_ETH_Start+0x56>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 fb45 	bl	8002338 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 fb7c 	bl	80023ac <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 fc13 	bl	80024e0 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 fbb0 	bl	8002420 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 fbdd 	bl	8002480 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d101      	bne.n	8001cf6 <HAL_ETH_Stop+0x16>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e01f      	b.n	8001d36 <HAL_ETH_Stop+0x56>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2202      	movs	r2, #2
 8001d02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 fba2 	bl	8002450 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 fbcf 	bl	80024b0 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 fb67 	bl	80023e6 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 fbe1 	bl	80024e0 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 fb27 	bl	8002372 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
	...

08001d40 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d101      	bne.n	8001d5c <HAL_ETH_ConfigMAC+0x1c>
 8001d58:	2302      	movs	r3, #2
 8001d5a:	e0e4      	b.n	8001f26 <HAL_ETH_ConfigMAC+0x1e6>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2202      	movs	r2, #2
 8001d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 80b1 	beq.w	8001ed6 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	4b6c      	ldr	r3, [pc, #432]	; (8001f30 <HAL_ETH_ConfigMAC+0x1f0>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001d8c:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001d92:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001d98:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001d9e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001da4:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001daa:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001db0:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001db6:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001dbc:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001dc2:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001dc8:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001dce:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001de6:	2001      	movs	r0, #1
 8001de8:	f7ff f91a 	bl	8001020 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001dfc:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001e02:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001e08:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001e0e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001e14:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001e1a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001e26:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001e28:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e32:	2001      	movs	r0, #1
 8001e34:	f7ff f8f4 	bl	8001020 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e48:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e52:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001e62:	4013      	ands	r3, r2
 8001e64:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001e70:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001e76:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001e7c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001e82:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001e88:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	f7ff f8bd 	bl	8001020 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	69db      	ldr	r3, [r3, #28]
 8001ec4:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ec6:	2001      	movs	r0, #1
 8001ec8:	f7ff f8aa 	bl	8001020 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	61da      	str	r2, [r3, #28]
 8001ed4:	e01e      	b.n	8001f14 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001ee4:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f06:	2001      	movs	r0, #1
 8001f08:	f7ff f88a 	bl	8001020 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	ff20810f 	.word	0xff20810f

08001f34 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b0b0      	sub	sp, #192	; 0xc0
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d007      	beq.n	8001f5a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f50:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f58:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001f62:	2300      	movs	r3, #0
 8001f64:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001f66:	2300      	movs	r3, #0
 8001f68:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d103      	bne.n	8001f82 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001f7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f7e:	663b      	str	r3, [r7, #96]	; 0x60
 8001f80:	e001      	b.n	8001f86 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001f82:	2300      	movs	r3, #0
 8001f84:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001f86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f8a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f90:	2300      	movs	r3, #0
 8001f92:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001f94:	2300      	movs	r3, #0
 8001f96:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001fa0:	2340      	movs	r3, #64	; 0x40
 8001fa2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001fd4:	2380      	movs	r3, #128	; 0x80
 8001fd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001fec:	2300      	movs	r3, #0
 8001fee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002008:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800200c:	4bab      	ldr	r3, [pc, #684]	; (80022bc <ETH_MACDMAConfig+0x388>)
 800200e:	4013      	ands	r3, r2
 8002010:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002014:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002018:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800201a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800201c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800201e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002020:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002026:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002028:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800202a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800202c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800202e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002034:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002036:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002038:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800203a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800203c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800203e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002040:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002044:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002046:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002048:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800204a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800204e:	4313      	orrs	r3, r2
 8002050:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800205c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002068:	2001      	movs	r0, #1
 800206a:	f7fe ffd9 	bl	8001020 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002076:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002078:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800207a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800207c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800207e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002080:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002082:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002086:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002088:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800208c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800208e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002092:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002094:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002098:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800209c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80020a4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80020a6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80020b2:	2001      	movs	r0, #1
 80020b4:	f7fe ffb4 	bl	8001020 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020c0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80020ca:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80020d4:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80020e0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020e4:	f64f 7341 	movw	r3, #65345	; 0xff41
 80020e8:	4013      	ands	r3, r2
 80020ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80020ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020f2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80020f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80020f8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80020fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80020fe:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002100:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002104:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002106:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800210a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800210c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002110:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002112:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002116:	4313      	orrs	r3, r2
 8002118:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002124:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002130:	2001      	movs	r0, #1
 8002132:	f7fe ff75 	bl	8001020 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800213e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002140:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002144:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800215a:	2001      	movs	r0, #1
 800215c:	f7fe ff60 	bl	8001020 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002168:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800216a:	2300      	movs	r3, #0
 800216c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800216e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002172:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002174:	2300      	movs	r3, #0
 8002176:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002178:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800217c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800217e:	2300      	movs	r3, #0
 8002180:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002186:	2300      	movs	r3, #0
 8002188:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800218a:	2300      	movs	r3, #0
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800218e:	2304      	movs	r3, #4
 8002190:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002192:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002196:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002198:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800219c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800219e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021a2:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80021a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021a8:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80021aa:	2380      	movs	r3, #128	; 0x80
 80021ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80021b2:	2300      	movs	r3, #0
 80021b4:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	f241 0318 	movw	r3, #4120	; 0x1018
 80021be:	4413      	add	r3, r2
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80021c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021ca:	4b3d      	ldr	r3, [pc, #244]	; (80022c0 <ETH_MACDMAConfig+0x38c>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80021d2:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80021d4:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80021d6:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80021d8:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80021da:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80021dc:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80021de:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80021e0:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80021e2:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80021e4:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80021e6:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80021e8:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80021ea:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80021ee:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80021f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80021f2:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80021f4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021f8:	4313      	orrs	r3, r2
 80021fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	f241 0318 	movw	r3, #4120	; 0x1018
 8002206:	4413      	add	r3, r2
 8002208:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800220c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	f241 0318 	movw	r3, #4120	; 0x1018
 8002216:	4413      	add	r3, r2
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800221e:	2001      	movs	r0, #1
 8002220:	f7fe fefe 	bl	8001020 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	f241 0318 	movw	r3, #4120	; 0x1018
 800222c:	4413      	add	r3, r2
 800222e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002232:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002238:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800223a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800223c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800223e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002240:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002244:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002248:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800224a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800224c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 800224e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002258:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800225c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800226c:	2001      	movs	r0, #1
 800226e:	f7fe fed7 	bl	8001020 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800227a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800227e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d10d      	bne.n	80022a4 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	f241 031c 	movw	r3, #4124	; 0x101c
 8002290:	4413      	add	r3, r2
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6811      	ldr	r1, [r2, #0]
 8002298:	4a0a      	ldr	r2, [pc, #40]	; (80022c4 <ETH_MACDMAConfig+0x390>)
 800229a:	431a      	orrs	r2, r3
 800229c:	f241 031c 	movw	r3, #4124	; 0x101c
 80022a0:	440b      	add	r3, r1
 80022a2:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	461a      	mov	r2, r3
 80022aa:	2100      	movs	r1, #0
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 f80b 	bl	80022c8 <ETH_MACAddressConfig>
}
 80022b2:	bf00      	nop
 80022b4:	37c0      	adds	r7, #192	; 0xc0
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	ff20810f 	.word	0xff20810f
 80022c0:	f8de3f23 	.word	0xf8de3f23
 80022c4:	00010040 	.word	0x00010040

080022c8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b087      	sub	sp, #28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3305      	adds	r3, #5
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	021b      	lsls	r3, r3, #8
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	3204      	adds	r2, #4
 80022e0:	7812      	ldrb	r2, [r2, #0]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	4b11      	ldr	r3, [pc, #68]	; (8002330 <ETH_MACAddressConfig+0x68>)
 80022ea:	4413      	add	r3, r2
 80022ec:	461a      	mov	r2, r3
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	3303      	adds	r3, #3
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	061a      	lsls	r2, r3, #24
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	3302      	adds	r3, #2
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	041b      	lsls	r3, r3, #16
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3301      	adds	r3, #1
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	021b      	lsls	r3, r3, #8
 800230c:	4313      	orrs	r3, r2
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	7812      	ldrb	r2, [r2, #0]
 8002312:	4313      	orrs	r3, r2
 8002314:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	4b06      	ldr	r3, [pc, #24]	; (8002334 <ETH_MACAddressConfig+0x6c>)
 800231a:	4413      	add	r3, r2
 800231c:	461a      	mov	r2, r3
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	6013      	str	r3, [r2, #0]
}
 8002322:	bf00      	nop
 8002324:	371c      	adds	r7, #28
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	40028040 	.word	0x40028040
 8002334:	40028044 	.word	0x40028044

08002338 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002340:	2300      	movs	r3, #0
 8002342:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f042 0208 	orr.w	r2, r2, #8
 8002352:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800235c:	2001      	movs	r0, #1
 800235e:	f7fe fe5f 	bl	8001020 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	601a      	str	r2, [r3, #0]
}
 800236a:	bf00      	nop
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002372:	b580      	push	{r7, lr}
 8002374:	b084      	sub	sp, #16
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0208 	bic.w	r2, r2, #8
 800238c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002396:	2001      	movs	r0, #1
 8002398:	f7fe fe42 	bl	8001020 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	601a      	str	r2, [r3, #0]
}
 80023a4:	bf00      	nop
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f042 0204 	orr.w	r2, r2, #4
 80023c6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023d0:	2001      	movs	r0, #1
 80023d2:	f7fe fe25 	bl	8001020 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	601a      	str	r2, [r3, #0]
}
 80023de:	bf00      	nop
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b084      	sub	sp, #16
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 0204 	bic.w	r2, r2, #4
 8002400:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800240a:	2001      	movs	r0, #1
 800240c:	f7fe fe08 	bl	8001020 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	601a      	str	r2, [r3, #0]
}
 8002418:	bf00      	nop
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002430:	4413      	add	r3, r2
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6811      	ldr	r1, [r2, #0]
 8002438:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800243c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002440:	440b      	add	r3, r1
 8002442:	601a      	str	r2, [r3, #0]
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002460:	4413      	add	r3, r2
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6811      	ldr	r1, [r2, #0]
 8002468:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800246c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002470:	440b      	add	r3, r1
 8002472:	601a      	str	r2, [r3, #0]
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002490:	4413      	add	r3, r2
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6811      	ldr	r1, [r2, #0]
 8002498:	f043 0202 	orr.w	r2, r3, #2
 800249c:	f241 0318 	movw	r3, #4120	; 0x1018
 80024a0:	440b      	add	r3, r1
 80024a2:	601a      	str	r2, [r3, #0]
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	f241 0318 	movw	r3, #4120	; 0x1018
 80024c0:	4413      	add	r3, r2
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6811      	ldr	r1, [r2, #0]
 80024c8:	f023 0202 	bic.w	r2, r3, #2
 80024cc:	f241 0318 	movw	r3, #4120	; 0x1018
 80024d0:	440b      	add	r3, r1
 80024d2:	601a      	str	r2, [r3, #0]
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	f241 0318 	movw	r3, #4120	; 0x1018
 80024f4:	4413      	add	r3, r2
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6811      	ldr	r1, [r2, #0]
 80024fc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002500:	f241 0318 	movw	r3, #4120	; 0x1018
 8002504:	440b      	add	r3, r1
 8002506:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002510:	4413      	add	r3, r2
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002516:	2001      	movs	r0, #1
 8002518:	f7fe fd82 	bl	8001020 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6819      	ldr	r1, [r3, #0]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	f241 0318 	movw	r3, #4120	; 0x1018
 8002526:	440b      	add	r3, r1
 8002528:	601a      	str	r2, [r3, #0]
}
 800252a:	bf00      	nop
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002534:	b480      	push	{r7}
 8002536:	b089      	sub	sp, #36	; 0x24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800253e:	2300      	movs	r3, #0
 8002540:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002542:	2300      	movs	r3, #0
 8002544:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800254a:	2300      	movs	r3, #0
 800254c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
 8002552:	e175      	b.n	8002840 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002554:	2201      	movs	r2, #1
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	4013      	ands	r3, r2
 8002566:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	429a      	cmp	r2, r3
 800256e:	f040 8164 	bne.w	800283a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d00b      	beq.n	8002592 <HAL_GPIO_Init+0x5e>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b02      	cmp	r3, #2
 8002580:	d007      	beq.n	8002592 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002586:	2b11      	cmp	r3, #17
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b12      	cmp	r3, #18
 8002590:	d130      	bne.n	80025f4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	2203      	movs	r2, #3
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43db      	mvns	r3, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4013      	ands	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	68da      	ldr	r2, [r3, #12]
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025c8:	2201      	movs	r2, #1
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	091b      	lsrs	r3, r3, #4
 80025de:	f003 0201 	and.w	r2, r3, #1
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	2203      	movs	r2, #3
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b02      	cmp	r3, #2
 800262a:	d003      	beq.n	8002634 <HAL_GPIO_Init+0x100>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b12      	cmp	r3, #18
 8002632:	d123      	bne.n	800267c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	08da      	lsrs	r2, r3, #3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3208      	adds	r2, #8
 800263c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	220f      	movs	r2, #15
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	691a      	ldr	r2, [r3, #16]
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	08da      	lsrs	r2, r3, #3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	3208      	adds	r2, #8
 8002676:	69b9      	ldr	r1, [r7, #24]
 8002678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	2203      	movs	r2, #3
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 0203 	and.w	r2, r3, #3
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 80be 	beq.w	800283a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026be:	4b66      	ldr	r3, [pc, #408]	; (8002858 <HAL_GPIO_Init+0x324>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	4a65      	ldr	r2, [pc, #404]	; (8002858 <HAL_GPIO_Init+0x324>)
 80026c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026c8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ca:	4b63      	ldr	r3, [pc, #396]	; (8002858 <HAL_GPIO_Init+0x324>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80026d6:	4a61      	ldr	r2, [pc, #388]	; (800285c <HAL_GPIO_Init+0x328>)
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	089b      	lsrs	r3, r3, #2
 80026dc:	3302      	adds	r3, #2
 80026de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	220f      	movs	r2, #15
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4013      	ands	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a58      	ldr	r2, [pc, #352]	; (8002860 <HAL_GPIO_Init+0x32c>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d037      	beq.n	8002772 <HAL_GPIO_Init+0x23e>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a57      	ldr	r2, [pc, #348]	; (8002864 <HAL_GPIO_Init+0x330>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d031      	beq.n	800276e <HAL_GPIO_Init+0x23a>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a56      	ldr	r2, [pc, #344]	; (8002868 <HAL_GPIO_Init+0x334>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d02b      	beq.n	800276a <HAL_GPIO_Init+0x236>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a55      	ldr	r2, [pc, #340]	; (800286c <HAL_GPIO_Init+0x338>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d025      	beq.n	8002766 <HAL_GPIO_Init+0x232>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a54      	ldr	r2, [pc, #336]	; (8002870 <HAL_GPIO_Init+0x33c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d01f      	beq.n	8002762 <HAL_GPIO_Init+0x22e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a53      	ldr	r2, [pc, #332]	; (8002874 <HAL_GPIO_Init+0x340>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d019      	beq.n	800275e <HAL_GPIO_Init+0x22a>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a52      	ldr	r2, [pc, #328]	; (8002878 <HAL_GPIO_Init+0x344>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d013      	beq.n	800275a <HAL_GPIO_Init+0x226>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a51      	ldr	r2, [pc, #324]	; (800287c <HAL_GPIO_Init+0x348>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d00d      	beq.n	8002756 <HAL_GPIO_Init+0x222>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a50      	ldr	r2, [pc, #320]	; (8002880 <HAL_GPIO_Init+0x34c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d007      	beq.n	8002752 <HAL_GPIO_Init+0x21e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a4f      	ldr	r2, [pc, #316]	; (8002884 <HAL_GPIO_Init+0x350>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d101      	bne.n	800274e <HAL_GPIO_Init+0x21a>
 800274a:	2309      	movs	r3, #9
 800274c:	e012      	b.n	8002774 <HAL_GPIO_Init+0x240>
 800274e:	230a      	movs	r3, #10
 8002750:	e010      	b.n	8002774 <HAL_GPIO_Init+0x240>
 8002752:	2308      	movs	r3, #8
 8002754:	e00e      	b.n	8002774 <HAL_GPIO_Init+0x240>
 8002756:	2307      	movs	r3, #7
 8002758:	e00c      	b.n	8002774 <HAL_GPIO_Init+0x240>
 800275a:	2306      	movs	r3, #6
 800275c:	e00a      	b.n	8002774 <HAL_GPIO_Init+0x240>
 800275e:	2305      	movs	r3, #5
 8002760:	e008      	b.n	8002774 <HAL_GPIO_Init+0x240>
 8002762:	2304      	movs	r3, #4
 8002764:	e006      	b.n	8002774 <HAL_GPIO_Init+0x240>
 8002766:	2303      	movs	r3, #3
 8002768:	e004      	b.n	8002774 <HAL_GPIO_Init+0x240>
 800276a:	2302      	movs	r3, #2
 800276c:	e002      	b.n	8002774 <HAL_GPIO_Init+0x240>
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <HAL_GPIO_Init+0x240>
 8002772:	2300      	movs	r3, #0
 8002774:	69fa      	ldr	r2, [r7, #28]
 8002776:	f002 0203 	and.w	r2, r2, #3
 800277a:	0092      	lsls	r2, r2, #2
 800277c:	4093      	lsls	r3, r2
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4313      	orrs	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002784:	4935      	ldr	r1, [pc, #212]	; (800285c <HAL_GPIO_Init+0x328>)
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	089b      	lsrs	r3, r3, #2
 800278a:	3302      	adds	r3, #2
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002792:	4b3d      	ldr	r3, [pc, #244]	; (8002888 <HAL_GPIO_Init+0x354>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	43db      	mvns	r3, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4013      	ands	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027b6:	4a34      	ldr	r2, [pc, #208]	; (8002888 <HAL_GPIO_Init+0x354>)
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027bc:	4b32      	ldr	r3, [pc, #200]	; (8002888 <HAL_GPIO_Init+0x354>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d003      	beq.n	80027e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	4313      	orrs	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027e0:	4a29      	ldr	r2, [pc, #164]	; (8002888 <HAL_GPIO_Init+0x354>)
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027e6:	4b28      	ldr	r3, [pc, #160]	; (8002888 <HAL_GPIO_Init+0x354>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	43db      	mvns	r3, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4013      	ands	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4313      	orrs	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800280a:	4a1f      	ldr	r2, [pc, #124]	; (8002888 <HAL_GPIO_Init+0x354>)
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002810:	4b1d      	ldr	r3, [pc, #116]	; (8002888 <HAL_GPIO_Init+0x354>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	43db      	mvns	r3, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d003      	beq.n	8002834 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	4313      	orrs	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002834:	4a14      	ldr	r2, [pc, #80]	; (8002888 <HAL_GPIO_Init+0x354>)
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3301      	adds	r3, #1
 800283e:	61fb      	str	r3, [r7, #28]
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	2b0f      	cmp	r3, #15
 8002844:	f67f ae86 	bls.w	8002554 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002848:	bf00      	nop
 800284a:	bf00      	nop
 800284c:	3724      	adds	r7, #36	; 0x24
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	40023800 	.word	0x40023800
 800285c:	40013800 	.word	0x40013800
 8002860:	40020000 	.word	0x40020000
 8002864:	40020400 	.word	0x40020400
 8002868:	40020800 	.word	0x40020800
 800286c:	40020c00 	.word	0x40020c00
 8002870:	40021000 	.word	0x40021000
 8002874:	40021400 	.word	0x40021400
 8002878:	40021800 	.word	0x40021800
 800287c:	40021c00 	.word	0x40021c00
 8002880:	40022000 	.word	0x40022000
 8002884:	40022400 	.word	0x40022400
 8002888:	40013c00 	.word	0x40013c00

0800288c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	807b      	strh	r3, [r7, #2]
 8002898:	4613      	mov	r3, r2
 800289a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800289c:	787b      	ldrb	r3, [r7, #1]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028a2:	887a      	ldrh	r2, [r7, #2]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80028a8:	e003      	b.n	80028b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80028aa:	887b      	ldrh	r3, [r7, #2]
 80028ac:	041a      	lsls	r2, r3, #16
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	619a      	str	r2, [r3, #24]
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
	...

080028c0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028c4:	4b05      	ldr	r3, [pc, #20]	; (80028dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a04      	ldr	r2, [pc, #16]	; (80028dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ce:	6013      	str	r3, [r2, #0]
}
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	40007000 	.word	0x40007000

080028e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80028e6:	2300      	movs	r3, #0
 80028e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80028ea:	4b23      	ldr	r3, [pc, #140]	; (8002978 <HAL_PWREx_EnableOverDrive+0x98>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	4a22      	ldr	r2, [pc, #136]	; (8002978 <HAL_PWREx_EnableOverDrive+0x98>)
 80028f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f4:	6413      	str	r3, [r2, #64]	; 0x40
 80028f6:	4b20      	ldr	r3, [pc, #128]	; (8002978 <HAL_PWREx_EnableOverDrive+0x98>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fe:	603b      	str	r3, [r7, #0]
 8002900:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002902:	4b1e      	ldr	r3, [pc, #120]	; (800297c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a1d      	ldr	r2, [pc, #116]	; (800297c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800290e:	f7fe fb7b 	bl	8001008 <HAL_GetTick>
 8002912:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002914:	e009      	b.n	800292a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002916:	f7fe fb77 	bl	8001008 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002924:	d901      	bls.n	800292a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e022      	b.n	8002970 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800292a:	4b14      	ldr	r3, [pc, #80]	; (800297c <HAL_PWREx_EnableOverDrive+0x9c>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002936:	d1ee      	bne.n	8002916 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002938:	4b10      	ldr	r3, [pc, #64]	; (800297c <HAL_PWREx_EnableOverDrive+0x9c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a0f      	ldr	r2, [pc, #60]	; (800297c <HAL_PWREx_EnableOverDrive+0x9c>)
 800293e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002942:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002944:	f7fe fb60 	bl	8001008 <HAL_GetTick>
 8002948:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800294a:	e009      	b.n	8002960 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800294c:	f7fe fb5c 	bl	8001008 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800295a:	d901      	bls.n	8002960 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e007      	b.n	8002970 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002960:	4b06      	ldr	r3, [pc, #24]	; (800297c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002968:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800296c:	d1ee      	bne.n	800294c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40023800 	.word	0x40023800
 800297c:	40007000 	.word	0x40007000

08002980 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002988:	2300      	movs	r3, #0
 800298a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e29b      	b.n	8002ece <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 8087 	beq.w	8002ab2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029a4:	4b96      	ldr	r3, [pc, #600]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f003 030c 	and.w	r3, r3, #12
 80029ac:	2b04      	cmp	r3, #4
 80029ae:	d00c      	beq.n	80029ca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029b0:	4b93      	ldr	r3, [pc, #588]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 030c 	and.w	r3, r3, #12
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	d112      	bne.n	80029e2 <HAL_RCC_OscConfig+0x62>
 80029bc:	4b90      	ldr	r3, [pc, #576]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029c8:	d10b      	bne.n	80029e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ca:	4b8d      	ldr	r3, [pc, #564]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d06c      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x130>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d168      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e275      	b.n	8002ece <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ea:	d106      	bne.n	80029fa <HAL_RCC_OscConfig+0x7a>
 80029ec:	4b84      	ldr	r3, [pc, #528]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a83      	ldr	r2, [pc, #524]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 80029f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f6:	6013      	str	r3, [r2, #0]
 80029f8:	e02e      	b.n	8002a58 <HAL_RCC_OscConfig+0xd8>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10c      	bne.n	8002a1c <HAL_RCC_OscConfig+0x9c>
 8002a02:	4b7f      	ldr	r3, [pc, #508]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a7e      	ldr	r2, [pc, #504]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002a08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a0c:	6013      	str	r3, [r2, #0]
 8002a0e:	4b7c      	ldr	r3, [pc, #496]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a7b      	ldr	r2, [pc, #492]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002a14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	e01d      	b.n	8002a58 <HAL_RCC_OscConfig+0xd8>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a24:	d10c      	bne.n	8002a40 <HAL_RCC_OscConfig+0xc0>
 8002a26:	4b76      	ldr	r3, [pc, #472]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a75      	ldr	r2, [pc, #468]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002a2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	4b73      	ldr	r3, [pc, #460]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a72      	ldr	r2, [pc, #456]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	e00b      	b.n	8002a58 <HAL_RCC_OscConfig+0xd8>
 8002a40:	4b6f      	ldr	r3, [pc, #444]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a6e      	ldr	r2, [pc, #440]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002a46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a4a:	6013      	str	r3, [r2, #0]
 8002a4c:	4b6c      	ldr	r3, [pc, #432]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a6b      	ldr	r2, [pc, #428]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002a52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d013      	beq.n	8002a88 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a60:	f7fe fad2 	bl	8001008 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a68:	f7fe face 	bl	8001008 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b64      	cmp	r3, #100	; 0x64
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e229      	b.n	8002ece <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7a:	4b61      	ldr	r3, [pc, #388]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f0      	beq.n	8002a68 <HAL_RCC_OscConfig+0xe8>
 8002a86:	e014      	b.n	8002ab2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a88:	f7fe fabe 	bl	8001008 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a90:	f7fe faba 	bl	8001008 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b64      	cmp	r3, #100	; 0x64
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e215      	b.n	8002ece <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aa2:	4b57      	ldr	r3, [pc, #348]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f0      	bne.n	8002a90 <HAL_RCC_OscConfig+0x110>
 8002aae:	e000      	b.n	8002ab2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d069      	beq.n	8002b92 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002abe:	4b50      	ldr	r3, [pc, #320]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00b      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aca:	4b4d      	ldr	r3, [pc, #308]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 030c 	and.w	r3, r3, #12
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d11c      	bne.n	8002b10 <HAL_RCC_OscConfig+0x190>
 8002ad6:	4b4a      	ldr	r3, [pc, #296]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d116      	bne.n	8002b10 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae2:	4b47      	ldr	r3, [pc, #284]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d005      	beq.n	8002afa <HAL_RCC_OscConfig+0x17a>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d001      	beq.n	8002afa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e1e9      	b.n	8002ece <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002afa:	4b41      	ldr	r3, [pc, #260]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	493d      	ldr	r1, [pc, #244]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0e:	e040      	b.n	8002b92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d023      	beq.n	8002b60 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b18:	4b39      	ldr	r3, [pc, #228]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a38      	ldr	r2, [pc, #224]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002b1e:	f043 0301 	orr.w	r3, r3, #1
 8002b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b24:	f7fe fa70 	bl	8001008 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b2c:	f7fe fa6c 	bl	8001008 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e1c7      	b.n	8002ece <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b3e:	4b30      	ldr	r3, [pc, #192]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0f0      	beq.n	8002b2c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b4a:	4b2d      	ldr	r3, [pc, #180]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	4929      	ldr	r1, [pc, #164]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	600b      	str	r3, [r1, #0]
 8002b5e:	e018      	b.n	8002b92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b60:	4b27      	ldr	r3, [pc, #156]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a26      	ldr	r2, [pc, #152]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002b66:	f023 0301 	bic.w	r3, r3, #1
 8002b6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6c:	f7fe fa4c 	bl	8001008 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b74:	f7fe fa48 	bl	8001008 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e1a3      	b.n	8002ece <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b86:	4b1e      	ldr	r3, [pc, #120]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f0      	bne.n	8002b74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d038      	beq.n	8002c10 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d019      	beq.n	8002bda <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ba6:	4b16      	ldr	r3, [pc, #88]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002baa:	4a15      	ldr	r2, [pc, #84]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb2:	f7fe fa29 	bl	8001008 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bba:	f7fe fa25 	bl	8001008 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e180      	b.n	8002ece <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bcc:	4b0c      	ldr	r3, [pc, #48]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0f0      	beq.n	8002bba <HAL_RCC_OscConfig+0x23a>
 8002bd8:	e01a      	b.n	8002c10 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bda:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bde:	4a08      	ldr	r2, [pc, #32]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002be0:	f023 0301 	bic.w	r3, r3, #1
 8002be4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be6:	f7fe fa0f 	bl	8001008 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bec:	e00a      	b.n	8002c04 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bee:	f7fe fa0b 	bl	8001008 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d903      	bls.n	8002c04 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e166      	b.n	8002ece <HAL_RCC_OscConfig+0x54e>
 8002c00:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c04:	4b92      	ldr	r3, [pc, #584]	; (8002e50 <HAL_RCC_OscConfig+0x4d0>)
 8002c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1ee      	bne.n	8002bee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 80a4 	beq.w	8002d66 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c1e:	4b8c      	ldr	r3, [pc, #560]	; (8002e50 <HAL_RCC_OscConfig+0x4d0>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10d      	bne.n	8002c46 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c2a:	4b89      	ldr	r3, [pc, #548]	; (8002e50 <HAL_RCC_OscConfig+0x4d0>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	4a88      	ldr	r2, [pc, #544]	; (8002e50 <HAL_RCC_OscConfig+0x4d0>)
 8002c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c34:	6413      	str	r3, [r2, #64]	; 0x40
 8002c36:	4b86      	ldr	r3, [pc, #536]	; (8002e50 <HAL_RCC_OscConfig+0x4d0>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3e:	60bb      	str	r3, [r7, #8]
 8002c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c42:	2301      	movs	r3, #1
 8002c44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c46:	4b83      	ldr	r3, [pc, #524]	; (8002e54 <HAL_RCC_OscConfig+0x4d4>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d118      	bne.n	8002c84 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002c52:	4b80      	ldr	r3, [pc, #512]	; (8002e54 <HAL_RCC_OscConfig+0x4d4>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a7f      	ldr	r2, [pc, #508]	; (8002e54 <HAL_RCC_OscConfig+0x4d4>)
 8002c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c5e:	f7fe f9d3 	bl	8001008 <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c64:	e008      	b.n	8002c78 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c66:	f7fe f9cf 	bl	8001008 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b64      	cmp	r3, #100	; 0x64
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e12a      	b.n	8002ece <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c78:	4b76      	ldr	r3, [pc, #472]	; (8002e54 <HAL_RCC_OscConfig+0x4d4>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0f0      	beq.n	8002c66 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d106      	bne.n	8002c9a <HAL_RCC_OscConfig+0x31a>
 8002c8c:	4b70      	ldr	r3, [pc, #448]	; (8002e50 <HAL_RCC_OscConfig+0x4d0>)
 8002c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c90:	4a6f      	ldr	r2, [pc, #444]	; (8002e50 <HAL_RCC_OscConfig+0x4d0>)
 8002c92:	f043 0301 	orr.w	r3, r3, #1
 8002c96:	6713      	str	r3, [r2, #112]	; 0x70
 8002c98:	e02d      	b.n	8002cf6 <HAL_RCC_OscConfig+0x376>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10c      	bne.n	8002cbc <HAL_RCC_OscConfig+0x33c>
 8002ca2:	4b6b      	ldr	r3, [pc, #428]	; (8002e50 <HAL_RCC_OscConfig+0x4d0>)
 8002ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca6:	4a6a      	ldr	r2, [pc, #424]	; (8002e50 <HAL_RCC_OscConfig+0x4d0>)
 8002ca8:	f023 0301 	bic.w	r3, r3, #1
 8002cac:	6713      	str	r3, [r2, #112]	; 0x70
 8002cae:	4b68      	ldr	r3, [pc, #416]	; (8002e50 <HAL_RCC_OscConfig+0x4d0>)
 8002cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb2:	4a67      	ldr	r2, [pc, #412]	; (8002e50 <HAL_RCC_OscConfig+0x4d0>)
 8002cb4:	f023 0304 	bic.w	r3, r3, #4
 8002cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8002cba:	e01c      	b.n	8002cf6 <HAL_RCC_OscConfig+0x376>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	2b05      	cmp	r3, #5
 8002cc2:	d10c      	bne.n	8002cde <HAL_RCC_OscConfig+0x35e>
 8002cc4:	4b62      	ldr	r3, [pc, #392]	; (8002e50 <HAL_RCC_OscConfig+0x4d0>)
 8002cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc8:	4a61      	ldr	r2, [pc, #388]	; (8002e50 <HAL_RCC_OscConfig+0x4d0>)
 8002cca:	f043 0304 	orr.w	r3, r3, #4
 8002cce:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd0:	4b5f      	ldr	r3, [pc, #380]	; (8002e50 <HAL_RCC_OscConfig+0x4d0>)
 8002cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd4:	4a5e      	ldr	r2, [pc, #376]	; (8002e50 <HAL_RCC_OscConfig+0x4d0>)
 8002cd6:	f043 0301 	orr.w	r3, r3, #1
 8002cda:	6713      	str	r3, [r2, #112]	; 0x70
 8002cdc:	e00b      	b.n	8002cf6 <HAL_RCC_OscConfig+0x376>
 8002cde:	4b5c      	ldr	r3, [pc, #368]	; (8002e50 <HAL_RCC_OscConfig+0x4d0>)
 8002ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce2:	4a5b      	ldr	r2, [pc, #364]	; (8002e50 <HAL_RCC_OscConfig+0x4d0>)
 8002ce4:	f023 0301 	bic.w	r3, r3, #1
 8002ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8002cea:	4b59      	ldr	r3, [pc, #356]	; (8002e50 <HAL_RCC_OscConfig+0x4d0>)
 8002cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cee:	4a58      	ldr	r2, [pc, #352]	; (8002e50 <HAL_RCC_OscConfig+0x4d0>)
 8002cf0:	f023 0304 	bic.w	r3, r3, #4
 8002cf4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d015      	beq.n	8002d2a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfe:	f7fe f983 	bl	8001008 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d04:	e00a      	b.n	8002d1c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d06:	f7fe f97f 	bl	8001008 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e0d8      	b.n	8002ece <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d1c:	4b4c      	ldr	r3, [pc, #304]	; (8002e50 <HAL_RCC_OscConfig+0x4d0>)
 8002d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d0ee      	beq.n	8002d06 <HAL_RCC_OscConfig+0x386>
 8002d28:	e014      	b.n	8002d54 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2a:	f7fe f96d 	bl	8001008 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d30:	e00a      	b.n	8002d48 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d32:	f7fe f969 	bl	8001008 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e0c2      	b.n	8002ece <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d48:	4b41      	ldr	r3, [pc, #260]	; (8002e50 <HAL_RCC_OscConfig+0x4d0>)
 8002d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1ee      	bne.n	8002d32 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d54:	7dfb      	ldrb	r3, [r7, #23]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d105      	bne.n	8002d66 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d5a:	4b3d      	ldr	r3, [pc, #244]	; (8002e50 <HAL_RCC_OscConfig+0x4d0>)
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	4a3c      	ldr	r2, [pc, #240]	; (8002e50 <HAL_RCC_OscConfig+0x4d0>)
 8002d60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 80ae 	beq.w	8002ecc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d70:	4b37      	ldr	r3, [pc, #220]	; (8002e50 <HAL_RCC_OscConfig+0x4d0>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f003 030c 	and.w	r3, r3, #12
 8002d78:	2b08      	cmp	r3, #8
 8002d7a:	d06d      	beq.n	8002e58 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d14b      	bne.n	8002e1c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d84:	4b32      	ldr	r3, [pc, #200]	; (8002e50 <HAL_RCC_OscConfig+0x4d0>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a31      	ldr	r2, [pc, #196]	; (8002e50 <HAL_RCC_OscConfig+0x4d0>)
 8002d8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d90:	f7fe f93a 	bl	8001008 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d98:	f7fe f936 	bl	8001008 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e091      	b.n	8002ece <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002daa:	4b29      	ldr	r3, [pc, #164]	; (8002e50 <HAL_RCC_OscConfig+0x4d0>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1f0      	bne.n	8002d98 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69da      	ldr	r2, [r3, #28]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	019b      	lsls	r3, r3, #6
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dcc:	085b      	lsrs	r3, r3, #1
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	041b      	lsls	r3, r3, #16
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd8:	061b      	lsls	r3, r3, #24
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de0:	071b      	lsls	r3, r3, #28
 8002de2:	491b      	ldr	r1, [pc, #108]	; (8002e50 <HAL_RCC_OscConfig+0x4d0>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002de8:	4b19      	ldr	r3, [pc, #100]	; (8002e50 <HAL_RCC_OscConfig+0x4d0>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a18      	ldr	r2, [pc, #96]	; (8002e50 <HAL_RCC_OscConfig+0x4d0>)
 8002dee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002df2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df4:	f7fe f908 	bl	8001008 <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dfc:	f7fe f904 	bl	8001008 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e05f      	b.n	8002ece <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e0e:	4b10      	ldr	r3, [pc, #64]	; (8002e50 <HAL_RCC_OscConfig+0x4d0>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0f0      	beq.n	8002dfc <HAL_RCC_OscConfig+0x47c>
 8002e1a:	e057      	b.n	8002ecc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e1c:	4b0c      	ldr	r3, [pc, #48]	; (8002e50 <HAL_RCC_OscConfig+0x4d0>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a0b      	ldr	r2, [pc, #44]	; (8002e50 <HAL_RCC_OscConfig+0x4d0>)
 8002e22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e28:	f7fe f8ee 	bl	8001008 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e30:	f7fe f8ea 	bl	8001008 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e045      	b.n	8002ece <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e42:	4b03      	ldr	r3, [pc, #12]	; (8002e50 <HAL_RCC_OscConfig+0x4d0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f0      	bne.n	8002e30 <HAL_RCC_OscConfig+0x4b0>
 8002e4e:	e03d      	b.n	8002ecc <HAL_RCC_OscConfig+0x54c>
 8002e50:	40023800 	.word	0x40023800
 8002e54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002e58:	4b1f      	ldr	r3, [pc, #124]	; (8002ed8 <HAL_RCC_OscConfig+0x558>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d030      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d129      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d122      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e88:	4013      	ands	r3, r2
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e8e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d119      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9e:	085b      	lsrs	r3, r3, #1
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d10f      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d107      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d001      	beq.n	8002ecc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e000      	b.n	8002ece <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3718      	adds	r7, #24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40023800 	.word	0x40023800

08002edc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e0d0      	b.n	8003096 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ef4:	4b6a      	ldr	r3, [pc, #424]	; (80030a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 030f 	and.w	r3, r3, #15
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d910      	bls.n	8002f24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f02:	4b67      	ldr	r3, [pc, #412]	; (80030a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f023 020f 	bic.w	r2, r3, #15
 8002f0a:	4965      	ldr	r1, [pc, #404]	; (80030a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f12:	4b63      	ldr	r3, [pc, #396]	; (80030a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 030f 	and.w	r3, r3, #15
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d001      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e0b8      	b.n	8003096 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d020      	beq.n	8002f72 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d005      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f3c:	4b59      	ldr	r3, [pc, #356]	; (80030a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	4a58      	ldr	r2, [pc, #352]	; (80030a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f46:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0308 	and.w	r3, r3, #8
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d005      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f54:	4b53      	ldr	r3, [pc, #332]	; (80030a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	4a52      	ldr	r2, [pc, #328]	; (80030a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f5e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f60:	4b50      	ldr	r3, [pc, #320]	; (80030a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	494d      	ldr	r1, [pc, #308]	; (80030a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d040      	beq.n	8003000 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d107      	bne.n	8002f96 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f86:	4b47      	ldr	r3, [pc, #284]	; (80030a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d115      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e07f      	b.n	8003096 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d107      	bne.n	8002fae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f9e:	4b41      	ldr	r3, [pc, #260]	; (80030a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d109      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e073      	b.n	8003096 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fae:	4b3d      	ldr	r3, [pc, #244]	; (80030a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e06b      	b.n	8003096 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fbe:	4b39      	ldr	r3, [pc, #228]	; (80030a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f023 0203 	bic.w	r2, r3, #3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	4936      	ldr	r1, [pc, #216]	; (80030a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fd0:	f7fe f81a 	bl	8001008 <HAL_GetTick>
 8002fd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd6:	e00a      	b.n	8002fee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd8:	f7fe f816 	bl	8001008 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e053      	b.n	8003096 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fee:	4b2d      	ldr	r3, [pc, #180]	; (80030a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 020c 	and.w	r2, r3, #12
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d1eb      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003000:	4b27      	ldr	r3, [pc, #156]	; (80030a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 030f 	and.w	r3, r3, #15
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	429a      	cmp	r2, r3
 800300c:	d210      	bcs.n	8003030 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300e:	4b24      	ldr	r3, [pc, #144]	; (80030a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f023 020f 	bic.w	r2, r3, #15
 8003016:	4922      	ldr	r1, [pc, #136]	; (80030a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	4313      	orrs	r3, r2
 800301c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800301e:	4b20      	ldr	r3, [pc, #128]	; (80030a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	429a      	cmp	r2, r3
 800302a:	d001      	beq.n	8003030 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e032      	b.n	8003096 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	d008      	beq.n	800304e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800303c:	4b19      	ldr	r3, [pc, #100]	; (80030a4 <HAL_RCC_ClockConfig+0x1c8>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	4916      	ldr	r1, [pc, #88]	; (80030a4 <HAL_RCC_ClockConfig+0x1c8>)
 800304a:	4313      	orrs	r3, r2
 800304c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b00      	cmp	r3, #0
 8003058:	d009      	beq.n	800306e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800305a:	4b12      	ldr	r3, [pc, #72]	; (80030a4 <HAL_RCC_ClockConfig+0x1c8>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	490e      	ldr	r1, [pc, #56]	; (80030a4 <HAL_RCC_ClockConfig+0x1c8>)
 800306a:	4313      	orrs	r3, r2
 800306c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800306e:	f000 f821 	bl	80030b4 <HAL_RCC_GetSysClockFreq>
 8003072:	4602      	mov	r2, r0
 8003074:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	091b      	lsrs	r3, r3, #4
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	490a      	ldr	r1, [pc, #40]	; (80030a8 <HAL_RCC_ClockConfig+0x1cc>)
 8003080:	5ccb      	ldrb	r3, [r1, r3]
 8003082:	fa22 f303 	lsr.w	r3, r2, r3
 8003086:	4a09      	ldr	r2, [pc, #36]	; (80030ac <HAL_RCC_ClockConfig+0x1d0>)
 8003088:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800308a:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <HAL_RCC_ClockConfig+0x1d4>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	f7fd fe12 	bl	8000cb8 <HAL_InitTick>

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	40023c00 	.word	0x40023c00
 80030a4:	40023800 	.word	0x40023800
 80030a8:	08019524 	.word	0x08019524
 80030ac:	20000000 	.word	0x20000000
 80030b0:	20000004 	.word	0x20000004

080030b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80030b8:	b084      	sub	sp, #16
 80030ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80030bc:	2300      	movs	r3, #0
 80030be:	607b      	str	r3, [r7, #4]
 80030c0:	2300      	movs	r3, #0
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	2300      	movs	r3, #0
 80030c6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80030c8:	2300      	movs	r3, #0
 80030ca:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030cc:	4b67      	ldr	r3, [pc, #412]	; (800326c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 030c 	and.w	r3, r3, #12
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d00d      	beq.n	80030f4 <HAL_RCC_GetSysClockFreq+0x40>
 80030d8:	2b08      	cmp	r3, #8
 80030da:	f200 80bd 	bhi.w	8003258 <HAL_RCC_GetSysClockFreq+0x1a4>
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d002      	beq.n	80030e8 <HAL_RCC_GetSysClockFreq+0x34>
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	d003      	beq.n	80030ee <HAL_RCC_GetSysClockFreq+0x3a>
 80030e6:	e0b7      	b.n	8003258 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030e8:	4b61      	ldr	r3, [pc, #388]	; (8003270 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80030ea:	60bb      	str	r3, [r7, #8]
      break;
 80030ec:	e0b7      	b.n	800325e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030ee:	4b61      	ldr	r3, [pc, #388]	; (8003274 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80030f0:	60bb      	str	r3, [r7, #8]
      break;
 80030f2:	e0b4      	b.n	800325e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030f4:	4b5d      	ldr	r3, [pc, #372]	; (800326c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030fc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80030fe:	4b5b      	ldr	r3, [pc, #364]	; (800326c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d04d      	beq.n	80031a6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800310a:	4b58      	ldr	r3, [pc, #352]	; (800326c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	099b      	lsrs	r3, r3, #6
 8003110:	461a      	mov	r2, r3
 8003112:	f04f 0300 	mov.w	r3, #0
 8003116:	f240 10ff 	movw	r0, #511	; 0x1ff
 800311a:	f04f 0100 	mov.w	r1, #0
 800311e:	ea02 0800 	and.w	r8, r2, r0
 8003122:	ea03 0901 	and.w	r9, r3, r1
 8003126:	4640      	mov	r0, r8
 8003128:	4649      	mov	r1, r9
 800312a:	f04f 0200 	mov.w	r2, #0
 800312e:	f04f 0300 	mov.w	r3, #0
 8003132:	014b      	lsls	r3, r1, #5
 8003134:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003138:	0142      	lsls	r2, r0, #5
 800313a:	4610      	mov	r0, r2
 800313c:	4619      	mov	r1, r3
 800313e:	ebb0 0008 	subs.w	r0, r0, r8
 8003142:	eb61 0109 	sbc.w	r1, r1, r9
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	018b      	lsls	r3, r1, #6
 8003150:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003154:	0182      	lsls	r2, r0, #6
 8003156:	1a12      	subs	r2, r2, r0
 8003158:	eb63 0301 	sbc.w	r3, r3, r1
 800315c:	f04f 0000 	mov.w	r0, #0
 8003160:	f04f 0100 	mov.w	r1, #0
 8003164:	00d9      	lsls	r1, r3, #3
 8003166:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800316a:	00d0      	lsls	r0, r2, #3
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	eb12 0208 	adds.w	r2, r2, r8
 8003174:	eb43 0309 	adc.w	r3, r3, r9
 8003178:	f04f 0000 	mov.w	r0, #0
 800317c:	f04f 0100 	mov.w	r1, #0
 8003180:	0259      	lsls	r1, r3, #9
 8003182:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003186:	0250      	lsls	r0, r2, #9
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	4610      	mov	r0, r2
 800318e:	4619      	mov	r1, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	461a      	mov	r2, r3
 8003194:	f04f 0300 	mov.w	r3, #0
 8003198:	f7fd f8ba 	bl	8000310 <__aeabi_uldivmod>
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	4613      	mov	r3, r2
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	e04a      	b.n	800323c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031a6:	4b31      	ldr	r3, [pc, #196]	; (800326c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	099b      	lsrs	r3, r3, #6
 80031ac:	461a      	mov	r2, r3
 80031ae:	f04f 0300 	mov.w	r3, #0
 80031b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80031b6:	f04f 0100 	mov.w	r1, #0
 80031ba:	ea02 0400 	and.w	r4, r2, r0
 80031be:	ea03 0501 	and.w	r5, r3, r1
 80031c2:	4620      	mov	r0, r4
 80031c4:	4629      	mov	r1, r5
 80031c6:	f04f 0200 	mov.w	r2, #0
 80031ca:	f04f 0300 	mov.w	r3, #0
 80031ce:	014b      	lsls	r3, r1, #5
 80031d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80031d4:	0142      	lsls	r2, r0, #5
 80031d6:	4610      	mov	r0, r2
 80031d8:	4619      	mov	r1, r3
 80031da:	1b00      	subs	r0, r0, r4
 80031dc:	eb61 0105 	sbc.w	r1, r1, r5
 80031e0:	f04f 0200 	mov.w	r2, #0
 80031e4:	f04f 0300 	mov.w	r3, #0
 80031e8:	018b      	lsls	r3, r1, #6
 80031ea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80031ee:	0182      	lsls	r2, r0, #6
 80031f0:	1a12      	subs	r2, r2, r0
 80031f2:	eb63 0301 	sbc.w	r3, r3, r1
 80031f6:	f04f 0000 	mov.w	r0, #0
 80031fa:	f04f 0100 	mov.w	r1, #0
 80031fe:	00d9      	lsls	r1, r3, #3
 8003200:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003204:	00d0      	lsls	r0, r2, #3
 8003206:	4602      	mov	r2, r0
 8003208:	460b      	mov	r3, r1
 800320a:	1912      	adds	r2, r2, r4
 800320c:	eb45 0303 	adc.w	r3, r5, r3
 8003210:	f04f 0000 	mov.w	r0, #0
 8003214:	f04f 0100 	mov.w	r1, #0
 8003218:	0299      	lsls	r1, r3, #10
 800321a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800321e:	0290      	lsls	r0, r2, #10
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
 8003224:	4610      	mov	r0, r2
 8003226:	4619      	mov	r1, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	461a      	mov	r2, r3
 800322c:	f04f 0300 	mov.w	r3, #0
 8003230:	f7fd f86e 	bl	8000310 <__aeabi_uldivmod>
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	4613      	mov	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800323c:	4b0b      	ldr	r3, [pc, #44]	; (800326c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	0c1b      	lsrs	r3, r3, #16
 8003242:	f003 0303 	and.w	r3, r3, #3
 8003246:	3301      	adds	r3, #1
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	fbb2 f3f3 	udiv	r3, r2, r3
 8003254:	60bb      	str	r3, [r7, #8]
      break;
 8003256:	e002      	b.n	800325e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003258:	4b05      	ldr	r3, [pc, #20]	; (8003270 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800325a:	60bb      	str	r3, [r7, #8]
      break;
 800325c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800325e:	68bb      	ldr	r3, [r7, #8]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800326a:	bf00      	nop
 800326c:	40023800 	.word	0x40023800
 8003270:	00f42400 	.word	0x00f42400
 8003274:	007a1200 	.word	0x007a1200

08003278 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800327c:	4b03      	ldr	r3, [pc, #12]	; (800328c <HAL_RCC_GetHCLKFreq+0x14>)
 800327e:	681b      	ldr	r3, [r3, #0]
}
 8003280:	4618      	mov	r0, r3
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	20000000 	.word	0x20000000

08003290 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003294:	f7ff fff0 	bl	8003278 <HAL_RCC_GetHCLKFreq>
 8003298:	4602      	mov	r2, r0
 800329a:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	0a9b      	lsrs	r3, r3, #10
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	4903      	ldr	r1, [pc, #12]	; (80032b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032a6:	5ccb      	ldrb	r3, [r1, r3]
 80032a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40023800 	.word	0x40023800
 80032b4:	08019534 	.word	0x08019534

080032b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032bc:	f7ff ffdc 	bl	8003278 <HAL_RCC_GetHCLKFreq>
 80032c0:	4602      	mov	r2, r0
 80032c2:	4b05      	ldr	r3, [pc, #20]	; (80032d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	0b5b      	lsrs	r3, r3, #13
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	4903      	ldr	r1, [pc, #12]	; (80032dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ce:	5ccb      	ldrb	r3, [r1, r3]
 80032d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	40023800 	.word	0x40023800
 80032dc:	08019534 	.word	0x08019534

080032e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	220f      	movs	r2, #15
 80032ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80032f0:	4b12      	ldr	r3, [pc, #72]	; (800333c <HAL_RCC_GetClockConfig+0x5c>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 0203 	and.w	r2, r3, #3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80032fc:	4b0f      	ldr	r3, [pc, #60]	; (800333c <HAL_RCC_GetClockConfig+0x5c>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003308:	4b0c      	ldr	r3, [pc, #48]	; (800333c <HAL_RCC_GetClockConfig+0x5c>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003314:	4b09      	ldr	r3, [pc, #36]	; (800333c <HAL_RCC_GetClockConfig+0x5c>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	08db      	lsrs	r3, r3, #3
 800331a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003322:	4b07      	ldr	r3, [pc, #28]	; (8003340 <HAL_RCC_GetClockConfig+0x60>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 020f 	and.w	r2, r3, #15
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	601a      	str	r2, [r3, #0]
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	40023800 	.word	0x40023800
 8003340:	40023c00 	.word	0x40023c00

08003344 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b088      	sub	sp, #32
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800334c:	2300      	movs	r3, #0
 800334e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003350:	2300      	movs	r3, #0
 8003352:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003354:	2300      	movs	r3, #0
 8003356:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003358:	2300      	movs	r3, #0
 800335a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800335c:	2300      	movs	r3, #0
 800335e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	d012      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800336c:	4b69      	ldr	r3, [pc, #420]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	4a68      	ldr	r2, [pc, #416]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003372:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003376:	6093      	str	r3, [r2, #8]
 8003378:	4b66      	ldr	r3, [pc, #408]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003380:	4964      	ldr	r1, [pc, #400]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003382:	4313      	orrs	r3, r2
 8003384:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800338e:	2301      	movs	r3, #1
 8003390:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d017      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800339e:	4b5d      	ldr	r3, [pc, #372]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ac:	4959      	ldr	r1, [pc, #356]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033bc:	d101      	bne.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80033be:	2301      	movs	r3, #1
 80033c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80033ca:	2301      	movs	r3, #1
 80033cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d017      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033da:	4b4e      	ldr	r3, [pc, #312]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e8:	494a      	ldr	r1, [pc, #296]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033f8:	d101      	bne.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80033fa:	2301      	movs	r3, #1
 80033fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003406:	2301      	movs	r3, #1
 8003408:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003416:	2301      	movs	r3, #1
 8003418:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0320 	and.w	r3, r3, #32
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 808b 	beq.w	800353e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003428:	4b3a      	ldr	r3, [pc, #232]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	4a39      	ldr	r2, [pc, #228]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800342e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003432:	6413      	str	r3, [r2, #64]	; 0x40
 8003434:	4b37      	ldr	r3, [pc, #220]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343c:	60bb      	str	r3, [r7, #8]
 800343e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003440:	4b35      	ldr	r3, [pc, #212]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a34      	ldr	r2, [pc, #208]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800344a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800344c:	f7fd fddc 	bl	8001008 <HAL_GetTick>
 8003450:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003452:	e008      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003454:	f7fd fdd8 	bl	8001008 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b64      	cmp	r3, #100	; 0x64
 8003460:	d901      	bls.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e38f      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003466:	4b2c      	ldr	r3, [pc, #176]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0f0      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003472:	4b28      	ldr	r3, [pc, #160]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800347a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d035      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	429a      	cmp	r2, r3
 800348e:	d02e      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003490:	4b20      	ldr	r3, [pc, #128]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003498:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800349a:	4b1e      	ldr	r3, [pc, #120]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800349c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349e:	4a1d      	ldr	r2, [pc, #116]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034a6:	4b1b      	ldr	r3, [pc, #108]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034aa:	4a1a      	ldr	r2, [pc, #104]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80034b2:	4a18      	ldr	r2, [pc, #96]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80034b8:	4b16      	ldr	r3, [pc, #88]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d114      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c4:	f7fd fda0 	bl	8001008 <HAL_GetTick>
 80034c8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ca:	e00a      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034cc:	f7fd fd9c 	bl	8001008 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034da:	4293      	cmp	r3, r2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e351      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e2:	4b0c      	ldr	r3, [pc, #48]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0ee      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034fa:	d111      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80034fc:	4b05      	ldr	r3, [pc, #20]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003508:	4b04      	ldr	r3, [pc, #16]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800350a:	400b      	ands	r3, r1
 800350c:	4901      	ldr	r1, [pc, #4]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800350e:	4313      	orrs	r3, r2
 8003510:	608b      	str	r3, [r1, #8]
 8003512:	e00b      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003514:	40023800 	.word	0x40023800
 8003518:	40007000 	.word	0x40007000
 800351c:	0ffffcff 	.word	0x0ffffcff
 8003520:	4bb3      	ldr	r3, [pc, #716]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	4ab2      	ldr	r2, [pc, #712]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003526:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800352a:	6093      	str	r3, [r2, #8]
 800352c:	4bb0      	ldr	r3, [pc, #704]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800352e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003538:	49ad      	ldr	r1, [pc, #692]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800353a:	4313      	orrs	r3, r2
 800353c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0310 	and.w	r3, r3, #16
 8003546:	2b00      	cmp	r3, #0
 8003548:	d010      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800354a:	4ba9      	ldr	r3, [pc, #676]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800354c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003550:	4aa7      	ldr	r2, [pc, #668]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003552:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003556:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800355a:	4ba5      	ldr	r3, [pc, #660]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800355c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003564:	49a2      	ldr	r1, [pc, #648]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003566:	4313      	orrs	r3, r2
 8003568:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00a      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003578:	4b9d      	ldr	r3, [pc, #628]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800357a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800357e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003586:	499a      	ldr	r1, [pc, #616]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003588:	4313      	orrs	r3, r2
 800358a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00a      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800359a:	4b95      	ldr	r3, [pc, #596]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800359c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035a8:	4991      	ldr	r1, [pc, #580]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00a      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035bc:	4b8c      	ldr	r3, [pc, #560]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ca:	4989      	ldr	r1, [pc, #548]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00a      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035de:	4b84      	ldr	r3, [pc, #528]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ec:	4980      	ldr	r1, [pc, #512]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00a      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003600:	4b7b      	ldr	r3, [pc, #492]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003606:	f023 0203 	bic.w	r2, r3, #3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360e:	4978      	ldr	r1, [pc, #480]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003610:	4313      	orrs	r3, r2
 8003612:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00a      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003622:	4b73      	ldr	r3, [pc, #460]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003628:	f023 020c 	bic.w	r2, r3, #12
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003630:	496f      	ldr	r1, [pc, #444]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003632:	4313      	orrs	r3, r2
 8003634:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00a      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003644:	4b6a      	ldr	r3, [pc, #424]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800364a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003652:	4967      	ldr	r1, [pc, #412]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003654:	4313      	orrs	r3, r2
 8003656:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00a      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003666:	4b62      	ldr	r3, [pc, #392]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003674:	495e      	ldr	r1, [pc, #376]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003676:	4313      	orrs	r3, r2
 8003678:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00a      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003688:	4b59      	ldr	r3, [pc, #356]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800368a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003696:	4956      	ldr	r1, [pc, #344]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003698:	4313      	orrs	r3, r2
 800369a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80036aa:	4b51      	ldr	r3, [pc, #324]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b8:	494d      	ldr	r1, [pc, #308]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00a      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80036cc:	4b48      	ldr	r3, [pc, #288]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036da:	4945      	ldr	r1, [pc, #276]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00a      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80036ee:	4b40      	ldr	r3, [pc, #256]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036fc:	493c      	ldr	r1, [pc, #240]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00a      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003710:	4b37      	ldr	r3, [pc, #220]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003716:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800371e:	4934      	ldr	r1, [pc, #208]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003720:	4313      	orrs	r3, r2
 8003722:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d011      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003732:	4b2f      	ldr	r3, [pc, #188]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003738:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003740:	492b      	ldr	r1, [pc, #172]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003742:	4313      	orrs	r3, r2
 8003744:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800374c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003750:	d101      	bne.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003752:	2301      	movs	r3, #1
 8003754:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0308 	and.w	r3, r3, #8
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003762:	2301      	movs	r3, #1
 8003764:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00a      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003772:	4b1f      	ldr	r3, [pc, #124]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003778:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003780:	491b      	ldr	r1, [pc, #108]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003782:	4313      	orrs	r3, r2
 8003784:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00b      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003794:	4b16      	ldr	r3, [pc, #88]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037a4:	4912      	ldr	r1, [pc, #72]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00b      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80037b8:	4b0d      	ldr	r3, [pc, #52]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037be:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037c8:	4909      	ldr	r1, [pc, #36]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00f      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037dc:	4b04      	ldr	r3, [pc, #16]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037e2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ec:	e002      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80037ee:	bf00      	nop
 80037f0:	40023800 	.word	0x40023800
 80037f4:	4986      	ldr	r1, [pc, #536]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00b      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003808:	4b81      	ldr	r3, [pc, #516]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800380a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800380e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003818:	497d      	ldr	r1, [pc, #500]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800381a:	4313      	orrs	r3, r2
 800381c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d006      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	f000 80d6 	beq.w	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003834:	4b76      	ldr	r3, [pc, #472]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a75      	ldr	r2, [pc, #468]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800383a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800383e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003840:	f7fd fbe2 	bl	8001008 <HAL_GetTick>
 8003844:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003846:	e008      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003848:	f7fd fbde 	bl	8001008 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b64      	cmp	r3, #100	; 0x64
 8003854:	d901      	bls.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e195      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800385a:	4b6d      	ldr	r3, [pc, #436]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1f0      	bne.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d021      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003876:	2b00      	cmp	r3, #0
 8003878:	d11d      	bne.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800387a:	4b65      	ldr	r3, [pc, #404]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800387c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003880:	0c1b      	lsrs	r3, r3, #16
 8003882:	f003 0303 	and.w	r3, r3, #3
 8003886:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003888:	4b61      	ldr	r3, [pc, #388]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800388a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800388e:	0e1b      	lsrs	r3, r3, #24
 8003890:	f003 030f 	and.w	r3, r3, #15
 8003894:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	019a      	lsls	r2, r3, #6
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	041b      	lsls	r3, r3, #16
 80038a0:	431a      	orrs	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	061b      	lsls	r3, r3, #24
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	071b      	lsls	r3, r3, #28
 80038ae:	4958      	ldr	r1, [pc, #352]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d004      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038ca:	d00a      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d02e      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038e0:	d129      	bne.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80038e2:	4b4b      	ldr	r3, [pc, #300]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038e8:	0c1b      	lsrs	r3, r3, #16
 80038ea:	f003 0303 	and.w	r3, r3, #3
 80038ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80038f0:	4b47      	ldr	r3, [pc, #284]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038f6:	0f1b      	lsrs	r3, r3, #28
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	019a      	lsls	r2, r3, #6
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	041b      	lsls	r3, r3, #16
 8003908:	431a      	orrs	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	061b      	lsls	r3, r3, #24
 8003910:	431a      	orrs	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	071b      	lsls	r3, r3, #28
 8003916:	493e      	ldr	r1, [pc, #248]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003918:	4313      	orrs	r3, r2
 800391a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800391e:	4b3c      	ldr	r3, [pc, #240]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003920:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003924:	f023 021f 	bic.w	r2, r3, #31
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	3b01      	subs	r3, #1
 800392e:	4938      	ldr	r1, [pc, #224]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003930:	4313      	orrs	r3, r2
 8003932:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d01d      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003942:	4b33      	ldr	r3, [pc, #204]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003944:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003948:	0e1b      	lsrs	r3, r3, #24
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003950:	4b2f      	ldr	r3, [pc, #188]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003956:	0f1b      	lsrs	r3, r3, #28
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	019a      	lsls	r2, r3, #6
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	041b      	lsls	r3, r3, #16
 800396a:	431a      	orrs	r2, r3
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	061b      	lsls	r3, r3, #24
 8003970:	431a      	orrs	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	071b      	lsls	r3, r3, #28
 8003976:	4926      	ldr	r1, [pc, #152]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003978:	4313      	orrs	r3, r2
 800397a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d011      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	019a      	lsls	r2, r3, #6
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	041b      	lsls	r3, r3, #16
 8003996:	431a      	orrs	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	061b      	lsls	r3, r3, #24
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	071b      	lsls	r3, r3, #28
 80039a6:	491a      	ldr	r1, [pc, #104]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80039ae:	4b18      	ldr	r3, [pc, #96]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a17      	ldr	r2, [pc, #92]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ba:	f7fd fb25 	bl	8001008 <HAL_GetTick>
 80039be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039c0:	e008      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039c2:	f7fd fb21 	bl	8001008 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b64      	cmp	r3, #100	; 0x64
 80039ce:	d901      	bls.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e0d8      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039d4:	4b0e      	ldr	r3, [pc, #56]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0f0      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	f040 80ce 	bne.w	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80039e8:	4b09      	ldr	r3, [pc, #36]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a08      	ldr	r2, [pc, #32]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039f4:	f7fd fb08 	bl	8001008 <HAL_GetTick>
 80039f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80039fa:	e00b      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039fc:	f7fd fb04 	bl	8001008 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b64      	cmp	r3, #100	; 0x64
 8003a08:	d904      	bls.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e0bb      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003a0e:	bf00      	nop
 8003a10:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a14:	4b5e      	ldr	r3, [pc, #376]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a20:	d0ec      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d009      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d02e      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d12a      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a4a:	4b51      	ldr	r3, [pc, #324]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a50:	0c1b      	lsrs	r3, r3, #16
 8003a52:	f003 0303 	and.w	r3, r3, #3
 8003a56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a58:	4b4d      	ldr	r3, [pc, #308]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5e:	0f1b      	lsrs	r3, r3, #28
 8003a60:	f003 0307 	and.w	r3, r3, #7
 8003a64:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	019a      	lsls	r2, r3, #6
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	041b      	lsls	r3, r3, #16
 8003a70:	431a      	orrs	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	061b      	lsls	r3, r3, #24
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	071b      	lsls	r3, r3, #28
 8003a7e:	4944      	ldr	r1, [pc, #272]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003a86:	4b42      	ldr	r3, [pc, #264]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a8c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a94:	3b01      	subs	r3, #1
 8003a96:	021b      	lsls	r3, r3, #8
 8003a98:	493d      	ldr	r1, [pc, #244]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d022      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ab0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ab4:	d11d      	bne.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ab6:	4b36      	ldr	r3, [pc, #216]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003abc:	0e1b      	lsrs	r3, r3, #24
 8003abe:	f003 030f 	and.w	r3, r3, #15
 8003ac2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ac4:	4b32      	ldr	r3, [pc, #200]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aca:	0f1b      	lsrs	r3, r3, #28
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	019a      	lsls	r2, r3, #6
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	041b      	lsls	r3, r3, #16
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	061b      	lsls	r3, r3, #24
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	071b      	lsls	r3, r3, #28
 8003aea:	4929      	ldr	r1, [pc, #164]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d028      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003afe:	4b24      	ldr	r3, [pc, #144]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b04:	0e1b      	lsrs	r3, r3, #24
 8003b06:	f003 030f 	and.w	r3, r3, #15
 8003b0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b0c:	4b20      	ldr	r3, [pc, #128]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b12:	0c1b      	lsrs	r3, r3, #16
 8003b14:	f003 0303 	and.w	r3, r3, #3
 8003b18:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	019a      	lsls	r2, r3, #6
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	041b      	lsls	r3, r3, #16
 8003b24:	431a      	orrs	r2, r3
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	061b      	lsls	r3, r3, #24
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	071b      	lsls	r3, r3, #28
 8003b32:	4917      	ldr	r1, [pc, #92]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003b3a:	4b15      	ldr	r3, [pc, #84]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b48:	4911      	ldr	r1, [pc, #68]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003b50:	4b0f      	ldr	r3, [pc, #60]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a0e      	ldr	r2, [pc, #56]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b5c:	f7fd fa54 	bl	8001008 <HAL_GetTick>
 8003b60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b62:	e008      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b64:	f7fd fa50 	bl	8001008 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b64      	cmp	r3, #100	; 0x64
 8003b70:	d901      	bls.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e007      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b76:	4b06      	ldr	r3, [pc, #24]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b82:	d1ef      	bne.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3720      	adds	r7, #32
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40023800 	.word	0x40023800

08003b94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e049      	b.n	8003c3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d106      	bne.n	8003bc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f841 	bl	8003c42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	3304      	adds	r3, #4
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	4610      	mov	r0, r2
 8003bd4:	f000 fa00 	bl	8003fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
	...

08003c58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d001      	beq.n	8003c70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e054      	b.n	8003d1a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0201 	orr.w	r2, r2, #1
 8003c86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a26      	ldr	r2, [pc, #152]	; (8003d28 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d022      	beq.n	8003cd8 <HAL_TIM_Base_Start_IT+0x80>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c9a:	d01d      	beq.n	8003cd8 <HAL_TIM_Base_Start_IT+0x80>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a22      	ldr	r2, [pc, #136]	; (8003d2c <HAL_TIM_Base_Start_IT+0xd4>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d018      	beq.n	8003cd8 <HAL_TIM_Base_Start_IT+0x80>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a21      	ldr	r2, [pc, #132]	; (8003d30 <HAL_TIM_Base_Start_IT+0xd8>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d013      	beq.n	8003cd8 <HAL_TIM_Base_Start_IT+0x80>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a1f      	ldr	r2, [pc, #124]	; (8003d34 <HAL_TIM_Base_Start_IT+0xdc>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d00e      	beq.n	8003cd8 <HAL_TIM_Base_Start_IT+0x80>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a1e      	ldr	r2, [pc, #120]	; (8003d38 <HAL_TIM_Base_Start_IT+0xe0>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d009      	beq.n	8003cd8 <HAL_TIM_Base_Start_IT+0x80>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a1c      	ldr	r2, [pc, #112]	; (8003d3c <HAL_TIM_Base_Start_IT+0xe4>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d004      	beq.n	8003cd8 <HAL_TIM_Base_Start_IT+0x80>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a1b      	ldr	r2, [pc, #108]	; (8003d40 <HAL_TIM_Base_Start_IT+0xe8>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d115      	bne.n	8003d04 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689a      	ldr	r2, [r3, #8]
 8003cde:	4b19      	ldr	r3, [pc, #100]	; (8003d44 <HAL_TIM_Base_Start_IT+0xec>)
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2b06      	cmp	r3, #6
 8003ce8:	d015      	beq.n	8003d16 <HAL_TIM_Base_Start_IT+0xbe>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf0:	d011      	beq.n	8003d16 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f042 0201 	orr.w	r2, r2, #1
 8003d00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d02:	e008      	b.n	8003d16 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0201 	orr.w	r2, r2, #1
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	e000      	b.n	8003d18 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3714      	adds	r7, #20
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	40010000 	.word	0x40010000
 8003d2c:	40000400 	.word	0x40000400
 8003d30:	40000800 	.word	0x40000800
 8003d34:	40000c00 	.word	0x40000c00
 8003d38:	40010400 	.word	0x40010400
 8003d3c:	40014000 	.word	0x40014000
 8003d40:	40001800 	.word	0x40001800
 8003d44:	00010007 	.word	0x00010007

08003d48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d122      	bne.n	8003da4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d11b      	bne.n	8003da4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f06f 0202 	mvn.w	r2, #2
 8003d74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f905 	bl	8003f9a <HAL_TIM_IC_CaptureCallback>
 8003d90:	e005      	b.n	8003d9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f8f7 	bl	8003f86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f908 	bl	8003fae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	f003 0304 	and.w	r3, r3, #4
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d122      	bne.n	8003df8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f003 0304 	and.w	r3, r3, #4
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	d11b      	bne.n	8003df8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f06f 0204 	mvn.w	r2, #4
 8003dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2202      	movs	r2, #2
 8003dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f8db 	bl	8003f9a <HAL_TIM_IC_CaptureCallback>
 8003de4:	e005      	b.n	8003df2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f8cd 	bl	8003f86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 f8de 	bl	8003fae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d122      	bne.n	8003e4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	f003 0308 	and.w	r3, r3, #8
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d11b      	bne.n	8003e4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f06f 0208 	mvn.w	r2, #8
 8003e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2204      	movs	r2, #4
 8003e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f8b1 	bl	8003f9a <HAL_TIM_IC_CaptureCallback>
 8003e38:	e005      	b.n	8003e46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f8a3 	bl	8003f86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f8b4 	bl	8003fae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	f003 0310 	and.w	r3, r3, #16
 8003e56:	2b10      	cmp	r3, #16
 8003e58:	d122      	bne.n	8003ea0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	f003 0310 	and.w	r3, r3, #16
 8003e64:	2b10      	cmp	r3, #16
 8003e66:	d11b      	bne.n	8003ea0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f06f 0210 	mvn.w	r2, #16
 8003e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2208      	movs	r2, #8
 8003e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f887 	bl	8003f9a <HAL_TIM_IC_CaptureCallback>
 8003e8c:	e005      	b.n	8003e9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f879 	bl	8003f86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 f88a 	bl	8003fae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d10e      	bne.n	8003ecc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d107      	bne.n	8003ecc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f06f 0201 	mvn.w	r2, #1
 8003ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7fc fe72 	bl	8000bb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed6:	2b80      	cmp	r3, #128	; 0x80
 8003ed8:	d10e      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee4:	2b80      	cmp	r3, #128	; 0x80
 8003ee6:	d107      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f91a 	bl	800412c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f06:	d10e      	bne.n	8003f26 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f12:	2b80      	cmp	r3, #128	; 0x80
 8003f14:	d107      	bne.n	8003f26 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f90d 	bl	8004140 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f30:	2b40      	cmp	r3, #64	; 0x40
 8003f32:	d10e      	bne.n	8003f52 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3e:	2b40      	cmp	r3, #64	; 0x40
 8003f40:	d107      	bne.n	8003f52 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f838 	bl	8003fc2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	f003 0320 	and.w	r3, r3, #32
 8003f5c:	2b20      	cmp	r3, #32
 8003f5e:	d10e      	bne.n	8003f7e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	f003 0320 	and.w	r3, r3, #32
 8003f6a:	2b20      	cmp	r3, #32
 8003f6c:	d107      	bne.n	8003f7e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f06f 0220 	mvn.w	r2, #32
 8003f76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 f8cd 	bl	8004118 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f7e:	bf00      	nop
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
	...

08003fd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a40      	ldr	r2, [pc, #256]	; (80040ec <TIM_Base_SetConfig+0x114>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d013      	beq.n	8004018 <TIM_Base_SetConfig+0x40>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff6:	d00f      	beq.n	8004018 <TIM_Base_SetConfig+0x40>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a3d      	ldr	r2, [pc, #244]	; (80040f0 <TIM_Base_SetConfig+0x118>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d00b      	beq.n	8004018 <TIM_Base_SetConfig+0x40>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a3c      	ldr	r2, [pc, #240]	; (80040f4 <TIM_Base_SetConfig+0x11c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d007      	beq.n	8004018 <TIM_Base_SetConfig+0x40>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a3b      	ldr	r2, [pc, #236]	; (80040f8 <TIM_Base_SetConfig+0x120>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d003      	beq.n	8004018 <TIM_Base_SetConfig+0x40>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a3a      	ldr	r2, [pc, #232]	; (80040fc <TIM_Base_SetConfig+0x124>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d108      	bne.n	800402a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800401e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	4313      	orrs	r3, r2
 8004028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a2f      	ldr	r2, [pc, #188]	; (80040ec <TIM_Base_SetConfig+0x114>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d02b      	beq.n	800408a <TIM_Base_SetConfig+0xb2>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004038:	d027      	beq.n	800408a <TIM_Base_SetConfig+0xb2>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a2c      	ldr	r2, [pc, #176]	; (80040f0 <TIM_Base_SetConfig+0x118>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d023      	beq.n	800408a <TIM_Base_SetConfig+0xb2>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a2b      	ldr	r2, [pc, #172]	; (80040f4 <TIM_Base_SetConfig+0x11c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d01f      	beq.n	800408a <TIM_Base_SetConfig+0xb2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a2a      	ldr	r2, [pc, #168]	; (80040f8 <TIM_Base_SetConfig+0x120>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d01b      	beq.n	800408a <TIM_Base_SetConfig+0xb2>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a29      	ldr	r2, [pc, #164]	; (80040fc <TIM_Base_SetConfig+0x124>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d017      	beq.n	800408a <TIM_Base_SetConfig+0xb2>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a28      	ldr	r2, [pc, #160]	; (8004100 <TIM_Base_SetConfig+0x128>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d013      	beq.n	800408a <TIM_Base_SetConfig+0xb2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a27      	ldr	r2, [pc, #156]	; (8004104 <TIM_Base_SetConfig+0x12c>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d00f      	beq.n	800408a <TIM_Base_SetConfig+0xb2>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a26      	ldr	r2, [pc, #152]	; (8004108 <TIM_Base_SetConfig+0x130>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d00b      	beq.n	800408a <TIM_Base_SetConfig+0xb2>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a25      	ldr	r2, [pc, #148]	; (800410c <TIM_Base_SetConfig+0x134>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d007      	beq.n	800408a <TIM_Base_SetConfig+0xb2>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a24      	ldr	r2, [pc, #144]	; (8004110 <TIM_Base_SetConfig+0x138>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d003      	beq.n	800408a <TIM_Base_SetConfig+0xb2>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a23      	ldr	r2, [pc, #140]	; (8004114 <TIM_Base_SetConfig+0x13c>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d108      	bne.n	800409c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004090:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	4313      	orrs	r3, r2
 800409a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a0a      	ldr	r2, [pc, #40]	; (80040ec <TIM_Base_SetConfig+0x114>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d003      	beq.n	80040d0 <TIM_Base_SetConfig+0xf8>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a0c      	ldr	r2, [pc, #48]	; (80040fc <TIM_Base_SetConfig+0x124>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d103      	bne.n	80040d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	691a      	ldr	r2, [r3, #16]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	615a      	str	r2, [r3, #20]
}
 80040de:	bf00      	nop
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	40010000 	.word	0x40010000
 80040f0:	40000400 	.word	0x40000400
 80040f4:	40000800 	.word	0x40000800
 80040f8:	40000c00 	.word	0x40000c00
 80040fc:	40010400 	.word	0x40010400
 8004100:	40014000 	.word	0x40014000
 8004104:	40014400 	.word	0x40014400
 8004108:	40014800 	.word	0x40014800
 800410c:	40001800 	.word	0x40001800
 8004110:	40001c00 	.word	0x40001c00
 8004114:	40002000 	.word	0x40002000

08004118 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e040      	b.n	80041e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800416a:	2b00      	cmp	r3, #0
 800416c:	d106      	bne.n	800417c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7fc fd5a 	bl	8000c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2224      	movs	r2, #36	; 0x24
 8004180:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0201 	bic.w	r2, r2, #1
 8004190:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f82c 	bl	80041f0 <UART_SetConfig>
 8004198:	4603      	mov	r3, r0
 800419a:	2b01      	cmp	r3, #1
 800419c:	d101      	bne.n	80041a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e022      	b.n	80041e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d002      	beq.n	80041b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 fa82 	bl	80046b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f042 0201 	orr.w	r2, r2, #1
 80041de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 fb09 	bl	80047f8 <UART_CheckIdleState>
 80041e6:	4603      	mov	r3, r0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3708      	adds	r7, #8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b088      	sub	sp, #32
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041f8:	2300      	movs	r3, #0
 80041fa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689a      	ldr	r2, [r3, #8]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	431a      	orrs	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	431a      	orrs	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	69db      	ldr	r3, [r3, #28]
 8004210:	4313      	orrs	r3, r2
 8004212:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	4ba7      	ldr	r3, [pc, #668]	; (80044b8 <UART_SetConfig+0x2c8>)
 800421c:	4013      	ands	r3, r2
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	6812      	ldr	r2, [r2, #0]
 8004222:	6979      	ldr	r1, [r7, #20]
 8004224:	430b      	orrs	r3, r1
 8004226:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	430a      	orrs	r2, r1
 8004260:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a95      	ldr	r2, [pc, #596]	; (80044bc <UART_SetConfig+0x2cc>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d120      	bne.n	80042ae <UART_SetConfig+0xbe>
 800426c:	4b94      	ldr	r3, [pc, #592]	; (80044c0 <UART_SetConfig+0x2d0>)
 800426e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004272:	f003 0303 	and.w	r3, r3, #3
 8004276:	2b03      	cmp	r3, #3
 8004278:	d816      	bhi.n	80042a8 <UART_SetConfig+0xb8>
 800427a:	a201      	add	r2, pc, #4	; (adr r2, 8004280 <UART_SetConfig+0x90>)
 800427c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004280:	08004291 	.word	0x08004291
 8004284:	0800429d 	.word	0x0800429d
 8004288:	08004297 	.word	0x08004297
 800428c:	080042a3 	.word	0x080042a3
 8004290:	2301      	movs	r3, #1
 8004292:	77fb      	strb	r3, [r7, #31]
 8004294:	e14f      	b.n	8004536 <UART_SetConfig+0x346>
 8004296:	2302      	movs	r3, #2
 8004298:	77fb      	strb	r3, [r7, #31]
 800429a:	e14c      	b.n	8004536 <UART_SetConfig+0x346>
 800429c:	2304      	movs	r3, #4
 800429e:	77fb      	strb	r3, [r7, #31]
 80042a0:	e149      	b.n	8004536 <UART_SetConfig+0x346>
 80042a2:	2308      	movs	r3, #8
 80042a4:	77fb      	strb	r3, [r7, #31]
 80042a6:	e146      	b.n	8004536 <UART_SetConfig+0x346>
 80042a8:	2310      	movs	r3, #16
 80042aa:	77fb      	strb	r3, [r7, #31]
 80042ac:	e143      	b.n	8004536 <UART_SetConfig+0x346>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a84      	ldr	r2, [pc, #528]	; (80044c4 <UART_SetConfig+0x2d4>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d132      	bne.n	800431e <UART_SetConfig+0x12e>
 80042b8:	4b81      	ldr	r3, [pc, #516]	; (80044c0 <UART_SetConfig+0x2d0>)
 80042ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042be:	f003 030c 	and.w	r3, r3, #12
 80042c2:	2b0c      	cmp	r3, #12
 80042c4:	d828      	bhi.n	8004318 <UART_SetConfig+0x128>
 80042c6:	a201      	add	r2, pc, #4	; (adr r2, 80042cc <UART_SetConfig+0xdc>)
 80042c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042cc:	08004301 	.word	0x08004301
 80042d0:	08004319 	.word	0x08004319
 80042d4:	08004319 	.word	0x08004319
 80042d8:	08004319 	.word	0x08004319
 80042dc:	0800430d 	.word	0x0800430d
 80042e0:	08004319 	.word	0x08004319
 80042e4:	08004319 	.word	0x08004319
 80042e8:	08004319 	.word	0x08004319
 80042ec:	08004307 	.word	0x08004307
 80042f0:	08004319 	.word	0x08004319
 80042f4:	08004319 	.word	0x08004319
 80042f8:	08004319 	.word	0x08004319
 80042fc:	08004313 	.word	0x08004313
 8004300:	2300      	movs	r3, #0
 8004302:	77fb      	strb	r3, [r7, #31]
 8004304:	e117      	b.n	8004536 <UART_SetConfig+0x346>
 8004306:	2302      	movs	r3, #2
 8004308:	77fb      	strb	r3, [r7, #31]
 800430a:	e114      	b.n	8004536 <UART_SetConfig+0x346>
 800430c:	2304      	movs	r3, #4
 800430e:	77fb      	strb	r3, [r7, #31]
 8004310:	e111      	b.n	8004536 <UART_SetConfig+0x346>
 8004312:	2308      	movs	r3, #8
 8004314:	77fb      	strb	r3, [r7, #31]
 8004316:	e10e      	b.n	8004536 <UART_SetConfig+0x346>
 8004318:	2310      	movs	r3, #16
 800431a:	77fb      	strb	r3, [r7, #31]
 800431c:	e10b      	b.n	8004536 <UART_SetConfig+0x346>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a69      	ldr	r2, [pc, #420]	; (80044c8 <UART_SetConfig+0x2d8>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d120      	bne.n	800436a <UART_SetConfig+0x17a>
 8004328:	4b65      	ldr	r3, [pc, #404]	; (80044c0 <UART_SetConfig+0x2d0>)
 800432a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004332:	2b30      	cmp	r3, #48	; 0x30
 8004334:	d013      	beq.n	800435e <UART_SetConfig+0x16e>
 8004336:	2b30      	cmp	r3, #48	; 0x30
 8004338:	d814      	bhi.n	8004364 <UART_SetConfig+0x174>
 800433a:	2b20      	cmp	r3, #32
 800433c:	d009      	beq.n	8004352 <UART_SetConfig+0x162>
 800433e:	2b20      	cmp	r3, #32
 8004340:	d810      	bhi.n	8004364 <UART_SetConfig+0x174>
 8004342:	2b00      	cmp	r3, #0
 8004344:	d002      	beq.n	800434c <UART_SetConfig+0x15c>
 8004346:	2b10      	cmp	r3, #16
 8004348:	d006      	beq.n	8004358 <UART_SetConfig+0x168>
 800434a:	e00b      	b.n	8004364 <UART_SetConfig+0x174>
 800434c:	2300      	movs	r3, #0
 800434e:	77fb      	strb	r3, [r7, #31]
 8004350:	e0f1      	b.n	8004536 <UART_SetConfig+0x346>
 8004352:	2302      	movs	r3, #2
 8004354:	77fb      	strb	r3, [r7, #31]
 8004356:	e0ee      	b.n	8004536 <UART_SetConfig+0x346>
 8004358:	2304      	movs	r3, #4
 800435a:	77fb      	strb	r3, [r7, #31]
 800435c:	e0eb      	b.n	8004536 <UART_SetConfig+0x346>
 800435e:	2308      	movs	r3, #8
 8004360:	77fb      	strb	r3, [r7, #31]
 8004362:	e0e8      	b.n	8004536 <UART_SetConfig+0x346>
 8004364:	2310      	movs	r3, #16
 8004366:	77fb      	strb	r3, [r7, #31]
 8004368:	e0e5      	b.n	8004536 <UART_SetConfig+0x346>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a57      	ldr	r2, [pc, #348]	; (80044cc <UART_SetConfig+0x2dc>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d120      	bne.n	80043b6 <UART_SetConfig+0x1c6>
 8004374:	4b52      	ldr	r3, [pc, #328]	; (80044c0 <UART_SetConfig+0x2d0>)
 8004376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800437a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800437e:	2bc0      	cmp	r3, #192	; 0xc0
 8004380:	d013      	beq.n	80043aa <UART_SetConfig+0x1ba>
 8004382:	2bc0      	cmp	r3, #192	; 0xc0
 8004384:	d814      	bhi.n	80043b0 <UART_SetConfig+0x1c0>
 8004386:	2b80      	cmp	r3, #128	; 0x80
 8004388:	d009      	beq.n	800439e <UART_SetConfig+0x1ae>
 800438a:	2b80      	cmp	r3, #128	; 0x80
 800438c:	d810      	bhi.n	80043b0 <UART_SetConfig+0x1c0>
 800438e:	2b00      	cmp	r3, #0
 8004390:	d002      	beq.n	8004398 <UART_SetConfig+0x1a8>
 8004392:	2b40      	cmp	r3, #64	; 0x40
 8004394:	d006      	beq.n	80043a4 <UART_SetConfig+0x1b4>
 8004396:	e00b      	b.n	80043b0 <UART_SetConfig+0x1c0>
 8004398:	2300      	movs	r3, #0
 800439a:	77fb      	strb	r3, [r7, #31]
 800439c:	e0cb      	b.n	8004536 <UART_SetConfig+0x346>
 800439e:	2302      	movs	r3, #2
 80043a0:	77fb      	strb	r3, [r7, #31]
 80043a2:	e0c8      	b.n	8004536 <UART_SetConfig+0x346>
 80043a4:	2304      	movs	r3, #4
 80043a6:	77fb      	strb	r3, [r7, #31]
 80043a8:	e0c5      	b.n	8004536 <UART_SetConfig+0x346>
 80043aa:	2308      	movs	r3, #8
 80043ac:	77fb      	strb	r3, [r7, #31]
 80043ae:	e0c2      	b.n	8004536 <UART_SetConfig+0x346>
 80043b0:	2310      	movs	r3, #16
 80043b2:	77fb      	strb	r3, [r7, #31]
 80043b4:	e0bf      	b.n	8004536 <UART_SetConfig+0x346>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a45      	ldr	r2, [pc, #276]	; (80044d0 <UART_SetConfig+0x2e0>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d125      	bne.n	800440c <UART_SetConfig+0x21c>
 80043c0:	4b3f      	ldr	r3, [pc, #252]	; (80044c0 <UART_SetConfig+0x2d0>)
 80043c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043ce:	d017      	beq.n	8004400 <UART_SetConfig+0x210>
 80043d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043d4:	d817      	bhi.n	8004406 <UART_SetConfig+0x216>
 80043d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043da:	d00b      	beq.n	80043f4 <UART_SetConfig+0x204>
 80043dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043e0:	d811      	bhi.n	8004406 <UART_SetConfig+0x216>
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <UART_SetConfig+0x1fe>
 80043e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043ea:	d006      	beq.n	80043fa <UART_SetConfig+0x20a>
 80043ec:	e00b      	b.n	8004406 <UART_SetConfig+0x216>
 80043ee:	2300      	movs	r3, #0
 80043f0:	77fb      	strb	r3, [r7, #31]
 80043f2:	e0a0      	b.n	8004536 <UART_SetConfig+0x346>
 80043f4:	2302      	movs	r3, #2
 80043f6:	77fb      	strb	r3, [r7, #31]
 80043f8:	e09d      	b.n	8004536 <UART_SetConfig+0x346>
 80043fa:	2304      	movs	r3, #4
 80043fc:	77fb      	strb	r3, [r7, #31]
 80043fe:	e09a      	b.n	8004536 <UART_SetConfig+0x346>
 8004400:	2308      	movs	r3, #8
 8004402:	77fb      	strb	r3, [r7, #31]
 8004404:	e097      	b.n	8004536 <UART_SetConfig+0x346>
 8004406:	2310      	movs	r3, #16
 8004408:	77fb      	strb	r3, [r7, #31]
 800440a:	e094      	b.n	8004536 <UART_SetConfig+0x346>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a30      	ldr	r2, [pc, #192]	; (80044d4 <UART_SetConfig+0x2e4>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d125      	bne.n	8004462 <UART_SetConfig+0x272>
 8004416:	4b2a      	ldr	r3, [pc, #168]	; (80044c0 <UART_SetConfig+0x2d0>)
 8004418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004420:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004424:	d017      	beq.n	8004456 <UART_SetConfig+0x266>
 8004426:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800442a:	d817      	bhi.n	800445c <UART_SetConfig+0x26c>
 800442c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004430:	d00b      	beq.n	800444a <UART_SetConfig+0x25a>
 8004432:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004436:	d811      	bhi.n	800445c <UART_SetConfig+0x26c>
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <UART_SetConfig+0x254>
 800443c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004440:	d006      	beq.n	8004450 <UART_SetConfig+0x260>
 8004442:	e00b      	b.n	800445c <UART_SetConfig+0x26c>
 8004444:	2301      	movs	r3, #1
 8004446:	77fb      	strb	r3, [r7, #31]
 8004448:	e075      	b.n	8004536 <UART_SetConfig+0x346>
 800444a:	2302      	movs	r3, #2
 800444c:	77fb      	strb	r3, [r7, #31]
 800444e:	e072      	b.n	8004536 <UART_SetConfig+0x346>
 8004450:	2304      	movs	r3, #4
 8004452:	77fb      	strb	r3, [r7, #31]
 8004454:	e06f      	b.n	8004536 <UART_SetConfig+0x346>
 8004456:	2308      	movs	r3, #8
 8004458:	77fb      	strb	r3, [r7, #31]
 800445a:	e06c      	b.n	8004536 <UART_SetConfig+0x346>
 800445c:	2310      	movs	r3, #16
 800445e:	77fb      	strb	r3, [r7, #31]
 8004460:	e069      	b.n	8004536 <UART_SetConfig+0x346>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a1c      	ldr	r2, [pc, #112]	; (80044d8 <UART_SetConfig+0x2e8>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d137      	bne.n	80044dc <UART_SetConfig+0x2ec>
 800446c:	4b14      	ldr	r3, [pc, #80]	; (80044c0 <UART_SetConfig+0x2d0>)
 800446e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004472:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004476:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800447a:	d017      	beq.n	80044ac <UART_SetConfig+0x2bc>
 800447c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004480:	d817      	bhi.n	80044b2 <UART_SetConfig+0x2c2>
 8004482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004486:	d00b      	beq.n	80044a0 <UART_SetConfig+0x2b0>
 8004488:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800448c:	d811      	bhi.n	80044b2 <UART_SetConfig+0x2c2>
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <UART_SetConfig+0x2aa>
 8004492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004496:	d006      	beq.n	80044a6 <UART_SetConfig+0x2b6>
 8004498:	e00b      	b.n	80044b2 <UART_SetConfig+0x2c2>
 800449a:	2300      	movs	r3, #0
 800449c:	77fb      	strb	r3, [r7, #31]
 800449e:	e04a      	b.n	8004536 <UART_SetConfig+0x346>
 80044a0:	2302      	movs	r3, #2
 80044a2:	77fb      	strb	r3, [r7, #31]
 80044a4:	e047      	b.n	8004536 <UART_SetConfig+0x346>
 80044a6:	2304      	movs	r3, #4
 80044a8:	77fb      	strb	r3, [r7, #31]
 80044aa:	e044      	b.n	8004536 <UART_SetConfig+0x346>
 80044ac:	2308      	movs	r3, #8
 80044ae:	77fb      	strb	r3, [r7, #31]
 80044b0:	e041      	b.n	8004536 <UART_SetConfig+0x346>
 80044b2:	2310      	movs	r3, #16
 80044b4:	77fb      	strb	r3, [r7, #31]
 80044b6:	e03e      	b.n	8004536 <UART_SetConfig+0x346>
 80044b8:	efff69f3 	.word	0xefff69f3
 80044bc:	40011000 	.word	0x40011000
 80044c0:	40023800 	.word	0x40023800
 80044c4:	40004400 	.word	0x40004400
 80044c8:	40004800 	.word	0x40004800
 80044cc:	40004c00 	.word	0x40004c00
 80044d0:	40005000 	.word	0x40005000
 80044d4:	40011400 	.word	0x40011400
 80044d8:	40007800 	.word	0x40007800
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a71      	ldr	r2, [pc, #452]	; (80046a8 <UART_SetConfig+0x4b8>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d125      	bne.n	8004532 <UART_SetConfig+0x342>
 80044e6:	4b71      	ldr	r3, [pc, #452]	; (80046ac <UART_SetConfig+0x4bc>)
 80044e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80044f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80044f4:	d017      	beq.n	8004526 <UART_SetConfig+0x336>
 80044f6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80044fa:	d817      	bhi.n	800452c <UART_SetConfig+0x33c>
 80044fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004500:	d00b      	beq.n	800451a <UART_SetConfig+0x32a>
 8004502:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004506:	d811      	bhi.n	800452c <UART_SetConfig+0x33c>
 8004508:	2b00      	cmp	r3, #0
 800450a:	d003      	beq.n	8004514 <UART_SetConfig+0x324>
 800450c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004510:	d006      	beq.n	8004520 <UART_SetConfig+0x330>
 8004512:	e00b      	b.n	800452c <UART_SetConfig+0x33c>
 8004514:	2300      	movs	r3, #0
 8004516:	77fb      	strb	r3, [r7, #31]
 8004518:	e00d      	b.n	8004536 <UART_SetConfig+0x346>
 800451a:	2302      	movs	r3, #2
 800451c:	77fb      	strb	r3, [r7, #31]
 800451e:	e00a      	b.n	8004536 <UART_SetConfig+0x346>
 8004520:	2304      	movs	r3, #4
 8004522:	77fb      	strb	r3, [r7, #31]
 8004524:	e007      	b.n	8004536 <UART_SetConfig+0x346>
 8004526:	2308      	movs	r3, #8
 8004528:	77fb      	strb	r3, [r7, #31]
 800452a:	e004      	b.n	8004536 <UART_SetConfig+0x346>
 800452c:	2310      	movs	r3, #16
 800452e:	77fb      	strb	r3, [r7, #31]
 8004530:	e001      	b.n	8004536 <UART_SetConfig+0x346>
 8004532:	2310      	movs	r3, #16
 8004534:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800453e:	d15b      	bne.n	80045f8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004540:	7ffb      	ldrb	r3, [r7, #31]
 8004542:	2b08      	cmp	r3, #8
 8004544:	d827      	bhi.n	8004596 <UART_SetConfig+0x3a6>
 8004546:	a201      	add	r2, pc, #4	; (adr r2, 800454c <UART_SetConfig+0x35c>)
 8004548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454c:	08004571 	.word	0x08004571
 8004550:	08004579 	.word	0x08004579
 8004554:	08004581 	.word	0x08004581
 8004558:	08004597 	.word	0x08004597
 800455c:	08004587 	.word	0x08004587
 8004560:	08004597 	.word	0x08004597
 8004564:	08004597 	.word	0x08004597
 8004568:	08004597 	.word	0x08004597
 800456c:	0800458f 	.word	0x0800458f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004570:	f7fe fe8e 	bl	8003290 <HAL_RCC_GetPCLK1Freq>
 8004574:	61b8      	str	r0, [r7, #24]
        break;
 8004576:	e013      	b.n	80045a0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004578:	f7fe fe9e 	bl	80032b8 <HAL_RCC_GetPCLK2Freq>
 800457c:	61b8      	str	r0, [r7, #24]
        break;
 800457e:	e00f      	b.n	80045a0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004580:	4b4b      	ldr	r3, [pc, #300]	; (80046b0 <UART_SetConfig+0x4c0>)
 8004582:	61bb      	str	r3, [r7, #24]
        break;
 8004584:	e00c      	b.n	80045a0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004586:	f7fe fd95 	bl	80030b4 <HAL_RCC_GetSysClockFreq>
 800458a:	61b8      	str	r0, [r7, #24]
        break;
 800458c:	e008      	b.n	80045a0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800458e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004592:	61bb      	str	r3, [r7, #24]
        break;
 8004594:	e004      	b.n	80045a0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004596:	2300      	movs	r3, #0
 8004598:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	77bb      	strb	r3, [r7, #30]
        break;
 800459e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d074      	beq.n	8004690 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	005a      	lsls	r2, r3, #1
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	085b      	lsrs	r3, r3, #1
 80045b0:	441a      	add	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	2b0f      	cmp	r3, #15
 80045c2:	d916      	bls.n	80045f2 <UART_SetConfig+0x402>
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ca:	d212      	bcs.n	80045f2 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	f023 030f 	bic.w	r3, r3, #15
 80045d4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	085b      	lsrs	r3, r3, #1
 80045da:	b29b      	uxth	r3, r3
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	89fb      	ldrh	r3, [r7, #14]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	89fa      	ldrh	r2, [r7, #14]
 80045ee:	60da      	str	r2, [r3, #12]
 80045f0:	e04e      	b.n	8004690 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	77bb      	strb	r3, [r7, #30]
 80045f6:	e04b      	b.n	8004690 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045f8:	7ffb      	ldrb	r3, [r7, #31]
 80045fa:	2b08      	cmp	r3, #8
 80045fc:	d827      	bhi.n	800464e <UART_SetConfig+0x45e>
 80045fe:	a201      	add	r2, pc, #4	; (adr r2, 8004604 <UART_SetConfig+0x414>)
 8004600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004604:	08004629 	.word	0x08004629
 8004608:	08004631 	.word	0x08004631
 800460c:	08004639 	.word	0x08004639
 8004610:	0800464f 	.word	0x0800464f
 8004614:	0800463f 	.word	0x0800463f
 8004618:	0800464f 	.word	0x0800464f
 800461c:	0800464f 	.word	0x0800464f
 8004620:	0800464f 	.word	0x0800464f
 8004624:	08004647 	.word	0x08004647
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004628:	f7fe fe32 	bl	8003290 <HAL_RCC_GetPCLK1Freq>
 800462c:	61b8      	str	r0, [r7, #24]
        break;
 800462e:	e013      	b.n	8004658 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004630:	f7fe fe42 	bl	80032b8 <HAL_RCC_GetPCLK2Freq>
 8004634:	61b8      	str	r0, [r7, #24]
        break;
 8004636:	e00f      	b.n	8004658 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004638:	4b1d      	ldr	r3, [pc, #116]	; (80046b0 <UART_SetConfig+0x4c0>)
 800463a:	61bb      	str	r3, [r7, #24]
        break;
 800463c:	e00c      	b.n	8004658 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800463e:	f7fe fd39 	bl	80030b4 <HAL_RCC_GetSysClockFreq>
 8004642:	61b8      	str	r0, [r7, #24]
        break;
 8004644:	e008      	b.n	8004658 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800464a:	61bb      	str	r3, [r7, #24]
        break;
 800464c:	e004      	b.n	8004658 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800464e:	2300      	movs	r3, #0
 8004650:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	77bb      	strb	r3, [r7, #30]
        break;
 8004656:	bf00      	nop
    }

    if (pclk != 0U)
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d018      	beq.n	8004690 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	085a      	lsrs	r2, r3, #1
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	441a      	add	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004670:	b29b      	uxth	r3, r3
 8004672:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	2b0f      	cmp	r3, #15
 8004678:	d908      	bls.n	800468c <UART_SetConfig+0x49c>
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004680:	d204      	bcs.n	800468c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	60da      	str	r2, [r3, #12]
 800468a:	e001      	b.n	8004690 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800469c:	7fbb      	ldrb	r3, [r7, #30]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3720      	adds	r7, #32
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	40007c00 	.word	0x40007c00
 80046ac:	40023800 	.word	0x40023800
 80046b0:	00f42400 	.word	0x00f42400

080046b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00a      	beq.n	80046de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	430a      	orrs	r2, r1
 80046dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00a      	beq.n	8004700 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004704:	f003 0304 	and.w	r3, r3, #4
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00a      	beq.n	8004722 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00a      	beq.n	8004744 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004748:	f003 0310 	and.w	r3, r3, #16
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00a      	beq.n	8004766 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	f003 0320 	and.w	r3, r3, #32
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00a      	beq.n	8004788 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004790:	2b00      	cmp	r3, #0
 8004792:	d01a      	beq.n	80047ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047b2:	d10a      	bne.n	80047ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00a      	beq.n	80047ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	605a      	str	r2, [r3, #4]
  }
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af02      	add	r7, sp, #8
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004808:	f7fc fbfe 	bl	8001008 <HAL_GetTick>
 800480c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0308 	and.w	r3, r3, #8
 8004818:	2b08      	cmp	r3, #8
 800481a:	d10e      	bne.n	800483a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800481c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f82d 	bl	800488a <UART_WaitOnFlagUntilTimeout>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e023      	b.n	8004882 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	2b04      	cmp	r3, #4
 8004846:	d10e      	bne.n	8004866 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004848:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f817 	bl	800488a <UART_WaitOnFlagUntilTimeout>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e00d      	b.n	8004882 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2220      	movs	r2, #32
 800486a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2220      	movs	r2, #32
 8004870:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b084      	sub	sp, #16
 800488e:	af00      	add	r7, sp, #0
 8004890:	60f8      	str	r0, [r7, #12]
 8004892:	60b9      	str	r1, [r7, #8]
 8004894:	603b      	str	r3, [r7, #0]
 8004896:	4613      	mov	r3, r2
 8004898:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800489a:	e05e      	b.n	800495a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a2:	d05a      	beq.n	800495a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048a4:	f7fc fbb0 	bl	8001008 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	69ba      	ldr	r2, [r7, #24]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d302      	bcc.n	80048ba <UART_WaitOnFlagUntilTimeout+0x30>
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d11b      	bne.n	80048f2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80048c8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 0201 	bic.w	r2, r2, #1
 80048d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2220      	movs	r2, #32
 80048de:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2220      	movs	r2, #32
 80048e4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e043      	b.n	800497a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d02c      	beq.n	800495a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800490a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800490e:	d124      	bne.n	800495a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004918:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004928:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 0201 	bic.w	r2, r2, #1
 8004938:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2220      	movs	r2, #32
 800493e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2220      	movs	r2, #32
 8004944:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2220      	movs	r2, #32
 800494a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e00f      	b.n	800497a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	69da      	ldr	r2, [r3, #28]
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	4013      	ands	r3, r2
 8004964:	68ba      	ldr	r2, [r7, #8]
 8004966:	429a      	cmp	r2, r3
 8004968:	bf0c      	ite	eq
 800496a:	2301      	moveq	r3, #1
 800496c:	2300      	movne	r3, #0
 800496e:	b2db      	uxtb	r3, r3
 8004970:	461a      	mov	r2, r3
 8004972:	79fb      	ldrb	r3, [r7, #7]
 8004974:	429a      	cmp	r2, r3
 8004976:	d091      	beq.n	800489c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
	...

08004984 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004984:	b5b0      	push	{r4, r5, r7, lr}
 8004986:	b08e      	sub	sp, #56	; 0x38
 8004988:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800498a:	4ba0      	ldr	r3, [pc, #640]	; (8004c0c <MX_LWIP_Init+0x288>)
 800498c:	22c0      	movs	r2, #192	; 0xc0
 800498e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004990:	4b9e      	ldr	r3, [pc, #632]	; (8004c0c <MX_LWIP_Init+0x288>)
 8004992:	22a8      	movs	r2, #168	; 0xa8
 8004994:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8004996:	4b9d      	ldr	r3, [pc, #628]	; (8004c0c <MX_LWIP_Init+0x288>)
 8004998:	2200      	movs	r2, #0
 800499a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 800499c:	4b9b      	ldr	r3, [pc, #620]	; (8004c0c <MX_LWIP_Init+0x288>)
 800499e:	226f      	movs	r2, #111	; 0x6f
 80049a0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80049a2:	4b9b      	ldr	r3, [pc, #620]	; (8004c10 <MX_LWIP_Init+0x28c>)
 80049a4:	22ff      	movs	r2, #255	; 0xff
 80049a6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80049a8:	4b99      	ldr	r3, [pc, #612]	; (8004c10 <MX_LWIP_Init+0x28c>)
 80049aa:	22ff      	movs	r2, #255	; 0xff
 80049ac:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80049ae:	4b98      	ldr	r3, [pc, #608]	; (8004c10 <MX_LWIP_Init+0x28c>)
 80049b0:	22ff      	movs	r2, #255	; 0xff
 80049b2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80049b4:	4b96      	ldr	r3, [pc, #600]	; (8004c10 <MX_LWIP_Init+0x28c>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80049ba:	4b96      	ldr	r3, [pc, #600]	; (8004c14 <MX_LWIP_Init+0x290>)
 80049bc:	22c0      	movs	r2, #192	; 0xc0
 80049be:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80049c0:	4b94      	ldr	r3, [pc, #592]	; (8004c14 <MX_LWIP_Init+0x290>)
 80049c2:	22a8      	movs	r2, #168	; 0xa8
 80049c4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80049c6:	4b93      	ldr	r3, [pc, #588]	; (8004c14 <MX_LWIP_Init+0x290>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80049cc:	4b91      	ldr	r3, [pc, #580]	; (8004c14 <MX_LWIP_Init+0x290>)
 80049ce:	2201      	movs	r2, #1
 80049d0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80049d2:	2100      	movs	r1, #0
 80049d4:	2000      	movs	r0, #0
 80049d6:	f003 fe11 	bl	80085fc <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80049da:	4b8c      	ldr	r3, [pc, #560]	; (8004c0c <MX_LWIP_Init+0x288>)
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	061a      	lsls	r2, r3, #24
 80049e0:	4b8a      	ldr	r3, [pc, #552]	; (8004c0c <MX_LWIP_Init+0x288>)
 80049e2:	785b      	ldrb	r3, [r3, #1]
 80049e4:	041b      	lsls	r3, r3, #16
 80049e6:	431a      	orrs	r2, r3
 80049e8:	4b88      	ldr	r3, [pc, #544]	; (8004c0c <MX_LWIP_Init+0x288>)
 80049ea:	789b      	ldrb	r3, [r3, #2]
 80049ec:	021b      	lsls	r3, r3, #8
 80049ee:	4313      	orrs	r3, r2
 80049f0:	4a86      	ldr	r2, [pc, #536]	; (8004c0c <MX_LWIP_Init+0x288>)
 80049f2:	78d2      	ldrb	r2, [r2, #3]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	061a      	lsls	r2, r3, #24
 80049f8:	4b84      	ldr	r3, [pc, #528]	; (8004c0c <MX_LWIP_Init+0x288>)
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	0619      	lsls	r1, r3, #24
 80049fe:	4b83      	ldr	r3, [pc, #524]	; (8004c0c <MX_LWIP_Init+0x288>)
 8004a00:	785b      	ldrb	r3, [r3, #1]
 8004a02:	041b      	lsls	r3, r3, #16
 8004a04:	4319      	orrs	r1, r3
 8004a06:	4b81      	ldr	r3, [pc, #516]	; (8004c0c <MX_LWIP_Init+0x288>)
 8004a08:	789b      	ldrb	r3, [r3, #2]
 8004a0a:	021b      	lsls	r3, r3, #8
 8004a0c:	430b      	orrs	r3, r1
 8004a0e:	497f      	ldr	r1, [pc, #508]	; (8004c0c <MX_LWIP_Init+0x288>)
 8004a10:	78c9      	ldrb	r1, [r1, #3]
 8004a12:	430b      	orrs	r3, r1
 8004a14:	021b      	lsls	r3, r3, #8
 8004a16:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	4b7b      	ldr	r3, [pc, #492]	; (8004c0c <MX_LWIP_Init+0x288>)
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	0619      	lsls	r1, r3, #24
 8004a22:	4b7a      	ldr	r3, [pc, #488]	; (8004c0c <MX_LWIP_Init+0x288>)
 8004a24:	785b      	ldrb	r3, [r3, #1]
 8004a26:	041b      	lsls	r3, r3, #16
 8004a28:	4319      	orrs	r1, r3
 8004a2a:	4b78      	ldr	r3, [pc, #480]	; (8004c0c <MX_LWIP_Init+0x288>)
 8004a2c:	789b      	ldrb	r3, [r3, #2]
 8004a2e:	021b      	lsls	r3, r3, #8
 8004a30:	430b      	orrs	r3, r1
 8004a32:	4976      	ldr	r1, [pc, #472]	; (8004c0c <MX_LWIP_Init+0x288>)
 8004a34:	78c9      	ldrb	r1, [r1, #3]
 8004a36:	430b      	orrs	r3, r1
 8004a38:	0a1b      	lsrs	r3, r3, #8
 8004a3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	4b72      	ldr	r3, [pc, #456]	; (8004c0c <MX_LWIP_Init+0x288>)
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	0619      	lsls	r1, r3, #24
 8004a46:	4b71      	ldr	r3, [pc, #452]	; (8004c0c <MX_LWIP_Init+0x288>)
 8004a48:	785b      	ldrb	r3, [r3, #1]
 8004a4a:	041b      	lsls	r3, r3, #16
 8004a4c:	4319      	orrs	r1, r3
 8004a4e:	4b6f      	ldr	r3, [pc, #444]	; (8004c0c <MX_LWIP_Init+0x288>)
 8004a50:	789b      	ldrb	r3, [r3, #2]
 8004a52:	021b      	lsls	r3, r3, #8
 8004a54:	430b      	orrs	r3, r1
 8004a56:	496d      	ldr	r1, [pc, #436]	; (8004c0c <MX_LWIP_Init+0x288>)
 8004a58:	78c9      	ldrb	r1, [r1, #3]
 8004a5a:	430b      	orrs	r3, r1
 8004a5c:	0e1b      	lsrs	r3, r3, #24
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	4a6d      	ldr	r2, [pc, #436]	; (8004c18 <MX_LWIP_Init+0x294>)
 8004a62:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004a64:	4b6a      	ldr	r3, [pc, #424]	; (8004c10 <MX_LWIP_Init+0x28c>)
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	061a      	lsls	r2, r3, #24
 8004a6a:	4b69      	ldr	r3, [pc, #420]	; (8004c10 <MX_LWIP_Init+0x28c>)
 8004a6c:	785b      	ldrb	r3, [r3, #1]
 8004a6e:	041b      	lsls	r3, r3, #16
 8004a70:	431a      	orrs	r2, r3
 8004a72:	4b67      	ldr	r3, [pc, #412]	; (8004c10 <MX_LWIP_Init+0x28c>)
 8004a74:	789b      	ldrb	r3, [r3, #2]
 8004a76:	021b      	lsls	r3, r3, #8
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	4a65      	ldr	r2, [pc, #404]	; (8004c10 <MX_LWIP_Init+0x28c>)
 8004a7c:	78d2      	ldrb	r2, [r2, #3]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	061a      	lsls	r2, r3, #24
 8004a82:	4b63      	ldr	r3, [pc, #396]	; (8004c10 <MX_LWIP_Init+0x28c>)
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	0619      	lsls	r1, r3, #24
 8004a88:	4b61      	ldr	r3, [pc, #388]	; (8004c10 <MX_LWIP_Init+0x28c>)
 8004a8a:	785b      	ldrb	r3, [r3, #1]
 8004a8c:	041b      	lsls	r3, r3, #16
 8004a8e:	4319      	orrs	r1, r3
 8004a90:	4b5f      	ldr	r3, [pc, #380]	; (8004c10 <MX_LWIP_Init+0x28c>)
 8004a92:	789b      	ldrb	r3, [r3, #2]
 8004a94:	021b      	lsls	r3, r3, #8
 8004a96:	430b      	orrs	r3, r1
 8004a98:	495d      	ldr	r1, [pc, #372]	; (8004c10 <MX_LWIP_Init+0x28c>)
 8004a9a:	78c9      	ldrb	r1, [r1, #3]
 8004a9c:	430b      	orrs	r3, r1
 8004a9e:	021b      	lsls	r3, r3, #8
 8004aa0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	4b5a      	ldr	r3, [pc, #360]	; (8004c10 <MX_LWIP_Init+0x28c>)
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	0619      	lsls	r1, r3, #24
 8004aac:	4b58      	ldr	r3, [pc, #352]	; (8004c10 <MX_LWIP_Init+0x28c>)
 8004aae:	785b      	ldrb	r3, [r3, #1]
 8004ab0:	041b      	lsls	r3, r3, #16
 8004ab2:	4319      	orrs	r1, r3
 8004ab4:	4b56      	ldr	r3, [pc, #344]	; (8004c10 <MX_LWIP_Init+0x28c>)
 8004ab6:	789b      	ldrb	r3, [r3, #2]
 8004ab8:	021b      	lsls	r3, r3, #8
 8004aba:	430b      	orrs	r3, r1
 8004abc:	4954      	ldr	r1, [pc, #336]	; (8004c10 <MX_LWIP_Init+0x28c>)
 8004abe:	78c9      	ldrb	r1, [r1, #3]
 8004ac0:	430b      	orrs	r3, r1
 8004ac2:	0a1b      	lsrs	r3, r3, #8
 8004ac4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	4b51      	ldr	r3, [pc, #324]	; (8004c10 <MX_LWIP_Init+0x28c>)
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	0619      	lsls	r1, r3, #24
 8004ad0:	4b4f      	ldr	r3, [pc, #316]	; (8004c10 <MX_LWIP_Init+0x28c>)
 8004ad2:	785b      	ldrb	r3, [r3, #1]
 8004ad4:	041b      	lsls	r3, r3, #16
 8004ad6:	4319      	orrs	r1, r3
 8004ad8:	4b4d      	ldr	r3, [pc, #308]	; (8004c10 <MX_LWIP_Init+0x28c>)
 8004ada:	789b      	ldrb	r3, [r3, #2]
 8004adc:	021b      	lsls	r3, r3, #8
 8004ade:	430b      	orrs	r3, r1
 8004ae0:	494b      	ldr	r1, [pc, #300]	; (8004c10 <MX_LWIP_Init+0x28c>)
 8004ae2:	78c9      	ldrb	r1, [r1, #3]
 8004ae4:	430b      	orrs	r3, r1
 8004ae6:	0e1b      	lsrs	r3, r3, #24
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	4a4c      	ldr	r2, [pc, #304]	; (8004c1c <MX_LWIP_Init+0x298>)
 8004aec:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004aee:	4b49      	ldr	r3, [pc, #292]	; (8004c14 <MX_LWIP_Init+0x290>)
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	061a      	lsls	r2, r3, #24
 8004af4:	4b47      	ldr	r3, [pc, #284]	; (8004c14 <MX_LWIP_Init+0x290>)
 8004af6:	785b      	ldrb	r3, [r3, #1]
 8004af8:	041b      	lsls	r3, r3, #16
 8004afa:	431a      	orrs	r2, r3
 8004afc:	4b45      	ldr	r3, [pc, #276]	; (8004c14 <MX_LWIP_Init+0x290>)
 8004afe:	789b      	ldrb	r3, [r3, #2]
 8004b00:	021b      	lsls	r3, r3, #8
 8004b02:	4313      	orrs	r3, r2
 8004b04:	4a43      	ldr	r2, [pc, #268]	; (8004c14 <MX_LWIP_Init+0x290>)
 8004b06:	78d2      	ldrb	r2, [r2, #3]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	061a      	lsls	r2, r3, #24
 8004b0c:	4b41      	ldr	r3, [pc, #260]	; (8004c14 <MX_LWIP_Init+0x290>)
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	0619      	lsls	r1, r3, #24
 8004b12:	4b40      	ldr	r3, [pc, #256]	; (8004c14 <MX_LWIP_Init+0x290>)
 8004b14:	785b      	ldrb	r3, [r3, #1]
 8004b16:	041b      	lsls	r3, r3, #16
 8004b18:	4319      	orrs	r1, r3
 8004b1a:	4b3e      	ldr	r3, [pc, #248]	; (8004c14 <MX_LWIP_Init+0x290>)
 8004b1c:	789b      	ldrb	r3, [r3, #2]
 8004b1e:	021b      	lsls	r3, r3, #8
 8004b20:	430b      	orrs	r3, r1
 8004b22:	493c      	ldr	r1, [pc, #240]	; (8004c14 <MX_LWIP_Init+0x290>)
 8004b24:	78c9      	ldrb	r1, [r1, #3]
 8004b26:	430b      	orrs	r3, r1
 8004b28:	021b      	lsls	r3, r3, #8
 8004b2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	4b38      	ldr	r3, [pc, #224]	; (8004c14 <MX_LWIP_Init+0x290>)
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	0619      	lsls	r1, r3, #24
 8004b36:	4b37      	ldr	r3, [pc, #220]	; (8004c14 <MX_LWIP_Init+0x290>)
 8004b38:	785b      	ldrb	r3, [r3, #1]
 8004b3a:	041b      	lsls	r3, r3, #16
 8004b3c:	4319      	orrs	r1, r3
 8004b3e:	4b35      	ldr	r3, [pc, #212]	; (8004c14 <MX_LWIP_Init+0x290>)
 8004b40:	789b      	ldrb	r3, [r3, #2]
 8004b42:	021b      	lsls	r3, r3, #8
 8004b44:	430b      	orrs	r3, r1
 8004b46:	4933      	ldr	r1, [pc, #204]	; (8004c14 <MX_LWIP_Init+0x290>)
 8004b48:	78c9      	ldrb	r1, [r1, #3]
 8004b4a:	430b      	orrs	r3, r1
 8004b4c:	0a1b      	lsrs	r3, r3, #8
 8004b4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004b52:	431a      	orrs	r2, r3
 8004b54:	4b2f      	ldr	r3, [pc, #188]	; (8004c14 <MX_LWIP_Init+0x290>)
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	0619      	lsls	r1, r3, #24
 8004b5a:	4b2e      	ldr	r3, [pc, #184]	; (8004c14 <MX_LWIP_Init+0x290>)
 8004b5c:	785b      	ldrb	r3, [r3, #1]
 8004b5e:	041b      	lsls	r3, r3, #16
 8004b60:	4319      	orrs	r1, r3
 8004b62:	4b2c      	ldr	r3, [pc, #176]	; (8004c14 <MX_LWIP_Init+0x290>)
 8004b64:	789b      	ldrb	r3, [r3, #2]
 8004b66:	021b      	lsls	r3, r3, #8
 8004b68:	430b      	orrs	r3, r1
 8004b6a:	492a      	ldr	r1, [pc, #168]	; (8004c14 <MX_LWIP_Init+0x290>)
 8004b6c:	78c9      	ldrb	r1, [r1, #3]
 8004b6e:	430b      	orrs	r3, r1
 8004b70:	0e1b      	lsrs	r3, r3, #24
 8004b72:	4313      	orrs	r3, r2
 8004b74:	4a2a      	ldr	r2, [pc, #168]	; (8004c20 <MX_LWIP_Init+0x29c>)
 8004b76:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004b78:	4b2a      	ldr	r3, [pc, #168]	; (8004c24 <MX_LWIP_Init+0x2a0>)
 8004b7a:	9302      	str	r3, [sp, #8]
 8004b7c:	4b2a      	ldr	r3, [pc, #168]	; (8004c28 <MX_LWIP_Init+0x2a4>)
 8004b7e:	9301      	str	r3, [sp, #4]
 8004b80:	2300      	movs	r3, #0
 8004b82:	9300      	str	r3, [sp, #0]
 8004b84:	4b26      	ldr	r3, [pc, #152]	; (8004c20 <MX_LWIP_Init+0x29c>)
 8004b86:	4a25      	ldr	r2, [pc, #148]	; (8004c1c <MX_LWIP_Init+0x298>)
 8004b88:	4923      	ldr	r1, [pc, #140]	; (8004c18 <MX_LWIP_Init+0x294>)
 8004b8a:	4828      	ldr	r0, [pc, #160]	; (8004c2c <MX_LWIP_Init+0x2a8>)
 8004b8c:	f005 ff08 	bl	800a9a0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004b90:	4826      	ldr	r0, [pc, #152]	; (8004c2c <MX_LWIP_Init+0x2a8>)
 8004b92:	f006 f8b7 	bl	800ad04 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004b96:	4b25      	ldr	r3, [pc, #148]	; (8004c2c <MX_LWIP_Init+0x2a8>)
 8004b98:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004b9c:	089b      	lsrs	r3, r3, #2
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004ba8:	4820      	ldr	r0, [pc, #128]	; (8004c2c <MX_LWIP_Init+0x2a8>)
 8004baa:	f006 f8bb 	bl	800ad24 <netif_set_up>
 8004bae:	e002      	b.n	8004bb6 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004bb0:	481e      	ldr	r0, [pc, #120]	; (8004c2c <MX_LWIP_Init+0x2a8>)
 8004bb2:	f006 f923 	bl	800adfc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8004bb6:	491e      	ldr	r1, [pc, #120]	; (8004c30 <MX_LWIP_Init+0x2ac>)
 8004bb8:	481c      	ldr	r0, [pc, #112]	; (8004c2c <MX_LWIP_Init+0x2a8>)
 8004bba:	f006 f9b5 	bl	800af28 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	623b      	str	r3, [r7, #32]
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8004bc6:	f107 0320 	add.w	r3, r7, #32
 8004bca:	2101      	movs	r1, #1
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f000 fd97 	bl	8005700 <osSemaphoreCreate>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	4a17      	ldr	r2, [pc, #92]	; (8004c34 <MX_LWIP_Init+0x2b0>)
 8004bd6:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8004bd8:	4b17      	ldr	r3, [pc, #92]	; (8004c38 <MX_LWIP_Init+0x2b4>)
 8004bda:	4a14      	ldr	r2, [pc, #80]	; (8004c2c <MX_LWIP_Init+0x2a8>)
 8004bdc:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8004bde:	4b15      	ldr	r3, [pc, #84]	; (8004c34 <MX_LWIP_Init+0x2b0>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a15      	ldr	r2, [pc, #84]	; (8004c38 <MX_LWIP_Init+0x2b4>)
 8004be4:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8004be6:	4b15      	ldr	r3, [pc, #84]	; (8004c3c <MX_LWIP_Init+0x2b8>)
 8004be8:	1d3c      	adds	r4, r7, #4
 8004bea:	461d      	mov	r5, r3
 8004bec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bf0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004bf4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8004bf8:	1d3b      	adds	r3, r7, #4
 8004bfa:	490f      	ldr	r1, [pc, #60]	; (8004c38 <MX_LWIP_Init+0x2b4>)
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f000 fc82 	bl	8005506 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004c02:	bf00      	nop
 8004c04:	3728      	adds	r7, #40	; 0x28
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bdb0      	pop	{r4, r5, r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	2000430c 	.word	0x2000430c
 8004c10:	20004308 	.word	0x20004308
 8004c14:	200042cc 	.word	0x200042cc
 8004c18:	20004304 	.word	0x20004304
 8004c1c:	20004310 	.word	0x20004310
 8004c20:	20004314 	.word	0x20004314
 8004c24:	08008539 	.word	0x08008539
 8004c28:	08005295 	.word	0x08005295
 8004c2c:	200042d0 	.word	0x200042d0
 8004c30:	08005379 	.word	0x08005379
 8004c34:	200002f8 	.word	0x200002f8
 8004c38:	200042c4 	.word	0x200042c4
 8004c3c:	080161d0 	.word	0x080161d0

08004c40 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b08e      	sub	sp, #56	; 0x38
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	605a      	str	r2, [r3, #4]
 8004c52:	609a      	str	r2, [r3, #8]
 8004c54:	60da      	str	r2, [r3, #12]
 8004c56:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a52      	ldr	r2, [pc, #328]	; (8004da8 <HAL_ETH_MspInit+0x168>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	f040 809e 	bne.w	8004da0 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004c64:	4b51      	ldr	r3, [pc, #324]	; (8004dac <HAL_ETH_MspInit+0x16c>)
 8004c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c68:	4a50      	ldr	r2, [pc, #320]	; (8004dac <HAL_ETH_MspInit+0x16c>)
 8004c6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c6e:	6313      	str	r3, [r2, #48]	; 0x30
 8004c70:	4b4e      	ldr	r3, [pc, #312]	; (8004dac <HAL_ETH_MspInit+0x16c>)
 8004c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c78:	623b      	str	r3, [r7, #32]
 8004c7a:	6a3b      	ldr	r3, [r7, #32]
 8004c7c:	4b4b      	ldr	r3, [pc, #300]	; (8004dac <HAL_ETH_MspInit+0x16c>)
 8004c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c80:	4a4a      	ldr	r2, [pc, #296]	; (8004dac <HAL_ETH_MspInit+0x16c>)
 8004c82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c86:	6313      	str	r3, [r2, #48]	; 0x30
 8004c88:	4b48      	ldr	r3, [pc, #288]	; (8004dac <HAL_ETH_MspInit+0x16c>)
 8004c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c90:	61fb      	str	r3, [r7, #28]
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	4b45      	ldr	r3, [pc, #276]	; (8004dac <HAL_ETH_MspInit+0x16c>)
 8004c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c98:	4a44      	ldr	r2, [pc, #272]	; (8004dac <HAL_ETH_MspInit+0x16c>)
 8004c9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c9e:	6313      	str	r3, [r2, #48]	; 0x30
 8004ca0:	4b42      	ldr	r3, [pc, #264]	; (8004dac <HAL_ETH_MspInit+0x16c>)
 8004ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ca8:	61bb      	str	r3, [r7, #24]
 8004caa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cac:	4b3f      	ldr	r3, [pc, #252]	; (8004dac <HAL_ETH_MspInit+0x16c>)
 8004cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb0:	4a3e      	ldr	r2, [pc, #248]	; (8004dac <HAL_ETH_MspInit+0x16c>)
 8004cb2:	f043 0304 	orr.w	r3, r3, #4
 8004cb6:	6313      	str	r3, [r2, #48]	; 0x30
 8004cb8:	4b3c      	ldr	r3, [pc, #240]	; (8004dac <HAL_ETH_MspInit+0x16c>)
 8004cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbc:	f003 0304 	and.w	r3, r3, #4
 8004cc0:	617b      	str	r3, [r7, #20]
 8004cc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cc4:	4b39      	ldr	r3, [pc, #228]	; (8004dac <HAL_ETH_MspInit+0x16c>)
 8004cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc8:	4a38      	ldr	r2, [pc, #224]	; (8004dac <HAL_ETH_MspInit+0x16c>)
 8004cca:	f043 0301 	orr.w	r3, r3, #1
 8004cce:	6313      	str	r3, [r2, #48]	; 0x30
 8004cd0:	4b36      	ldr	r3, [pc, #216]	; (8004dac <HAL_ETH_MspInit+0x16c>)
 8004cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	613b      	str	r3, [r7, #16]
 8004cda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cdc:	4b33      	ldr	r3, [pc, #204]	; (8004dac <HAL_ETH_MspInit+0x16c>)
 8004cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce0:	4a32      	ldr	r2, [pc, #200]	; (8004dac <HAL_ETH_MspInit+0x16c>)
 8004ce2:	f043 0302 	orr.w	r3, r3, #2
 8004ce6:	6313      	str	r3, [r2, #48]	; 0x30
 8004ce8:	4b30      	ldr	r3, [pc, #192]	; (8004dac <HAL_ETH_MspInit+0x16c>)
 8004cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004cf4:	4b2d      	ldr	r3, [pc, #180]	; (8004dac <HAL_ETH_MspInit+0x16c>)
 8004cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf8:	4a2c      	ldr	r2, [pc, #176]	; (8004dac <HAL_ETH_MspInit+0x16c>)
 8004cfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cfe:	6313      	str	r3, [r2, #48]	; 0x30
 8004d00:	4b2a      	ldr	r3, [pc, #168]	; (8004dac <HAL_ETH_MspInit+0x16c>)
 8004d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d08:	60bb      	str	r3, [r7, #8]
 8004d0a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004d0c:	2332      	movs	r3, #50	; 0x32
 8004d0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d10:	2302      	movs	r3, #2
 8004d12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d14:	2300      	movs	r3, #0
 8004d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d1c:	230b      	movs	r3, #11
 8004d1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d24:	4619      	mov	r1, r3
 8004d26:	4822      	ldr	r0, [pc, #136]	; (8004db0 <HAL_ETH_MspInit+0x170>)
 8004d28:	f7fd fc04 	bl	8002534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004d2c:	2386      	movs	r3, #134	; 0x86
 8004d2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d30:	2302      	movs	r3, #2
 8004d32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d34:	2300      	movs	r3, #0
 8004d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d3c:	230b      	movs	r3, #11
 8004d3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d44:	4619      	mov	r1, r3
 8004d46:	481b      	ldr	r0, [pc, #108]	; (8004db4 <HAL_ETH_MspInit+0x174>)
 8004d48:	f7fd fbf4 	bl	8002534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004d4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d52:	2302      	movs	r3, #2
 8004d54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d56:	2300      	movs	r3, #0
 8004d58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d5e:	230b      	movs	r3, #11
 8004d60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d66:	4619      	mov	r1, r3
 8004d68:	4813      	ldr	r0, [pc, #76]	; (8004db8 <HAL_ETH_MspInit+0x178>)
 8004d6a:	f7fd fbe3 	bl	8002534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004d6e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004d72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d74:	2302      	movs	r3, #2
 8004d76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d80:	230b      	movs	r3, #11
 8004d82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d88:	4619      	mov	r1, r3
 8004d8a:	480c      	ldr	r0, [pc, #48]	; (8004dbc <HAL_ETH_MspInit+0x17c>)
 8004d8c:	f7fd fbd2 	bl	8002534 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004d90:	2200      	movs	r2, #0
 8004d92:	2105      	movs	r1, #5
 8004d94:	203d      	movs	r0, #61	; 0x3d
 8004d96:	f7fc fa1f 	bl	80011d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004d9a:	203d      	movs	r0, #61	; 0x3d
 8004d9c:	f7fc fa38 	bl	8001210 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004da0:	bf00      	nop
 8004da2:	3738      	adds	r7, #56	; 0x38
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	40028000 	.word	0x40028000
 8004dac:	40023800 	.word	0x40023800
 8004db0:	40020800 	.word	0x40020800
 8004db4:	40020000 	.word	0x40020000
 8004db8:	40020400 	.word	0x40020400
 8004dbc:	40021800 	.word	0x40021800

08004dc0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8004dc8:	4b04      	ldr	r3, [pc, #16]	; (8004ddc <HAL_ETH_RxCpltCallback+0x1c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f000 fd17 	bl	8005800 <osSemaphoreRelease>
}
 8004dd2:	bf00      	nop
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	200002fc 	.word	0x200002fc

08004de0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004de0:	b5b0      	push	{r4, r5, r7, lr}
 8004de2:	b090      	sub	sp, #64	; 0x40
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004de8:	2300      	movs	r3, #0
 8004dea:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004dec:	4b60      	ldr	r3, [pc, #384]	; (8004f70 <low_level_init+0x190>)
 8004dee:	4a61      	ldr	r2, [pc, #388]	; (8004f74 <low_level_init+0x194>)
 8004df0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004df2:	4b5f      	ldr	r3, [pc, #380]	; (8004f70 <low_level_init+0x190>)
 8004df4:	2201      	movs	r2, #1
 8004df6:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8004df8:	4b5d      	ldr	r3, [pc, #372]	; (8004f70 <low_level_init+0x190>)
 8004dfa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004dfe:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004e00:	4b5b      	ldr	r3, [pc, #364]	; (8004f70 <low_level_init+0x190>)
 8004e02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e06:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004e08:	4b59      	ldr	r3, [pc, #356]	; (8004f70 <low_level_init+0x190>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8004e14:	2380      	movs	r3, #128	; 0x80
 8004e16:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8004e1a:	23e1      	movs	r3, #225	; 0xe1
 8004e1c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8004e20:	2300      	movs	r3, #0
 8004e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8004e26:	2300      	movs	r3, #0
 8004e28:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8004e32:	4a4f      	ldr	r2, [pc, #316]	; (8004f70 <low_level_init+0x190>)
 8004e34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004e38:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8004e3a:	4b4d      	ldr	r3, [pc, #308]	; (8004f70 <low_level_init+0x190>)
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004e40:	4b4b      	ldr	r3, [pc, #300]	; (8004f70 <low_level_init+0x190>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004e46:	4b4a      	ldr	r3, [pc, #296]	; (8004f70 <low_level_init+0x190>)
 8004e48:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004e4c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004e4e:	4848      	ldr	r0, [pc, #288]	; (8004f70 <low_level_init+0x190>)
 8004e50:	f7fc f9ec 	bl	800122c <HAL_ETH_Init>
 8004e54:	4603      	mov	r3, r0
 8004e56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8004e5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d108      	bne.n	8004e74 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e68:	f043 0304 	orr.w	r3, r3, #4
 8004e6c:	b2da      	uxtb	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004e74:	2304      	movs	r3, #4
 8004e76:	4a40      	ldr	r2, [pc, #256]	; (8004f78 <low_level_init+0x198>)
 8004e78:	4940      	ldr	r1, [pc, #256]	; (8004f7c <low_level_init+0x19c>)
 8004e7a:	483d      	ldr	r0, [pc, #244]	; (8004f70 <low_level_init+0x190>)
 8004e7c:	f7fc fb70 	bl	8001560 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004e80:	2304      	movs	r3, #4
 8004e82:	4a3f      	ldr	r2, [pc, #252]	; (8004f80 <low_level_init+0x1a0>)
 8004e84:	493f      	ldr	r1, [pc, #252]	; (8004f84 <low_level_init+0x1a4>)
 8004e86:	483a      	ldr	r0, [pc, #232]	; (8004f70 <low_level_init+0x190>)
 8004e88:	f7fc fbd3 	bl	8001632 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2206      	movs	r2, #6
 8004e90:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004e94:	4b36      	ldr	r3, [pc, #216]	; (8004f70 <low_level_init+0x190>)
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	781a      	ldrb	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004ea0:	4b33      	ldr	r3, [pc, #204]	; (8004f70 <low_level_init+0x190>)
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	785a      	ldrb	r2, [r3, #1]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004eac:	4b30      	ldr	r3, [pc, #192]	; (8004f70 <low_level_init+0x190>)
 8004eae:	695b      	ldr	r3, [r3, #20]
 8004eb0:	789a      	ldrb	r2, [r3, #2]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004eb8:	4b2d      	ldr	r3, [pc, #180]	; (8004f70 <low_level_init+0x190>)
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	78da      	ldrb	r2, [r3, #3]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004ec4:	4b2a      	ldr	r3, [pc, #168]	; (8004f70 <low_level_init+0x190>)
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	791a      	ldrb	r2, [r3, #4]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004ed0:	4b27      	ldr	r3, [pc, #156]	; (8004f70 <low_level_init+0x190>)
 8004ed2:	695b      	ldr	r3, [r3, #20]
 8004ed4:	795a      	ldrb	r2, [r3, #5]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004ee2:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004eea:	f043 030a 	orr.w	r3, r3, #10
 8004eee:	b2da      	uxtb	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004efa:	2300      	movs	r3, #0
 8004efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8004efe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f02:	2101      	movs	r1, #1
 8004f04:	4618      	mov	r0, r3
 8004f06:	f000 fbfb 	bl	8005700 <osSemaphoreCreate>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	4a1e      	ldr	r2, [pc, #120]	; (8004f88 <low_level_init+0x1a8>)
 8004f0e:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8004f10:	4b1e      	ldr	r3, [pc, #120]	; (8004f8c <low_level_init+0x1ac>)
 8004f12:	f107 040c 	add.w	r4, r7, #12
 8004f16:	461d      	mov	r5, r3
 8004f18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f1c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004f20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8004f24:	f107 030c 	add.w	r3, r7, #12
 8004f28:	6879      	ldr	r1, [r7, #4]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 faeb 	bl	8005506 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004f30:	480f      	ldr	r0, [pc, #60]	; (8004f70 <low_level_init+0x190>)
 8004f32:	f7fc fea6 	bl	8001c82 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004f36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	211d      	movs	r1, #29
 8004f3e:	480c      	ldr	r0, [pc, #48]	; (8004f70 <low_level_init+0x190>)
 8004f40:	f7fc fdd1 	bl	8001ae6 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8004f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f46:	f043 030b 	orr.w	r3, r3, #11
 8004f4a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4e:	461a      	mov	r2, r3
 8004f50:	211d      	movs	r1, #29
 8004f52:	4807      	ldr	r0, [pc, #28]	; (8004f70 <low_level_init+0x190>)
 8004f54:	f7fc fe2f 	bl	8001bb6 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004f58:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	211d      	movs	r1, #29
 8004f60:	4803      	ldr	r0, [pc, #12]	; (8004f70 <low_level_init+0x190>)
 8004f62:	f7fc fdc0 	bl	8001ae6 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004f66:	bf00      	nop
 8004f68:	3740      	adds	r7, #64	; 0x40
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bdb0      	pop	{r4, r5, r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	20005be8 	.word	0x20005be8
 8004f74:	40028000 	.word	0x40028000
 8004f78:	20005c30 	.word	0x20005c30
 8004f7c:	20004318 	.word	0x20004318
 8004f80:	20004398 	.word	0x20004398
 8004f84:	20005b68 	.word	0x20005b68
 8004f88:	200002fc 	.word	0x200002fc
 8004f8c:	080161f4 	.word	0x080161f4

08004f90 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b08a      	sub	sp, #40	; 0x28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004f9a:	4b4b      	ldr	r3, [pc, #300]	; (80050c8 <low_level_output+0x138>)
 8004f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004faa:	2300      	movs	r3, #0
 8004fac:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8004fb2:	4b45      	ldr	r3, [pc, #276]	; (80050c8 <low_level_output+0x138>)
 8004fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb6:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	623b      	str	r3, [r7, #32]
 8004fc0:	e05a      	b.n	8005078 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	da03      	bge.n	8004fd2 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8004fca:	23f8      	movs	r3, #248	; 0xf8
 8004fcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8004fd0:	e05c      	b.n	800508c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8004fd2:	6a3b      	ldr	r3, [r7, #32]
 8004fd4:	895b      	ldrh	r3, [r3, #10]
 8004fd6:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004fdc:	e02f      	b.n	800503e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8004fde:	69fa      	ldr	r2, [r7, #28]
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	18d0      	adds	r0, r2, r3
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	18d1      	adds	r1, r2, r3
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8004ff2:	1a9b      	subs	r3, r3, r2
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	f00f ff3f 	bl	8014e78 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	da03      	bge.n	8005010 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8005008:	23f8      	movs	r3, #248	; 0xf8
 800500a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800500e:	e03d      	b.n	800508c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	4413      	add	r3, r2
 800501c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005020:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800502c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005038:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800503a:	2300      	movs	r3, #0
 800503c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	4413      	add	r3, r2
 8005044:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005048:	4293      	cmp	r3, r2
 800504a:	d8c8      	bhi.n	8004fde <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800504c:	69fa      	ldr	r2, [r7, #28]
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	18d0      	adds	r0, r2, r3
 8005052:	6a3b      	ldr	r3, [r7, #32]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	4413      	add	r3, r2
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	4619      	mov	r1, r3
 800505e:	f00f ff0b 	bl	8014e78 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4413      	add	r3, r2
 8005068:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4413      	add	r3, r2
 8005070:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8005072:	6a3b      	ldr	r3, [r7, #32]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	623b      	str	r3, [r7, #32]
 8005078:	6a3b      	ldr	r3, [r7, #32]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1a1      	bne.n	8004fc2 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800507e:	6979      	ldr	r1, [r7, #20]
 8005080:	4811      	ldr	r0, [pc, #68]	; (80050c8 <low_level_output+0x138>)
 8005082:	f7fc fb43 	bl	800170c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8005086:	2300      	movs	r3, #0
 8005088:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800508c:	4b0e      	ldr	r3, [pc, #56]	; (80050c8 <low_level_output+0x138>)
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	f241 0314 	movw	r3, #4116	; 0x1014
 8005094:	4413      	add	r3, r2
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0320 	and.w	r3, r3, #32
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00d      	beq.n	80050bc <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80050a0:	4b09      	ldr	r3, [pc, #36]	; (80050c8 <low_level_output+0x138>)
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	f241 0314 	movw	r3, #4116	; 0x1014
 80050a8:	4413      	add	r3, r2
 80050aa:	2220      	movs	r2, #32
 80050ac:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80050ae:	4b06      	ldr	r3, [pc, #24]	; (80050c8 <low_level_output+0x138>)
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	f241 0304 	movw	r3, #4100	; 0x1004
 80050b6:	4413      	add	r3, r2
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80050bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3728      	adds	r7, #40	; 0x28
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	20005be8 	.word	0x20005be8

080050cc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b08c      	sub	sp, #48	; 0x30
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80050d4:	2300      	movs	r3, #0
 80050d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80050d8:	2300      	movs	r3, #0
 80050da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80050dc:	2300      	movs	r3, #0
 80050de:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80050e0:	2300      	movs	r3, #0
 80050e2:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80050e4:	2300      	movs	r3, #0
 80050e6:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80050e8:	2300      	movs	r3, #0
 80050ea:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80050ec:	2300      	movs	r3, #0
 80050ee:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80050f0:	484f      	ldr	r0, [pc, #316]	; (8005230 <low_level_input+0x164>)
 80050f2:	f7fc fbf5 	bl	80018e0 <HAL_ETH_GetReceivedFrame_IT>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d001      	beq.n	8005100 <low_level_input+0x34>

    return NULL;
 80050fc:	2300      	movs	r3, #0
 80050fe:	e092      	b.n	8005226 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8005100:	4b4b      	ldr	r3, [pc, #300]	; (8005230 <low_level_input+0x164>)
 8005102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005104:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8005106:	4b4a      	ldr	r3, [pc, #296]	; (8005230 <low_level_input+0x164>)
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800510c:	89fb      	ldrh	r3, [r7, #14]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d007      	beq.n	8005122 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005112:	89fb      	ldrh	r3, [r7, #14]
 8005114:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8005118:	4619      	mov	r1, r3
 800511a:	2000      	movs	r0, #0
 800511c:	f005 ffce 	bl	800b0bc <pbuf_alloc>
 8005120:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8005122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005124:	2b00      	cmp	r3, #0
 8005126:	d04b      	beq.n	80051c0 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005128:	4b41      	ldr	r3, [pc, #260]	; (8005230 <low_level_input+0x164>)
 800512a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512c:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800512e:	2300      	movs	r3, #0
 8005130:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005134:	62bb      	str	r3, [r7, #40]	; 0x28
 8005136:	e040      	b.n	80051ba <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8005138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513a:	895b      	ldrh	r3, [r3, #10]
 800513c:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800513e:	2300      	movs	r3, #0
 8005140:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005142:	e021      	b.n	8005188 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8005144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	18d0      	adds	r0, r2, r3
 800514c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	18d1      	adds	r1, r2, r3
 8005152:	69fa      	ldr	r2, [r7, #28]
 8005154:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005158:	1a9b      	subs	r3, r3, r2
 800515a:	461a      	mov	r2, r3
 800515c:	f00f fe8c 	bl	8014e78 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005160:	6a3b      	ldr	r3, [r7, #32]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800516c:	69fa      	ldr	r2, [r7, #28]
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	4413      	add	r3, r2
 8005172:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005176:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005182:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8005184:	2300      	movs	r3, #0
 8005186:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	4413      	add	r3, r2
 800518e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005192:	4293      	cmp	r3, r2
 8005194:	d8d6      	bhi.n	8005144 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8005196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	18d0      	adds	r0, r2, r3
 800519e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	4413      	add	r3, r2
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	4619      	mov	r1, r3
 80051a8:	f00f fe66 	bl	8014e78 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80051ac:	69fa      	ldr	r2, [r7, #28]
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	4413      	add	r3, r2
 80051b2:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80051b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80051ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1bb      	bne.n	8005138 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80051c0:	4b1b      	ldr	r3, [pc, #108]	; (8005230 <low_level_input+0x164>)
 80051c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c4:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80051c6:	2300      	movs	r3, #0
 80051c8:	613b      	str	r3, [r7, #16]
 80051ca:	e00b      	b.n	80051e4 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80051d4:	6a3b      	ldr	r3, [r7, #32]
 80051d6:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80051d8:	6a3b      	ldr	r3, [r7, #32]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	3301      	adds	r3, #1
 80051e2:	613b      	str	r3, [r7, #16]
 80051e4:	4b12      	ldr	r3, [pc, #72]	; (8005230 <low_level_input+0x164>)
 80051e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d3ee      	bcc.n	80051cc <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80051ee:	4b10      	ldr	r3, [pc, #64]	; (8005230 <low_level_input+0x164>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80051f4:	4b0e      	ldr	r3, [pc, #56]	; (8005230 <low_level_input+0x164>)
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	f241 0314 	movw	r3, #4116	; 0x1014
 80051fc:	4413      	add	r3, r2
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00d      	beq.n	8005224 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8005208:	4b09      	ldr	r3, [pc, #36]	; (8005230 <low_level_input+0x164>)
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	f241 0314 	movw	r3, #4116	; 0x1014
 8005210:	4413      	add	r3, r2
 8005212:	2280      	movs	r2, #128	; 0x80
 8005214:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8005216:	4b06      	ldr	r3, [pc, #24]	; (8005230 <low_level_input+0x164>)
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	f241 0308 	movw	r3, #4104	; 0x1008
 800521e:	4413      	add	r3, r2
 8005220:	2200      	movs	r2, #0
 8005222:	601a      	str	r2, [r3, #0]
  }
  return p;
 8005224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005226:	4618      	mov	r0, r3
 8005228:	3730      	adds	r7, #48	; 0x30
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	20005be8 	.word	0x20005be8

08005234 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005240:	4b12      	ldr	r3, [pc, #72]	; (800528c <ethernetif_input+0x58>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f04f 31ff 	mov.w	r1, #4294967295
 8005248:	4618      	mov	r0, r3
 800524a:	f000 fa8b 	bl	8005764 <osSemaphoreWait>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1f5      	bne.n	8005240 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8005254:	480e      	ldr	r0, [pc, #56]	; (8005290 <ethernetif_input+0x5c>)
 8005256:	f00f fd7d 	bl	8014d54 <sys_mutex_lock>
        p = low_level_input( netif );
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f7ff ff36 	bl	80050cc <low_level_input>
 8005260:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00a      	beq.n	800527e <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	68f9      	ldr	r1, [r7, #12]
 800526e:	68b8      	ldr	r0, [r7, #8]
 8005270:	4798      	blx	r3
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d002      	beq.n	800527e <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8005278:	68b8      	ldr	r0, [r7, #8]
 800527a:	f006 fa03 	bl	800b684 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800527e:	4804      	ldr	r0, [pc, #16]	; (8005290 <ethernetif_input+0x5c>)
 8005280:	f00f fd77 	bl	8014d72 <sys_mutex_unlock>
      } while(p!=NULL);
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1e4      	bne.n	8005254 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800528a:	e7d9      	b.n	8005240 <ethernetif_input+0xc>
 800528c:	200002fc 	.word	0x200002fc
 8005290:	20007400 	.word	0x20007400

08005294 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d106      	bne.n	80052b0 <ethernetif_init+0x1c>
 80052a2:	4b0e      	ldr	r3, [pc, #56]	; (80052dc <ethernetif_init+0x48>)
 80052a4:	f240 2235 	movw	r2, #565	; 0x235
 80052a8:	490d      	ldr	r1, [pc, #52]	; (80052e0 <ethernetif_init+0x4c>)
 80052aa:	480e      	ldr	r0, [pc, #56]	; (80052e4 <ethernetif_init+0x50>)
 80052ac:	f00f fdfa 	bl	8014ea4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2273      	movs	r2, #115	; 0x73
 80052b4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2274      	movs	r2, #116	; 0x74
 80052bc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a09      	ldr	r2, [pc, #36]	; (80052e8 <ethernetif_init+0x54>)
 80052c4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a08      	ldr	r2, [pc, #32]	; (80052ec <ethernetif_init+0x58>)
 80052ca:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f7ff fd87 	bl	8004de0 <low_level_init>

  return ERR_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3708      	adds	r7, #8
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	08016210 	.word	0x08016210
 80052e0:	0801622c 	.word	0x0801622c
 80052e4:	0801623c 	.word	0x0801623c
 80052e8:	08012cad 	.word	0x08012cad
 80052ec:	08004f91 	.word	0x08004f91

080052f0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80052f4:	f7fb fe88 	bl	8001008 <HAL_GetTick>
 80052f8:	4603      	mov	r3, r0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	bd80      	pop	{r7, pc}
	...

08005300 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005308:	2300      	movs	r3, #0
 800530a:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005310:	f107 0308 	add.w	r3, r7, #8
 8005314:	461a      	mov	r2, r3
 8005316:	2101      	movs	r1, #1
 8005318:	4816      	ldr	r0, [pc, #88]	; (8005374 <ethernetif_set_link+0x74>)
 800531a:	f7fc fbe4 	bl	8001ae6 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	f003 0304 	and.w	r3, r3, #4
 8005324:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800532e:	f003 0304 	and.w	r3, r3, #4
 8005332:	2b00      	cmp	r3, #0
 8005334:	d108      	bne.n	8005348 <ethernetif_set_link+0x48>
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d005      	beq.n	8005348 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4618      	mov	r0, r3
 8005342:	f005 fd8d 	bl	800ae60 <netif_set_link_up>
 8005346:	e011      	b.n	800536c <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005350:	089b      	lsrs	r3, r3, #2
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	b2db      	uxtb	r3, r3
 8005358:	2b00      	cmp	r3, #0
 800535a:	d007      	beq.n	800536c <ethernetif_set_link+0x6c>
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d104      	bne.n	800536c <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4618      	mov	r0, r3
 8005368:	f005 fdae 	bl	800aec8 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 800536c:	20c8      	movs	r0, #200	; 0xc8
 800536e:	f000 f916 	bl	800559e <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005372:	e7cd      	b.n	8005310 <ethernetif_set_link+0x10>
 8005374:	20005be8 	.word	0x20005be8

08005378 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8005380:	2300      	movs	r3, #0
 8005382:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8005384:	2300      	movs	r3, #0
 8005386:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800538e:	089b      	lsrs	r3, r3, #2
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d05d      	beq.n	8005456 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800539a:	4b34      	ldr	r3, [pc, #208]	; (800546c <ethernetif_update_config+0xf4>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d03f      	beq.n	8005422 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80053a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80053a6:	2100      	movs	r1, #0
 80053a8:	4830      	ldr	r0, [pc, #192]	; (800546c <ethernetif_update_config+0xf4>)
 80053aa:	f7fc fc04 	bl	8001bb6 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80053ae:	f7fb fe2b 	bl	8001008 <HAL_GetTick>
 80053b2:	4603      	mov	r3, r0
 80053b4:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80053b6:	f107 0308 	add.w	r3, r7, #8
 80053ba:	461a      	mov	r2, r3
 80053bc:	2101      	movs	r1, #1
 80053be:	482b      	ldr	r0, [pc, #172]	; (800546c <ethernetif_update_config+0xf4>)
 80053c0:	f7fc fb91 	bl	8001ae6 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80053c4:	f7fb fe20 	bl	8001008 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053d2:	d828      	bhi.n	8005426 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	f003 0320 	and.w	r3, r3, #32
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d0eb      	beq.n	80053b6 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80053de:	f107 0308 	add.w	r3, r7, #8
 80053e2:	461a      	mov	r2, r3
 80053e4:	2110      	movs	r1, #16
 80053e6:	4821      	ldr	r0, [pc, #132]	; (800546c <ethernetif_update_config+0xf4>)
 80053e8:	f7fc fb7d 	bl	8001ae6 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	f003 0304 	and.w	r3, r3, #4
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d004      	beq.n	8005400 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80053f6:	4b1d      	ldr	r3, [pc, #116]	; (800546c <ethernetif_update_config+0xf4>)
 80053f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053fc:	60da      	str	r2, [r3, #12]
 80053fe:	e002      	b.n	8005406 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005400:	4b1a      	ldr	r3, [pc, #104]	; (800546c <ethernetif_update_config+0xf4>)
 8005402:	2200      	movs	r2, #0
 8005404:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	f003 0302 	and.w	r3, r3, #2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d003      	beq.n	8005418 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8005410:	4b16      	ldr	r3, [pc, #88]	; (800546c <ethernetif_update_config+0xf4>)
 8005412:	2200      	movs	r2, #0
 8005414:	609a      	str	r2, [r3, #8]
 8005416:	e016      	b.n	8005446 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8005418:	4b14      	ldr	r3, [pc, #80]	; (800546c <ethernetif_update_config+0xf4>)
 800541a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800541e:	609a      	str	r2, [r3, #8]
 8005420:	e011      	b.n	8005446 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8005422:	bf00      	nop
 8005424:	e000      	b.n	8005428 <ethernetif_update_config+0xb0>
          goto error;
 8005426:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005428:	4b10      	ldr	r3, [pc, #64]	; (800546c <ethernetif_update_config+0xf4>)
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	08db      	lsrs	r3, r3, #3
 800542e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8005430:	4b0e      	ldr	r3, [pc, #56]	; (800546c <ethernetif_update_config+0xf4>)
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	085b      	lsrs	r3, r3, #1
 8005436:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005438:	4313      	orrs	r3, r2
 800543a:	b29b      	uxth	r3, r3
 800543c:	461a      	mov	r2, r3
 800543e:	2100      	movs	r1, #0
 8005440:	480a      	ldr	r0, [pc, #40]	; (800546c <ethernetif_update_config+0xf4>)
 8005442:	f7fc fbb8 	bl	8001bb6 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8005446:	2100      	movs	r1, #0
 8005448:	4808      	ldr	r0, [pc, #32]	; (800546c <ethernetif_update_config+0xf4>)
 800544a:	f7fc fc79 	bl	8001d40 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800544e:	4807      	ldr	r0, [pc, #28]	; (800546c <ethernetif_update_config+0xf4>)
 8005450:	f7fc fc17 	bl	8001c82 <HAL_ETH_Start>
 8005454:	e002      	b.n	800545c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8005456:	4805      	ldr	r0, [pc, #20]	; (800546c <ethernetif_update_config+0xf4>)
 8005458:	f7fc fc42 	bl	8001ce0 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 f807 	bl	8005470 <ethernetif_notify_conn_changed>
}
 8005462:	bf00      	nop
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	20005be8 	.word	0x20005be8

08005470 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	4603      	mov	r3, r0
 800548c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800548e:	2300      	movs	r3, #0
 8005490:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005492:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005496:	2b84      	cmp	r3, #132	; 0x84
 8005498:	d005      	beq.n	80054a6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800549a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	4413      	add	r3, r2
 80054a2:	3303      	adds	r3, #3
 80054a4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80054a6:	68fb      	ldr	r3, [r7, #12]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3714      	adds	r7, #20
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054ba:	f3ef 8305 	mrs	r3, IPSR
 80054be:	607b      	str	r3, [r7, #4]
  return(result);
 80054c0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	bf14      	ite	ne
 80054c6:	2301      	movne	r3, #1
 80054c8:	2300      	moveq	r3, #0
 80054ca:	b2db      	uxtb	r3, r3
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80054dc:	f001 fca6 	bl	8006e2c <vTaskStartScheduler>
  
  return osOK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80054ea:	f7ff ffe3 	bl	80054b4 <inHandlerMode>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d003      	beq.n	80054fc <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80054f4:	f001 fdba 	bl	800706c <xTaskGetTickCountFromISR>
 80054f8:	4603      	mov	r3, r0
 80054fa:	e002      	b.n	8005502 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80054fc:	f001 fda6 	bl	800704c <xTaskGetTickCount>
 8005500:	4603      	mov	r3, r0
  }
}
 8005502:	4618      	mov	r0, r3
 8005504:	bd80      	pop	{r7, pc}

08005506 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005506:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005508:	b089      	sub	sp, #36	; 0x24
 800550a:	af04      	add	r7, sp, #16
 800550c:	6078      	str	r0, [r7, #4]
 800550e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d020      	beq.n	800555a <osThreadCreate+0x54>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d01c      	beq.n	800555a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685c      	ldr	r4, [r3, #4]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681d      	ldr	r5, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	691e      	ldr	r6, [r3, #16]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005532:	4618      	mov	r0, r3
 8005534:	f7ff ffa6 	bl	8005484 <makeFreeRtosPriority>
 8005538:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005542:	9202      	str	r2, [sp, #8]
 8005544:	9301      	str	r3, [sp, #4]
 8005546:	9100      	str	r1, [sp, #0]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	4632      	mov	r2, r6
 800554c:	4629      	mov	r1, r5
 800554e:	4620      	mov	r0, r4
 8005550:	f001 fa9a 	bl	8006a88 <xTaskCreateStatic>
 8005554:	4603      	mov	r3, r0
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	e01c      	b.n	8005594 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685c      	ldr	r4, [r3, #4]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005566:	b29e      	uxth	r6, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800556e:	4618      	mov	r0, r3
 8005570:	f7ff ff88 	bl	8005484 <makeFreeRtosPriority>
 8005574:	4602      	mov	r2, r0
 8005576:	f107 030c 	add.w	r3, r7, #12
 800557a:	9301      	str	r3, [sp, #4]
 800557c:	9200      	str	r2, [sp, #0]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	4632      	mov	r2, r6
 8005582:	4629      	mov	r1, r5
 8005584:	4620      	mov	r0, r4
 8005586:	f001 fae2 	bl	8006b4e <xTaskCreate>
 800558a:	4603      	mov	r3, r0
 800558c:	2b01      	cmp	r3, #1
 800558e:	d001      	beq.n	8005594 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005590:	2300      	movs	r3, #0
 8005592:	e000      	b.n	8005596 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005594:	68fb      	ldr	r3, [r7, #12]
}
 8005596:	4618      	mov	r0, r3
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800559e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b084      	sub	sp, #16
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d001      	beq.n	80055b4 <osDelay+0x16>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	e000      	b.n	80055b6 <osDelay+0x18>
 80055b4:	2301      	movs	r3, #1
 80055b6:	4618      	mov	r0, r3
 80055b8:	f001 fc02 	bl	8006dc0 <vTaskDelay>
  
  return osOK;
 80055bc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b082      	sub	sp, #8
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d007      	beq.n	80055e6 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	4619      	mov	r1, r3
 80055dc:	2001      	movs	r0, #1
 80055de:	f000 fc54 	bl	8005e8a <xQueueCreateMutexStatic>
 80055e2:	4603      	mov	r3, r0
 80055e4:	e003      	b.n	80055ee <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80055e6:	2001      	movs	r0, #1
 80055e8:	f000 fc37 	bl	8005e5a <xQueueCreateMutex>
 80055ec:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3708      	adds	r7, #8
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
	...

080055f8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005602:	2300      	movs	r3, #0
 8005604:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <osMutexWait+0x18>
    return osErrorParameter;
 800560c:	2380      	movs	r3, #128	; 0x80
 800560e:	e03a      	b.n	8005686 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005610:	2300      	movs	r3, #0
 8005612:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561a:	d103      	bne.n	8005624 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800561c:	f04f 33ff 	mov.w	r3, #4294967295
 8005620:	60fb      	str	r3, [r7, #12]
 8005622:	e009      	b.n	8005638 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d006      	beq.n	8005638 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d101      	bne.n	8005638 <osMutexWait+0x40>
      ticks = 1;
 8005634:	2301      	movs	r3, #1
 8005636:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005638:	f7ff ff3c 	bl	80054b4 <inHandlerMode>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d017      	beq.n	8005672 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005642:	f107 0308 	add.w	r3, r7, #8
 8005646:	461a      	mov	r2, r3
 8005648:	2100      	movs	r1, #0
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f001 f86e 	bl	800672c <xQueueReceiveFromISR>
 8005650:	4603      	mov	r3, r0
 8005652:	2b01      	cmp	r3, #1
 8005654:	d001      	beq.n	800565a <osMutexWait+0x62>
      return osErrorOS;
 8005656:	23ff      	movs	r3, #255	; 0xff
 8005658:	e015      	b.n	8005686 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d011      	beq.n	8005684 <osMutexWait+0x8c>
 8005660:	4b0b      	ldr	r3, [pc, #44]	; (8005690 <osMutexWait+0x98>)
 8005662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005666:	601a      	str	r2, [r3, #0]
 8005668:	f3bf 8f4f 	dsb	sy
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	e008      	b.n	8005684 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005672:	68f9      	ldr	r1, [r7, #12]
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 ff45 	bl	8006504 <xQueueSemaphoreTake>
 800567a:	4603      	mov	r3, r0
 800567c:	2b01      	cmp	r3, #1
 800567e:	d001      	beq.n	8005684 <osMutexWait+0x8c>
    return osErrorOS;
 8005680:	23ff      	movs	r3, #255	; 0xff
 8005682:	e000      	b.n	8005686 <osMutexWait+0x8e>
  }
  
  return osOK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	e000ed04 	.word	0xe000ed04

08005694 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800569c:	2300      	movs	r3, #0
 800569e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80056a0:	2300      	movs	r3, #0
 80056a2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80056a4:	f7ff ff06 	bl	80054b4 <inHandlerMode>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d016      	beq.n	80056dc <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80056ae:	f107 0308 	add.w	r3, r7, #8
 80056b2:	4619      	mov	r1, r3
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 fda9 	bl	800620c <xQueueGiveFromISR>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d001      	beq.n	80056c4 <osMutexRelease+0x30>
      return osErrorOS;
 80056c0:	23ff      	movs	r3, #255	; 0xff
 80056c2:	e017      	b.n	80056f4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d013      	beq.n	80056f2 <osMutexRelease+0x5e>
 80056ca:	4b0c      	ldr	r3, [pc, #48]	; (80056fc <osMutexRelease+0x68>)
 80056cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056d0:	601a      	str	r2, [r3, #0]
 80056d2:	f3bf 8f4f 	dsb	sy
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	e00a      	b.n	80056f2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80056dc:	2300      	movs	r3, #0
 80056de:	2200      	movs	r2, #0
 80056e0:	2100      	movs	r1, #0
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 fbec 	bl	8005ec0 <xQueueGenericSend>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d001      	beq.n	80056f2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80056ee:	23ff      	movs	r3, #255	; 0xff
 80056f0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80056f2:	68fb      	ldr	r3, [r7, #12]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	e000ed04 	.word	0xe000ed04

08005700 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af02      	add	r7, sp, #8
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00f      	beq.n	8005732 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d10a      	bne.n	800572e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	2203      	movs	r2, #3
 800571e:	9200      	str	r2, [sp, #0]
 8005720:	2200      	movs	r2, #0
 8005722:	2100      	movs	r1, #0
 8005724:	2001      	movs	r0, #1
 8005726:	f000 fa9b 	bl	8005c60 <xQueueGenericCreateStatic>
 800572a:	4603      	mov	r3, r0
 800572c:	e016      	b.n	800575c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800572e:	2300      	movs	r3, #0
 8005730:	e014      	b.n	800575c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d110      	bne.n	800575a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8005738:	2203      	movs	r2, #3
 800573a:	2100      	movs	r1, #0
 800573c:	2001      	movs	r0, #1
 800573e:	f000 fb11 	bl	8005d64 <xQueueGenericCreate>
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d005      	beq.n	8005756 <osSemaphoreCreate+0x56>
 800574a:	2300      	movs	r3, #0
 800574c:	2200      	movs	r2, #0
 800574e:	2100      	movs	r1, #0
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f000 fbb5 	bl	8005ec0 <xQueueGenericSend>
      return sema;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	e000      	b.n	800575c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800575a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800575c:	4618      	mov	r0, r3
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800576e:	2300      	movs	r3, #0
 8005770:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d101      	bne.n	800577c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005778:	2380      	movs	r3, #128	; 0x80
 800577a:	e03a      	b.n	80057f2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800577c:	2300      	movs	r3, #0
 800577e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005786:	d103      	bne.n	8005790 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005788:	f04f 33ff 	mov.w	r3, #4294967295
 800578c:	60fb      	str	r3, [r7, #12]
 800578e:	e009      	b.n	80057a4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d006      	beq.n	80057a4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d101      	bne.n	80057a4 <osSemaphoreWait+0x40>
      ticks = 1;
 80057a0:	2301      	movs	r3, #1
 80057a2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80057a4:	f7ff fe86 	bl	80054b4 <inHandlerMode>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d017      	beq.n	80057de <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80057ae:	f107 0308 	add.w	r3, r7, #8
 80057b2:	461a      	mov	r2, r3
 80057b4:	2100      	movs	r1, #0
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 ffb8 	bl	800672c <xQueueReceiveFromISR>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d001      	beq.n	80057c6 <osSemaphoreWait+0x62>
      return osErrorOS;
 80057c2:	23ff      	movs	r3, #255	; 0xff
 80057c4:	e015      	b.n	80057f2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d011      	beq.n	80057f0 <osSemaphoreWait+0x8c>
 80057cc:	4b0b      	ldr	r3, [pc, #44]	; (80057fc <osSemaphoreWait+0x98>)
 80057ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057d2:	601a      	str	r2, [r3, #0]
 80057d4:	f3bf 8f4f 	dsb	sy
 80057d8:	f3bf 8f6f 	isb	sy
 80057dc:	e008      	b.n	80057f0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80057de:	68f9      	ldr	r1, [r7, #12]
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 fe8f 	bl	8006504 <xQueueSemaphoreTake>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d001      	beq.n	80057f0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80057ec:	23ff      	movs	r3, #255	; 0xff
 80057ee:	e000      	b.n	80057f2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	e000ed04 	.word	0xe000ed04

08005800 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005808:	2300      	movs	r3, #0
 800580a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800580c:	2300      	movs	r3, #0
 800580e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005810:	f7ff fe50 	bl	80054b4 <inHandlerMode>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d016      	beq.n	8005848 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800581a:	f107 0308 	add.w	r3, r7, #8
 800581e:	4619      	mov	r1, r3
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 fcf3 	bl	800620c <xQueueGiveFromISR>
 8005826:	4603      	mov	r3, r0
 8005828:	2b01      	cmp	r3, #1
 800582a:	d001      	beq.n	8005830 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800582c:	23ff      	movs	r3, #255	; 0xff
 800582e:	e017      	b.n	8005860 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d013      	beq.n	800585e <osSemaphoreRelease+0x5e>
 8005836:	4b0c      	ldr	r3, [pc, #48]	; (8005868 <osSemaphoreRelease+0x68>)
 8005838:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800583c:	601a      	str	r2, [r3, #0]
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	f3bf 8f6f 	isb	sy
 8005846:	e00a      	b.n	800585e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005848:	2300      	movs	r3, #0
 800584a:	2200      	movs	r2, #0
 800584c:	2100      	movs	r1, #0
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 fb36 	bl	8005ec0 <xQueueGenericSend>
 8005854:	4603      	mov	r3, r0
 8005856:	2b01      	cmp	r3, #1
 8005858:	d001      	beq.n	800585e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800585a:	23ff      	movs	r3, #255	; 0xff
 800585c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800585e:	68fb      	ldr	r3, [r7, #12]
}
 8005860:	4618      	mov	r0, r3
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	e000ed04 	.word	0xe000ed04

0800586c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800586c:	b590      	push	{r4, r7, lr}
 800586e:	b085      	sub	sp, #20
 8005870:	af02      	add	r7, sp, #8
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d011      	beq.n	80058a2 <osMessageCreate+0x36>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00d      	beq.n	80058a2 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6818      	ldr	r0, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6859      	ldr	r1, [r3, #4]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	689a      	ldr	r2, [r3, #8]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	2400      	movs	r4, #0
 8005898:	9400      	str	r4, [sp, #0]
 800589a:	f000 f9e1 	bl	8005c60 <xQueueGenericCreateStatic>
 800589e:	4603      	mov	r3, r0
 80058a0:	e008      	b.n	80058b4 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6818      	ldr	r0, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	4619      	mov	r1, r3
 80058ae:	f000 fa59 	bl	8005d64 <xQueueGenericCreate>
 80058b2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd90      	pop	{r4, r7, pc}

080058bc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80058c8:	2300      	movs	r3, #0
 80058ca:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <osMessagePut+0x1e>
    ticks = 1;
 80058d6:	2301      	movs	r3, #1
 80058d8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80058da:	f7ff fdeb 	bl	80054b4 <inHandlerMode>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d018      	beq.n	8005916 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80058e4:	f107 0210 	add.w	r2, r7, #16
 80058e8:	f107 0108 	add.w	r1, r7, #8
 80058ec:	2300      	movs	r3, #0
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f000 fbec 	bl	80060cc <xQueueGenericSendFromISR>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d001      	beq.n	80058fe <osMessagePut+0x42>
      return osErrorOS;
 80058fa:	23ff      	movs	r3, #255	; 0xff
 80058fc:	e018      	b.n	8005930 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d014      	beq.n	800592e <osMessagePut+0x72>
 8005904:	4b0c      	ldr	r3, [pc, #48]	; (8005938 <osMessagePut+0x7c>)
 8005906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800590a:	601a      	str	r2, [r3, #0]
 800590c:	f3bf 8f4f 	dsb	sy
 8005910:	f3bf 8f6f 	isb	sy
 8005914:	e00b      	b.n	800592e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005916:	f107 0108 	add.w	r1, r7, #8
 800591a:	2300      	movs	r3, #0
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	f000 face 	bl	8005ec0 <xQueueGenericSend>
 8005924:	4603      	mov	r3, r0
 8005926:	2b01      	cmp	r3, #1
 8005928:	d001      	beq.n	800592e <osMessagePut+0x72>
      return osErrorOS;
 800592a:	23ff      	movs	r3, #255	; 0xff
 800592c:	e000      	b.n	8005930 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3718      	adds	r7, #24
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	e000ed04 	.word	0xe000ed04

0800593c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800593c:	b590      	push	{r4, r7, lr}
 800593e:	b08b      	sub	sp, #44	; 0x2c
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800594c:	2300      	movs	r3, #0
 800594e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d10a      	bne.n	800596c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005956:	2380      	movs	r3, #128	; 0x80
 8005958:	617b      	str	r3, [r7, #20]
    return event;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	461c      	mov	r4, r3
 800595e:	f107 0314 	add.w	r3, r7, #20
 8005962:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005966:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800596a:	e054      	b.n	8005a16 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800596c:	2300      	movs	r3, #0
 800596e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005970:	2300      	movs	r3, #0
 8005972:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800597a:	d103      	bne.n	8005984 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800597c:	f04f 33ff 	mov.w	r3, #4294967295
 8005980:	627b      	str	r3, [r7, #36]	; 0x24
 8005982:	e009      	b.n	8005998 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d006      	beq.n	8005998 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800598e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005990:	2b00      	cmp	r3, #0
 8005992:	d101      	bne.n	8005998 <osMessageGet+0x5c>
      ticks = 1;
 8005994:	2301      	movs	r3, #1
 8005996:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005998:	f7ff fd8c 	bl	80054b4 <inHandlerMode>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d01c      	beq.n	80059dc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80059a2:	f107 0220 	add.w	r2, r7, #32
 80059a6:	f107 0314 	add.w	r3, r7, #20
 80059aa:	3304      	adds	r3, #4
 80059ac:	4619      	mov	r1, r3
 80059ae:	68b8      	ldr	r0, [r7, #8]
 80059b0:	f000 febc 	bl	800672c <xQueueReceiveFromISR>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d102      	bne.n	80059c0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80059ba:	2310      	movs	r3, #16
 80059bc:	617b      	str	r3, [r7, #20]
 80059be:	e001      	b.n	80059c4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80059c0:	2300      	movs	r3, #0
 80059c2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80059c4:	6a3b      	ldr	r3, [r7, #32]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d01d      	beq.n	8005a06 <osMessageGet+0xca>
 80059ca:	4b15      	ldr	r3, [pc, #84]	; (8005a20 <osMessageGet+0xe4>)
 80059cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	f3bf 8f4f 	dsb	sy
 80059d6:	f3bf 8f6f 	isb	sy
 80059da:	e014      	b.n	8005a06 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80059dc:	f107 0314 	add.w	r3, r7, #20
 80059e0:	3304      	adds	r3, #4
 80059e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059e4:	4619      	mov	r1, r3
 80059e6:	68b8      	ldr	r0, [r7, #8]
 80059e8:	f000 fca6 	bl	8006338 <xQueueReceive>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d102      	bne.n	80059f8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80059f2:	2310      	movs	r3, #16
 80059f4:	617b      	str	r3, [r7, #20]
 80059f6:	e006      	b.n	8005a06 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80059f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d101      	bne.n	8005a02 <osMessageGet+0xc6>
 80059fe:	2300      	movs	r3, #0
 8005a00:	e000      	b.n	8005a04 <osMessageGet+0xc8>
 8005a02:	2340      	movs	r3, #64	; 0x40
 8005a04:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	461c      	mov	r4, r3
 8005a0a:	f107 0314 	add.w	r3, r7, #20
 8005a0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005a12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	372c      	adds	r7, #44	; 0x2c
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd90      	pop	{r4, r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	e000ed04 	.word	0xe000ed04

08005a24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f103 0208 	add.w	r2, r3, #8
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f04f 32ff 	mov.w	r2, #4294967295
 8005a3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f103 0208 	add.w	r2, r3, #8
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f103 0208 	add.w	r2, r3, #8
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005a72:	bf00      	nop
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b085      	sub	sp, #20
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	689a      	ldr	r2, [r3, #8]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	683a      	ldr	r2, [r7, #0]
 8005aa8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	1c5a      	adds	r2, r3, #1
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	601a      	str	r2, [r3, #0]
}
 8005aba:	bf00      	nop
 8005abc:	3714      	adds	r7, #20
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b085      	sub	sp, #20
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
 8005ace:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005adc:	d103      	bne.n	8005ae6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	60fb      	str	r3, [r7, #12]
 8005ae4:	e00c      	b.n	8005b00 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	3308      	adds	r3, #8
 8005aea:	60fb      	str	r3, [r7, #12]
 8005aec:	e002      	b.n	8005af4 <vListInsert+0x2e>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	60fb      	str	r3, [r7, #12]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d2f6      	bcs.n	8005aee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	683a      	ldr	r2, [r7, #0]
 8005b0e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	683a      	ldr	r2, [r7, #0]
 8005b1a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	1c5a      	adds	r2, r3, #1
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	601a      	str	r2, [r3, #0]
}
 8005b2c:	bf00      	nop
 8005b2e:	3714      	adds	r7, #20
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	6892      	ldr	r2, [r2, #8]
 8005b4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	6852      	ldr	r2, [r2, #4]
 8005b58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d103      	bne.n	8005b6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	689a      	ldr	r2, [r3, #8]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	1e5a      	subs	r2, r3, #1
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10c      	bne.n	8005bba <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba4:	b672      	cpsid	i
 8005ba6:	f383 8811 	msr	BASEPRI, r3
 8005baa:	f3bf 8f6f 	isb	sy
 8005bae:	f3bf 8f4f 	dsb	sy
 8005bb2:	b662      	cpsie	i
 8005bb4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005bb6:	bf00      	nop
 8005bb8:	e7fe      	b.n	8005bb8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005bba:	f002 f8b7 	bl	8007d2c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bc6:	68f9      	ldr	r1, [r7, #12]
 8005bc8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005bca:	fb01 f303 	mul.w	r3, r1, r3
 8005bce:	441a      	add	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bea:	3b01      	subs	r3, #1
 8005bec:	68f9      	ldr	r1, [r7, #12]
 8005bee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005bf0:	fb01 f303 	mul.w	r3, r1, r3
 8005bf4:	441a      	add	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	22ff      	movs	r2, #255	; 0xff
 8005bfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	22ff      	movs	r2, #255	; 0xff
 8005c06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d114      	bne.n	8005c3a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d01a      	beq.n	8005c4e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	3310      	adds	r3, #16
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f001 fb75 	bl	800730c <xTaskRemoveFromEventList>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d012      	beq.n	8005c4e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005c28:	4b0c      	ldr	r3, [pc, #48]	; (8005c5c <xQueueGenericReset+0xd0>)
 8005c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c2e:	601a      	str	r2, [r3, #0]
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	f3bf 8f6f 	isb	sy
 8005c38:	e009      	b.n	8005c4e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	3310      	adds	r3, #16
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7ff fef0 	bl	8005a24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	3324      	adds	r3, #36	; 0x24
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7ff feeb 	bl	8005a24 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005c4e:	f002 f8a1 	bl	8007d94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005c52:	2301      	movs	r3, #1
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3710      	adds	r7, #16
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	e000ed04 	.word	0xe000ed04

08005c60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b08e      	sub	sp, #56	; 0x38
 8005c64:	af02      	add	r7, sp, #8
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
 8005c6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10c      	bne.n	8005c8e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8005c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c78:	b672      	cpsid	i
 8005c7a:	f383 8811 	msr	BASEPRI, r3
 8005c7e:	f3bf 8f6f 	isb	sy
 8005c82:	f3bf 8f4f 	dsb	sy
 8005c86:	b662      	cpsie	i
 8005c88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c8a:	bf00      	nop
 8005c8c:	e7fe      	b.n	8005c8c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d10c      	bne.n	8005cae <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8005c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c98:	b672      	cpsid	i
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	b662      	cpsie	i
 8005ca8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005caa:	bf00      	nop
 8005cac:	e7fe      	b.n	8005cac <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d002      	beq.n	8005cba <xQueueGenericCreateStatic+0x5a>
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d001      	beq.n	8005cbe <xQueueGenericCreateStatic+0x5e>
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e000      	b.n	8005cc0 <xQueueGenericCreateStatic+0x60>
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10c      	bne.n	8005cde <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8005cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc8:	b672      	cpsid	i
 8005cca:	f383 8811 	msr	BASEPRI, r3
 8005cce:	f3bf 8f6f 	isb	sy
 8005cd2:	f3bf 8f4f 	dsb	sy
 8005cd6:	b662      	cpsie	i
 8005cd8:	623b      	str	r3, [r7, #32]
}
 8005cda:	bf00      	nop
 8005cdc:	e7fe      	b.n	8005cdc <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d102      	bne.n	8005cea <xQueueGenericCreateStatic+0x8a>
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <xQueueGenericCreateStatic+0x8e>
 8005cea:	2301      	movs	r3, #1
 8005cec:	e000      	b.n	8005cf0 <xQueueGenericCreateStatic+0x90>
 8005cee:	2300      	movs	r3, #0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10c      	bne.n	8005d0e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8005cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf8:	b672      	cpsid	i
 8005cfa:	f383 8811 	msr	BASEPRI, r3
 8005cfe:	f3bf 8f6f 	isb	sy
 8005d02:	f3bf 8f4f 	dsb	sy
 8005d06:	b662      	cpsie	i
 8005d08:	61fb      	str	r3, [r7, #28]
}
 8005d0a:	bf00      	nop
 8005d0c:	e7fe      	b.n	8005d0c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005d0e:	2348      	movs	r3, #72	; 0x48
 8005d10:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	2b48      	cmp	r3, #72	; 0x48
 8005d16:	d00c      	beq.n	8005d32 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8005d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1c:	b672      	cpsid	i
 8005d1e:	f383 8811 	msr	BASEPRI, r3
 8005d22:	f3bf 8f6f 	isb	sy
 8005d26:	f3bf 8f4f 	dsb	sy
 8005d2a:	b662      	cpsie	i
 8005d2c:	61bb      	str	r3, [r7, #24]
}
 8005d2e:	bf00      	nop
 8005d30:	e7fe      	b.n	8005d30 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005d32:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00d      	beq.n	8005d5a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d46:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	68b9      	ldr	r1, [r7, #8]
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f000 f847 	bl	8005de8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3730      	adds	r7, #48	; 0x30
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b08a      	sub	sp, #40	; 0x28
 8005d68:	af02      	add	r7, sp, #8
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10c      	bne.n	8005d92 <xQueueGenericCreate+0x2e>
	__asm volatile
 8005d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7c:	b672      	cpsid	i
 8005d7e:	f383 8811 	msr	BASEPRI, r3
 8005d82:	f3bf 8f6f 	isb	sy
 8005d86:	f3bf 8f4f 	dsb	sy
 8005d8a:	b662      	cpsie	i
 8005d8c:	613b      	str	r3, [r7, #16]
}
 8005d8e:	bf00      	nop
 8005d90:	e7fe      	b.n	8005d90 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d102      	bne.n	8005d9e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	61fb      	str	r3, [r7, #28]
 8005d9c:	e004      	b.n	8005da8 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	68ba      	ldr	r2, [r7, #8]
 8005da2:	fb02 f303 	mul.w	r3, r2, r3
 8005da6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	3348      	adds	r3, #72	; 0x48
 8005dac:	4618      	mov	r0, r3
 8005dae:	f002 f8e9 	bl	8007f84 <pvPortMalloc>
 8005db2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d011      	beq.n	8005dde <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	3348      	adds	r3, #72	; 0x48
 8005dc2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005dcc:	79fa      	ldrb	r2, [r7, #7]
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	9300      	str	r3, [sp, #0]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	68b9      	ldr	r1, [r7, #8]
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f000 f805 	bl	8005de8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005dde:	69bb      	ldr	r3, [r7, #24]
	}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3720      	adds	r7, #32
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
 8005df4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d103      	bne.n	8005e04 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	601a      	str	r2, [r3, #0]
 8005e02:	e002      	b.n	8005e0a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e16:	2101      	movs	r1, #1
 8005e18:	69b8      	ldr	r0, [r7, #24]
 8005e1a:	f7ff feb7 	bl	8005b8c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005e1e:	bf00      	nop
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b082      	sub	sp, #8
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00e      	beq.n	8005e52 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005e46:	2300      	movs	r3, #0
 8005e48:	2200      	movs	r2, #0
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 f837 	bl	8005ec0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005e52:	bf00      	nop
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b086      	sub	sp, #24
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	4603      	mov	r3, r0
 8005e62:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005e64:	2301      	movs	r3, #1
 8005e66:	617b      	str	r3, [r7, #20]
 8005e68:	2300      	movs	r3, #0
 8005e6a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005e6c:	79fb      	ldrb	r3, [r7, #7]
 8005e6e:	461a      	mov	r2, r3
 8005e70:	6939      	ldr	r1, [r7, #16]
 8005e72:	6978      	ldr	r0, [r7, #20]
 8005e74:	f7ff ff76 	bl	8005d64 <xQueueGenericCreate>
 8005e78:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f7ff ffd3 	bl	8005e26 <prvInitialiseMutex>

		return xNewQueue;
 8005e80:	68fb      	ldr	r3, [r7, #12]
	}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3718      	adds	r7, #24
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b088      	sub	sp, #32
 8005e8e:	af02      	add	r7, sp, #8
 8005e90:	4603      	mov	r3, r0
 8005e92:	6039      	str	r1, [r7, #0]
 8005e94:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005e96:	2301      	movs	r3, #1
 8005e98:	617b      	str	r3, [r7, #20]
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005e9e:	79fb      	ldrb	r3, [r7, #7]
 8005ea0:	9300      	str	r3, [sp, #0]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	6939      	ldr	r1, [r7, #16]
 8005ea8:	6978      	ldr	r0, [r7, #20]
 8005eaa:	f7ff fed9 	bl	8005c60 <xQueueGenericCreateStatic>
 8005eae:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f7ff ffb8 	bl	8005e26 <prvInitialiseMutex>

		return xNewQueue;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
	}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3718      	adds	r7, #24
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b08e      	sub	sp, #56	; 0x38
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
 8005ecc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10c      	bne.n	8005ef6 <xQueueGenericSend+0x36>
	__asm volatile
 8005edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee0:	b672      	cpsid	i
 8005ee2:	f383 8811 	msr	BASEPRI, r3
 8005ee6:	f3bf 8f6f 	isb	sy
 8005eea:	f3bf 8f4f 	dsb	sy
 8005eee:	b662      	cpsie	i
 8005ef0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ef2:	bf00      	nop
 8005ef4:	e7fe      	b.n	8005ef4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d103      	bne.n	8005f04 <xQueueGenericSend+0x44>
 8005efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d101      	bne.n	8005f08 <xQueueGenericSend+0x48>
 8005f04:	2301      	movs	r3, #1
 8005f06:	e000      	b.n	8005f0a <xQueueGenericSend+0x4a>
 8005f08:	2300      	movs	r3, #0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10c      	bne.n	8005f28 <xQueueGenericSend+0x68>
	__asm volatile
 8005f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f12:	b672      	cpsid	i
 8005f14:	f383 8811 	msr	BASEPRI, r3
 8005f18:	f3bf 8f6f 	isb	sy
 8005f1c:	f3bf 8f4f 	dsb	sy
 8005f20:	b662      	cpsie	i
 8005f22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f24:	bf00      	nop
 8005f26:	e7fe      	b.n	8005f26 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d103      	bne.n	8005f36 <xQueueGenericSend+0x76>
 8005f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d101      	bne.n	8005f3a <xQueueGenericSend+0x7a>
 8005f36:	2301      	movs	r3, #1
 8005f38:	e000      	b.n	8005f3c <xQueueGenericSend+0x7c>
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10c      	bne.n	8005f5a <xQueueGenericSend+0x9a>
	__asm volatile
 8005f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f44:	b672      	cpsid	i
 8005f46:	f383 8811 	msr	BASEPRI, r3
 8005f4a:	f3bf 8f6f 	isb	sy
 8005f4e:	f3bf 8f4f 	dsb	sy
 8005f52:	b662      	cpsie	i
 8005f54:	623b      	str	r3, [r7, #32]
}
 8005f56:	bf00      	nop
 8005f58:	e7fe      	b.n	8005f58 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f5a:	f001 fb9b 	bl	8007694 <xTaskGetSchedulerState>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d102      	bne.n	8005f6a <xQueueGenericSend+0xaa>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d101      	bne.n	8005f6e <xQueueGenericSend+0xae>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e000      	b.n	8005f70 <xQueueGenericSend+0xb0>
 8005f6e:	2300      	movs	r3, #0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10c      	bne.n	8005f8e <xQueueGenericSend+0xce>
	__asm volatile
 8005f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f78:	b672      	cpsid	i
 8005f7a:	f383 8811 	msr	BASEPRI, r3
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	f3bf 8f4f 	dsb	sy
 8005f86:	b662      	cpsie	i
 8005f88:	61fb      	str	r3, [r7, #28]
}
 8005f8a:	bf00      	nop
 8005f8c:	e7fe      	b.n	8005f8c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f8e:	f001 fecd 	bl	8007d2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d302      	bcc.n	8005fa4 <xQueueGenericSend+0xe4>
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d129      	bne.n	8005ff8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fa4:	683a      	ldr	r2, [r7, #0]
 8005fa6:	68b9      	ldr	r1, [r7, #8]
 8005fa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005faa:	f000 fc5d 	bl	8006868 <prvCopyDataToQueue>
 8005fae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d010      	beq.n	8005fda <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fba:	3324      	adds	r3, #36	; 0x24
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f001 f9a5 	bl	800730c <xTaskRemoveFromEventList>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d013      	beq.n	8005ff0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005fc8:	4b3f      	ldr	r3, [pc, #252]	; (80060c8 <xQueueGenericSend+0x208>)
 8005fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fce:	601a      	str	r2, [r3, #0]
 8005fd0:	f3bf 8f4f 	dsb	sy
 8005fd4:	f3bf 8f6f 	isb	sy
 8005fd8:	e00a      	b.n	8005ff0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d007      	beq.n	8005ff0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005fe0:	4b39      	ldr	r3, [pc, #228]	; (80060c8 <xQueueGenericSend+0x208>)
 8005fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fe6:	601a      	str	r2, [r3, #0]
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005ff0:	f001 fed0 	bl	8007d94 <vPortExitCritical>
				return pdPASS;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e063      	b.n	80060c0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d103      	bne.n	8006006 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ffe:	f001 fec9 	bl	8007d94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006002:	2300      	movs	r3, #0
 8006004:	e05c      	b.n	80060c0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006008:	2b00      	cmp	r3, #0
 800600a:	d106      	bne.n	800601a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800600c:	f107 0314 	add.w	r3, r7, #20
 8006010:	4618      	mov	r0, r3
 8006012:	f001 f9df 	bl	80073d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006016:	2301      	movs	r3, #1
 8006018:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800601a:	f001 febb 	bl	8007d94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800601e:	f000 ff69 	bl	8006ef4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006022:	f001 fe83 	bl	8007d2c <vPortEnterCritical>
 8006026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006028:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800602c:	b25b      	sxtb	r3, r3
 800602e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006032:	d103      	bne.n	800603c <xQueueGenericSend+0x17c>
 8006034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006036:	2200      	movs	r2, #0
 8006038:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800603c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006042:	b25b      	sxtb	r3, r3
 8006044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006048:	d103      	bne.n	8006052 <xQueueGenericSend+0x192>
 800604a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006052:	f001 fe9f 	bl	8007d94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006056:	1d3a      	adds	r2, r7, #4
 8006058:	f107 0314 	add.w	r3, r7, #20
 800605c:	4611      	mov	r1, r2
 800605e:	4618      	mov	r0, r3
 8006060:	f001 f9ce 	bl	8007400 <xTaskCheckForTimeOut>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d124      	bne.n	80060b4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800606a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800606c:	f000 fcf4 	bl	8006a58 <prvIsQueueFull>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d018      	beq.n	80060a8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006078:	3310      	adds	r3, #16
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	4611      	mov	r1, r2
 800607e:	4618      	mov	r0, r3
 8006080:	f001 f91e 	bl	80072c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006084:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006086:	f000 fc7f 	bl	8006988 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800608a:	f000 ff41 	bl	8006f10 <xTaskResumeAll>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	f47f af7c 	bne.w	8005f8e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8006096:	4b0c      	ldr	r3, [pc, #48]	; (80060c8 <xQueueGenericSend+0x208>)
 8006098:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800609c:	601a      	str	r2, [r3, #0]
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	e772      	b.n	8005f8e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80060a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060aa:	f000 fc6d 	bl	8006988 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060ae:	f000 ff2f 	bl	8006f10 <xTaskResumeAll>
 80060b2:	e76c      	b.n	8005f8e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80060b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060b6:	f000 fc67 	bl	8006988 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060ba:	f000 ff29 	bl	8006f10 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80060be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3738      	adds	r7, #56	; 0x38
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	e000ed04 	.word	0xe000ed04

080060cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b08e      	sub	sp, #56	; 0x38
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
 80060d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80060de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d10c      	bne.n	80060fe <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80060e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e8:	b672      	cpsid	i
 80060ea:	f383 8811 	msr	BASEPRI, r3
 80060ee:	f3bf 8f6f 	isb	sy
 80060f2:	f3bf 8f4f 	dsb	sy
 80060f6:	b662      	cpsie	i
 80060f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060fa:	bf00      	nop
 80060fc:	e7fe      	b.n	80060fc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d103      	bne.n	800610c <xQueueGenericSendFromISR+0x40>
 8006104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006108:	2b00      	cmp	r3, #0
 800610a:	d101      	bne.n	8006110 <xQueueGenericSendFromISR+0x44>
 800610c:	2301      	movs	r3, #1
 800610e:	e000      	b.n	8006112 <xQueueGenericSendFromISR+0x46>
 8006110:	2300      	movs	r3, #0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10c      	bne.n	8006130 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8006116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611a:	b672      	cpsid	i
 800611c:	f383 8811 	msr	BASEPRI, r3
 8006120:	f3bf 8f6f 	isb	sy
 8006124:	f3bf 8f4f 	dsb	sy
 8006128:	b662      	cpsie	i
 800612a:	623b      	str	r3, [r7, #32]
}
 800612c:	bf00      	nop
 800612e:	e7fe      	b.n	800612e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	2b02      	cmp	r3, #2
 8006134:	d103      	bne.n	800613e <xQueueGenericSendFromISR+0x72>
 8006136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800613a:	2b01      	cmp	r3, #1
 800613c:	d101      	bne.n	8006142 <xQueueGenericSendFromISR+0x76>
 800613e:	2301      	movs	r3, #1
 8006140:	e000      	b.n	8006144 <xQueueGenericSendFromISR+0x78>
 8006142:	2300      	movs	r3, #0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10c      	bne.n	8006162 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8006148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614c:	b672      	cpsid	i
 800614e:	f383 8811 	msr	BASEPRI, r3
 8006152:	f3bf 8f6f 	isb	sy
 8006156:	f3bf 8f4f 	dsb	sy
 800615a:	b662      	cpsie	i
 800615c:	61fb      	str	r3, [r7, #28]
}
 800615e:	bf00      	nop
 8006160:	e7fe      	b.n	8006160 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006162:	f001 fecb 	bl	8007efc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006166:	f3ef 8211 	mrs	r2, BASEPRI
 800616a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616e:	b672      	cpsid	i
 8006170:	f383 8811 	msr	BASEPRI, r3
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	b662      	cpsie	i
 800617e:	61ba      	str	r2, [r7, #24]
 8006180:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006182:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006184:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800618a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800618e:	429a      	cmp	r2, r3
 8006190:	d302      	bcc.n	8006198 <xQueueGenericSendFromISR+0xcc>
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	2b02      	cmp	r3, #2
 8006196:	d12c      	bne.n	80061f2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800619e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	68b9      	ldr	r1, [r7, #8]
 80061a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061a8:	f000 fb5e 	bl	8006868 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80061ac:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80061b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b4:	d112      	bne.n	80061dc <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d016      	beq.n	80061ec <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c0:	3324      	adds	r3, #36	; 0x24
 80061c2:	4618      	mov	r0, r3
 80061c4:	f001 f8a2 	bl	800730c <xTaskRemoveFromEventList>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00e      	beq.n	80061ec <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00b      	beq.n	80061ec <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	601a      	str	r2, [r3, #0]
 80061da:	e007      	b.n	80061ec <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80061dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80061e0:	3301      	adds	r3, #1
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	b25a      	sxtb	r2, r3
 80061e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80061ec:	2301      	movs	r3, #1
 80061ee:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80061f0:	e001      	b.n	80061f6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80061f2:	2300      	movs	r3, #0
 80061f4:	637b      	str	r3, [r7, #52]	; 0x34
 80061f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006200:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006204:	4618      	mov	r0, r3
 8006206:	3738      	adds	r7, #56	; 0x38
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b08e      	sub	sp, #56	; 0x38
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800621a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621c:	2b00      	cmp	r3, #0
 800621e:	d10c      	bne.n	800623a <xQueueGiveFromISR+0x2e>
	__asm volatile
 8006220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006224:	b672      	cpsid	i
 8006226:	f383 8811 	msr	BASEPRI, r3
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	f3bf 8f4f 	dsb	sy
 8006232:	b662      	cpsie	i
 8006234:	623b      	str	r3, [r7, #32]
}
 8006236:	bf00      	nop
 8006238:	e7fe      	b.n	8006238 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800623a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00c      	beq.n	800625c <xQueueGiveFromISR+0x50>
	__asm volatile
 8006242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006246:	b672      	cpsid	i
 8006248:	f383 8811 	msr	BASEPRI, r3
 800624c:	f3bf 8f6f 	isb	sy
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	b662      	cpsie	i
 8006256:	61fb      	str	r3, [r7, #28]
}
 8006258:	bf00      	nop
 800625a:	e7fe      	b.n	800625a <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800625c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d103      	bne.n	800626c <xQueueGiveFromISR+0x60>
 8006264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d101      	bne.n	8006270 <xQueueGiveFromISR+0x64>
 800626c:	2301      	movs	r3, #1
 800626e:	e000      	b.n	8006272 <xQueueGiveFromISR+0x66>
 8006270:	2300      	movs	r3, #0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10c      	bne.n	8006290 <xQueueGiveFromISR+0x84>
	__asm volatile
 8006276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627a:	b672      	cpsid	i
 800627c:	f383 8811 	msr	BASEPRI, r3
 8006280:	f3bf 8f6f 	isb	sy
 8006284:	f3bf 8f4f 	dsb	sy
 8006288:	b662      	cpsie	i
 800628a:	61bb      	str	r3, [r7, #24]
}
 800628c:	bf00      	nop
 800628e:	e7fe      	b.n	800628e <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006290:	f001 fe34 	bl	8007efc <vPortValidateInterruptPriority>
	__asm volatile
 8006294:	f3ef 8211 	mrs	r2, BASEPRI
 8006298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629c:	b672      	cpsid	i
 800629e:	f383 8811 	msr	BASEPRI, r3
 80062a2:	f3bf 8f6f 	isb	sy
 80062a6:	f3bf 8f4f 	dsb	sy
 80062aa:	b662      	cpsie	i
 80062ac:	617a      	str	r2, [r7, #20]
 80062ae:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80062b0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80062b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80062ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d22b      	bcs.n	800631c <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80062c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80062ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d0:	1c5a      	adds	r2, r3, #1
 80062d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80062d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80062da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062de:	d112      	bne.n	8006306 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d016      	beq.n	8006316 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ea:	3324      	adds	r3, #36	; 0x24
 80062ec:	4618      	mov	r0, r3
 80062ee:	f001 f80d 	bl	800730c <xTaskRemoveFromEventList>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00e      	beq.n	8006316 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00b      	beq.n	8006316 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	2201      	movs	r2, #1
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	e007      	b.n	8006316 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006306:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800630a:	3301      	adds	r3, #1
 800630c:	b2db      	uxtb	r3, r3
 800630e:	b25a      	sxtb	r2, r3
 8006310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006312:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006316:	2301      	movs	r3, #1
 8006318:	637b      	str	r3, [r7, #52]	; 0x34
 800631a:	e001      	b.n	8006320 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800631c:	2300      	movs	r3, #0
 800631e:	637b      	str	r3, [r7, #52]	; 0x34
 8006320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006322:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f383 8811 	msr	BASEPRI, r3
}
 800632a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800632c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800632e:	4618      	mov	r0, r3
 8006330:	3738      	adds	r7, #56	; 0x38
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
	...

08006338 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b08c      	sub	sp, #48	; 0x30
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006344:	2300      	movs	r3, #0
 8006346:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800634c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10c      	bne.n	800636c <xQueueReceive+0x34>
	__asm volatile
 8006352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006356:	b672      	cpsid	i
 8006358:	f383 8811 	msr	BASEPRI, r3
 800635c:	f3bf 8f6f 	isb	sy
 8006360:	f3bf 8f4f 	dsb	sy
 8006364:	b662      	cpsie	i
 8006366:	623b      	str	r3, [r7, #32]
}
 8006368:	bf00      	nop
 800636a:	e7fe      	b.n	800636a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d103      	bne.n	800637a <xQueueReceive+0x42>
 8006372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006376:	2b00      	cmp	r3, #0
 8006378:	d101      	bne.n	800637e <xQueueReceive+0x46>
 800637a:	2301      	movs	r3, #1
 800637c:	e000      	b.n	8006380 <xQueueReceive+0x48>
 800637e:	2300      	movs	r3, #0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10c      	bne.n	800639e <xQueueReceive+0x66>
	__asm volatile
 8006384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006388:	b672      	cpsid	i
 800638a:	f383 8811 	msr	BASEPRI, r3
 800638e:	f3bf 8f6f 	isb	sy
 8006392:	f3bf 8f4f 	dsb	sy
 8006396:	b662      	cpsie	i
 8006398:	61fb      	str	r3, [r7, #28]
}
 800639a:	bf00      	nop
 800639c:	e7fe      	b.n	800639c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800639e:	f001 f979 	bl	8007694 <xTaskGetSchedulerState>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d102      	bne.n	80063ae <xQueueReceive+0x76>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <xQueueReceive+0x7a>
 80063ae:	2301      	movs	r3, #1
 80063b0:	e000      	b.n	80063b4 <xQueueReceive+0x7c>
 80063b2:	2300      	movs	r3, #0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d10c      	bne.n	80063d2 <xQueueReceive+0x9a>
	__asm volatile
 80063b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063bc:	b672      	cpsid	i
 80063be:	f383 8811 	msr	BASEPRI, r3
 80063c2:	f3bf 8f6f 	isb	sy
 80063c6:	f3bf 8f4f 	dsb	sy
 80063ca:	b662      	cpsie	i
 80063cc:	61bb      	str	r3, [r7, #24]
}
 80063ce:	bf00      	nop
 80063d0:	e7fe      	b.n	80063d0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063d2:	f001 fcab 	bl	8007d2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d01f      	beq.n	8006422 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80063e2:	68b9      	ldr	r1, [r7, #8]
 80063e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063e6:	f000 faa9 	bl	800693c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80063ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ec:	1e5a      	subs	r2, r3, #1
 80063ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00f      	beq.n	800641a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fc:	3310      	adds	r3, #16
 80063fe:	4618      	mov	r0, r3
 8006400:	f000 ff84 	bl	800730c <xTaskRemoveFromEventList>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d007      	beq.n	800641a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800640a:	4b3d      	ldr	r3, [pc, #244]	; (8006500 <xQueueReceive+0x1c8>)
 800640c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006410:	601a      	str	r2, [r3, #0]
 8006412:	f3bf 8f4f 	dsb	sy
 8006416:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800641a:	f001 fcbb 	bl	8007d94 <vPortExitCritical>
				return pdPASS;
 800641e:	2301      	movs	r3, #1
 8006420:	e069      	b.n	80064f6 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d103      	bne.n	8006430 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006428:	f001 fcb4 	bl	8007d94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800642c:	2300      	movs	r3, #0
 800642e:	e062      	b.n	80064f6 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006432:	2b00      	cmp	r3, #0
 8006434:	d106      	bne.n	8006444 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006436:	f107 0310 	add.w	r3, r7, #16
 800643a:	4618      	mov	r0, r3
 800643c:	f000 ffca 	bl	80073d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006440:	2301      	movs	r3, #1
 8006442:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006444:	f001 fca6 	bl	8007d94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006448:	f000 fd54 	bl	8006ef4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800644c:	f001 fc6e 	bl	8007d2c <vPortEnterCritical>
 8006450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006452:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006456:	b25b      	sxtb	r3, r3
 8006458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800645c:	d103      	bne.n	8006466 <xQueueReceive+0x12e>
 800645e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006468:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800646c:	b25b      	sxtb	r3, r3
 800646e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006472:	d103      	bne.n	800647c <xQueueReceive+0x144>
 8006474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006476:	2200      	movs	r2, #0
 8006478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800647c:	f001 fc8a 	bl	8007d94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006480:	1d3a      	adds	r2, r7, #4
 8006482:	f107 0310 	add.w	r3, r7, #16
 8006486:	4611      	mov	r1, r2
 8006488:	4618      	mov	r0, r3
 800648a:	f000 ffb9 	bl	8007400 <xTaskCheckForTimeOut>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d123      	bne.n	80064dc <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006494:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006496:	f000 fac9 	bl	8006a2c <prvIsQueueEmpty>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d017      	beq.n	80064d0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80064a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a2:	3324      	adds	r3, #36	; 0x24
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	4611      	mov	r1, r2
 80064a8:	4618      	mov	r0, r3
 80064aa:	f000 ff09 	bl	80072c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80064ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064b0:	f000 fa6a 	bl	8006988 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80064b4:	f000 fd2c 	bl	8006f10 <xTaskResumeAll>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d189      	bne.n	80063d2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80064be:	4b10      	ldr	r3, [pc, #64]	; (8006500 <xQueueReceive+0x1c8>)
 80064c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064c4:	601a      	str	r2, [r3, #0]
 80064c6:	f3bf 8f4f 	dsb	sy
 80064ca:	f3bf 8f6f 	isb	sy
 80064ce:	e780      	b.n	80063d2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80064d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064d2:	f000 fa59 	bl	8006988 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064d6:	f000 fd1b 	bl	8006f10 <xTaskResumeAll>
 80064da:	e77a      	b.n	80063d2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80064dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064de:	f000 fa53 	bl	8006988 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064e2:	f000 fd15 	bl	8006f10 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064e8:	f000 faa0 	bl	8006a2c <prvIsQueueEmpty>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f43f af6f 	beq.w	80063d2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80064f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3730      	adds	r7, #48	; 0x30
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	e000ed04 	.word	0xe000ed04

08006504 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b08e      	sub	sp, #56	; 0x38
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800650e:	2300      	movs	r3, #0
 8006510:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006516:	2300      	movs	r3, #0
 8006518:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800651a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651c:	2b00      	cmp	r3, #0
 800651e:	d10c      	bne.n	800653a <xQueueSemaphoreTake+0x36>
	__asm volatile
 8006520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006524:	b672      	cpsid	i
 8006526:	f383 8811 	msr	BASEPRI, r3
 800652a:	f3bf 8f6f 	isb	sy
 800652e:	f3bf 8f4f 	dsb	sy
 8006532:	b662      	cpsie	i
 8006534:	623b      	str	r3, [r7, #32]
}
 8006536:	bf00      	nop
 8006538:	e7fe      	b.n	8006538 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800653a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00c      	beq.n	800655c <xQueueSemaphoreTake+0x58>
	__asm volatile
 8006542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006546:	b672      	cpsid	i
 8006548:	f383 8811 	msr	BASEPRI, r3
 800654c:	f3bf 8f6f 	isb	sy
 8006550:	f3bf 8f4f 	dsb	sy
 8006554:	b662      	cpsie	i
 8006556:	61fb      	str	r3, [r7, #28]
}
 8006558:	bf00      	nop
 800655a:	e7fe      	b.n	800655a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800655c:	f001 f89a 	bl	8007694 <xTaskGetSchedulerState>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d102      	bne.n	800656c <xQueueSemaphoreTake+0x68>
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d101      	bne.n	8006570 <xQueueSemaphoreTake+0x6c>
 800656c:	2301      	movs	r3, #1
 800656e:	e000      	b.n	8006572 <xQueueSemaphoreTake+0x6e>
 8006570:	2300      	movs	r3, #0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10c      	bne.n	8006590 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8006576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657a:	b672      	cpsid	i
 800657c:	f383 8811 	msr	BASEPRI, r3
 8006580:	f3bf 8f6f 	isb	sy
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	b662      	cpsie	i
 800658a:	61bb      	str	r3, [r7, #24]
}
 800658c:	bf00      	nop
 800658e:	e7fe      	b.n	800658e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006590:	f001 fbcc 	bl	8007d2c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006598:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800659a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659c:	2b00      	cmp	r3, #0
 800659e:	d024      	beq.n	80065ea <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80065a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a2:	1e5a      	subs	r2, r3, #1
 80065a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d104      	bne.n	80065ba <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80065b0:	f001 fa36 	bl	8007a20 <pvTaskIncrementMutexHeldCount>
 80065b4:	4602      	mov	r2, r0
 80065b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00f      	beq.n	80065e2 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c4:	3310      	adds	r3, #16
 80065c6:	4618      	mov	r0, r3
 80065c8:	f000 fea0 	bl	800730c <xTaskRemoveFromEventList>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d007      	beq.n	80065e2 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80065d2:	4b55      	ldr	r3, [pc, #340]	; (8006728 <xQueueSemaphoreTake+0x224>)
 80065d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065d8:	601a      	str	r2, [r3, #0]
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80065e2:	f001 fbd7 	bl	8007d94 <vPortExitCritical>
				return pdPASS;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e099      	b.n	800671e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d113      	bne.n	8006618 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80065f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00c      	beq.n	8006610 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 80065f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fa:	b672      	cpsid	i
 80065fc:	f383 8811 	msr	BASEPRI, r3
 8006600:	f3bf 8f6f 	isb	sy
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	b662      	cpsie	i
 800660a:	617b      	str	r3, [r7, #20]
}
 800660c:	bf00      	nop
 800660e:	e7fe      	b.n	800660e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006610:	f001 fbc0 	bl	8007d94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006614:	2300      	movs	r3, #0
 8006616:	e082      	b.n	800671e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800661a:	2b00      	cmp	r3, #0
 800661c:	d106      	bne.n	800662c <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800661e:	f107 030c 	add.w	r3, r7, #12
 8006622:	4618      	mov	r0, r3
 8006624:	f000 fed6 	bl	80073d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006628:	2301      	movs	r3, #1
 800662a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800662c:	f001 fbb2 	bl	8007d94 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006630:	f000 fc60 	bl	8006ef4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006634:	f001 fb7a 	bl	8007d2c <vPortEnterCritical>
 8006638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800663e:	b25b      	sxtb	r3, r3
 8006640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006644:	d103      	bne.n	800664e <xQueueSemaphoreTake+0x14a>
 8006646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006648:	2200      	movs	r2, #0
 800664a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800664e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006650:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006654:	b25b      	sxtb	r3, r3
 8006656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800665a:	d103      	bne.n	8006664 <xQueueSemaphoreTake+0x160>
 800665c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665e:	2200      	movs	r2, #0
 8006660:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006664:	f001 fb96 	bl	8007d94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006668:	463a      	mov	r2, r7
 800666a:	f107 030c 	add.w	r3, r7, #12
 800666e:	4611      	mov	r1, r2
 8006670:	4618      	mov	r0, r3
 8006672:	f000 fec5 	bl	8007400 <xTaskCheckForTimeOut>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d132      	bne.n	80066e2 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800667c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800667e:	f000 f9d5 	bl	8006a2c <prvIsQueueEmpty>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d026      	beq.n	80066d6 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d109      	bne.n	80066a4 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8006690:	f001 fb4c 	bl	8007d2c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	4618      	mov	r0, r3
 800669a:	f001 f819 	bl	80076d0 <xTaskPriorityInherit>
 800669e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80066a0:	f001 fb78 	bl	8007d94 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80066a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a6:	3324      	adds	r3, #36	; 0x24
 80066a8:	683a      	ldr	r2, [r7, #0]
 80066aa:	4611      	mov	r1, r2
 80066ac:	4618      	mov	r0, r3
 80066ae:	f000 fe07 	bl	80072c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80066b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066b4:	f000 f968 	bl	8006988 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80066b8:	f000 fc2a 	bl	8006f10 <xTaskResumeAll>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f47f af66 	bne.w	8006590 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80066c4:	4b18      	ldr	r3, [pc, #96]	; (8006728 <xQueueSemaphoreTake+0x224>)
 80066c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066ca:	601a      	str	r2, [r3, #0]
 80066cc:	f3bf 8f4f 	dsb	sy
 80066d0:	f3bf 8f6f 	isb	sy
 80066d4:	e75c      	b.n	8006590 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80066d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066d8:	f000 f956 	bl	8006988 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066dc:	f000 fc18 	bl	8006f10 <xTaskResumeAll>
 80066e0:	e756      	b.n	8006590 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80066e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066e4:	f000 f950 	bl	8006988 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066e8:	f000 fc12 	bl	8006f10 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066ee:	f000 f99d 	bl	8006a2c <prvIsQueueEmpty>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f43f af4b 	beq.w	8006590 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80066fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00d      	beq.n	800671c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8006700:	f001 fb14 	bl	8007d2c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006704:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006706:	f000 f897 	bl	8006838 <prvGetDisinheritPriorityAfterTimeout>
 800670a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800670c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006712:	4618      	mov	r0, r3
 8006714:	f001 f8e6 	bl	80078e4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006718:	f001 fb3c 	bl	8007d94 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800671c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800671e:	4618      	mov	r0, r3
 8006720:	3738      	adds	r7, #56	; 0x38
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	e000ed04 	.word	0xe000ed04

0800672c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b08e      	sub	sp, #56	; 0x38
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800673c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10c      	bne.n	800675c <xQueueReceiveFromISR+0x30>
	__asm volatile
 8006742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006746:	b672      	cpsid	i
 8006748:	f383 8811 	msr	BASEPRI, r3
 800674c:	f3bf 8f6f 	isb	sy
 8006750:	f3bf 8f4f 	dsb	sy
 8006754:	b662      	cpsie	i
 8006756:	623b      	str	r3, [r7, #32]
}
 8006758:	bf00      	nop
 800675a:	e7fe      	b.n	800675a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d103      	bne.n	800676a <xQueueReceiveFromISR+0x3e>
 8006762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006766:	2b00      	cmp	r3, #0
 8006768:	d101      	bne.n	800676e <xQueueReceiveFromISR+0x42>
 800676a:	2301      	movs	r3, #1
 800676c:	e000      	b.n	8006770 <xQueueReceiveFromISR+0x44>
 800676e:	2300      	movs	r3, #0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d10c      	bne.n	800678e <xQueueReceiveFromISR+0x62>
	__asm volatile
 8006774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006778:	b672      	cpsid	i
 800677a:	f383 8811 	msr	BASEPRI, r3
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	f3bf 8f4f 	dsb	sy
 8006786:	b662      	cpsie	i
 8006788:	61fb      	str	r3, [r7, #28]
}
 800678a:	bf00      	nop
 800678c:	e7fe      	b.n	800678c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800678e:	f001 fbb5 	bl	8007efc <vPortValidateInterruptPriority>
	__asm volatile
 8006792:	f3ef 8211 	mrs	r2, BASEPRI
 8006796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679a:	b672      	cpsid	i
 800679c:	f383 8811 	msr	BASEPRI, r3
 80067a0:	f3bf 8f6f 	isb	sy
 80067a4:	f3bf 8f4f 	dsb	sy
 80067a8:	b662      	cpsie	i
 80067aa:	61ba      	str	r2, [r7, #24]
 80067ac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80067ae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d02f      	beq.n	800681e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80067be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80067c8:	68b9      	ldr	r1, [r7, #8]
 80067ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067cc:	f000 f8b6 	bl	800693c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80067d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d2:	1e5a      	subs	r2, r3, #1
 80067d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80067d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80067dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e0:	d112      	bne.n	8006808 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d016      	beq.n	8006818 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ec:	3310      	adds	r3, #16
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 fd8c 	bl	800730c <xTaskRemoveFromEventList>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00e      	beq.n	8006818 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00b      	beq.n	8006818 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	601a      	str	r2, [r3, #0]
 8006806:	e007      	b.n	8006818 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006808:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800680c:	3301      	adds	r3, #1
 800680e:	b2db      	uxtb	r3, r3
 8006810:	b25a      	sxtb	r2, r3
 8006812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006818:	2301      	movs	r3, #1
 800681a:	637b      	str	r3, [r7, #52]	; 0x34
 800681c:	e001      	b.n	8006822 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800681e:	2300      	movs	r3, #0
 8006820:	637b      	str	r3, [r7, #52]	; 0x34
 8006822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006824:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	f383 8811 	msr	BASEPRI, r3
}
 800682c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800682e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006830:	4618      	mov	r0, r3
 8006832:	3738      	adds	r7, #56	; 0x38
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006844:	2b00      	cmp	r3, #0
 8006846:	d006      	beq.n	8006856 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f1c3 0307 	rsb	r3, r3, #7
 8006852:	60fb      	str	r3, [r7, #12]
 8006854:	e001      	b.n	800685a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006856:	2300      	movs	r3, #0
 8006858:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800685a:	68fb      	ldr	r3, [r7, #12]
	}
 800685c:	4618      	mov	r0, r3
 800685e:	3714      	adds	r7, #20
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006874:	2300      	movs	r3, #0
 8006876:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10d      	bne.n	80068a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d14d      	bne.n	800692a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	4618      	mov	r0, r3
 8006894:	f000 ff9c 	bl	80077d0 <xTaskPriorityDisinherit>
 8006898:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	609a      	str	r2, [r3, #8]
 80068a0:	e043      	b.n	800692a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d119      	bne.n	80068dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6858      	ldr	r0, [r3, #4]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b0:	461a      	mov	r2, r3
 80068b2:	68b9      	ldr	r1, [r7, #8]
 80068b4:	f00e fae0 	bl	8014e78 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	685a      	ldr	r2, [r3, #4]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c0:	441a      	add	r2, r3
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	685a      	ldr	r2, [r3, #4]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d32b      	bcc.n	800692a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	605a      	str	r2, [r3, #4]
 80068da:	e026      	b.n	800692a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	68d8      	ldr	r0, [r3, #12]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e4:	461a      	mov	r2, r3
 80068e6:	68b9      	ldr	r1, [r7, #8]
 80068e8:	f00e fac6 	bl	8014e78 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	68da      	ldr	r2, [r3, #12]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f4:	425b      	negs	r3, r3
 80068f6:	441a      	add	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	68da      	ldr	r2, [r3, #12]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	429a      	cmp	r2, r3
 8006906:	d207      	bcs.n	8006918 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	689a      	ldr	r2, [r3, #8]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006910:	425b      	negs	r3, r3
 8006912:	441a      	add	r2, r3
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2b02      	cmp	r3, #2
 800691c:	d105      	bne.n	800692a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d002      	beq.n	800692a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	3b01      	subs	r3, #1
 8006928:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	1c5a      	adds	r2, r3, #1
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006932:	697b      	ldr	r3, [r7, #20]
}
 8006934:	4618      	mov	r0, r3
 8006936:	3718      	adds	r7, #24
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694a:	2b00      	cmp	r3, #0
 800694c:	d018      	beq.n	8006980 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	68da      	ldr	r2, [r3, #12]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006956:	441a      	add	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	68da      	ldr	r2, [r3, #12]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	429a      	cmp	r2, r3
 8006966:	d303      	bcc.n	8006970 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	68d9      	ldr	r1, [r3, #12]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006978:	461a      	mov	r2, r3
 800697a:	6838      	ldr	r0, [r7, #0]
 800697c:	f00e fa7c 	bl	8014e78 <memcpy>
	}
}
 8006980:	bf00      	nop
 8006982:	3708      	adds	r7, #8
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006990:	f001 f9cc 	bl	8007d2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800699a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800699c:	e011      	b.n	80069c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d012      	beq.n	80069cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	3324      	adds	r3, #36	; 0x24
 80069aa:	4618      	mov	r0, r3
 80069ac:	f000 fcae 	bl	800730c <xTaskRemoveFromEventList>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d001      	beq.n	80069ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80069b6:	f000 fd89 	bl	80074cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80069ba:	7bfb      	ldrb	r3, [r7, #15]
 80069bc:	3b01      	subs	r3, #1
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	dce9      	bgt.n	800699e <prvUnlockQueue+0x16>
 80069ca:	e000      	b.n	80069ce <prvUnlockQueue+0x46>
					break;
 80069cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	22ff      	movs	r2, #255	; 0xff
 80069d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80069d6:	f001 f9dd 	bl	8007d94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80069da:	f001 f9a7 	bl	8007d2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069e6:	e011      	b.n	8006a0c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d012      	beq.n	8006a16 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	3310      	adds	r3, #16
 80069f4:	4618      	mov	r0, r3
 80069f6:	f000 fc89 	bl	800730c <xTaskRemoveFromEventList>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d001      	beq.n	8006a04 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006a00:	f000 fd64 	bl	80074cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a04:	7bbb      	ldrb	r3, [r7, #14]
 8006a06:	3b01      	subs	r3, #1
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	dce9      	bgt.n	80069e8 <prvUnlockQueue+0x60>
 8006a14:	e000      	b.n	8006a18 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a16:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	22ff      	movs	r2, #255	; 0xff
 8006a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006a20:	f001 f9b8 	bl	8007d94 <vPortExitCritical>
}
 8006a24:	bf00      	nop
 8006a26:	3710      	adds	r7, #16
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a34:	f001 f97a 	bl	8007d2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d102      	bne.n	8006a46 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a40:	2301      	movs	r3, #1
 8006a42:	60fb      	str	r3, [r7, #12]
 8006a44:	e001      	b.n	8006a4a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a46:	2300      	movs	r3, #0
 8006a48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a4a:	f001 f9a3 	bl	8007d94 <vPortExitCritical>

	return xReturn;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3710      	adds	r7, #16
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a60:	f001 f964 	bl	8007d2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d102      	bne.n	8006a76 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a70:	2301      	movs	r3, #1
 8006a72:	60fb      	str	r3, [r7, #12]
 8006a74:	e001      	b.n	8006a7a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a76:	2300      	movs	r3, #0
 8006a78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a7a:	f001 f98b 	bl	8007d94 <vPortExitCritical>

	return xReturn;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3710      	adds	r7, #16
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b08e      	sub	sp, #56	; 0x38
 8006a8c:	af04      	add	r7, sp, #16
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	607a      	str	r2, [r7, #4]
 8006a94:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10c      	bne.n	8006ab6 <xTaskCreateStatic+0x2e>
	__asm volatile
 8006a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa0:	b672      	cpsid	i
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	b662      	cpsie	i
 8006ab0:	623b      	str	r3, [r7, #32]
}
 8006ab2:	bf00      	nop
 8006ab4:	e7fe      	b.n	8006ab4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10c      	bne.n	8006ad6 <xTaskCreateStatic+0x4e>
	__asm volatile
 8006abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac0:	b672      	cpsid	i
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	b662      	cpsie	i
 8006ad0:	61fb      	str	r3, [r7, #28]
}
 8006ad2:	bf00      	nop
 8006ad4:	e7fe      	b.n	8006ad4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006ad6:	2354      	movs	r3, #84	; 0x54
 8006ad8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	2b54      	cmp	r3, #84	; 0x54
 8006ade:	d00c      	beq.n	8006afa <xTaskCreateStatic+0x72>
	__asm volatile
 8006ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae4:	b672      	cpsid	i
 8006ae6:	f383 8811 	msr	BASEPRI, r3
 8006aea:	f3bf 8f6f 	isb	sy
 8006aee:	f3bf 8f4f 	dsb	sy
 8006af2:	b662      	cpsie	i
 8006af4:	61bb      	str	r3, [r7, #24]
}
 8006af6:	bf00      	nop
 8006af8:	e7fe      	b.n	8006af8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006afa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d01e      	beq.n	8006b40 <xTaskCreateStatic+0xb8>
 8006b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d01b      	beq.n	8006b40 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b10:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b14:	2202      	movs	r2, #2
 8006b16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	9303      	str	r3, [sp, #12]
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b20:	9302      	str	r3, [sp, #8]
 8006b22:	f107 0314 	add.w	r3, r7, #20
 8006b26:	9301      	str	r3, [sp, #4]
 8006b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2a:	9300      	str	r3, [sp, #0]
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	68b9      	ldr	r1, [r7, #8]
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f000 f850 	bl	8006bd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b3a:	f000 f8d7 	bl	8006cec <prvAddNewTaskToReadyList>
 8006b3e:	e001      	b.n	8006b44 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8006b40:	2300      	movs	r3, #0
 8006b42:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006b44:	697b      	ldr	r3, [r7, #20]
	}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3728      	adds	r7, #40	; 0x28
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b08c      	sub	sp, #48	; 0x30
 8006b52:	af04      	add	r7, sp, #16
 8006b54:	60f8      	str	r0, [r7, #12]
 8006b56:	60b9      	str	r1, [r7, #8]
 8006b58:	603b      	str	r3, [r7, #0]
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006b5e:	88fb      	ldrh	r3, [r7, #6]
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	4618      	mov	r0, r3
 8006b64:	f001 fa0e 	bl	8007f84 <pvPortMalloc>
 8006b68:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00e      	beq.n	8006b8e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006b70:	2054      	movs	r0, #84	; 0x54
 8006b72:	f001 fa07 	bl	8007f84 <pvPortMalloc>
 8006b76:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d003      	beq.n	8006b86 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	697a      	ldr	r2, [r7, #20]
 8006b82:	631a      	str	r2, [r3, #48]	; 0x30
 8006b84:	e005      	b.n	8006b92 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006b86:	6978      	ldr	r0, [r7, #20]
 8006b88:	f001 fac6 	bl	8008118 <vPortFree>
 8006b8c:	e001      	b.n	8006b92 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d017      	beq.n	8006bc8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006ba0:	88fa      	ldrh	r2, [r7, #6]
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	9303      	str	r3, [sp, #12]
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	9302      	str	r3, [sp, #8]
 8006baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bac:	9301      	str	r3, [sp, #4]
 8006bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb0:	9300      	str	r3, [sp, #0]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	68b9      	ldr	r1, [r7, #8]
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f000 f80e 	bl	8006bd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bbc:	69f8      	ldr	r0, [r7, #28]
 8006bbe:	f000 f895 	bl	8006cec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	61bb      	str	r3, [r7, #24]
 8006bc6:	e002      	b.n	8006bce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8006bcc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006bce:	69bb      	ldr	r3, [r7, #24]
	}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3720      	adds	r7, #32
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b088      	sub	sp, #32
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	607a      	str	r2, [r7, #4]
 8006be4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bea:	6879      	ldr	r1, [r7, #4]
 8006bec:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006bf0:	440b      	add	r3, r1
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4413      	add	r3, r2
 8006bf6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	f023 0307 	bic.w	r3, r3, #7
 8006bfe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	f003 0307 	and.w	r3, r3, #7
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00c      	beq.n	8006c24 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8006c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0e:	b672      	cpsid	i
 8006c10:	f383 8811 	msr	BASEPRI, r3
 8006c14:	f3bf 8f6f 	isb	sy
 8006c18:	f3bf 8f4f 	dsb	sy
 8006c1c:	b662      	cpsie	i
 8006c1e:	617b      	str	r3, [r7, #20]
}
 8006c20:	bf00      	nop
 8006c22:	e7fe      	b.n	8006c22 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d01f      	beq.n	8006c6a <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	61fb      	str	r3, [r7, #28]
 8006c2e:	e012      	b.n	8006c56 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	4413      	add	r3, r2
 8006c36:	7819      	ldrb	r1, [r3, #0]
 8006c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	3334      	adds	r3, #52	; 0x34
 8006c40:	460a      	mov	r2, r1
 8006c42:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006c44:	68ba      	ldr	r2, [r7, #8]
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	4413      	add	r3, r2
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d006      	beq.n	8006c5e <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	3301      	adds	r3, #1
 8006c54:	61fb      	str	r3, [r7, #28]
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	2b0f      	cmp	r3, #15
 8006c5a:	d9e9      	bls.n	8006c30 <prvInitialiseNewTask+0x58>
 8006c5c:	e000      	b.n	8006c60 <prvInitialiseNewTask+0x88>
			{
				break;
 8006c5e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c68:	e003      	b.n	8006c72 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c74:	2b06      	cmp	r3, #6
 8006c76:	d901      	bls.n	8006c7c <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c78:	2306      	movs	r3, #6
 8006c7a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c80:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c86:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c90:	3304      	adds	r3, #4
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7fe fee6 	bl	8005a64 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9a:	3318      	adds	r3, #24
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7fe fee1 	bl	8005a64 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ca6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006caa:	f1c3 0207 	rsb	r2, r3, #7
 8006cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cb6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cba:	2200      	movs	r2, #0
 8006cbc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006cc6:	683a      	ldr	r2, [r7, #0]
 8006cc8:	68f9      	ldr	r1, [r7, #12]
 8006cca:	69b8      	ldr	r0, [r7, #24]
 8006ccc:	f000 ff22 	bl	8007b14 <pxPortInitialiseStack>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d002      	beq.n	8006ce2 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ce0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ce2:	bf00      	nop
 8006ce4:	3720      	adds	r7, #32
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
	...

08006cec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006cf4:	f001 f81a 	bl	8007d2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006cf8:	4b2a      	ldr	r3, [pc, #168]	; (8006da4 <prvAddNewTaskToReadyList+0xb8>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	4a29      	ldr	r2, [pc, #164]	; (8006da4 <prvAddNewTaskToReadyList+0xb8>)
 8006d00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d02:	4b29      	ldr	r3, [pc, #164]	; (8006da8 <prvAddNewTaskToReadyList+0xbc>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d109      	bne.n	8006d1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006d0a:	4a27      	ldr	r2, [pc, #156]	; (8006da8 <prvAddNewTaskToReadyList+0xbc>)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006d10:	4b24      	ldr	r3, [pc, #144]	; (8006da4 <prvAddNewTaskToReadyList+0xb8>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d110      	bne.n	8006d3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006d18:	f000 fbfc 	bl	8007514 <prvInitialiseTaskLists>
 8006d1c:	e00d      	b.n	8006d3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006d1e:	4b23      	ldr	r3, [pc, #140]	; (8006dac <prvAddNewTaskToReadyList+0xc0>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d109      	bne.n	8006d3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006d26:	4b20      	ldr	r3, [pc, #128]	; (8006da8 <prvAddNewTaskToReadyList+0xbc>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d802      	bhi.n	8006d3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006d34:	4a1c      	ldr	r2, [pc, #112]	; (8006da8 <prvAddNewTaskToReadyList+0xbc>)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006d3a:	4b1d      	ldr	r3, [pc, #116]	; (8006db0 <prvAddNewTaskToReadyList+0xc4>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	4a1b      	ldr	r2, [pc, #108]	; (8006db0 <prvAddNewTaskToReadyList+0xc4>)
 8006d42:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d48:	2201      	movs	r2, #1
 8006d4a:	409a      	lsls	r2, r3
 8006d4c:	4b19      	ldr	r3, [pc, #100]	; (8006db4 <prvAddNewTaskToReadyList+0xc8>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	4a18      	ldr	r2, [pc, #96]	; (8006db4 <prvAddNewTaskToReadyList+0xc8>)
 8006d54:	6013      	str	r3, [r2, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	4413      	add	r3, r2
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	4a15      	ldr	r2, [pc, #84]	; (8006db8 <prvAddNewTaskToReadyList+0xcc>)
 8006d64:	441a      	add	r2, r3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	3304      	adds	r3, #4
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	4610      	mov	r0, r2
 8006d6e:	f7fe fe86 	bl	8005a7e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d72:	f001 f80f 	bl	8007d94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d76:	4b0d      	ldr	r3, [pc, #52]	; (8006dac <prvAddNewTaskToReadyList+0xc0>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00e      	beq.n	8006d9c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d7e:	4b0a      	ldr	r3, [pc, #40]	; (8006da8 <prvAddNewTaskToReadyList+0xbc>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d207      	bcs.n	8006d9c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d8c:	4b0b      	ldr	r3, [pc, #44]	; (8006dbc <prvAddNewTaskToReadyList+0xd0>)
 8006d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d92:	601a      	str	r2, [r3, #0]
 8006d94:	f3bf 8f4f 	dsb	sy
 8006d98:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d9c:	bf00      	nop
 8006d9e:	3708      	adds	r7, #8
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	20000400 	.word	0x20000400
 8006da8:	20000300 	.word	0x20000300
 8006dac:	2000040c 	.word	0x2000040c
 8006db0:	2000041c 	.word	0x2000041c
 8006db4:	20000408 	.word	0x20000408
 8006db8:	20000304 	.word	0x20000304
 8006dbc:	e000ed04 	.word	0xe000ed04

08006dc0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d019      	beq.n	8006e06 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006dd2:	4b14      	ldr	r3, [pc, #80]	; (8006e24 <vTaskDelay+0x64>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d00c      	beq.n	8006df4 <vTaskDelay+0x34>
	__asm volatile
 8006dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dde:	b672      	cpsid	i
 8006de0:	f383 8811 	msr	BASEPRI, r3
 8006de4:	f3bf 8f6f 	isb	sy
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	b662      	cpsie	i
 8006dee:	60bb      	str	r3, [r7, #8]
}
 8006df0:	bf00      	nop
 8006df2:	e7fe      	b.n	8006df2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006df4:	f000 f87e 	bl	8006ef4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006df8:	2100      	movs	r1, #0
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fe24 	bl	8007a48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e00:	f000 f886 	bl	8006f10 <xTaskResumeAll>
 8006e04:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d107      	bne.n	8006e1c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8006e0c:	4b06      	ldr	r3, [pc, #24]	; (8006e28 <vTaskDelay+0x68>)
 8006e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e12:	601a      	str	r2, [r3, #0]
 8006e14:	f3bf 8f4f 	dsb	sy
 8006e18:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e1c:	bf00      	nop
 8006e1e:	3710      	adds	r7, #16
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	20000428 	.word	0x20000428
 8006e28:	e000ed04 	.word	0xe000ed04

08006e2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b08a      	sub	sp, #40	; 0x28
 8006e30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006e32:	2300      	movs	r3, #0
 8006e34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006e36:	2300      	movs	r3, #0
 8006e38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006e3a:	463a      	mov	r2, r7
 8006e3c:	1d39      	adds	r1, r7, #4
 8006e3e:	f107 0308 	add.w	r3, r7, #8
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7f9 fbe0 	bl	8000608 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006e48:	6839      	ldr	r1, [r7, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	68ba      	ldr	r2, [r7, #8]
 8006e4e:	9202      	str	r2, [sp, #8]
 8006e50:	9301      	str	r3, [sp, #4]
 8006e52:	2300      	movs	r3, #0
 8006e54:	9300      	str	r3, [sp, #0]
 8006e56:	2300      	movs	r3, #0
 8006e58:	460a      	mov	r2, r1
 8006e5a:	4920      	ldr	r1, [pc, #128]	; (8006edc <vTaskStartScheduler+0xb0>)
 8006e5c:	4820      	ldr	r0, [pc, #128]	; (8006ee0 <vTaskStartScheduler+0xb4>)
 8006e5e:	f7ff fe13 	bl	8006a88 <xTaskCreateStatic>
 8006e62:	4603      	mov	r3, r0
 8006e64:	4a1f      	ldr	r2, [pc, #124]	; (8006ee4 <vTaskStartScheduler+0xb8>)
 8006e66:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006e68:	4b1e      	ldr	r3, [pc, #120]	; (8006ee4 <vTaskStartScheduler+0xb8>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d002      	beq.n	8006e76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e70:	2301      	movs	r3, #1
 8006e72:	617b      	str	r3, [r7, #20]
 8006e74:	e001      	b.n	8006e7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e76:	2300      	movs	r3, #0
 8006e78:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d118      	bne.n	8006eb2 <vTaskStartScheduler+0x86>
	__asm volatile
 8006e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e84:	b672      	cpsid	i
 8006e86:	f383 8811 	msr	BASEPRI, r3
 8006e8a:	f3bf 8f6f 	isb	sy
 8006e8e:	f3bf 8f4f 	dsb	sy
 8006e92:	b662      	cpsie	i
 8006e94:	613b      	str	r3, [r7, #16]
}
 8006e96:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e98:	4b13      	ldr	r3, [pc, #76]	; (8006ee8 <vTaskStartScheduler+0xbc>)
 8006e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e9e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ea0:	4b12      	ldr	r3, [pc, #72]	; (8006eec <vTaskStartScheduler+0xc0>)
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006ea6:	4b12      	ldr	r3, [pc, #72]	; (8006ef0 <vTaskStartScheduler+0xc4>)
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006eac:	f000 fec0 	bl	8007c30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006eb0:	e010      	b.n	8006ed4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eb8:	d10c      	bne.n	8006ed4 <vTaskStartScheduler+0xa8>
	__asm volatile
 8006eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ebe:	b672      	cpsid	i
 8006ec0:	f383 8811 	msr	BASEPRI, r3
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	b662      	cpsie	i
 8006ece:	60fb      	str	r3, [r7, #12]
}
 8006ed0:	bf00      	nop
 8006ed2:	e7fe      	b.n	8006ed2 <vTaskStartScheduler+0xa6>
}
 8006ed4:	bf00      	nop
 8006ed6:	3718      	adds	r7, #24
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	08016264 	.word	0x08016264
 8006ee0:	080074e5 	.word	0x080074e5
 8006ee4:	20000424 	.word	0x20000424
 8006ee8:	20000420 	.word	0x20000420
 8006eec:	2000040c 	.word	0x2000040c
 8006ef0:	20000404 	.word	0x20000404

08006ef4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006ef8:	4b04      	ldr	r3, [pc, #16]	; (8006f0c <vTaskSuspendAll+0x18>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	3301      	adds	r3, #1
 8006efe:	4a03      	ldr	r2, [pc, #12]	; (8006f0c <vTaskSuspendAll+0x18>)
 8006f00:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006f02:	bf00      	nop
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr
 8006f0c:	20000428 	.word	0x20000428

08006f10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006f16:	2300      	movs	r3, #0
 8006f18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006f1e:	4b42      	ldr	r3, [pc, #264]	; (8007028 <xTaskResumeAll+0x118>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d10c      	bne.n	8006f40 <xTaskResumeAll+0x30>
	__asm volatile
 8006f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2a:	b672      	cpsid	i
 8006f2c:	f383 8811 	msr	BASEPRI, r3
 8006f30:	f3bf 8f6f 	isb	sy
 8006f34:	f3bf 8f4f 	dsb	sy
 8006f38:	b662      	cpsie	i
 8006f3a:	603b      	str	r3, [r7, #0]
}
 8006f3c:	bf00      	nop
 8006f3e:	e7fe      	b.n	8006f3e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f40:	f000 fef4 	bl	8007d2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f44:	4b38      	ldr	r3, [pc, #224]	; (8007028 <xTaskResumeAll+0x118>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	4a37      	ldr	r2, [pc, #220]	; (8007028 <xTaskResumeAll+0x118>)
 8006f4c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f4e:	4b36      	ldr	r3, [pc, #216]	; (8007028 <xTaskResumeAll+0x118>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d161      	bne.n	800701a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f56:	4b35      	ldr	r3, [pc, #212]	; (800702c <xTaskResumeAll+0x11c>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d05d      	beq.n	800701a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f5e:	e02e      	b.n	8006fbe <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f60:	4b33      	ldr	r3, [pc, #204]	; (8007030 <xTaskResumeAll+0x120>)
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	3318      	adds	r3, #24
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7fe fde3 	bl	8005b38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	3304      	adds	r3, #4
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7fe fdde 	bl	8005b38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f80:	2201      	movs	r2, #1
 8006f82:	409a      	lsls	r2, r3
 8006f84:	4b2b      	ldr	r3, [pc, #172]	; (8007034 <xTaskResumeAll+0x124>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	4a2a      	ldr	r2, [pc, #168]	; (8007034 <xTaskResumeAll+0x124>)
 8006f8c:	6013      	str	r3, [r2, #0]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f92:	4613      	mov	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4413      	add	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4a27      	ldr	r2, [pc, #156]	; (8007038 <xTaskResumeAll+0x128>)
 8006f9c:	441a      	add	r2, r3
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	3304      	adds	r3, #4
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	4610      	mov	r0, r2
 8006fa6:	f7fe fd6a 	bl	8005a7e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fae:	4b23      	ldr	r3, [pc, #140]	; (800703c <xTaskResumeAll+0x12c>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d302      	bcc.n	8006fbe <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006fb8:	4b21      	ldr	r3, [pc, #132]	; (8007040 <xTaskResumeAll+0x130>)
 8006fba:	2201      	movs	r2, #1
 8006fbc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fbe:	4b1c      	ldr	r3, [pc, #112]	; (8007030 <xTaskResumeAll+0x120>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d1cc      	bne.n	8006f60 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d001      	beq.n	8006fd0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006fcc:	f000 fb42 	bl	8007654 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006fd0:	4b1c      	ldr	r3, [pc, #112]	; (8007044 <xTaskResumeAll+0x134>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d010      	beq.n	8006ffe <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006fdc:	f000 f858 	bl	8007090 <xTaskIncrementTick>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d002      	beq.n	8006fec <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006fe6:	4b16      	ldr	r3, [pc, #88]	; (8007040 <xTaskResumeAll+0x130>)
 8006fe8:	2201      	movs	r2, #1
 8006fea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d1f1      	bne.n	8006fdc <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8006ff8:	4b12      	ldr	r3, [pc, #72]	; (8007044 <xTaskResumeAll+0x134>)
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006ffe:	4b10      	ldr	r3, [pc, #64]	; (8007040 <xTaskResumeAll+0x130>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d009      	beq.n	800701a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007006:	2301      	movs	r3, #1
 8007008:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800700a:	4b0f      	ldr	r3, [pc, #60]	; (8007048 <xTaskResumeAll+0x138>)
 800700c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007010:	601a      	str	r2, [r3, #0]
 8007012:	f3bf 8f4f 	dsb	sy
 8007016:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800701a:	f000 febb 	bl	8007d94 <vPortExitCritical>

	return xAlreadyYielded;
 800701e:	68bb      	ldr	r3, [r7, #8]
}
 8007020:	4618      	mov	r0, r3
 8007022:	3710      	adds	r7, #16
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	20000428 	.word	0x20000428
 800702c:	20000400 	.word	0x20000400
 8007030:	200003c0 	.word	0x200003c0
 8007034:	20000408 	.word	0x20000408
 8007038:	20000304 	.word	0x20000304
 800703c:	20000300 	.word	0x20000300
 8007040:	20000414 	.word	0x20000414
 8007044:	20000410 	.word	0x20000410
 8007048:	e000ed04 	.word	0xe000ed04

0800704c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007052:	4b05      	ldr	r3, [pc, #20]	; (8007068 <xTaskGetTickCount+0x1c>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007058:	687b      	ldr	r3, [r7, #4]
}
 800705a:	4618      	mov	r0, r3
 800705c:	370c      	adds	r7, #12
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	20000404 	.word	0x20000404

0800706c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007072:	f000 ff43 	bl	8007efc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007076:	2300      	movs	r3, #0
 8007078:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800707a:	4b04      	ldr	r3, [pc, #16]	; (800708c <xTaskGetTickCountFromISR+0x20>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007080:	683b      	ldr	r3, [r7, #0]
}
 8007082:	4618      	mov	r0, r3
 8007084:	3708      	adds	r7, #8
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	20000404 	.word	0x20000404

08007090 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007096:	2300      	movs	r3, #0
 8007098:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800709a:	4b4f      	ldr	r3, [pc, #316]	; (80071d8 <xTaskIncrementTick+0x148>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	f040 808a 	bne.w	80071b8 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80070a4:	4b4d      	ldr	r3, [pc, #308]	; (80071dc <xTaskIncrementTick+0x14c>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	3301      	adds	r3, #1
 80070aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80070ac:	4a4b      	ldr	r2, [pc, #300]	; (80071dc <xTaskIncrementTick+0x14c>)
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d122      	bne.n	80070fe <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80070b8:	4b49      	ldr	r3, [pc, #292]	; (80071e0 <xTaskIncrementTick+0x150>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00c      	beq.n	80070dc <xTaskIncrementTick+0x4c>
	__asm volatile
 80070c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c6:	b672      	cpsid	i
 80070c8:	f383 8811 	msr	BASEPRI, r3
 80070cc:	f3bf 8f6f 	isb	sy
 80070d0:	f3bf 8f4f 	dsb	sy
 80070d4:	b662      	cpsie	i
 80070d6:	603b      	str	r3, [r7, #0]
}
 80070d8:	bf00      	nop
 80070da:	e7fe      	b.n	80070da <xTaskIncrementTick+0x4a>
 80070dc:	4b40      	ldr	r3, [pc, #256]	; (80071e0 <xTaskIncrementTick+0x150>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	60fb      	str	r3, [r7, #12]
 80070e2:	4b40      	ldr	r3, [pc, #256]	; (80071e4 <xTaskIncrementTick+0x154>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a3e      	ldr	r2, [pc, #248]	; (80071e0 <xTaskIncrementTick+0x150>)
 80070e8:	6013      	str	r3, [r2, #0]
 80070ea:	4a3e      	ldr	r2, [pc, #248]	; (80071e4 <xTaskIncrementTick+0x154>)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6013      	str	r3, [r2, #0]
 80070f0:	4b3d      	ldr	r3, [pc, #244]	; (80071e8 <xTaskIncrementTick+0x158>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	3301      	adds	r3, #1
 80070f6:	4a3c      	ldr	r2, [pc, #240]	; (80071e8 <xTaskIncrementTick+0x158>)
 80070f8:	6013      	str	r3, [r2, #0]
 80070fa:	f000 faab 	bl	8007654 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80070fe:	4b3b      	ldr	r3, [pc, #236]	; (80071ec <xTaskIncrementTick+0x15c>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	693a      	ldr	r2, [r7, #16]
 8007104:	429a      	cmp	r2, r3
 8007106:	d348      	bcc.n	800719a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007108:	4b35      	ldr	r3, [pc, #212]	; (80071e0 <xTaskIncrementTick+0x150>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d104      	bne.n	800711c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007112:	4b36      	ldr	r3, [pc, #216]	; (80071ec <xTaskIncrementTick+0x15c>)
 8007114:	f04f 32ff 	mov.w	r2, #4294967295
 8007118:	601a      	str	r2, [r3, #0]
					break;
 800711a:	e03e      	b.n	800719a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800711c:	4b30      	ldr	r3, [pc, #192]	; (80071e0 <xTaskIncrementTick+0x150>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800712c:	693a      	ldr	r2, [r7, #16]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	429a      	cmp	r2, r3
 8007132:	d203      	bcs.n	800713c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007134:	4a2d      	ldr	r2, [pc, #180]	; (80071ec <xTaskIncrementTick+0x15c>)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800713a:	e02e      	b.n	800719a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	3304      	adds	r3, #4
 8007140:	4618      	mov	r0, r3
 8007142:	f7fe fcf9 	bl	8005b38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800714a:	2b00      	cmp	r3, #0
 800714c:	d004      	beq.n	8007158 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	3318      	adds	r3, #24
 8007152:	4618      	mov	r0, r3
 8007154:	f7fe fcf0 	bl	8005b38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715c:	2201      	movs	r2, #1
 800715e:	409a      	lsls	r2, r3
 8007160:	4b23      	ldr	r3, [pc, #140]	; (80071f0 <xTaskIncrementTick+0x160>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4313      	orrs	r3, r2
 8007166:	4a22      	ldr	r2, [pc, #136]	; (80071f0 <xTaskIncrementTick+0x160>)
 8007168:	6013      	str	r3, [r2, #0]
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800716e:	4613      	mov	r3, r2
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	4413      	add	r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4a1f      	ldr	r2, [pc, #124]	; (80071f4 <xTaskIncrementTick+0x164>)
 8007178:	441a      	add	r2, r3
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	3304      	adds	r3, #4
 800717e:	4619      	mov	r1, r3
 8007180:	4610      	mov	r0, r2
 8007182:	f7fe fc7c 	bl	8005a7e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800718a:	4b1b      	ldr	r3, [pc, #108]	; (80071f8 <xTaskIncrementTick+0x168>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007190:	429a      	cmp	r2, r3
 8007192:	d3b9      	bcc.n	8007108 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8007194:	2301      	movs	r3, #1
 8007196:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007198:	e7b6      	b.n	8007108 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800719a:	4b17      	ldr	r3, [pc, #92]	; (80071f8 <xTaskIncrementTick+0x168>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071a0:	4914      	ldr	r1, [pc, #80]	; (80071f4 <xTaskIncrementTick+0x164>)
 80071a2:	4613      	mov	r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	4413      	add	r3, r2
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	440b      	add	r3, r1
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d907      	bls.n	80071c2 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80071b2:	2301      	movs	r3, #1
 80071b4:	617b      	str	r3, [r7, #20]
 80071b6:	e004      	b.n	80071c2 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80071b8:	4b10      	ldr	r3, [pc, #64]	; (80071fc <xTaskIncrementTick+0x16c>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	3301      	adds	r3, #1
 80071be:	4a0f      	ldr	r2, [pc, #60]	; (80071fc <xTaskIncrementTick+0x16c>)
 80071c0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80071c2:	4b0f      	ldr	r3, [pc, #60]	; (8007200 <xTaskIncrementTick+0x170>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d001      	beq.n	80071ce <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80071ca:	2301      	movs	r3, #1
 80071cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80071ce:	697b      	ldr	r3, [r7, #20]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3718      	adds	r7, #24
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	20000428 	.word	0x20000428
 80071dc:	20000404 	.word	0x20000404
 80071e0:	200003b8 	.word	0x200003b8
 80071e4:	200003bc 	.word	0x200003bc
 80071e8:	20000418 	.word	0x20000418
 80071ec:	20000420 	.word	0x20000420
 80071f0:	20000408 	.word	0x20000408
 80071f4:	20000304 	.word	0x20000304
 80071f8:	20000300 	.word	0x20000300
 80071fc:	20000410 	.word	0x20000410
 8007200:	20000414 	.word	0x20000414

08007204 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007204:	b480      	push	{r7}
 8007206:	b087      	sub	sp, #28
 8007208:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800720a:	4b28      	ldr	r3, [pc, #160]	; (80072ac <vTaskSwitchContext+0xa8>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d003      	beq.n	800721a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007212:	4b27      	ldr	r3, [pc, #156]	; (80072b0 <vTaskSwitchContext+0xac>)
 8007214:	2201      	movs	r2, #1
 8007216:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007218:	e041      	b.n	800729e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800721a:	4b25      	ldr	r3, [pc, #148]	; (80072b0 <vTaskSwitchContext+0xac>)
 800721c:	2200      	movs	r2, #0
 800721e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007220:	4b24      	ldr	r3, [pc, #144]	; (80072b4 <vTaskSwitchContext+0xb0>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	fab3 f383 	clz	r3, r3
 800722c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800722e:	7afb      	ldrb	r3, [r7, #11]
 8007230:	f1c3 031f 	rsb	r3, r3, #31
 8007234:	617b      	str	r3, [r7, #20]
 8007236:	4920      	ldr	r1, [pc, #128]	; (80072b8 <vTaskSwitchContext+0xb4>)
 8007238:	697a      	ldr	r2, [r7, #20]
 800723a:	4613      	mov	r3, r2
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	4413      	add	r3, r2
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	440b      	add	r3, r1
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10c      	bne.n	8007264 <vTaskSwitchContext+0x60>
	__asm volatile
 800724a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800724e:	b672      	cpsid	i
 8007250:	f383 8811 	msr	BASEPRI, r3
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	b662      	cpsie	i
 800725e:	607b      	str	r3, [r7, #4]
}
 8007260:	bf00      	nop
 8007262:	e7fe      	b.n	8007262 <vTaskSwitchContext+0x5e>
 8007264:	697a      	ldr	r2, [r7, #20]
 8007266:	4613      	mov	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	4413      	add	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4a12      	ldr	r2, [pc, #72]	; (80072b8 <vTaskSwitchContext+0xb4>)
 8007270:	4413      	add	r3, r2
 8007272:	613b      	str	r3, [r7, #16]
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	685a      	ldr	r2, [r3, #4]
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	605a      	str	r2, [r3, #4]
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	685a      	ldr	r2, [r3, #4]
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	3308      	adds	r3, #8
 8007286:	429a      	cmp	r2, r3
 8007288:	d104      	bne.n	8007294 <vTaskSwitchContext+0x90>
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	685a      	ldr	r2, [r3, #4]
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	605a      	str	r2, [r3, #4]
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	4a08      	ldr	r2, [pc, #32]	; (80072bc <vTaskSwitchContext+0xb8>)
 800729c:	6013      	str	r3, [r2, #0]
}
 800729e:	bf00      	nop
 80072a0:	371c      	adds	r7, #28
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	20000428 	.word	0x20000428
 80072b0:	20000414 	.word	0x20000414
 80072b4:	20000408 	.word	0x20000408
 80072b8:	20000304 	.word	0x20000304
 80072bc:	20000300 	.word	0x20000300

080072c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d10c      	bne.n	80072ea <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80072d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d4:	b672      	cpsid	i
 80072d6:	f383 8811 	msr	BASEPRI, r3
 80072da:	f3bf 8f6f 	isb	sy
 80072de:	f3bf 8f4f 	dsb	sy
 80072e2:	b662      	cpsie	i
 80072e4:	60fb      	str	r3, [r7, #12]
}
 80072e6:	bf00      	nop
 80072e8:	e7fe      	b.n	80072e8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072ea:	4b07      	ldr	r3, [pc, #28]	; (8007308 <vTaskPlaceOnEventList+0x48>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	3318      	adds	r3, #24
 80072f0:	4619      	mov	r1, r3
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f7fe fbe7 	bl	8005ac6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80072f8:	2101      	movs	r1, #1
 80072fa:	6838      	ldr	r0, [r7, #0]
 80072fc:	f000 fba4 	bl	8007a48 <prvAddCurrentTaskToDelayedList>
}
 8007300:	bf00      	nop
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}
 8007308:	20000300 	.word	0x20000300

0800730c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10c      	bne.n	800733c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8007322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007326:	b672      	cpsid	i
 8007328:	f383 8811 	msr	BASEPRI, r3
 800732c:	f3bf 8f6f 	isb	sy
 8007330:	f3bf 8f4f 	dsb	sy
 8007334:	b662      	cpsie	i
 8007336:	60fb      	str	r3, [r7, #12]
}
 8007338:	bf00      	nop
 800733a:	e7fe      	b.n	800733a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	3318      	adds	r3, #24
 8007340:	4618      	mov	r0, r3
 8007342:	f7fe fbf9 	bl	8005b38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007346:	4b1d      	ldr	r3, [pc, #116]	; (80073bc <xTaskRemoveFromEventList+0xb0>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d11c      	bne.n	8007388 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	3304      	adds	r3, #4
 8007352:	4618      	mov	r0, r3
 8007354:	f7fe fbf0 	bl	8005b38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735c:	2201      	movs	r2, #1
 800735e:	409a      	lsls	r2, r3
 8007360:	4b17      	ldr	r3, [pc, #92]	; (80073c0 <xTaskRemoveFromEventList+0xb4>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4313      	orrs	r3, r2
 8007366:	4a16      	ldr	r2, [pc, #88]	; (80073c0 <xTaskRemoveFromEventList+0xb4>)
 8007368:	6013      	str	r3, [r2, #0]
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800736e:	4613      	mov	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	4413      	add	r3, r2
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	4a13      	ldr	r2, [pc, #76]	; (80073c4 <xTaskRemoveFromEventList+0xb8>)
 8007378:	441a      	add	r2, r3
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	3304      	adds	r3, #4
 800737e:	4619      	mov	r1, r3
 8007380:	4610      	mov	r0, r2
 8007382:	f7fe fb7c 	bl	8005a7e <vListInsertEnd>
 8007386:	e005      	b.n	8007394 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	3318      	adds	r3, #24
 800738c:	4619      	mov	r1, r3
 800738e:	480e      	ldr	r0, [pc, #56]	; (80073c8 <xTaskRemoveFromEventList+0xbc>)
 8007390:	f7fe fb75 	bl	8005a7e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007398:	4b0c      	ldr	r3, [pc, #48]	; (80073cc <xTaskRemoveFromEventList+0xc0>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739e:	429a      	cmp	r2, r3
 80073a0:	d905      	bls.n	80073ae <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80073a2:	2301      	movs	r3, #1
 80073a4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80073a6:	4b0a      	ldr	r3, [pc, #40]	; (80073d0 <xTaskRemoveFromEventList+0xc4>)
 80073a8:	2201      	movs	r2, #1
 80073aa:	601a      	str	r2, [r3, #0]
 80073ac:	e001      	b.n	80073b2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80073ae:	2300      	movs	r3, #0
 80073b0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80073b2:	697b      	ldr	r3, [r7, #20]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3718      	adds	r7, #24
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	20000428 	.word	0x20000428
 80073c0:	20000408 	.word	0x20000408
 80073c4:	20000304 	.word	0x20000304
 80073c8:	200003c0 	.word	0x200003c0
 80073cc:	20000300 	.word	0x20000300
 80073d0:	20000414 	.word	0x20000414

080073d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80073dc:	4b06      	ldr	r3, [pc, #24]	; (80073f8 <vTaskInternalSetTimeOutState+0x24>)
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80073e4:	4b05      	ldr	r3, [pc, #20]	; (80073fc <vTaskInternalSetTimeOutState+0x28>)
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	605a      	str	r2, [r3, #4]
}
 80073ec:	bf00      	nop
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr
 80073f8:	20000418 	.word	0x20000418
 80073fc:	20000404 	.word	0x20000404

08007400 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b088      	sub	sp, #32
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10c      	bne.n	800742a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8007410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007414:	b672      	cpsid	i
 8007416:	f383 8811 	msr	BASEPRI, r3
 800741a:	f3bf 8f6f 	isb	sy
 800741e:	f3bf 8f4f 	dsb	sy
 8007422:	b662      	cpsie	i
 8007424:	613b      	str	r3, [r7, #16]
}
 8007426:	bf00      	nop
 8007428:	e7fe      	b.n	8007428 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d10c      	bne.n	800744a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8007430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007434:	b672      	cpsid	i
 8007436:	f383 8811 	msr	BASEPRI, r3
 800743a:	f3bf 8f6f 	isb	sy
 800743e:	f3bf 8f4f 	dsb	sy
 8007442:	b662      	cpsie	i
 8007444:	60fb      	str	r3, [r7, #12]
}
 8007446:	bf00      	nop
 8007448:	e7fe      	b.n	8007448 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800744a:	f000 fc6f 	bl	8007d2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800744e:	4b1d      	ldr	r3, [pc, #116]	; (80074c4 <xTaskCheckForTimeOut+0xc4>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	69ba      	ldr	r2, [r7, #24]
 800745a:	1ad3      	subs	r3, r2, r3
 800745c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007466:	d102      	bne.n	800746e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007468:	2300      	movs	r3, #0
 800746a:	61fb      	str	r3, [r7, #28]
 800746c:	e023      	b.n	80074b6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	4b15      	ldr	r3, [pc, #84]	; (80074c8 <xTaskCheckForTimeOut+0xc8>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	429a      	cmp	r2, r3
 8007478:	d007      	beq.n	800748a <xTaskCheckForTimeOut+0x8a>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	69ba      	ldr	r2, [r7, #24]
 8007480:	429a      	cmp	r2, r3
 8007482:	d302      	bcc.n	800748a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007484:	2301      	movs	r3, #1
 8007486:	61fb      	str	r3, [r7, #28]
 8007488:	e015      	b.n	80074b6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	697a      	ldr	r2, [r7, #20]
 8007490:	429a      	cmp	r2, r3
 8007492:	d20b      	bcs.n	80074ac <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	1ad2      	subs	r2, r2, r3
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f7ff ff97 	bl	80073d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80074a6:	2300      	movs	r3, #0
 80074a8:	61fb      	str	r3, [r7, #28]
 80074aa:	e004      	b.n	80074b6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	2200      	movs	r2, #0
 80074b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80074b2:	2301      	movs	r3, #1
 80074b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80074b6:	f000 fc6d 	bl	8007d94 <vPortExitCritical>

	return xReturn;
 80074ba:	69fb      	ldr	r3, [r7, #28]
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3720      	adds	r7, #32
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	20000404 	.word	0x20000404
 80074c8:	20000418 	.word	0x20000418

080074cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80074cc:	b480      	push	{r7}
 80074ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80074d0:	4b03      	ldr	r3, [pc, #12]	; (80074e0 <vTaskMissedYield+0x14>)
 80074d2:	2201      	movs	r2, #1
 80074d4:	601a      	str	r2, [r3, #0]
}
 80074d6:	bf00      	nop
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr
 80074e0:	20000414 	.word	0x20000414

080074e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80074ec:	f000 f852 	bl	8007594 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80074f0:	4b06      	ldr	r3, [pc, #24]	; (800750c <prvIdleTask+0x28>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d9f9      	bls.n	80074ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80074f8:	4b05      	ldr	r3, [pc, #20]	; (8007510 <prvIdleTask+0x2c>)
 80074fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074fe:	601a      	str	r2, [r3, #0]
 8007500:	f3bf 8f4f 	dsb	sy
 8007504:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007508:	e7f0      	b.n	80074ec <prvIdleTask+0x8>
 800750a:	bf00      	nop
 800750c:	20000304 	.word	0x20000304
 8007510:	e000ed04 	.word	0xe000ed04

08007514 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800751a:	2300      	movs	r3, #0
 800751c:	607b      	str	r3, [r7, #4]
 800751e:	e00c      	b.n	800753a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	4613      	mov	r3, r2
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	4413      	add	r3, r2
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	4a12      	ldr	r2, [pc, #72]	; (8007574 <prvInitialiseTaskLists+0x60>)
 800752c:	4413      	add	r3, r2
 800752e:	4618      	mov	r0, r3
 8007530:	f7fe fa78 	bl	8005a24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	3301      	adds	r3, #1
 8007538:	607b      	str	r3, [r7, #4]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2b06      	cmp	r3, #6
 800753e:	d9ef      	bls.n	8007520 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007540:	480d      	ldr	r0, [pc, #52]	; (8007578 <prvInitialiseTaskLists+0x64>)
 8007542:	f7fe fa6f 	bl	8005a24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007546:	480d      	ldr	r0, [pc, #52]	; (800757c <prvInitialiseTaskLists+0x68>)
 8007548:	f7fe fa6c 	bl	8005a24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800754c:	480c      	ldr	r0, [pc, #48]	; (8007580 <prvInitialiseTaskLists+0x6c>)
 800754e:	f7fe fa69 	bl	8005a24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007552:	480c      	ldr	r0, [pc, #48]	; (8007584 <prvInitialiseTaskLists+0x70>)
 8007554:	f7fe fa66 	bl	8005a24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007558:	480b      	ldr	r0, [pc, #44]	; (8007588 <prvInitialiseTaskLists+0x74>)
 800755a:	f7fe fa63 	bl	8005a24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800755e:	4b0b      	ldr	r3, [pc, #44]	; (800758c <prvInitialiseTaskLists+0x78>)
 8007560:	4a05      	ldr	r2, [pc, #20]	; (8007578 <prvInitialiseTaskLists+0x64>)
 8007562:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007564:	4b0a      	ldr	r3, [pc, #40]	; (8007590 <prvInitialiseTaskLists+0x7c>)
 8007566:	4a05      	ldr	r2, [pc, #20]	; (800757c <prvInitialiseTaskLists+0x68>)
 8007568:	601a      	str	r2, [r3, #0]
}
 800756a:	bf00      	nop
 800756c:	3708      	adds	r7, #8
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	20000304 	.word	0x20000304
 8007578:	20000390 	.word	0x20000390
 800757c:	200003a4 	.word	0x200003a4
 8007580:	200003c0 	.word	0x200003c0
 8007584:	200003d4 	.word	0x200003d4
 8007588:	200003ec 	.word	0x200003ec
 800758c:	200003b8 	.word	0x200003b8
 8007590:	200003bc 	.word	0x200003bc

08007594 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800759a:	e019      	b.n	80075d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800759c:	f000 fbc6 	bl	8007d2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075a0:	4b10      	ldr	r3, [pc, #64]	; (80075e4 <prvCheckTasksWaitingTermination+0x50>)
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	3304      	adds	r3, #4
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7fe fac3 	bl	8005b38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80075b2:	4b0d      	ldr	r3, [pc, #52]	; (80075e8 <prvCheckTasksWaitingTermination+0x54>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	3b01      	subs	r3, #1
 80075b8:	4a0b      	ldr	r2, [pc, #44]	; (80075e8 <prvCheckTasksWaitingTermination+0x54>)
 80075ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80075bc:	4b0b      	ldr	r3, [pc, #44]	; (80075ec <prvCheckTasksWaitingTermination+0x58>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	3b01      	subs	r3, #1
 80075c2:	4a0a      	ldr	r2, [pc, #40]	; (80075ec <prvCheckTasksWaitingTermination+0x58>)
 80075c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80075c6:	f000 fbe5 	bl	8007d94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f810 	bl	80075f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075d0:	4b06      	ldr	r3, [pc, #24]	; (80075ec <prvCheckTasksWaitingTermination+0x58>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1e1      	bne.n	800759c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80075d8:	bf00      	nop
 80075da:	bf00      	nop
 80075dc:	3708      	adds	r7, #8
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	200003d4 	.word	0x200003d4
 80075e8:	20000400 	.word	0x20000400
 80075ec:	200003e8 	.word	0x200003e8

080075f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d108      	bne.n	8007614 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007606:	4618      	mov	r0, r3
 8007608:	f000 fd86 	bl	8008118 <vPortFree>
				vPortFree( pxTCB );
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 fd83 	bl	8008118 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007612:	e01a      	b.n	800764a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800761a:	2b01      	cmp	r3, #1
 800761c:	d103      	bne.n	8007626 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 fd7a 	bl	8008118 <vPortFree>
	}
 8007624:	e011      	b.n	800764a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800762c:	2b02      	cmp	r3, #2
 800762e:	d00c      	beq.n	800764a <prvDeleteTCB+0x5a>
	__asm volatile
 8007630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007634:	b672      	cpsid	i
 8007636:	f383 8811 	msr	BASEPRI, r3
 800763a:	f3bf 8f6f 	isb	sy
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	b662      	cpsie	i
 8007644:	60fb      	str	r3, [r7, #12]
}
 8007646:	bf00      	nop
 8007648:	e7fe      	b.n	8007648 <prvDeleteTCB+0x58>
	}
 800764a:	bf00      	nop
 800764c:	3710      	adds	r7, #16
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
	...

08007654 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800765a:	4b0c      	ldr	r3, [pc, #48]	; (800768c <prvResetNextTaskUnblockTime+0x38>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d104      	bne.n	800766e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007664:	4b0a      	ldr	r3, [pc, #40]	; (8007690 <prvResetNextTaskUnblockTime+0x3c>)
 8007666:	f04f 32ff 	mov.w	r2, #4294967295
 800766a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800766c:	e008      	b.n	8007680 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800766e:	4b07      	ldr	r3, [pc, #28]	; (800768c <prvResetNextTaskUnblockTime+0x38>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	4a04      	ldr	r2, [pc, #16]	; (8007690 <prvResetNextTaskUnblockTime+0x3c>)
 800767e:	6013      	str	r3, [r2, #0]
}
 8007680:	bf00      	nop
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr
 800768c:	200003b8 	.word	0x200003b8
 8007690:	20000420 	.word	0x20000420

08007694 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800769a:	4b0b      	ldr	r3, [pc, #44]	; (80076c8 <xTaskGetSchedulerState+0x34>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d102      	bne.n	80076a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80076a2:	2301      	movs	r3, #1
 80076a4:	607b      	str	r3, [r7, #4]
 80076a6:	e008      	b.n	80076ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076a8:	4b08      	ldr	r3, [pc, #32]	; (80076cc <xTaskGetSchedulerState+0x38>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d102      	bne.n	80076b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80076b0:	2302      	movs	r3, #2
 80076b2:	607b      	str	r3, [r7, #4]
 80076b4:	e001      	b.n	80076ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80076b6:	2300      	movs	r3, #0
 80076b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80076ba:	687b      	ldr	r3, [r7, #4]
	}
 80076bc:	4618      	mov	r0, r3
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr
 80076c8:	2000040c 	.word	0x2000040c
 80076cc:	20000428 	.word	0x20000428

080076d0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80076dc:	2300      	movs	r3, #0
 80076de:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d069      	beq.n	80077ba <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ea:	4b36      	ldr	r3, [pc, #216]	; (80077c4 <xTaskPriorityInherit+0xf4>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d259      	bcs.n	80077a8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	699b      	ldr	r3, [r3, #24]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	db06      	blt.n	800770a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076fc:	4b31      	ldr	r3, [pc, #196]	; (80077c4 <xTaskPriorityInherit+0xf4>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007702:	f1c3 0207 	rsb	r2, r3, #7
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	6959      	ldr	r1, [r3, #20]
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007712:	4613      	mov	r3, r2
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	4413      	add	r3, r2
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	4a2b      	ldr	r2, [pc, #172]	; (80077c8 <xTaskPriorityInherit+0xf8>)
 800771c:	4413      	add	r3, r2
 800771e:	4299      	cmp	r1, r3
 8007720:	d13a      	bne.n	8007798 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	3304      	adds	r3, #4
 8007726:	4618      	mov	r0, r3
 8007728:	f7fe fa06 	bl	8005b38 <uxListRemove>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d115      	bne.n	800775e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007736:	4924      	ldr	r1, [pc, #144]	; (80077c8 <xTaskPriorityInherit+0xf8>)
 8007738:	4613      	mov	r3, r2
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	4413      	add	r3, r2
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	440b      	add	r3, r1
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d10a      	bne.n	800775e <xTaskPriorityInherit+0x8e>
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774c:	2201      	movs	r2, #1
 800774e:	fa02 f303 	lsl.w	r3, r2, r3
 8007752:	43da      	mvns	r2, r3
 8007754:	4b1d      	ldr	r3, [pc, #116]	; (80077cc <xTaskPriorityInherit+0xfc>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4013      	ands	r3, r2
 800775a:	4a1c      	ldr	r2, [pc, #112]	; (80077cc <xTaskPriorityInherit+0xfc>)
 800775c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800775e:	4b19      	ldr	r3, [pc, #100]	; (80077c4 <xTaskPriorityInherit+0xf4>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800776c:	2201      	movs	r2, #1
 800776e:	409a      	lsls	r2, r3
 8007770:	4b16      	ldr	r3, [pc, #88]	; (80077cc <xTaskPriorityInherit+0xfc>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4313      	orrs	r3, r2
 8007776:	4a15      	ldr	r2, [pc, #84]	; (80077cc <xTaskPriorityInherit+0xfc>)
 8007778:	6013      	str	r3, [r2, #0]
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800777e:	4613      	mov	r3, r2
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	4413      	add	r3, r2
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	4a10      	ldr	r2, [pc, #64]	; (80077c8 <xTaskPriorityInherit+0xf8>)
 8007788:	441a      	add	r2, r3
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	3304      	adds	r3, #4
 800778e:	4619      	mov	r1, r3
 8007790:	4610      	mov	r0, r2
 8007792:	f7fe f974 	bl	8005a7e <vListInsertEnd>
 8007796:	e004      	b.n	80077a2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007798:	4b0a      	ldr	r3, [pc, #40]	; (80077c4 <xTaskPriorityInherit+0xf4>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80077a2:	2301      	movs	r3, #1
 80077a4:	60fb      	str	r3, [r7, #12]
 80077a6:	e008      	b.n	80077ba <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077ac:	4b05      	ldr	r3, [pc, #20]	; (80077c4 <xTaskPriorityInherit+0xf4>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d201      	bcs.n	80077ba <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80077b6:	2301      	movs	r3, #1
 80077b8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80077ba:	68fb      	ldr	r3, [r7, #12]
	}
 80077bc:	4618      	mov	r0, r3
 80077be:	3710      	adds	r7, #16
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	20000300 	.word	0x20000300
 80077c8:	20000304 	.word	0x20000304
 80077cc:	20000408 	.word	0x20000408

080077d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b086      	sub	sp, #24
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80077dc:	2300      	movs	r3, #0
 80077de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d072      	beq.n	80078cc <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80077e6:	4b3c      	ldr	r3, [pc, #240]	; (80078d8 <xTaskPriorityDisinherit+0x108>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	693a      	ldr	r2, [r7, #16]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d00c      	beq.n	800780a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80077f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f4:	b672      	cpsid	i
 80077f6:	f383 8811 	msr	BASEPRI, r3
 80077fa:	f3bf 8f6f 	isb	sy
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	b662      	cpsie	i
 8007804:	60fb      	str	r3, [r7, #12]
}
 8007806:	bf00      	nop
 8007808:	e7fe      	b.n	8007808 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800780e:	2b00      	cmp	r3, #0
 8007810:	d10c      	bne.n	800782c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8007812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007816:	b672      	cpsid	i
 8007818:	f383 8811 	msr	BASEPRI, r3
 800781c:	f3bf 8f6f 	isb	sy
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	b662      	cpsie	i
 8007826:	60bb      	str	r3, [r7, #8]
}
 8007828:	bf00      	nop
 800782a:	e7fe      	b.n	800782a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007830:	1e5a      	subs	r2, r3, #1
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800783e:	429a      	cmp	r2, r3
 8007840:	d044      	beq.n	80078cc <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007846:	2b00      	cmp	r3, #0
 8007848:	d140      	bne.n	80078cc <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	3304      	adds	r3, #4
 800784e:	4618      	mov	r0, r3
 8007850:	f7fe f972 	bl	8005b38 <uxListRemove>
 8007854:	4603      	mov	r3, r0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d115      	bne.n	8007886 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800785e:	491f      	ldr	r1, [pc, #124]	; (80078dc <xTaskPriorityDisinherit+0x10c>)
 8007860:	4613      	mov	r3, r2
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	4413      	add	r3, r2
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	440b      	add	r3, r1
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d10a      	bne.n	8007886 <xTaskPriorityDisinherit+0xb6>
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007874:	2201      	movs	r2, #1
 8007876:	fa02 f303 	lsl.w	r3, r2, r3
 800787a:	43da      	mvns	r2, r3
 800787c:	4b18      	ldr	r3, [pc, #96]	; (80078e0 <xTaskPriorityDisinherit+0x110>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4013      	ands	r3, r2
 8007882:	4a17      	ldr	r2, [pc, #92]	; (80078e0 <xTaskPriorityDisinherit+0x110>)
 8007884:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007892:	f1c3 0207 	rsb	r2, r3, #7
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789e:	2201      	movs	r2, #1
 80078a0:	409a      	lsls	r2, r3
 80078a2:	4b0f      	ldr	r3, [pc, #60]	; (80078e0 <xTaskPriorityDisinherit+0x110>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4313      	orrs	r3, r2
 80078a8:	4a0d      	ldr	r2, [pc, #52]	; (80078e0 <xTaskPriorityDisinherit+0x110>)
 80078aa:	6013      	str	r3, [r2, #0]
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078b0:	4613      	mov	r3, r2
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	4413      	add	r3, r2
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	4a08      	ldr	r2, [pc, #32]	; (80078dc <xTaskPriorityDisinherit+0x10c>)
 80078ba:	441a      	add	r2, r3
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	3304      	adds	r3, #4
 80078c0:	4619      	mov	r1, r3
 80078c2:	4610      	mov	r0, r2
 80078c4:	f7fe f8db 	bl	8005a7e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80078c8:	2301      	movs	r3, #1
 80078ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80078cc:	697b      	ldr	r3, [r7, #20]
	}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3718      	adds	r7, #24
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	20000300 	.word	0x20000300
 80078dc:	20000304 	.word	0x20000304
 80078e0:	20000408 	.word	0x20000408

080078e4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b088      	sub	sp, #32
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80078f2:	2301      	movs	r3, #1
 80078f4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	f000 8087 	beq.w	8007a0c <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007902:	2b00      	cmp	r3, #0
 8007904:	d10c      	bne.n	8007920 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8007906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800790a:	b672      	cpsid	i
 800790c:	f383 8811 	msr	BASEPRI, r3
 8007910:	f3bf 8f6f 	isb	sy
 8007914:	f3bf 8f4f 	dsb	sy
 8007918:	b662      	cpsie	i
 800791a:	60fb      	str	r3, [r7, #12]
}
 800791c:	bf00      	nop
 800791e:	e7fe      	b.n	800791e <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007924:	683a      	ldr	r2, [r7, #0]
 8007926:	429a      	cmp	r2, r3
 8007928:	d902      	bls.n	8007930 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	61fb      	str	r3, [r7, #28]
 800792e:	e002      	b.n	8007936 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007934:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800793a:	69fa      	ldr	r2, [r7, #28]
 800793c:	429a      	cmp	r2, r3
 800793e:	d065      	beq.n	8007a0c <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007944:	697a      	ldr	r2, [r7, #20]
 8007946:	429a      	cmp	r2, r3
 8007948:	d160      	bne.n	8007a0c <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800794a:	4b32      	ldr	r3, [pc, #200]	; (8007a14 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	69ba      	ldr	r2, [r7, #24]
 8007950:	429a      	cmp	r2, r3
 8007952:	d10c      	bne.n	800796e <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8007954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007958:	b672      	cpsid	i
 800795a:	f383 8811 	msr	BASEPRI, r3
 800795e:	f3bf 8f6f 	isb	sy
 8007962:	f3bf 8f4f 	dsb	sy
 8007966:	b662      	cpsie	i
 8007968:	60bb      	str	r3, [r7, #8]
}
 800796a:	bf00      	nop
 800796c:	e7fe      	b.n	800796c <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007972:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	69fa      	ldr	r2, [r7, #28]
 8007978:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	699b      	ldr	r3, [r3, #24]
 800797e:	2b00      	cmp	r3, #0
 8007980:	db04      	blt.n	800798c <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	f1c3 0207 	rsb	r2, r3, #7
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	6959      	ldr	r1, [r3, #20]
 8007990:	693a      	ldr	r2, [r7, #16]
 8007992:	4613      	mov	r3, r2
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4413      	add	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	4a1f      	ldr	r2, [pc, #124]	; (8007a18 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800799c:	4413      	add	r3, r2
 800799e:	4299      	cmp	r1, r3
 80079a0:	d134      	bne.n	8007a0c <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	3304      	adds	r3, #4
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7fe f8c6 	bl	8005b38 <uxListRemove>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d115      	bne.n	80079de <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079b6:	4918      	ldr	r1, [pc, #96]	; (8007a18 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80079b8:	4613      	mov	r3, r2
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	4413      	add	r3, r2
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	440b      	add	r3, r1
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d10a      	bne.n	80079de <vTaskPriorityDisinheritAfterTimeout+0xfa>
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079cc:	2201      	movs	r2, #1
 80079ce:	fa02 f303 	lsl.w	r3, r2, r3
 80079d2:	43da      	mvns	r2, r3
 80079d4:	4b11      	ldr	r3, [pc, #68]	; (8007a1c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4013      	ands	r3, r2
 80079da:	4a10      	ldr	r2, [pc, #64]	; (8007a1c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80079dc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e2:	2201      	movs	r2, #1
 80079e4:	409a      	lsls	r2, r3
 80079e6:	4b0d      	ldr	r3, [pc, #52]	; (8007a1c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4313      	orrs	r3, r2
 80079ec:	4a0b      	ldr	r2, [pc, #44]	; (8007a1c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80079ee:	6013      	str	r3, [r2, #0]
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079f4:	4613      	mov	r3, r2
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	4413      	add	r3, r2
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	4a06      	ldr	r2, [pc, #24]	; (8007a18 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80079fe:	441a      	add	r2, r3
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	3304      	adds	r3, #4
 8007a04:	4619      	mov	r1, r3
 8007a06:	4610      	mov	r0, r2
 8007a08:	f7fe f839 	bl	8005a7e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a0c:	bf00      	nop
 8007a0e:	3720      	adds	r7, #32
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	20000300 	.word	0x20000300
 8007a18:	20000304 	.word	0x20000304
 8007a1c:	20000408 	.word	0x20000408

08007a20 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007a20:	b480      	push	{r7}
 8007a22:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007a24:	4b07      	ldr	r3, [pc, #28]	; (8007a44 <pvTaskIncrementMutexHeldCount+0x24>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d004      	beq.n	8007a36 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007a2c:	4b05      	ldr	r3, [pc, #20]	; (8007a44 <pvTaskIncrementMutexHeldCount+0x24>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a32:	3201      	adds	r2, #1
 8007a34:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007a36:	4b03      	ldr	r3, [pc, #12]	; (8007a44 <pvTaskIncrementMutexHeldCount+0x24>)
 8007a38:	681b      	ldr	r3, [r3, #0]
	}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr
 8007a44:	20000300 	.word	0x20000300

08007a48 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007a52:	4b29      	ldr	r3, [pc, #164]	; (8007af8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a58:	4b28      	ldr	r3, [pc, #160]	; (8007afc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	3304      	adds	r3, #4
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7fe f86a 	bl	8005b38 <uxListRemove>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d10b      	bne.n	8007a82 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007a6a:	4b24      	ldr	r3, [pc, #144]	; (8007afc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a70:	2201      	movs	r2, #1
 8007a72:	fa02 f303 	lsl.w	r3, r2, r3
 8007a76:	43da      	mvns	r2, r3
 8007a78:	4b21      	ldr	r3, [pc, #132]	; (8007b00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4013      	ands	r3, r2
 8007a7e:	4a20      	ldr	r2, [pc, #128]	; (8007b00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a80:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a88:	d10a      	bne.n	8007aa0 <prvAddCurrentTaskToDelayedList+0x58>
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d007      	beq.n	8007aa0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a90:	4b1a      	ldr	r3, [pc, #104]	; (8007afc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	3304      	adds	r3, #4
 8007a96:	4619      	mov	r1, r3
 8007a98:	481a      	ldr	r0, [pc, #104]	; (8007b04 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007a9a:	f7fd fff0 	bl	8005a7e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007a9e:	e026      	b.n	8007aee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007aa8:	4b14      	ldr	r3, [pc, #80]	; (8007afc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68ba      	ldr	r2, [r7, #8]
 8007aae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007ab0:	68ba      	ldr	r2, [r7, #8]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d209      	bcs.n	8007acc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ab8:	4b13      	ldr	r3, [pc, #76]	; (8007b08 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	4b0f      	ldr	r3, [pc, #60]	; (8007afc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	3304      	adds	r3, #4
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	4610      	mov	r0, r2
 8007ac6:	f7fd fffe 	bl	8005ac6 <vListInsert>
}
 8007aca:	e010      	b.n	8007aee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007acc:	4b0f      	ldr	r3, [pc, #60]	; (8007b0c <prvAddCurrentTaskToDelayedList+0xc4>)
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	4b0a      	ldr	r3, [pc, #40]	; (8007afc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	3304      	adds	r3, #4
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	4610      	mov	r0, r2
 8007ada:	f7fd fff4 	bl	8005ac6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ade:	4b0c      	ldr	r3, [pc, #48]	; (8007b10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	68ba      	ldr	r2, [r7, #8]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d202      	bcs.n	8007aee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007ae8:	4a09      	ldr	r2, [pc, #36]	; (8007b10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	6013      	str	r3, [r2, #0]
}
 8007aee:	bf00      	nop
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	20000404 	.word	0x20000404
 8007afc:	20000300 	.word	0x20000300
 8007b00:	20000408 	.word	0x20000408
 8007b04:	200003ec 	.word	0x200003ec
 8007b08:	200003bc 	.word	0x200003bc
 8007b0c:	200003b8 	.word	0x200003b8
 8007b10:	20000420 	.word	0x20000420

08007b14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b14:	b480      	push	{r7}
 8007b16:	b085      	sub	sp, #20
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	3b04      	subs	r3, #4
 8007b24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007b2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	3b04      	subs	r3, #4
 8007b32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	f023 0201 	bic.w	r2, r3, #1
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	3b04      	subs	r3, #4
 8007b42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b44:	4a0c      	ldr	r2, [pc, #48]	; (8007b78 <pxPortInitialiseStack+0x64>)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	3b14      	subs	r3, #20
 8007b4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	3b04      	subs	r3, #4
 8007b5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f06f 0202 	mvn.w	r2, #2
 8007b62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	3b20      	subs	r3, #32
 8007b68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3714      	adds	r7, #20
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr
 8007b78:	08007b7d 	.word	0x08007b7d

08007b7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b085      	sub	sp, #20
 8007b80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b82:	2300      	movs	r3, #0
 8007b84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b86:	4b14      	ldr	r3, [pc, #80]	; (8007bd8 <prvTaskExitError+0x5c>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b8e:	d00c      	beq.n	8007baa <prvTaskExitError+0x2e>
	__asm volatile
 8007b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b94:	b672      	cpsid	i
 8007b96:	f383 8811 	msr	BASEPRI, r3
 8007b9a:	f3bf 8f6f 	isb	sy
 8007b9e:	f3bf 8f4f 	dsb	sy
 8007ba2:	b662      	cpsie	i
 8007ba4:	60fb      	str	r3, [r7, #12]
}
 8007ba6:	bf00      	nop
 8007ba8:	e7fe      	b.n	8007ba8 <prvTaskExitError+0x2c>
	__asm volatile
 8007baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bae:	b672      	cpsid	i
 8007bb0:	f383 8811 	msr	BASEPRI, r3
 8007bb4:	f3bf 8f6f 	isb	sy
 8007bb8:	f3bf 8f4f 	dsb	sy
 8007bbc:	b662      	cpsie	i
 8007bbe:	60bb      	str	r3, [r7, #8]
}
 8007bc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007bc2:	bf00      	nop
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d0fc      	beq.n	8007bc4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007bca:	bf00      	nop
 8007bcc:	bf00      	nop
 8007bce:	3714      	adds	r7, #20
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr
 8007bd8:	2000000c 	.word	0x2000000c
 8007bdc:	00000000 	.word	0x00000000

08007be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007be0:	4b07      	ldr	r3, [pc, #28]	; (8007c00 <pxCurrentTCBConst2>)
 8007be2:	6819      	ldr	r1, [r3, #0]
 8007be4:	6808      	ldr	r0, [r1, #0]
 8007be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bea:	f380 8809 	msr	PSP, r0
 8007bee:	f3bf 8f6f 	isb	sy
 8007bf2:	f04f 0000 	mov.w	r0, #0
 8007bf6:	f380 8811 	msr	BASEPRI, r0
 8007bfa:	4770      	bx	lr
 8007bfc:	f3af 8000 	nop.w

08007c00 <pxCurrentTCBConst2>:
 8007c00:	20000300 	.word	0x20000300
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007c04:	bf00      	nop
 8007c06:	bf00      	nop

08007c08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007c08:	4808      	ldr	r0, [pc, #32]	; (8007c2c <prvPortStartFirstTask+0x24>)
 8007c0a:	6800      	ldr	r0, [r0, #0]
 8007c0c:	6800      	ldr	r0, [r0, #0]
 8007c0e:	f380 8808 	msr	MSP, r0
 8007c12:	f04f 0000 	mov.w	r0, #0
 8007c16:	f380 8814 	msr	CONTROL, r0
 8007c1a:	b662      	cpsie	i
 8007c1c:	b661      	cpsie	f
 8007c1e:	f3bf 8f4f 	dsb	sy
 8007c22:	f3bf 8f6f 	isb	sy
 8007c26:	df00      	svc	0
 8007c28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c2a:	bf00      	nop
 8007c2c:	e000ed08 	.word	0xe000ed08

08007c30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c36:	4b37      	ldr	r3, [pc, #220]	; (8007d14 <xPortStartScheduler+0xe4>)
 8007c38:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	22ff      	movs	r2, #255	; 0xff
 8007c46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c50:	78fb      	ldrb	r3, [r7, #3]
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007c58:	b2da      	uxtb	r2, r3
 8007c5a:	4b2f      	ldr	r3, [pc, #188]	; (8007d18 <xPortStartScheduler+0xe8>)
 8007c5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c5e:	4b2f      	ldr	r3, [pc, #188]	; (8007d1c <xPortStartScheduler+0xec>)
 8007c60:	2207      	movs	r2, #7
 8007c62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c64:	e009      	b.n	8007c7a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007c66:	4b2d      	ldr	r3, [pc, #180]	; (8007d1c <xPortStartScheduler+0xec>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	4a2b      	ldr	r2, [pc, #172]	; (8007d1c <xPortStartScheduler+0xec>)
 8007c6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007c70:	78fb      	ldrb	r3, [r7, #3]
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	005b      	lsls	r3, r3, #1
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c7a:	78fb      	ldrb	r3, [r7, #3]
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c82:	2b80      	cmp	r3, #128	; 0x80
 8007c84:	d0ef      	beq.n	8007c66 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007c86:	4b25      	ldr	r3, [pc, #148]	; (8007d1c <xPortStartScheduler+0xec>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f1c3 0307 	rsb	r3, r3, #7
 8007c8e:	2b04      	cmp	r3, #4
 8007c90:	d00c      	beq.n	8007cac <xPortStartScheduler+0x7c>
	__asm volatile
 8007c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c96:	b672      	cpsid	i
 8007c98:	f383 8811 	msr	BASEPRI, r3
 8007c9c:	f3bf 8f6f 	isb	sy
 8007ca0:	f3bf 8f4f 	dsb	sy
 8007ca4:	b662      	cpsie	i
 8007ca6:	60bb      	str	r3, [r7, #8]
}
 8007ca8:	bf00      	nop
 8007caa:	e7fe      	b.n	8007caa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007cac:	4b1b      	ldr	r3, [pc, #108]	; (8007d1c <xPortStartScheduler+0xec>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	021b      	lsls	r3, r3, #8
 8007cb2:	4a1a      	ldr	r2, [pc, #104]	; (8007d1c <xPortStartScheduler+0xec>)
 8007cb4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007cb6:	4b19      	ldr	r3, [pc, #100]	; (8007d1c <xPortStartScheduler+0xec>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007cbe:	4a17      	ldr	r2, [pc, #92]	; (8007d1c <xPortStartScheduler+0xec>)
 8007cc0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	b2da      	uxtb	r2, r3
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007cca:	4b15      	ldr	r3, [pc, #84]	; (8007d20 <xPortStartScheduler+0xf0>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a14      	ldr	r2, [pc, #80]	; (8007d20 <xPortStartScheduler+0xf0>)
 8007cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007cd4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007cd6:	4b12      	ldr	r3, [pc, #72]	; (8007d20 <xPortStartScheduler+0xf0>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a11      	ldr	r2, [pc, #68]	; (8007d20 <xPortStartScheduler+0xf0>)
 8007cdc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007ce0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ce2:	f000 f8dd 	bl	8007ea0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ce6:	4b0f      	ldr	r3, [pc, #60]	; (8007d24 <xPortStartScheduler+0xf4>)
 8007ce8:	2200      	movs	r2, #0
 8007cea:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007cec:	f000 f8fc 	bl	8007ee8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007cf0:	4b0d      	ldr	r3, [pc, #52]	; (8007d28 <xPortStartScheduler+0xf8>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a0c      	ldr	r2, [pc, #48]	; (8007d28 <xPortStartScheduler+0xf8>)
 8007cf6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007cfa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007cfc:	f7ff ff84 	bl	8007c08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d00:	f7ff fa80 	bl	8007204 <vTaskSwitchContext>
	prvTaskExitError();
 8007d04:	f7ff ff3a 	bl	8007b7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	e000e400 	.word	0xe000e400
 8007d18:	2000042c 	.word	0x2000042c
 8007d1c:	20000430 	.word	0x20000430
 8007d20:	e000ed20 	.word	0xe000ed20
 8007d24:	2000000c 	.word	0x2000000c
 8007d28:	e000ef34 	.word	0xe000ef34

08007d2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
	__asm volatile
 8007d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d36:	b672      	cpsid	i
 8007d38:	f383 8811 	msr	BASEPRI, r3
 8007d3c:	f3bf 8f6f 	isb	sy
 8007d40:	f3bf 8f4f 	dsb	sy
 8007d44:	b662      	cpsie	i
 8007d46:	607b      	str	r3, [r7, #4]
}
 8007d48:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d4a:	4b10      	ldr	r3, [pc, #64]	; (8007d8c <vPortEnterCritical+0x60>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	4a0e      	ldr	r2, [pc, #56]	; (8007d8c <vPortEnterCritical+0x60>)
 8007d52:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d54:	4b0d      	ldr	r3, [pc, #52]	; (8007d8c <vPortEnterCritical+0x60>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d111      	bne.n	8007d80 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d5c:	4b0c      	ldr	r3, [pc, #48]	; (8007d90 <vPortEnterCritical+0x64>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d00c      	beq.n	8007d80 <vPortEnterCritical+0x54>
	__asm volatile
 8007d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6a:	b672      	cpsid	i
 8007d6c:	f383 8811 	msr	BASEPRI, r3
 8007d70:	f3bf 8f6f 	isb	sy
 8007d74:	f3bf 8f4f 	dsb	sy
 8007d78:	b662      	cpsie	i
 8007d7a:	603b      	str	r3, [r7, #0]
}
 8007d7c:	bf00      	nop
 8007d7e:	e7fe      	b.n	8007d7e <vPortEnterCritical+0x52>
	}
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr
 8007d8c:	2000000c 	.word	0x2000000c
 8007d90:	e000ed04 	.word	0xe000ed04

08007d94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d9a:	4b13      	ldr	r3, [pc, #76]	; (8007de8 <vPortExitCritical+0x54>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d10c      	bne.n	8007dbc <vPortExitCritical+0x28>
	__asm volatile
 8007da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da6:	b672      	cpsid	i
 8007da8:	f383 8811 	msr	BASEPRI, r3
 8007dac:	f3bf 8f6f 	isb	sy
 8007db0:	f3bf 8f4f 	dsb	sy
 8007db4:	b662      	cpsie	i
 8007db6:	607b      	str	r3, [r7, #4]
}
 8007db8:	bf00      	nop
 8007dba:	e7fe      	b.n	8007dba <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007dbc:	4b0a      	ldr	r3, [pc, #40]	; (8007de8 <vPortExitCritical+0x54>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	4a09      	ldr	r2, [pc, #36]	; (8007de8 <vPortExitCritical+0x54>)
 8007dc4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007dc6:	4b08      	ldr	r3, [pc, #32]	; (8007de8 <vPortExitCritical+0x54>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d105      	bne.n	8007dda <vPortExitCritical+0x46>
 8007dce:	2300      	movs	r3, #0
 8007dd0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	f383 8811 	msr	BASEPRI, r3
}
 8007dd8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007dda:	bf00      	nop
 8007ddc:	370c      	adds	r7, #12
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop
 8007de8:	2000000c 	.word	0x2000000c
 8007dec:	00000000 	.word	0x00000000

08007df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007df0:	f3ef 8009 	mrs	r0, PSP
 8007df4:	f3bf 8f6f 	isb	sy
 8007df8:	4b15      	ldr	r3, [pc, #84]	; (8007e50 <pxCurrentTCBConst>)
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	f01e 0f10 	tst.w	lr, #16
 8007e00:	bf08      	it	eq
 8007e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e0a:	6010      	str	r0, [r2, #0]
 8007e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007e14:	b672      	cpsid	i
 8007e16:	f380 8811 	msr	BASEPRI, r0
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	f3bf 8f6f 	isb	sy
 8007e22:	b662      	cpsie	i
 8007e24:	f7ff f9ee 	bl	8007204 <vTaskSwitchContext>
 8007e28:	f04f 0000 	mov.w	r0, #0
 8007e2c:	f380 8811 	msr	BASEPRI, r0
 8007e30:	bc09      	pop	{r0, r3}
 8007e32:	6819      	ldr	r1, [r3, #0]
 8007e34:	6808      	ldr	r0, [r1, #0]
 8007e36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e3a:	f01e 0f10 	tst.w	lr, #16
 8007e3e:	bf08      	it	eq
 8007e40:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e44:	f380 8809 	msr	PSP, r0
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	4770      	bx	lr
 8007e4e:	bf00      	nop

08007e50 <pxCurrentTCBConst>:
 8007e50:	20000300 	.word	0x20000300
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e54:	bf00      	nop
 8007e56:	bf00      	nop

08007e58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e62:	b672      	cpsid	i
 8007e64:	f383 8811 	msr	BASEPRI, r3
 8007e68:	f3bf 8f6f 	isb	sy
 8007e6c:	f3bf 8f4f 	dsb	sy
 8007e70:	b662      	cpsie	i
 8007e72:	607b      	str	r3, [r7, #4]
}
 8007e74:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e76:	f7ff f90b 	bl	8007090 <xTaskIncrementTick>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d003      	beq.n	8007e88 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e80:	4b06      	ldr	r3, [pc, #24]	; (8007e9c <SysTick_Handler+0x44>)
 8007e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e86:	601a      	str	r2, [r3, #0]
 8007e88:	2300      	movs	r3, #0
 8007e8a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	f383 8811 	msr	BASEPRI, r3
}
 8007e92:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e94:	bf00      	nop
 8007e96:	3708      	adds	r7, #8
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	e000ed04 	.word	0xe000ed04

08007ea0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ea4:	4b0b      	ldr	r3, [pc, #44]	; (8007ed4 <vPortSetupTimerInterrupt+0x34>)
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007eaa:	4b0b      	ldr	r3, [pc, #44]	; (8007ed8 <vPortSetupTimerInterrupt+0x38>)
 8007eac:	2200      	movs	r2, #0
 8007eae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007eb0:	4b0a      	ldr	r3, [pc, #40]	; (8007edc <vPortSetupTimerInterrupt+0x3c>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a0a      	ldr	r2, [pc, #40]	; (8007ee0 <vPortSetupTimerInterrupt+0x40>)
 8007eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8007eba:	099b      	lsrs	r3, r3, #6
 8007ebc:	4a09      	ldr	r2, [pc, #36]	; (8007ee4 <vPortSetupTimerInterrupt+0x44>)
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007ec2:	4b04      	ldr	r3, [pc, #16]	; (8007ed4 <vPortSetupTimerInterrupt+0x34>)
 8007ec4:	2207      	movs	r2, #7
 8007ec6:	601a      	str	r2, [r3, #0]
}
 8007ec8:	bf00      	nop
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr
 8007ed2:	bf00      	nop
 8007ed4:	e000e010 	.word	0xe000e010
 8007ed8:	e000e018 	.word	0xe000e018
 8007edc:	20000000 	.word	0x20000000
 8007ee0:	10624dd3 	.word	0x10624dd3
 8007ee4:	e000e014 	.word	0xe000e014

08007ee8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ee8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007ef8 <vPortEnableVFP+0x10>
 8007eec:	6801      	ldr	r1, [r0, #0]
 8007eee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007ef2:	6001      	str	r1, [r0, #0]
 8007ef4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ef6:	bf00      	nop
 8007ef8:	e000ed88 	.word	0xe000ed88

08007efc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007efc:	b480      	push	{r7}
 8007efe:	b085      	sub	sp, #20
 8007f00:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007f02:	f3ef 8305 	mrs	r3, IPSR
 8007f06:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2b0f      	cmp	r3, #15
 8007f0c:	d916      	bls.n	8007f3c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f0e:	4a19      	ldr	r2, [pc, #100]	; (8007f74 <vPortValidateInterruptPriority+0x78>)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	4413      	add	r3, r2
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007f18:	4b17      	ldr	r3, [pc, #92]	; (8007f78 <vPortValidateInterruptPriority+0x7c>)
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	7afa      	ldrb	r2, [r7, #11]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d20c      	bcs.n	8007f3c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8007f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f26:	b672      	cpsid	i
 8007f28:	f383 8811 	msr	BASEPRI, r3
 8007f2c:	f3bf 8f6f 	isb	sy
 8007f30:	f3bf 8f4f 	dsb	sy
 8007f34:	b662      	cpsie	i
 8007f36:	607b      	str	r3, [r7, #4]
}
 8007f38:	bf00      	nop
 8007f3a:	e7fe      	b.n	8007f3a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f3c:	4b0f      	ldr	r3, [pc, #60]	; (8007f7c <vPortValidateInterruptPriority+0x80>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007f44:	4b0e      	ldr	r3, [pc, #56]	; (8007f80 <vPortValidateInterruptPriority+0x84>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d90c      	bls.n	8007f66 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8007f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f50:	b672      	cpsid	i
 8007f52:	f383 8811 	msr	BASEPRI, r3
 8007f56:	f3bf 8f6f 	isb	sy
 8007f5a:	f3bf 8f4f 	dsb	sy
 8007f5e:	b662      	cpsie	i
 8007f60:	603b      	str	r3, [r7, #0]
}
 8007f62:	bf00      	nop
 8007f64:	e7fe      	b.n	8007f64 <vPortValidateInterruptPriority+0x68>
	}
 8007f66:	bf00      	nop
 8007f68:	3714      	adds	r7, #20
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	e000e3f0 	.word	0xe000e3f0
 8007f78:	2000042c 	.word	0x2000042c
 8007f7c:	e000ed0c 	.word	0xe000ed0c
 8007f80:	20000430 	.word	0x20000430

08007f84 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b08a      	sub	sp, #40	; 0x28
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007f90:	f7fe ffb0 	bl	8006ef4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007f94:	4b5b      	ldr	r3, [pc, #364]	; (8008104 <pvPortMalloc+0x180>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d101      	bne.n	8007fa0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f9c:	f000 f91a 	bl	80081d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007fa0:	4b59      	ldr	r3, [pc, #356]	; (8008108 <pvPortMalloc+0x184>)
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4013      	ands	r3, r2
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	f040 8092 	bne.w	80080d2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d01f      	beq.n	8007ff4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8007fb4:	2208      	movs	r2, #8
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4413      	add	r3, r2
 8007fba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f003 0307 	and.w	r3, r3, #7
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d016      	beq.n	8007ff4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f023 0307 	bic.w	r3, r3, #7
 8007fcc:	3308      	adds	r3, #8
 8007fce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f003 0307 	and.w	r3, r3, #7
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00c      	beq.n	8007ff4 <pvPortMalloc+0x70>
	__asm volatile
 8007fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fde:	b672      	cpsid	i
 8007fe0:	f383 8811 	msr	BASEPRI, r3
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	f3bf 8f4f 	dsb	sy
 8007fec:	b662      	cpsie	i
 8007fee:	617b      	str	r3, [r7, #20]
}
 8007ff0:	bf00      	nop
 8007ff2:	e7fe      	b.n	8007ff2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d06b      	beq.n	80080d2 <pvPortMalloc+0x14e>
 8007ffa:	4b44      	ldr	r3, [pc, #272]	; (800810c <pvPortMalloc+0x188>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	429a      	cmp	r2, r3
 8008002:	d866      	bhi.n	80080d2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008004:	4b42      	ldr	r3, [pc, #264]	; (8008110 <pvPortMalloc+0x18c>)
 8008006:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008008:	4b41      	ldr	r3, [pc, #260]	; (8008110 <pvPortMalloc+0x18c>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800800e:	e004      	b.n	800801a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8008010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008012:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800801a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	429a      	cmp	r2, r3
 8008022:	d903      	bls.n	800802c <pvPortMalloc+0xa8>
 8008024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1f1      	bne.n	8008010 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800802c:	4b35      	ldr	r3, [pc, #212]	; (8008104 <pvPortMalloc+0x180>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008032:	429a      	cmp	r2, r3
 8008034:	d04d      	beq.n	80080d2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008036:	6a3b      	ldr	r3, [r7, #32]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	2208      	movs	r2, #8
 800803c:	4413      	add	r3, r2
 800803e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	6a3b      	ldr	r3, [r7, #32]
 8008046:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804a:	685a      	ldr	r2, [r3, #4]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	1ad2      	subs	r2, r2, r3
 8008050:	2308      	movs	r3, #8
 8008052:	005b      	lsls	r3, r3, #1
 8008054:	429a      	cmp	r2, r3
 8008056:	d921      	bls.n	800809c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	4413      	add	r3, r2
 800805e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	f003 0307 	and.w	r3, r3, #7
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00c      	beq.n	8008084 <pvPortMalloc+0x100>
	__asm volatile
 800806a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800806e:	b672      	cpsid	i
 8008070:	f383 8811 	msr	BASEPRI, r3
 8008074:	f3bf 8f6f 	isb	sy
 8008078:	f3bf 8f4f 	dsb	sy
 800807c:	b662      	cpsie	i
 800807e:	613b      	str	r3, [r7, #16]
}
 8008080:	bf00      	nop
 8008082:	e7fe      	b.n	8008082 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008086:	685a      	ldr	r2, [r3, #4]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	1ad2      	subs	r2, r2, r3
 800808c:	69bb      	ldr	r3, [r7, #24]
 800808e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008096:	69b8      	ldr	r0, [r7, #24]
 8008098:	f000 f8fe 	bl	8008298 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800809c:	4b1b      	ldr	r3, [pc, #108]	; (800810c <pvPortMalloc+0x188>)
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	1ad3      	subs	r3, r2, r3
 80080a6:	4a19      	ldr	r2, [pc, #100]	; (800810c <pvPortMalloc+0x188>)
 80080a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80080aa:	4b18      	ldr	r3, [pc, #96]	; (800810c <pvPortMalloc+0x188>)
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	4b19      	ldr	r3, [pc, #100]	; (8008114 <pvPortMalloc+0x190>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d203      	bcs.n	80080be <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80080b6:	4b15      	ldr	r3, [pc, #84]	; (800810c <pvPortMalloc+0x188>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a16      	ldr	r2, [pc, #88]	; (8008114 <pvPortMalloc+0x190>)
 80080bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80080be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c0:	685a      	ldr	r2, [r3, #4]
 80080c2:	4b11      	ldr	r3, [pc, #68]	; (8008108 <pvPortMalloc+0x184>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	431a      	orrs	r2, r3
 80080c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80080cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ce:	2200      	movs	r2, #0
 80080d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80080d2:	f7fe ff1d 	bl	8006f10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	f003 0307 	and.w	r3, r3, #7
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00c      	beq.n	80080fa <pvPortMalloc+0x176>
	__asm volatile
 80080e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e4:	b672      	cpsid	i
 80080e6:	f383 8811 	msr	BASEPRI, r3
 80080ea:	f3bf 8f6f 	isb	sy
 80080ee:	f3bf 8f4f 	dsb	sy
 80080f2:	b662      	cpsie	i
 80080f4:	60fb      	str	r3, [r7, #12]
}
 80080f6:	bf00      	nop
 80080f8:	e7fe      	b.n	80080f8 <pvPortMalloc+0x174>
	return pvReturn;
 80080fa:	69fb      	ldr	r3, [r7, #28]
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3728      	adds	r7, #40	; 0x28
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	2000403c 	.word	0x2000403c
 8008108:	20004048 	.word	0x20004048
 800810c:	20004040 	.word	0x20004040
 8008110:	20004034 	.word	0x20004034
 8008114:	20004044 	.word	0x20004044

08008118 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b086      	sub	sp, #24
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d04c      	beq.n	80081c4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800812a:	2308      	movs	r3, #8
 800812c:	425b      	negs	r3, r3
 800812e:	697a      	ldr	r2, [r7, #20]
 8008130:	4413      	add	r3, r2
 8008132:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	685a      	ldr	r2, [r3, #4]
 800813c:	4b23      	ldr	r3, [pc, #140]	; (80081cc <vPortFree+0xb4>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4013      	ands	r3, r2
 8008142:	2b00      	cmp	r3, #0
 8008144:	d10c      	bne.n	8008160 <vPortFree+0x48>
	__asm volatile
 8008146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814a:	b672      	cpsid	i
 800814c:	f383 8811 	msr	BASEPRI, r3
 8008150:	f3bf 8f6f 	isb	sy
 8008154:	f3bf 8f4f 	dsb	sy
 8008158:	b662      	cpsie	i
 800815a:	60fb      	str	r3, [r7, #12]
}
 800815c:	bf00      	nop
 800815e:	e7fe      	b.n	800815e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d00c      	beq.n	8008182 <vPortFree+0x6a>
	__asm volatile
 8008168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816c:	b672      	cpsid	i
 800816e:	f383 8811 	msr	BASEPRI, r3
 8008172:	f3bf 8f6f 	isb	sy
 8008176:	f3bf 8f4f 	dsb	sy
 800817a:	b662      	cpsie	i
 800817c:	60bb      	str	r3, [r7, #8]
}
 800817e:	bf00      	nop
 8008180:	e7fe      	b.n	8008180 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	685a      	ldr	r2, [r3, #4]
 8008186:	4b11      	ldr	r3, [pc, #68]	; (80081cc <vPortFree+0xb4>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4013      	ands	r3, r2
 800818c:	2b00      	cmp	r3, #0
 800818e:	d019      	beq.n	80081c4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d115      	bne.n	80081c4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	685a      	ldr	r2, [r3, #4]
 800819c:	4b0b      	ldr	r3, [pc, #44]	; (80081cc <vPortFree+0xb4>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	43db      	mvns	r3, r3
 80081a2:	401a      	ands	r2, r3
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80081a8:	f7fe fea4 	bl	8006ef4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	685a      	ldr	r2, [r3, #4]
 80081b0:	4b07      	ldr	r3, [pc, #28]	; (80081d0 <vPortFree+0xb8>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4413      	add	r3, r2
 80081b6:	4a06      	ldr	r2, [pc, #24]	; (80081d0 <vPortFree+0xb8>)
 80081b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80081ba:	6938      	ldr	r0, [r7, #16]
 80081bc:	f000 f86c 	bl	8008298 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80081c0:	f7fe fea6 	bl	8006f10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80081c4:	bf00      	nop
 80081c6:	3718      	adds	r7, #24
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	20004048 	.word	0x20004048
 80081d0:	20004040 	.word	0x20004040

080081d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80081da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80081de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80081e0:	4b27      	ldr	r3, [pc, #156]	; (8008280 <prvHeapInit+0xac>)
 80081e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f003 0307 	and.w	r3, r3, #7
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d00c      	beq.n	8008208 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	3307      	adds	r3, #7
 80081f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f023 0307 	bic.w	r3, r3, #7
 80081fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80081fc:	68ba      	ldr	r2, [r7, #8]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	4a1f      	ldr	r2, [pc, #124]	; (8008280 <prvHeapInit+0xac>)
 8008204:	4413      	add	r3, r2
 8008206:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800820c:	4a1d      	ldr	r2, [pc, #116]	; (8008284 <prvHeapInit+0xb0>)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008212:	4b1c      	ldr	r3, [pc, #112]	; (8008284 <prvHeapInit+0xb0>)
 8008214:	2200      	movs	r2, #0
 8008216:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	68ba      	ldr	r2, [r7, #8]
 800821c:	4413      	add	r3, r2
 800821e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008220:	2208      	movs	r2, #8
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	1a9b      	subs	r3, r3, r2
 8008226:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f023 0307 	bic.w	r3, r3, #7
 800822e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	4a15      	ldr	r2, [pc, #84]	; (8008288 <prvHeapInit+0xb4>)
 8008234:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008236:	4b14      	ldr	r3, [pc, #80]	; (8008288 <prvHeapInit+0xb4>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2200      	movs	r2, #0
 800823c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800823e:	4b12      	ldr	r3, [pc, #72]	; (8008288 <prvHeapInit+0xb4>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2200      	movs	r2, #0
 8008244:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	1ad2      	subs	r2, r2, r3
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008254:	4b0c      	ldr	r3, [pc, #48]	; (8008288 <prvHeapInit+0xb4>)
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	4a0a      	ldr	r2, [pc, #40]	; (800828c <prvHeapInit+0xb8>)
 8008262:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	4a09      	ldr	r2, [pc, #36]	; (8008290 <prvHeapInit+0xbc>)
 800826a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800826c:	4b09      	ldr	r3, [pc, #36]	; (8008294 <prvHeapInit+0xc0>)
 800826e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008272:	601a      	str	r2, [r3, #0]
}
 8008274:	bf00      	nop
 8008276:	3714      	adds	r7, #20
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr
 8008280:	20000434 	.word	0x20000434
 8008284:	20004034 	.word	0x20004034
 8008288:	2000403c 	.word	0x2000403c
 800828c:	20004044 	.word	0x20004044
 8008290:	20004040 	.word	0x20004040
 8008294:	20004048 	.word	0x20004048

08008298 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008298:	b480      	push	{r7}
 800829a:	b085      	sub	sp, #20
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80082a0:	4b28      	ldr	r3, [pc, #160]	; (8008344 <prvInsertBlockIntoFreeList+0xac>)
 80082a2:	60fb      	str	r3, [r7, #12]
 80082a4:	e002      	b.n	80082ac <prvInsertBlockIntoFreeList+0x14>
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	60fb      	str	r3, [r7, #12]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d8f7      	bhi.n	80082a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	68ba      	ldr	r2, [r7, #8]
 80082c0:	4413      	add	r3, r2
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d108      	bne.n	80082da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	685a      	ldr	r2, [r3, #4]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	441a      	add	r2, r3
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	441a      	add	r2, r3
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d118      	bne.n	8008320 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	4b15      	ldr	r3, [pc, #84]	; (8008348 <prvInsertBlockIntoFreeList+0xb0>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d00d      	beq.n	8008316 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	685a      	ldr	r2, [r3, #4]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	441a      	add	r2, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	601a      	str	r2, [r3, #0]
 8008314:	e008      	b.n	8008328 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008316:	4b0c      	ldr	r3, [pc, #48]	; (8008348 <prvInsertBlockIntoFreeList+0xb0>)
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	601a      	str	r2, [r3, #0]
 800831e:	e003      	b.n	8008328 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	429a      	cmp	r2, r3
 800832e:	d002      	beq.n	8008336 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008336:	bf00      	nop
 8008338:	3714      	adds	r7, #20
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop
 8008344:	20004034 	.word	0x20004034
 8008348:	2000403c 	.word	0x2000403c

0800834c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8008356:	f009 fe6b 	bl	8012030 <sys_timeouts_sleeptime>
 800835a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008362:	d10b      	bne.n	800837c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8008364:	4813      	ldr	r0, [pc, #76]	; (80083b4 <tcpip_timeouts_mbox_fetch+0x68>)
 8008366:	f00c fd04 	bl	8014d72 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800836a:	2200      	movs	r2, #0
 800836c:	6839      	ldr	r1, [r7, #0]
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f00c fc76 	bl	8014c60 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8008374:	480f      	ldr	r0, [pc, #60]	; (80083b4 <tcpip_timeouts_mbox_fetch+0x68>)
 8008376:	f00c fced 	bl	8014d54 <sys_mutex_lock>
    return;
 800837a:	e018      	b.n	80083ae <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d102      	bne.n	8008388 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8008382:	f009 fe1b 	bl	8011fbc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8008386:	e7e6      	b.n	8008356 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8008388:	480a      	ldr	r0, [pc, #40]	; (80083b4 <tcpip_timeouts_mbox_fetch+0x68>)
 800838a:	f00c fcf2 	bl	8014d72 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800838e:	68fa      	ldr	r2, [r7, #12]
 8008390:	6839      	ldr	r1, [r7, #0]
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f00c fc64 	bl	8014c60 <sys_arch_mbox_fetch>
 8008398:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800839a:	4806      	ldr	r0, [pc, #24]	; (80083b4 <tcpip_timeouts_mbox_fetch+0x68>)
 800839c:	f00c fcda 	bl	8014d54 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083a6:	d102      	bne.n	80083ae <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80083a8:	f009 fe08 	bl	8011fbc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80083ac:	e7d3      	b.n	8008356 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80083ae:	3710      	adds	r7, #16
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	20007400 	.word	0x20007400

080083b8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80083c0:	4810      	ldr	r0, [pc, #64]	; (8008404 <tcpip_thread+0x4c>)
 80083c2:	f00c fcc7 	bl	8014d54 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80083c6:	4b10      	ldr	r3, [pc, #64]	; (8008408 <tcpip_thread+0x50>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d005      	beq.n	80083da <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80083ce:	4b0e      	ldr	r3, [pc, #56]	; (8008408 <tcpip_thread+0x50>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a0e      	ldr	r2, [pc, #56]	; (800840c <tcpip_thread+0x54>)
 80083d4:	6812      	ldr	r2, [r2, #0]
 80083d6:	4610      	mov	r0, r2
 80083d8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80083da:	f107 030c 	add.w	r3, r7, #12
 80083de:	4619      	mov	r1, r3
 80083e0:	480b      	ldr	r0, [pc, #44]	; (8008410 <tcpip_thread+0x58>)
 80083e2:	f7ff ffb3 	bl	800834c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d106      	bne.n	80083fa <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80083ec:	4b09      	ldr	r3, [pc, #36]	; (8008414 <tcpip_thread+0x5c>)
 80083ee:	2291      	movs	r2, #145	; 0x91
 80083f0:	4909      	ldr	r1, [pc, #36]	; (8008418 <tcpip_thread+0x60>)
 80083f2:	480a      	ldr	r0, [pc, #40]	; (800841c <tcpip_thread+0x64>)
 80083f4:	f00c fd56 	bl	8014ea4 <iprintf>
      continue;
 80083f8:	e003      	b.n	8008402 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	4618      	mov	r0, r3
 80083fe:	f000 f80f 	bl	8008420 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8008402:	e7ea      	b.n	80083da <tcpip_thread+0x22>
 8008404:	20007400 	.word	0x20007400
 8008408:	2000404c 	.word	0x2000404c
 800840c:	20004050 	.word	0x20004050
 8008410:	20004054 	.word	0x20004054
 8008414:	0801626c 	.word	0x0801626c
 8008418:	0801629c 	.word	0x0801629c
 800841c:	080162bc 	.word	0x080162bc

08008420 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	2b02      	cmp	r3, #2
 800842e:	d026      	beq.n	800847e <tcpip_thread_handle_msg+0x5e>
 8008430:	2b02      	cmp	r3, #2
 8008432:	dc2b      	bgt.n	800848c <tcpip_thread_handle_msg+0x6c>
 8008434:	2b00      	cmp	r3, #0
 8008436:	d002      	beq.n	800843e <tcpip_thread_handle_msg+0x1e>
 8008438:	2b01      	cmp	r3, #1
 800843a:	d015      	beq.n	8008468 <tcpip_thread_handle_msg+0x48>
 800843c:	e026      	b.n	800848c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	6850      	ldr	r0, [r2, #4]
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	6892      	ldr	r2, [r2, #8]
 800844a:	4611      	mov	r1, r2
 800844c:	4798      	blx	r3
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d004      	beq.n	800845e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	4618      	mov	r0, r3
 800845a:	f003 f913 	bl	800b684 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800845e:	6879      	ldr	r1, [r7, #4]
 8008460:	2009      	movs	r0, #9
 8008462:	f002 fa6b 	bl	800a93c <memp_free>
      break;
 8008466:	e018      	b.n	800849a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	6892      	ldr	r2, [r2, #8]
 8008470:	4610      	mov	r0, r2
 8008472:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8008474:	6879      	ldr	r1, [r7, #4]
 8008476:	2008      	movs	r0, #8
 8008478:	f002 fa60 	bl	800a93c <memp_free>
      break;
 800847c:	e00d      	b.n	800849a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	6892      	ldr	r2, [r2, #8]
 8008486:	4610      	mov	r0, r2
 8008488:	4798      	blx	r3
      break;
 800848a:	e006      	b.n	800849a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800848c:	4b05      	ldr	r3, [pc, #20]	; (80084a4 <tcpip_thread_handle_msg+0x84>)
 800848e:	22cf      	movs	r2, #207	; 0xcf
 8008490:	4905      	ldr	r1, [pc, #20]	; (80084a8 <tcpip_thread_handle_msg+0x88>)
 8008492:	4806      	ldr	r0, [pc, #24]	; (80084ac <tcpip_thread_handle_msg+0x8c>)
 8008494:	f00c fd06 	bl	8014ea4 <iprintf>
      break;
 8008498:	bf00      	nop
  }
}
 800849a:	bf00      	nop
 800849c:	3708      	adds	r7, #8
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	0801626c 	.word	0x0801626c
 80084a8:	0801629c 	.word	0x0801629c
 80084ac:	080162bc 	.word	0x080162bc

080084b0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b086      	sub	sp, #24
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80084bc:	481a      	ldr	r0, [pc, #104]	; (8008528 <tcpip_inpkt+0x78>)
 80084be:	f00c fc0e 	bl	8014cde <sys_mbox_valid>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d105      	bne.n	80084d4 <tcpip_inpkt+0x24>
 80084c8:	4b18      	ldr	r3, [pc, #96]	; (800852c <tcpip_inpkt+0x7c>)
 80084ca:	22fc      	movs	r2, #252	; 0xfc
 80084cc:	4918      	ldr	r1, [pc, #96]	; (8008530 <tcpip_inpkt+0x80>)
 80084ce:	4819      	ldr	r0, [pc, #100]	; (8008534 <tcpip_inpkt+0x84>)
 80084d0:	f00c fce8 	bl	8014ea4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80084d4:	2009      	movs	r0, #9
 80084d6:	f002 f9df 	bl	800a898 <memp_malloc>
 80084da:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d102      	bne.n	80084e8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80084e2:	f04f 33ff 	mov.w	r3, #4294967295
 80084e6:	e01a      	b.n	800851e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	2200      	movs	r2, #0
 80084ec:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	68ba      	ldr	r2, [r7, #8]
 80084f8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8008500:	6979      	ldr	r1, [r7, #20]
 8008502:	4809      	ldr	r0, [pc, #36]	; (8008528 <tcpip_inpkt+0x78>)
 8008504:	f00c fb92 	bl	8014c2c <sys_mbox_trypost>
 8008508:	4603      	mov	r3, r0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d006      	beq.n	800851c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800850e:	6979      	ldr	r1, [r7, #20]
 8008510:	2009      	movs	r0, #9
 8008512:	f002 fa13 	bl	800a93c <memp_free>
    return ERR_MEM;
 8008516:	f04f 33ff 	mov.w	r3, #4294967295
 800851a:	e000      	b.n	800851e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800851c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800851e:	4618      	mov	r0, r3
 8008520:	3718      	adds	r7, #24
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	20004054 	.word	0x20004054
 800852c:	0801626c 	.word	0x0801626c
 8008530:	080162e4 	.word	0x080162e4
 8008534:	080162bc 	.word	0x080162bc

08008538 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008548:	f003 0318 	and.w	r3, r3, #24
 800854c:	2b00      	cmp	r3, #0
 800854e:	d006      	beq.n	800855e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8008550:	4a08      	ldr	r2, [pc, #32]	; (8008574 <tcpip_input+0x3c>)
 8008552:	6839      	ldr	r1, [r7, #0]
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f7ff ffab 	bl	80084b0 <tcpip_inpkt>
 800855a:	4603      	mov	r3, r0
 800855c:	e005      	b.n	800856a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800855e:	4a06      	ldr	r2, [pc, #24]	; (8008578 <tcpip_input+0x40>)
 8008560:	6839      	ldr	r1, [r7, #0]
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f7ff ffa4 	bl	80084b0 <tcpip_inpkt>
 8008568:	4603      	mov	r3, r0
}
 800856a:	4618      	mov	r0, r3
 800856c:	3708      	adds	r7, #8
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	08014a3d 	.word	0x08014a3d
 8008578:	080136fd 	.word	0x080136fd

0800857c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8008586:	4819      	ldr	r0, [pc, #100]	; (80085ec <tcpip_try_callback+0x70>)
 8008588:	f00c fba9 	bl	8014cde <sys_mbox_valid>
 800858c:	4603      	mov	r3, r0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d106      	bne.n	80085a0 <tcpip_try_callback+0x24>
 8008592:	4b17      	ldr	r3, [pc, #92]	; (80085f0 <tcpip_try_callback+0x74>)
 8008594:	f240 125d 	movw	r2, #349	; 0x15d
 8008598:	4916      	ldr	r1, [pc, #88]	; (80085f4 <tcpip_try_callback+0x78>)
 800859a:	4817      	ldr	r0, [pc, #92]	; (80085f8 <tcpip_try_callback+0x7c>)
 800859c:	f00c fc82 	bl	8014ea4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80085a0:	2008      	movs	r0, #8
 80085a2:	f002 f979 	bl	800a898 <memp_malloc>
 80085a6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d102      	bne.n	80085b4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80085ae:	f04f 33ff 	mov.w	r3, #4294967295
 80085b2:	e017      	b.n	80085e4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2201      	movs	r2, #1
 80085b8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	683a      	ldr	r2, [r7, #0]
 80085c4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80085c6:	68f9      	ldr	r1, [r7, #12]
 80085c8:	4808      	ldr	r0, [pc, #32]	; (80085ec <tcpip_try_callback+0x70>)
 80085ca:	f00c fb2f 	bl	8014c2c <sys_mbox_trypost>
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d006      	beq.n	80085e2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80085d4:	68f9      	ldr	r1, [r7, #12]
 80085d6:	2008      	movs	r0, #8
 80085d8:	f002 f9b0 	bl	800a93c <memp_free>
    return ERR_MEM;
 80085dc:	f04f 33ff 	mov.w	r3, #4294967295
 80085e0:	e000      	b.n	80085e4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3710      	adds	r7, #16
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	20004054 	.word	0x20004054
 80085f0:	0801626c 	.word	0x0801626c
 80085f4:	080162e4 	.word	0x080162e4
 80085f8:	080162bc 	.word	0x080162bc

080085fc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af02      	add	r7, sp, #8
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  lwip_init();
 8008606:	f001 fc97 	bl	8009f38 <lwip_init>

  tcpip_init_done = initfunc;
 800860a:	4a17      	ldr	r2, [pc, #92]	; (8008668 <tcpip_init+0x6c>)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8008610:	4a16      	ldr	r2, [pc, #88]	; (800866c <tcpip_init+0x70>)
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8008616:	2106      	movs	r1, #6
 8008618:	4815      	ldr	r0, [pc, #84]	; (8008670 <tcpip_init+0x74>)
 800861a:	f00c fae5 	bl	8014be8 <sys_mbox_new>
 800861e:	4603      	mov	r3, r0
 8008620:	2b00      	cmp	r3, #0
 8008622:	d006      	beq.n	8008632 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8008624:	4b13      	ldr	r3, [pc, #76]	; (8008674 <tcpip_init+0x78>)
 8008626:	f240 2261 	movw	r2, #609	; 0x261
 800862a:	4913      	ldr	r1, [pc, #76]	; (8008678 <tcpip_init+0x7c>)
 800862c:	4813      	ldr	r0, [pc, #76]	; (800867c <tcpip_init+0x80>)
 800862e:	f00c fc39 	bl	8014ea4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8008632:	4813      	ldr	r0, [pc, #76]	; (8008680 <tcpip_init+0x84>)
 8008634:	f00c fb72 	bl	8014d1c <sys_mutex_new>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d006      	beq.n	800864c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800863e:	4b0d      	ldr	r3, [pc, #52]	; (8008674 <tcpip_init+0x78>)
 8008640:	f240 2265 	movw	r2, #613	; 0x265
 8008644:	490f      	ldr	r1, [pc, #60]	; (8008684 <tcpip_init+0x88>)
 8008646:	480d      	ldr	r0, [pc, #52]	; (800867c <tcpip_init+0x80>)
 8008648:	f00c fc2c 	bl	8014ea4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800864c:	2300      	movs	r3, #0
 800864e:	9300      	str	r3, [sp, #0]
 8008650:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008654:	2200      	movs	r2, #0
 8008656:	490c      	ldr	r1, [pc, #48]	; (8008688 <tcpip_init+0x8c>)
 8008658:	480c      	ldr	r0, [pc, #48]	; (800868c <tcpip_init+0x90>)
 800865a:	f00c fb97 	bl	8014d8c <sys_thread_new>
}
 800865e:	bf00      	nop
 8008660:	3708      	adds	r7, #8
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	2000404c 	.word	0x2000404c
 800866c:	20004050 	.word	0x20004050
 8008670:	20004054 	.word	0x20004054
 8008674:	0801626c 	.word	0x0801626c
 8008678:	080162f4 	.word	0x080162f4
 800867c:	080162bc 	.word	0x080162bc
 8008680:	20007400 	.word	0x20007400
 8008684:	08016318 	.word	0x08016318
 8008688:	080083b9 	.word	0x080083b9
 800868c:	0801633c 	.word	0x0801633c

08008690 <msg_generate_packet_id>:
 * @param client MQTT client
 * @return New packet identifier, range 1 to 65535
 */
static u16_t
msg_generate_packet_id(mqtt_client_t *client)
{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  client->pkt_id_seq++;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	88db      	ldrh	r3, [r3, #6]
 800869c:	3301      	adds	r3, #1
 800869e:	b29a      	uxth	r2, r3
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	80da      	strh	r2, [r3, #6]
  if (client->pkt_id_seq == 0) {
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	88db      	ldrh	r3, [r3, #6]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d105      	bne.n	80086b8 <msg_generate_packet_id+0x28>
    client->pkt_id_seq++;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	88db      	ldrh	r3, [r3, #6]
 80086b0:	3301      	adds	r3, #1
 80086b2:	b29a      	uxth	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	80da      	strh	r2, [r3, #6]
  }
  return client->pkt_id_seq;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	88db      	ldrh	r3, [r3, #6]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <mqtt_ringbuf_put>:
/* Output ring buffer */

/** Add single item to ring buffer */
static void
mqtt_ringbuf_put(struct mqtt_ringbuf_t *rb, u8_t item)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	460b      	mov	r3, r1
 80086d2:	70fb      	strb	r3, [r7, #3]
  rb->buf[rb->put] = item;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	881b      	ldrh	r3, [r3, #0]
 80086d8:	461a      	mov	r2, r3
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4413      	add	r3, r2
 80086de:	78fa      	ldrb	r2, [r7, #3]
 80086e0:	711a      	strb	r2, [r3, #4]
  rb->put++;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	881b      	ldrh	r3, [r3, #0]
 80086e6:	3301      	adds	r3, #1
 80086e8:	b29a      	uxth	r2, r3
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	801a      	strh	r2, [r3, #0]
  if (rb->put >= MQTT_OUTPUT_RINGBUF_SIZE) {
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	881b      	ldrh	r3, [r3, #0]
 80086f2:	2bff      	cmp	r3, #255	; 0xff
 80086f4:	d902      	bls.n	80086fc <mqtt_ringbuf_put+0x34>
    rb->put = 0;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	801a      	strh	r2, [r3, #0]
  }
}
 80086fc:	bf00      	nop
 80086fe:	370c      	adds	r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <mqtt_ringbuf_get_ptr>:

/** Return pointer to ring buffer get position */
static u8_t *
mqtt_ringbuf_get_ptr(struct mqtt_ringbuf_t *rb)
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  return &rb->buf[rb->get];
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	885b      	ldrh	r3, [r3, #2]
 8008714:	461a      	mov	r2, r3
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4413      	add	r3, r2
 800871a:	3304      	adds	r3, #4
}
 800871c:	4618      	mov	r0, r3
 800871e:	370c      	adds	r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <mqtt_ringbuf_advance_get_idx>:

static void
mqtt_ringbuf_advance_get_idx(struct mqtt_ringbuf_t *rb, u16_t len)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	460b      	mov	r3, r1
 8008732:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_ringbuf_advance_get_idx: len < MQTT_OUTPUT_RINGBUF_SIZE", len < MQTT_OUTPUT_RINGBUF_SIZE);
 8008734:	887b      	ldrh	r3, [r7, #2]
 8008736:	2bff      	cmp	r3, #255	; 0xff
 8008738:	d905      	bls.n	8008746 <mqtt_ringbuf_advance_get_idx+0x1e>
 800873a:	4b0e      	ldr	r3, [pc, #56]	; (8008774 <mqtt_ringbuf_advance_get_idx+0x4c>)
 800873c:	22cb      	movs	r2, #203	; 0xcb
 800873e:	490e      	ldr	r1, [pc, #56]	; (8008778 <mqtt_ringbuf_advance_get_idx+0x50>)
 8008740:	480e      	ldr	r0, [pc, #56]	; (800877c <mqtt_ringbuf_advance_get_idx+0x54>)
 8008742:	f00c fbaf 	bl	8014ea4 <iprintf>

  rb->get += len;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	885a      	ldrh	r2, [r3, #2]
 800874a:	887b      	ldrh	r3, [r7, #2]
 800874c:	4413      	add	r3, r2
 800874e:	b29a      	uxth	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	805a      	strh	r2, [r3, #2]
  if (rb->get >= MQTT_OUTPUT_RINGBUF_SIZE) {
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	885b      	ldrh	r3, [r3, #2]
 8008758:	2bff      	cmp	r3, #255	; 0xff
 800875a:	d906      	bls.n	800876a <mqtt_ringbuf_advance_get_idx+0x42>
    rb->get = rb->get - MQTT_OUTPUT_RINGBUF_SIZE;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	885b      	ldrh	r3, [r3, #2]
 8008760:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008764:	b29a      	uxth	r2, r3
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	805a      	strh	r2, [r3, #2]
  }
}
 800876a:	bf00      	nop
 800876c:	3708      	adds	r7, #8
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	0801634c 	.word	0x0801634c
 8008778:	08016384 	.word	0x08016384
 800877c:	080163c4 	.word	0x080163c4

08008780 <mqtt_ringbuf_len>:

/** Return number of bytes in ring buffer */
static u16_t
mqtt_ringbuf_len(struct mqtt_ringbuf_t *rb)
{
 8008780:	b480      	push	{r7}
 8008782:	b085      	sub	sp, #20
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  u32_t len = rb->put - rb->get;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	881b      	ldrh	r3, [r3, #0]
 800878c:	461a      	mov	r2, r3
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	885b      	ldrh	r3, [r3, #2]
 8008792:	1ad3      	subs	r3, r2, r3
 8008794:	60fb      	str	r3, [r7, #12]
  if (len > 0xFFFF) {
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800879c:	d303      	bcc.n	80087a6 <mqtt_ringbuf_len+0x26>
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80087a4:	60fb      	str	r3, [r7, #12]
  }
  return (u16_t)len;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	b29b      	uxth	r3, r3
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3714      	adds	r7, #20
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr
	...

080087b8 <mqtt_output_send>:
 * @param rb Output ring buffer
 * @param tpcb TCP connection handle
 */
static void
mqtt_output_send(struct mqtt_ringbuf_t *rb, struct altcp_pcb *tpcb)
{
 80087b8:	b590      	push	{r4, r7, lr}
 80087ba:	b085      	sub	sp, #20
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  err_t err;
  u8_t wrap = 0;
 80087c2:	2300      	movs	r3, #0
 80087c4:	73bb      	strb	r3, [r7, #14]
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f7ff ffda 	bl	8008780 <mqtt_ringbuf_len>
 80087cc:	4603      	mov	r3, r0
 80087ce:	461a      	mov	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	885b      	ldrh	r3, [r3, #2]
 80087d4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80087d8:	429a      	cmp	r2, r3
 80087da:	da04      	bge.n	80087e6 <mqtt_output_send+0x2e>
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f7ff ffcf 	bl	8008780 <mqtt_ringbuf_len>
 80087e2:	4603      	mov	r3, r0
 80087e4:	e004      	b.n	80087f0 <mqtt_output_send+0x38>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	885b      	ldrh	r3, [r3, #2]
 80087ea:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	817b      	strh	r3, [r7, #10]
  u16_t send_len = altcp_sndbuf(tpcb);
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80087f8:	81bb      	strh	r3, [r7, #12]
  LWIP_ASSERT("mqtt_output_send: tpcb != NULL", tpcb != NULL);
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d105      	bne.n	800880c <mqtt_output_send+0x54>
 8008800:	4b44      	ldr	r3, [pc, #272]	; (8008914 <mqtt_output_send+0x15c>)
 8008802:	22f0      	movs	r2, #240	; 0xf0
 8008804:	4944      	ldr	r1, [pc, #272]	; (8008918 <mqtt_output_send+0x160>)
 8008806:	4845      	ldr	r0, [pc, #276]	; (800891c <mqtt_output_send+0x164>)
 8008808:	f00c fb4c 	bl	8014ea4 <iprintf>

  if (send_len == 0 || ringbuf_lin_len == 0) {
 800880c:	89bb      	ldrh	r3, [r7, #12]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d07c      	beq.n	800890c <mqtt_output_send+0x154>
 8008812:	897b      	ldrh	r3, [r7, #10]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d079      	beq.n	800890c <mqtt_output_send+0x154>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_output_send: tcp_sndbuf: %d bytes, ringbuf_linear_available: %d, get %d, put %d\n",
                                 send_len, ringbuf_lin_len, rb->get, rb->put));

  if (send_len > ringbuf_lin_len) {
 8008818:	89ba      	ldrh	r2, [r7, #12]
 800881a:	897b      	ldrh	r3, [r7, #10]
 800881c:	429a      	cmp	r2, r3
 800881e:	d90d      	bls.n	800883c <mqtt_output_send+0x84>
    /* Space in TCP output buffer is larger than available in ring buffer linear portion */
    send_len = ringbuf_lin_len;
 8008820:	897b      	ldrh	r3, [r7, #10]
 8008822:	81bb      	strh	r3, [r7, #12]
    /* Wrap around if more data in ring buffer after linear portion */
    wrap = (mqtt_ringbuf_len(rb) > ringbuf_lin_len);
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f7ff ffab 	bl	8008780 <mqtt_ringbuf_len>
 800882a:	4603      	mov	r3, r0
 800882c:	461a      	mov	r2, r3
 800882e:	897b      	ldrh	r3, [r7, #10]
 8008830:	4293      	cmp	r3, r2
 8008832:	bf34      	ite	cc
 8008834:	2301      	movcc	r3, #1
 8008836:	2300      	movcs	r3, #0
 8008838:	b2db      	uxtb	r3, r3
 800883a:	73bb      	strb	r3, [r7, #14]
  }
  err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f7ff ff63 	bl	8008708 <mqtt_ringbuf_get_ptr>
 8008842:	4601      	mov	r1, r0
 8008844:	7bbb      	ldrb	r3, [r7, #14]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d001      	beq.n	800884e <mqtt_output_send+0x96>
 800884a:	2303      	movs	r3, #3
 800884c:	e000      	b.n	8008850 <mqtt_output_send+0x98>
 800884e:	2301      	movs	r3, #1
 8008850:	89ba      	ldrh	r2, [r7, #12]
 8008852:	6838      	ldr	r0, [r7, #0]
 8008854:	f007 fd10 	bl	8010278 <tcp_write>
 8008858:	4603      	mov	r3, r0
 800885a:	73fb      	strb	r3, [r7, #15]
  if ((err == ERR_OK) && wrap) {
 800885c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d146      	bne.n	80088f2 <mqtt_output_send+0x13a>
 8008864:	7bbb      	ldrb	r3, [r7, #14]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d043      	beq.n	80088f2 <mqtt_output_send+0x13a>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 800886a:	89bb      	ldrh	r3, [r7, #12]
 800886c:	4619      	mov	r1, r3
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f7ff ff5a 	bl	8008728 <mqtt_ringbuf_advance_get_idx>
    /* Use the lesser one of ring buffer linear length and TCP send buffer size */
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800887a:	461c      	mov	r4, r3
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f7ff ff7f 	bl	8008780 <mqtt_ringbuf_len>
 8008882:	4603      	mov	r3, r0
 8008884:	461a      	mov	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	885b      	ldrh	r3, [r3, #2]
 800888a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800888e:	429a      	cmp	r2, r3
 8008890:	da04      	bge.n	800889c <mqtt_output_send+0xe4>
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f7ff ff74 	bl	8008780 <mqtt_ringbuf_len>
 8008898:	4603      	mov	r3, r0
 800889a:	e003      	b.n	80088a4 <mqtt_output_send+0xec>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	885b      	ldrh	r3, [r3, #2]
 80088a0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80088a4:	42a3      	cmp	r3, r4
 80088a6:	dd03      	ble.n	80088b0 <mqtt_output_send+0xf8>
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80088ae:	e014      	b.n	80088da <mqtt_output_send+0x122>
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f7ff ff65 	bl	8008780 <mqtt_ringbuf_len>
 80088b6:	4603      	mov	r3, r0
 80088b8:	461a      	mov	r2, r3
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	885b      	ldrh	r3, [r3, #2]
 80088be:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80088c2:	429a      	cmp	r2, r3
 80088c4:	da04      	bge.n	80088d0 <mqtt_output_send+0x118>
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f7ff ff5a 	bl	8008780 <mqtt_ringbuf_len>
 80088cc:	4603      	mov	r3, r0
 80088ce:	e004      	b.n	80088da <mqtt_output_send+0x122>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	885b      	ldrh	r3, [r3, #2]
 80088d4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80088d8:	b29b      	uxth	r3, r3
 80088da:	81bb      	strh	r3, [r7, #12]
    err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f7ff ff13 	bl	8008708 <mqtt_ringbuf_get_ptr>
 80088e2:	4601      	mov	r1, r0
 80088e4:	89ba      	ldrh	r2, [r7, #12]
 80088e6:	2301      	movs	r3, #1
 80088e8:	6838      	ldr	r0, [r7, #0]
 80088ea:	f007 fcc5 	bl	8010278 <tcp_write>
 80088ee:	4603      	mov	r3, r0
 80088f0:	73fb      	strb	r3, [r7, #15]
  }

  if (err == ERR_OK) {
 80088f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d109      	bne.n	800890e <mqtt_output_send+0x156>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 80088fa:	89bb      	ldrh	r3, [r7, #12]
 80088fc:	4619      	mov	r1, r3
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f7ff ff12 	bl	8008728 <mqtt_ringbuf_advance_get_idx>
    /* Flush */
    altcp_output(tpcb);
 8008904:	6838      	ldr	r0, [r7, #0]
 8008906:	f008 faa1 	bl	8010e4c <tcp_output>
 800890a:	e000      	b.n	800890e <mqtt_output_send+0x156>
    return;
 800890c:	bf00      	nop
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_output_send: Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
  }
}
 800890e:	3714      	adds	r7, #20
 8008910:	46bd      	mov	sp, r7
 8008912:	bd90      	pop	{r4, r7, pc}
 8008914:	0801634c 	.word	0x0801634c
 8008918:	080163ec 	.word	0x080163ec
 800891c:	080163c4 	.word	0x080163c4

08008920 <mqtt_create_request>:
 * @param arg Parameter following callback
 * @return Request or NULL if failed to create
 */
static struct mqtt_request_t *
mqtt_create_request(struct mqtt_request_t *r_objs, size_t r_objs_len, u16_t pkt_id, mqtt_request_cb_t cb, void *arg)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b086      	sub	sp, #24
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	603b      	str	r3, [r7, #0]
 800892c:	4613      	mov	r3, r2
 800892e:	80fb      	strh	r3, [r7, #6]
  struct mqtt_request_t *r = NULL;
 8008930:	2300      	movs	r3, #0
 8008932:	617b      	str	r3, [r7, #20]
  u8_t n;
  LWIP_ASSERT("mqtt_create_request: r_objs != NULL", r_objs != NULL);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d106      	bne.n	8008948 <mqtt_create_request+0x28>
 800893a:	4b19      	ldr	r3, [pc, #100]	; (80089a0 <mqtt_create_request+0x80>)
 800893c:	f240 1223 	movw	r2, #291	; 0x123
 8008940:	4918      	ldr	r1, [pc, #96]	; (80089a4 <mqtt_create_request+0x84>)
 8008942:	4819      	ldr	r0, [pc, #100]	; (80089a8 <mqtt_create_request+0x88>)
 8008944:	f00c faae 	bl	8014ea4 <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 8008948:	2300      	movs	r3, #0
 800894a:	74fb      	strb	r3, [r7, #19]
 800894c:	e01f      	b.n	800898e <mqtt_create_request+0x6e>
    /* Item point to itself if not in use */
    if (r_objs[n].next == &r_objs[n]) {
 800894e:	7cfb      	ldrb	r3, [r7, #19]
 8008950:	011b      	lsls	r3, r3, #4
 8008952:	68fa      	ldr	r2, [r7, #12]
 8008954:	4413      	add	r3, r2
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	7cfb      	ldrb	r3, [r7, #19]
 800895a:	011b      	lsls	r3, r3, #4
 800895c:	68f9      	ldr	r1, [r7, #12]
 800895e:	440b      	add	r3, r1
 8008960:	429a      	cmp	r2, r3
 8008962:	d111      	bne.n	8008988 <mqtt_create_request+0x68>
      r = &r_objs[n];
 8008964:	7cfb      	ldrb	r3, [r7, #19]
 8008966:	011b      	lsls	r3, r3, #4
 8008968:	68fa      	ldr	r2, [r7, #12]
 800896a:	4413      	add	r3, r2
 800896c:	617b      	str	r3, [r7, #20]
      r->next = NULL;
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	2200      	movs	r2, #0
 8008972:	601a      	str	r2, [r3, #0]
      r->cb = cb;
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	683a      	ldr	r2, [r7, #0]
 8008978:	605a      	str	r2, [r3, #4]
      r->arg = arg;
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	6a3a      	ldr	r2, [r7, #32]
 800897e:	609a      	str	r2, [r3, #8]
      r->pkt_id = pkt_id;
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	88fa      	ldrh	r2, [r7, #6]
 8008984:	819a      	strh	r2, [r3, #12]
      break;
 8008986:	e006      	b.n	8008996 <mqtt_create_request+0x76>
  for (n = 0; n < r_objs_len; n++) {
 8008988:	7cfb      	ldrb	r3, [r7, #19]
 800898a:	3301      	adds	r3, #1
 800898c:	74fb      	strb	r3, [r7, #19]
 800898e:	7cfb      	ldrb	r3, [r7, #19]
 8008990:	68ba      	ldr	r2, [r7, #8]
 8008992:	429a      	cmp	r2, r3
 8008994:	d8db      	bhi.n	800894e <mqtt_create_request+0x2e>
    }
  }
  return r;
 8008996:	697b      	ldr	r3, [r7, #20]
}
 8008998:	4618      	mov	r0, r3
 800899a:	3718      	adds	r7, #24
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	0801634c 	.word	0x0801634c
 80089a4:	0801640c 	.word	0x0801640c
 80089a8:	080163c4 	.word	0x080163c4

080089ac <mqtt_append_request>:
 * @param tail Pointer to request queue tail pointer
 * @param r Request to append
 */
static void
mqtt_append_request(struct mqtt_request_t **tail, struct mqtt_request_t *r)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b086      	sub	sp, #24
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
  struct mqtt_request_t *head = NULL;
 80089b6:	2300      	movs	r3, #0
 80089b8:	617b      	str	r3, [r7, #20]
  s16_t time_before = 0;
 80089ba:	2300      	movs	r3, #0
 80089bc:	827b      	strh	r3, [r7, #18]
  struct mqtt_request_t *iter;

  LWIP_ASSERT("mqtt_append_request: tail != NULL", tail != NULL);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d106      	bne.n	80089d2 <mqtt_append_request+0x26>
 80089c4:	4b1b      	ldr	r3, [pc, #108]	; (8008a34 <mqtt_append_request+0x88>)
 80089c6:	f240 123f 	movw	r2, #319	; 0x13f
 80089ca:	491b      	ldr	r1, [pc, #108]	; (8008a38 <mqtt_append_request+0x8c>)
 80089cc:	481b      	ldr	r0, [pc, #108]	; (8008a3c <mqtt_append_request+0x90>)
 80089ce:	f00c fa69 	bl	8014ea4 <iprintf>

  /* Iterate trough queue to find head, and count total timeout time */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	60fb      	str	r3, [r7, #12]
 80089d8:	e00a      	b.n	80089f0 <mqtt_append_request+0x44>
    time_before += iter->timeout_diff;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	89da      	ldrh	r2, [r3, #14]
 80089de:	8a7b      	ldrh	r3, [r7, #18]
 80089e0:	4413      	add	r3, r2
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	827b      	strh	r3, [r7, #18]
    head = iter;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	617b      	str	r3, [r7, #20]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	60fb      	str	r3, [r7, #12]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d1f1      	bne.n	80089da <mqtt_append_request+0x2e>
  }

  LWIP_ASSERT("mqtt_append_request: time_before <= MQTT_REQ_TIMEOUT", time_before <= MQTT_REQ_TIMEOUT);
 80089f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80089fa:	2b1e      	cmp	r3, #30
 80089fc:	dd06      	ble.n	8008a0c <mqtt_append_request+0x60>
 80089fe:	4b0d      	ldr	r3, [pc, #52]	; (8008a34 <mqtt_append_request+0x88>)
 8008a00:	f240 1247 	movw	r2, #327	; 0x147
 8008a04:	490e      	ldr	r1, [pc, #56]	; (8008a40 <mqtt_append_request+0x94>)
 8008a06:	480d      	ldr	r0, [pc, #52]	; (8008a3c <mqtt_append_request+0x90>)
 8008a08:	f00c fa4c 	bl	8014ea4 <iprintf>
  r->timeout_diff = MQTT_REQ_TIMEOUT - time_before;
 8008a0c:	8a7b      	ldrh	r3, [r7, #18]
 8008a0e:	f1c3 031e 	rsb	r3, r3, #30
 8008a12:	b29a      	uxth	r2, r3
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	81da      	strh	r2, [r3, #14]
  if (head == NULL) {
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d103      	bne.n	8008a26 <mqtt_append_request+0x7a>
    *tail = r;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	683a      	ldr	r2, [r7, #0]
 8008a22:	601a      	str	r2, [r3, #0]
  } else {
    head->next = r;
  }
}
 8008a24:	e002      	b.n	8008a2c <mqtt_append_request+0x80>
    head->next = r;
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	683a      	ldr	r2, [r7, #0]
 8008a2a:	601a      	str	r2, [r3, #0]
}
 8008a2c:	bf00      	nop
 8008a2e:	3718      	adds	r7, #24
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	0801634c 	.word	0x0801634c
 8008a38:	08016430 	.word	0x08016430
 8008a3c:	080163c4 	.word	0x080163c4
 8008a40:	08016454 	.word	0x08016454

08008a44 <mqtt_delete_request>:
 * Delete request item
 * @param r Request item to delete
 */
static void
mqtt_delete_request(struct mqtt_request_t *r)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  if (r != NULL) {
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d002      	beq.n	8008a58 <mqtt_delete_request+0x14>
    r->next = r;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	601a      	str	r2, [r3, #0]
  }
}
 8008a58:	bf00      	nop
 8008a5a:	370c      	adds	r7, #12
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <mqtt_take_request>:
 * @param pkt_id Packet identifier of request to take
 * @return Request item if found, NULL if not
 */
static struct mqtt_request_t *
mqtt_take_request(struct mqtt_request_t **tail, u16_t pkt_id)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	807b      	strh	r3, [r7, #2]
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 8008a70:	2300      	movs	r3, #0
 8008a72:	60fb      	str	r3, [r7, #12]
 8008a74:	2300      	movs	r3, #0
 8008a76:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d106      	bne.n	8008a8c <mqtt_take_request+0x28>
 8008a7e:	4b1f      	ldr	r3, [pc, #124]	; (8008afc <mqtt_take_request+0x98>)
 8008a80:	f240 1267 	movw	r2, #359	; 0x167
 8008a84:	491e      	ldr	r1, [pc, #120]	; (8008b00 <mqtt_take_request+0x9c>)
 8008a86:	481f      	ldr	r0, [pc, #124]	; (8008b04 <mqtt_take_request+0xa0>)
 8008a88:	f00c fa0c 	bl	8014ea4 <iprintf>
  /* Search all request for pkt_id */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	60fb      	str	r3, [r7, #12]
 8008a92:	e009      	b.n	8008aa8 <mqtt_take_request+0x44>
    if (iter->pkt_id == pkt_id) {
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	899b      	ldrh	r3, [r3, #12]
 8008a98:	887a      	ldrh	r2, [r7, #2]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d008      	beq.n	8008ab0 <mqtt_take_request+0x4c>
      break;
    }
    prev = iter;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	60bb      	str	r3, [r7, #8]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	60fb      	str	r3, [r7, #12]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1f2      	bne.n	8008a94 <mqtt_take_request+0x30>
 8008aae:	e000      	b.n	8008ab2 <mqtt_take_request+0x4e>
      break;
 8008ab0:	bf00      	nop
  }

  /* If request was found */
  if (iter != NULL) {
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d01c      	beq.n	8008af2 <mqtt_take_request+0x8e>
    /* unchain */
    if (prev == NULL) {
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d104      	bne.n	8008ac8 <mqtt_take_request+0x64>
      *tail = iter->next;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	601a      	str	r2, [r3, #0]
 8008ac6:	e003      	b.n	8008ad0 <mqtt_take_request+0x6c>
    } else {
      prev->next = iter->next;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	601a      	str	r2, [r3, #0]
    }
    /* If exists, add remaining timeout time for the request to next */
    if (iter->next != NULL) {
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d009      	beq.n	8008aec <mqtt_take_request+0x88>
      iter->next->timeout_diff += iter->timeout_diff;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	89d9      	ldrh	r1, [r3, #14]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	89da      	ldrh	r2, [r3, #14]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	440a      	add	r2, r1
 8008ae8:	b292      	uxth	r2, r2
 8008aea:	81da      	strh	r2, [r3, #14]
    }
    iter->next = NULL;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2200      	movs	r2, #0
 8008af0:	601a      	str	r2, [r3, #0]
  }
  return iter;
 8008af2:	68fb      	ldr	r3, [r7, #12]
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3710      	adds	r7, #16
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}
 8008afc:	0801634c 	.word	0x0801634c
 8008b00:	0801648c 	.word	0x0801648c
 8008b04:	080163c4 	.word	0x080163c4

08008b08 <mqtt_request_time_elapsed>:
 * @param tail Pointer to request queue tail pointer
 * @param t Time since last call in seconds
 */
static void
mqtt_request_time_elapsed(struct mqtt_request_t **tail, u8_t t)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	460b      	mov	r3, r1
 8008b12:	70fb      	strb	r3, [r7, #3]
  struct mqtt_request_t *r;
  LWIP_ASSERT("mqtt_request_time_elapsed: tail != NULL", tail != NULL);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d106      	bne.n	8008b28 <mqtt_request_time_elapsed+0x20>
 8008b1a:	4b21      	ldr	r3, [pc, #132]	; (8008ba0 <mqtt_request_time_elapsed+0x98>)
 8008b1c:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 8008b20:	4920      	ldr	r1, [pc, #128]	; (8008ba4 <mqtt_request_time_elapsed+0x9c>)
 8008b22:	4821      	ldr	r0, [pc, #132]	; (8008ba8 <mqtt_request_time_elapsed+0xa0>)
 8008b24:	f00c f9be 	bl	8014ea4 <iprintf>
  r = *tail;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	60fb      	str	r3, [r7, #12]
  while (t > 0 && r != NULL) {
 8008b2e:	e02c      	b.n	8008b8a <mqtt_request_time_elapsed+0x82>
    if (t >= r->timeout_diff) {
 8008b30:	78fb      	ldrb	r3, [r7, #3]
 8008b32:	b29a      	uxth	r2, r3
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	89db      	ldrh	r3, [r3, #14]
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d31c      	bcc.n	8008b76 <mqtt_request_time_elapsed+0x6e>
      t -= (u8_t)r->timeout_diff;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	89db      	ldrh	r3, [r3, #14]
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	78fa      	ldrb	r2, [r7, #3]
 8008b44:	1ad3      	subs	r3, r2, r3
 8008b46:	70fb      	strb	r3, [r7, #3]
      /* Unchain */
      *tail = r->next;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	601a      	str	r2, [r3, #0]
      /* Notify upper layer about timeout */
      if (r->cb != NULL) {
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d007      	beq.n	8008b68 <mqtt_request_time_elapsed+0x60>
        r->cb(r->arg, ERR_TIMEOUT);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	6892      	ldr	r2, [r2, #8]
 8008b60:	f06f 0102 	mvn.w	r1, #2
 8008b64:	4610      	mov	r0, r2
 8008b66:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	f7ff ff6b 	bl	8008a44 <mqtt_delete_request>
      /* Tail might be be modified in callback, so re-read it in every iteration */
      r = *(struct mqtt_request_t *const volatile *)tail;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	60fb      	str	r3, [r7, #12]
 8008b74:	e009      	b.n	8008b8a <mqtt_request_time_elapsed+0x82>
    } else {
      r->timeout_diff -= t;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	89da      	ldrh	r2, [r3, #14]
 8008b7a:	78fb      	ldrb	r3, [r7, #3]
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	1ad3      	subs	r3, r2, r3
 8008b80:	b29a      	uxth	r2, r3
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	81da      	strh	r2, [r3, #14]
      t = 0;
 8008b86:	2300      	movs	r3, #0
 8008b88:	70fb      	strb	r3, [r7, #3]
  while (t > 0 && r != NULL) {
 8008b8a:	78fb      	ldrb	r3, [r7, #3]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d002      	beq.n	8008b96 <mqtt_request_time_elapsed+0x8e>
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d1cc      	bne.n	8008b30 <mqtt_request_time_elapsed+0x28>
    }
  }
}
 8008b96:	bf00      	nop
 8008b98:	3710      	adds	r7, #16
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	0801634c 	.word	0x0801634c
 8008ba4:	080164ac 	.word	0x080164ac
 8008ba8:	080163c4 	.word	0x080163c4

08008bac <mqtt_clear_requests>:
 * Free all request items
 * @param tail Pointer to request queue tail pointer
 */
static void
mqtt_clear_requests(struct mqtt_request_t **tail)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  struct mqtt_request_t *iter, *next;
  LWIP_ASSERT("mqtt_clear_requests: tail != NULL", tail != NULL);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d106      	bne.n	8008bc8 <mqtt_clear_requests+0x1c>
 8008bba:	4b0e      	ldr	r3, [pc, #56]	; (8008bf4 <mqtt_clear_requests+0x48>)
 8008bbc:	f240 12a7 	movw	r2, #423	; 0x1a7
 8008bc0:	490d      	ldr	r1, [pc, #52]	; (8008bf8 <mqtt_clear_requests+0x4c>)
 8008bc2:	480e      	ldr	r0, [pc, #56]	; (8008bfc <mqtt_clear_requests+0x50>)
 8008bc4:	f00c f96e 	bl	8014ea4 <iprintf>
  for (iter = *tail; iter != NULL; iter = next) {
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	60fb      	str	r3, [r7, #12]
 8008bce:	e007      	b.n	8008be0 <mqtt_clear_requests+0x34>
    next = iter->next;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	60bb      	str	r3, [r7, #8]
    mqtt_delete_request(iter);
 8008bd6:	68f8      	ldr	r0, [r7, #12]
 8008bd8:	f7ff ff34 	bl	8008a44 <mqtt_delete_request>
  for (iter = *tail; iter != NULL; iter = next) {
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	60fb      	str	r3, [r7, #12]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d1f4      	bne.n	8008bd0 <mqtt_clear_requests+0x24>
  }
  *tail = NULL;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	601a      	str	r2, [r3, #0]
}
 8008bec:	bf00      	nop
 8008bee:	3710      	adds	r7, #16
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}
 8008bf4:	0801634c 	.word	0x0801634c
 8008bf8:	080164d4 	.word	0x080164d4
 8008bfc:	080163c4 	.word	0x080163c4

08008c00 <mqtt_init_requests>:
 * @param r_objs Pointer to request objects
 * @param r_objs_len Number of array entries
 */
static void
mqtt_init_requests(struct mqtt_request_t *r_objs, size_t r_objs_len)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
  u8_t n;
  LWIP_ASSERT("mqtt_init_requests: r_objs != NULL", r_objs != NULL);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d106      	bne.n	8008c1e <mqtt_init_requests+0x1e>
 8008c10:	4b0f      	ldr	r3, [pc, #60]	; (8008c50 <mqtt_init_requests+0x50>)
 8008c12:	f240 12b7 	movw	r2, #439	; 0x1b7
 8008c16:	490f      	ldr	r1, [pc, #60]	; (8008c54 <mqtt_init_requests+0x54>)
 8008c18:	480f      	ldr	r0, [pc, #60]	; (8008c58 <mqtt_init_requests+0x58>)
 8008c1a:	f00c f943 	bl	8014ea4 <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 8008c1e:	2300      	movs	r3, #0
 8008c20:	73fb      	strb	r3, [r7, #15]
 8008c22:	e00b      	b.n	8008c3c <mqtt_init_requests+0x3c>
    /* Item pointing to itself indicates unused */
    r_objs[n].next = &r_objs[n];
 8008c24:	7bfb      	ldrb	r3, [r7, #15]
 8008c26:	011a      	lsls	r2, r3, #4
 8008c28:	7bfb      	ldrb	r3, [r7, #15]
 8008c2a:	011b      	lsls	r3, r3, #4
 8008c2c:	6879      	ldr	r1, [r7, #4]
 8008c2e:	440b      	add	r3, r1
 8008c30:	6879      	ldr	r1, [r7, #4]
 8008c32:	440a      	add	r2, r1
 8008c34:	601a      	str	r2, [r3, #0]
  for (n = 0; n < r_objs_len; n++) {
 8008c36:	7bfb      	ldrb	r3, [r7, #15]
 8008c38:	3301      	adds	r3, #1
 8008c3a:	73fb      	strb	r3, [r7, #15]
 8008c3c:	7bfb      	ldrb	r3, [r7, #15]
 8008c3e:	683a      	ldr	r2, [r7, #0]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d8ef      	bhi.n	8008c24 <mqtt_init_requests+0x24>
  }
}
 8008c44:	bf00      	nop
 8008c46:	bf00      	nop
 8008c48:	3710      	adds	r7, #16
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	0801634c 	.word	0x0801634c
 8008c54:	080164f8 	.word	0x080164f8
 8008c58:	080163c4 	.word	0x080163c4

08008c5c <mqtt_output_append_u8>:
/* Output message build helpers */


static void
mqtt_output_append_u8(struct mqtt_ringbuf_t *rb, u8_t value)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	460b      	mov	r3, r1
 8008c66:	70fb      	strb	r3, [r7, #3]
  mqtt_ringbuf_put(rb, value);
 8008c68:	78fb      	ldrb	r3, [r7, #3]
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f7ff fd2b 	bl	80086c8 <mqtt_ringbuf_put>
}
 8008c72:	bf00      	nop
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <mqtt_output_append_u16>:

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b082      	sub	sp, #8
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
 8008c82:	460b      	mov	r3, r1
 8008c84:	807b      	strh	r3, [r7, #2]
  mqtt_ringbuf_put(rb, value >> 8);
 8008c86:	887b      	ldrh	r3, [r7, #2]
 8008c88:	0a1b      	lsrs	r3, r3, #8
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	4619      	mov	r1, r3
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f7ff fd19 	bl	80086c8 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, value & 0xff);
 8008c96:	887b      	ldrh	r3, [r7, #2]
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f7ff fd13 	bl	80086c8 <mqtt_ringbuf_put>
}
 8008ca2:	bf00      	nop
 8008ca4:	3708      	adds	r7, #8
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <mqtt_output_append_string>:
  }
}

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b086      	sub	sp, #24
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	60f8      	str	r0, [r7, #12]
 8008cb2:	60b9      	str	r1, [r7, #8]
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 8008cb8:	88fb      	ldrh	r3, [r7, #6]
 8008cba:	0a1b      	lsrs	r3, r3, #8
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	68f8      	ldr	r0, [r7, #12]
 8008cc4:	f7ff fd00 	bl	80086c8 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, length & 0xff);
 8008cc8:	88fb      	ldrh	r3, [r7, #6]
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	4619      	mov	r1, r3
 8008cce:	68f8      	ldr	r0, [r7, #12]
 8008cd0:	f7ff fcfa 	bl	80086c8 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	82fb      	strh	r3, [r7, #22]
 8008cd8:	e00a      	b.n	8008cf0 <mqtt_output_append_string+0x46>
    mqtt_ringbuf_put(rb, str[n]);
 8008cda:	8afb      	ldrh	r3, [r7, #22]
 8008cdc:	68ba      	ldr	r2, [r7, #8]
 8008cde:	4413      	add	r3, r2
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	68f8      	ldr	r0, [r7, #12]
 8008ce6:	f7ff fcef 	bl	80086c8 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8008cea:	8afb      	ldrh	r3, [r7, #22]
 8008cec:	3301      	adds	r3, #1
 8008cee:	82fb      	strh	r3, [r7, #22]
 8008cf0:	8afa      	ldrh	r2, [r7, #22]
 8008cf2:	88fb      	ldrh	r3, [r7, #6]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d3f0      	bcc.n	8008cda <mqtt_output_append_string+0x30>
  }
}
 8008cf8:	bf00      	nop
 8008cfa:	bf00      	nop
 8008cfc:	3718      	adds	r7, #24
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <mqtt_output_append_fixed_header>:
 */

static void
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t fdup,
                                u8_t fqos, u8_t fretain, u16_t r_length)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b082      	sub	sp, #8
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
 8008d0a:	4608      	mov	r0, r1
 8008d0c:	4611      	mov	r1, r2
 8008d0e:	461a      	mov	r2, r3
 8008d10:	4603      	mov	r3, r0
 8008d12:	70fb      	strb	r3, [r7, #3]
 8008d14:	460b      	mov	r3, r1
 8008d16:	70bb      	strb	r3, [r7, #2]
 8008d18:	4613      	mov	r3, r2
 8008d1a:	707b      	strb	r3, [r7, #1]
  /* Start with control byte */
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((fdup & 1) << 3) | ((fqos & 3) << 1) | (fretain & 1)));
 8008d1c:	78fb      	ldrb	r3, [r7, #3]
 8008d1e:	011b      	lsls	r3, r3, #4
 8008d20:	b25a      	sxtb	r2, r3
 8008d22:	78bb      	ldrb	r3, [r7, #2]
 8008d24:	00db      	lsls	r3, r3, #3
 8008d26:	b25b      	sxtb	r3, r3
 8008d28:	f003 0308 	and.w	r3, r3, #8
 8008d2c:	b25b      	sxtb	r3, r3
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	b25a      	sxtb	r2, r3
 8008d32:	787b      	ldrb	r3, [r7, #1]
 8008d34:	005b      	lsls	r3, r3, #1
 8008d36:	b25b      	sxtb	r3, r3
 8008d38:	f003 0306 	and.w	r3, r3, #6
 8008d3c:	b25b      	sxtb	r3, r3
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	b25a      	sxtb	r2, r3
 8008d42:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8008d46:	f003 0301 	and.w	r3, r3, #1
 8008d4a:	b25b      	sxtb	r3, r3
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	b25b      	sxtb	r3, r3
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	4619      	mov	r1, r3
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f7ff ff81 	bl	8008c5c <mqtt_output_append_u8>
  /* Encode remaining length field */
  do {
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 8008d5a:	8abb      	ldrh	r3, [r7, #20]
 8008d5c:	b25b      	sxtb	r3, r3
 8008d5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d62:	b25b      	sxtb	r3, r3
 8008d64:	8aba      	ldrh	r2, [r7, #20]
 8008d66:	2a7f      	cmp	r2, #127	; 0x7f
 8008d68:	d902      	bls.n	8008d70 <mqtt_output_append_fixed_header+0x6e>
 8008d6a:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8008d6e:	e000      	b.n	8008d72 <mqtt_output_append_fixed_header+0x70>
 8008d70:	2200      	movs	r2, #0
 8008d72:	4313      	orrs	r3, r2
 8008d74:	b25b      	sxtb	r3, r3
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	4619      	mov	r1, r3
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f7ff ff6e 	bl	8008c5c <mqtt_output_append_u8>
    r_length >>= 7;
 8008d80:	8abb      	ldrh	r3, [r7, #20]
 8008d82:	09db      	lsrs	r3, r3, #7
 8008d84:	82bb      	strh	r3, [r7, #20]
  } while (r_length > 0);
 8008d86:	8abb      	ldrh	r3, [r7, #20]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d1e6      	bne.n	8008d5a <mqtt_output_append_fixed_header+0x58>
}
 8008d8c:	bf00      	nop
 8008d8e:	bf00      	nop
 8008d90:	3708      	adds	r7, #8
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
	...

08008d98 <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 8008d98:	b590      	push	{r4, r7, lr}
 8008d9a:	b085      	sub	sp, #20
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	460b      	mov	r3, r1
 8008da2:	807b      	strh	r3, [r7, #2]
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 8008da4:	887b      	ldrh	r3, [r7, #2]
 8008da6:	3301      	adds	r3, #1
 8008da8:	81fb      	strh	r3, [r7, #14]

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d106      	bne.n	8008dbe <mqtt_output_check_space+0x26>
 8008db0:	4b0f      	ldr	r3, [pc, #60]	; (8008df0 <mqtt_output_check_space+0x58>)
 8008db2:	f240 2207 	movw	r2, #519	; 0x207
 8008db6:	490f      	ldr	r1, [pc, #60]	; (8008df4 <mqtt_output_check_space+0x5c>)
 8008db8:	480f      	ldr	r0, [pc, #60]	; (8008df8 <mqtt_output_check_space+0x60>)
 8008dba:	f00c f873 	bl	8014ea4 <iprintf>

  /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 8008dbe:	89fb      	ldrh	r3, [r7, #14]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	81fb      	strh	r3, [r7, #14]
    r_length >>= 7;
 8008dc4:	887b      	ldrh	r3, [r7, #2]
 8008dc6:	09db      	lsrs	r3, r3, #7
 8008dc8:	807b      	strh	r3, [r7, #2]
  } while (r_length > 0);
 8008dca:	887b      	ldrh	r3, [r7, #2]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d1f6      	bne.n	8008dbe <mqtt_output_check_space+0x26>

  return (total_len <= mqtt_ringbuf_free(rb));
 8008dd0:	89fc      	ldrh	r4, [r7, #14]
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f7ff fcd4 	bl	8008780 <mqtt_ringbuf_len>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8008dde:	429c      	cmp	r4, r3
 8008de0:	bfd4      	ite	le
 8008de2:	2301      	movle	r3, #1
 8008de4:	2300      	movgt	r3, #0
 8008de6:	b2db      	uxtb	r3, r3
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3714      	adds	r7, #20
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd90      	pop	{r4, r7, pc}
 8008df0:	0801634c 	.word	0x0801634c
 8008df4:	0801651c 	.word	0x0801651c
 8008df8:	080163c4 	.word	0x080163c4

08008dfc <mqtt_close>:
 * @param client MQTT client
 * @param reason Reason for disconnection
 */
static void
mqtt_close(mqtt_client_t *client, mqtt_connection_status_t reason)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	460b      	mov	r3, r1
 8008e06:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d106      	bne.n	8008e1c <mqtt_close+0x20>
 8008e0e:	4b27      	ldr	r3, [pc, #156]	; (8008eac <mqtt_close+0xb0>)
 8008e10:	f240 221b 	movw	r2, #539	; 0x21b
 8008e14:	4926      	ldr	r1, [pc, #152]	; (8008eb0 <mqtt_close+0xb4>)
 8008e16:	4827      	ldr	r0, [pc, #156]	; (8008eb4 <mqtt_close+0xb8>)
 8008e18:	f00c f844 	bl	8014ea4 <iprintf>

  /* Bring down TCP connection if not already done */
  if (client->conn != NULL) {
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	68db      	ldr	r3, [r3, #12]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d024      	beq.n	8008e6e <mqtt_close+0x72>
    err_t res;
    altcp_recv(client->conn, NULL);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	68db      	ldr	r3, [r3, #12]
 8008e28:	2100      	movs	r1, #0
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f004 fb10 	bl	800d450 <tcp_recv>
    altcp_err(client->conn,  NULL);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	68db      	ldr	r3, [r3, #12]
 8008e34:	2100      	movs	r1, #0
 8008e36:	4618      	mov	r0, r3
 8008e38:	f004 fb4e 	bl	800d4d8 <tcp_err>
    altcp_sent(client->conn, NULL);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	2100      	movs	r1, #0
 8008e42:	4618      	mov	r0, r3
 8008e44:	f004 fb26 	bl	800d494 <tcp_sent>
    res = altcp_close(client->conn);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f003 f927 	bl	800c0a0 <tcp_close>
 8008e52:	4603      	mov	r3, r0
 8008e54:	73fb      	strb	r3, [r7, #15]
    if (res != ERR_OK) {
 8008e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d004      	beq.n	8008e68 <mqtt_close+0x6c>
      altcp_abort(client->conn);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	4618      	mov	r0, r3
 8008e64:	f003 fa06 	bl	800c274 <tcp_abort>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_close: Close err=%s\n", lwip_strerr(res)));
    }
    client->conn = NULL;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	60da      	str	r2, [r3, #12]
  }

  /* Remove all pending requests */
  mqtt_clear_requests(&client->pend_req_queue);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	3318      	adds	r3, #24
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7ff fe9a 	bl	8008bac <mqtt_clear_requests>
  /* Stop cyclic timer */
  sys_untimeout(mqtt_cyclic_timer, client);
 8008e78:	6879      	ldr	r1, [r7, #4]
 8008e7a:	480f      	ldr	r0, [pc, #60]	; (8008eb8 <mqtt_close+0xbc>)
 8008e7c:	f009 f864 	bl	8011f48 <sys_untimeout>

  /* Notify upper layer of disconnection if changed state */
  if (client->conn_state != TCP_DISCONNECTED) {
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	7a9b      	ldrb	r3, [r3, #10]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d00d      	beq.n	8008ea4 <mqtt_close+0xa8>

    client->conn_state = TCP_DISCONNECTED;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	729a      	strb	r2, [r3, #10]
    if (client->connect_cb != NULL) {
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	695b      	ldr	r3, [r3, #20]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d006      	beq.n	8008ea4 <mqtt_close+0xa8>
      client->connect_cb(client, client->connect_arg, reason);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	695b      	ldr	r3, [r3, #20]
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	6911      	ldr	r1, [r2, #16]
 8008e9e:	887a      	ldrh	r2, [r7, #2]
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	4798      	blx	r3
    }
  }
}
 8008ea4:	bf00      	nop
 8008ea6:	3710      	adds	r7, #16
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	0801634c 	.word	0x0801634c
 8008eb0:	08016540 	.word	0x08016540
 8008eb4:	080163c4 	.word	0x080163c4
 8008eb8:	08008ebd 	.word	0x08008ebd

08008ebc <mqtt_cyclic_timer>:
 * Interval timer, called every MQTT_CYCLIC_TIMER_INTERVAL seconds in MQTT_CONNECTING and MQTT_CONNECTED states
 * @param arg MQTT client
 */
static void
mqtt_cyclic_timer(void *arg)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b086      	sub	sp, #24
 8008ec0:	af02      	add	r7, sp, #8
 8008ec2:	6078      	str	r0, [r7, #4]
  u8_t restart_timer = 1;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	73fb      	strb	r3, [r7, #15]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d106      	bne.n	8008ee0 <mqtt_cyclic_timer+0x24>
 8008ed2:	4b42      	ldr	r3, [pc, #264]	; (8008fdc <mqtt_cyclic_timer+0x120>)
 8008ed4:	f44f 7211 	mov.w	r2, #580	; 0x244
 8008ed8:	4941      	ldr	r1, [pc, #260]	; (8008fe0 <mqtt_cyclic_timer+0x124>)
 8008eda:	4842      	ldr	r0, [pc, #264]	; (8008fe4 <mqtt_cyclic_timer+0x128>)
 8008edc:	f00b ffe2 	bl	8014ea4 <iprintf>

  if (client->conn_state == MQTT_CONNECTING) {
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	7a9b      	ldrb	r3, [r3, #10]
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d115      	bne.n	8008f14 <mqtt_cyclic_timer+0x58>
    client->cyclic_tick++;
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	881b      	ldrh	r3, [r3, #0]
 8008eec:	3301      	adds	r3, #1
 8008eee:	b29a      	uxth	r2, r3
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	801a      	strh	r2, [r3, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	881b      	ldrh	r3, [r3, #0]
 8008ef8:	461a      	mov	r2, r3
 8008efa:	4613      	mov	r3, r2
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	4413      	add	r3, r2
 8008f00:	2b63      	cmp	r3, #99	; 0x63
 8008f02:	dd5e      	ble.n	8008fc2 <mqtt_cyclic_timer+0x106>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: CONNECT attempt to server timed out\n"));
      /* Disconnect TCP */
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8008f04:	f240 1101 	movw	r1, #257	; 0x101
 8008f08:	68b8      	ldr	r0, [r7, #8]
 8008f0a:	f7ff ff77 	bl	8008dfc <mqtt_close>
      restart_timer = 0;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	73fb      	strb	r3, [r7, #15]
 8008f12:	e056      	b.n	8008fc2 <mqtt_cyclic_timer+0x106>
    }
  } else if (client->conn_state == MQTT_CONNECTED) {
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	7a9b      	ldrb	r3, [r3, #10]
 8008f18:	2b03      	cmp	r3, #3
 8008f1a:	d150      	bne.n	8008fbe <mqtt_cyclic_timer+0x102>
    /* Handle timeout for pending requests */
    mqtt_request_time_elapsed(&client->pend_req_queue, MQTT_CYCLIC_TIMER_INTERVAL);
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	3318      	adds	r3, #24
 8008f20:	2105      	movs	r1, #5
 8008f22:	4618      	mov	r0, r3
 8008f24:	f7ff fdf0 	bl	8008b08 <mqtt_request_time_elapsed>

    /* keep_alive > 0 means keep alive functionality shall be used */
    if (client->keep_alive > 0) {
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	885b      	ldrh	r3, [r3, #2]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d048      	beq.n	8008fc2 <mqtt_cyclic_timer+0x106>

      client->server_watchdog++;
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	889b      	ldrh	r3, [r3, #4]
 8008f34:	3301      	adds	r3, #1
 8008f36:	b29a      	uxth	r2, r3
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	809a      	strh	r2, [r3, #4]
      /* If reception from server has been idle for 1.5*keep_alive time, server is considered unresponsive */
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive / 2)) {
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	889b      	ldrh	r3, [r3, #4]
 8008f40:	461a      	mov	r2, r3
 8008f42:	4613      	mov	r3, r2
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	441a      	add	r2, r3
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	885b      	ldrh	r3, [r3, #2]
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	885b      	ldrh	r3, [r3, #2]
 8008f52:	085b      	lsrs	r3, r3, #1
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	440b      	add	r3, r1
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	dd06      	ble.n	8008f6a <mqtt_cyclic_timer+0xae>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Server incoming keep-alive timeout\n"));
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8008f5c:	f240 1101 	movw	r1, #257	; 0x101
 8008f60:	68b8      	ldr	r0, [r7, #8]
 8008f62:	f7ff ff4b 	bl	8008dfc <mqtt_close>
        restart_timer = 0;
 8008f66:	2300      	movs	r3, #0
 8008f68:	73fb      	strb	r3, [r7, #15]
      }

      /* If time for a keep alive message to be sent, transmission has been idle for keep_alive time */
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	881b      	ldrh	r3, [r3, #0]
 8008f6e:	461a      	mov	r2, r3
 8008f70:	4613      	mov	r3, r2
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	4413      	add	r3, r2
 8008f76:	68ba      	ldr	r2, [r7, #8]
 8008f78:	8852      	ldrh	r2, [r2, #2]
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	db18      	blt.n	8008fb0 <mqtt_cyclic_timer+0xf4>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: Sending keep-alive message to server\n"));
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	33ec      	adds	r3, #236	; 0xec
 8008f82:	2100      	movs	r1, #0
 8008f84:	4618      	mov	r0, r3
 8008f86:	f7ff ff07 	bl	8008d98 <mqtt_output_check_space>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d018      	beq.n	8008fc2 <mqtt_cyclic_timer+0x106>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8008f96:	2300      	movs	r3, #0
 8008f98:	9301      	str	r3, [sp, #4]
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	9300      	str	r3, [sp, #0]
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	210c      	movs	r1, #12
 8008fa4:	f7ff fead 	bl	8008d02 <mqtt_output_append_fixed_header>
          client->cyclic_tick = 0;
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	2200      	movs	r2, #0
 8008fac:	801a      	strh	r2, [r3, #0]
 8008fae:	e008      	b.n	8008fc2 <mqtt_cyclic_timer+0x106>
        }
      } else {
        client->cyclic_tick++;
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	881b      	ldrh	r3, [r3, #0]
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	b29a      	uxth	r2, r3
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	801a      	strh	r2, [r3, #0]
 8008fbc:	e001      	b.n	8008fc2 <mqtt_cyclic_timer+0x106>
      }
    }
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Timer should not be running in state %d\n", client->conn_state));
    restart_timer = 0;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	73fb      	strb	r3, [r7, #15]
  }
  if (restart_timer) {
 8008fc2:	7bfb      	ldrb	r3, [r7, #15]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d005      	beq.n	8008fd4 <mqtt_cyclic_timer+0x118>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, arg);
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	4907      	ldr	r1, [pc, #28]	; (8008fe8 <mqtt_cyclic_timer+0x12c>)
 8008fcc:	f241 3088 	movw	r0, #5000	; 0x1388
 8008fd0:	f008 ff94 	bl	8011efc <sys_timeout>
  }
}
 8008fd4:	bf00      	nop
 8008fd6:	3710      	adds	r7, #16
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	0801634c 	.word	0x0801634c
 8008fe0:	0801655c 	.word	0x0801655c
 8008fe4:	080163c4 	.word	0x080163c4
 8008fe8:	08008ebd 	.word	0x08008ebd

08008fec <pub_ack_rec_rel_response>:
 * @param qos QoS value
 * @return ERR_OK if successful, ERR_MEM if out of memory
 */
static err_t
pub_ack_rec_rel_response(mqtt_client_t *client, u8_t msg, u16_t pkt_id, u8_t qos)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b086      	sub	sp, #24
 8008ff0:	af02      	add	r7, sp, #8
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	4608      	mov	r0, r1
 8008ff6:	4611      	mov	r1, r2
 8008ff8:	461a      	mov	r2, r3
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	70fb      	strb	r3, [r7, #3]
 8008ffe:	460b      	mov	r3, r1
 8009000:	803b      	strh	r3, [r7, #0]
 8009002:	4613      	mov	r3, r2
 8009004:	70bb      	strb	r3, [r7, #2]
  err_t err = ERR_OK;
 8009006:	2300      	movs	r3, #0
 8009008:	73fb      	strb	r3, [r7, #15]
  if (mqtt_output_check_space(&client->output, 2)) {
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	33ec      	adds	r3, #236	; 0xec
 800900e:	2102      	movs	r1, #2
 8009010:	4618      	mov	r0, r3
 8009012:	f7ff fec1 	bl	8008d98 <mqtt_output_check_space>
 8009016:	4603      	mov	r3, r0
 8009018:	2b00      	cmp	r3, #0
 800901a:	d01c      	beq.n	8009056 <pub_ack_rec_rel_response+0x6a>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8009022:	78bb      	ldrb	r3, [r7, #2]
 8009024:	78f9      	ldrb	r1, [r7, #3]
 8009026:	2202      	movs	r2, #2
 8009028:	9201      	str	r2, [sp, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	9200      	str	r2, [sp, #0]
 800902e:	2200      	movs	r2, #0
 8009030:	f7ff fe67 	bl	8008d02 <mqtt_output_append_fixed_header>
    mqtt_output_append_u16(&client->output, pkt_id);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	33ec      	adds	r3, #236	; 0xec
 8009038:	883a      	ldrh	r2, [r7, #0]
 800903a:	4611      	mov	r1, r2
 800903c:	4618      	mov	r0, r3
 800903e:	f7ff fe1c 	bl	8008c7a <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	4619      	mov	r1, r3
 800904e:	4610      	mov	r0, r2
 8009050:	f7ff fbb2 	bl	80087b8 <mqtt_output_send>
 8009054:	e001      	b.n	800905a <pub_ack_rec_rel_response+0x6e>
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("pub_ack_rec_rel_response: OOM creating response: %s with pkt_id: %d\n",
                                   mqtt_msg_type_to_str(msg), pkt_id));
    err = ERR_MEM;
 8009056:	23ff      	movs	r3, #255	; 0xff
 8009058:	73fb      	strb	r3, [r7, #15]
  }
  return err;
 800905a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800905e:	4618      	mov	r0, r3
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}

08009066 <mqtt_incomming_suback>:
 * @param r Matching request
 * @param result Result code from server
 */
static void
mqtt_incomming_suback(struct mqtt_request_t *r, u8_t result)
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b082      	sub	sp, #8
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
 800906e:	460b      	mov	r3, r1
 8009070:	70fb      	strb	r3, [r7, #3]
  if (r->cb != NULL) {
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00c      	beq.n	8009094 <mqtt_incomming_suback+0x2e>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	6890      	ldr	r0, [r2, #8]
 8009082:	78fa      	ldrb	r2, [r7, #3]
 8009084:	2a02      	cmp	r2, #2
 8009086:	d801      	bhi.n	800908c <mqtt_incomming_suback+0x26>
 8009088:	2200      	movs	r2, #0
 800908a:	e001      	b.n	8009090 <mqtt_incomming_suback+0x2a>
 800908c:	f06f 020c 	mvn.w	r2, #12
 8009090:	4611      	mov	r1, r2
 8009092:	4798      	blx	r3
  }
}
 8009094:	bf00      	nop
 8009096:	3708      	adds	r7, #8
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <mqtt_message_received>:
 * @param length length received part
 * @param remaining_length Remaining length of complete message
 */
static mqtt_connection_status_t
mqtt_message_received(mqtt_client_t *client, u8_t fixed_hdr_idx, u16_t length, u32_t remaining_length)
{
 800909c:	b590      	push	{r4, r7, lr}
 800909e:	b08f      	sub	sp, #60	; 0x3c
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	607b      	str	r3, [r7, #4]
 80090a6:	460b      	mov	r3, r1
 80090a8:	72fb      	strb	r3, [r7, #11]
 80090aa:	4613      	mov	r3, r2
 80090ac:	813b      	strh	r3, [r7, #8]
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 80090ae:	2300      	movs	r3, #0
 80090b0:	86fb      	strh	r3, [r7, #54]	; 0x36

  u8_t *var_hdr_payload = client->rx_buffer + fixed_hdr_idx;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80090b8:	7afb      	ldrb	r3, [r7, #11]
 80090ba:	4413      	add	r3, r2
 80090bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  size_t var_hdr_payload_bufsize = sizeof(client->rx_buffer) - fixed_hdr_idx;
 80090be:	7afb      	ldrb	r3, [r7, #11]
 80090c0:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80090c4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Control packet type */
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80090cc:	091b      	lsrs	r3, r3, #4
 80090ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u16_t pkt_id = 0;
 80090d2:	2300      	movs	r3, #0
 80090d4:	84bb      	strh	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN", client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090da:	2b7f      	cmp	r3, #127	; 0x7f
 80090dc:	d906      	bls.n	80090ec <mqtt_message_received+0x50>
 80090de:	4b9c      	ldr	r3, [pc, #624]	; (8009350 <mqtt_message_received+0x2b4>)
 80090e0:	f240 22ab 	movw	r2, #683	; 0x2ab
 80090e4:	499b      	ldr	r1, [pc, #620]	; (8009354 <mqtt_message_received+0x2b8>)
 80090e6:	489c      	ldr	r0, [pc, #624]	; (8009358 <mqtt_message_received+0x2bc>)
 80090e8:	f00b fedc 	bl	8014ea4 <iprintf>
  LWIP_ASSERT("fixed_hdr_idx <= client->msg_idx", fixed_hdr_idx <= client->msg_idx);
 80090ec:	7afa      	ldrb	r2, [r7, #11]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d906      	bls.n	8009104 <mqtt_message_received+0x68>
 80090f6:	4b96      	ldr	r3, [pc, #600]	; (8009350 <mqtt_message_received+0x2b4>)
 80090f8:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 80090fc:	4997      	ldr	r1, [pc, #604]	; (800935c <mqtt_message_received+0x2c0>)
 80090fe:	4896      	ldr	r0, [pc, #600]	; (8009358 <mqtt_message_received+0x2bc>)
 8009100:	f00b fed0 	bl	8014ea4 <iprintf>
  LWIP_ERROR("buffer length mismatch", fixed_hdr_idx + length <= MQTT_VAR_HEADER_BUFFER_LEN,
 8009104:	7afa      	ldrb	r2, [r7, #11]
 8009106:	893b      	ldrh	r3, [r7, #8]
 8009108:	4413      	add	r3, r2
 800910a:	2b80      	cmp	r3, #128	; 0x80
 800910c:	dd09      	ble.n	8009122 <mqtt_message_received+0x86>
 800910e:	4b90      	ldr	r3, [pc, #576]	; (8009350 <mqtt_message_received+0x2b4>)
 8009110:	f240 22ad 	movw	r2, #685	; 0x2ad
 8009114:	4992      	ldr	r1, [pc, #584]	; (8009360 <mqtt_message_received+0x2c4>)
 8009116:	4890      	ldr	r0, [pc, #576]	; (8009358 <mqtt_message_received+0x2bc>)
 8009118:	f00b fec4 	bl	8014ea4 <iprintf>
 800911c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009120:	e16e      	b.n	8009400 <mqtt_message_received+0x364>
             return MQTT_CONNECT_DISCONNECTED);

  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 8009122:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009126:	2b02      	cmp	r3, #2
 8009128:	d123      	bne.n	8009172 <mqtt_message_received+0xd6>
    if (client->conn_state == MQTT_CONNECTING) {
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	7a9b      	ldrb	r3, [r3, #10]
 800912e:	2b02      	cmp	r3, #2
 8009130:	f040 8151 	bne.w	80093d6 <mqtt_message_received+0x33a>
      if (length < 2) {
 8009134:	893b      	ldrh	r3, [r7, #8]
 8009136:	2b01      	cmp	r3, #1
 8009138:	f240 814f 	bls.w	80093da <mqtt_message_received+0x33e>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short CONNACK message\n"));
        goto out_disconnect;
      }
      /* Get result code from CONNACK */
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 800913c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800913e:	3301      	adds	r3, #1
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	86fb      	strh	r3, [r7, #54]	; 0x36
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: Connect response code %d\n", res));
      if (res == MQTT_CONNECT_ACCEPTED) {
 8009144:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009146:	2b00      	cmp	r3, #0
 8009148:	f040 8145 	bne.w	80093d6 <mqtt_message_received+0x33a>
        /* Reset cyclic_tick when changing to connected state */
        client->cyclic_tick = 0;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2200      	movs	r2, #0
 8009150:	801a      	strh	r2, [r3, #0]
        client->conn_state = MQTT_CONNECTED;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2203      	movs	r2, #3
 8009156:	729a      	strb	r2, [r3, #10]
        /* Notify upper layer */
        if (client->connect_cb != 0) {
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	695b      	ldr	r3, [r3, #20]
 800915c:	2b00      	cmp	r3, #0
 800915e:	f000 813a 	beq.w	80093d6 <mqtt_message_received+0x33a>
          client->connect_cb(client, client->connect_arg, res);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	695b      	ldr	r3, [r3, #20]
 8009166:	68fa      	ldr	r2, [r7, #12]
 8009168:	6911      	ldr	r1, [r2, #16]
 800916a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	4798      	blx	r3
 8009170:	e131      	b.n	80093d6 <mqtt_message_received+0x33a>
        }
      }
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Received CONNACK in connected state\n"));
    }
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 8009172:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009176:	2b0d      	cmp	r3, #13
 8009178:	f000 812d 	beq.w	80093d6 <mqtt_message_received+0x33a>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ( "mqtt_message_received: Received PINGRESP from server\n"));

  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 800917c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009180:	2b03      	cmp	r3, #3
 8009182:	f040 80c0 	bne.w	8009306 <mqtt_message_received+0x26a>
    u16_t payload_offset = 0;
 8009186:	2300      	movs	r3, #0
 8009188:	86bb      	strh	r3, [r7, #52]	; 0x34
    u16_t payload_length = length;
 800918a:	893b      	ldrh	r3, [r7, #8]
 800918c:	867b      	strh	r3, [r7, #50]	; 0x32
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8009194:	105b      	asrs	r3, r3, #1
 8009196:	b2db      	uxtb	r3, r3
 8009198:	f003 0303 	and.w	r3, r3, #3
 800919c:	77fb      	strb	r3, [r7, #31]

    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091a2:	2b80      	cmp	r3, #128	; 0x80
 80091a4:	d87d      	bhi.n	80092a2 <mqtt_message_received+0x206>
      /* Should have topic and pkt id*/
      u8_t *topic;
      u16_t after_topic;
      u8_t bkp;
      u16_t topic_len;
      u16_t qos_len = (qos ? 2U : 0U);
 80091a6:	7ffb      	ldrb	r3, [r7, #31]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d001      	beq.n	80091b0 <mqtt_message_received+0x114>
 80091ac:	2302      	movs	r3, #2
 80091ae:	e000      	b.n	80091b2 <mqtt_message_received+0x116>
 80091b0:	2300      	movs	r3, #0
 80091b2:	83bb      	strh	r3, [r7, #28]
      if (length < 2 + qos_len) {
 80091b4:	8bbb      	ldrh	r3, [r7, #28]
 80091b6:	1c5a      	adds	r2, r3, #1
 80091b8:	893b      	ldrh	r3, [r7, #8]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	f280 810f 	bge.w	80093de <mqtt_message_received+0x342>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet\n"));
        goto out_disconnect;
      }
      topic_len = var_hdr_payload[0];
 80091c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	837b      	strh	r3, [r7, #26]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 80091c6:	8b7b      	ldrh	r3, [r7, #26]
 80091c8:	021b      	lsls	r3, r3, #8
 80091ca:	b29a      	uxth	r2, r3
 80091cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ce:	3301      	adds	r3, #1
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	4413      	add	r3, r2
 80091d6:	837b      	strh	r3, [r7, #26]
      if ((topic_len > length - (2 + qos_len)) ||
 80091d8:	8b7a      	ldrh	r2, [r7, #26]
 80091da:	8939      	ldrh	r1, [r7, #8]
 80091dc:	8bbb      	ldrh	r3, [r7, #28]
 80091de:	3302      	adds	r3, #2
 80091e0:	1acb      	subs	r3, r1, r3
 80091e2:	429a      	cmp	r2, r3
 80091e4:	f300 80fd 	bgt.w	80093e2 <mqtt_message_received+0x346>
          (topic_len > var_hdr_payload_bufsize - (2 + qos_len))) {
 80091e8:	8b7a      	ldrh	r2, [r7, #26]
 80091ea:	8bbb      	ldrh	r3, [r7, #28]
 80091ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091ee:	1acb      	subs	r3, r1, r3
 80091f0:	3b02      	subs	r3, #2
      if ((topic_len > length - (2 + qos_len)) ||
 80091f2:	429a      	cmp	r2, r3
 80091f4:	f200 80f5 	bhi.w	80093e2 <mqtt_message_received+0x346>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (topic)\n"));
        goto out_disconnect;
      }

      topic = var_hdr_payload + 2;
 80091f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091fa:	3302      	adds	r3, #2
 80091fc:	617b      	str	r3, [r7, #20]
      after_topic = 2 + topic_len;
 80091fe:	8b7b      	ldrh	r3, [r7, #26]
 8009200:	3302      	adds	r3, #2
 8009202:	863b      	strh	r3, [r7, #48]	; 0x30
      /* Check buffer length, add one byte even for QoS 0 so that zero termination will fit */
      if ((after_topic + (qos ? 2U : 1U)) > var_hdr_payload_bufsize) {
 8009204:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009206:	7ffa      	ldrb	r2, [r7, #31]
 8009208:	2a00      	cmp	r2, #0
 800920a:	d001      	beq.n	8009210 <mqtt_message_received+0x174>
 800920c:	2202      	movs	r2, #2
 800920e:	e000      	b.n	8009212 <mqtt_message_received+0x176>
 8009210:	2201      	movs	r2, #1
 8009212:	4413      	add	r3, r2
 8009214:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009216:	429a      	cmp	r2, r3
 8009218:	f0c0 80e5 	bcc.w	80093e6 <mqtt_message_received+0x34a>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Receive buffer can not fit topic + pkt_id\n"));
        goto out_disconnect;
      }

      /* id for QoS 1 and 2 */
      if (qos > 0) {
 800921c:	7ffb      	ldrb	r3, [r7, #31]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d01a      	beq.n	8009258 <mqtt_message_received+0x1bc>
        if (length < after_topic + 2U) {
 8009222:	893a      	ldrh	r2, [r7, #8]
 8009224:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009226:	3302      	adds	r3, #2
 8009228:	429a      	cmp	r2, r3
 800922a:	f0c0 80de 	bcc.w	80093ea <mqtt_message_received+0x34e>
          LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (after_topic)\n"));
          goto out_disconnect;
        }
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 800922e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009232:	4413      	add	r3, r2
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	b29b      	uxth	r3, r3
 8009238:	021b      	lsls	r3, r3, #8
 800923a:	b29a      	uxth	r2, r3
 800923c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800923e:	3301      	adds	r3, #1
 8009240:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009242:	440b      	add	r3, r1
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	b29b      	uxth	r3, r3
 8009248:	4413      	add	r3, r2
 800924a:	b29a      	uxth	r2, r3
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	811a      	strh	r2, [r3, #8]
        after_topic += 2;
 8009250:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009252:	3302      	adds	r3, #2
 8009254:	863b      	strh	r3, [r7, #48]	; 0x30
 8009256:	e002      	b.n	800925e <mqtt_message_received+0x1c2>
      } else {
        client->inpub_pkt_id = 0;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2200      	movs	r2, #0
 800925c:	811a      	strh	r2, [r3, #8]
      }
      /* Take backup of byte after topic */
      bkp = topic[topic_len];
 800925e:	8b7b      	ldrh	r3, [r7, #26]
 8009260:	697a      	ldr	r2, [r7, #20]
 8009262:	4413      	add	r3, r2
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	74fb      	strb	r3, [r7, #19]
      /* Zero terminate string */
      topic[topic_len] = 0;
 8009268:	8b7b      	ldrh	r3, [r7, #26]
 800926a:	697a      	ldr	r2, [r7, #20]
 800926c:	4413      	add	r3, r2
 800926e:	2200      	movs	r2, #0
 8009270:	701a      	strb	r2, [r3, #0]
      /* Payload data remaining in receive buffer */
      payload_length = length - after_topic;
 8009272:	893a      	ldrh	r2, [r7, #8]
 8009274:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009276:	1ad3      	subs	r3, r2, r3
 8009278:	867b      	strh	r3, [r7, #50]	; 0x32
      payload_offset = after_topic;
 800927a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800927c:	86bb      	strh	r3, [r7, #52]	; 0x34

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Received message with QoS %d at topic: %s, payload length %"U32_F"\n",
                                     qos, topic, remaining_length + payload_length));
      if (client->pub_cb != NULL) {
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009282:	2b00      	cmp	r3, #0
 8009284:	d008      	beq.n	8009298 <mqtt_message_received+0x1fc>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800928a:	68fa      	ldr	r2, [r7, #12]
 800928c:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 800928e:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	440a      	add	r2, r1
 8009294:	6979      	ldr	r1, [r7, #20]
 8009296:	4798      	blx	r3
      }
      /* Restore byte after topic */
      topic[topic_len] = bkp;
 8009298:	8b7b      	ldrh	r3, [r7, #26]
 800929a:	697a      	ldr	r2, [r7, #20]
 800929c:	4413      	add	r3, r2
 800929e:	7cfa      	ldrb	r2, [r7, #19]
 80092a0:	701a      	strb	r2, [r3, #0]
    }
    if (payload_length > 0 || remaining_length == 0) {
 80092a2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d103      	bne.n	80092b0 <mqtt_message_received+0x214>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	f040 8093 	bne.w	80093d6 <mqtt_message_received+0x33a>
      if (length < (size_t)(payload_offset + payload_length)) {
 80092b0:	893b      	ldrh	r3, [r7, #8]
 80092b2:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80092b4:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80092b6:	440a      	add	r2, r1
 80092b8:	4293      	cmp	r3, r2
 80092ba:	f0c0 8098 	bcc.w	80093ee <mqtt_message_received+0x352>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short packet (payload)\n"));
        goto out_disconnect;
      }
      client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80092c6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80092c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092ca:	18d1      	adds	r1, r2, r3
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	bf0c      	ite	eq
 80092d2:	2301      	moveq	r3, #1
 80092d4:	2300      	movne	r3, #0
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80092da:	47a0      	blx	r4
      /* Reply if QoS > 0 */
      if (remaining_length == 0 && qos > 0) {
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d179      	bne.n	80093d6 <mqtt_message_received+0x33a>
 80092e2:	7ffb      	ldrb	r3, [r7, #31]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d076      	beq.n	80093d6 <mqtt_message_received+0x33a>
        /* Send PUBACK for QoS 1 or PUBREC for QoS 2 */
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 80092e8:	7ffb      	ldrb	r3, [r7, #31]
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d101      	bne.n	80092f2 <mqtt_message_received+0x256>
 80092ee:	2304      	movs	r3, #4
 80092f0:	e000      	b.n	80092f4 <mqtt_message_received+0x258>
 80092f2:	2305      	movs	r3, #5
 80092f4:	74bb      	strb	r3, [r7, #18]
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Sending publish response: %s with pkt_id: %d\n",
                                       mqtt_msg_type_to_str(resp_msg), client->inpub_pkt_id));
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	891a      	ldrh	r2, [r3, #8]
 80092fa:	7cb9      	ldrb	r1, [r7, #18]
 80092fc:	2300      	movs	r3, #0
 80092fe:	68f8      	ldr	r0, [r7, #12]
 8009300:	f7ff fe74 	bl	8008fec <pub_ack_rec_rel_response>
 8009304:	e067      	b.n	80093d6 <mqtt_message_received+0x33a>
      }
    }
  } else {
    /* Get packet identifier */
    pkt_id = (u16_t)var_hdr_payload[0] << 8;
 8009306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	b29b      	uxth	r3, r3
 800930c:	021b      	lsls	r3, r3, #8
 800930e:	84bb      	strh	r3, [r7, #36]	; 0x24
    pkt_id |= (u16_t)var_hdr_payload[1];
 8009310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009312:	3301      	adds	r3, #1
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	b29a      	uxth	r2, r3
 8009318:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800931a:	4313      	orrs	r3, r2
 800931c:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (pkt_id == 0) {
 800931e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009320:	2b00      	cmp	r3, #0
 8009322:	d066      	beq.n	80093f2 <mqtt_message_received+0x356>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Got message with illegal packet identifier: 0\n"));
      goto out_disconnect;
    }
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 8009324:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009328:	2b05      	cmp	r3, #5
 800932a:	d106      	bne.n	800933a <mqtt_message_received+0x29e>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREC, sending PUBREL with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 800932c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800932e:	2301      	movs	r3, #1
 8009330:	2106      	movs	r1, #6
 8009332:	68f8      	ldr	r0, [r7, #12]
 8009334:	f7ff fe5a 	bl	8008fec <pub_ack_rec_rel_response>
 8009338:	e04d      	b.n	80093d6 <mqtt_message_received+0x33a>

    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 800933a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800933e:	2b06      	cmp	r3, #6
 8009340:	d110      	bne.n	8009364 <mqtt_message_received+0x2c8>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREL, sending PUBCOMP response with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 8009342:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009344:	2300      	movs	r3, #0
 8009346:	2107      	movs	r1, #7
 8009348:	68f8      	ldr	r0, [r7, #12]
 800934a:	f7ff fe4f 	bl	8008fec <pub_ack_rec_rel_response>
 800934e:	e042      	b.n	80093d6 <mqtt_message_received+0x33a>
 8009350:	0801634c 	.word	0x0801634c
 8009354:	08016580 	.word	0x08016580
 8009358:	080163c4 	.word	0x080163c4
 800935c:	080165b0 	.word	0x080165b0
 8009360:	080165d4 	.word	0x080165d4

    } else if (pkt_type == MQTT_MSG_TYPE_SUBACK || pkt_type == MQTT_MSG_TYPE_UNSUBACK ||
 8009364:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009368:	2b09      	cmp	r3, #9
 800936a:	d00b      	beq.n	8009384 <mqtt_message_received+0x2e8>
 800936c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009370:	2b0b      	cmp	r3, #11
 8009372:	d007      	beq.n	8009384 <mqtt_message_received+0x2e8>
 8009374:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009378:	2b07      	cmp	r3, #7
 800937a:	d003      	beq.n	8009384 <mqtt_message_received+0x2e8>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 800937c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009380:	2b04      	cmp	r3, #4
 8009382:	d138      	bne.n	80093f6 <mqtt_message_received+0x35a>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	3318      	adds	r3, #24
 8009388:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800938a:	4611      	mov	r1, r2
 800938c:	4618      	mov	r0, r3
 800938e:	f7ff fb69 	bl	8008a64 <mqtt_take_request>
 8009392:	6238      	str	r0, [r7, #32]
      if (r != NULL) {
 8009394:	6a3b      	ldr	r3, [r7, #32]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d01c      	beq.n	80093d4 <mqtt_message_received+0x338>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: %s response with id %d\n", mqtt_msg_type_to_str(pkt_type), pkt_id));
        if (pkt_type == MQTT_MSG_TYPE_SUBACK) {
 800939a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800939e:	2b09      	cmp	r3, #9
 80093a0:	d10a      	bne.n	80093b8 <mqtt_message_received+0x31c>
          if (length < 3) {
 80093a2:	893b      	ldrh	r3, [r7, #8]
 80093a4:	2b02      	cmp	r3, #2
 80093a6:	d928      	bls.n	80093fa <mqtt_message_received+0x35e>
            LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: To small SUBACK packet\n"));
            goto out_disconnect;
          } else {
            mqtt_incomming_suback(r, var_hdr_payload[2]);
 80093a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093aa:	3302      	adds	r3, #2
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	4619      	mov	r1, r3
 80093b0:	6a38      	ldr	r0, [r7, #32]
 80093b2:	f7ff fe58 	bl	8009066 <mqtt_incomming_suback>
 80093b6:	e00a      	b.n	80093ce <mqtt_message_received+0x332>
          }
        } else if (r->cb != NULL) {
 80093b8:	6a3b      	ldr	r3, [r7, #32]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d006      	beq.n	80093ce <mqtt_message_received+0x332>
          r->cb(r->arg, ERR_OK);
 80093c0:	6a3b      	ldr	r3, [r7, #32]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	6a3a      	ldr	r2, [r7, #32]
 80093c6:	6892      	ldr	r2, [r2, #8]
 80093c8:	2100      	movs	r1, #0
 80093ca:	4610      	mov	r0, r2
 80093cc:	4798      	blx	r3
        }
        mqtt_delete_request(r);
 80093ce:	6a38      	ldr	r0, [r7, #32]
 80093d0:	f7ff fb38 	bl	8008a44 <mqtt_delete_request>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 80093d4:	bf00      	nop
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ( "mqtt_message_received: Received unknown message type: %d\n", pkt_type));
      goto out_disconnect;
    }
  }
  return res;
 80093d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80093d8:	e012      	b.n	8009400 <mqtt_message_received+0x364>
        goto out_disconnect;
 80093da:	bf00      	nop
 80093dc:	e00e      	b.n	80093fc <mqtt_message_received+0x360>
        goto out_disconnect;
 80093de:	bf00      	nop
 80093e0:	e00c      	b.n	80093fc <mqtt_message_received+0x360>
        goto out_disconnect;
 80093e2:	bf00      	nop
 80093e4:	e00a      	b.n	80093fc <mqtt_message_received+0x360>
        goto out_disconnect;
 80093e6:	bf00      	nop
 80093e8:	e008      	b.n	80093fc <mqtt_message_received+0x360>
          goto out_disconnect;
 80093ea:	bf00      	nop
 80093ec:	e006      	b.n	80093fc <mqtt_message_received+0x360>
        goto out_disconnect;
 80093ee:	bf00      	nop
 80093f0:	e004      	b.n	80093fc <mqtt_message_received+0x360>
      goto out_disconnect;
 80093f2:	bf00      	nop
 80093f4:	e002      	b.n	80093fc <mqtt_message_received+0x360>
      goto out_disconnect;
 80093f6:	bf00      	nop
 80093f8:	e000      	b.n	80093fc <mqtt_message_received+0x360>
            goto out_disconnect;
 80093fa:	bf00      	nop
out_disconnect:
  return MQTT_CONNECT_DISCONNECTED;
 80093fc:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 8009400:	4618      	mov	r0, r3
 8009402:	373c      	adds	r7, #60	; 0x3c
 8009404:	46bd      	mov	sp, r7
 8009406:	bd90      	pop	{r4, r7, pc}

08009408 <mqtt_parse_incoming>:
 * @param p PBUF chain of received data
 * @return Connection status
 */
static mqtt_connection_status_t
mqtt_parse_incoming(mqtt_client_t *client, struct pbuf *p)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b088      	sub	sp, #32
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
  u16_t in_offset = 0;
 8009412:	2300      	movs	r3, #0
 8009414:	83fb      	strh	r3, [r7, #30]
  u32_t msg_rem_len = 0;
 8009416:	2300      	movs	r3, #0
 8009418:	61bb      	str	r3, [r7, #24]
  u8_t fixed_hdr_idx = 0;
 800941a:	2300      	movs	r3, #0
 800941c:	75fb      	strb	r3, [r7, #23]
  u8_t b = 0;
 800941e:	2300      	movs	r3, #0
 8009420:	75bb      	strb	r3, [r7, #22]

  while (p->tot_len > in_offset) {
 8009422:	e0bc      	b.n	800959e <mqtt_parse_incoming+0x196>
    /* We ALWAYS parse the header here first. Even if the header was not
       included in this segment, we re-parse it here by buffering it in
       client->rx_buffer. client->msg_idx keeps track of this. */
    if ((fixed_hdr_idx < 2) || ((b & 0x80) != 0)) {
 8009424:	7dfb      	ldrb	r3, [r7, #23]
 8009426:	2b01      	cmp	r3, #1
 8009428:	d903      	bls.n	8009432 <mqtt_parse_incoming+0x2a>
 800942a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800942e:	2b00      	cmp	r3, #0
 8009430:	da4d      	bge.n	80094ce <mqtt_parse_incoming+0xc6>

      if (fixed_hdr_idx < client->msg_idx) {
 8009432:	7dfa      	ldrb	r2, [r7, #23]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009438:	429a      	cmp	r2, r3
 800943a:	d206      	bcs.n	800944a <mqtt_parse_incoming+0x42>
        /* parse header from old pbuf (buffered in client->rx_buffer) */
        b = client->rx_buffer[fixed_hdr_idx];
 800943c:	7dfb      	ldrb	r3, [r7, #23]
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	4413      	add	r3, r2
 8009442:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8009446:	75bb      	strb	r3, [r7, #22]
 8009448:	e012      	b.n	8009470 <mqtt_parse_incoming+0x68>
      } else {
        /* parse header from this pbuf and save it in client->rx_buffer in case
           it comes in segmented */
        b = pbuf_get_at(p, in_offset++);
 800944a:	8bfb      	ldrh	r3, [r7, #30]
 800944c:	1c5a      	adds	r2, r3, #1
 800944e:	83fa      	strh	r2, [r7, #30]
 8009450:	4619      	mov	r1, r3
 8009452:	6838      	ldr	r0, [r7, #0]
 8009454:	f002 fbda 	bl	800bc0c <pbuf_get_at>
 8009458:	4603      	mov	r3, r0
 800945a:	75bb      	strb	r3, [r7, #22]
        client->rx_buffer[client->msg_idx++] = b;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009460:	1c59      	adds	r1, r3, #1
 8009462:	687a      	ldr	r2, [r7, #4]
 8009464:	6691      	str	r1, [r2, #104]	; 0x68
 8009466:	687a      	ldr	r2, [r7, #4]
 8009468:	4413      	add	r3, r2
 800946a:	7dba      	ldrb	r2, [r7, #22]
 800946c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      }
      fixed_hdr_idx++;
 8009470:	7dfb      	ldrb	r3, [r7, #23]
 8009472:	3301      	adds	r3, #1
 8009474:	75fb      	strb	r3, [r7, #23]

      if (fixed_hdr_idx >= 2) {
 8009476:	7dfb      	ldrb	r3, [r7, #23]
 8009478:	2b01      	cmp	r3, #1
 800947a:	f240 8090 	bls.w	800959e <mqtt_parse_incoming+0x196>
        /* fixed header contains at least 2 bytes but can contain more, depending on
           'remaining length'. All bytes but the last of this have 0x80 set to
           indicate more bytes are coming. */
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_idx - 2) * 7);
 800947e:	7dbb      	ldrb	r3, [r7, #22]
 8009480:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 8009484:	7dfb      	ldrb	r3, [r7, #23]
 8009486:	1e9a      	subs	r2, r3, #2
 8009488:	4613      	mov	r3, r2
 800948a:	00db      	lsls	r3, r3, #3
 800948c:	1a9b      	subs	r3, r3, r2
 800948e:	fa01 f303 	lsl.w	r3, r1, r3
 8009492:	69ba      	ldr	r2, [r7, #24]
 8009494:	4313      	orrs	r3, r2
 8009496:	61bb      	str	r3, [r7, #24]
        if ((b & 0x80) == 0) {
 8009498:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800949c:	2b00      	cmp	r3, #0
 800949e:	db7e      	blt.n	800959e <mqtt_parse_incoming+0x196>
          /* fixed header is done */
          LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: Remaining length after fixed header: %"U32_F"\n", msg_rem_len));
          if (msg_rem_len == 0) {
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d10b      	bne.n	80094be <mqtt_parse_incoming+0xb6>
            /* Complete message with no extra headers of payload received */
            mqtt_message_received(client, fixed_hdr_idx, 0, 0);
 80094a6:	7df9      	ldrb	r1, [r7, #23]
 80094a8:	2300      	movs	r3, #0
 80094aa:	2200      	movs	r2, #0
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f7ff fdf5 	bl	800909c <mqtt_message_received>
            client->msg_idx = 0;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	669a      	str	r2, [r3, #104]	; 0x68
            fixed_hdr_idx = 0;
 80094b8:	2300      	movs	r3, #0
 80094ba:	75fb      	strb	r3, [r7, #23]
 80094bc:	e06f      	b.n	800959e <mqtt_parse_incoming+0x196>
          } else {
            /* Bytes remaining in message (changes remaining length if this is
               not the first segment of this message) */
            msg_rem_len = (msg_rem_len + fixed_hdr_idx) - client->msg_idx;
 80094be:	7dfa      	ldrb	r2, [r7, #23]
 80094c0:	69bb      	ldr	r3, [r7, #24]
 80094c2:	441a      	add	r2, r3
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094c8:	1ad3      	subs	r3, r2, r3
 80094ca:	61bb      	str	r3, [r7, #24]
      if (fixed_hdr_idx >= 2) {
 80094cc:	e067      	b.n	800959e <mqtt_parse_incoming+0x196>
      }
    } else {
      /* Fixed header has been parsed, parse variable header */
      u16_t cpy_len, cpy_start, buffer_space;

      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80094d2:	7dfb      	ldrb	r3, [r7, #23]
 80094d4:	1ad3      	subs	r3, r2, r3
 80094d6:	7dfa      	ldrb	r2, [r7, #23]
 80094d8:	f1c2 0280 	rsb	r2, r2, #128	; 0x80
 80094dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80094e0:	fb02 f201 	mul.w	r2, r2, r1
 80094e4:	1a9b      	subs	r3, r3, r2
 80094e6:	b29a      	uxth	r2, r3
 80094e8:	7dfb      	ldrb	r3, [r7, #23]
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	4413      	add	r3, r2
 80094ee:	827b      	strh	r3, [r7, #18]

      /* Allow to copy the lesser one of available length in input data or bytes remaining in message */
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	891a      	ldrh	r2, [r3, #8]
 80094f4:	8bfb      	ldrh	r3, [r7, #30]
 80094f6:	1ad3      	subs	r3, r2, r3
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	461a      	mov	r2, r3
 80094fc:	69bb      	ldr	r3, [r7, #24]
 80094fe:	4293      	cmp	r3, r2
 8009500:	d905      	bls.n	800950e <mqtt_parse_incoming+0x106>
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	891a      	ldrh	r2, [r3, #8]
 8009506:	8bfb      	ldrh	r3, [r7, #30]
 8009508:	1ad3      	subs	r3, r2, r3
 800950a:	b29b      	uxth	r3, r3
 800950c:	e001      	b.n	8009512 <mqtt_parse_incoming+0x10a>
 800950e:	69bb      	ldr	r3, [r7, #24]
 8009510:	b29b      	uxth	r3, r3
 8009512:	82bb      	strh	r3, [r7, #20]

      /* Limit to available space in buffer */
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - cpy_start;
 8009514:	8a7b      	ldrh	r3, [r7, #18]
 8009516:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800951a:	823b      	strh	r3, [r7, #16]
      if (cpy_len > buffer_space) {
 800951c:	8aba      	ldrh	r2, [r7, #20]
 800951e:	8a3b      	ldrh	r3, [r7, #16]
 8009520:	429a      	cmp	r2, r3
 8009522:	d901      	bls.n	8009528 <mqtt_parse_incoming+0x120>
        cpy_len = buffer_space;
 8009524:	8a3b      	ldrh	r3, [r7, #16]
 8009526:	82bb      	strh	r3, [r7, #20]
      }
      pbuf_copy_partial(p, client->rx_buffer + cpy_start, cpy_len, in_offset);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800952e:	8a7b      	ldrh	r3, [r7, #18]
 8009530:	18d1      	adds	r1, r2, r3
 8009532:	8bfb      	ldrh	r3, [r7, #30]
 8009534:	8aba      	ldrh	r2, [r7, #20]
 8009536:	6838      	ldr	r0, [r7, #0]
 8009538:	f002 fa9a 	bl	800ba70 <pbuf_copy_partial>

      /* Advance get and put indexes  */
      client->msg_idx += cpy_len;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009540:	8abb      	ldrh	r3, [r7, #20]
 8009542:	441a      	add	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	669a      	str	r2, [r3, #104]	; 0x68
      in_offset += cpy_len;
 8009548:	8bfa      	ldrh	r2, [r7, #30]
 800954a:	8abb      	ldrh	r3, [r7, #20]
 800954c:	4413      	add	r3, r2
 800954e:	83fb      	strh	r3, [r7, #30]
      msg_rem_len -= cpy_len;
 8009550:	8abb      	ldrh	r3, [r7, #20]
 8009552:	69ba      	ldr	r2, [r7, #24]
 8009554:	1ad3      	subs	r3, r2, r3
 8009556:	61bb      	str	r3, [r7, #24]

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: msg_idx: %"U32_F", cpy_len: %"U16_F", remaining %"U32_F"\n", client->msg_idx, cpy_len, msg_rem_len));
      if ((msg_rem_len == 0) || (cpy_len == buffer_space)) {
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d003      	beq.n	8009566 <mqtt_parse_incoming+0x15e>
 800955e:	8aba      	ldrh	r2, [r7, #20]
 8009560:	8a3b      	ldrh	r3, [r7, #16]
 8009562:	429a      	cmp	r2, r3
 8009564:	d11b      	bne.n	800959e <mqtt_parse_incoming+0x196>
        /* Whole message received or buffer is full */
        mqtt_connection_status_t res = mqtt_message_received(client, fixed_hdr_idx, (cpy_start + cpy_len) - fixed_hdr_idx, msg_rem_len);
 8009566:	8a7a      	ldrh	r2, [r7, #18]
 8009568:	8abb      	ldrh	r3, [r7, #20]
 800956a:	4413      	add	r3, r2
 800956c:	b29a      	uxth	r2, r3
 800956e:	7dfb      	ldrb	r3, [r7, #23]
 8009570:	b29b      	uxth	r3, r3
 8009572:	1ad3      	subs	r3, r2, r3
 8009574:	b29a      	uxth	r2, r3
 8009576:	7df9      	ldrb	r1, [r7, #23]
 8009578:	69bb      	ldr	r3, [r7, #24]
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f7ff fd8e 	bl	800909c <mqtt_message_received>
 8009580:	4603      	mov	r3, r0
 8009582:	81fb      	strh	r3, [r7, #14]
        if (res != MQTT_CONNECT_ACCEPTED) {
 8009584:	89fb      	ldrh	r3, [r7, #14]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d001      	beq.n	800958e <mqtt_parse_incoming+0x186>
          return res;
 800958a:	89fb      	ldrh	r3, [r7, #14]
 800958c:	e00e      	b.n	80095ac <mqtt_parse_incoming+0x1a4>
        }
        if (msg_rem_len == 0) {
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d104      	bne.n	800959e <mqtt_parse_incoming+0x196>
          /* Reset parser state */
          client->msg_idx = 0;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	669a      	str	r2, [r3, #104]	; 0x68
          /* msg_tot_len = 0; */
          fixed_hdr_idx = 0;
 800959a:	2300      	movs	r3, #0
 800959c:	75fb      	strb	r3, [r7, #23]
  while (p->tot_len > in_offset) {
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	891b      	ldrh	r3, [r3, #8]
 80095a2:	8bfa      	ldrh	r2, [r7, #30]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	f4ff af3d 	bcc.w	8009424 <mqtt_parse_incoming+0x1c>
        }
      }
    }
  }
  return MQTT_CONNECT_ACCEPTED;
 80095aa:	2300      	movs	r3, #0
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3720      	adds	r7, #32
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <mqtt_tcp_recv_cb>:
 * @param err Passed as return value if not ERR_OK
 * @return ERR_OK or err passed into callback
 */
static err_t
mqtt_tcp_recv_cb(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b086      	sub	sp, #24
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	60f8      	str	r0, [r7, #12]
 80095bc:	60b9      	str	r1, [r7, #8]
 80095be:	607a      	str	r2, [r7, #4]
 80095c0:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d106      	bne.n	80095da <mqtt_tcp_recv_cb+0x26>
 80095cc:	4b24      	ldr	r3, [pc, #144]	; (8009660 <mqtt_tcp_recv_cb+0xac>)
 80095ce:	f240 32a7 	movw	r2, #935	; 0x3a7
 80095d2:	4924      	ldr	r1, [pc, #144]	; (8009664 <mqtt_tcp_recv_cb+0xb0>)
 80095d4:	4824      	ldr	r0, [pc, #144]	; (8009668 <mqtt_tcp_recv_cb+0xb4>)
 80095d6:	f00b fc65 	bl	8014ea4 <iprintf>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	68ba      	ldr	r2, [r7, #8]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d006      	beq.n	80095f2 <mqtt_tcp_recv_cb+0x3e>
 80095e4:	4b1e      	ldr	r3, [pc, #120]	; (8009660 <mqtt_tcp_recv_cb+0xac>)
 80095e6:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80095ea:	4920      	ldr	r1, [pc, #128]	; (800966c <mqtt_tcp_recv_cb+0xb8>)
 80095ec:	481e      	ldr	r0, [pc, #120]	; (8009668 <mqtt_tcp_recv_cb+0xb4>)
 80095ee:	f00b fc59 	bl	8014ea4 <iprintf>

  if (p == NULL) {
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d105      	bne.n	8009604 <mqtt_tcp_recv_cb+0x50>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_recv_cb: Recv pbuf=NULL, remote has closed connection\n"));
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 80095f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80095fc:	6978      	ldr	r0, [r7, #20]
 80095fe:	f7ff fbfd 	bl	8008dfc <mqtt_close>
 8009602:	e027      	b.n	8009654 <mqtt_tcp_recv_cb+0xa0>
  } else {
    mqtt_connection_status_t res;
    if (err != ERR_OK) {
 8009604:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d005      	beq.n	8009618 <mqtt_tcp_recv_cb+0x64>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_recv_cb: Recv err=%d\n", err));
      pbuf_free(p);
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f002 f839 	bl	800b684 <pbuf_free>
      return err;
 8009612:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009616:	e01e      	b.n	8009656 <mqtt_tcp_recv_cb+0xa2>
    }

    /* Tell remote that data has been received */
    altcp_recved(pcb, p->tot_len);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	891b      	ldrh	r3, [r3, #8]
 800961c:	4619      	mov	r1, r3
 800961e:	68b8      	ldr	r0, [r7, #8]
 8009620:	f002 ff26 	bl	800c470 <tcp_recved>
    res = mqtt_parse_incoming(client, p);
 8009624:	6879      	ldr	r1, [r7, #4]
 8009626:	6978      	ldr	r0, [r7, #20]
 8009628:	f7ff feee 	bl	8009408 <mqtt_parse_incoming>
 800962c:	4603      	mov	r3, r0
 800962e:	827b      	strh	r3, [r7, #18]
    pbuf_free(p);
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f002 f827 	bl	800b684 <pbuf_free>

    if (res != MQTT_CONNECT_ACCEPTED) {
 8009636:	8a7b      	ldrh	r3, [r7, #18]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d004      	beq.n	8009646 <mqtt_tcp_recv_cb+0x92>
      mqtt_close(client, res);
 800963c:	8a7b      	ldrh	r3, [r7, #18]
 800963e:	4619      	mov	r1, r3
 8009640:	6978      	ldr	r0, [r7, #20]
 8009642:	f7ff fbdb 	bl	8008dfc <mqtt_close>
    }
    /* If keep alive functionality is used */
    if (client->keep_alive != 0) {
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	885b      	ldrh	r3, [r3, #2]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d002      	beq.n	8009654 <mqtt_tcp_recv_cb+0xa0>
      /* Reset server alive watchdog */
      client->server_watchdog = 0;
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	2200      	movs	r2, #0
 8009652:	809a      	strh	r2, [r3, #4]
    }

  }
  return ERR_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3718      	adds	r7, #24
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	0801634c 	.word	0x0801634c
 8009664:	080165ec 	.word	0x080165ec
 8009668:	080163c4 	.word	0x080163c4
 800966c:	08016610 	.word	0x08016610

08009670 <mqtt_tcp_sent_cb>:
 * @param len Number of bytes sent
 * @return ERR_OK
 */
static err_t
mqtt_tcp_sent_cb(void *arg, struct altcp_pcb *tpcb, u16_t len)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b086      	sub	sp, #24
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	4613      	mov	r3, r2
 800967c:	80fb      	strh	r3, [r7, #6]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  if (client->conn_state == MQTT_CONNECTED) {
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	7a9b      	ldrb	r3, [r3, #10]
 8009686:	2b03      	cmp	r3, #3
 8009688:	d127      	bne.n	80096da <mqtt_tcp_sent_cb+0x6a>
    struct mqtt_request_t *r;

    /* Reset keep-alive send timer and server watchdog */
    client->cyclic_tick = 0;
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	2200      	movs	r2, #0
 800968e:	801a      	strh	r2, [r3, #0]
    client->server_watchdog = 0;
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	2200      	movs	r2, #0
 8009694:	809a      	strh	r2, [r3, #4]
    /* QoS 0 publish has no response from server, so call its callbacks here */
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 8009696:	e00d      	b.n	80096b4 <mqtt_tcp_sent_cb+0x44>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_sent_cb: Calling QoS 0 publish complete callback\n"));
      if (r->cb != NULL) {
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d006      	beq.n	80096ae <mqtt_tcp_sent_cb+0x3e>
        r->cb(r->arg, ERR_OK);
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	693a      	ldr	r2, [r7, #16]
 80096a6:	6892      	ldr	r2, [r2, #8]
 80096a8:	2100      	movs	r1, #0
 80096aa:	4610      	mov	r0, r2
 80096ac:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 80096ae:	6938      	ldr	r0, [r7, #16]
 80096b0:	f7ff f9c8 	bl	8008a44 <mqtt_delete_request>
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	3318      	adds	r3, #24
 80096b8:	2100      	movs	r1, #0
 80096ba:	4618      	mov	r0, r3
 80096bc:	f7ff f9d2 	bl	8008a64 <mqtt_take_request>
 80096c0:	6138      	str	r0, [r7, #16]
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d1e7      	bne.n	8009698 <mqtt_tcp_sent_cb+0x28>
    }
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, client->conn);
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	4619      	mov	r1, r3
 80096d4:	4610      	mov	r0, r2
 80096d6:	f7ff f86f 	bl	80087b8 <mqtt_output_send>
  }
  return ERR_OK;
 80096da:	2300      	movs	r3, #0
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3718      	adds	r7, #24
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <mqtt_tcp_err_cb>:
 * @param arg MQTT client
 * @param err Error encountered
 */
static void
mqtt_tcp_err_cb(void *arg, err_t err)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	460b      	mov	r3, r1
 80096ee:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err); /* only used for debug output */
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_err_cb: TCP error callback: error %d, arg: %p\n", err, arg));
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d106      	bne.n	8009708 <mqtt_tcp_err_cb+0x24>
 80096fa:	4b09      	ldr	r3, [pc, #36]	; (8009720 <mqtt_tcp_err_cb+0x3c>)
 80096fc:	f240 32f6 	movw	r2, #1014	; 0x3f6
 8009700:	4908      	ldr	r1, [pc, #32]	; (8009724 <mqtt_tcp_err_cb+0x40>)
 8009702:	4809      	ldr	r0, [pc, #36]	; (8009728 <mqtt_tcp_err_cb+0x44>)
 8009704:	f00b fbce 	bl	8014ea4 <iprintf>
  /* Set conn to null before calling close as pcb is already deallocated*/
  client->conn = 0;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2200      	movs	r2, #0
 800970c:	60da      	str	r2, [r3, #12]
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 800970e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009712:	68f8      	ldr	r0, [r7, #12]
 8009714:	f7ff fb72 	bl	8008dfc <mqtt_close>
}
 8009718:	bf00      	nop
 800971a:	3710      	adds	r7, #16
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}
 8009720:	0801634c 	.word	0x0801634c
 8009724:	08016638 	.word	0x08016638
 8009728:	080163c4 	.word	0x080163c4

0800972c <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct altcp_pcb *tpcb)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	60fb      	str	r3, [r7, #12]
  if (client->conn_state == MQTT_CONNECTED) {
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	7a9b      	ldrb	r3, [r3, #10]
 800973e:	2b03      	cmp	r3, #3
 8009740:	d105      	bne.n	800974e <mqtt_tcp_poll_cb+0x22>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	33ec      	adds	r3, #236	; 0xec
 8009746:	6839      	ldr	r1, [r7, #0]
 8009748:	4618      	mov	r0, r3
 800974a:	f7ff f835 	bl	80087b8 <mqtt_output_send>
  }
  return ERR_OK;
 800974e:	2300      	movs	r3, #0
}
 8009750:	4618      	mov	r0, r3
 8009752:	3710      	adds	r7, #16
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct altcp_pcb *tpcb, err_t err)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b086      	sub	sp, #24
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	4613      	mov	r3, r2
 8009764:	71fb      	strb	r3, [r7, #7]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	617b      	str	r3, [r7, #20]

  if (err != ERR_OK) {
 800976a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d002      	beq.n	8009778 <mqtt_tcp_connect_cb+0x20>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_connect_cb: TCP connect error %d\n", err));
    return err;
 8009772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009776:	e025      	b.n	80097c4 <mqtt_tcp_connect_cb+0x6c>
  }

  /* Initiate receiver state */
  client->msg_idx = 0;
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	2200      	movs	r2, #0
 800977c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Setup TCP callbacks */
  altcp_recv(tpcb, mqtt_tcp_recv_cb);
 800977e:	4913      	ldr	r1, [pc, #76]	; (80097cc <mqtt_tcp_connect_cb+0x74>)
 8009780:	68b8      	ldr	r0, [r7, #8]
 8009782:	f003 fe65 	bl	800d450 <tcp_recv>
  altcp_sent(tpcb, mqtt_tcp_sent_cb);
 8009786:	4912      	ldr	r1, [pc, #72]	; (80097d0 <mqtt_tcp_connect_cb+0x78>)
 8009788:	68b8      	ldr	r0, [r7, #8]
 800978a:	f003 fe83 	bl	800d494 <tcp_sent>
  altcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 800978e:	2202      	movs	r2, #2
 8009790:	4910      	ldr	r1, [pc, #64]	; (80097d4 <mqtt_tcp_connect_cb+0x7c>)
 8009792:	68b8      	ldr	r0, [r7, #8]
 8009794:	f003 fec2 	bl	800d51c <tcp_poll>

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_connect_cb: TCP connection established to server\n"));
  /* Enter MQTT connect state */
  client->conn_state = MQTT_CONNECTING;
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	2202      	movs	r2, #2
 800979c:	729a      	strb	r2, [r3, #10]

  /* Start cyclic timer */
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, client);
 800979e:	697a      	ldr	r2, [r7, #20]
 80097a0:	490d      	ldr	r1, [pc, #52]	; (80097d8 <mqtt_tcp_connect_cb+0x80>)
 80097a2:	f241 3088 	movw	r0, #5000	; 0x1388
 80097a6:	f008 fba9 	bl	8011efc <sys_timeout>
  client->cyclic_tick = 0;
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	2200      	movs	r2, #0
 80097ae:	801a      	strh	r2, [r3, #0]

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	68db      	ldr	r3, [r3, #12]
 80097ba:	4619      	mov	r1, r3
 80097bc:	4610      	mov	r0, r2
 80097be:	f7fe fffb 	bl	80087b8 <mqtt_output_send>

  return ERR_OK;
 80097c2:	2300      	movs	r3, #0
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3718      	adds	r7, #24
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	080095b5 	.word	0x080095b5
 80097d0:	08009671 	.word	0x08009671
 80097d4:	0800972d 	.word	0x0800972d
 80097d8:	08008ebd 	.word	0x08008ebd

080097dc <mqtt_sub_unsub>:
 * @param sub 1 for subscribe, 0 for unsubscribe
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_sub_unsub(mqtt_client_t *client, const char *topic, u8_t qos, mqtt_request_cb_t cb, void *arg, u8_t sub)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b08c      	sub	sp, #48	; 0x30
 80097e0:	af02      	add	r7, sp, #8
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	60b9      	str	r1, [r7, #8]
 80097e6:	603b      	str	r3, [r7, #0]
 80097e8:	4613      	mov	r3, r2
 80097ea:	71fb      	strb	r3, [r7, #7]
  u16_t remaining_length;
  u16_t pkt_id;
  struct mqtt_request_t *r;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_sub_unsub: client != NULL", client);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d106      	bne.n	8009800 <mqtt_sub_unsub+0x24>
 80097f2:	4b5e      	ldr	r3, [pc, #376]	; (800996c <mqtt_sub_unsub+0x190>)
 80097f4:	f240 429f 	movw	r2, #1183	; 0x49f
 80097f8:	495d      	ldr	r1, [pc, #372]	; (8009970 <mqtt_sub_unsub+0x194>)
 80097fa:	485e      	ldr	r0, [pc, #376]	; (8009974 <mqtt_sub_unsub+0x198>)
 80097fc:	f00b fb52 	bl	8014ea4 <iprintf>
  LWIP_ASSERT("mqtt_sub_unsub: topic != NULL", topic);
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d106      	bne.n	8009814 <mqtt_sub_unsub+0x38>
 8009806:	4b59      	ldr	r3, [pc, #356]	; (800996c <mqtt_sub_unsub+0x190>)
 8009808:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
 800980c:	495a      	ldr	r1, [pc, #360]	; (8009978 <mqtt_sub_unsub+0x19c>)
 800980e:	4859      	ldr	r0, [pc, #356]	; (8009974 <mqtt_sub_unsub+0x198>)
 8009810:	f00b fb48 	bl	8014ea4 <iprintf>

  topic_strlen = strlen(topic);
 8009814:	68b8      	ldr	r0, [r7, #8]
 8009816:	f7f6 fd1d 	bl	8000254 <strlen>
 800981a:	6278      	str	r0, [r7, #36]	; 0x24
  LWIP_ERROR("mqtt_sub_unsub: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 800981c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8009822:	4293      	cmp	r3, r2
 8009824:	d909      	bls.n	800983a <mqtt_sub_unsub+0x5e>
 8009826:	4b51      	ldr	r3, [pc, #324]	; (800996c <mqtt_sub_unsub+0x190>)
 8009828:	f240 42a3 	movw	r2, #1187	; 0x4a3
 800982c:	4953      	ldr	r1, [pc, #332]	; (800997c <mqtt_sub_unsub+0x1a0>)
 800982e:	4851      	ldr	r0, [pc, #324]	; (8009974 <mqtt_sub_unsub+0x198>)
 8009830:	f00b fb38 	bl	8014ea4 <iprintf>
 8009834:	f06f 030f 	mvn.w	r3, #15
 8009838:	e093      	b.n	8009962 <mqtt_sub_unsub+0x186>
  topic_len = (u16_t)topic_strlen;
 800983a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983c:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Topic string, pkt_id, qos for subscribe */
  total_len =  topic_len + 2 + 2 + (sub != 0);
 800983e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009840:	3304      	adds	r3, #4
 8009842:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8009846:	2a00      	cmp	r2, #0
 8009848:	bf14      	ite	ne
 800984a:	2201      	movne	r2, #1
 800984c:	2200      	moveq	r2, #0
 800984e:	b2d2      	uxtb	r2, r2
 8009850:	4413      	add	r3, r2
 8009852:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("mqtt_sub_unsub: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 8009854:	69fb      	ldr	r3, [r7, #28]
 8009856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800985a:	d309      	bcc.n	8009870 <mqtt_sub_unsub+0x94>
 800985c:	4b43      	ldr	r3, [pc, #268]	; (800996c <mqtt_sub_unsub+0x190>)
 800985e:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8009862:	4947      	ldr	r1, [pc, #284]	; (8009980 <mqtt_sub_unsub+0x1a4>)
 8009864:	4843      	ldr	r0, [pc, #268]	; (8009974 <mqtt_sub_unsub+0x198>)
 8009866:	f00b fb1d 	bl	8014ea4 <iprintf>
 800986a:	f06f 030f 	mvn.w	r3, #15
 800986e:	e078      	b.n	8009962 <mqtt_sub_unsub+0x186>
  remaining_length = (u16_t)total_len;
 8009870:	69fb      	ldr	r3, [r7, #28]
 8009872:	837b      	strh	r3, [r7, #26]

  LWIP_ASSERT("mqtt_sub_unsub: qos < 3", qos < 3);
 8009874:	79fb      	ldrb	r3, [r7, #7]
 8009876:	2b02      	cmp	r3, #2
 8009878:	d906      	bls.n	8009888 <mqtt_sub_unsub+0xac>
 800987a:	4b3c      	ldr	r3, [pc, #240]	; (800996c <mqtt_sub_unsub+0x190>)
 800987c:	f240 42aa 	movw	r2, #1194	; 0x4aa
 8009880:	4940      	ldr	r1, [pc, #256]	; (8009984 <mqtt_sub_unsub+0x1a8>)
 8009882:	483c      	ldr	r0, [pc, #240]	; (8009974 <mqtt_sub_unsub+0x198>)
 8009884:	f00b fb0e 	bl	8014ea4 <iprintf>
  if (client->conn_state == TCP_DISCONNECTED) {
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	7a9b      	ldrb	r3, [r3, #10]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d102      	bne.n	8009896 <mqtt_sub_unsub+0xba>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_sub_unsub: Can not (un)subscribe in disconnected state\n"));
    return ERR_CONN;
 8009890:	f06f 030a 	mvn.w	r3, #10
 8009894:	e065      	b.n	8009962 <mqtt_sub_unsub+0x186>
  }

  pkt_id = msg_generate_packet_id(client);
 8009896:	68f8      	ldr	r0, [r7, #12]
 8009898:	f7fe fefa 	bl	8008690 <msg_generate_packet_id>
 800989c:	4603      	mov	r3, r0
 800989e:	833b      	strh	r3, [r7, #24]
  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f103 001c 	add.w	r0, r3, #28
 80098a6:	8b3a      	ldrh	r2, [r7, #24]
 80098a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098aa:	9300      	str	r3, [sp, #0]
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	2104      	movs	r1, #4
 80098b0:	f7ff f836 	bl	8008920 <mqtt_create_request>
 80098b4:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d102      	bne.n	80098c2 <mqtt_sub_unsub+0xe6>
    return ERR_MEM;
 80098bc:	f04f 33ff 	mov.w	r3, #4294967295
 80098c0:	e04f      	b.n	8009962 <mqtt_sub_unsub+0x186>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	33ec      	adds	r3, #236	; 0xec
 80098c6:	8b7a      	ldrh	r2, [r7, #26]
 80098c8:	4611      	mov	r1, r2
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7ff fa64 	bl	8008d98 <mqtt_output_check_space>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d105      	bne.n	80098e2 <mqtt_sub_unsub+0x106>
    mqtt_delete_request(r);
 80098d6:	6978      	ldr	r0, [r7, #20]
 80098d8:	f7ff f8b4 	bl	8008a44 <mqtt_delete_request>
    return ERR_MEM;
 80098dc:	f04f 33ff 	mov.w	r3, #4294967295
 80098e0:	e03f      	b.n	8009962 <mqtt_sub_unsub+0x186>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_sub_unsub: Client (un)subscribe to topic \"%s\", id: %d\n", topic, pkt_id));

  mqtt_output_append_fixed_header(&client->output, sub ? MQTT_MSG_TYPE_SUBSCRIBE : MQTT_MSG_TYPE_UNSUBSCRIBE, 0, 1, 0, remaining_length);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 80098e8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d001      	beq.n	80098f4 <mqtt_sub_unsub+0x118>
 80098f0:	2108      	movs	r1, #8
 80098f2:	e000      	b.n	80098f6 <mqtt_sub_unsub+0x11a>
 80098f4:	210a      	movs	r1, #10
 80098f6:	8b7b      	ldrh	r3, [r7, #26]
 80098f8:	9301      	str	r3, [sp, #4]
 80098fa:	2300      	movs	r3, #0
 80098fc:	9300      	str	r3, [sp, #0]
 80098fe:	2301      	movs	r3, #1
 8009900:	2200      	movs	r2, #0
 8009902:	f7ff f9fe 	bl	8008d02 <mqtt_output_append_fixed_header>
  /* Packet id */
  mqtt_output_append_u16(&client->output, pkt_id);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	33ec      	adds	r3, #236	; 0xec
 800990a:	8b3a      	ldrh	r2, [r7, #24]
 800990c:	4611      	mov	r1, r2
 800990e:	4618      	mov	r0, r3
 8009910:	f7ff f9b3 	bl	8008c7a <mqtt_output_append_u16>
  /* Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	33ec      	adds	r3, #236	; 0xec
 8009918:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800991a:	68b9      	ldr	r1, [r7, #8]
 800991c:	4618      	mov	r0, r3
 800991e:	f7ff f9c4 	bl	8008caa <mqtt_output_append_string>
  /* QoS */
  if (sub != 0) {
 8009922:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8009926:	2b00      	cmp	r3, #0
 8009928:	d00b      	beq.n	8009942 <mqtt_sub_unsub+0x166>
    mqtt_output_append_u8(&client->output, LWIP_MIN(qos, 2));
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8009930:	79fb      	ldrb	r3, [r7, #7]
 8009932:	2b02      	cmp	r3, #2
 8009934:	bf28      	it	cs
 8009936:	2302      	movcs	r3, #2
 8009938:	b2db      	uxtb	r3, r3
 800993a:	4619      	mov	r1, r3
 800993c:	4610      	mov	r0, r2
 800993e:	f7ff f98d 	bl	8008c5c <mqtt_output_append_u8>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	3318      	adds	r3, #24
 8009946:	6979      	ldr	r1, [r7, #20]
 8009948:	4618      	mov	r0, r3
 800994a:	f7ff f82f 	bl	80089ac <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	68db      	ldr	r3, [r3, #12]
 8009958:	4619      	mov	r1, r3
 800995a:	4610      	mov	r0, r2
 800995c:	f7fe ff2c 	bl	80087b8 <mqtt_output_send>
  return ERR_OK;
 8009960:	2300      	movs	r3, #0
}
 8009962:	4618      	mov	r0, r3
 8009964:	3728      	adds	r7, #40	; 0x28
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	0801634c 	.word	0x0801634c
 8009970:	080166fc 	.word	0x080166fc
 8009974:	080163c4 	.word	0x080163c4
 8009978:	0801671c 	.word	0x0801671c
 800997c:	0801673c 	.word	0x0801673c
 8009980:	08016764 	.word	0x08016764
 8009984:	0801678c 	.word	0x0801678c

08009988 <mqtt_set_inpub_callback>:
 * @param arg User supplied argument to both callbacks
 */
void
mqtt_set_inpub_callback(mqtt_client_t *client, mqtt_incoming_publish_cb_t pub_cb,
                        mqtt_incoming_data_cb_t data_cb, void *arg)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b084      	sub	sp, #16
 800998c:	af00      	add	r7, sp, #0
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	60b9      	str	r1, [r7, #8]
 8009992:	607a      	str	r2, [r7, #4]
 8009994:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_set_inpub_callback: client != NULL", client != NULL);
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d106      	bne.n	80099aa <mqtt_set_inpub_callback+0x22>
 800999c:	4b09      	ldr	r3, [pc, #36]	; (80099c4 <mqtt_set_inpub_callback+0x3c>)
 800999e:	f240 42da 	movw	r2, #1242	; 0x4da
 80099a2:	4909      	ldr	r1, [pc, #36]	; (80099c8 <mqtt_set_inpub_callback+0x40>)
 80099a4:	4809      	ldr	r0, [pc, #36]	; (80099cc <mqtt_set_inpub_callback+0x44>)
 80099a6:	f00b fa7d 	bl	8014ea4 <iprintf>
  client->data_cb = data_cb;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	661a      	str	r2, [r3, #96]	; 0x60
  client->pub_cb = pub_cb;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	68ba      	ldr	r2, [r7, #8]
 80099b4:	665a      	str	r2, [r3, #100]	; 0x64
  client->inpub_arg = arg;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	683a      	ldr	r2, [r7, #0]
 80099ba:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80099bc:	bf00      	nop
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	0801634c 	.word	0x0801634c
 80099c8:	080167a4 	.word	0x080167a4
 80099cc:	080163c4 	.word	0x080163c4

080099d0 <mqtt_client_new>:
 * Create a new MQTT client instance
 * @return Pointer to instance on success, NULL otherwise
 */
mqtt_client_t *
mqtt_client_new(void)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
  return (mqtt_client_t *)mem_calloc(1, sizeof(mqtt_client_t));
 80099d4:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80099d8:	2001      	movs	r0, #1
 80099da:	f000 feb9 	bl	800a750 <mem_calloc>
 80099de:	4603      	mov	r3, r0
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b08c      	sub	sp, #48	; 0x30
 80099e8:	af02      	add	r7, sp, #8
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	60b9      	str	r1, [r7, #8]
 80099ee:	603b      	str	r3, [r7, #0]
 80099f0:	4613      	mov	r3, r2
 80099f2:	80fb      	strh	r3, [r7, #6]
  err_t err;
  size_t len;
  u16_t client_id_length;
  /* Length is the sum of 2+"MQTT", protocol level, flags and keep alive */
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 80099f4:	230a      	movs	r3, #10
 80099f6:	84bb      	strh	r3, [r7, #36]	; 0x24
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 80099f8:	2300      	movs	r3, #0
 80099fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099fe:	2300      	movs	r3, #0
 8009a00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009a04:	2300      	movs	r3, #0
 8009a06:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  u16_t client_user_len = 0, client_pass_len = 0;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	83fb      	strh	r3, [r7, #30]
 8009a0e:	2300      	movs	r3, #0
 8009a10:	83bb      	strh	r3, [r7, #28]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d106      	bne.n	8009a26 <mqtt_client_connect+0x42>
 8009a18:	4bac      	ldr	r3, [pc, #688]	; (8009ccc <mqtt_client_connect+0x2e8>)
 8009a1a:	f240 520f 	movw	r2, #1295	; 0x50f
 8009a1e:	49ac      	ldr	r1, [pc, #688]	; (8009cd0 <mqtt_client_connect+0x2ec>)
 8009a20:	48ac      	ldr	r0, [pc, #688]	; (8009cd4 <mqtt_client_connect+0x2f0>)
 8009a22:	f00b fa3f 	bl	8014ea4 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d106      	bne.n	8009a3a <mqtt_client_connect+0x56>
 8009a2c:	4ba7      	ldr	r3, [pc, #668]	; (8009ccc <mqtt_client_connect+0x2e8>)
 8009a2e:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 8009a32:	49a9      	ldr	r1, [pc, #676]	; (8009cd8 <mqtt_client_connect+0x2f4>)
 8009a34:	48a7      	ldr	r0, [pc, #668]	; (8009cd4 <mqtt_client_connect+0x2f0>)
 8009a36:	f00b fa35 	bl	8014ea4 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 8009a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d106      	bne.n	8009a4e <mqtt_client_connect+0x6a>
 8009a40:	4ba2      	ldr	r3, [pc, #648]	; (8009ccc <mqtt_client_connect+0x2e8>)
 8009a42:	f240 5211 	movw	r2, #1297	; 0x511
 8009a46:	49a5      	ldr	r1, [pc, #660]	; (8009cdc <mqtt_client_connect+0x2f8>)
 8009a48:	48a2      	ldr	r0, [pc, #648]	; (8009cd4 <mqtt_client_connect+0x2f0>)
 8009a4a:	f00b fa2b 	bl	8014ea4 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 8009a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d106      	bne.n	8009a64 <mqtt_client_connect+0x80>
 8009a56:	4b9d      	ldr	r3, [pc, #628]	; (8009ccc <mqtt_client_connect+0x2e8>)
 8009a58:	f240 5212 	movw	r2, #1298	; 0x512
 8009a5c:	49a0      	ldr	r1, [pc, #640]	; (8009ce0 <mqtt_client_connect+0x2fc>)
 8009a5e:	489d      	ldr	r0, [pc, #628]	; (8009cd4 <mqtt_client_connect+0x2f0>)
 8009a60:	f00b fa20 	bl	8014ea4 <iprintf>

  if (client->conn_state != TCP_DISCONNECTED) {
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	7a9b      	ldrb	r3, [r3, #10]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d002      	beq.n	8009a72 <mqtt_client_connect+0x8e>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_client_connect: Already connected\n"));
    return ERR_ISCONN;
 8009a6c:	f06f 0309 	mvn.w	r3, #9
 8009a70:	e221      	b.n	8009eb6 <mqtt_client_connect+0x4d2>
  }

  /* Wipe clean */
  memset(client, 0, sizeof(mqtt_client_t));
 8009a72:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8009a76:	2100      	movs	r1, #0
 8009a78:	68f8      	ldr	r0, [r7, #12]
 8009a7a:	f00b fa0b 	bl	8014e94 <memset>
  client->connect_arg = arg;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a82:	611a      	str	r2, [r3, #16]
  client->connect_cb = cb;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	683a      	ldr	r2, [r7, #0]
 8009a88:	615a      	str	r2, [r3, #20]
  client->keep_alive = client_info->keep_alive;
 8009a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a8c:	899a      	ldrh	r2, [r3, #12]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	805a      	strh	r2, [r3, #2]
  mqtt_init_requests(client->req_list, LWIP_ARRAYSIZE(client->req_list));
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	331c      	adds	r3, #28
 8009a96:	2104      	movs	r1, #4
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f7ff f8b1 	bl	8008c00 <mqtt_init_requests>

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 8009a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aa0:	691b      	ldr	r3, [r3, #16]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d073      	beq.n	8009b8e <mqtt_client_connect+0x1aa>
 8009aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aa8:	695b      	ldr	r3, [r3, #20]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d06f      	beq.n	8009b8e <mqtt_client_connect+0x1aa>
    flags |= MQTT_CONNECT_FLAG_WILL;
 8009aae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009ab2:	f043 0304 	orr.w	r3, r3, #4
 8009ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    flags |= (client_info->will_qos & 3) << 3;
 8009aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009abc:	7e1b      	ldrb	r3, [r3, #24]
 8009abe:	00db      	lsls	r3, r3, #3
 8009ac0:	b25b      	sxtb	r3, r3
 8009ac2:	f003 0318 	and.w	r3, r3, #24
 8009ac6:	b25a      	sxtb	r2, r3
 8009ac8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8009acc:	4313      	orrs	r3, r2
 8009ace:	b25b      	sxtb	r3, r3
 8009ad0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (client_info->will_retain) {
 8009ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ad6:	7e5b      	ldrb	r3, [r3, #25]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d005      	beq.n	8009ae8 <mqtt_client_connect+0x104>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 8009adc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009ae0:	f043 0320 	orr.w	r3, r3, #32
 8009ae4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }
    len = strlen(client_info->will_topic);
 8009ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aea:	691b      	ldr	r3, [r3, #16]
 8009aec:	4618      	mov	r0, r3
 8009aee:	f7f6 fbb1 	bl	8000254 <strlen>
 8009af2:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 8009af4:	69bb      	ldr	r3, [r7, #24]
 8009af6:	2bff      	cmp	r3, #255	; 0xff
 8009af8:	d909      	bls.n	8009b0e <mqtt_client_connect+0x12a>
 8009afa:	4b74      	ldr	r3, [pc, #464]	; (8009ccc <mqtt_client_connect+0x2e8>)
 8009afc:	f44f 62a5 	mov.w	r2, #1320	; 0x528
 8009b00:	4978      	ldr	r1, [pc, #480]	; (8009ce4 <mqtt_client_connect+0x300>)
 8009b02:	4874      	ldr	r0, [pc, #464]	; (8009cd4 <mqtt_client_connect+0x2f0>)
 8009b04:	f00b f9ce 	bl	8014ea4 <iprintf>
 8009b08:	f06f 0305 	mvn.w	r3, #5
 8009b0c:	e1d3      	b.n	8009eb6 <mqtt_client_connect+0x4d2>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d109      	bne.n	8009b28 <mqtt_client_connect+0x144>
 8009b14:	4b6d      	ldr	r3, [pc, #436]	; (8009ccc <mqtt_client_connect+0x2e8>)
 8009b16:	f240 5229 	movw	r2, #1321	; 0x529
 8009b1a:	4973      	ldr	r1, [pc, #460]	; (8009ce8 <mqtt_client_connect+0x304>)
 8009b1c:	486d      	ldr	r0, [pc, #436]	; (8009cd4 <mqtt_client_connect+0x2f0>)
 8009b1e:	f00b f9c1 	bl	8014ea4 <iprintf>
 8009b22:	f06f 0305 	mvn.w	r3, #5
 8009b26:	e1c6      	b.n	8009eb6 <mqtt_client_connect+0x4d2>
    will_topic_len = (u8_t)len;
 8009b28:	69bb      	ldr	r3, [r7, #24]
 8009b2a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    len = strlen(client_info->will_msg);
 8009b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b30:	695b      	ldr	r3, [r3, #20]
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7f6 fb8e 	bl	8000254 <strlen>
 8009b38:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 8009b3a:	69bb      	ldr	r3, [r7, #24]
 8009b3c:	2bff      	cmp	r3, #255	; 0xff
 8009b3e:	d909      	bls.n	8009b54 <mqtt_client_connect+0x170>
 8009b40:	4b62      	ldr	r3, [pc, #392]	; (8009ccc <mqtt_client_connect+0x2e8>)
 8009b42:	f240 522c 	movw	r2, #1324	; 0x52c
 8009b46:	4969      	ldr	r1, [pc, #420]	; (8009cec <mqtt_client_connect+0x308>)
 8009b48:	4862      	ldr	r0, [pc, #392]	; (8009cd4 <mqtt_client_connect+0x2f0>)
 8009b4a:	f00b f9ab 	bl	8014ea4 <iprintf>
 8009b4e:	f06f 0305 	mvn.w	r3, #5
 8009b52:	e1b0      	b.n	8009eb6 <mqtt_client_connect+0x4d2>
    will_msg_len = (u8_t)len;
 8009b54:	69bb      	ldr	r3, [r7, #24]
 8009b56:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 8009b5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b5c:	1c9a      	adds	r2, r3, #2
 8009b5e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009b62:	4413      	add	r3, r2
 8009b64:	1c9a      	adds	r2, r3, #2
 8009b66:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009b6a:	4413      	add	r3, r2
 8009b6c:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8009b6e:	69bb      	ldr	r3, [r7, #24]
 8009b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b74:	d309      	bcc.n	8009b8a <mqtt_client_connect+0x1a6>
 8009b76:	4b55      	ldr	r3, [pc, #340]	; (8009ccc <mqtt_client_connect+0x2e8>)
 8009b78:	f240 522f 	movw	r2, #1327	; 0x52f
 8009b7c:	495c      	ldr	r1, [pc, #368]	; (8009cf0 <mqtt_client_connect+0x30c>)
 8009b7e:	4855      	ldr	r0, [pc, #340]	; (8009cd4 <mqtt_client_connect+0x2f0>)
 8009b80:	f00b f990 	bl	8014ea4 <iprintf>
 8009b84:	f06f 0305 	mvn.w	r3, #5
 8009b88:	e195      	b.n	8009eb6 <mqtt_client_connect+0x4d2>
    remaining_length = (u16_t)len;
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_user != NULL) {
 8009b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d03d      	beq.n	8009c12 <mqtt_client_connect+0x22e>
    flags |= MQTT_CONNECT_FLAG_USERNAME;
 8009b96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009b9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_user);
 8009ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f7f6 fb54 	bl	8000254 <strlen>
 8009bac:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length overflow", len <= 0xFFFF, return ERR_VAL);
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bb4:	d309      	bcc.n	8009bca <mqtt_client_connect+0x1e6>
 8009bb6:	4b45      	ldr	r3, [pc, #276]	; (8009ccc <mqtt_client_connect+0x2e8>)
 8009bb8:	f240 5235 	movw	r2, #1333	; 0x535
 8009bbc:	494d      	ldr	r1, [pc, #308]	; (8009cf4 <mqtt_client_connect+0x310>)
 8009bbe:	4845      	ldr	r0, [pc, #276]	; (8009cd4 <mqtt_client_connect+0x2f0>)
 8009bc0:	f00b f970 	bl	8014ea4 <iprintf>
 8009bc4:	f06f 0305 	mvn.w	r3, #5
 8009bc8:	e175      	b.n	8009eb6 <mqtt_client_connect+0x4d2>
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length must be > 0", len > 0, return ERR_VAL);
 8009bca:	69bb      	ldr	r3, [r7, #24]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d109      	bne.n	8009be4 <mqtt_client_connect+0x200>
 8009bd0:	4b3e      	ldr	r3, [pc, #248]	; (8009ccc <mqtt_client_connect+0x2e8>)
 8009bd2:	f240 5236 	movw	r2, #1334	; 0x536
 8009bd6:	4948      	ldr	r1, [pc, #288]	; (8009cf8 <mqtt_client_connect+0x314>)
 8009bd8:	483e      	ldr	r0, [pc, #248]	; (8009cd4 <mqtt_client_connect+0x2f0>)
 8009bda:	f00b f963 	bl	8014ea4 <iprintf>
 8009bde:	f06f 0305 	mvn.w	r3, #5
 8009be2:	e168      	b.n	8009eb6 <mqtt_client_connect+0x4d2>
    client_user_len = (u16_t)len;
 8009be4:	69bb      	ldr	r3, [r7, #24]
 8009be6:	83fb      	strh	r3, [r7, #30]
    len = remaining_length + 2 + client_user_len;
 8009be8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009bea:	1c9a      	adds	r2, r3, #2
 8009bec:	8bfb      	ldrh	r3, [r7, #30]
 8009bee:	4413      	add	r3, r2
 8009bf0:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bf8:	d309      	bcc.n	8009c0e <mqtt_client_connect+0x22a>
 8009bfa:	4b34      	ldr	r3, [pc, #208]	; (8009ccc <mqtt_client_connect+0x2e8>)
 8009bfc:	f240 5239 	movw	r2, #1337	; 0x539
 8009c00:	493b      	ldr	r1, [pc, #236]	; (8009cf0 <mqtt_client_connect+0x30c>)
 8009c02:	4834      	ldr	r0, [pc, #208]	; (8009cd4 <mqtt_client_connect+0x2f0>)
 8009c04:	f00b f94e 	bl	8014ea4 <iprintf>
 8009c08:	f06f 0305 	mvn.w	r3, #5
 8009c0c:	e153      	b.n	8009eb6 <mqtt_client_connect+0x4d2>
    remaining_length = (u16_t)len;
 8009c0e:	69bb      	ldr	r3, [r7, #24]
 8009c10:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_pass != NULL) {
 8009c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d03d      	beq.n	8009c96 <mqtt_client_connect+0x2b2>
    flags |= MQTT_CONNECT_FLAG_PASSWORD;
 8009c1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_pass);
 8009c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c28:	689b      	ldr	r3, [r3, #8]
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f7f6 fb12 	bl	8000254 <strlen>
 8009c30:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length overflow", len <= 0xFFFF, return ERR_VAL);
 8009c32:	69bb      	ldr	r3, [r7, #24]
 8009c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c38:	d309      	bcc.n	8009c4e <mqtt_client_connect+0x26a>
 8009c3a:	4b24      	ldr	r3, [pc, #144]	; (8009ccc <mqtt_client_connect+0x2e8>)
 8009c3c:	f240 523f 	movw	r2, #1343	; 0x53f
 8009c40:	492e      	ldr	r1, [pc, #184]	; (8009cfc <mqtt_client_connect+0x318>)
 8009c42:	4824      	ldr	r0, [pc, #144]	; (8009cd4 <mqtt_client_connect+0x2f0>)
 8009c44:	f00b f92e 	bl	8014ea4 <iprintf>
 8009c48:	f06f 0305 	mvn.w	r3, #5
 8009c4c:	e133      	b.n	8009eb6 <mqtt_client_connect+0x4d2>
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length must be > 0", len > 0, return ERR_VAL);
 8009c4e:	69bb      	ldr	r3, [r7, #24]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d109      	bne.n	8009c68 <mqtt_client_connect+0x284>
 8009c54:	4b1d      	ldr	r3, [pc, #116]	; (8009ccc <mqtt_client_connect+0x2e8>)
 8009c56:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 8009c5a:	4929      	ldr	r1, [pc, #164]	; (8009d00 <mqtt_client_connect+0x31c>)
 8009c5c:	481d      	ldr	r0, [pc, #116]	; (8009cd4 <mqtt_client_connect+0x2f0>)
 8009c5e:	f00b f921 	bl	8014ea4 <iprintf>
 8009c62:	f06f 0305 	mvn.w	r3, #5
 8009c66:	e126      	b.n	8009eb6 <mqtt_client_connect+0x4d2>
    client_pass_len = (u16_t)len;
 8009c68:	69bb      	ldr	r3, [r7, #24]
 8009c6a:	83bb      	strh	r3, [r7, #28]
    len = remaining_length + 2 + client_pass_len;
 8009c6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c6e:	1c9a      	adds	r2, r3, #2
 8009c70:	8bbb      	ldrh	r3, [r7, #28]
 8009c72:	4413      	add	r3, r2
 8009c74:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8009c76:	69bb      	ldr	r3, [r7, #24]
 8009c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c7c:	d309      	bcc.n	8009c92 <mqtt_client_connect+0x2ae>
 8009c7e:	4b13      	ldr	r3, [pc, #76]	; (8009ccc <mqtt_client_connect+0x2e8>)
 8009c80:	f240 5243 	movw	r2, #1347	; 0x543
 8009c84:	491a      	ldr	r1, [pc, #104]	; (8009cf0 <mqtt_client_connect+0x30c>)
 8009c86:	4813      	ldr	r0, [pc, #76]	; (8009cd4 <mqtt_client_connect+0x2f0>)
 8009c88:	f00b f90c 	bl	8014ea4 <iprintf>
 8009c8c:	f06f 0305 	mvn.w	r3, #5
 8009c90:	e111      	b.n	8009eb6 <mqtt_client_connect+0x4d2>
    remaining_length = (u16_t)len;
 8009c92:	69bb      	ldr	r3, [r7, #24]
 8009c94:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Don't complicate things, always connect using clean session */
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 8009c96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c9a:	f043 0302 	orr.w	r3, r3, #2
 8009c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  len = strlen(client_info->client_id);
 8009ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f7f6 fad4 	bl	8000254 <strlen>
 8009cac:	61b8      	str	r0, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 8009cae:	69bb      	ldr	r3, [r7, #24]
 8009cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cb4:	d328      	bcc.n	8009d08 <mqtt_client_connect+0x324>
 8009cb6:	4b05      	ldr	r3, [pc, #20]	; (8009ccc <mqtt_client_connect+0x2e8>)
 8009cb8:	f240 524b 	movw	r2, #1355	; 0x54b
 8009cbc:	4911      	ldr	r1, [pc, #68]	; (8009d04 <mqtt_client_connect+0x320>)
 8009cbe:	4805      	ldr	r0, [pc, #20]	; (8009cd4 <mqtt_client_connect+0x2f0>)
 8009cc0:	f00b f8f0 	bl	8014ea4 <iprintf>
 8009cc4:	f06f 0305 	mvn.w	r3, #5
 8009cc8:	e0f5      	b.n	8009eb6 <mqtt_client_connect+0x4d2>
 8009cca:	bf00      	nop
 8009ccc:	0801634c 	.word	0x0801634c
 8009cd0:	080167cc 	.word	0x080167cc
 8009cd4:	080163c4 	.word	0x080163c4
 8009cd8:	080167f0 	.word	0x080167f0
 8009cdc:	08016818 	.word	0x08016818
 8009ce0:	08016844 	.word	0x08016844
 8009ce4:	08016878 	.word	0x08016878
 8009ce8:	080168b8 	.word	0x080168b8
 8009cec:	080168f8 	.word	0x080168f8
 8009cf0:	08016934 	.word	0x08016934
 8009cf4:	08016964 	.word	0x08016964
 8009cf8:	080169a4 	.word	0x080169a4
 8009cfc:	080169e8 	.word	0x080169e8
 8009d00:	08016a28 	.word	0x08016a28
 8009d04:	08016a6c 	.word	0x08016a6c
  client_id_length = (u16_t)len;
 8009d08:	69bb      	ldr	r3, [r7, #24]
 8009d0a:	82fb      	strh	r3, [r7, #22]
  len = remaining_length + 2 + client_id_length;
 8009d0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d0e:	1c9a      	adds	r2, r3, #2
 8009d10:	8afb      	ldrh	r3, [r7, #22]
 8009d12:	4413      	add	r3, r2
 8009d14:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8009d16:	69bb      	ldr	r3, [r7, #24]
 8009d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d1c:	d309      	bcc.n	8009d32 <mqtt_client_connect+0x34e>
 8009d1e:	4b68      	ldr	r3, [pc, #416]	; (8009ec0 <mqtt_client_connect+0x4dc>)
 8009d20:	f240 524e 	movw	r2, #1358	; 0x54e
 8009d24:	4967      	ldr	r1, [pc, #412]	; (8009ec4 <mqtt_client_connect+0x4e0>)
 8009d26:	4868      	ldr	r0, [pc, #416]	; (8009ec8 <mqtt_client_connect+0x4e4>)
 8009d28:	f00b f8bc 	bl	8014ea4 <iprintf>
 8009d2c:	f06f 0305 	mvn.w	r3, #5
 8009d30:	e0c1      	b.n	8009eb6 <mqtt_client_connect+0x4d2>
  remaining_length = (u16_t)len;
 8009d32:	69bb      	ldr	r3, [r7, #24]
 8009d34:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	33ec      	adds	r3, #236	; 0xec
 8009d3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009d3c:	4611      	mov	r1, r2
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7ff f82a 	bl	8008d98 <mqtt_output_check_space>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d102      	bne.n	8009d50 <mqtt_client_connect+0x36c>
    return ERR_MEM;
 8009d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8009d4e:	e0b2      	b.n	8009eb6 <mqtt_client_connect+0x4d2>
  if (client_info->tls_config) {
    client->conn = altcp_tls_new(client_info->tls_config, IP_GET_TYPE(ip_addr));
  } else
#endif
  {
    client->conn = altcp_tcp_new_ip_type(IP_GET_TYPE(ip_addr));
 8009d50:	2000      	movs	r0, #0
 8009d52:	f003 fb5d 	bl	800d410 <tcp_new_ip_type>
 8009d56:	4602      	mov	r2, r0
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	60da      	str	r2, [r3, #12]
  }
  if (client->conn == NULL) {
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d102      	bne.n	8009d6a <mqtt_client_connect+0x386>
    return ERR_MEM;
 8009d64:	f04f 33ff 	mov.w	r3, #4294967295
 8009d68:	e0a5      	b.n	8009eb6 <mqtt_client_connect+0x4d2>
  }

  /* Set arg pointer for callbacks */
  altcp_arg(client->conn, client);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	68db      	ldr	r3, [r3, #12]
 8009d6e:	68f9      	ldr	r1, [r7, #12]
 8009d70:	4618      	mov	r0, r3
 8009d72:	f003 fb5b 	bl	800d42c <tcp_arg>
  /* Any local address, pick random local port number */
  err = altcp_bind(client->conn, IP_ADDR_ANY, 0);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	68db      	ldr	r3, [r3, #12]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	4953      	ldr	r1, [pc, #332]	; (8009ecc <mqtt_client_connect+0x4e8>)
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f002 fa84 	bl	800c28c <tcp_bind>
 8009d84:	4603      	mov	r3, r0
 8009d86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 8009d8a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	f040 8084 	bne.w	8009e9c <mqtt_client_connect+0x4b8>
    goto tcp_fail;
  }
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Connecting to host: %s at port:%"U16_F"\n", ipaddr_ntoa(ip_addr), port));

  /* Connect to server */
  err = altcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	68d8      	ldr	r0, [r3, #12]
 8009d98:	88fa      	ldrh	r2, [r7, #6]
 8009d9a:	4b4d      	ldr	r3, [pc, #308]	; (8009ed0 <mqtt_client_connect+0x4ec>)
 8009d9c:	68b9      	ldr	r1, [r7, #8]
 8009d9e:	f002 fbfd 	bl	800c59c <tcp_connect>
 8009da2:	4603      	mov	r3, r0
 8009da4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 8009da8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d177      	bne.n	8009ea0 <mqtt_client_connect+0x4bc>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Error connecting to remote ip/port, %d\n", err));
    goto tcp_fail;
  }
  /* Set error callback */
  altcp_err(client->conn, mqtt_tcp_err_cb);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	68db      	ldr	r3, [r3, #12]
 8009db4:	4947      	ldr	r1, [pc, #284]	; (8009ed4 <mqtt_client_connect+0x4f0>)
 8009db6:	4618      	mov	r0, r3
 8009db8:	f003 fb8e 	bl	800d4d8 <tcp_err>
  client->conn_state = TCP_CONNECTING;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	729a      	strb	r2, [r3, #10]

  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8009dc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009dca:	9301      	str	r3, [sp, #4]
 8009dcc:	2300      	movs	r3, #0
 8009dce:	9300      	str	r3, [sp, #0]
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	2101      	movs	r1, #1
 8009dd6:	f7fe ff94 	bl	8008d02 <mqtt_output_append_fixed_header>
  /* Append Protocol string */
  mqtt_output_append_string(&client->output, "MQTT", 4);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	33ec      	adds	r3, #236	; 0xec
 8009dde:	2204      	movs	r2, #4
 8009de0:	493d      	ldr	r1, [pc, #244]	; (8009ed8 <mqtt_client_connect+0x4f4>)
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7fe ff61 	bl	8008caa <mqtt_output_append_string>
  /* Append Protocol level */
  mqtt_output_append_u8(&client->output, 4);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	33ec      	adds	r3, #236	; 0xec
 8009dec:	2104      	movs	r1, #4
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7fe ff34 	bl	8008c5c <mqtt_output_append_u8>
  /* Append connect flags */
  mqtt_output_append_u8(&client->output, flags);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	33ec      	adds	r3, #236	; 0xec
 8009df8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8009dfc:	4611      	mov	r1, r2
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f7fe ff2c 	bl	8008c5c <mqtt_output_append_u8>
  /* Append keep-alive */
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8009e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e0c:	899b      	ldrh	r3, [r3, #12]
 8009e0e:	4619      	mov	r1, r3
 8009e10:	4610      	mov	r0, r2
 8009e12:	f7fe ff32 	bl	8008c7a <mqtt_output_append_u16>
  /* Append client id */
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8009e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	8afa      	ldrh	r2, [r7, #22]
 8009e22:	4619      	mov	r1, r3
 8009e24:	f7fe ff41 	bl	8008caa <mqtt_output_append_string>
  /* Append will message if used */
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 8009e28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e2c:	f003 0304 	and.w	r3, r3, #4
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d015      	beq.n	8009e60 <mqtt_client_connect+0x47c>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8009e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e3c:	691b      	ldr	r3, [r3, #16]
 8009e3e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009e42:	b292      	uxth	r2, r2
 8009e44:	4619      	mov	r1, r3
 8009e46:	f7fe ff30 	bl	8008caa <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8009e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e52:	695b      	ldr	r3, [r3, #20]
 8009e54:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009e58:	b292      	uxth	r2, r2
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	f7fe ff25 	bl	8008caa <mqtt_output_append_string>
  }
  /* Append user name if given */
  if ((flags & MQTT_CONNECT_FLAG_USERNAME) != 0) {
 8009e60:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	da08      	bge.n	8009e7a <mqtt_client_connect+0x496>
    mqtt_output_append_string(&client->output, client_info->client_user, client_user_len);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8009e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	8bfa      	ldrh	r2, [r7, #30]
 8009e74:	4619      	mov	r1, r3
 8009e76:	f7fe ff18 	bl	8008caa <mqtt_output_append_string>
  }
  /* Append password if given */
  if ((flags & MQTT_CONNECT_FLAG_PASSWORD) != 0) {
 8009e7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d008      	beq.n	8009e98 <mqtt_client_connect+0x4b4>
    mqtt_output_append_string(&client->output, client_info->client_pass, client_pass_len);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8009e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	8bba      	ldrh	r2, [r7, #28]
 8009e92:	4619      	mov	r1, r3
 8009e94:	f7fe ff09 	bl	8008caa <mqtt_output_append_string>
  }
  return ERR_OK;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	e00c      	b.n	8009eb6 <mqtt_client_connect+0x4d2>
    goto tcp_fail;
 8009e9c:	bf00      	nop
 8009e9e:	e000      	b.n	8009ea2 <mqtt_client_connect+0x4be>
    goto tcp_fail;
 8009ea0:	bf00      	nop

tcp_fail:
  altcp_abort(client->conn);
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	68db      	ldr	r3, [r3, #12]
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f002 f9e4 	bl	800c274 <tcp_abort>
  client->conn = NULL;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	60da      	str	r2, [r3, #12]
  return err;
 8009eb2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3728      	adds	r7, #40	; 0x28
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	0801634c 	.word	0x0801634c
 8009ec4:	08016934 	.word	0x08016934
 8009ec8:	080163c4 	.word	0x080163c4
 8009ecc:	0801964c 	.word	0x0801964c
 8009ed0:	08009759 	.word	0x08009759
 8009ed4:	080096e5 	.word	0x080096e5
 8009ed8:	08016aa8 	.word	0x08016aa8

08009edc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8009ee6:	88fb      	ldrh	r3, [r7, #6]
 8009ee8:	021b      	lsls	r3, r3, #8
 8009eea:	b21a      	sxth	r2, r3
 8009eec:	88fb      	ldrh	r3, [r7, #6]
 8009eee:	0a1b      	lsrs	r3, r3, #8
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	b21b      	sxth	r3, r3
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	b21b      	sxth	r3, r3
 8009ef8:	b29b      	uxth	r3, r3
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	370c      	adds	r7, #12
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr

08009f06 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009f06:	b480      	push	{r7}
 8009f08:	b083      	sub	sp, #12
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	061a      	lsls	r2, r3, #24
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	021b      	lsls	r3, r3, #8
 8009f16:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009f1a:	431a      	orrs	r2, r3
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	0a1b      	lsrs	r3, r3, #8
 8009f20:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009f24:	431a      	orrs	r2, r3
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	0e1b      	lsrs	r3, r3, #24
 8009f2a:	4313      	orrs	r3, r2
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	370c      	adds	r7, #12
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr

08009f38 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8009f42:	f00a fedd 	bl	8014d00 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8009f46:	f000 f8d5 	bl	800a0f4 <mem_init>
  memp_init();
 8009f4a:	f000 fc59 	bl	800a800 <memp_init>
  pbuf_init();
  netif_init();
 8009f4e:	f000 fd1f 	bl	800a990 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009f52:	f008 f8a5 	bl	80120a0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009f56:	f001 fe93 	bl	800bc80 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8009f5a:	f007 ffad 	bl	8011eb8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009f5e:	bf00      	nop
 8009f60:	3708      	adds	r7, #8
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
	...

08009f68 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b083      	sub	sp, #12
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	4603      	mov	r3, r0
 8009f70:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8009f72:	4b05      	ldr	r3, [pc, #20]	; (8009f88 <ptr_to_mem+0x20>)
 8009f74:	681a      	ldr	r2, [r3, #0]
 8009f76:	88fb      	ldrh	r3, [r7, #6]
 8009f78:	4413      	add	r3, r2
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	370c      	adds	r7, #12
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr
 8009f86:	bf00      	nop
 8009f88:	20004058 	.word	0x20004058

08009f8c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b083      	sub	sp, #12
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009f94:	4b05      	ldr	r3, [pc, #20]	; (8009fac <mem_to_ptr+0x20>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	1ad3      	subs	r3, r2, r3
 8009f9c:	b29b      	uxth	r3, r3
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	370c      	adds	r7, #12
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr
 8009faa:	bf00      	nop
 8009fac:	20004058 	.word	0x20004058

08009fb0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009fb0:	b590      	push	{r4, r7, lr}
 8009fb2:	b085      	sub	sp, #20
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009fb8:	4b45      	ldr	r3, [pc, #276]	; (800a0d0 <plug_holes+0x120>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d206      	bcs.n	8009fd0 <plug_holes+0x20>
 8009fc2:	4b44      	ldr	r3, [pc, #272]	; (800a0d4 <plug_holes+0x124>)
 8009fc4:	f240 12df 	movw	r2, #479	; 0x1df
 8009fc8:	4943      	ldr	r1, [pc, #268]	; (800a0d8 <plug_holes+0x128>)
 8009fca:	4844      	ldr	r0, [pc, #272]	; (800a0dc <plug_holes+0x12c>)
 8009fcc:	f00a ff6a 	bl	8014ea4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009fd0:	4b43      	ldr	r3, [pc, #268]	; (800a0e0 <plug_holes+0x130>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	687a      	ldr	r2, [r7, #4]
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	d306      	bcc.n	8009fe8 <plug_holes+0x38>
 8009fda:	4b3e      	ldr	r3, [pc, #248]	; (800a0d4 <plug_holes+0x124>)
 8009fdc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009fe0:	4940      	ldr	r1, [pc, #256]	; (800a0e4 <plug_holes+0x134>)
 8009fe2:	483e      	ldr	r0, [pc, #248]	; (800a0dc <plug_holes+0x12c>)
 8009fe4:	f00a ff5e 	bl	8014ea4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	791b      	ldrb	r3, [r3, #4]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d006      	beq.n	8009ffe <plug_holes+0x4e>
 8009ff0:	4b38      	ldr	r3, [pc, #224]	; (800a0d4 <plug_holes+0x124>)
 8009ff2:	f240 12e1 	movw	r2, #481	; 0x1e1
 8009ff6:	493c      	ldr	r1, [pc, #240]	; (800a0e8 <plug_holes+0x138>)
 8009ff8:	4838      	ldr	r0, [pc, #224]	; (800a0dc <plug_holes+0x12c>)
 8009ffa:	f00a ff53 	bl	8014ea4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	881b      	ldrh	r3, [r3, #0]
 800a002:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a006:	d906      	bls.n	800a016 <plug_holes+0x66>
 800a008:	4b32      	ldr	r3, [pc, #200]	; (800a0d4 <plug_holes+0x124>)
 800a00a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a00e:	4937      	ldr	r1, [pc, #220]	; (800a0ec <plug_holes+0x13c>)
 800a010:	4832      	ldr	r0, [pc, #200]	; (800a0dc <plug_holes+0x12c>)
 800a012:	f00a ff47 	bl	8014ea4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	881b      	ldrh	r3, [r3, #0]
 800a01a:	4618      	mov	r0, r3
 800a01c:	f7ff ffa4 	bl	8009f68 <ptr_to_mem>
 800a020:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	429a      	cmp	r2, r3
 800a028:	d024      	beq.n	800a074 <plug_holes+0xc4>
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	791b      	ldrb	r3, [r3, #4]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d120      	bne.n	800a074 <plug_holes+0xc4>
 800a032:	4b2b      	ldr	r3, [pc, #172]	; (800a0e0 <plug_holes+0x130>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	68fa      	ldr	r2, [r7, #12]
 800a038:	429a      	cmp	r2, r3
 800a03a:	d01b      	beq.n	800a074 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a03c:	4b2c      	ldr	r3, [pc, #176]	; (800a0f0 <plug_holes+0x140>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	68fa      	ldr	r2, [r7, #12]
 800a042:	429a      	cmp	r2, r3
 800a044:	d102      	bne.n	800a04c <plug_holes+0x9c>
      lfree = mem;
 800a046:	4a2a      	ldr	r2, [pc, #168]	; (800a0f0 <plug_holes+0x140>)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	881a      	ldrh	r2, [r3, #0]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	881b      	ldrh	r3, [r3, #0]
 800a058:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a05c:	d00a      	beq.n	800a074 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	881b      	ldrh	r3, [r3, #0]
 800a062:	4618      	mov	r0, r3
 800a064:	f7ff ff80 	bl	8009f68 <ptr_to_mem>
 800a068:	4604      	mov	r4, r0
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f7ff ff8e 	bl	8009f8c <mem_to_ptr>
 800a070:	4603      	mov	r3, r0
 800a072:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	885b      	ldrh	r3, [r3, #2]
 800a078:	4618      	mov	r0, r3
 800a07a:	f7ff ff75 	bl	8009f68 <ptr_to_mem>
 800a07e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a080:	68ba      	ldr	r2, [r7, #8]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	429a      	cmp	r2, r3
 800a086:	d01f      	beq.n	800a0c8 <plug_holes+0x118>
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	791b      	ldrb	r3, [r3, #4]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d11b      	bne.n	800a0c8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a090:	4b17      	ldr	r3, [pc, #92]	; (800a0f0 <plug_holes+0x140>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	429a      	cmp	r2, r3
 800a098:	d102      	bne.n	800a0a0 <plug_holes+0xf0>
      lfree = pmem;
 800a09a:	4a15      	ldr	r2, [pc, #84]	; (800a0f0 <plug_holes+0x140>)
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	881a      	ldrh	r2, [r3, #0]
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	881b      	ldrh	r3, [r3, #0]
 800a0ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a0b0:	d00a      	beq.n	800a0c8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	881b      	ldrh	r3, [r3, #0]
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7ff ff56 	bl	8009f68 <ptr_to_mem>
 800a0bc:	4604      	mov	r4, r0
 800a0be:	68b8      	ldr	r0, [r7, #8]
 800a0c0:	f7ff ff64 	bl	8009f8c <mem_to_ptr>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a0c8:	bf00      	nop
 800a0ca:	3714      	adds	r7, #20
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd90      	pop	{r4, r7, pc}
 800a0d0:	20004058 	.word	0x20004058
 800a0d4:	08016afc 	.word	0x08016afc
 800a0d8:	08016b2c 	.word	0x08016b2c
 800a0dc:	08016b44 	.word	0x08016b44
 800a0e0:	2000405c 	.word	0x2000405c
 800a0e4:	08016b6c 	.word	0x08016b6c
 800a0e8:	08016b88 	.word	0x08016b88
 800a0ec:	08016ba4 	.word	0x08016ba4
 800a0f0:	20004064 	.word	0x20004064

0800a0f4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a0fa:	4b1f      	ldr	r3, [pc, #124]	; (800a178 <mem_init+0x84>)
 800a0fc:	3303      	adds	r3, #3
 800a0fe:	f023 0303 	bic.w	r3, r3, #3
 800a102:	461a      	mov	r2, r3
 800a104:	4b1d      	ldr	r3, [pc, #116]	; (800a17c <mem_init+0x88>)
 800a106:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a108:	4b1c      	ldr	r3, [pc, #112]	; (800a17c <mem_init+0x88>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a114:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2200      	movs	r2, #0
 800a11a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2200      	movs	r2, #0
 800a120:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a122:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800a126:	f7ff ff1f 	bl	8009f68 <ptr_to_mem>
 800a12a:	4603      	mov	r3, r0
 800a12c:	4a14      	ldr	r2, [pc, #80]	; (800a180 <mem_init+0x8c>)
 800a12e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a130:	4b13      	ldr	r3, [pc, #76]	; (800a180 <mem_init+0x8c>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	2201      	movs	r2, #1
 800a136:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a138:	4b11      	ldr	r3, [pc, #68]	; (800a180 <mem_init+0x8c>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a140:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a142:	4b0f      	ldr	r3, [pc, #60]	; (800a180 <mem_init+0x8c>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a14a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a14c:	4b0b      	ldr	r3, [pc, #44]	; (800a17c <mem_init+0x88>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a0c      	ldr	r2, [pc, #48]	; (800a184 <mem_init+0x90>)
 800a152:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a154:	480c      	ldr	r0, [pc, #48]	; (800a188 <mem_init+0x94>)
 800a156:	f00a fde1 	bl	8014d1c <sys_mutex_new>
 800a15a:	4603      	mov	r3, r0
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d006      	beq.n	800a16e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a160:	4b0a      	ldr	r3, [pc, #40]	; (800a18c <mem_init+0x98>)
 800a162:	f240 221f 	movw	r2, #543	; 0x21f
 800a166:	490a      	ldr	r1, [pc, #40]	; (800a190 <mem_init+0x9c>)
 800a168:	480a      	ldr	r0, [pc, #40]	; (800a194 <mem_init+0xa0>)
 800a16a:	f00a fe9b 	bl	8014ea4 <iprintf>
  }
}
 800a16e:	bf00      	nop
 800a170:	3708      	adds	r7, #8
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
 800a176:	bf00      	nop
 800a178:	2000741c 	.word	0x2000741c
 800a17c:	20004058 	.word	0x20004058
 800a180:	2000405c 	.word	0x2000405c
 800a184:	20004064 	.word	0x20004064
 800a188:	20004060 	.word	0x20004060
 800a18c:	08016afc 	.word	0x08016afc
 800a190:	08016bd0 	.word	0x08016bd0
 800a194:	08016b44 	.word	0x08016b44

0800a198 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b086      	sub	sp, #24
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f7ff fef3 	bl	8009f8c <mem_to_ptr>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	881b      	ldrh	r3, [r3, #0]
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7ff feda 	bl	8009f68 <ptr_to_mem>
 800a1b4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	885b      	ldrh	r3, [r3, #2]
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f7ff fed4 	bl	8009f68 <ptr_to_mem>
 800a1c0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	881b      	ldrh	r3, [r3, #0]
 800a1c6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a1ca:	d818      	bhi.n	800a1fe <mem_link_valid+0x66>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	885b      	ldrh	r3, [r3, #2]
 800a1d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a1d4:	d813      	bhi.n	800a1fe <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a1da:	8afa      	ldrh	r2, [r7, #22]
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	d004      	beq.n	800a1ea <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	881b      	ldrh	r3, [r3, #0]
 800a1e4:	8afa      	ldrh	r2, [r7, #22]
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d109      	bne.n	800a1fe <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a1ea:	4b08      	ldr	r3, [pc, #32]	; (800a20c <mem_link_valid+0x74>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a1ee:	693a      	ldr	r2, [r7, #16]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d006      	beq.n	800a202 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	885b      	ldrh	r3, [r3, #2]
 800a1f8:	8afa      	ldrh	r2, [r7, #22]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d001      	beq.n	800a202 <mem_link_valid+0x6a>
    return 0;
 800a1fe:	2300      	movs	r3, #0
 800a200:	e000      	b.n	800a204 <mem_link_valid+0x6c>
  }
  return 1;
 800a202:	2301      	movs	r3, #1
}
 800a204:	4618      	mov	r0, r3
 800a206:	3718      	adds	r7, #24
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}
 800a20c:	2000405c 	.word	0x2000405c

0800a210 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b088      	sub	sp, #32
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d070      	beq.n	800a300 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f003 0303 	and.w	r3, r3, #3
 800a224:	2b00      	cmp	r3, #0
 800a226:	d00d      	beq.n	800a244 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a228:	4b37      	ldr	r3, [pc, #220]	; (800a308 <mem_free+0xf8>)
 800a22a:	f240 2273 	movw	r2, #627	; 0x273
 800a22e:	4937      	ldr	r1, [pc, #220]	; (800a30c <mem_free+0xfc>)
 800a230:	4837      	ldr	r0, [pc, #220]	; (800a310 <mem_free+0x100>)
 800a232:	f00a fe37 	bl	8014ea4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a236:	f00a fdcf 	bl	8014dd8 <sys_arch_protect>
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	68f8      	ldr	r0, [r7, #12]
 800a23e:	f00a fdd9 	bl	8014df4 <sys_arch_unprotect>
    return;
 800a242:	e05e      	b.n	800a302 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	3b08      	subs	r3, #8
 800a248:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a24a:	4b32      	ldr	r3, [pc, #200]	; (800a314 <mem_free+0x104>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	69fa      	ldr	r2, [r7, #28]
 800a250:	429a      	cmp	r2, r3
 800a252:	d306      	bcc.n	800a262 <mem_free+0x52>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f103 020c 	add.w	r2, r3, #12
 800a25a:	4b2f      	ldr	r3, [pc, #188]	; (800a318 <mem_free+0x108>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	429a      	cmp	r2, r3
 800a260:	d90d      	bls.n	800a27e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a262:	4b29      	ldr	r3, [pc, #164]	; (800a308 <mem_free+0xf8>)
 800a264:	f240 227f 	movw	r2, #639	; 0x27f
 800a268:	492c      	ldr	r1, [pc, #176]	; (800a31c <mem_free+0x10c>)
 800a26a:	4829      	ldr	r0, [pc, #164]	; (800a310 <mem_free+0x100>)
 800a26c:	f00a fe1a 	bl	8014ea4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a270:	f00a fdb2 	bl	8014dd8 <sys_arch_protect>
 800a274:	6138      	str	r0, [r7, #16]
 800a276:	6938      	ldr	r0, [r7, #16]
 800a278:	f00a fdbc 	bl	8014df4 <sys_arch_unprotect>
    return;
 800a27c:	e041      	b.n	800a302 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a27e:	4828      	ldr	r0, [pc, #160]	; (800a320 <mem_free+0x110>)
 800a280:	f00a fd68 	bl	8014d54 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800a284:	69fb      	ldr	r3, [r7, #28]
 800a286:	791b      	ldrb	r3, [r3, #4]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d110      	bne.n	800a2ae <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a28c:	4b1e      	ldr	r3, [pc, #120]	; (800a308 <mem_free+0xf8>)
 800a28e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a292:	4924      	ldr	r1, [pc, #144]	; (800a324 <mem_free+0x114>)
 800a294:	481e      	ldr	r0, [pc, #120]	; (800a310 <mem_free+0x100>)
 800a296:	f00a fe05 	bl	8014ea4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a29a:	4821      	ldr	r0, [pc, #132]	; (800a320 <mem_free+0x110>)
 800a29c:	f00a fd69 	bl	8014d72 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a2a0:	f00a fd9a 	bl	8014dd8 <sys_arch_protect>
 800a2a4:	6178      	str	r0, [r7, #20]
 800a2a6:	6978      	ldr	r0, [r7, #20]
 800a2a8:	f00a fda4 	bl	8014df4 <sys_arch_unprotect>
    return;
 800a2ac:	e029      	b.n	800a302 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800a2ae:	69f8      	ldr	r0, [r7, #28]
 800a2b0:	f7ff ff72 	bl	800a198 <mem_link_valid>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d110      	bne.n	800a2dc <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a2ba:	4b13      	ldr	r3, [pc, #76]	; (800a308 <mem_free+0xf8>)
 800a2bc:	f240 2295 	movw	r2, #661	; 0x295
 800a2c0:	4919      	ldr	r1, [pc, #100]	; (800a328 <mem_free+0x118>)
 800a2c2:	4813      	ldr	r0, [pc, #76]	; (800a310 <mem_free+0x100>)
 800a2c4:	f00a fdee 	bl	8014ea4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a2c8:	4815      	ldr	r0, [pc, #84]	; (800a320 <mem_free+0x110>)
 800a2ca:	f00a fd52 	bl	8014d72 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a2ce:	f00a fd83 	bl	8014dd8 <sys_arch_protect>
 800a2d2:	61b8      	str	r0, [r7, #24]
 800a2d4:	69b8      	ldr	r0, [r7, #24]
 800a2d6:	f00a fd8d 	bl	8014df4 <sys_arch_unprotect>
    return;
 800a2da:	e012      	b.n	800a302 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a2dc:	69fb      	ldr	r3, [r7, #28]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a2e2:	4b12      	ldr	r3, [pc, #72]	; (800a32c <mem_free+0x11c>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	69fa      	ldr	r2, [r7, #28]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d202      	bcs.n	800a2f2 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a2ec:	4a0f      	ldr	r2, [pc, #60]	; (800a32c <mem_free+0x11c>)
 800a2ee:	69fb      	ldr	r3, [r7, #28]
 800a2f0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a2f2:	69f8      	ldr	r0, [r7, #28]
 800a2f4:	f7ff fe5c 	bl	8009fb0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a2f8:	4809      	ldr	r0, [pc, #36]	; (800a320 <mem_free+0x110>)
 800a2fa:	f00a fd3a 	bl	8014d72 <sys_mutex_unlock>
 800a2fe:	e000      	b.n	800a302 <mem_free+0xf2>
    return;
 800a300:	bf00      	nop
}
 800a302:	3720      	adds	r7, #32
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}
 800a308:	08016afc 	.word	0x08016afc
 800a30c:	08016bec 	.word	0x08016bec
 800a310:	08016b44 	.word	0x08016b44
 800a314:	20004058 	.word	0x20004058
 800a318:	2000405c 	.word	0x2000405c
 800a31c:	08016c10 	.word	0x08016c10
 800a320:	20004060 	.word	0x20004060
 800a324:	08016c2c 	.word	0x08016c2c
 800a328:	08016c54 	.word	0x08016c54
 800a32c:	20004064 	.word	0x20004064

0800a330 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b088      	sub	sp, #32
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	460b      	mov	r3, r1
 800a33a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a33c:	887b      	ldrh	r3, [r7, #2]
 800a33e:	3303      	adds	r3, #3
 800a340:	b29b      	uxth	r3, r3
 800a342:	f023 0303 	bic.w	r3, r3, #3
 800a346:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a348:	8bfb      	ldrh	r3, [r7, #30]
 800a34a:	2b0b      	cmp	r3, #11
 800a34c:	d801      	bhi.n	800a352 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a34e:	230c      	movs	r3, #12
 800a350:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a352:	8bfb      	ldrh	r3, [r7, #30]
 800a354:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a358:	d803      	bhi.n	800a362 <mem_trim+0x32>
 800a35a:	8bfa      	ldrh	r2, [r7, #30]
 800a35c:	887b      	ldrh	r3, [r7, #2]
 800a35e:	429a      	cmp	r2, r3
 800a360:	d201      	bcs.n	800a366 <mem_trim+0x36>
    return NULL;
 800a362:	2300      	movs	r3, #0
 800a364:	e0d8      	b.n	800a518 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a366:	4b6e      	ldr	r3, [pc, #440]	; (800a520 <mem_trim+0x1f0>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	687a      	ldr	r2, [r7, #4]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d304      	bcc.n	800a37a <mem_trim+0x4a>
 800a370:	4b6c      	ldr	r3, [pc, #432]	; (800a524 <mem_trim+0x1f4>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	429a      	cmp	r2, r3
 800a378:	d306      	bcc.n	800a388 <mem_trim+0x58>
 800a37a:	4b6b      	ldr	r3, [pc, #428]	; (800a528 <mem_trim+0x1f8>)
 800a37c:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a380:	496a      	ldr	r1, [pc, #424]	; (800a52c <mem_trim+0x1fc>)
 800a382:	486b      	ldr	r0, [pc, #428]	; (800a530 <mem_trim+0x200>)
 800a384:	f00a fd8e 	bl	8014ea4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a388:	4b65      	ldr	r3, [pc, #404]	; (800a520 <mem_trim+0x1f0>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	429a      	cmp	r2, r3
 800a390:	d304      	bcc.n	800a39c <mem_trim+0x6c>
 800a392:	4b64      	ldr	r3, [pc, #400]	; (800a524 <mem_trim+0x1f4>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	429a      	cmp	r2, r3
 800a39a:	d307      	bcc.n	800a3ac <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a39c:	f00a fd1c 	bl	8014dd8 <sys_arch_protect>
 800a3a0:	60b8      	str	r0, [r7, #8]
 800a3a2:	68b8      	ldr	r0, [r7, #8]
 800a3a4:	f00a fd26 	bl	8014df4 <sys_arch_unprotect>
    return rmem;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	e0b5      	b.n	800a518 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	3b08      	subs	r3, #8
 800a3b0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a3b2:	69b8      	ldr	r0, [r7, #24]
 800a3b4:	f7ff fdea 	bl	8009f8c <mem_to_ptr>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a3bc:	69bb      	ldr	r3, [r7, #24]
 800a3be:	881a      	ldrh	r2, [r3, #0]
 800a3c0:	8afb      	ldrh	r3, [r7, #22]
 800a3c2:	1ad3      	subs	r3, r2, r3
 800a3c4:	b29b      	uxth	r3, r3
 800a3c6:	3b08      	subs	r3, #8
 800a3c8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a3ca:	8bfa      	ldrh	r2, [r7, #30]
 800a3cc:	8abb      	ldrh	r3, [r7, #20]
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d906      	bls.n	800a3e0 <mem_trim+0xb0>
 800a3d2:	4b55      	ldr	r3, [pc, #340]	; (800a528 <mem_trim+0x1f8>)
 800a3d4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a3d8:	4956      	ldr	r1, [pc, #344]	; (800a534 <mem_trim+0x204>)
 800a3da:	4855      	ldr	r0, [pc, #340]	; (800a530 <mem_trim+0x200>)
 800a3dc:	f00a fd62 	bl	8014ea4 <iprintf>
  if (newsize > size) {
 800a3e0:	8bfa      	ldrh	r2, [r7, #30]
 800a3e2:	8abb      	ldrh	r3, [r7, #20]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d901      	bls.n	800a3ec <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	e095      	b.n	800a518 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800a3ec:	8bfa      	ldrh	r2, [r7, #30]
 800a3ee:	8abb      	ldrh	r3, [r7, #20]
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	d101      	bne.n	800a3f8 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	e08f      	b.n	800a518 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a3f8:	484f      	ldr	r0, [pc, #316]	; (800a538 <mem_trim+0x208>)
 800a3fa:	f00a fcab 	bl	8014d54 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800a3fe:	69bb      	ldr	r3, [r7, #24]
 800a400:	881b      	ldrh	r3, [r3, #0]
 800a402:	4618      	mov	r0, r3
 800a404:	f7ff fdb0 	bl	8009f68 <ptr_to_mem>
 800a408:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	791b      	ldrb	r3, [r3, #4]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d13f      	bne.n	800a492 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a412:	69bb      	ldr	r3, [r7, #24]
 800a414:	881b      	ldrh	r3, [r3, #0]
 800a416:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a41a:	d106      	bne.n	800a42a <mem_trim+0xfa>
 800a41c:	4b42      	ldr	r3, [pc, #264]	; (800a528 <mem_trim+0x1f8>)
 800a41e:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a422:	4946      	ldr	r1, [pc, #280]	; (800a53c <mem_trim+0x20c>)
 800a424:	4842      	ldr	r0, [pc, #264]	; (800a530 <mem_trim+0x200>)
 800a426:	f00a fd3d 	bl	8014ea4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	881b      	ldrh	r3, [r3, #0]
 800a42e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a430:	8afa      	ldrh	r2, [r7, #22]
 800a432:	8bfb      	ldrh	r3, [r7, #30]
 800a434:	4413      	add	r3, r2
 800a436:	b29b      	uxth	r3, r3
 800a438:	3308      	adds	r3, #8
 800a43a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a43c:	4b40      	ldr	r3, [pc, #256]	; (800a540 <mem_trim+0x210>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	693a      	ldr	r2, [r7, #16]
 800a442:	429a      	cmp	r2, r3
 800a444:	d106      	bne.n	800a454 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800a446:	89fb      	ldrh	r3, [r7, #14]
 800a448:	4618      	mov	r0, r3
 800a44a:	f7ff fd8d 	bl	8009f68 <ptr_to_mem>
 800a44e:	4603      	mov	r3, r0
 800a450:	4a3b      	ldr	r2, [pc, #236]	; (800a540 <mem_trim+0x210>)
 800a452:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a454:	89fb      	ldrh	r3, [r7, #14]
 800a456:	4618      	mov	r0, r3
 800a458:	f7ff fd86 	bl	8009f68 <ptr_to_mem>
 800a45c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	2200      	movs	r2, #0
 800a462:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	89ba      	ldrh	r2, [r7, #12]
 800a468:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	8afa      	ldrh	r2, [r7, #22]
 800a46e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a470:	69bb      	ldr	r3, [r7, #24]
 800a472:	89fa      	ldrh	r2, [r7, #14]
 800a474:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	881b      	ldrh	r3, [r3, #0]
 800a47a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a47e:	d047      	beq.n	800a510 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	881b      	ldrh	r3, [r3, #0]
 800a484:	4618      	mov	r0, r3
 800a486:	f7ff fd6f 	bl	8009f68 <ptr_to_mem>
 800a48a:	4602      	mov	r2, r0
 800a48c:	89fb      	ldrh	r3, [r7, #14]
 800a48e:	8053      	strh	r3, [r2, #2]
 800a490:	e03e      	b.n	800a510 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a492:	8bfb      	ldrh	r3, [r7, #30]
 800a494:	f103 0214 	add.w	r2, r3, #20
 800a498:	8abb      	ldrh	r3, [r7, #20]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d838      	bhi.n	800a510 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a49e:	8afa      	ldrh	r2, [r7, #22]
 800a4a0:	8bfb      	ldrh	r3, [r7, #30]
 800a4a2:	4413      	add	r3, r2
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	3308      	adds	r3, #8
 800a4a8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a4aa:	69bb      	ldr	r3, [r7, #24]
 800a4ac:	881b      	ldrh	r3, [r3, #0]
 800a4ae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a4b2:	d106      	bne.n	800a4c2 <mem_trim+0x192>
 800a4b4:	4b1c      	ldr	r3, [pc, #112]	; (800a528 <mem_trim+0x1f8>)
 800a4b6:	f240 3216 	movw	r2, #790	; 0x316
 800a4ba:	4920      	ldr	r1, [pc, #128]	; (800a53c <mem_trim+0x20c>)
 800a4bc:	481c      	ldr	r0, [pc, #112]	; (800a530 <mem_trim+0x200>)
 800a4be:	f00a fcf1 	bl	8014ea4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a4c2:	89fb      	ldrh	r3, [r7, #14]
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f7ff fd4f 	bl	8009f68 <ptr_to_mem>
 800a4ca:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a4cc:	4b1c      	ldr	r3, [pc, #112]	; (800a540 <mem_trim+0x210>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	693a      	ldr	r2, [r7, #16]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d202      	bcs.n	800a4dc <mem_trim+0x1ac>
      lfree = mem2;
 800a4d6:	4a1a      	ldr	r2, [pc, #104]	; (800a540 <mem_trim+0x210>)
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a4e2:	69bb      	ldr	r3, [r7, #24]
 800a4e4:	881a      	ldrh	r2, [r3, #0]
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	8afa      	ldrh	r2, [r7, #22]
 800a4ee:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a4f0:	69bb      	ldr	r3, [r7, #24]
 800a4f2:	89fa      	ldrh	r2, [r7, #14]
 800a4f4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	881b      	ldrh	r3, [r3, #0]
 800a4fa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a4fe:	d007      	beq.n	800a510 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	881b      	ldrh	r3, [r3, #0]
 800a504:	4618      	mov	r0, r3
 800a506:	f7ff fd2f 	bl	8009f68 <ptr_to_mem>
 800a50a:	4602      	mov	r2, r0
 800a50c:	89fb      	ldrh	r3, [r7, #14]
 800a50e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a510:	4809      	ldr	r0, [pc, #36]	; (800a538 <mem_trim+0x208>)
 800a512:	f00a fc2e 	bl	8014d72 <sys_mutex_unlock>
  return rmem;
 800a516:	687b      	ldr	r3, [r7, #4]
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3720      	adds	r7, #32
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}
 800a520:	20004058 	.word	0x20004058
 800a524:	2000405c 	.word	0x2000405c
 800a528:	08016afc 	.word	0x08016afc
 800a52c:	08016c88 	.word	0x08016c88
 800a530:	08016b44 	.word	0x08016b44
 800a534:	08016ca0 	.word	0x08016ca0
 800a538:	20004060 	.word	0x20004060
 800a53c:	08016cc0 	.word	0x08016cc0
 800a540:	20004064 	.word	0x20004064

0800a544 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b088      	sub	sp, #32
 800a548:	af00      	add	r7, sp, #0
 800a54a:	4603      	mov	r3, r0
 800a54c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a54e:	88fb      	ldrh	r3, [r7, #6]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d101      	bne.n	800a558 <mem_malloc+0x14>
    return NULL;
 800a554:	2300      	movs	r3, #0
 800a556:	e0e2      	b.n	800a71e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a558:	88fb      	ldrh	r3, [r7, #6]
 800a55a:	3303      	adds	r3, #3
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	f023 0303 	bic.w	r3, r3, #3
 800a562:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a564:	8bbb      	ldrh	r3, [r7, #28]
 800a566:	2b0b      	cmp	r3, #11
 800a568:	d801      	bhi.n	800a56e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a56a:	230c      	movs	r3, #12
 800a56c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a56e:	8bbb      	ldrh	r3, [r7, #28]
 800a570:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a574:	d803      	bhi.n	800a57e <mem_malloc+0x3a>
 800a576:	8bba      	ldrh	r2, [r7, #28]
 800a578:	88fb      	ldrh	r3, [r7, #6]
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d201      	bcs.n	800a582 <mem_malloc+0x3e>
    return NULL;
 800a57e:	2300      	movs	r3, #0
 800a580:	e0cd      	b.n	800a71e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800a582:	4869      	ldr	r0, [pc, #420]	; (800a728 <mem_malloc+0x1e4>)
 800a584:	f00a fbe6 	bl	8014d54 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a588:	4b68      	ldr	r3, [pc, #416]	; (800a72c <mem_malloc+0x1e8>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4618      	mov	r0, r3
 800a58e:	f7ff fcfd 	bl	8009f8c <mem_to_ptr>
 800a592:	4603      	mov	r3, r0
 800a594:	83fb      	strh	r3, [r7, #30]
 800a596:	e0b7      	b.n	800a708 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a598:	8bfb      	ldrh	r3, [r7, #30]
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7ff fce4 	bl	8009f68 <ptr_to_mem>
 800a5a0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	791b      	ldrb	r3, [r3, #4]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	f040 80a7 	bne.w	800a6fa <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	881b      	ldrh	r3, [r3, #0]
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	8bfb      	ldrh	r3, [r7, #30]
 800a5b4:	1ad3      	subs	r3, r2, r3
 800a5b6:	f1a3 0208 	sub.w	r2, r3, #8
 800a5ba:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	f0c0 809c 	bcc.w	800a6fa <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	881b      	ldrh	r3, [r3, #0]
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	8bfb      	ldrh	r3, [r7, #30]
 800a5ca:	1ad3      	subs	r3, r2, r3
 800a5cc:	f1a3 0208 	sub.w	r2, r3, #8
 800a5d0:	8bbb      	ldrh	r3, [r7, #28]
 800a5d2:	3314      	adds	r3, #20
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d333      	bcc.n	800a640 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a5d8:	8bfa      	ldrh	r2, [r7, #30]
 800a5da:	8bbb      	ldrh	r3, [r7, #28]
 800a5dc:	4413      	add	r3, r2
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	3308      	adds	r3, #8
 800a5e2:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a5e4:	8a7b      	ldrh	r3, [r7, #18]
 800a5e6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a5ea:	d106      	bne.n	800a5fa <mem_malloc+0xb6>
 800a5ec:	4b50      	ldr	r3, [pc, #320]	; (800a730 <mem_malloc+0x1ec>)
 800a5ee:	f240 3287 	movw	r2, #903	; 0x387
 800a5f2:	4950      	ldr	r1, [pc, #320]	; (800a734 <mem_malloc+0x1f0>)
 800a5f4:	4850      	ldr	r0, [pc, #320]	; (800a738 <mem_malloc+0x1f4>)
 800a5f6:	f00a fc55 	bl	8014ea4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a5fa:	8a7b      	ldrh	r3, [r7, #18]
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f7ff fcb3 	bl	8009f68 <ptr_to_mem>
 800a602:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2200      	movs	r2, #0
 800a608:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	881a      	ldrh	r2, [r3, #0]
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	8bfa      	ldrh	r2, [r7, #30]
 800a616:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	8a7a      	ldrh	r2, [r7, #18]
 800a61c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	2201      	movs	r2, #1
 800a622:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	881b      	ldrh	r3, [r3, #0]
 800a628:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a62c:	d00b      	beq.n	800a646 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	881b      	ldrh	r3, [r3, #0]
 800a632:	4618      	mov	r0, r3
 800a634:	f7ff fc98 	bl	8009f68 <ptr_to_mem>
 800a638:	4602      	mov	r2, r0
 800a63a:	8a7b      	ldrh	r3, [r7, #18]
 800a63c:	8053      	strh	r3, [r2, #2]
 800a63e:	e002      	b.n	800a646 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	2201      	movs	r2, #1
 800a644:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a646:	4b39      	ldr	r3, [pc, #228]	; (800a72c <mem_malloc+0x1e8>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	697a      	ldr	r2, [r7, #20]
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d127      	bne.n	800a6a0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800a650:	4b36      	ldr	r3, [pc, #216]	; (800a72c <mem_malloc+0x1e8>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a656:	e005      	b.n	800a664 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a658:	69bb      	ldr	r3, [r7, #24]
 800a65a:	881b      	ldrh	r3, [r3, #0]
 800a65c:	4618      	mov	r0, r3
 800a65e:	f7ff fc83 	bl	8009f68 <ptr_to_mem>
 800a662:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a664:	69bb      	ldr	r3, [r7, #24]
 800a666:	791b      	ldrb	r3, [r3, #4]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d004      	beq.n	800a676 <mem_malloc+0x132>
 800a66c:	4b33      	ldr	r3, [pc, #204]	; (800a73c <mem_malloc+0x1f8>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	69ba      	ldr	r2, [r7, #24]
 800a672:	429a      	cmp	r2, r3
 800a674:	d1f0      	bne.n	800a658 <mem_malloc+0x114>
          }
          lfree = cur;
 800a676:	4a2d      	ldr	r2, [pc, #180]	; (800a72c <mem_malloc+0x1e8>)
 800a678:	69bb      	ldr	r3, [r7, #24]
 800a67a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a67c:	4b2b      	ldr	r3, [pc, #172]	; (800a72c <mem_malloc+0x1e8>)
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	4b2e      	ldr	r3, [pc, #184]	; (800a73c <mem_malloc+0x1f8>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	429a      	cmp	r2, r3
 800a686:	d00b      	beq.n	800a6a0 <mem_malloc+0x15c>
 800a688:	4b28      	ldr	r3, [pc, #160]	; (800a72c <mem_malloc+0x1e8>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	791b      	ldrb	r3, [r3, #4]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d006      	beq.n	800a6a0 <mem_malloc+0x15c>
 800a692:	4b27      	ldr	r3, [pc, #156]	; (800a730 <mem_malloc+0x1ec>)
 800a694:	f240 32b5 	movw	r2, #949	; 0x3b5
 800a698:	4929      	ldr	r1, [pc, #164]	; (800a740 <mem_malloc+0x1fc>)
 800a69a:	4827      	ldr	r0, [pc, #156]	; (800a738 <mem_malloc+0x1f4>)
 800a69c:	f00a fc02 	bl	8014ea4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800a6a0:	4821      	ldr	r0, [pc, #132]	; (800a728 <mem_malloc+0x1e4>)
 800a6a2:	f00a fb66 	bl	8014d72 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a6a6:	8bba      	ldrh	r2, [r7, #28]
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	4413      	add	r3, r2
 800a6ac:	3308      	adds	r3, #8
 800a6ae:	4a23      	ldr	r2, [pc, #140]	; (800a73c <mem_malloc+0x1f8>)
 800a6b0:	6812      	ldr	r2, [r2, #0]
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d906      	bls.n	800a6c4 <mem_malloc+0x180>
 800a6b6:	4b1e      	ldr	r3, [pc, #120]	; (800a730 <mem_malloc+0x1ec>)
 800a6b8:	f240 32b9 	movw	r2, #953	; 0x3b9
 800a6bc:	4921      	ldr	r1, [pc, #132]	; (800a744 <mem_malloc+0x200>)
 800a6be:	481e      	ldr	r0, [pc, #120]	; (800a738 <mem_malloc+0x1f4>)
 800a6c0:	f00a fbf0 	bl	8014ea4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	f003 0303 	and.w	r3, r3, #3
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d006      	beq.n	800a6dc <mem_malloc+0x198>
 800a6ce:	4b18      	ldr	r3, [pc, #96]	; (800a730 <mem_malloc+0x1ec>)
 800a6d0:	f240 32bb 	movw	r2, #955	; 0x3bb
 800a6d4:	491c      	ldr	r1, [pc, #112]	; (800a748 <mem_malloc+0x204>)
 800a6d6:	4818      	ldr	r0, [pc, #96]	; (800a738 <mem_malloc+0x1f4>)
 800a6d8:	f00a fbe4 	bl	8014ea4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	f003 0303 	and.w	r3, r3, #3
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d006      	beq.n	800a6f4 <mem_malloc+0x1b0>
 800a6e6:	4b12      	ldr	r3, [pc, #72]	; (800a730 <mem_malloc+0x1ec>)
 800a6e8:	f240 32bd 	movw	r2, #957	; 0x3bd
 800a6ec:	4917      	ldr	r1, [pc, #92]	; (800a74c <mem_malloc+0x208>)
 800a6ee:	4812      	ldr	r0, [pc, #72]	; (800a738 <mem_malloc+0x1f4>)
 800a6f0:	f00a fbd8 	bl	8014ea4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	3308      	adds	r3, #8
 800a6f8:	e011      	b.n	800a71e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800a6fa:	8bfb      	ldrh	r3, [r7, #30]
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f7ff fc33 	bl	8009f68 <ptr_to_mem>
 800a702:	4603      	mov	r3, r0
 800a704:	881b      	ldrh	r3, [r3, #0]
 800a706:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a708:	8bfa      	ldrh	r2, [r7, #30]
 800a70a:	8bbb      	ldrh	r3, [r7, #28]
 800a70c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800a710:	429a      	cmp	r2, r3
 800a712:	f4ff af41 	bcc.w	800a598 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800a716:	4804      	ldr	r0, [pc, #16]	; (800a728 <mem_malloc+0x1e4>)
 800a718:	f00a fb2b 	bl	8014d72 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a71c:	2300      	movs	r3, #0
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3720      	adds	r7, #32
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	20004060 	.word	0x20004060
 800a72c:	20004064 	.word	0x20004064
 800a730:	08016afc 	.word	0x08016afc
 800a734:	08016cc0 	.word	0x08016cc0
 800a738:	08016b44 	.word	0x08016b44
 800a73c:	2000405c 	.word	0x2000405c
 800a740:	08016cd4 	.word	0x08016cd4
 800a744:	08016cf0 	.word	0x08016cf0
 800a748:	08016d20 	.word	0x08016d20
 800a74c:	08016d50 	.word	0x08016d50

0800a750 <mem_calloc>:
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *
mem_calloc(mem_size_t count, mem_size_t size)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af00      	add	r7, sp, #0
 800a756:	4603      	mov	r3, r0
 800a758:	460a      	mov	r2, r1
 800a75a:	80fb      	strh	r3, [r7, #6]
 800a75c:	4613      	mov	r3, r2
 800a75e:	80bb      	strh	r3, [r7, #4]
  void *p;
  size_t alloc_size = (size_t)count * (size_t)size;
 800a760:	88fb      	ldrh	r3, [r7, #6]
 800a762:	88ba      	ldrh	r2, [r7, #4]
 800a764:	fb02 f303 	mul.w	r3, r2, r3
 800a768:	60fb      	str	r3, [r7, #12]

  if ((size_t)(mem_size_t)alloc_size != alloc_size) {
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	b29b      	uxth	r3, r3
 800a76e:	461a      	mov	r2, r3
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	4293      	cmp	r3, r2
 800a774:	d001      	beq.n	800a77a <mem_calloc+0x2a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_calloc: could not allocate %"SZT_F" bytes\n", alloc_size));
    return NULL;
 800a776:	2300      	movs	r3, #0
 800a778:	e00e      	b.n	800a798 <mem_calloc+0x48>
  }

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc((mem_size_t)alloc_size);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	b29b      	uxth	r3, r3
 800a77e:	4618      	mov	r0, r3
 800a780:	f7ff fee0 	bl	800a544 <mem_malloc>
 800a784:	60b8      	str	r0, [r7, #8]
  if (p) {
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d004      	beq.n	800a796 <mem_calloc+0x46>
    /* zero the memory */
    memset(p, 0, alloc_size);
 800a78c:	68fa      	ldr	r2, [r7, #12]
 800a78e:	2100      	movs	r1, #0
 800a790:	68b8      	ldr	r0, [r7, #8]
 800a792:	f00a fb7f 	bl	8014e94 <memset>
  }
  return p;
 800a796:	68bb      	ldr	r3, [r7, #8]
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3710      	adds	r7, #16
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b085      	sub	sp, #20
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	689b      	ldr	r3, [r3, #8]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	685b      	ldr	r3, [r3, #4]
 800a7b4:	3303      	adds	r3, #3
 800a7b6:	f023 0303 	bic.w	r3, r3, #3
 800a7ba:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a7bc:	2300      	movs	r3, #0
 800a7be:	60fb      	str	r3, [r7, #12]
 800a7c0:	e011      	b.n	800a7e6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	689b      	ldr	r3, [r3, #8]
 800a7c6:	681a      	ldr	r2, [r3, #0]
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	689b      	ldr	r3, [r3, #8]
 800a7d0:	68ba      	ldr	r2, [r7, #8]
 800a7d2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	881b      	ldrh	r3, [r3, #0]
 800a7d8:	461a      	mov	r2, r3
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	4413      	add	r3, r2
 800a7de:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	60fb      	str	r3, [r7, #12]
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	885b      	ldrh	r3, [r3, #2]
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	dbe7      	blt.n	800a7c2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a7f2:	bf00      	nop
 800a7f4:	bf00      	nop
 800a7f6:	3714      	adds	r7, #20
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr

0800a800 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b082      	sub	sp, #8
 800a804:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a806:	2300      	movs	r3, #0
 800a808:	80fb      	strh	r3, [r7, #6]
 800a80a:	e009      	b.n	800a820 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a80c:	88fb      	ldrh	r3, [r7, #6]
 800a80e:	4a08      	ldr	r2, [pc, #32]	; (800a830 <memp_init+0x30>)
 800a810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a814:	4618      	mov	r0, r3
 800a816:	f7ff ffc3 	bl	800a7a0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a81a:	88fb      	ldrh	r3, [r7, #6]
 800a81c:	3301      	adds	r3, #1
 800a81e:	80fb      	strh	r3, [r7, #6]
 800a820:	88fb      	ldrh	r3, [r7, #6]
 800a822:	2b0c      	cmp	r3, #12
 800a824:	d9f2      	bls.n	800a80c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a826:	bf00      	nop
 800a828:	bf00      	nop
 800a82a:	3708      	adds	r7, #8
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}
 800a830:	080195d8 	.word	0x080195d8

0800a834 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b084      	sub	sp, #16
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800a83c:	f00a facc 	bl	8014dd8 <sys_arch_protect>
 800a840:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	689b      	ldr	r3, [r3, #8]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d015      	beq.n	800a87c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	689b      	ldr	r3, [r3, #8]
 800a854:	68ba      	ldr	r2, [r7, #8]
 800a856:	6812      	ldr	r2, [r2, #0]
 800a858:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	f003 0303 	and.w	r3, r3, #3
 800a860:	2b00      	cmp	r3, #0
 800a862:	d006      	beq.n	800a872 <do_memp_malloc_pool+0x3e>
 800a864:	4b09      	ldr	r3, [pc, #36]	; (800a88c <do_memp_malloc_pool+0x58>)
 800a866:	f44f 728c 	mov.w	r2, #280	; 0x118
 800a86a:	4909      	ldr	r1, [pc, #36]	; (800a890 <do_memp_malloc_pool+0x5c>)
 800a86c:	4809      	ldr	r0, [pc, #36]	; (800a894 <do_memp_malloc_pool+0x60>)
 800a86e:	f00a fb19 	bl	8014ea4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a872:	68f8      	ldr	r0, [r7, #12]
 800a874:	f00a fabe 	bl	8014df4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	e003      	b.n	800a884 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a87c:	68f8      	ldr	r0, [r7, #12]
 800a87e:	f00a fab9 	bl	8014df4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800a882:	2300      	movs	r3, #0
}
 800a884:	4618      	mov	r0, r3
 800a886:	3710      	adds	r7, #16
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}
 800a88c:	08016d74 	.word	0x08016d74
 800a890:	08016da4 	.word	0x08016da4
 800a894:	08016dc8 	.word	0x08016dc8

0800a898 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b084      	sub	sp, #16
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	4603      	mov	r3, r0
 800a8a0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a8a2:	79fb      	ldrb	r3, [r7, #7]
 800a8a4:	2b0c      	cmp	r3, #12
 800a8a6:	d908      	bls.n	800a8ba <memp_malloc+0x22>
 800a8a8:	4b0a      	ldr	r3, [pc, #40]	; (800a8d4 <memp_malloc+0x3c>)
 800a8aa:	f240 1257 	movw	r2, #343	; 0x157
 800a8ae:	490a      	ldr	r1, [pc, #40]	; (800a8d8 <memp_malloc+0x40>)
 800a8b0:	480a      	ldr	r0, [pc, #40]	; (800a8dc <memp_malloc+0x44>)
 800a8b2:	f00a faf7 	bl	8014ea4 <iprintf>
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	e008      	b.n	800a8cc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a8ba:	79fb      	ldrb	r3, [r7, #7]
 800a8bc:	4a08      	ldr	r2, [pc, #32]	; (800a8e0 <memp_malloc+0x48>)
 800a8be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f7ff ffb6 	bl	800a834 <do_memp_malloc_pool>
 800a8c8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3710      	adds	r7, #16
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}
 800a8d4:	08016d74 	.word	0x08016d74
 800a8d8:	08016e04 	.word	0x08016e04
 800a8dc:	08016dc8 	.word	0x08016dc8
 800a8e0:	080195d8 	.word	0x080195d8

0800a8e4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	f003 0303 	and.w	r3, r3, #3
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d006      	beq.n	800a906 <do_memp_free_pool+0x22>
 800a8f8:	4b0d      	ldr	r3, [pc, #52]	; (800a930 <do_memp_free_pool+0x4c>)
 800a8fa:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800a8fe:	490d      	ldr	r1, [pc, #52]	; (800a934 <do_memp_free_pool+0x50>)
 800a900:	480d      	ldr	r0, [pc, #52]	; (800a938 <do_memp_free_pool+0x54>)
 800a902:	f00a facf 	bl	8014ea4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800a90a:	f00a fa65 	bl	8014dd8 <sys_arch_protect>
 800a90e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	689b      	ldr	r3, [r3, #8]
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	689b      	ldr	r3, [r3, #8]
 800a91e:	68fa      	ldr	r2, [r7, #12]
 800a920:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800a922:	68b8      	ldr	r0, [r7, #8]
 800a924:	f00a fa66 	bl	8014df4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800a928:	bf00      	nop
 800a92a:	3710      	adds	r7, #16
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}
 800a930:	08016d74 	.word	0x08016d74
 800a934:	08016e24 	.word	0x08016e24
 800a938:	08016dc8 	.word	0x08016dc8

0800a93c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b082      	sub	sp, #8
 800a940:	af00      	add	r7, sp, #0
 800a942:	4603      	mov	r3, r0
 800a944:	6039      	str	r1, [r7, #0]
 800a946:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a948:	79fb      	ldrb	r3, [r7, #7]
 800a94a:	2b0c      	cmp	r3, #12
 800a94c:	d907      	bls.n	800a95e <memp_free+0x22>
 800a94e:	4b0c      	ldr	r3, [pc, #48]	; (800a980 <memp_free+0x44>)
 800a950:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800a954:	490b      	ldr	r1, [pc, #44]	; (800a984 <memp_free+0x48>)
 800a956:	480c      	ldr	r0, [pc, #48]	; (800a988 <memp_free+0x4c>)
 800a958:	f00a faa4 	bl	8014ea4 <iprintf>
 800a95c:	e00c      	b.n	800a978 <memp_free+0x3c>

  if (mem == NULL) {
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d008      	beq.n	800a976 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a964:	79fb      	ldrb	r3, [r7, #7]
 800a966:	4a09      	ldr	r2, [pc, #36]	; (800a98c <memp_free+0x50>)
 800a968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a96c:	6839      	ldr	r1, [r7, #0]
 800a96e:	4618      	mov	r0, r3
 800a970:	f7ff ffb8 	bl	800a8e4 <do_memp_free_pool>
 800a974:	e000      	b.n	800a978 <memp_free+0x3c>
    return;
 800a976:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a978:	3708      	adds	r7, #8
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	08016d74 	.word	0x08016d74
 800a984:	08016e44 	.word	0x08016e44
 800a988:	08016dc8 	.word	0x08016dc8
 800a98c:	080195d8 	.word	0x080195d8

0800a990 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800a990:	b480      	push	{r7}
 800a992:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800a994:	bf00      	nop
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr
	...

0800a9a0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b086      	sub	sp, #24
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	60f8      	str	r0, [r7, #12]
 800a9a8:	60b9      	str	r1, [r7, #8]
 800a9aa:	607a      	str	r2, [r7, #4]
 800a9ac:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d108      	bne.n	800a9c6 <netif_add+0x26>
 800a9b4:	4b57      	ldr	r3, [pc, #348]	; (800ab14 <netif_add+0x174>)
 800a9b6:	f240 1227 	movw	r2, #295	; 0x127
 800a9ba:	4957      	ldr	r1, [pc, #348]	; (800ab18 <netif_add+0x178>)
 800a9bc:	4857      	ldr	r0, [pc, #348]	; (800ab1c <netif_add+0x17c>)
 800a9be:	f00a fa71 	bl	8014ea4 <iprintf>
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	e0a2      	b.n	800ab0c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d108      	bne.n	800a9de <netif_add+0x3e>
 800a9cc:	4b51      	ldr	r3, [pc, #324]	; (800ab14 <netif_add+0x174>)
 800a9ce:	f44f 7294 	mov.w	r2, #296	; 0x128
 800a9d2:	4953      	ldr	r1, [pc, #332]	; (800ab20 <netif_add+0x180>)
 800a9d4:	4851      	ldr	r0, [pc, #324]	; (800ab1c <netif_add+0x17c>)
 800a9d6:	f00a fa65 	bl	8014ea4 <iprintf>
 800a9da:	2300      	movs	r3, #0
 800a9dc:	e096      	b.n	800ab0c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d101      	bne.n	800a9e8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800a9e4:	4b4f      	ldr	r3, [pc, #316]	; (800ab24 <netif_add+0x184>)
 800a9e6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d101      	bne.n	800a9f2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800a9ee:	4b4d      	ldr	r3, [pc, #308]	; (800ab24 <netif_add+0x184>)
 800a9f0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d101      	bne.n	800a9fc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800a9f8:	4b4a      	ldr	r3, [pc, #296]	; (800ab24 <netif_add+0x184>)
 800a9fa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2200      	movs	r2, #0
 800aa06:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	4a45      	ldr	r2, [pc, #276]	; (800ab28 <netif_add+0x188>)
 800aa12:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2200      	movs	r2, #0
 800aa18:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	2200      	movs	r2, #0
 800aa26:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	6a3a      	ldr	r2, [r7, #32]
 800aa2c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800aa2e:	4b3f      	ldr	r3, [pc, #252]	; (800ab2c <netif_add+0x18c>)
 800aa30:	781a      	ldrb	r2, [r3, #0]
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa3c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	687a      	ldr	r2, [r7, #4]
 800aa42:	68b9      	ldr	r1, [r7, #8]
 800aa44:	68f8      	ldr	r0, [r7, #12]
 800aa46:	f000 f913 	bl	800ac70 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800aa4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4c:	68f8      	ldr	r0, [r7, #12]
 800aa4e:	4798      	blx	r3
 800aa50:	4603      	mov	r3, r0
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d001      	beq.n	800aa5a <netif_add+0xba>
    return NULL;
 800aa56:	2300      	movs	r3, #0
 800aa58:	e058      	b.n	800ab0c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aa60:	2bff      	cmp	r3, #255	; 0xff
 800aa62:	d103      	bne.n	800aa6c <netif_add+0xcc>
        netif->num = 0;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	2200      	movs	r2, #0
 800aa68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800aa70:	4b2f      	ldr	r3, [pc, #188]	; (800ab30 <netif_add+0x190>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	617b      	str	r3, [r7, #20]
 800aa76:	e02b      	b.n	800aad0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800aa78:	697a      	ldr	r2, [r7, #20]
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d106      	bne.n	800aa8e <netif_add+0xee>
 800aa80:	4b24      	ldr	r3, [pc, #144]	; (800ab14 <netif_add+0x174>)
 800aa82:	f240 128b 	movw	r2, #395	; 0x18b
 800aa86:	492b      	ldr	r1, [pc, #172]	; (800ab34 <netif_add+0x194>)
 800aa88:	4824      	ldr	r0, [pc, #144]	; (800ab1c <netif_add+0x17c>)
 800aa8a:	f00a fa0b 	bl	8014ea4 <iprintf>
        num_netifs++;
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	3301      	adds	r3, #1
 800aa92:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	2bff      	cmp	r3, #255	; 0xff
 800aa98:	dd06      	ble.n	800aaa8 <netif_add+0x108>
 800aa9a:	4b1e      	ldr	r3, [pc, #120]	; (800ab14 <netif_add+0x174>)
 800aa9c:	f240 128d 	movw	r2, #397	; 0x18d
 800aaa0:	4925      	ldr	r1, [pc, #148]	; (800ab38 <netif_add+0x198>)
 800aaa2:	481e      	ldr	r0, [pc, #120]	; (800ab1c <netif_add+0x17c>)
 800aaa4:	f00a f9fe 	bl	8014ea4 <iprintf>
        if (netif2->num == netif->num) {
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d108      	bne.n	800aaca <netif_add+0x12a>
          netif->num++;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aabe:	3301      	adds	r3, #1
 800aac0:	b2da      	uxtb	r2, r3
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800aac8:	e005      	b.n	800aad6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	617b      	str	r3, [r7, #20]
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d1d0      	bne.n	800aa78 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d1be      	bne.n	800aa5a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aae2:	2bfe      	cmp	r3, #254	; 0xfe
 800aae4:	d103      	bne.n	800aaee <netif_add+0x14e>
    netif_num = 0;
 800aae6:	4b11      	ldr	r3, [pc, #68]	; (800ab2c <netif_add+0x18c>)
 800aae8:	2200      	movs	r2, #0
 800aaea:	701a      	strb	r2, [r3, #0]
 800aaec:	e006      	b.n	800aafc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	b2da      	uxtb	r2, r3
 800aaf8:	4b0c      	ldr	r3, [pc, #48]	; (800ab2c <netif_add+0x18c>)
 800aafa:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800aafc:	4b0c      	ldr	r3, [pc, #48]	; (800ab30 <netif_add+0x190>)
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ab04:	4a0a      	ldr	r2, [pc, #40]	; (800ab30 <netif_add+0x190>)
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3718      	adds	r7, #24
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}
 800ab14:	08016e60 	.word	0x08016e60
 800ab18:	08016ef4 	.word	0x08016ef4
 800ab1c:	08016eb0 	.word	0x08016eb0
 800ab20:	08016f10 	.word	0x08016f10
 800ab24:	0801964c 	.word	0x0801964c
 800ab28:	0800af4b 	.word	0x0800af4b
 800ab2c:	2000409c 	.word	0x2000409c
 800ab30:	2000ab08 	.word	0x2000ab08
 800ab34:	08016f34 	.word	0x08016f34
 800ab38:	08016f48 	.word	0x08016f48

0800ab3c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b082      	sub	sp, #8
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800ab46:	6839      	ldr	r1, [r7, #0]
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f002 fe8d 	bl	800d868 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800ab4e:	6839      	ldr	r1, [r7, #0]
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f007 fc2f 	bl	80123b4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800ab56:	bf00      	nop
 800ab58:	3708      	adds	r7, #8
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
	...

0800ab60 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b086      	sub	sp, #24
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	60f8      	str	r0, [r7, #12]
 800ab68:	60b9      	str	r1, [r7, #8]
 800ab6a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d106      	bne.n	800ab80 <netif_do_set_ipaddr+0x20>
 800ab72:	4b1d      	ldr	r3, [pc, #116]	; (800abe8 <netif_do_set_ipaddr+0x88>)
 800ab74:	f240 12cb 	movw	r2, #459	; 0x1cb
 800ab78:	491c      	ldr	r1, [pc, #112]	; (800abec <netif_do_set_ipaddr+0x8c>)
 800ab7a:	481d      	ldr	r0, [pc, #116]	; (800abf0 <netif_do_set_ipaddr+0x90>)
 800ab7c:	f00a f992 	bl	8014ea4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d106      	bne.n	800ab94 <netif_do_set_ipaddr+0x34>
 800ab86:	4b18      	ldr	r3, [pc, #96]	; (800abe8 <netif_do_set_ipaddr+0x88>)
 800ab88:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800ab8c:	4917      	ldr	r1, [pc, #92]	; (800abec <netif_do_set_ipaddr+0x8c>)
 800ab8e:	4818      	ldr	r0, [pc, #96]	; (800abf0 <netif_do_set_ipaddr+0x90>)
 800ab90:	f00a f988 	bl	8014ea4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	681a      	ldr	r2, [r3, #0]
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	3304      	adds	r3, #4
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d01c      	beq.n	800abdc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	3304      	adds	r3, #4
 800abac:	681a      	ldr	r2, [r3, #0]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800abb2:	f107 0314 	add.w	r3, r7, #20
 800abb6:	4619      	mov	r1, r3
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f7ff ffbf 	bl	800ab3c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d002      	beq.n	800abca <netif_do_set_ipaddr+0x6a>
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	e000      	b.n	800abcc <netif_do_set_ipaddr+0x6c>
 800abca:	2300      	movs	r3, #0
 800abcc:	68fa      	ldr	r2, [r7, #12]
 800abce:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800abd0:	2101      	movs	r1, #1
 800abd2:	68f8      	ldr	r0, [r7, #12]
 800abd4:	f000 f8d2 	bl	800ad7c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800abd8:	2301      	movs	r3, #1
 800abda:	e000      	b.n	800abde <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800abdc:	2300      	movs	r3, #0
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3718      	adds	r7, #24
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}
 800abe6:	bf00      	nop
 800abe8:	08016e60 	.word	0x08016e60
 800abec:	08016f78 	.word	0x08016f78
 800abf0:	08016eb0 	.word	0x08016eb0

0800abf4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b085      	sub	sp, #20
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	60f8      	str	r0, [r7, #12]
 800abfc:	60b9      	str	r1, [r7, #8]
 800abfe:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	681a      	ldr	r2, [r3, #0]
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	3308      	adds	r3, #8
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d00a      	beq.n	800ac24 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d002      	beq.n	800ac1a <netif_do_set_netmask+0x26>
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	e000      	b.n	800ac1c <netif_do_set_netmask+0x28>
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	68fa      	ldr	r2, [r7, #12]
 800ac1e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800ac20:	2301      	movs	r3, #1
 800ac22:	e000      	b.n	800ac26 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800ac24:	2300      	movs	r3, #0
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3714      	adds	r7, #20
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac30:	4770      	bx	lr

0800ac32 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800ac32:	b480      	push	{r7}
 800ac34:	b085      	sub	sp, #20
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	60f8      	str	r0, [r7, #12]
 800ac3a:	60b9      	str	r1, [r7, #8]
 800ac3c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	681a      	ldr	r2, [r3, #0]
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	330c      	adds	r3, #12
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d00a      	beq.n	800ac62 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d002      	beq.n	800ac58 <netif_do_set_gw+0x26>
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	e000      	b.n	800ac5a <netif_do_set_gw+0x28>
 800ac58:	2300      	movs	r3, #0
 800ac5a:	68fa      	ldr	r2, [r7, #12]
 800ac5c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800ac5e:	2301      	movs	r3, #1
 800ac60:	e000      	b.n	800ac64 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800ac62:	2300      	movs	r3, #0
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3714      	adds	r7, #20
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr

0800ac70 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b088      	sub	sp, #32
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	60f8      	str	r0, [r7, #12]
 800ac78:	60b9      	str	r1, [r7, #8]
 800ac7a:	607a      	str	r2, [r7, #4]
 800ac7c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800ac82:	2300      	movs	r3, #0
 800ac84:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d101      	bne.n	800ac90 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800ac8c:	4b1c      	ldr	r3, [pc, #112]	; (800ad00 <netif_set_addr+0x90>)
 800ac8e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d101      	bne.n	800ac9a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800ac96:	4b1a      	ldr	r3, [pc, #104]	; (800ad00 <netif_set_addr+0x90>)
 800ac98:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d101      	bne.n	800aca4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800aca0:	4b17      	ldr	r3, [pc, #92]	; (800ad00 <netif_set_addr+0x90>)
 800aca2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d003      	beq.n	800acb2 <netif_set_addr+0x42>
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d101      	bne.n	800acb6 <netif_set_addr+0x46>
 800acb2:	2301      	movs	r3, #1
 800acb4:	e000      	b.n	800acb8 <netif_set_addr+0x48>
 800acb6:	2300      	movs	r3, #0
 800acb8:	617b      	str	r3, [r7, #20]
  if (remove) {
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d006      	beq.n	800acce <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800acc0:	f107 0310 	add.w	r3, r7, #16
 800acc4:	461a      	mov	r2, r3
 800acc6:	68b9      	ldr	r1, [r7, #8]
 800acc8:	68f8      	ldr	r0, [r7, #12]
 800acca:	f7ff ff49 	bl	800ab60 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800acce:	69fa      	ldr	r2, [r7, #28]
 800acd0:	6879      	ldr	r1, [r7, #4]
 800acd2:	68f8      	ldr	r0, [r7, #12]
 800acd4:	f7ff ff8e 	bl	800abf4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800acd8:	69ba      	ldr	r2, [r7, #24]
 800acda:	6839      	ldr	r1, [r7, #0]
 800acdc:	68f8      	ldr	r0, [r7, #12]
 800acde:	f7ff ffa8 	bl	800ac32 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d106      	bne.n	800acf6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ace8:	f107 0310 	add.w	r3, r7, #16
 800acec:	461a      	mov	r2, r3
 800acee:	68b9      	ldr	r1, [r7, #8]
 800acf0:	68f8      	ldr	r0, [r7, #12]
 800acf2:	f7ff ff35 	bl	800ab60 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800acf6:	bf00      	nop
 800acf8:	3720      	adds	r7, #32
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop
 800ad00:	0801964c 	.word	0x0801964c

0800ad04 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b083      	sub	sp, #12
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ad0c:	4a04      	ldr	r2, [pc, #16]	; (800ad20 <netif_set_default+0x1c>)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ad12:	bf00      	nop
 800ad14:	370c      	adds	r7, #12
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr
 800ad1e:	bf00      	nop
 800ad20:	2000ab0c 	.word	0x2000ab0c

0800ad24 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b082      	sub	sp, #8
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d107      	bne.n	800ad42 <netif_set_up+0x1e>
 800ad32:	4b0f      	ldr	r3, [pc, #60]	; (800ad70 <netif_set_up+0x4c>)
 800ad34:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ad38:	490e      	ldr	r1, [pc, #56]	; (800ad74 <netif_set_up+0x50>)
 800ad3a:	480f      	ldr	r0, [pc, #60]	; (800ad78 <netif_set_up+0x54>)
 800ad3c:	f00a f8b2 	bl	8014ea4 <iprintf>
 800ad40:	e013      	b.n	800ad6a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ad48:	f003 0301 	and.w	r3, r3, #1
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d10c      	bne.n	800ad6a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ad56:	f043 0301 	orr.w	r3, r3, #1
 800ad5a:	b2da      	uxtb	r2, r3
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ad62:	2103      	movs	r1, #3
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f000 f809 	bl	800ad7c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ad6a:	3708      	adds	r7, #8
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	08016e60 	.word	0x08016e60
 800ad74:	08016fe8 	.word	0x08016fe8
 800ad78:	08016eb0 	.word	0x08016eb0

0800ad7c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b082      	sub	sp, #8
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	460b      	mov	r3, r1
 800ad86:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d106      	bne.n	800ad9c <netif_issue_reports+0x20>
 800ad8e:	4b18      	ldr	r3, [pc, #96]	; (800adf0 <netif_issue_reports+0x74>)
 800ad90:	f240 326d 	movw	r2, #877	; 0x36d
 800ad94:	4917      	ldr	r1, [pc, #92]	; (800adf4 <netif_issue_reports+0x78>)
 800ad96:	4818      	ldr	r0, [pc, #96]	; (800adf8 <netif_issue_reports+0x7c>)
 800ad98:	f00a f884 	bl	8014ea4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ada2:	f003 0304 	and.w	r3, r3, #4
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d01e      	beq.n	800ade8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800adb0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d017      	beq.n	800ade8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800adb8:	78fb      	ldrb	r3, [r7, #3]
 800adba:	f003 0301 	and.w	r3, r3, #1
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d013      	beq.n	800adea <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	3304      	adds	r3, #4
 800adc6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d00e      	beq.n	800adea <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800add2:	f003 0308 	and.w	r3, r3, #8
 800add6:	2b00      	cmp	r3, #0
 800add8:	d007      	beq.n	800adea <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	3304      	adds	r3, #4
 800adde:	4619      	mov	r1, r3
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f008 fa51 	bl	8013288 <etharp_request>
 800ade6:	e000      	b.n	800adea <netif_issue_reports+0x6e>
    return;
 800ade8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800adea:	3708      	adds	r7, #8
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}
 800adf0:	08016e60 	.word	0x08016e60
 800adf4:	08017004 	.word	0x08017004
 800adf8:	08016eb0 	.word	0x08016eb0

0800adfc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b082      	sub	sp, #8
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d107      	bne.n	800ae1a <netif_set_down+0x1e>
 800ae0a:	4b12      	ldr	r3, [pc, #72]	; (800ae54 <netif_set_down+0x58>)
 800ae0c:	f240 329b 	movw	r2, #923	; 0x39b
 800ae10:	4911      	ldr	r1, [pc, #68]	; (800ae58 <netif_set_down+0x5c>)
 800ae12:	4812      	ldr	r0, [pc, #72]	; (800ae5c <netif_set_down+0x60>)
 800ae14:	f00a f846 	bl	8014ea4 <iprintf>
 800ae18:	e019      	b.n	800ae4e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ae20:	f003 0301 	and.w	r3, r3, #1
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d012      	beq.n	800ae4e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ae2e:	f023 0301 	bic.w	r3, r3, #1
 800ae32:	b2da      	uxtb	r2, r3
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ae40:	f003 0308 	and.w	r3, r3, #8
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d002      	beq.n	800ae4e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f007 fddb 	bl	8012a04 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ae4e:	3708      	adds	r7, #8
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}
 800ae54:	08016e60 	.word	0x08016e60
 800ae58:	08017028 	.word	0x08017028
 800ae5c:	08016eb0 	.word	0x08016eb0

0800ae60 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b082      	sub	sp, #8
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d107      	bne.n	800ae7e <netif_set_link_up+0x1e>
 800ae6e:	4b13      	ldr	r3, [pc, #76]	; (800aebc <netif_set_link_up+0x5c>)
 800ae70:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800ae74:	4912      	ldr	r1, [pc, #72]	; (800aec0 <netif_set_link_up+0x60>)
 800ae76:	4813      	ldr	r0, [pc, #76]	; (800aec4 <netif_set_link_up+0x64>)
 800ae78:	f00a f814 	bl	8014ea4 <iprintf>
 800ae7c:	e01b      	b.n	800aeb6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ae84:	f003 0304 	and.w	r3, r3, #4
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d114      	bne.n	800aeb6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ae92:	f043 0304 	orr.w	r3, r3, #4
 800ae96:	b2da      	uxtb	r2, r3
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ae9e:	2103      	movs	r1, #3
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f7ff ff6b 	bl	800ad7c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	69db      	ldr	r3, [r3, #28]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d003      	beq.n	800aeb6 <netif_set_link_up+0x56>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	69db      	ldr	r3, [r3, #28]
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800aeb6:	3708      	adds	r7, #8
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}
 800aebc:	08016e60 	.word	0x08016e60
 800aec0:	08017048 	.word	0x08017048
 800aec4:	08016eb0 	.word	0x08016eb0

0800aec8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b082      	sub	sp, #8
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d107      	bne.n	800aee6 <netif_set_link_down+0x1e>
 800aed6:	4b11      	ldr	r3, [pc, #68]	; (800af1c <netif_set_link_down+0x54>)
 800aed8:	f240 4206 	movw	r2, #1030	; 0x406
 800aedc:	4910      	ldr	r1, [pc, #64]	; (800af20 <netif_set_link_down+0x58>)
 800aede:	4811      	ldr	r0, [pc, #68]	; (800af24 <netif_set_link_down+0x5c>)
 800aee0:	f009 ffe0 	bl	8014ea4 <iprintf>
 800aee4:	e017      	b.n	800af16 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aeec:	f003 0304 	and.w	r3, r3, #4
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d010      	beq.n	800af16 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aefa:	f023 0304 	bic.w	r3, r3, #4
 800aefe:	b2da      	uxtb	r2, r3
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	69db      	ldr	r3, [r3, #28]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d003      	beq.n	800af16 <netif_set_link_down+0x4e>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	69db      	ldr	r3, [r3, #28]
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800af16:	3708      	adds	r7, #8
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}
 800af1c:	08016e60 	.word	0x08016e60
 800af20:	0801706c 	.word	0x0801706c
 800af24:	08016eb0 	.word	0x08016eb0

0800af28 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800af28:	b480      	push	{r7}
 800af2a:	b083      	sub	sp, #12
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d002      	beq.n	800af3e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	683a      	ldr	r2, [r7, #0]
 800af3c:	61da      	str	r2, [r3, #28]
  }
}
 800af3e:	bf00      	nop
 800af40:	370c      	adds	r7, #12
 800af42:	46bd      	mov	sp, r7
 800af44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af48:	4770      	bx	lr

0800af4a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800af4a:	b480      	push	{r7}
 800af4c:	b085      	sub	sp, #20
 800af4e:	af00      	add	r7, sp, #0
 800af50:	60f8      	str	r0, [r7, #12]
 800af52:	60b9      	str	r1, [r7, #8]
 800af54:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800af56:	f06f 030b 	mvn.w	r3, #11
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3714      	adds	r7, #20
 800af5e:	46bd      	mov	sp, r7
 800af60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af64:	4770      	bx	lr
	...

0800af68 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800af68:	b480      	push	{r7}
 800af6a:	b085      	sub	sp, #20
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	4603      	mov	r3, r0
 800af70:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800af72:	79fb      	ldrb	r3, [r7, #7]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d013      	beq.n	800afa0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800af78:	4b0d      	ldr	r3, [pc, #52]	; (800afb0 <netif_get_by_index+0x48>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	60fb      	str	r3, [r7, #12]
 800af7e:	e00c      	b.n	800af9a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800af86:	3301      	adds	r3, #1
 800af88:	b2db      	uxtb	r3, r3
 800af8a:	79fa      	ldrb	r2, [r7, #7]
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d101      	bne.n	800af94 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	e006      	b.n	800afa2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	60fb      	str	r3, [r7, #12]
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d1ef      	bne.n	800af80 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800afa0:	2300      	movs	r3, #0
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3714      	adds	r7, #20
 800afa6:	46bd      	mov	sp, r7
 800afa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afac:	4770      	bx	lr
 800afae:	bf00      	nop
 800afb0:	2000ab08 	.word	0x2000ab08

0800afb4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b082      	sub	sp, #8
 800afb8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800afba:	f009 ff0d 	bl	8014dd8 <sys_arch_protect>
 800afbe:	6038      	str	r0, [r7, #0]
 800afc0:	4b0d      	ldr	r3, [pc, #52]	; (800aff8 <pbuf_free_ooseq+0x44>)
 800afc2:	2200      	movs	r2, #0
 800afc4:	701a      	strb	r2, [r3, #0]
 800afc6:	6838      	ldr	r0, [r7, #0]
 800afc8:	f009 ff14 	bl	8014df4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800afcc:	4b0b      	ldr	r3, [pc, #44]	; (800affc <pbuf_free_ooseq+0x48>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	607b      	str	r3, [r7, #4]
 800afd2:	e00a      	b.n	800afea <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d003      	beq.n	800afe4 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f002 fc81 	bl	800d8e4 <tcp_free_ooseq>
      return;
 800afe2:	e005      	b.n	800aff0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	68db      	ldr	r3, [r3, #12]
 800afe8:	607b      	str	r3, [r7, #4]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d1f1      	bne.n	800afd4 <pbuf_free_ooseq+0x20>
    }
  }
}
 800aff0:	3708      	adds	r7, #8
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	2000ab10 	.word	0x2000ab10
 800affc:	2000ab18 	.word	0x2000ab18

0800b000 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800b008:	f7ff ffd4 	bl	800afb4 <pbuf_free_ooseq>
}
 800b00c:	bf00      	nop
 800b00e:	3708      	adds	r7, #8
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}

0800b014 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b082      	sub	sp, #8
 800b018:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800b01a:	f009 fedd 	bl	8014dd8 <sys_arch_protect>
 800b01e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800b020:	4b0f      	ldr	r3, [pc, #60]	; (800b060 <pbuf_pool_is_empty+0x4c>)
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800b026:	4b0e      	ldr	r3, [pc, #56]	; (800b060 <pbuf_pool_is_empty+0x4c>)
 800b028:	2201      	movs	r2, #1
 800b02a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f009 fee1 	bl	8014df4 <sys_arch_unprotect>

  if (!queued) {
 800b032:	78fb      	ldrb	r3, [r7, #3]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d10f      	bne.n	800b058 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800b038:	2100      	movs	r1, #0
 800b03a:	480a      	ldr	r0, [pc, #40]	; (800b064 <pbuf_pool_is_empty+0x50>)
 800b03c:	f7fd fa9e 	bl	800857c <tcpip_try_callback>
 800b040:	4603      	mov	r3, r0
 800b042:	2b00      	cmp	r3, #0
 800b044:	d008      	beq.n	800b058 <pbuf_pool_is_empty+0x44>
 800b046:	f009 fec7 	bl	8014dd8 <sys_arch_protect>
 800b04a:	6078      	str	r0, [r7, #4]
 800b04c:	4b04      	ldr	r3, [pc, #16]	; (800b060 <pbuf_pool_is_empty+0x4c>)
 800b04e:	2200      	movs	r2, #0
 800b050:	701a      	strb	r2, [r3, #0]
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f009 fece 	bl	8014df4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b058:	bf00      	nop
 800b05a:	3708      	adds	r7, #8
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}
 800b060:	2000ab10 	.word	0x2000ab10
 800b064:	0800b001 	.word	0x0800b001

0800b068 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b068:	b480      	push	{r7}
 800b06a:	b085      	sub	sp, #20
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	60f8      	str	r0, [r7, #12]
 800b070:	60b9      	str	r1, [r7, #8]
 800b072:	4611      	mov	r1, r2
 800b074:	461a      	mov	r2, r3
 800b076:	460b      	mov	r3, r1
 800b078:	80fb      	strh	r3, [r7, #6]
 800b07a:	4613      	mov	r3, r2
 800b07c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	2200      	movs	r2, #0
 800b082:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	68ba      	ldr	r2, [r7, #8]
 800b088:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	88fa      	ldrh	r2, [r7, #6]
 800b08e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	88ba      	ldrh	r2, [r7, #4]
 800b094:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b096:	8b3b      	ldrh	r3, [r7, #24]
 800b098:	b2da      	uxtb	r2, r3
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	7f3a      	ldrb	r2, [r7, #28]
 800b0a2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	73da      	strb	r2, [r3, #15]
}
 800b0b0:	bf00      	nop
 800b0b2:	3714      	adds	r7, #20
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ba:	4770      	bx	lr

0800b0bc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b08c      	sub	sp, #48	; 0x30
 800b0c0:	af02      	add	r7, sp, #8
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	71fb      	strb	r3, [r7, #7]
 800b0c6:	460b      	mov	r3, r1
 800b0c8:	80bb      	strh	r3, [r7, #4]
 800b0ca:	4613      	mov	r3, r2
 800b0cc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b0ce:	79fb      	ldrb	r3, [r7, #7]
 800b0d0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b0d2:	887b      	ldrh	r3, [r7, #2]
 800b0d4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b0d8:	d07f      	beq.n	800b1da <pbuf_alloc+0x11e>
 800b0da:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b0de:	f300 80c8 	bgt.w	800b272 <pbuf_alloc+0x1b6>
 800b0e2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b0e6:	d010      	beq.n	800b10a <pbuf_alloc+0x4e>
 800b0e8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b0ec:	f300 80c1 	bgt.w	800b272 <pbuf_alloc+0x1b6>
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d002      	beq.n	800b0fa <pbuf_alloc+0x3e>
 800b0f4:	2b41      	cmp	r3, #65	; 0x41
 800b0f6:	f040 80bc 	bne.w	800b272 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b0fa:	887a      	ldrh	r2, [r7, #2]
 800b0fc:	88bb      	ldrh	r3, [r7, #4]
 800b0fe:	4619      	mov	r1, r3
 800b100:	2000      	movs	r0, #0
 800b102:	f000 f8d1 	bl	800b2a8 <pbuf_alloc_reference>
 800b106:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b108:	e0bd      	b.n	800b286 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b10a:	2300      	movs	r3, #0
 800b10c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b10e:	2300      	movs	r3, #0
 800b110:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b112:	88bb      	ldrh	r3, [r7, #4]
 800b114:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b116:	200c      	movs	r0, #12
 800b118:	f7ff fbbe 	bl	800a898 <memp_malloc>
 800b11c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d109      	bne.n	800b138 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b124:	f7ff ff76 	bl	800b014 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d002      	beq.n	800b134 <pbuf_alloc+0x78>
            pbuf_free(p);
 800b12e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b130:	f000 faa8 	bl	800b684 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b134:	2300      	movs	r3, #0
 800b136:	e0a7      	b.n	800b288 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b138:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b13a:	3303      	adds	r3, #3
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	f023 0303 	bic.w	r3, r3, #3
 800b142:	b29b      	uxth	r3, r3
 800b144:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b148:	b29b      	uxth	r3, r3
 800b14a:	8b7a      	ldrh	r2, [r7, #26]
 800b14c:	4293      	cmp	r3, r2
 800b14e:	bf28      	it	cs
 800b150:	4613      	movcs	r3, r2
 800b152:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b154:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b156:	3310      	adds	r3, #16
 800b158:	693a      	ldr	r2, [r7, #16]
 800b15a:	4413      	add	r3, r2
 800b15c:	3303      	adds	r3, #3
 800b15e:	f023 0303 	bic.w	r3, r3, #3
 800b162:	4618      	mov	r0, r3
 800b164:	89f9      	ldrh	r1, [r7, #14]
 800b166:	8b7a      	ldrh	r2, [r7, #26]
 800b168:	2300      	movs	r3, #0
 800b16a:	9301      	str	r3, [sp, #4]
 800b16c:	887b      	ldrh	r3, [r7, #2]
 800b16e:	9300      	str	r3, [sp, #0]
 800b170:	460b      	mov	r3, r1
 800b172:	4601      	mov	r1, r0
 800b174:	6938      	ldr	r0, [r7, #16]
 800b176:	f7ff ff77 	bl	800b068 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	f003 0303 	and.w	r3, r3, #3
 800b182:	2b00      	cmp	r3, #0
 800b184:	d006      	beq.n	800b194 <pbuf_alloc+0xd8>
 800b186:	4b42      	ldr	r3, [pc, #264]	; (800b290 <pbuf_alloc+0x1d4>)
 800b188:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b18c:	4941      	ldr	r1, [pc, #260]	; (800b294 <pbuf_alloc+0x1d8>)
 800b18e:	4842      	ldr	r0, [pc, #264]	; (800b298 <pbuf_alloc+0x1dc>)
 800b190:	f009 fe88 	bl	8014ea4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b194:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b196:	3303      	adds	r3, #3
 800b198:	f023 0303 	bic.w	r3, r3, #3
 800b19c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b1a0:	d106      	bne.n	800b1b0 <pbuf_alloc+0xf4>
 800b1a2:	4b3b      	ldr	r3, [pc, #236]	; (800b290 <pbuf_alloc+0x1d4>)
 800b1a4:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b1a8:	493c      	ldr	r1, [pc, #240]	; (800b29c <pbuf_alloc+0x1e0>)
 800b1aa:	483b      	ldr	r0, [pc, #236]	; (800b298 <pbuf_alloc+0x1dc>)
 800b1ac:	f009 fe7a 	bl	8014ea4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d102      	bne.n	800b1bc <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	627b      	str	r3, [r7, #36]	; 0x24
 800b1ba:	e002      	b.n	800b1c2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b1bc:	69fb      	ldr	r3, [r7, #28]
 800b1be:	693a      	ldr	r2, [r7, #16]
 800b1c0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b1c6:	8b7a      	ldrh	r2, [r7, #26]
 800b1c8:	89fb      	ldrh	r3, [r7, #14]
 800b1ca:	1ad3      	subs	r3, r2, r3
 800b1cc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b1d2:	8b7b      	ldrh	r3, [r7, #26]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d19e      	bne.n	800b116 <pbuf_alloc+0x5a>
      break;
 800b1d8:	e055      	b.n	800b286 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b1da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b1dc:	3303      	adds	r3, #3
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	f023 0303 	bic.w	r3, r3, #3
 800b1e4:	b29a      	uxth	r2, r3
 800b1e6:	88bb      	ldrh	r3, [r7, #4]
 800b1e8:	3303      	adds	r3, #3
 800b1ea:	b29b      	uxth	r3, r3
 800b1ec:	f023 0303 	bic.w	r3, r3, #3
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	4413      	add	r3, r2
 800b1f4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b1f6:	8b3b      	ldrh	r3, [r7, #24]
 800b1f8:	3310      	adds	r3, #16
 800b1fa:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b1fc:	8b3a      	ldrh	r2, [r7, #24]
 800b1fe:	88bb      	ldrh	r3, [r7, #4]
 800b200:	3303      	adds	r3, #3
 800b202:	f023 0303 	bic.w	r3, r3, #3
 800b206:	429a      	cmp	r2, r3
 800b208:	d306      	bcc.n	800b218 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b20a:	8afa      	ldrh	r2, [r7, #22]
 800b20c:	88bb      	ldrh	r3, [r7, #4]
 800b20e:	3303      	adds	r3, #3
 800b210:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b214:	429a      	cmp	r2, r3
 800b216:	d201      	bcs.n	800b21c <pbuf_alloc+0x160>
        return NULL;
 800b218:	2300      	movs	r3, #0
 800b21a:	e035      	b.n	800b288 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b21c:	8afb      	ldrh	r3, [r7, #22]
 800b21e:	4618      	mov	r0, r3
 800b220:	f7ff f990 	bl	800a544 <mem_malloc>
 800b224:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d101      	bne.n	800b230 <pbuf_alloc+0x174>
        return NULL;
 800b22c:	2300      	movs	r3, #0
 800b22e:	e02b      	b.n	800b288 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b230:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b232:	3310      	adds	r3, #16
 800b234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b236:	4413      	add	r3, r2
 800b238:	3303      	adds	r3, #3
 800b23a:	f023 0303 	bic.w	r3, r3, #3
 800b23e:	4618      	mov	r0, r3
 800b240:	88b9      	ldrh	r1, [r7, #4]
 800b242:	88ba      	ldrh	r2, [r7, #4]
 800b244:	2300      	movs	r3, #0
 800b246:	9301      	str	r3, [sp, #4]
 800b248:	887b      	ldrh	r3, [r7, #2]
 800b24a:	9300      	str	r3, [sp, #0]
 800b24c:	460b      	mov	r3, r1
 800b24e:	4601      	mov	r1, r0
 800b250:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b252:	f7ff ff09 	bl	800b068 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b258:	685b      	ldr	r3, [r3, #4]
 800b25a:	f003 0303 	and.w	r3, r3, #3
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d010      	beq.n	800b284 <pbuf_alloc+0x1c8>
 800b262:	4b0b      	ldr	r3, [pc, #44]	; (800b290 <pbuf_alloc+0x1d4>)
 800b264:	f44f 7291 	mov.w	r2, #290	; 0x122
 800b268:	490d      	ldr	r1, [pc, #52]	; (800b2a0 <pbuf_alloc+0x1e4>)
 800b26a:	480b      	ldr	r0, [pc, #44]	; (800b298 <pbuf_alloc+0x1dc>)
 800b26c:	f009 fe1a 	bl	8014ea4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b270:	e008      	b.n	800b284 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b272:	4b07      	ldr	r3, [pc, #28]	; (800b290 <pbuf_alloc+0x1d4>)
 800b274:	f240 1227 	movw	r2, #295	; 0x127
 800b278:	490a      	ldr	r1, [pc, #40]	; (800b2a4 <pbuf_alloc+0x1e8>)
 800b27a:	4807      	ldr	r0, [pc, #28]	; (800b298 <pbuf_alloc+0x1dc>)
 800b27c:	f009 fe12 	bl	8014ea4 <iprintf>
      return NULL;
 800b280:	2300      	movs	r3, #0
 800b282:	e001      	b.n	800b288 <pbuf_alloc+0x1cc>
      break;
 800b284:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3728      	adds	r7, #40	; 0x28
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}
 800b290:	08017090 	.word	0x08017090
 800b294:	080170c0 	.word	0x080170c0
 800b298:	080170f0 	.word	0x080170f0
 800b29c:	08017118 	.word	0x08017118
 800b2a0:	0801714c 	.word	0x0801714c
 800b2a4:	08017178 	.word	0x08017178

0800b2a8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b086      	sub	sp, #24
 800b2ac:	af02      	add	r7, sp, #8
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	807b      	strh	r3, [r7, #2]
 800b2b4:	4613      	mov	r3, r2
 800b2b6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b2b8:	883b      	ldrh	r3, [r7, #0]
 800b2ba:	2b41      	cmp	r3, #65	; 0x41
 800b2bc:	d009      	beq.n	800b2d2 <pbuf_alloc_reference+0x2a>
 800b2be:	883b      	ldrh	r3, [r7, #0]
 800b2c0:	2b01      	cmp	r3, #1
 800b2c2:	d006      	beq.n	800b2d2 <pbuf_alloc_reference+0x2a>
 800b2c4:	4b0f      	ldr	r3, [pc, #60]	; (800b304 <pbuf_alloc_reference+0x5c>)
 800b2c6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b2ca:	490f      	ldr	r1, [pc, #60]	; (800b308 <pbuf_alloc_reference+0x60>)
 800b2cc:	480f      	ldr	r0, [pc, #60]	; (800b30c <pbuf_alloc_reference+0x64>)
 800b2ce:	f009 fde9 	bl	8014ea4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b2d2:	200b      	movs	r0, #11
 800b2d4:	f7ff fae0 	bl	800a898 <memp_malloc>
 800b2d8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d101      	bne.n	800b2e4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	e00b      	b.n	800b2fc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b2e4:	8879      	ldrh	r1, [r7, #2]
 800b2e6:	887a      	ldrh	r2, [r7, #2]
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	9301      	str	r3, [sp, #4]
 800b2ec:	883b      	ldrh	r3, [r7, #0]
 800b2ee:	9300      	str	r3, [sp, #0]
 800b2f0:	460b      	mov	r3, r1
 800b2f2:	6879      	ldr	r1, [r7, #4]
 800b2f4:	68f8      	ldr	r0, [r7, #12]
 800b2f6:	f7ff feb7 	bl	800b068 <pbuf_init_alloced_pbuf>
  return p;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3710      	adds	r7, #16
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}
 800b304:	08017090 	.word	0x08017090
 800b308:	08017194 	.word	0x08017194
 800b30c:	080170f0 	.word	0x080170f0

0800b310 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b088      	sub	sp, #32
 800b314:	af02      	add	r7, sp, #8
 800b316:	607b      	str	r3, [r7, #4]
 800b318:	4603      	mov	r3, r0
 800b31a:	73fb      	strb	r3, [r7, #15]
 800b31c:	460b      	mov	r3, r1
 800b31e:	81bb      	strh	r3, [r7, #12]
 800b320:	4613      	mov	r3, r2
 800b322:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b324:	7bfb      	ldrb	r3, [r7, #15]
 800b326:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b328:	8a7b      	ldrh	r3, [r7, #18]
 800b32a:	3303      	adds	r3, #3
 800b32c:	f023 0203 	bic.w	r2, r3, #3
 800b330:	89bb      	ldrh	r3, [r7, #12]
 800b332:	441a      	add	r2, r3
 800b334:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b336:	429a      	cmp	r2, r3
 800b338:	d901      	bls.n	800b33e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b33a:	2300      	movs	r3, #0
 800b33c:	e018      	b.n	800b370 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b33e:	6a3b      	ldr	r3, [r7, #32]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d007      	beq.n	800b354 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b344:	8a7b      	ldrh	r3, [r7, #18]
 800b346:	3303      	adds	r3, #3
 800b348:	f023 0303 	bic.w	r3, r3, #3
 800b34c:	6a3a      	ldr	r2, [r7, #32]
 800b34e:	4413      	add	r3, r2
 800b350:	617b      	str	r3, [r7, #20]
 800b352:	e001      	b.n	800b358 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b354:	2300      	movs	r3, #0
 800b356:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	89b9      	ldrh	r1, [r7, #12]
 800b35c:	89ba      	ldrh	r2, [r7, #12]
 800b35e:	2302      	movs	r3, #2
 800b360:	9301      	str	r3, [sp, #4]
 800b362:	897b      	ldrh	r3, [r7, #10]
 800b364:	9300      	str	r3, [sp, #0]
 800b366:	460b      	mov	r3, r1
 800b368:	6979      	ldr	r1, [r7, #20]
 800b36a:	f7ff fe7d 	bl	800b068 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b36e:	687b      	ldr	r3, [r7, #4]
}
 800b370:	4618      	mov	r0, r3
 800b372:	3718      	adds	r7, #24
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}

0800b378 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b084      	sub	sp, #16
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	460b      	mov	r3, r1
 800b382:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d106      	bne.n	800b398 <pbuf_realloc+0x20>
 800b38a:	4b3a      	ldr	r3, [pc, #232]	; (800b474 <pbuf_realloc+0xfc>)
 800b38c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b390:	4939      	ldr	r1, [pc, #228]	; (800b478 <pbuf_realloc+0x100>)
 800b392:	483a      	ldr	r0, [pc, #232]	; (800b47c <pbuf_realloc+0x104>)
 800b394:	f009 fd86 	bl	8014ea4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	891b      	ldrh	r3, [r3, #8]
 800b39c:	887a      	ldrh	r2, [r7, #2]
 800b39e:	429a      	cmp	r2, r3
 800b3a0:	d263      	bcs.n	800b46a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	891a      	ldrh	r2, [r3, #8]
 800b3a6:	887b      	ldrh	r3, [r7, #2]
 800b3a8:	1ad3      	subs	r3, r2, r3
 800b3aa:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b3ac:	887b      	ldrh	r3, [r7, #2]
 800b3ae:	817b      	strh	r3, [r7, #10]
  q = p;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b3b4:	e018      	b.n	800b3e8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	895b      	ldrh	r3, [r3, #10]
 800b3ba:	897a      	ldrh	r2, [r7, #10]
 800b3bc:	1ad3      	subs	r3, r2, r3
 800b3be:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	891a      	ldrh	r2, [r3, #8]
 800b3c4:	893b      	ldrh	r3, [r7, #8]
 800b3c6:	1ad3      	subs	r3, r2, r3
 800b3c8:	b29a      	uxth	r2, r3
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d106      	bne.n	800b3e8 <pbuf_realloc+0x70>
 800b3da:	4b26      	ldr	r3, [pc, #152]	; (800b474 <pbuf_realloc+0xfc>)
 800b3dc:	f240 12af 	movw	r2, #431	; 0x1af
 800b3e0:	4927      	ldr	r1, [pc, #156]	; (800b480 <pbuf_realloc+0x108>)
 800b3e2:	4826      	ldr	r0, [pc, #152]	; (800b47c <pbuf_realloc+0x104>)
 800b3e4:	f009 fd5e 	bl	8014ea4 <iprintf>
  while (rem_len > q->len) {
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	895b      	ldrh	r3, [r3, #10]
 800b3ec:	897a      	ldrh	r2, [r7, #10]
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	d8e1      	bhi.n	800b3b6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	7b1b      	ldrb	r3, [r3, #12]
 800b3f6:	f003 030f 	and.w	r3, r3, #15
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d121      	bne.n	800b442 <pbuf_realloc+0xca>
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	895b      	ldrh	r3, [r3, #10]
 800b402:	897a      	ldrh	r2, [r7, #10]
 800b404:	429a      	cmp	r2, r3
 800b406:	d01c      	beq.n	800b442 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	7b5b      	ldrb	r3, [r3, #13]
 800b40c:	f003 0302 	and.w	r3, r3, #2
 800b410:	2b00      	cmp	r3, #0
 800b412:	d116      	bne.n	800b442 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	685a      	ldr	r2, [r3, #4]
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	1ad3      	subs	r3, r2, r3
 800b41c:	b29a      	uxth	r2, r3
 800b41e:	897b      	ldrh	r3, [r7, #10]
 800b420:	4413      	add	r3, r2
 800b422:	b29b      	uxth	r3, r3
 800b424:	4619      	mov	r1, r3
 800b426:	68f8      	ldr	r0, [r7, #12]
 800b428:	f7fe ff82 	bl	800a330 <mem_trim>
 800b42c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d106      	bne.n	800b442 <pbuf_realloc+0xca>
 800b434:	4b0f      	ldr	r3, [pc, #60]	; (800b474 <pbuf_realloc+0xfc>)
 800b436:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b43a:	4912      	ldr	r1, [pc, #72]	; (800b484 <pbuf_realloc+0x10c>)
 800b43c:	480f      	ldr	r0, [pc, #60]	; (800b47c <pbuf_realloc+0x104>)
 800b43e:	f009 fd31 	bl	8014ea4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	897a      	ldrh	r2, [r7, #10]
 800b446:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	895a      	ldrh	r2, [r3, #10]
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d004      	beq.n	800b462 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4618      	mov	r0, r3
 800b45e:	f000 f911 	bl	800b684 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	2200      	movs	r2, #0
 800b466:	601a      	str	r2, [r3, #0]
 800b468:	e000      	b.n	800b46c <pbuf_realloc+0xf4>
    return;
 800b46a:	bf00      	nop

}
 800b46c:	3710      	adds	r7, #16
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
 800b472:	bf00      	nop
 800b474:	08017090 	.word	0x08017090
 800b478:	080171a8 	.word	0x080171a8
 800b47c:	080170f0 	.word	0x080170f0
 800b480:	080171c0 	.word	0x080171c0
 800b484:	080171d8 	.word	0x080171d8

0800b488 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b086      	sub	sp, #24
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	60f8      	str	r0, [r7, #12]
 800b490:	60b9      	str	r1, [r7, #8]
 800b492:	4613      	mov	r3, r2
 800b494:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d106      	bne.n	800b4aa <pbuf_add_header_impl+0x22>
 800b49c:	4b2b      	ldr	r3, [pc, #172]	; (800b54c <pbuf_add_header_impl+0xc4>)
 800b49e:	f240 12df 	movw	r2, #479	; 0x1df
 800b4a2:	492b      	ldr	r1, [pc, #172]	; (800b550 <pbuf_add_header_impl+0xc8>)
 800b4a4:	482b      	ldr	r0, [pc, #172]	; (800b554 <pbuf_add_header_impl+0xcc>)
 800b4a6:	f009 fcfd 	bl	8014ea4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d003      	beq.n	800b4b8 <pbuf_add_header_impl+0x30>
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4b6:	d301      	bcc.n	800b4bc <pbuf_add_header_impl+0x34>
    return 1;
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	e043      	b.n	800b544 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d101      	bne.n	800b4c6 <pbuf_add_header_impl+0x3e>
    return 0;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	e03e      	b.n	800b544 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	891a      	ldrh	r2, [r3, #8]
 800b4ce:	8a7b      	ldrh	r3, [r7, #18]
 800b4d0:	4413      	add	r3, r2
 800b4d2:	b29b      	uxth	r3, r3
 800b4d4:	8a7a      	ldrh	r2, [r7, #18]
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d901      	bls.n	800b4de <pbuf_add_header_impl+0x56>
    return 1;
 800b4da:	2301      	movs	r3, #1
 800b4dc:	e032      	b.n	800b544 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	7b1b      	ldrb	r3, [r3, #12]
 800b4e2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b4e4:	8a3b      	ldrh	r3, [r7, #16]
 800b4e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d00c      	beq.n	800b508 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	685a      	ldr	r2, [r3, #4]
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	425b      	negs	r3, r3
 800b4f6:	4413      	add	r3, r2
 800b4f8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	3310      	adds	r3, #16
 800b4fe:	697a      	ldr	r2, [r7, #20]
 800b500:	429a      	cmp	r2, r3
 800b502:	d20d      	bcs.n	800b520 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b504:	2301      	movs	r3, #1
 800b506:	e01d      	b.n	800b544 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b508:	79fb      	ldrb	r3, [r7, #7]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d006      	beq.n	800b51c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	685a      	ldr	r2, [r3, #4]
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	425b      	negs	r3, r3
 800b516:	4413      	add	r3, r2
 800b518:	617b      	str	r3, [r7, #20]
 800b51a:	e001      	b.n	800b520 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b51c:	2301      	movs	r3, #1
 800b51e:	e011      	b.n	800b544 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	697a      	ldr	r2, [r7, #20]
 800b524:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	895a      	ldrh	r2, [r3, #10]
 800b52a:	8a7b      	ldrh	r3, [r7, #18]
 800b52c:	4413      	add	r3, r2
 800b52e:	b29a      	uxth	r2, r3
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	891a      	ldrh	r2, [r3, #8]
 800b538:	8a7b      	ldrh	r3, [r7, #18]
 800b53a:	4413      	add	r3, r2
 800b53c:	b29a      	uxth	r2, r3
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	811a      	strh	r2, [r3, #8]


  return 0;
 800b542:	2300      	movs	r3, #0
}
 800b544:	4618      	mov	r0, r3
 800b546:	3718      	adds	r7, #24
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}
 800b54c:	08017090 	.word	0x08017090
 800b550:	080171f4 	.word	0x080171f4
 800b554:	080170f0 	.word	0x080170f0

0800b558 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b082      	sub	sp, #8
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b562:	2200      	movs	r2, #0
 800b564:	6839      	ldr	r1, [r7, #0]
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f7ff ff8e 	bl	800b488 <pbuf_add_header_impl>
 800b56c:	4603      	mov	r3, r0
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3708      	adds	r7, #8
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}
	...

0800b578 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d106      	bne.n	800b596 <pbuf_remove_header+0x1e>
 800b588:	4b20      	ldr	r3, [pc, #128]	; (800b60c <pbuf_remove_header+0x94>)
 800b58a:	f240 224b 	movw	r2, #587	; 0x24b
 800b58e:	4920      	ldr	r1, [pc, #128]	; (800b610 <pbuf_remove_header+0x98>)
 800b590:	4820      	ldr	r0, [pc, #128]	; (800b614 <pbuf_remove_header+0x9c>)
 800b592:	f009 fc87 	bl	8014ea4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d003      	beq.n	800b5a4 <pbuf_remove_header+0x2c>
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5a2:	d301      	bcc.n	800b5a8 <pbuf_remove_header+0x30>
    return 1;
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	e02c      	b.n	800b602 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d101      	bne.n	800b5b2 <pbuf_remove_header+0x3a>
    return 0;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	e027      	b.n	800b602 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	895b      	ldrh	r3, [r3, #10]
 800b5ba:	89fa      	ldrh	r2, [r7, #14]
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d908      	bls.n	800b5d2 <pbuf_remove_header+0x5a>
 800b5c0:	4b12      	ldr	r3, [pc, #72]	; (800b60c <pbuf_remove_header+0x94>)
 800b5c2:	f240 2255 	movw	r2, #597	; 0x255
 800b5c6:	4914      	ldr	r1, [pc, #80]	; (800b618 <pbuf_remove_header+0xa0>)
 800b5c8:	4812      	ldr	r0, [pc, #72]	; (800b614 <pbuf_remove_header+0x9c>)
 800b5ca:	f009 fc6b 	bl	8014ea4 <iprintf>
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	e017      	b.n	800b602 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	685b      	ldr	r3, [r3, #4]
 800b5d6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	685a      	ldr	r2, [r3, #4]
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	441a      	add	r2, r3
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	895a      	ldrh	r2, [r3, #10]
 800b5e8:	89fb      	ldrh	r3, [r7, #14]
 800b5ea:	1ad3      	subs	r3, r2, r3
 800b5ec:	b29a      	uxth	r2, r3
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	891a      	ldrh	r2, [r3, #8]
 800b5f6:	89fb      	ldrh	r3, [r7, #14]
 800b5f8:	1ad3      	subs	r3, r2, r3
 800b5fa:	b29a      	uxth	r2, r3
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b600:	2300      	movs	r3, #0
}
 800b602:	4618      	mov	r0, r3
 800b604:	3710      	adds	r7, #16
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}
 800b60a:	bf00      	nop
 800b60c:	08017090 	.word	0x08017090
 800b610:	080171f4 	.word	0x080171f4
 800b614:	080170f0 	.word	0x080170f0
 800b618:	08017200 	.word	0x08017200

0800b61c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b082      	sub	sp, #8
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	460b      	mov	r3, r1
 800b626:	807b      	strh	r3, [r7, #2]
 800b628:	4613      	mov	r3, r2
 800b62a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b62c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b630:	2b00      	cmp	r3, #0
 800b632:	da08      	bge.n	800b646 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b634:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b638:	425b      	negs	r3, r3
 800b63a:	4619      	mov	r1, r3
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f7ff ff9b 	bl	800b578 <pbuf_remove_header>
 800b642:	4603      	mov	r3, r0
 800b644:	e007      	b.n	800b656 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b646:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b64a:	787a      	ldrb	r2, [r7, #1]
 800b64c:	4619      	mov	r1, r3
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f7ff ff1a 	bl	800b488 <pbuf_add_header_impl>
 800b654:	4603      	mov	r3, r0
  }
}
 800b656:	4618      	mov	r0, r3
 800b658:	3708      	adds	r7, #8
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}

0800b65e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b65e:	b580      	push	{r7, lr}
 800b660:	b082      	sub	sp, #8
 800b662:	af00      	add	r7, sp, #0
 800b664:	6078      	str	r0, [r7, #4]
 800b666:	460b      	mov	r3, r1
 800b668:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b66a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b66e:	2201      	movs	r2, #1
 800b670:	4619      	mov	r1, r3
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f7ff ffd2 	bl	800b61c <pbuf_header_impl>
 800b678:	4603      	mov	r3, r0
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3708      	adds	r7, #8
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}
	...

0800b684 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b088      	sub	sp, #32
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d10b      	bne.n	800b6aa <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d106      	bne.n	800b6a6 <pbuf_free+0x22>
 800b698:	4b3b      	ldr	r3, [pc, #236]	; (800b788 <pbuf_free+0x104>)
 800b69a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b69e:	493b      	ldr	r1, [pc, #236]	; (800b78c <pbuf_free+0x108>)
 800b6a0:	483b      	ldr	r0, [pc, #236]	; (800b790 <pbuf_free+0x10c>)
 800b6a2:	f009 fbff 	bl	8014ea4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	e069      	b.n	800b77e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b6ae:	e062      	b.n	800b776 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800b6b0:	f009 fb92 	bl	8014dd8 <sys_arch_protect>
 800b6b4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	7b9b      	ldrb	r3, [r3, #14]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d106      	bne.n	800b6cc <pbuf_free+0x48>
 800b6be:	4b32      	ldr	r3, [pc, #200]	; (800b788 <pbuf_free+0x104>)
 800b6c0:	f240 22f1 	movw	r2, #753	; 0x2f1
 800b6c4:	4933      	ldr	r1, [pc, #204]	; (800b794 <pbuf_free+0x110>)
 800b6c6:	4832      	ldr	r0, [pc, #200]	; (800b790 <pbuf_free+0x10c>)
 800b6c8:	f009 fbec 	bl	8014ea4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	7b9b      	ldrb	r3, [r3, #14]
 800b6d0:	3b01      	subs	r3, #1
 800b6d2:	b2da      	uxtb	r2, r3
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	739a      	strb	r2, [r3, #14]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	7b9b      	ldrb	r3, [r3, #14]
 800b6dc:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800b6de:	69b8      	ldr	r0, [r7, #24]
 800b6e0:	f009 fb88 	bl	8014df4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b6e4:	7dfb      	ldrb	r3, [r7, #23]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d143      	bne.n	800b772 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	7b1b      	ldrb	r3, [r3, #12]
 800b6f4:	f003 030f 	and.w	r3, r3, #15
 800b6f8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	7b5b      	ldrb	r3, [r3, #13]
 800b6fe:	f003 0302 	and.w	r3, r3, #2
 800b702:	2b00      	cmp	r3, #0
 800b704:	d011      	beq.n	800b72a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	691b      	ldr	r3, [r3, #16]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d106      	bne.n	800b720 <pbuf_free+0x9c>
 800b712:	4b1d      	ldr	r3, [pc, #116]	; (800b788 <pbuf_free+0x104>)
 800b714:	f240 22ff 	movw	r2, #767	; 0x2ff
 800b718:	491f      	ldr	r1, [pc, #124]	; (800b798 <pbuf_free+0x114>)
 800b71a:	481d      	ldr	r0, [pc, #116]	; (800b790 <pbuf_free+0x10c>)
 800b71c:	f009 fbc2 	bl	8014ea4 <iprintf>
        pc->custom_free_function(p);
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	691b      	ldr	r3, [r3, #16]
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	4798      	blx	r3
 800b728:	e01d      	b.n	800b766 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b72a:	7bfb      	ldrb	r3, [r7, #15]
 800b72c:	2b02      	cmp	r3, #2
 800b72e:	d104      	bne.n	800b73a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800b730:	6879      	ldr	r1, [r7, #4]
 800b732:	200c      	movs	r0, #12
 800b734:	f7ff f902 	bl	800a93c <memp_free>
 800b738:	e015      	b.n	800b766 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b73a:	7bfb      	ldrb	r3, [r7, #15]
 800b73c:	2b01      	cmp	r3, #1
 800b73e:	d104      	bne.n	800b74a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800b740:	6879      	ldr	r1, [r7, #4]
 800b742:	200b      	movs	r0, #11
 800b744:	f7ff f8fa 	bl	800a93c <memp_free>
 800b748:	e00d      	b.n	800b766 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b74a:	7bfb      	ldrb	r3, [r7, #15]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d103      	bne.n	800b758 <pbuf_free+0xd4>
          mem_free(p);
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f7fe fd5d 	bl	800a210 <mem_free>
 800b756:	e006      	b.n	800b766 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b758:	4b0b      	ldr	r3, [pc, #44]	; (800b788 <pbuf_free+0x104>)
 800b75a:	f240 320f 	movw	r2, #783	; 0x30f
 800b75e:	490f      	ldr	r1, [pc, #60]	; (800b79c <pbuf_free+0x118>)
 800b760:	480b      	ldr	r0, [pc, #44]	; (800b790 <pbuf_free+0x10c>)
 800b762:	f009 fb9f 	bl	8014ea4 <iprintf>
        }
      }
      count++;
 800b766:	7ffb      	ldrb	r3, [r7, #31]
 800b768:	3301      	adds	r3, #1
 800b76a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	607b      	str	r3, [r7, #4]
 800b770:	e001      	b.n	800b776 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b772:	2300      	movs	r3, #0
 800b774:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d199      	bne.n	800b6b0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b77c:	7ffb      	ldrb	r3, [r7, #31]
}
 800b77e:	4618      	mov	r0, r3
 800b780:	3720      	adds	r7, #32
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}
 800b786:	bf00      	nop
 800b788:	08017090 	.word	0x08017090
 800b78c:	080171f4 	.word	0x080171f4
 800b790:	080170f0 	.word	0x080170f0
 800b794:	08017220 	.word	0x08017220
 800b798:	08017238 	.word	0x08017238
 800b79c:	0801725c 	.word	0x0801725c

0800b7a0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	b085      	sub	sp, #20
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b7ac:	e005      	b.n	800b7ba <pbuf_clen+0x1a>
    ++len;
 800b7ae:	89fb      	ldrh	r3, [r7, #14]
 800b7b0:	3301      	adds	r3, #1
 800b7b2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d1f6      	bne.n	800b7ae <pbuf_clen+0xe>
  }
  return len;
 800b7c0:	89fb      	ldrh	r3, [r7, #14]
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3714      	adds	r7, #20
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7cc:	4770      	bx	lr
	...

0800b7d0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b084      	sub	sp, #16
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d016      	beq.n	800b80c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b7de:	f009 fafb 	bl	8014dd8 <sys_arch_protect>
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	7b9b      	ldrb	r3, [r3, #14]
 800b7e8:	3301      	adds	r3, #1
 800b7ea:	b2da      	uxtb	r2, r3
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	739a      	strb	r2, [r3, #14]
 800b7f0:	68f8      	ldr	r0, [r7, #12]
 800b7f2:	f009 faff 	bl	8014df4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	7b9b      	ldrb	r3, [r3, #14]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d106      	bne.n	800b80c <pbuf_ref+0x3c>
 800b7fe:	4b05      	ldr	r3, [pc, #20]	; (800b814 <pbuf_ref+0x44>)
 800b800:	f240 3242 	movw	r2, #834	; 0x342
 800b804:	4904      	ldr	r1, [pc, #16]	; (800b818 <pbuf_ref+0x48>)
 800b806:	4805      	ldr	r0, [pc, #20]	; (800b81c <pbuf_ref+0x4c>)
 800b808:	f009 fb4c 	bl	8014ea4 <iprintf>
  }
}
 800b80c:	bf00      	nop
 800b80e:	3710      	adds	r7, #16
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}
 800b814:	08017090 	.word	0x08017090
 800b818:	08017270 	.word	0x08017270
 800b81c:	080170f0 	.word	0x080170f0

0800b820 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b084      	sub	sp, #16
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
 800b828:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d002      	beq.n	800b836 <pbuf_cat+0x16>
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d107      	bne.n	800b846 <pbuf_cat+0x26>
 800b836:	4b20      	ldr	r3, [pc, #128]	; (800b8b8 <pbuf_cat+0x98>)
 800b838:	f240 3259 	movw	r2, #857	; 0x359
 800b83c:	491f      	ldr	r1, [pc, #124]	; (800b8bc <pbuf_cat+0x9c>)
 800b83e:	4820      	ldr	r0, [pc, #128]	; (800b8c0 <pbuf_cat+0xa0>)
 800b840:	f009 fb30 	bl	8014ea4 <iprintf>
 800b844:	e034      	b.n	800b8b0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	60fb      	str	r3, [r7, #12]
 800b84a:	e00a      	b.n	800b862 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	891a      	ldrh	r2, [r3, #8]
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	891b      	ldrh	r3, [r3, #8]
 800b854:	4413      	add	r3, r2
 800b856:	b29a      	uxth	r2, r3
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	60fb      	str	r3, [r7, #12]
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d1f0      	bne.n	800b84c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	891a      	ldrh	r2, [r3, #8]
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	895b      	ldrh	r3, [r3, #10]
 800b872:	429a      	cmp	r2, r3
 800b874:	d006      	beq.n	800b884 <pbuf_cat+0x64>
 800b876:	4b10      	ldr	r3, [pc, #64]	; (800b8b8 <pbuf_cat+0x98>)
 800b878:	f240 3262 	movw	r2, #866	; 0x362
 800b87c:	4911      	ldr	r1, [pc, #68]	; (800b8c4 <pbuf_cat+0xa4>)
 800b87e:	4810      	ldr	r0, [pc, #64]	; (800b8c0 <pbuf_cat+0xa0>)
 800b880:	f009 fb10 	bl	8014ea4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d006      	beq.n	800b89a <pbuf_cat+0x7a>
 800b88c:	4b0a      	ldr	r3, [pc, #40]	; (800b8b8 <pbuf_cat+0x98>)
 800b88e:	f240 3263 	movw	r2, #867	; 0x363
 800b892:	490d      	ldr	r1, [pc, #52]	; (800b8c8 <pbuf_cat+0xa8>)
 800b894:	480a      	ldr	r0, [pc, #40]	; (800b8c0 <pbuf_cat+0xa0>)
 800b896:	f009 fb05 	bl	8014ea4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	891a      	ldrh	r2, [r3, #8]
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	891b      	ldrh	r3, [r3, #8]
 800b8a2:	4413      	add	r3, r2
 800b8a4:	b29a      	uxth	r2, r3
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	683a      	ldr	r2, [r7, #0]
 800b8ae:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b8b0:	3710      	adds	r7, #16
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}
 800b8b6:	bf00      	nop
 800b8b8:	08017090 	.word	0x08017090
 800b8bc:	08017284 	.word	0x08017284
 800b8c0:	080170f0 	.word	0x080170f0
 800b8c4:	080172bc 	.word	0x080172bc
 800b8c8:	080172ec 	.word	0x080172ec

0800b8cc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b086      	sub	sp, #24
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	617b      	str	r3, [r7, #20]
 800b8da:	2300      	movs	r3, #0
 800b8dc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d008      	beq.n	800b8f6 <pbuf_copy+0x2a>
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d005      	beq.n	800b8f6 <pbuf_copy+0x2a>
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	891a      	ldrh	r2, [r3, #8]
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	891b      	ldrh	r3, [r3, #8]
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d209      	bcs.n	800b90a <pbuf_copy+0x3e>
 800b8f6:	4b57      	ldr	r3, [pc, #348]	; (800ba54 <pbuf_copy+0x188>)
 800b8f8:	f240 32c9 	movw	r2, #969	; 0x3c9
 800b8fc:	4956      	ldr	r1, [pc, #344]	; (800ba58 <pbuf_copy+0x18c>)
 800b8fe:	4857      	ldr	r0, [pc, #348]	; (800ba5c <pbuf_copy+0x190>)
 800b900:	f009 fad0 	bl	8014ea4 <iprintf>
 800b904:	f06f 030f 	mvn.w	r3, #15
 800b908:	e09f      	b.n	800ba4a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	895b      	ldrh	r3, [r3, #10]
 800b90e:	461a      	mov	r2, r3
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	1ad2      	subs	r2, r2, r3
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	895b      	ldrh	r3, [r3, #10]
 800b918:	4619      	mov	r1, r3
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	1acb      	subs	r3, r1, r3
 800b91e:	429a      	cmp	r2, r3
 800b920:	d306      	bcc.n	800b930 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	895b      	ldrh	r3, [r3, #10]
 800b926:	461a      	mov	r2, r3
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	1ad3      	subs	r3, r2, r3
 800b92c:	60fb      	str	r3, [r7, #12]
 800b92e:	e005      	b.n	800b93c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	895b      	ldrh	r3, [r3, #10]
 800b934:	461a      	mov	r2, r3
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	1ad3      	subs	r3, r2, r3
 800b93a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	685a      	ldr	r2, [r3, #4]
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	18d0      	adds	r0, r2, r3
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	685a      	ldr	r2, [r3, #4]
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	4413      	add	r3, r2
 800b94c:	68fa      	ldr	r2, [r7, #12]
 800b94e:	4619      	mov	r1, r3
 800b950:	f009 fa92 	bl	8014e78 <memcpy>
    offset_to += len;
 800b954:	697a      	ldr	r2, [r7, #20]
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	4413      	add	r3, r2
 800b95a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800b95c:	693a      	ldr	r2, [r7, #16]
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	4413      	add	r3, r2
 800b962:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	895b      	ldrh	r3, [r3, #10]
 800b968:	461a      	mov	r2, r3
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d906      	bls.n	800b97e <pbuf_copy+0xb2>
 800b970:	4b38      	ldr	r3, [pc, #224]	; (800ba54 <pbuf_copy+0x188>)
 800b972:	f240 32d9 	movw	r2, #985	; 0x3d9
 800b976:	493a      	ldr	r1, [pc, #232]	; (800ba60 <pbuf_copy+0x194>)
 800b978:	4838      	ldr	r0, [pc, #224]	; (800ba5c <pbuf_copy+0x190>)
 800b97a:	f009 fa93 	bl	8014ea4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	895b      	ldrh	r3, [r3, #10]
 800b982:	461a      	mov	r2, r3
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	4293      	cmp	r3, r2
 800b988:	d906      	bls.n	800b998 <pbuf_copy+0xcc>
 800b98a:	4b32      	ldr	r3, [pc, #200]	; (800ba54 <pbuf_copy+0x188>)
 800b98c:	f240 32da 	movw	r2, #986	; 0x3da
 800b990:	4934      	ldr	r1, [pc, #208]	; (800ba64 <pbuf_copy+0x198>)
 800b992:	4832      	ldr	r0, [pc, #200]	; (800ba5c <pbuf_copy+0x190>)
 800b994:	f009 fa86 	bl	8014ea4 <iprintf>
    if (offset_from >= p_from->len) {
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	895b      	ldrh	r3, [r3, #10]
 800b99c:	461a      	mov	r2, r3
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d304      	bcc.n	800b9ae <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	895b      	ldrh	r3, [r3, #10]
 800b9b2:	461a      	mov	r2, r3
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d114      	bne.n	800b9e4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d10c      	bne.n	800b9e4 <pbuf_copy+0x118>
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d009      	beq.n	800b9e4 <pbuf_copy+0x118>
 800b9d0:	4b20      	ldr	r3, [pc, #128]	; (800ba54 <pbuf_copy+0x188>)
 800b9d2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800b9d6:	4924      	ldr	r1, [pc, #144]	; (800ba68 <pbuf_copy+0x19c>)
 800b9d8:	4820      	ldr	r0, [pc, #128]	; (800ba5c <pbuf_copy+0x190>)
 800b9da:	f009 fa63 	bl	8014ea4 <iprintf>
 800b9de:	f06f 030f 	mvn.w	r3, #15
 800b9e2:	e032      	b.n	800ba4a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d013      	beq.n	800ba12 <pbuf_copy+0x146>
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	895a      	ldrh	r2, [r3, #10]
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	891b      	ldrh	r3, [r3, #8]
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d10d      	bne.n	800ba12 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d009      	beq.n	800ba12 <pbuf_copy+0x146>
 800b9fe:	4b15      	ldr	r3, [pc, #84]	; (800ba54 <pbuf_copy+0x188>)
 800ba00:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800ba04:	4919      	ldr	r1, [pc, #100]	; (800ba6c <pbuf_copy+0x1a0>)
 800ba06:	4815      	ldr	r0, [pc, #84]	; (800ba5c <pbuf_copy+0x190>)
 800ba08:	f009 fa4c 	bl	8014ea4 <iprintf>
 800ba0c:	f06f 0305 	mvn.w	r3, #5
 800ba10:	e01b      	b.n	800ba4a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d013      	beq.n	800ba40 <pbuf_copy+0x174>
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	895a      	ldrh	r2, [r3, #10]
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	891b      	ldrh	r3, [r3, #8]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d10d      	bne.n	800ba40 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d009      	beq.n	800ba40 <pbuf_copy+0x174>
 800ba2c:	4b09      	ldr	r3, [pc, #36]	; (800ba54 <pbuf_copy+0x188>)
 800ba2e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800ba32:	490e      	ldr	r1, [pc, #56]	; (800ba6c <pbuf_copy+0x1a0>)
 800ba34:	4809      	ldr	r0, [pc, #36]	; (800ba5c <pbuf_copy+0x190>)
 800ba36:	f009 fa35 	bl	8014ea4 <iprintf>
 800ba3a:	f06f 0305 	mvn.w	r3, #5
 800ba3e:	e004      	b.n	800ba4a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	f47f af61 	bne.w	800b90a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800ba48:	2300      	movs	r3, #0
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3718      	adds	r7, #24
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}
 800ba52:	bf00      	nop
 800ba54:	08017090 	.word	0x08017090
 800ba58:	08017338 	.word	0x08017338
 800ba5c:	080170f0 	.word	0x080170f0
 800ba60:	08017368 	.word	0x08017368
 800ba64:	08017380 	.word	0x08017380
 800ba68:	0801739c 	.word	0x0801739c
 800ba6c:	080173ac 	.word	0x080173ac

0800ba70 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b088      	sub	sp, #32
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	60f8      	str	r0, [r7, #12]
 800ba78:	60b9      	str	r1, [r7, #8]
 800ba7a:	4611      	mov	r1, r2
 800ba7c:	461a      	mov	r2, r3
 800ba7e:	460b      	mov	r3, r1
 800ba80:	80fb      	strh	r3, [r7, #6]
 800ba82:	4613      	mov	r3, r2
 800ba84:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800ba86:	2300      	movs	r3, #0
 800ba88:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d108      	bne.n	800baa6 <pbuf_copy_partial+0x36>
 800ba94:	4b2b      	ldr	r3, [pc, #172]	; (800bb44 <pbuf_copy_partial+0xd4>)
 800ba96:	f240 420a 	movw	r2, #1034	; 0x40a
 800ba9a:	492b      	ldr	r1, [pc, #172]	; (800bb48 <pbuf_copy_partial+0xd8>)
 800ba9c:	482b      	ldr	r0, [pc, #172]	; (800bb4c <pbuf_copy_partial+0xdc>)
 800ba9e:	f009 fa01 	bl	8014ea4 <iprintf>
 800baa2:	2300      	movs	r3, #0
 800baa4:	e04a      	b.n	800bb3c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d108      	bne.n	800babe <pbuf_copy_partial+0x4e>
 800baac:	4b25      	ldr	r3, [pc, #148]	; (800bb44 <pbuf_copy_partial+0xd4>)
 800baae:	f240 420b 	movw	r2, #1035	; 0x40b
 800bab2:	4927      	ldr	r1, [pc, #156]	; (800bb50 <pbuf_copy_partial+0xe0>)
 800bab4:	4825      	ldr	r0, [pc, #148]	; (800bb4c <pbuf_copy_partial+0xdc>)
 800bab6:	f009 f9f5 	bl	8014ea4 <iprintf>
 800baba:	2300      	movs	r3, #0
 800babc:	e03e      	b.n	800bb3c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	61fb      	str	r3, [r7, #28]
 800bac2:	e034      	b.n	800bb2e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800bac4:	88bb      	ldrh	r3, [r7, #4]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d00a      	beq.n	800bae0 <pbuf_copy_partial+0x70>
 800baca:	69fb      	ldr	r3, [r7, #28]
 800bacc:	895b      	ldrh	r3, [r3, #10]
 800bace:	88ba      	ldrh	r2, [r7, #4]
 800bad0:	429a      	cmp	r2, r3
 800bad2:	d305      	bcc.n	800bae0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800bad4:	69fb      	ldr	r3, [r7, #28]
 800bad6:	895b      	ldrh	r3, [r3, #10]
 800bad8:	88ba      	ldrh	r2, [r7, #4]
 800bada:	1ad3      	subs	r3, r2, r3
 800badc:	80bb      	strh	r3, [r7, #4]
 800bade:	e023      	b.n	800bb28 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800bae0:	69fb      	ldr	r3, [r7, #28]
 800bae2:	895a      	ldrh	r2, [r3, #10]
 800bae4:	88bb      	ldrh	r3, [r7, #4]
 800bae6:	1ad3      	subs	r3, r2, r3
 800bae8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800baea:	8b3a      	ldrh	r2, [r7, #24]
 800baec:	88fb      	ldrh	r3, [r7, #6]
 800baee:	429a      	cmp	r2, r3
 800baf0:	d901      	bls.n	800baf6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800baf2:	88fb      	ldrh	r3, [r7, #6]
 800baf4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800baf6:	8b7b      	ldrh	r3, [r7, #26]
 800baf8:	68ba      	ldr	r2, [r7, #8]
 800bafa:	18d0      	adds	r0, r2, r3
 800bafc:	69fb      	ldr	r3, [r7, #28]
 800bafe:	685a      	ldr	r2, [r3, #4]
 800bb00:	88bb      	ldrh	r3, [r7, #4]
 800bb02:	4413      	add	r3, r2
 800bb04:	8b3a      	ldrh	r2, [r7, #24]
 800bb06:	4619      	mov	r1, r3
 800bb08:	f009 f9b6 	bl	8014e78 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800bb0c:	8afa      	ldrh	r2, [r7, #22]
 800bb0e:	8b3b      	ldrh	r3, [r7, #24]
 800bb10:	4413      	add	r3, r2
 800bb12:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800bb14:	8b7a      	ldrh	r2, [r7, #26]
 800bb16:	8b3b      	ldrh	r3, [r7, #24]
 800bb18:	4413      	add	r3, r2
 800bb1a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800bb1c:	88fa      	ldrh	r2, [r7, #6]
 800bb1e:	8b3b      	ldrh	r3, [r7, #24]
 800bb20:	1ad3      	subs	r3, r2, r3
 800bb22:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800bb24:	2300      	movs	r3, #0
 800bb26:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bb28:	69fb      	ldr	r3, [r7, #28]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	61fb      	str	r3, [r7, #28]
 800bb2e:	88fb      	ldrh	r3, [r7, #6]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d002      	beq.n	800bb3a <pbuf_copy_partial+0xca>
 800bb34:	69fb      	ldr	r3, [r7, #28]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d1c4      	bne.n	800bac4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800bb3a:	8afb      	ldrh	r3, [r7, #22]
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3720      	adds	r7, #32
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}
 800bb44:	08017090 	.word	0x08017090
 800bb48:	080173d8 	.word	0x080173d8
 800bb4c:	080170f0 	.word	0x080170f0
 800bb50:	080173f8 	.word	0x080173f8

0800bb54 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b087      	sub	sp, #28
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	60f8      	str	r0, [r7, #12]
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	607a      	str	r2, [r7, #4]
 800bb60:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800bb62:	897b      	ldrh	r3, [r7, #10]
 800bb64:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800bb6a:	e007      	b.n	800bb7c <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	895b      	ldrh	r3, [r3, #10]
 800bb70:	8afa      	ldrh	r2, [r7, #22]
 800bb72:	1ad3      	subs	r3, r2, r3
 800bb74:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d004      	beq.n	800bb8c <pbuf_skip_const+0x38>
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	895b      	ldrh	r3, [r3, #10]
 800bb86:	8afa      	ldrh	r2, [r7, #22]
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	d2ef      	bcs.n	800bb6c <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d002      	beq.n	800bb98 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	8afa      	ldrh	r2, [r7, #22]
 800bb96:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800bb98:	693b      	ldr	r3, [r7, #16]
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	371c      	adds	r7, #28
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba4:	4770      	bx	lr
	...

0800bba8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b084      	sub	sp, #16
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	4603      	mov	r3, r0
 800bbb0:	603a      	str	r2, [r7, #0]
 800bbb2:	71fb      	strb	r3, [r7, #7]
 800bbb4:	460b      	mov	r3, r1
 800bbb6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	8919      	ldrh	r1, [r3, #8]
 800bbbc:	88ba      	ldrh	r2, [r7, #4]
 800bbbe:	79fb      	ldrb	r3, [r7, #7]
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f7ff fa7b 	bl	800b0bc <pbuf_alloc>
 800bbc6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d101      	bne.n	800bbd2 <pbuf_clone+0x2a>
    return NULL;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	e011      	b.n	800bbf6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800bbd2:	6839      	ldr	r1, [r7, #0]
 800bbd4:	68f8      	ldr	r0, [r7, #12]
 800bbd6:	f7ff fe79 	bl	800b8cc <pbuf_copy>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800bbde:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d006      	beq.n	800bbf4 <pbuf_clone+0x4c>
 800bbe6:	4b06      	ldr	r3, [pc, #24]	; (800bc00 <pbuf_clone+0x58>)
 800bbe8:	f240 5224 	movw	r2, #1316	; 0x524
 800bbec:	4905      	ldr	r1, [pc, #20]	; (800bc04 <pbuf_clone+0x5c>)
 800bbee:	4806      	ldr	r0, [pc, #24]	; (800bc08 <pbuf_clone+0x60>)
 800bbf0:	f009 f958 	bl	8014ea4 <iprintf>
  return q;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3710      	adds	r7, #16
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
 800bbfe:	bf00      	nop
 800bc00:	08017090 	.word	0x08017090
 800bc04:	08017504 	.word	0x08017504
 800bc08:	080170f0 	.word	0x080170f0

0800bc0c <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b084      	sub	sp, #16
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	460b      	mov	r3, r1
 800bc16:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 800bc18:	887b      	ldrh	r3, [r7, #2]
 800bc1a:	4619      	mov	r1, r3
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f000 f80c 	bl	800bc3a <pbuf_try_get_at>
 800bc22:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	db02      	blt.n	800bc30 <pbuf_get_at+0x24>
    return (u8_t)ret;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	b2db      	uxtb	r3, r3
 800bc2e:	e000      	b.n	800bc32 <pbuf_get_at+0x26>
  }
  return 0;
 800bc30:	2300      	movs	r3, #0
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3710      	adds	r7, #16
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}

0800bc3a <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 800bc3a:	b580      	push	{r7, lr}
 800bc3c:	b084      	sub	sp, #16
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	6078      	str	r0, [r7, #4]
 800bc42:	460b      	mov	r3, r1
 800bc44:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800bc46:	f107 020a 	add.w	r2, r7, #10
 800bc4a:	887b      	ldrh	r3, [r7, #2]
 800bc4c:	4619      	mov	r1, r3
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f7ff ff80 	bl	800bb54 <pbuf_skip_const>
 800bc54:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d00a      	beq.n	800bc72 <pbuf_try_get_at+0x38>
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	895a      	ldrh	r2, [r3, #10]
 800bc60:	897b      	ldrh	r3, [r7, #10]
 800bc62:	429a      	cmp	r2, r3
 800bc64:	d905      	bls.n	800bc72 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	685b      	ldr	r3, [r3, #4]
 800bc6a:	897a      	ldrh	r2, [r7, #10]
 800bc6c:	4413      	add	r3, r2
 800bc6e:	781b      	ldrb	r3, [r3, #0]
 800bc70:	e001      	b.n	800bc76 <pbuf_try_get_at+0x3c>
  }
  return -1;
 800bc72:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3710      	adds	r7, #16
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}
	...

0800bc80 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bc84:	f009 f99c 	bl	8014fc0 <rand>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	b29b      	uxth	r3, r3
 800bc8c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bc90:	b29b      	uxth	r3, r3
 800bc92:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800bc96:	b29a      	uxth	r2, r3
 800bc98:	4b01      	ldr	r3, [pc, #4]	; (800bca0 <tcp_init+0x20>)
 800bc9a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bc9c:	bf00      	nop
 800bc9e:	bd80      	pop	{r7, pc}
 800bca0:	20000010 	.word	0x20000010

0800bca4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b082      	sub	sp, #8
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	7d1b      	ldrb	r3, [r3, #20]
 800bcb0:	2b01      	cmp	r3, #1
 800bcb2:	d105      	bne.n	800bcc0 <tcp_free+0x1c>
 800bcb4:	4b06      	ldr	r3, [pc, #24]	; (800bcd0 <tcp_free+0x2c>)
 800bcb6:	22d4      	movs	r2, #212	; 0xd4
 800bcb8:	4906      	ldr	r1, [pc, #24]	; (800bcd4 <tcp_free+0x30>)
 800bcba:	4807      	ldr	r0, [pc, #28]	; (800bcd8 <tcp_free+0x34>)
 800bcbc:	f009 f8f2 	bl	8014ea4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800bcc0:	6879      	ldr	r1, [r7, #4]
 800bcc2:	2001      	movs	r0, #1
 800bcc4:	f7fe fe3a 	bl	800a93c <memp_free>
}
 800bcc8:	bf00      	nop
 800bcca:	3708      	adds	r7, #8
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}
 800bcd0:	08017590 	.word	0x08017590
 800bcd4:	080175c0 	.word	0x080175c0
 800bcd8:	080175d4 	.word	0x080175d4

0800bcdc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b082      	sub	sp, #8
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	7d1b      	ldrb	r3, [r3, #20]
 800bce8:	2b01      	cmp	r3, #1
 800bcea:	d105      	bne.n	800bcf8 <tcp_free_listen+0x1c>
 800bcec:	4b06      	ldr	r3, [pc, #24]	; (800bd08 <tcp_free_listen+0x2c>)
 800bcee:	22df      	movs	r2, #223	; 0xdf
 800bcf0:	4906      	ldr	r1, [pc, #24]	; (800bd0c <tcp_free_listen+0x30>)
 800bcf2:	4807      	ldr	r0, [pc, #28]	; (800bd10 <tcp_free_listen+0x34>)
 800bcf4:	f009 f8d6 	bl	8014ea4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800bcf8:	6879      	ldr	r1, [r7, #4]
 800bcfa:	2002      	movs	r0, #2
 800bcfc:	f7fe fe1e 	bl	800a93c <memp_free>
}
 800bd00:	bf00      	nop
 800bd02:	3708      	adds	r7, #8
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}
 800bd08:	08017590 	.word	0x08017590
 800bd0c:	080175fc 	.word	0x080175fc
 800bd10:	080175d4 	.word	0x080175d4

0800bd14 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800bd18:	f001 f898 	bl	800ce4c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800bd1c:	4b07      	ldr	r3, [pc, #28]	; (800bd3c <tcp_tmr+0x28>)
 800bd1e:	781b      	ldrb	r3, [r3, #0]
 800bd20:	3301      	adds	r3, #1
 800bd22:	b2da      	uxtb	r2, r3
 800bd24:	4b05      	ldr	r3, [pc, #20]	; (800bd3c <tcp_tmr+0x28>)
 800bd26:	701a      	strb	r2, [r3, #0]
 800bd28:	4b04      	ldr	r3, [pc, #16]	; (800bd3c <tcp_tmr+0x28>)
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	f003 0301 	and.w	r3, r3, #1
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d001      	beq.n	800bd38 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800bd34:	f000 fd4a 	bl	800c7cc <tcp_slowtmr>
  }
}
 800bd38:	bf00      	nop
 800bd3a:	bd80      	pop	{r7, pc}
 800bd3c:	2000409d 	.word	0x2000409d

0800bd40 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b084      	sub	sp, #16
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
 800bd48:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d105      	bne.n	800bd5c <tcp_remove_listener+0x1c>
 800bd50:	4b0d      	ldr	r3, [pc, #52]	; (800bd88 <tcp_remove_listener+0x48>)
 800bd52:	22ff      	movs	r2, #255	; 0xff
 800bd54:	490d      	ldr	r1, [pc, #52]	; (800bd8c <tcp_remove_listener+0x4c>)
 800bd56:	480e      	ldr	r0, [pc, #56]	; (800bd90 <tcp_remove_listener+0x50>)
 800bd58:	f009 f8a4 	bl	8014ea4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	60fb      	str	r3, [r7, #12]
 800bd60:	e00a      	b.n	800bd78 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd66:	683a      	ldr	r2, [r7, #0]
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	d102      	bne.n	800bd72 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	68db      	ldr	r3, [r3, #12]
 800bd76:	60fb      	str	r3, [r7, #12]
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d1f1      	bne.n	800bd62 <tcp_remove_listener+0x22>
    }
  }
}
 800bd7e:	bf00      	nop
 800bd80:	bf00      	nop
 800bd82:	3710      	adds	r7, #16
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}
 800bd88:	08017590 	.word	0x08017590
 800bd8c:	08017618 	.word	0x08017618
 800bd90:	080175d4 	.word	0x080175d4

0800bd94 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b084      	sub	sp, #16
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d106      	bne.n	800bdb0 <tcp_listen_closed+0x1c>
 800bda2:	4b14      	ldr	r3, [pc, #80]	; (800bdf4 <tcp_listen_closed+0x60>)
 800bda4:	f240 1211 	movw	r2, #273	; 0x111
 800bda8:	4913      	ldr	r1, [pc, #76]	; (800bdf8 <tcp_listen_closed+0x64>)
 800bdaa:	4814      	ldr	r0, [pc, #80]	; (800bdfc <tcp_listen_closed+0x68>)
 800bdac:	f009 f87a 	bl	8014ea4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	7d1b      	ldrb	r3, [r3, #20]
 800bdb4:	2b01      	cmp	r3, #1
 800bdb6:	d006      	beq.n	800bdc6 <tcp_listen_closed+0x32>
 800bdb8:	4b0e      	ldr	r3, [pc, #56]	; (800bdf4 <tcp_listen_closed+0x60>)
 800bdba:	f44f 7289 	mov.w	r2, #274	; 0x112
 800bdbe:	4910      	ldr	r1, [pc, #64]	; (800be00 <tcp_listen_closed+0x6c>)
 800bdc0:	480e      	ldr	r0, [pc, #56]	; (800bdfc <tcp_listen_closed+0x68>)
 800bdc2:	f009 f86f 	bl	8014ea4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	60fb      	str	r3, [r7, #12]
 800bdca:	e00b      	b.n	800bde4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800bdcc:	4a0d      	ldr	r2, [pc, #52]	; (800be04 <tcp_listen_closed+0x70>)
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	6879      	ldr	r1, [r7, #4]
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f7ff ffb1 	bl	800bd40 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	3301      	adds	r3, #1
 800bde2:	60fb      	str	r3, [r7, #12]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	2b03      	cmp	r3, #3
 800bde8:	d9f0      	bls.n	800bdcc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800bdea:	bf00      	nop
 800bdec:	bf00      	nop
 800bdee:	3710      	adds	r7, #16
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}
 800bdf4:	08017590 	.word	0x08017590
 800bdf8:	08017640 	.word	0x08017640
 800bdfc:	080175d4 	.word	0x080175d4
 800be00:	0801764c 	.word	0x0801764c
 800be04:	08019624 	.word	0x08019624

0800be08 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800be08:	b5b0      	push	{r4, r5, r7, lr}
 800be0a:	b088      	sub	sp, #32
 800be0c:	af04      	add	r7, sp, #16
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	460b      	mov	r3, r1
 800be12:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d106      	bne.n	800be28 <tcp_close_shutdown+0x20>
 800be1a:	4b63      	ldr	r3, [pc, #396]	; (800bfa8 <tcp_close_shutdown+0x1a0>)
 800be1c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800be20:	4962      	ldr	r1, [pc, #392]	; (800bfac <tcp_close_shutdown+0x1a4>)
 800be22:	4863      	ldr	r0, [pc, #396]	; (800bfb0 <tcp_close_shutdown+0x1a8>)
 800be24:	f009 f83e 	bl	8014ea4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800be28:	78fb      	ldrb	r3, [r7, #3]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d066      	beq.n	800befc <tcp_close_shutdown+0xf4>
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	7d1b      	ldrb	r3, [r3, #20]
 800be32:	2b04      	cmp	r3, #4
 800be34:	d003      	beq.n	800be3e <tcp_close_shutdown+0x36>
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	7d1b      	ldrb	r3, [r3, #20]
 800be3a:	2b07      	cmp	r3, #7
 800be3c:	d15e      	bne.n	800befc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be42:	2b00      	cmp	r3, #0
 800be44:	d104      	bne.n	800be50 <tcp_close_shutdown+0x48>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be4a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800be4e:	d055      	beq.n	800befc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	8b5b      	ldrh	r3, [r3, #26]
 800be54:	f003 0310 	and.w	r3, r3, #16
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d106      	bne.n	800be6a <tcp_close_shutdown+0x62>
 800be5c:	4b52      	ldr	r3, [pc, #328]	; (800bfa8 <tcp_close_shutdown+0x1a0>)
 800be5e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800be62:	4954      	ldr	r1, [pc, #336]	; (800bfb4 <tcp_close_shutdown+0x1ac>)
 800be64:	4852      	ldr	r0, [pc, #328]	; (800bfb0 <tcp_close_shutdown+0x1a8>)
 800be66:	f009 f81d 	bl	8014ea4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800be72:	687d      	ldr	r5, [r7, #4]
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	3304      	adds	r3, #4
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	8ad2      	ldrh	r2, [r2, #22]
 800be7c:	6879      	ldr	r1, [r7, #4]
 800be7e:	8b09      	ldrh	r1, [r1, #24]
 800be80:	9102      	str	r1, [sp, #8]
 800be82:	9201      	str	r2, [sp, #4]
 800be84:	9300      	str	r3, [sp, #0]
 800be86:	462b      	mov	r3, r5
 800be88:	4622      	mov	r2, r4
 800be8a:	4601      	mov	r1, r0
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f005 fd91 	bl	80119b4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f001 fb72 	bl	800d57c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800be98:	4b47      	ldr	r3, [pc, #284]	; (800bfb8 <tcp_close_shutdown+0x1b0>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	687a      	ldr	r2, [r7, #4]
 800be9e:	429a      	cmp	r2, r3
 800bea0:	d105      	bne.n	800beae <tcp_close_shutdown+0xa6>
 800bea2:	4b45      	ldr	r3, [pc, #276]	; (800bfb8 <tcp_close_shutdown+0x1b0>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	68db      	ldr	r3, [r3, #12]
 800bea8:	4a43      	ldr	r2, [pc, #268]	; (800bfb8 <tcp_close_shutdown+0x1b0>)
 800beaa:	6013      	str	r3, [r2, #0]
 800beac:	e013      	b.n	800bed6 <tcp_close_shutdown+0xce>
 800beae:	4b42      	ldr	r3, [pc, #264]	; (800bfb8 <tcp_close_shutdown+0x1b0>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	60fb      	str	r3, [r7, #12]
 800beb4:	e00c      	b.n	800bed0 <tcp_close_shutdown+0xc8>
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	68db      	ldr	r3, [r3, #12]
 800beba:	687a      	ldr	r2, [r7, #4]
 800bebc:	429a      	cmp	r2, r3
 800bebe:	d104      	bne.n	800beca <tcp_close_shutdown+0xc2>
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	68da      	ldr	r2, [r3, #12]
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	60da      	str	r2, [r3, #12]
 800bec8:	e005      	b.n	800bed6 <tcp_close_shutdown+0xce>
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	68db      	ldr	r3, [r3, #12]
 800bece:	60fb      	str	r3, [r7, #12]
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d1ef      	bne.n	800beb6 <tcp_close_shutdown+0xae>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2200      	movs	r2, #0
 800beda:	60da      	str	r2, [r3, #12]
 800bedc:	4b37      	ldr	r3, [pc, #220]	; (800bfbc <tcp_close_shutdown+0x1b4>)
 800bede:	2201      	movs	r2, #1
 800bee0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800bee2:	4b37      	ldr	r3, [pc, #220]	; (800bfc0 <tcp_close_shutdown+0x1b8>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	687a      	ldr	r2, [r7, #4]
 800bee8:	429a      	cmp	r2, r3
 800beea:	d102      	bne.n	800bef2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800beec:	f004 f806 	bl	800fefc <tcp_trigger_input_pcb_close>
 800bef0:	e002      	b.n	800bef8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f7ff fed6 	bl	800bca4 <tcp_free>
      }
      return ERR_OK;
 800bef8:	2300      	movs	r3, #0
 800befa:	e050      	b.n	800bf9e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	7d1b      	ldrb	r3, [r3, #20]
 800bf00:	2b02      	cmp	r3, #2
 800bf02:	d03b      	beq.n	800bf7c <tcp_close_shutdown+0x174>
 800bf04:	2b02      	cmp	r3, #2
 800bf06:	dc44      	bgt.n	800bf92 <tcp_close_shutdown+0x18a>
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d002      	beq.n	800bf12 <tcp_close_shutdown+0x10a>
 800bf0c:	2b01      	cmp	r3, #1
 800bf0e:	d02a      	beq.n	800bf66 <tcp_close_shutdown+0x15e>
 800bf10:	e03f      	b.n	800bf92 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	8adb      	ldrh	r3, [r3, #22]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d021      	beq.n	800bf5e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bf1a:	4b2a      	ldr	r3, [pc, #168]	; (800bfc4 <tcp_close_shutdown+0x1bc>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	687a      	ldr	r2, [r7, #4]
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d105      	bne.n	800bf30 <tcp_close_shutdown+0x128>
 800bf24:	4b27      	ldr	r3, [pc, #156]	; (800bfc4 <tcp_close_shutdown+0x1bc>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	68db      	ldr	r3, [r3, #12]
 800bf2a:	4a26      	ldr	r2, [pc, #152]	; (800bfc4 <tcp_close_shutdown+0x1bc>)
 800bf2c:	6013      	str	r3, [r2, #0]
 800bf2e:	e013      	b.n	800bf58 <tcp_close_shutdown+0x150>
 800bf30:	4b24      	ldr	r3, [pc, #144]	; (800bfc4 <tcp_close_shutdown+0x1bc>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	60bb      	str	r3, [r7, #8]
 800bf36:	e00c      	b.n	800bf52 <tcp_close_shutdown+0x14a>
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	68db      	ldr	r3, [r3, #12]
 800bf3c:	687a      	ldr	r2, [r7, #4]
 800bf3e:	429a      	cmp	r2, r3
 800bf40:	d104      	bne.n	800bf4c <tcp_close_shutdown+0x144>
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	68da      	ldr	r2, [r3, #12]
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	60da      	str	r2, [r3, #12]
 800bf4a:	e005      	b.n	800bf58 <tcp_close_shutdown+0x150>
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	68db      	ldr	r3, [r3, #12]
 800bf50:	60bb      	str	r3, [r7, #8]
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d1ef      	bne.n	800bf38 <tcp_close_shutdown+0x130>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f7ff fea0 	bl	800bca4 <tcp_free>
      break;
 800bf64:	e01a      	b.n	800bf9c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f7ff ff14 	bl	800bd94 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800bf6c:	6879      	ldr	r1, [r7, #4]
 800bf6e:	4816      	ldr	r0, [pc, #88]	; (800bfc8 <tcp_close_shutdown+0x1c0>)
 800bf70:	f001 fb54 	bl	800d61c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f7ff feb1 	bl	800bcdc <tcp_free_listen>
      break;
 800bf7a:	e00f      	b.n	800bf9c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800bf7c:	6879      	ldr	r1, [r7, #4]
 800bf7e:	480e      	ldr	r0, [pc, #56]	; (800bfb8 <tcp_close_shutdown+0x1b0>)
 800bf80:	f001 fb4c 	bl	800d61c <tcp_pcb_remove>
 800bf84:	4b0d      	ldr	r3, [pc, #52]	; (800bfbc <tcp_close_shutdown+0x1b4>)
 800bf86:	2201      	movs	r2, #1
 800bf88:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f7ff fe8a 	bl	800bca4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800bf90:	e004      	b.n	800bf9c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	f000 f81a 	bl	800bfcc <tcp_close_shutdown_fin>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	e000      	b.n	800bf9e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800bf9c:	2300      	movs	r3, #0
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3710      	adds	r7, #16
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bdb0      	pop	{r4, r5, r7, pc}
 800bfa6:	bf00      	nop
 800bfa8:	08017590 	.word	0x08017590
 800bfac:	08017664 	.word	0x08017664
 800bfb0:	080175d4 	.word	0x080175d4
 800bfb4:	08017684 	.word	0x08017684
 800bfb8:	2000ab18 	.word	0x2000ab18
 800bfbc:	2000ab14 	.word	0x2000ab14
 800bfc0:	2000ab2c 	.word	0x2000ab2c
 800bfc4:	2000ab24 	.word	0x2000ab24
 800bfc8:	2000ab20 	.word	0x2000ab20

0800bfcc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b084      	sub	sp, #16
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d106      	bne.n	800bfe8 <tcp_close_shutdown_fin+0x1c>
 800bfda:	4b2e      	ldr	r3, [pc, #184]	; (800c094 <tcp_close_shutdown_fin+0xc8>)
 800bfdc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800bfe0:	492d      	ldr	r1, [pc, #180]	; (800c098 <tcp_close_shutdown_fin+0xcc>)
 800bfe2:	482e      	ldr	r0, [pc, #184]	; (800c09c <tcp_close_shutdown_fin+0xd0>)
 800bfe4:	f008 ff5e 	bl	8014ea4 <iprintf>

  switch (pcb->state) {
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	7d1b      	ldrb	r3, [r3, #20]
 800bfec:	2b07      	cmp	r3, #7
 800bfee:	d020      	beq.n	800c032 <tcp_close_shutdown_fin+0x66>
 800bff0:	2b07      	cmp	r3, #7
 800bff2:	dc2b      	bgt.n	800c04c <tcp_close_shutdown_fin+0x80>
 800bff4:	2b03      	cmp	r3, #3
 800bff6:	d002      	beq.n	800bffe <tcp_close_shutdown_fin+0x32>
 800bff8:	2b04      	cmp	r3, #4
 800bffa:	d00d      	beq.n	800c018 <tcp_close_shutdown_fin+0x4c>
 800bffc:	e026      	b.n	800c04c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f004 fde6 	bl	8010bd0 <tcp_send_fin>
 800c004:	4603      	mov	r3, r0
 800c006:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c008:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d11f      	bne.n	800c050 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2205      	movs	r2, #5
 800c014:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c016:	e01b      	b.n	800c050 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f004 fdd9 	bl	8010bd0 <tcp_send_fin>
 800c01e:	4603      	mov	r3, r0
 800c020:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d114      	bne.n	800c054 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2205      	movs	r2, #5
 800c02e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c030:	e010      	b.n	800c054 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	f004 fdcc 	bl	8010bd0 <tcp_send_fin>
 800c038:	4603      	mov	r3, r0
 800c03a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c03c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d109      	bne.n	800c058 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2209      	movs	r2, #9
 800c048:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c04a:	e005      	b.n	800c058 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c04c:	2300      	movs	r3, #0
 800c04e:	e01c      	b.n	800c08a <tcp_close_shutdown_fin+0xbe>
      break;
 800c050:	bf00      	nop
 800c052:	e002      	b.n	800c05a <tcp_close_shutdown_fin+0x8e>
      break;
 800c054:	bf00      	nop
 800c056:	e000      	b.n	800c05a <tcp_close_shutdown_fin+0x8e>
      break;
 800c058:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c05a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d103      	bne.n	800c06a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f004 fef2 	bl	8010e4c <tcp_output>
 800c068:	e00d      	b.n	800c086 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c06a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c06e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c072:	d108      	bne.n	800c086 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	8b5b      	ldrh	r3, [r3, #26]
 800c078:	f043 0308 	orr.w	r3, r3, #8
 800c07c:	b29a      	uxth	r2, r3
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c082:	2300      	movs	r3, #0
 800c084:	e001      	b.n	800c08a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c086:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3710      	adds	r7, #16
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}
 800c092:	bf00      	nop
 800c094:	08017590 	.word	0x08017590
 800c098:	08017640 	.word	0x08017640
 800c09c:	080175d4 	.word	0x080175d4

0800c0a0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d109      	bne.n	800c0c2 <tcp_close+0x22>
 800c0ae:	4b0f      	ldr	r3, [pc, #60]	; (800c0ec <tcp_close+0x4c>)
 800c0b0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800c0b4:	490e      	ldr	r1, [pc, #56]	; (800c0f0 <tcp_close+0x50>)
 800c0b6:	480f      	ldr	r0, [pc, #60]	; (800c0f4 <tcp_close+0x54>)
 800c0b8:	f008 fef4 	bl	8014ea4 <iprintf>
 800c0bc:	f06f 030f 	mvn.w	r3, #15
 800c0c0:	e00f      	b.n	800c0e2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	7d1b      	ldrb	r3, [r3, #20]
 800c0c6:	2b01      	cmp	r3, #1
 800c0c8:	d006      	beq.n	800c0d8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	8b5b      	ldrh	r3, [r3, #26]
 800c0ce:	f043 0310 	orr.w	r3, r3, #16
 800c0d2:	b29a      	uxth	r2, r3
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c0d8:	2101      	movs	r1, #1
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f7ff fe94 	bl	800be08 <tcp_close_shutdown>
 800c0e0:	4603      	mov	r3, r0
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3708      	adds	r7, #8
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}
 800c0ea:	bf00      	nop
 800c0ec:	08017590 	.word	0x08017590
 800c0f0:	080176a0 	.word	0x080176a0
 800c0f4:	080175d4 	.word	0x080175d4

0800c0f8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b08e      	sub	sp, #56	; 0x38
 800c0fc:	af04      	add	r7, sp, #16
 800c0fe:	6078      	str	r0, [r7, #4]
 800c100:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d107      	bne.n	800c118 <tcp_abandon+0x20>
 800c108:	4b52      	ldr	r3, [pc, #328]	; (800c254 <tcp_abandon+0x15c>)
 800c10a:	f240 223d 	movw	r2, #573	; 0x23d
 800c10e:	4952      	ldr	r1, [pc, #328]	; (800c258 <tcp_abandon+0x160>)
 800c110:	4852      	ldr	r0, [pc, #328]	; (800c25c <tcp_abandon+0x164>)
 800c112:	f008 fec7 	bl	8014ea4 <iprintf>
 800c116:	e099      	b.n	800c24c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	7d1b      	ldrb	r3, [r3, #20]
 800c11c:	2b01      	cmp	r3, #1
 800c11e:	d106      	bne.n	800c12e <tcp_abandon+0x36>
 800c120:	4b4c      	ldr	r3, [pc, #304]	; (800c254 <tcp_abandon+0x15c>)
 800c122:	f44f 7210 	mov.w	r2, #576	; 0x240
 800c126:	494e      	ldr	r1, [pc, #312]	; (800c260 <tcp_abandon+0x168>)
 800c128:	484c      	ldr	r0, [pc, #304]	; (800c25c <tcp_abandon+0x164>)
 800c12a:	f008 febb 	bl	8014ea4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	7d1b      	ldrb	r3, [r3, #20]
 800c132:	2b0a      	cmp	r3, #10
 800c134:	d107      	bne.n	800c146 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c136:	6879      	ldr	r1, [r7, #4]
 800c138:	484a      	ldr	r0, [pc, #296]	; (800c264 <tcp_abandon+0x16c>)
 800c13a:	f001 fa6f 	bl	800d61c <tcp_pcb_remove>
    tcp_free(pcb);
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f7ff fdb0 	bl	800bca4 <tcp_free>
 800c144:	e082      	b.n	800c24c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c146:	2300      	movs	r3, #0
 800c148:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c14a:	2300      	movs	r3, #0
 800c14c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c152:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c158:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c160:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	691b      	ldr	r3, [r3, #16]
 800c166:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	7d1b      	ldrb	r3, [r3, #20]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d126      	bne.n	800c1be <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	8adb      	ldrh	r3, [r3, #22]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d02e      	beq.n	800c1d6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c178:	4b3b      	ldr	r3, [pc, #236]	; (800c268 <tcp_abandon+0x170>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	687a      	ldr	r2, [r7, #4]
 800c17e:	429a      	cmp	r2, r3
 800c180:	d105      	bne.n	800c18e <tcp_abandon+0x96>
 800c182:	4b39      	ldr	r3, [pc, #228]	; (800c268 <tcp_abandon+0x170>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	68db      	ldr	r3, [r3, #12]
 800c188:	4a37      	ldr	r2, [pc, #220]	; (800c268 <tcp_abandon+0x170>)
 800c18a:	6013      	str	r3, [r2, #0]
 800c18c:	e013      	b.n	800c1b6 <tcp_abandon+0xbe>
 800c18e:	4b36      	ldr	r3, [pc, #216]	; (800c268 <tcp_abandon+0x170>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	61fb      	str	r3, [r7, #28]
 800c194:	e00c      	b.n	800c1b0 <tcp_abandon+0xb8>
 800c196:	69fb      	ldr	r3, [r7, #28]
 800c198:	68db      	ldr	r3, [r3, #12]
 800c19a:	687a      	ldr	r2, [r7, #4]
 800c19c:	429a      	cmp	r2, r3
 800c19e:	d104      	bne.n	800c1aa <tcp_abandon+0xb2>
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	68da      	ldr	r2, [r3, #12]
 800c1a4:	69fb      	ldr	r3, [r7, #28]
 800c1a6:	60da      	str	r2, [r3, #12]
 800c1a8:	e005      	b.n	800c1b6 <tcp_abandon+0xbe>
 800c1aa:	69fb      	ldr	r3, [r7, #28]
 800c1ac:	68db      	ldr	r3, [r3, #12]
 800c1ae:	61fb      	str	r3, [r7, #28]
 800c1b0:	69fb      	ldr	r3, [r7, #28]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d1ef      	bne.n	800c196 <tcp_abandon+0x9e>
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	60da      	str	r2, [r3, #12]
 800c1bc:	e00b      	b.n	800c1d6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	8adb      	ldrh	r3, [r3, #22]
 800c1c6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c1c8:	6879      	ldr	r1, [r7, #4]
 800c1ca:	4828      	ldr	r0, [pc, #160]	; (800c26c <tcp_abandon+0x174>)
 800c1cc:	f001 fa26 	bl	800d61c <tcp_pcb_remove>
 800c1d0:	4b27      	ldr	r3, [pc, #156]	; (800c270 <tcp_abandon+0x178>)
 800c1d2:	2201      	movs	r2, #1
 800c1d4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d004      	beq.n	800c1e8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f000 ff12 	bl	800d00c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d004      	beq.n	800c1fa <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f000 ff09 	bl	800d00c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d004      	beq.n	800c20c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c206:	4618      	mov	r0, r3
 800c208:	f000 ff00 	bl	800d00c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d00e      	beq.n	800c230 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c212:	6879      	ldr	r1, [r7, #4]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	3304      	adds	r3, #4
 800c218:	687a      	ldr	r2, [r7, #4]
 800c21a:	8b12      	ldrh	r2, [r2, #24]
 800c21c:	9202      	str	r2, [sp, #8]
 800c21e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c220:	9201      	str	r2, [sp, #4]
 800c222:	9300      	str	r3, [sp, #0]
 800c224:	460b      	mov	r3, r1
 800c226:	697a      	ldr	r2, [r7, #20]
 800c228:	69b9      	ldr	r1, [r7, #24]
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f005 fbc2 	bl	80119b4 <tcp_rst>
    }
    last_state = pcb->state;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	7d1b      	ldrb	r3, [r3, #20]
 800c234:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f7ff fd34 	bl	800bca4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d004      	beq.n	800c24c <tcp_abandon+0x154>
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	f06f 010c 	mvn.w	r1, #12
 800c248:	68f8      	ldr	r0, [r7, #12]
 800c24a:	4798      	blx	r3
  }
}
 800c24c:	3728      	adds	r7, #40	; 0x28
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}
 800c252:	bf00      	nop
 800c254:	08017590 	.word	0x08017590
 800c258:	080176d4 	.word	0x080176d4
 800c25c:	080175d4 	.word	0x080175d4
 800c260:	080176f0 	.word	0x080176f0
 800c264:	2000ab28 	.word	0x2000ab28
 800c268:	2000ab24 	.word	0x2000ab24
 800c26c:	2000ab18 	.word	0x2000ab18
 800c270:	2000ab14 	.word	0x2000ab14

0800c274 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b082      	sub	sp, #8
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c27c:	2101      	movs	r1, #1
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f7ff ff3a 	bl	800c0f8 <tcp_abandon>
}
 800c284:	bf00      	nop
 800c286:	3708      	adds	r7, #8
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b088      	sub	sp, #32
 800c290:	af00      	add	r7, sp, #0
 800c292:	60f8      	str	r0, [r7, #12]
 800c294:	60b9      	str	r1, [r7, #8]
 800c296:	4613      	mov	r3, r2
 800c298:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800c29a:	2304      	movs	r3, #4
 800c29c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d101      	bne.n	800c2a8 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800c2a4:	4b3e      	ldr	r3, [pc, #248]	; (800c3a0 <tcp_bind+0x114>)
 800c2a6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d109      	bne.n	800c2c2 <tcp_bind+0x36>
 800c2ae:	4b3d      	ldr	r3, [pc, #244]	; (800c3a4 <tcp_bind+0x118>)
 800c2b0:	f240 22a9 	movw	r2, #681	; 0x2a9
 800c2b4:	493c      	ldr	r1, [pc, #240]	; (800c3a8 <tcp_bind+0x11c>)
 800c2b6:	483d      	ldr	r0, [pc, #244]	; (800c3ac <tcp_bind+0x120>)
 800c2b8:	f008 fdf4 	bl	8014ea4 <iprintf>
 800c2bc:	f06f 030f 	mvn.w	r3, #15
 800c2c0:	e06a      	b.n	800c398 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	7d1b      	ldrb	r3, [r3, #20]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d009      	beq.n	800c2de <tcp_bind+0x52>
 800c2ca:	4b36      	ldr	r3, [pc, #216]	; (800c3a4 <tcp_bind+0x118>)
 800c2cc:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c2d0:	4937      	ldr	r1, [pc, #220]	; (800c3b0 <tcp_bind+0x124>)
 800c2d2:	4836      	ldr	r0, [pc, #216]	; (800c3ac <tcp_bind+0x120>)
 800c2d4:	f008 fde6 	bl	8014ea4 <iprintf>
 800c2d8:	f06f 0305 	mvn.w	r3, #5
 800c2dc:	e05c      	b.n	800c398 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800c2de:	88fb      	ldrh	r3, [r7, #6]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d109      	bne.n	800c2f8 <tcp_bind+0x6c>
    port = tcp_new_port();
 800c2e4:	f000 f914 	bl	800c510 <tcp_new_port>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c2ec:	88fb      	ldrh	r3, [r7, #6]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d135      	bne.n	800c35e <tcp_bind+0xd2>
      return ERR_BUF;
 800c2f2:	f06f 0301 	mvn.w	r3, #1
 800c2f6:	e04f      	b.n	800c398 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	61fb      	str	r3, [r7, #28]
 800c2fc:	e02b      	b.n	800c356 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c2fe:	4a2d      	ldr	r2, [pc, #180]	; (800c3b4 <tcp_bind+0x128>)
 800c300:	69fb      	ldr	r3, [r7, #28]
 800c302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	61bb      	str	r3, [r7, #24]
 800c30a:	e01e      	b.n	800c34a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800c30c:	69bb      	ldr	r3, [r7, #24]
 800c30e:	8adb      	ldrh	r3, [r3, #22]
 800c310:	88fa      	ldrh	r2, [r7, #6]
 800c312:	429a      	cmp	r2, r3
 800c314:	d116      	bne.n	800c344 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800c316:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d010      	beq.n	800c33e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800c31c:	69bb      	ldr	r3, [r7, #24]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d00c      	beq.n	800c33e <tcp_bind+0xb2>
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d009      	beq.n	800c33e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d005      	beq.n	800c33e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800c332:	69bb      	ldr	r3, [r7, #24]
 800c334:	681a      	ldr	r2, [r3, #0]
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c33a:	429a      	cmp	r2, r3
 800c33c:	d102      	bne.n	800c344 <tcp_bind+0xb8>
              return ERR_USE;
 800c33e:	f06f 0307 	mvn.w	r3, #7
 800c342:	e029      	b.n	800c398 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c344:	69bb      	ldr	r3, [r7, #24]
 800c346:	68db      	ldr	r3, [r3, #12]
 800c348:	61bb      	str	r3, [r7, #24]
 800c34a:	69bb      	ldr	r3, [r7, #24]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d1dd      	bne.n	800c30c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800c350:	69fb      	ldr	r3, [r7, #28]
 800c352:	3301      	adds	r3, #1
 800c354:	61fb      	str	r3, [r7, #28]
 800c356:	69fa      	ldr	r2, [r7, #28]
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	429a      	cmp	r2, r3
 800c35c:	dbcf      	blt.n	800c2fe <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d00c      	beq.n	800c37e <tcp_bind+0xf2>
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d008      	beq.n	800c37e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d002      	beq.n	800c378 <tcp_bind+0xec>
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	e000      	b.n	800c37a <tcp_bind+0xee>
 800c378:	2300      	movs	r3, #0
 800c37a:	68fa      	ldr	r2, [r7, #12]
 800c37c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	88fa      	ldrh	r2, [r7, #6]
 800c382:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800c384:	4b0c      	ldr	r3, [pc, #48]	; (800c3b8 <tcp_bind+0x12c>)
 800c386:	681a      	ldr	r2, [r3, #0]
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	60da      	str	r2, [r3, #12]
 800c38c:	4a0a      	ldr	r2, [pc, #40]	; (800c3b8 <tcp_bind+0x12c>)
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	6013      	str	r3, [r2, #0]
 800c392:	f005 fcd1 	bl	8011d38 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800c396:	2300      	movs	r3, #0
}
 800c398:	4618      	mov	r0, r3
 800c39a:	3720      	adds	r7, #32
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}
 800c3a0:	0801964c 	.word	0x0801964c
 800c3a4:	08017590 	.word	0x08017590
 800c3a8:	08017724 	.word	0x08017724
 800c3ac:	080175d4 	.word	0x080175d4
 800c3b0:	0801773c 	.word	0x0801773c
 800c3b4:	08019624 	.word	0x08019624
 800c3b8:	2000ab24 	.word	0x2000ab24

0800c3bc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b084      	sub	sp, #16
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d106      	bne.n	800c3d8 <tcp_update_rcv_ann_wnd+0x1c>
 800c3ca:	4b25      	ldr	r3, [pc, #148]	; (800c460 <tcp_update_rcv_ann_wnd+0xa4>)
 800c3cc:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c3d0:	4924      	ldr	r1, [pc, #144]	; (800c464 <tcp_update_rcv_ann_wnd+0xa8>)
 800c3d2:	4825      	ldr	r0, [pc, #148]	; (800c468 <tcp_update_rcv_ann_wnd+0xac>)
 800c3d4:	f008 fd66 	bl	8014ea4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3dc:	687a      	ldr	r2, [r7, #4]
 800c3de:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c3e0:	4413      	add	r3, r2
 800c3e2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3e8:	687a      	ldr	r2, [r7, #4]
 800c3ea:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c3ec:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c3f0:	bf28      	it	cs
 800c3f2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c3f6:	b292      	uxth	r2, r2
 800c3f8:	4413      	add	r3, r2
 800c3fa:	68fa      	ldr	r2, [r7, #12]
 800c3fc:	1ad3      	subs	r3, r2, r3
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	db08      	blt.n	800c414 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c40e:	68fa      	ldr	r2, [r7, #12]
 800c410:	1ad3      	subs	r3, r2, r3
 800c412:	e020      	b.n	800c456 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c41c:	1ad3      	subs	r3, r2, r3
 800c41e:	2b00      	cmp	r3, #0
 800c420:	dd03      	ble.n	800c42a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2200      	movs	r2, #0
 800c426:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c428:	e014      	b.n	800c454 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c432:	1ad3      	subs	r3, r2, r3
 800c434:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c43c:	d306      	bcc.n	800c44c <tcp_update_rcv_ann_wnd+0x90>
 800c43e:	4b08      	ldr	r3, [pc, #32]	; (800c460 <tcp_update_rcv_ann_wnd+0xa4>)
 800c440:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c444:	4909      	ldr	r1, [pc, #36]	; (800c46c <tcp_update_rcv_ann_wnd+0xb0>)
 800c446:	4808      	ldr	r0, [pc, #32]	; (800c468 <tcp_update_rcv_ann_wnd+0xac>)
 800c448:	f008 fd2c 	bl	8014ea4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	b29a      	uxth	r2, r3
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c454:	2300      	movs	r3, #0
  }
}
 800c456:	4618      	mov	r0, r3
 800c458:	3710      	adds	r7, #16
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}
 800c45e:	bf00      	nop
 800c460:	08017590 	.word	0x08017590
 800c464:	080177ec 	.word	0x080177ec
 800c468:	080175d4 	.word	0x080175d4
 800c46c:	08017810 	.word	0x08017810

0800c470 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b084      	sub	sp, #16
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
 800c478:	460b      	mov	r3, r1
 800c47a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d107      	bne.n	800c492 <tcp_recved+0x22>
 800c482:	4b1f      	ldr	r3, [pc, #124]	; (800c500 <tcp_recved+0x90>)
 800c484:	f240 32cf 	movw	r2, #975	; 0x3cf
 800c488:	491e      	ldr	r1, [pc, #120]	; (800c504 <tcp_recved+0x94>)
 800c48a:	481f      	ldr	r0, [pc, #124]	; (800c508 <tcp_recved+0x98>)
 800c48c:	f008 fd0a 	bl	8014ea4 <iprintf>
 800c490:	e032      	b.n	800c4f8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	7d1b      	ldrb	r3, [r3, #20]
 800c496:	2b01      	cmp	r3, #1
 800c498:	d106      	bne.n	800c4a8 <tcp_recved+0x38>
 800c49a:	4b19      	ldr	r3, [pc, #100]	; (800c500 <tcp_recved+0x90>)
 800c49c:	f240 32d2 	movw	r2, #978	; 0x3d2
 800c4a0:	491a      	ldr	r1, [pc, #104]	; (800c50c <tcp_recved+0x9c>)
 800c4a2:	4819      	ldr	r0, [pc, #100]	; (800c508 <tcp_recved+0x98>)
 800c4a4:	f008 fcfe 	bl	8014ea4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c4ac:	887b      	ldrh	r3, [r7, #2]
 800c4ae:	4413      	add	r3, r2
 800c4b0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c4b2:	89fb      	ldrh	r3, [r7, #14]
 800c4b4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c4b8:	d804      	bhi.n	800c4c4 <tcp_recved+0x54>
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4be:	89fa      	ldrh	r2, [r7, #14]
 800c4c0:	429a      	cmp	r2, r3
 800c4c2:	d204      	bcs.n	800c4ce <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c4ca:	851a      	strh	r2, [r3, #40]	; 0x28
 800c4cc:	e002      	b.n	800c4d4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	89fa      	ldrh	r2, [r7, #14]
 800c4d2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f7ff ff71 	bl	800c3bc <tcp_update_rcv_ann_wnd>
 800c4da:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c4e2:	d309      	bcc.n	800c4f8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	8b5b      	ldrh	r3, [r3, #26]
 800c4e8:	f043 0302 	orr.w	r3, r3, #2
 800c4ec:	b29a      	uxth	r2, r3
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f004 fcaa 	bl	8010e4c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c4f8:	3710      	adds	r7, #16
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}
 800c4fe:	bf00      	nop
 800c500:	08017590 	.word	0x08017590
 800c504:	0801782c 	.word	0x0801782c
 800c508:	080175d4 	.word	0x080175d4
 800c50c:	08017844 	.word	0x08017844

0800c510 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800c510:	b480      	push	{r7}
 800c512:	b083      	sub	sp, #12
 800c514:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800c516:	2300      	movs	r3, #0
 800c518:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800c51a:	4b1e      	ldr	r3, [pc, #120]	; (800c594 <tcp_new_port+0x84>)
 800c51c:	881b      	ldrh	r3, [r3, #0]
 800c51e:	3301      	adds	r3, #1
 800c520:	b29a      	uxth	r2, r3
 800c522:	4b1c      	ldr	r3, [pc, #112]	; (800c594 <tcp_new_port+0x84>)
 800c524:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800c526:	4b1b      	ldr	r3, [pc, #108]	; (800c594 <tcp_new_port+0x84>)
 800c528:	881b      	ldrh	r3, [r3, #0]
 800c52a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c52e:	4293      	cmp	r3, r2
 800c530:	d103      	bne.n	800c53a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800c532:	4b18      	ldr	r3, [pc, #96]	; (800c594 <tcp_new_port+0x84>)
 800c534:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800c538:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c53a:	2300      	movs	r3, #0
 800c53c:	71fb      	strb	r3, [r7, #7]
 800c53e:	e01e      	b.n	800c57e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c540:	79fb      	ldrb	r3, [r7, #7]
 800c542:	4a15      	ldr	r2, [pc, #84]	; (800c598 <tcp_new_port+0x88>)
 800c544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	603b      	str	r3, [r7, #0]
 800c54c:	e011      	b.n	800c572 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	8ada      	ldrh	r2, [r3, #22]
 800c552:	4b10      	ldr	r3, [pc, #64]	; (800c594 <tcp_new_port+0x84>)
 800c554:	881b      	ldrh	r3, [r3, #0]
 800c556:	429a      	cmp	r2, r3
 800c558:	d108      	bne.n	800c56c <tcp_new_port+0x5c>
        n++;
 800c55a:	88bb      	ldrh	r3, [r7, #4]
 800c55c:	3301      	adds	r3, #1
 800c55e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800c560:	88bb      	ldrh	r3, [r7, #4]
 800c562:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c566:	d3d8      	bcc.n	800c51a <tcp_new_port+0xa>
          return 0;
 800c568:	2300      	movs	r3, #0
 800c56a:	e00d      	b.n	800c588 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	68db      	ldr	r3, [r3, #12]
 800c570:	603b      	str	r3, [r7, #0]
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d1ea      	bne.n	800c54e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c578:	79fb      	ldrb	r3, [r7, #7]
 800c57a:	3301      	adds	r3, #1
 800c57c:	71fb      	strb	r3, [r7, #7]
 800c57e:	79fb      	ldrb	r3, [r7, #7]
 800c580:	2b03      	cmp	r3, #3
 800c582:	d9dd      	bls.n	800c540 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800c584:	4b03      	ldr	r3, [pc, #12]	; (800c594 <tcp_new_port+0x84>)
 800c586:	881b      	ldrh	r3, [r3, #0]
}
 800c588:	4618      	mov	r0, r3
 800c58a:	370c      	adds	r7, #12
 800c58c:	46bd      	mov	sp, r7
 800c58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c592:	4770      	bx	lr
 800c594:	20000010 	.word	0x20000010
 800c598:	08019624 	.word	0x08019624

0800c59c <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b08a      	sub	sp, #40	; 0x28
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	60f8      	str	r0, [r7, #12]
 800c5a4:	60b9      	str	r1, [r7, #8]
 800c5a6:	603b      	str	r3, [r7, #0]
 800c5a8:	4613      	mov	r3, r2
 800c5aa:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d109      	bne.n	800c5ca <tcp_connect+0x2e>
 800c5b6:	4b7d      	ldr	r3, [pc, #500]	; (800c7ac <tcp_connect+0x210>)
 800c5b8:	f240 4235 	movw	r2, #1077	; 0x435
 800c5bc:	497c      	ldr	r1, [pc, #496]	; (800c7b0 <tcp_connect+0x214>)
 800c5be:	487d      	ldr	r0, [pc, #500]	; (800c7b4 <tcp_connect+0x218>)
 800c5c0:	f008 fc70 	bl	8014ea4 <iprintf>
 800c5c4:	f06f 030f 	mvn.w	r3, #15
 800c5c8:	e0ec      	b.n	800c7a4 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d109      	bne.n	800c5e4 <tcp_connect+0x48>
 800c5d0:	4b76      	ldr	r3, [pc, #472]	; (800c7ac <tcp_connect+0x210>)
 800c5d2:	f240 4236 	movw	r2, #1078	; 0x436
 800c5d6:	4978      	ldr	r1, [pc, #480]	; (800c7b8 <tcp_connect+0x21c>)
 800c5d8:	4876      	ldr	r0, [pc, #472]	; (800c7b4 <tcp_connect+0x218>)
 800c5da:	f008 fc63 	bl	8014ea4 <iprintf>
 800c5de:	f06f 030f 	mvn.w	r3, #15
 800c5e2:	e0df      	b.n	800c7a4 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	7d1b      	ldrb	r3, [r3, #20]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d009      	beq.n	800c600 <tcp_connect+0x64>
 800c5ec:	4b6f      	ldr	r3, [pc, #444]	; (800c7ac <tcp_connect+0x210>)
 800c5ee:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800c5f2:	4972      	ldr	r1, [pc, #456]	; (800c7bc <tcp_connect+0x220>)
 800c5f4:	486f      	ldr	r0, [pc, #444]	; (800c7b4 <tcp_connect+0x218>)
 800c5f6:	f008 fc55 	bl	8014ea4 <iprintf>
 800c5fa:	f06f 0309 	mvn.w	r3, #9
 800c5fe:	e0d1      	b.n	800c7a4 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d002      	beq.n	800c60c <tcp_connect+0x70>
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	e000      	b.n	800c60e <tcp_connect+0x72>
 800c60c:	2300      	movs	r3, #0
 800c60e:	68fa      	ldr	r2, [r7, #12]
 800c610:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	88fa      	ldrh	r2, [r7, #6]
 800c616:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	7a1b      	ldrb	r3, [r3, #8]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d006      	beq.n	800c62e <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	7a1b      	ldrb	r3, [r3, #8]
 800c624:	4618      	mov	r0, r3
 800c626:	f7fe fc9f 	bl	800af68 <netif_get_by_index>
 800c62a:	6278      	str	r0, [r7, #36]	; 0x24
 800c62c:	e005      	b.n	800c63a <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	3304      	adds	r3, #4
 800c632:	4618      	mov	r0, r3
 800c634:	f006 ffc8 	bl	80135c8 <ip4_route>
 800c638:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800c63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d102      	bne.n	800c646 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800c640:	f06f 0303 	mvn.w	r3, #3
 800c644:	e0ae      	b.n	800c7a4 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d003      	beq.n	800c654 <tcp_connect+0xb8>
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d111      	bne.n	800c678 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800c654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c656:	2b00      	cmp	r3, #0
 800c658:	d002      	beq.n	800c660 <tcp_connect+0xc4>
 800c65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c65c:	3304      	adds	r3, #4
 800c65e:	e000      	b.n	800c662 <tcp_connect+0xc6>
 800c660:	2300      	movs	r3, #0
 800c662:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800c664:	69fb      	ldr	r3, [r7, #28]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d102      	bne.n	800c670 <tcp_connect+0xd4>
      return ERR_RTE;
 800c66a:	f06f 0303 	mvn.w	r3, #3
 800c66e:	e099      	b.n	800c7a4 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c670:	69fb      	ldr	r3, [r7, #28]
 800c672:	681a      	ldr	r2, [r3, #0]
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	8adb      	ldrh	r3, [r3, #22]
 800c67c:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	8adb      	ldrh	r3, [r3, #22]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d10c      	bne.n	800c6a0 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800c686:	f7ff ff43 	bl	800c510 <tcp_new_port>
 800c68a:	4603      	mov	r3, r0
 800c68c:	461a      	mov	r2, r3
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	8adb      	ldrh	r3, [r3, #22]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d102      	bne.n	800c6a0 <tcp_connect+0x104>
      return ERR_BUF;
 800c69a:	f06f 0301 	mvn.w	r3, #1
 800c69e:	e081      	b.n	800c7a4 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800c6a0:	68f8      	ldr	r0, [r7, #12]
 800c6a2:	f001 f84f 	bl	800d744 <tcp_next_iss>
 800c6a6:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	697a      	ldr	r2, [r7, #20]
 800c6b2:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	1e5a      	subs	r2, r3, #1
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	1e5a      	subs	r2, r3, #1
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	1e5a      	subs	r2, r3, #1
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c6d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c6ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c6f4:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	3304      	adds	r3, #4
 800c6fe:	461a      	mov	r2, r3
 800c700:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c702:	f001 f845 	bl	800d790 <tcp_eff_send_mss_netif>
 800c706:	4603      	mov	r3, r0
 800c708:	461a      	mov	r2, r3
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	2201      	movs	r2, #1
 800c712:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	683a      	ldr	r2, [r7, #0]
 800c71a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800c71e:	2102      	movs	r1, #2
 800c720:	68f8      	ldr	r0, [r7, #12]
 800c722:	f004 faa5 	bl	8010c70 <tcp_enqueue_flags>
 800c726:	4603      	mov	r3, r0
 800c728:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800c72a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d136      	bne.n	800c7a0 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	2202      	movs	r2, #2
 800c736:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800c738:	8b7b      	ldrh	r3, [r7, #26]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d021      	beq.n	800c782 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800c73e:	4b20      	ldr	r3, [pc, #128]	; (800c7c0 <tcp_connect+0x224>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	68fa      	ldr	r2, [r7, #12]
 800c744:	429a      	cmp	r2, r3
 800c746:	d105      	bne.n	800c754 <tcp_connect+0x1b8>
 800c748:	4b1d      	ldr	r3, [pc, #116]	; (800c7c0 <tcp_connect+0x224>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	68db      	ldr	r3, [r3, #12]
 800c74e:	4a1c      	ldr	r2, [pc, #112]	; (800c7c0 <tcp_connect+0x224>)
 800c750:	6013      	str	r3, [r2, #0]
 800c752:	e013      	b.n	800c77c <tcp_connect+0x1e0>
 800c754:	4b1a      	ldr	r3, [pc, #104]	; (800c7c0 <tcp_connect+0x224>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	623b      	str	r3, [r7, #32]
 800c75a:	e00c      	b.n	800c776 <tcp_connect+0x1da>
 800c75c:	6a3b      	ldr	r3, [r7, #32]
 800c75e:	68db      	ldr	r3, [r3, #12]
 800c760:	68fa      	ldr	r2, [r7, #12]
 800c762:	429a      	cmp	r2, r3
 800c764:	d104      	bne.n	800c770 <tcp_connect+0x1d4>
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	68da      	ldr	r2, [r3, #12]
 800c76a:	6a3b      	ldr	r3, [r7, #32]
 800c76c:	60da      	str	r2, [r3, #12]
 800c76e:	e005      	b.n	800c77c <tcp_connect+0x1e0>
 800c770:	6a3b      	ldr	r3, [r7, #32]
 800c772:	68db      	ldr	r3, [r3, #12]
 800c774:	623b      	str	r3, [r7, #32]
 800c776:	6a3b      	ldr	r3, [r7, #32]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d1ef      	bne.n	800c75c <tcp_connect+0x1c0>
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	2200      	movs	r2, #0
 800c780:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800c782:	4b10      	ldr	r3, [pc, #64]	; (800c7c4 <tcp_connect+0x228>)
 800c784:	681a      	ldr	r2, [r3, #0]
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	60da      	str	r2, [r3, #12]
 800c78a:	4a0e      	ldr	r2, [pc, #56]	; (800c7c4 <tcp_connect+0x228>)
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	6013      	str	r3, [r2, #0]
 800c790:	f005 fad2 	bl	8011d38 <tcp_timer_needed>
 800c794:	4b0c      	ldr	r3, [pc, #48]	; (800c7c8 <tcp_connect+0x22c>)
 800c796:	2201      	movs	r2, #1
 800c798:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800c79a:	68f8      	ldr	r0, [r7, #12]
 800c79c:	f004 fb56 	bl	8010e4c <tcp_output>
  }
  return ret;
 800c7a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	3728      	adds	r7, #40	; 0x28
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd80      	pop	{r7, pc}
 800c7ac:	08017590 	.word	0x08017590
 800c7b0:	0801786c 	.word	0x0801786c
 800c7b4:	080175d4 	.word	0x080175d4
 800c7b8:	08017888 	.word	0x08017888
 800c7bc:	080178a4 	.word	0x080178a4
 800c7c0:	2000ab24 	.word	0x2000ab24
 800c7c4:	2000ab18 	.word	0x2000ab18
 800c7c8:	2000ab14 	.word	0x2000ab14

0800c7cc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c7cc:	b5b0      	push	{r4, r5, r7, lr}
 800c7ce:	b090      	sub	sp, #64	; 0x40
 800c7d0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800c7d8:	4b94      	ldr	r3, [pc, #592]	; (800ca2c <tcp_slowtmr+0x260>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	3301      	adds	r3, #1
 800c7de:	4a93      	ldr	r2, [pc, #588]	; (800ca2c <tcp_slowtmr+0x260>)
 800c7e0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c7e2:	4b93      	ldr	r3, [pc, #588]	; (800ca30 <tcp_slowtmr+0x264>)
 800c7e4:	781b      	ldrb	r3, [r3, #0]
 800c7e6:	3301      	adds	r3, #1
 800c7e8:	b2da      	uxtb	r2, r3
 800c7ea:	4b91      	ldr	r3, [pc, #580]	; (800ca30 <tcp_slowtmr+0x264>)
 800c7ec:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800c7f2:	4b90      	ldr	r3, [pc, #576]	; (800ca34 <tcp_slowtmr+0x268>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800c7f8:	e29d      	b.n	800cd36 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7fc:	7d1b      	ldrb	r3, [r3, #20]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d106      	bne.n	800c810 <tcp_slowtmr+0x44>
 800c802:	4b8d      	ldr	r3, [pc, #564]	; (800ca38 <tcp_slowtmr+0x26c>)
 800c804:	f240 42be 	movw	r2, #1214	; 0x4be
 800c808:	498c      	ldr	r1, [pc, #560]	; (800ca3c <tcp_slowtmr+0x270>)
 800c80a:	488d      	ldr	r0, [pc, #564]	; (800ca40 <tcp_slowtmr+0x274>)
 800c80c:	f008 fb4a 	bl	8014ea4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c812:	7d1b      	ldrb	r3, [r3, #20]
 800c814:	2b01      	cmp	r3, #1
 800c816:	d106      	bne.n	800c826 <tcp_slowtmr+0x5a>
 800c818:	4b87      	ldr	r3, [pc, #540]	; (800ca38 <tcp_slowtmr+0x26c>)
 800c81a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800c81e:	4989      	ldr	r1, [pc, #548]	; (800ca44 <tcp_slowtmr+0x278>)
 800c820:	4887      	ldr	r0, [pc, #540]	; (800ca40 <tcp_slowtmr+0x274>)
 800c822:	f008 fb3f 	bl	8014ea4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c828:	7d1b      	ldrb	r3, [r3, #20]
 800c82a:	2b0a      	cmp	r3, #10
 800c82c:	d106      	bne.n	800c83c <tcp_slowtmr+0x70>
 800c82e:	4b82      	ldr	r3, [pc, #520]	; (800ca38 <tcp_slowtmr+0x26c>)
 800c830:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800c834:	4984      	ldr	r1, [pc, #528]	; (800ca48 <tcp_slowtmr+0x27c>)
 800c836:	4882      	ldr	r0, [pc, #520]	; (800ca40 <tcp_slowtmr+0x274>)
 800c838:	f008 fb34 	bl	8014ea4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c83e:	7f9a      	ldrb	r2, [r3, #30]
 800c840:	4b7b      	ldr	r3, [pc, #492]	; (800ca30 <tcp_slowtmr+0x264>)
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	429a      	cmp	r2, r3
 800c846:	d105      	bne.n	800c854 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800c848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c84a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c84e:	68db      	ldr	r3, [r3, #12]
 800c850:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800c852:	e270      	b.n	800cd36 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800c854:	4b76      	ldr	r3, [pc, #472]	; (800ca30 <tcp_slowtmr+0x264>)
 800c856:	781a      	ldrb	r2, [r3, #0]
 800c858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c85a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800c85c:	2300      	movs	r3, #0
 800c85e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800c862:	2300      	movs	r3, #0
 800c864:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c86a:	7d1b      	ldrb	r3, [r3, #20]
 800c86c:	2b02      	cmp	r3, #2
 800c86e:	d10a      	bne.n	800c886 <tcp_slowtmr+0xba>
 800c870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c872:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c876:	2b05      	cmp	r3, #5
 800c878:	d905      	bls.n	800c886 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800c87a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c87e:	3301      	adds	r3, #1
 800c880:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c884:	e11e      	b.n	800cac4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c888:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c88c:	2b0b      	cmp	r3, #11
 800c88e:	d905      	bls.n	800c89c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800c890:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c894:	3301      	adds	r3, #1
 800c896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c89a:	e113      	b.n	800cac4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800c89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c89e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d075      	beq.n	800c992 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d006      	beq.n	800c8bc <tcp_slowtmr+0xf0>
 800c8ae:	4b62      	ldr	r3, [pc, #392]	; (800ca38 <tcp_slowtmr+0x26c>)
 800c8b0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800c8b4:	4965      	ldr	r1, [pc, #404]	; (800ca4c <tcp_slowtmr+0x280>)
 800c8b6:	4862      	ldr	r0, [pc, #392]	; (800ca40 <tcp_slowtmr+0x274>)
 800c8b8:	f008 faf4 	bl	8014ea4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d106      	bne.n	800c8d2 <tcp_slowtmr+0x106>
 800c8c4:	4b5c      	ldr	r3, [pc, #368]	; (800ca38 <tcp_slowtmr+0x26c>)
 800c8c6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800c8ca:	4961      	ldr	r1, [pc, #388]	; (800ca50 <tcp_slowtmr+0x284>)
 800c8cc:	485c      	ldr	r0, [pc, #368]	; (800ca40 <tcp_slowtmr+0x274>)
 800c8ce:	f008 fae9 	bl	8014ea4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c8d8:	2b0b      	cmp	r3, #11
 800c8da:	d905      	bls.n	800c8e8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800c8dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8e0:	3301      	adds	r3, #1
 800c8e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c8e6:	e0ed      	b.n	800cac4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c8ee:	3b01      	subs	r3, #1
 800c8f0:	4a58      	ldr	r2, [pc, #352]	; (800ca54 <tcp_slowtmr+0x288>)
 800c8f2:	5cd3      	ldrb	r3, [r2, r3]
 800c8f4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c8fc:	7c7a      	ldrb	r2, [r7, #17]
 800c8fe:	429a      	cmp	r2, r3
 800c900:	d907      	bls.n	800c912 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800c902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c904:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c908:	3301      	adds	r3, #1
 800c90a:	b2da      	uxtb	r2, r3
 800c90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c90e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800c912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c914:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c918:	7c7a      	ldrb	r2, [r7, #17]
 800c91a:	429a      	cmp	r2, r3
 800c91c:	f200 80d2 	bhi.w	800cac4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800c920:	2301      	movs	r3, #1
 800c922:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800c924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c926:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d108      	bne.n	800c940 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c92e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c930:	f005 f934 	bl	8011b9c <tcp_zero_window_probe>
 800c934:	4603      	mov	r3, r0
 800c936:	2b00      	cmp	r3, #0
 800c938:	d014      	beq.n	800c964 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800c93a:	2300      	movs	r3, #0
 800c93c:	623b      	str	r3, [r7, #32]
 800c93e:	e011      	b.n	800c964 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c942:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c946:	4619      	mov	r1, r3
 800c948:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c94a:	f003 fff9 	bl	8010940 <tcp_split_unsent_seg>
 800c94e:	4603      	mov	r3, r0
 800c950:	2b00      	cmp	r3, #0
 800c952:	d107      	bne.n	800c964 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800c954:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c956:	f004 fa79 	bl	8010e4c <tcp_output>
 800c95a:	4603      	mov	r3, r0
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d101      	bne.n	800c964 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800c960:	2300      	movs	r3, #0
 800c962:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800c964:	6a3b      	ldr	r3, [r7, #32]
 800c966:	2b00      	cmp	r3, #0
 800c968:	f000 80ac 	beq.w	800cac4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800c96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c96e:	2200      	movs	r2, #0
 800c970:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c976:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c97a:	2b06      	cmp	r3, #6
 800c97c:	f200 80a2 	bhi.w	800cac4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800c980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c982:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c986:	3301      	adds	r3, #1
 800c988:	b2da      	uxtb	r2, r3
 800c98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c98c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800c990:	e098      	b.n	800cac4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c994:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c998:	2b00      	cmp	r3, #0
 800c99a:	db0f      	blt.n	800c9bc <tcp_slowtmr+0x1f0>
 800c99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c99e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c9a2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	d008      	beq.n	800c9bc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800c9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ac:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c9b0:	b29b      	uxth	r3, r3
 800c9b2:	3301      	adds	r3, #1
 800c9b4:	b29b      	uxth	r3, r3
 800c9b6:	b21a      	sxth	r2, r3
 800c9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ba:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800c9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9be:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800c9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9c4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	db7b      	blt.n	800cac4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c9cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c9ce:	f004 fd2f 	bl	8011430 <tcp_rexmit_rto_prepare>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d007      	beq.n	800c9e8 <tcp_slowtmr+0x21c>
 800c9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d171      	bne.n	800cac4 <tcp_slowtmr+0x2f8>
 800c9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d06d      	beq.n	800cac4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800c9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ea:	7d1b      	ldrb	r3, [r3, #20]
 800c9ec:	2b02      	cmp	r3, #2
 800c9ee:	d03a      	beq.n	800ca66 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c9f6:	2b0c      	cmp	r3, #12
 800c9f8:	bf28      	it	cs
 800c9fa:	230c      	movcs	r3, #12
 800c9fc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca00:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ca04:	10db      	asrs	r3, r3, #3
 800ca06:	b21b      	sxth	r3, r3
 800ca08:	461a      	mov	r2, r3
 800ca0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca0c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ca10:	4413      	add	r3, r2
 800ca12:	7efa      	ldrb	r2, [r7, #27]
 800ca14:	4910      	ldr	r1, [pc, #64]	; (800ca58 <tcp_slowtmr+0x28c>)
 800ca16:	5c8a      	ldrb	r2, [r1, r2]
 800ca18:	4093      	lsls	r3, r2
 800ca1a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ca1c:	697b      	ldr	r3, [r7, #20]
 800ca1e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800ca22:	4293      	cmp	r3, r2
 800ca24:	dc1a      	bgt.n	800ca5c <tcp_slowtmr+0x290>
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	b21a      	sxth	r2, r3
 800ca2a:	e019      	b.n	800ca60 <tcp_slowtmr+0x294>
 800ca2c:	2000ab1c 	.word	0x2000ab1c
 800ca30:	2000409e 	.word	0x2000409e
 800ca34:	2000ab18 	.word	0x2000ab18
 800ca38:	08017590 	.word	0x08017590
 800ca3c:	080178d4 	.word	0x080178d4
 800ca40:	080175d4 	.word	0x080175d4
 800ca44:	08017900 	.word	0x08017900
 800ca48:	0801792c 	.word	0x0801792c
 800ca4c:	0801795c 	.word	0x0801795c
 800ca50:	08017990 	.word	0x08017990
 800ca54:	0801961c 	.word	0x0801961c
 800ca58:	0801960c 	.word	0x0801960c
 800ca5c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ca60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800ca66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca68:	2200      	movs	r2, #0
 800ca6a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ca6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca6e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ca72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca74:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ca78:	4293      	cmp	r3, r2
 800ca7a:	bf28      	it	cs
 800ca7c:	4613      	movcs	r3, r2
 800ca7e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800ca80:	8a7b      	ldrh	r3, [r7, #18]
 800ca82:	085b      	lsrs	r3, r3, #1
 800ca84:	b29a      	uxth	r2, r3
 800ca86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca88:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ca8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca8e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ca92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca96:	005b      	lsls	r3, r3, #1
 800ca98:	b29b      	uxth	r3, r3
 800ca9a:	429a      	cmp	r2, r3
 800ca9c:	d206      	bcs.n	800caac <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800ca9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800caa2:	005b      	lsls	r3, r3, #1
 800caa4:	b29a      	uxth	r2, r3
 800caa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800caac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caae:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800cab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800cab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab8:	2200      	movs	r2, #0
 800caba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800cabe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cac0:	f004 fd26 	bl	8011510 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800cac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cac6:	7d1b      	ldrb	r3, [r3, #20]
 800cac8:	2b06      	cmp	r3, #6
 800caca:	d111      	bne.n	800caf0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800cacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cace:	8b5b      	ldrh	r3, [r3, #26]
 800cad0:	f003 0310 	and.w	r3, r3, #16
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d00b      	beq.n	800caf0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cad8:	4b9c      	ldr	r3, [pc, #624]	; (800cd4c <tcp_slowtmr+0x580>)
 800cada:	681a      	ldr	r2, [r3, #0]
 800cadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cade:	6a1b      	ldr	r3, [r3, #32]
 800cae0:	1ad3      	subs	r3, r2, r3
 800cae2:	2b28      	cmp	r3, #40	; 0x28
 800cae4:	d904      	bls.n	800caf0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800cae6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800caea:	3301      	adds	r3, #1
 800caec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800caf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caf2:	7a5b      	ldrb	r3, [r3, #9]
 800caf4:	f003 0308 	and.w	r3, r3, #8
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d04a      	beq.n	800cb92 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800cafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cafe:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cb00:	2b04      	cmp	r3, #4
 800cb02:	d003      	beq.n	800cb0c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800cb04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb06:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800cb08:	2b07      	cmp	r3, #7
 800cb0a:	d142      	bne.n	800cb92 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cb0c:	4b8f      	ldr	r3, [pc, #572]	; (800cd4c <tcp_slowtmr+0x580>)
 800cb0e:	681a      	ldr	r2, [r3, #0]
 800cb10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb12:	6a1b      	ldr	r3, [r3, #32]
 800cb14:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800cb16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb18:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800cb1c:	4b8c      	ldr	r3, [pc, #560]	; (800cd50 <tcp_slowtmr+0x584>)
 800cb1e:	440b      	add	r3, r1
 800cb20:	498c      	ldr	r1, [pc, #560]	; (800cd54 <tcp_slowtmr+0x588>)
 800cb22:	fba1 1303 	umull	r1, r3, r1, r3
 800cb26:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	d90a      	bls.n	800cb42 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800cb2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb30:	3301      	adds	r3, #1
 800cb32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800cb36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cb3a:	3301      	adds	r3, #1
 800cb3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cb40:	e027      	b.n	800cb92 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cb42:	4b82      	ldr	r3, [pc, #520]	; (800cd4c <tcp_slowtmr+0x580>)
 800cb44:	681a      	ldr	r2, [r3, #0]
 800cb46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb48:	6a1b      	ldr	r3, [r3, #32]
 800cb4a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800cb4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb4e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800cb52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb54:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800cb58:	4618      	mov	r0, r3
 800cb5a:	4b7f      	ldr	r3, [pc, #508]	; (800cd58 <tcp_slowtmr+0x58c>)
 800cb5c:	fb03 f300 	mul.w	r3, r3, r0
 800cb60:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800cb62:	497c      	ldr	r1, [pc, #496]	; (800cd54 <tcp_slowtmr+0x588>)
 800cb64:	fba1 1303 	umull	r1, r3, r1, r3
 800cb68:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cb6a:	429a      	cmp	r2, r3
 800cb6c:	d911      	bls.n	800cb92 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800cb6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb70:	f004 ffd4 	bl	8011b1c <tcp_keepalive>
 800cb74:	4603      	mov	r3, r0
 800cb76:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800cb7a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d107      	bne.n	800cb92 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800cb82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb84:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800cb88:	3301      	adds	r3, #1
 800cb8a:	b2da      	uxtb	r2, r3
 800cb8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb8e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800cb92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d011      	beq.n	800cbbe <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800cb9a:	4b6c      	ldr	r3, [pc, #432]	; (800cd4c <tcp_slowtmr+0x580>)
 800cb9c:	681a      	ldr	r2, [r3, #0]
 800cb9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba0:	6a1b      	ldr	r3, [r3, #32]
 800cba2:	1ad2      	subs	r2, r2, r3
 800cba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800cbaa:	4619      	mov	r1, r3
 800cbac:	460b      	mov	r3, r1
 800cbae:	005b      	lsls	r3, r3, #1
 800cbb0:	440b      	add	r3, r1
 800cbb2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d302      	bcc.n	800cbbe <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800cbb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cbba:	f000 fe93 	bl	800d8e4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800cbbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc0:	7d1b      	ldrb	r3, [r3, #20]
 800cbc2:	2b03      	cmp	r3, #3
 800cbc4:	d10b      	bne.n	800cbde <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cbc6:	4b61      	ldr	r3, [pc, #388]	; (800cd4c <tcp_slowtmr+0x580>)
 800cbc8:	681a      	ldr	r2, [r3, #0]
 800cbca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbcc:	6a1b      	ldr	r3, [r3, #32]
 800cbce:	1ad3      	subs	r3, r2, r3
 800cbd0:	2b28      	cmp	r3, #40	; 0x28
 800cbd2:	d904      	bls.n	800cbde <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800cbd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbd8:	3301      	adds	r3, #1
 800cbda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800cbde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe0:	7d1b      	ldrb	r3, [r3, #20]
 800cbe2:	2b09      	cmp	r3, #9
 800cbe4:	d10b      	bne.n	800cbfe <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cbe6:	4b59      	ldr	r3, [pc, #356]	; (800cd4c <tcp_slowtmr+0x580>)
 800cbe8:	681a      	ldr	r2, [r3, #0]
 800cbea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbec:	6a1b      	ldr	r3, [r3, #32]
 800cbee:	1ad3      	subs	r3, r2, r3
 800cbf0:	2bf0      	cmp	r3, #240	; 0xf0
 800cbf2:	d904      	bls.n	800cbfe <tcp_slowtmr+0x432>
        ++pcb_remove;
 800cbf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbf8:	3301      	adds	r3, #1
 800cbfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cbfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d060      	beq.n	800ccc8 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800cc06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc0c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800cc0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc10:	f000 fcb4 	bl	800d57c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800cc14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d010      	beq.n	800cc3c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800cc1a:	4b50      	ldr	r3, [pc, #320]	; (800cd5c <tcp_slowtmr+0x590>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc20:	429a      	cmp	r2, r3
 800cc22:	d106      	bne.n	800cc32 <tcp_slowtmr+0x466>
 800cc24:	4b4e      	ldr	r3, [pc, #312]	; (800cd60 <tcp_slowtmr+0x594>)
 800cc26:	f240 526d 	movw	r2, #1389	; 0x56d
 800cc2a:	494e      	ldr	r1, [pc, #312]	; (800cd64 <tcp_slowtmr+0x598>)
 800cc2c:	484e      	ldr	r0, [pc, #312]	; (800cd68 <tcp_slowtmr+0x59c>)
 800cc2e:	f008 f939 	bl	8014ea4 <iprintf>
        prev->next = pcb->next;
 800cc32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc34:	68da      	ldr	r2, [r3, #12]
 800cc36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc38:	60da      	str	r2, [r3, #12]
 800cc3a:	e00f      	b.n	800cc5c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800cc3c:	4b47      	ldr	r3, [pc, #284]	; (800cd5c <tcp_slowtmr+0x590>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc42:	429a      	cmp	r2, r3
 800cc44:	d006      	beq.n	800cc54 <tcp_slowtmr+0x488>
 800cc46:	4b46      	ldr	r3, [pc, #280]	; (800cd60 <tcp_slowtmr+0x594>)
 800cc48:	f240 5271 	movw	r2, #1393	; 0x571
 800cc4c:	4947      	ldr	r1, [pc, #284]	; (800cd6c <tcp_slowtmr+0x5a0>)
 800cc4e:	4846      	ldr	r0, [pc, #280]	; (800cd68 <tcp_slowtmr+0x59c>)
 800cc50:	f008 f928 	bl	8014ea4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800cc54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc56:	68db      	ldr	r3, [r3, #12]
 800cc58:	4a40      	ldr	r2, [pc, #256]	; (800cd5c <tcp_slowtmr+0x590>)
 800cc5a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800cc5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d013      	beq.n	800cc8c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc66:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800cc68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc6a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800cc6c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800cc6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc70:	3304      	adds	r3, #4
 800cc72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc74:	8ad2      	ldrh	r2, [r2, #22]
 800cc76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cc78:	8b09      	ldrh	r1, [r1, #24]
 800cc7a:	9102      	str	r1, [sp, #8]
 800cc7c:	9201      	str	r2, [sp, #4]
 800cc7e:	9300      	str	r3, [sp, #0]
 800cc80:	462b      	mov	r3, r5
 800cc82:	4622      	mov	r2, r4
 800cc84:	4601      	mov	r1, r0
 800cc86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc88:	f004 fe94 	bl	80119b4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800cc8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc8e:	691b      	ldr	r3, [r3, #16]
 800cc90:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800cc92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc94:	7d1b      	ldrb	r3, [r3, #20]
 800cc96:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800cc98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc9a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800cc9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc9e:	68db      	ldr	r3, [r3, #12]
 800cca0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800cca2:	6838      	ldr	r0, [r7, #0]
 800cca4:	f7fe fffe 	bl	800bca4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800cca8:	4b31      	ldr	r3, [pc, #196]	; (800cd70 <tcp_slowtmr+0x5a4>)
 800ccaa:	2200      	movs	r2, #0
 800ccac:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d004      	beq.n	800ccbe <tcp_slowtmr+0x4f2>
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	f06f 010c 	mvn.w	r1, #12
 800ccba:	68b8      	ldr	r0, [r7, #8]
 800ccbc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ccbe:	4b2c      	ldr	r3, [pc, #176]	; (800cd70 <tcp_slowtmr+0x5a4>)
 800ccc0:	781b      	ldrb	r3, [r3, #0]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d037      	beq.n	800cd36 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800ccc6:	e592      	b.n	800c7ee <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800ccc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccca:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccce:	68db      	ldr	r3, [r3, #12]
 800ccd0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ccd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd4:	7f1b      	ldrb	r3, [r3, #28]
 800ccd6:	3301      	adds	r3, #1
 800ccd8:	b2da      	uxtb	r2, r3
 800ccda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccdc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ccde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce0:	7f1a      	ldrb	r2, [r3, #28]
 800cce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce4:	7f5b      	ldrb	r3, [r3, #29]
 800cce6:	429a      	cmp	r2, r3
 800cce8:	d325      	bcc.n	800cd36 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800ccea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccec:	2200      	movs	r2, #0
 800ccee:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800ccf0:	4b1f      	ldr	r3, [pc, #124]	; (800cd70 <tcp_slowtmr+0x5a4>)
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ccf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d00b      	beq.n	800cd18 <tcp_slowtmr+0x54c>
 800cd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd08:	6912      	ldr	r2, [r2, #16]
 800cd0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cd0c:	4610      	mov	r0, r2
 800cd0e:	4798      	blx	r3
 800cd10:	4603      	mov	r3, r0
 800cd12:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800cd16:	e002      	b.n	800cd1e <tcp_slowtmr+0x552>
 800cd18:	2300      	movs	r3, #0
 800cd1a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800cd1e:	4b14      	ldr	r3, [pc, #80]	; (800cd70 <tcp_slowtmr+0x5a4>)
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d000      	beq.n	800cd28 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800cd26:	e562      	b.n	800c7ee <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800cd28:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d102      	bne.n	800cd36 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800cd30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd32:	f004 f88b 	bl	8010e4c <tcp_output>
  while (pcb != NULL) {
 800cd36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	f47f ad5e 	bne.w	800c7fa <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800cd42:	4b0c      	ldr	r3, [pc, #48]	; (800cd74 <tcp_slowtmr+0x5a8>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800cd48:	e069      	b.n	800ce1e <tcp_slowtmr+0x652>
 800cd4a:	bf00      	nop
 800cd4c:	2000ab1c 	.word	0x2000ab1c
 800cd50:	000a4cb8 	.word	0x000a4cb8
 800cd54:	10624dd3 	.word	0x10624dd3
 800cd58:	000124f8 	.word	0x000124f8
 800cd5c:	2000ab18 	.word	0x2000ab18
 800cd60:	08017590 	.word	0x08017590
 800cd64:	080179c8 	.word	0x080179c8
 800cd68:	080175d4 	.word	0x080175d4
 800cd6c:	080179f4 	.word	0x080179f4
 800cd70:	2000ab14 	.word	0x2000ab14
 800cd74:	2000ab28 	.word	0x2000ab28
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cd78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd7a:	7d1b      	ldrb	r3, [r3, #20]
 800cd7c:	2b0a      	cmp	r3, #10
 800cd7e:	d006      	beq.n	800cd8e <tcp_slowtmr+0x5c2>
 800cd80:	4b2b      	ldr	r3, [pc, #172]	; (800ce30 <tcp_slowtmr+0x664>)
 800cd82:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800cd86:	492b      	ldr	r1, [pc, #172]	; (800ce34 <tcp_slowtmr+0x668>)
 800cd88:	482b      	ldr	r0, [pc, #172]	; (800ce38 <tcp_slowtmr+0x66c>)
 800cd8a:	f008 f88b 	bl	8014ea4 <iprintf>
    pcb_remove = 0;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cd94:	4b29      	ldr	r3, [pc, #164]	; (800ce3c <tcp_slowtmr+0x670>)
 800cd96:	681a      	ldr	r2, [r3, #0]
 800cd98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd9a:	6a1b      	ldr	r3, [r3, #32]
 800cd9c:	1ad3      	subs	r3, r2, r3
 800cd9e:	2bf0      	cmp	r3, #240	; 0xf0
 800cda0:	d904      	bls.n	800cdac <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800cda2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cda6:	3301      	adds	r3, #1
 800cda8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cdac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d02f      	beq.n	800ce14 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800cdb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cdb6:	f000 fbe1 	bl	800d57c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800cdba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d010      	beq.n	800cde2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800cdc0:	4b1f      	ldr	r3, [pc, #124]	; (800ce40 <tcp_slowtmr+0x674>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cdc6:	429a      	cmp	r2, r3
 800cdc8:	d106      	bne.n	800cdd8 <tcp_slowtmr+0x60c>
 800cdca:	4b19      	ldr	r3, [pc, #100]	; (800ce30 <tcp_slowtmr+0x664>)
 800cdcc:	f240 52af 	movw	r2, #1455	; 0x5af
 800cdd0:	491c      	ldr	r1, [pc, #112]	; (800ce44 <tcp_slowtmr+0x678>)
 800cdd2:	4819      	ldr	r0, [pc, #100]	; (800ce38 <tcp_slowtmr+0x66c>)
 800cdd4:	f008 f866 	bl	8014ea4 <iprintf>
        prev->next = pcb->next;
 800cdd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdda:	68da      	ldr	r2, [r3, #12]
 800cddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdde:	60da      	str	r2, [r3, #12]
 800cde0:	e00f      	b.n	800ce02 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800cde2:	4b17      	ldr	r3, [pc, #92]	; (800ce40 <tcp_slowtmr+0x674>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cde8:	429a      	cmp	r2, r3
 800cdea:	d006      	beq.n	800cdfa <tcp_slowtmr+0x62e>
 800cdec:	4b10      	ldr	r3, [pc, #64]	; (800ce30 <tcp_slowtmr+0x664>)
 800cdee:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800cdf2:	4915      	ldr	r1, [pc, #84]	; (800ce48 <tcp_slowtmr+0x67c>)
 800cdf4:	4810      	ldr	r0, [pc, #64]	; (800ce38 <tcp_slowtmr+0x66c>)
 800cdf6:	f008 f855 	bl	8014ea4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800cdfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdfc:	68db      	ldr	r3, [r3, #12]
 800cdfe:	4a10      	ldr	r2, [pc, #64]	; (800ce40 <tcp_slowtmr+0x674>)
 800ce00:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ce02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce04:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ce06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce08:	68db      	ldr	r3, [r3, #12]
 800ce0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ce0c:	69f8      	ldr	r0, [r7, #28]
 800ce0e:	f7fe ff49 	bl	800bca4 <tcp_free>
 800ce12:	e004      	b.n	800ce1e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800ce14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce16:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ce18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce1a:	68db      	ldr	r3, [r3, #12]
 800ce1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ce1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d1a9      	bne.n	800cd78 <tcp_slowtmr+0x5ac>
    }
  }
}
 800ce24:	bf00      	nop
 800ce26:	bf00      	nop
 800ce28:	3730      	adds	r7, #48	; 0x30
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bdb0      	pop	{r4, r5, r7, pc}
 800ce2e:	bf00      	nop
 800ce30:	08017590 	.word	0x08017590
 800ce34:	08017a20 	.word	0x08017a20
 800ce38:	080175d4 	.word	0x080175d4
 800ce3c:	2000ab1c 	.word	0x2000ab1c
 800ce40:	2000ab28 	.word	0x2000ab28
 800ce44:	08017a50 	.word	0x08017a50
 800ce48:	08017a78 	.word	0x08017a78

0800ce4c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b082      	sub	sp, #8
 800ce50:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ce52:	4b2d      	ldr	r3, [pc, #180]	; (800cf08 <tcp_fasttmr+0xbc>)
 800ce54:	781b      	ldrb	r3, [r3, #0]
 800ce56:	3301      	adds	r3, #1
 800ce58:	b2da      	uxtb	r2, r3
 800ce5a:	4b2b      	ldr	r3, [pc, #172]	; (800cf08 <tcp_fasttmr+0xbc>)
 800ce5c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ce5e:	4b2b      	ldr	r3, [pc, #172]	; (800cf0c <tcp_fasttmr+0xc0>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ce64:	e048      	b.n	800cef8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	7f9a      	ldrb	r2, [r3, #30]
 800ce6a:	4b27      	ldr	r3, [pc, #156]	; (800cf08 <tcp_fasttmr+0xbc>)
 800ce6c:	781b      	ldrb	r3, [r3, #0]
 800ce6e:	429a      	cmp	r2, r3
 800ce70:	d03f      	beq.n	800cef2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ce72:	4b25      	ldr	r3, [pc, #148]	; (800cf08 <tcp_fasttmr+0xbc>)
 800ce74:	781a      	ldrb	r2, [r3, #0]
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	8b5b      	ldrh	r3, [r3, #26]
 800ce7e:	f003 0301 	and.w	r3, r3, #1
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d010      	beq.n	800cea8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	8b5b      	ldrh	r3, [r3, #26]
 800ce8a:	f043 0302 	orr.w	r3, r3, #2
 800ce8e:	b29a      	uxth	r2, r3
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	f003 ffd9 	bl	8010e4c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	8b5b      	ldrh	r3, [r3, #26]
 800ce9e:	f023 0303 	bic.w	r3, r3, #3
 800cea2:	b29a      	uxth	r2, r3
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	8b5b      	ldrh	r3, [r3, #26]
 800ceac:	f003 0308 	and.w	r3, r3, #8
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d009      	beq.n	800cec8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	8b5b      	ldrh	r3, [r3, #26]
 800ceb8:	f023 0308 	bic.w	r3, r3, #8
 800cebc:	b29a      	uxth	r2, r3
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f7ff f882 	bl	800bfcc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	68db      	ldr	r3, [r3, #12]
 800cecc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d00a      	beq.n	800ceec <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800ced6:	4b0e      	ldr	r3, [pc, #56]	; (800cf10 <tcp_fasttmr+0xc4>)
 800ced8:	2200      	movs	r2, #0
 800ceda:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f000 f819 	bl	800cf14 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800cee2:	4b0b      	ldr	r3, [pc, #44]	; (800cf10 <tcp_fasttmr+0xc4>)
 800cee4:	781b      	ldrb	r3, [r3, #0]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d000      	beq.n	800ceec <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ceea:	e7b8      	b.n	800ce5e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	607b      	str	r3, [r7, #4]
 800cef0:	e002      	b.n	800cef8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	68db      	ldr	r3, [r3, #12]
 800cef6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d1b3      	bne.n	800ce66 <tcp_fasttmr+0x1a>
    }
  }
}
 800cefe:	bf00      	nop
 800cf00:	bf00      	nop
 800cf02:	3708      	adds	r7, #8
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}
 800cf08:	2000409e 	.word	0x2000409e
 800cf0c:	2000ab18 	.word	0x2000ab18
 800cf10:	2000ab14 	.word	0x2000ab14

0800cf14 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800cf14:	b590      	push	{r4, r7, lr}
 800cf16:	b085      	sub	sp, #20
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d109      	bne.n	800cf36 <tcp_process_refused_data+0x22>
 800cf22:	4b37      	ldr	r3, [pc, #220]	; (800d000 <tcp_process_refused_data+0xec>)
 800cf24:	f240 6209 	movw	r2, #1545	; 0x609
 800cf28:	4936      	ldr	r1, [pc, #216]	; (800d004 <tcp_process_refused_data+0xf0>)
 800cf2a:	4837      	ldr	r0, [pc, #220]	; (800d008 <tcp_process_refused_data+0xf4>)
 800cf2c:	f007 ffba 	bl	8014ea4 <iprintf>
 800cf30:	f06f 030f 	mvn.w	r3, #15
 800cf34:	e060      	b.n	800cff8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf3a:	7b5b      	ldrb	r3, [r3, #13]
 800cf3c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf42:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2200      	movs	r2, #0
 800cf48:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d00b      	beq.n	800cf6c <tcp_process_refused_data+0x58>
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6918      	ldr	r0, [r3, #16]
 800cf5e:	2300      	movs	r3, #0
 800cf60:	68ba      	ldr	r2, [r7, #8]
 800cf62:	6879      	ldr	r1, [r7, #4]
 800cf64:	47a0      	blx	r4
 800cf66:	4603      	mov	r3, r0
 800cf68:	73fb      	strb	r3, [r7, #15]
 800cf6a:	e007      	b.n	800cf7c <tcp_process_refused_data+0x68>
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	68ba      	ldr	r2, [r7, #8]
 800cf70:	6879      	ldr	r1, [r7, #4]
 800cf72:	2000      	movs	r0, #0
 800cf74:	f000 f8a4 	bl	800d0c0 <tcp_recv_null>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800cf7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d12a      	bne.n	800cfda <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800cf84:	7bbb      	ldrb	r3, [r7, #14]
 800cf86:	f003 0320 	and.w	r3, r3, #32
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d033      	beq.n	800cff6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf92:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cf96:	d005      	beq.n	800cfa4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf9c:	3301      	adds	r3, #1
 800cf9e:	b29a      	uxth	r2, r3
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d00b      	beq.n	800cfc6 <tcp_process_refused_data+0xb2>
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6918      	ldr	r0, [r3, #16]
 800cfb8:	2300      	movs	r3, #0
 800cfba:	2200      	movs	r2, #0
 800cfbc:	6879      	ldr	r1, [r7, #4]
 800cfbe:	47a0      	blx	r4
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	73fb      	strb	r3, [r7, #15]
 800cfc4:	e001      	b.n	800cfca <tcp_process_refused_data+0xb6>
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800cfca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfce:	f113 0f0d 	cmn.w	r3, #13
 800cfd2:	d110      	bne.n	800cff6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800cfd4:	f06f 030c 	mvn.w	r3, #12
 800cfd8:	e00e      	b.n	800cff8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800cfda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfde:	f113 0f0d 	cmn.w	r3, #13
 800cfe2:	d102      	bne.n	800cfea <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800cfe4:	f06f 030c 	mvn.w	r3, #12
 800cfe8:	e006      	b.n	800cff8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	68ba      	ldr	r2, [r7, #8]
 800cfee:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800cff0:	f06f 0304 	mvn.w	r3, #4
 800cff4:	e000      	b.n	800cff8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800cff6:	2300      	movs	r3, #0
}
 800cff8:	4618      	mov	r0, r3
 800cffa:	3714      	adds	r7, #20
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd90      	pop	{r4, r7, pc}
 800d000:	08017590 	.word	0x08017590
 800d004:	08017aa0 	.word	0x08017aa0
 800d008:	080175d4 	.word	0x080175d4

0800d00c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b084      	sub	sp, #16
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d014:	e007      	b.n	800d026 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d01c:	6878      	ldr	r0, [r7, #4]
 800d01e:	f000 f80a 	bl	800d036 <tcp_seg_free>
    seg = next;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d1f4      	bne.n	800d016 <tcp_segs_free+0xa>
  }
}
 800d02c:	bf00      	nop
 800d02e:	bf00      	nop
 800d030:	3710      	adds	r7, #16
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}

0800d036 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d036:	b580      	push	{r7, lr}
 800d038:	b082      	sub	sp, #8
 800d03a:	af00      	add	r7, sp, #0
 800d03c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d00c      	beq.n	800d05e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	685b      	ldr	r3, [r3, #4]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d004      	beq.n	800d056 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	685b      	ldr	r3, [r3, #4]
 800d050:	4618      	mov	r0, r3
 800d052:	f7fe fb17 	bl	800b684 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d056:	6879      	ldr	r1, [r7, #4]
 800d058:	2003      	movs	r0, #3
 800d05a:	f7fd fc6f 	bl	800a93c <memp_free>
  }
}
 800d05e:	bf00      	nop
 800d060:	3708      	adds	r7, #8
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}
	...

0800d068 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b084      	sub	sp, #16
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d106      	bne.n	800d084 <tcp_seg_copy+0x1c>
 800d076:	4b0f      	ldr	r3, [pc, #60]	; (800d0b4 <tcp_seg_copy+0x4c>)
 800d078:	f240 6282 	movw	r2, #1666	; 0x682
 800d07c:	490e      	ldr	r1, [pc, #56]	; (800d0b8 <tcp_seg_copy+0x50>)
 800d07e:	480f      	ldr	r0, [pc, #60]	; (800d0bc <tcp_seg_copy+0x54>)
 800d080:	f007 ff10 	bl	8014ea4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d084:	2003      	movs	r0, #3
 800d086:	f7fd fc07 	bl	800a898 <memp_malloc>
 800d08a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d101      	bne.n	800d096 <tcp_seg_copy+0x2e>
    return NULL;
 800d092:	2300      	movs	r3, #0
 800d094:	e00a      	b.n	800d0ac <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d096:	2210      	movs	r2, #16
 800d098:	6879      	ldr	r1, [r7, #4]
 800d09a:	68f8      	ldr	r0, [r7, #12]
 800d09c:	f007 feec 	bl	8014e78 <memcpy>
  pbuf_ref(cseg->p);
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	685b      	ldr	r3, [r3, #4]
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	f7fe fb93 	bl	800b7d0 <pbuf_ref>
  return cseg;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
}
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	3710      	adds	r7, #16
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}
 800d0b4:	08017590 	.word	0x08017590
 800d0b8:	08017ae4 	.word	0x08017ae4
 800d0bc:	080175d4 	.word	0x080175d4

0800d0c0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b084      	sub	sp, #16
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	60f8      	str	r0, [r7, #12]
 800d0c8:	60b9      	str	r1, [r7, #8]
 800d0ca:	607a      	str	r2, [r7, #4]
 800d0cc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d0ce:	68bb      	ldr	r3, [r7, #8]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d109      	bne.n	800d0e8 <tcp_recv_null+0x28>
 800d0d4:	4b12      	ldr	r3, [pc, #72]	; (800d120 <tcp_recv_null+0x60>)
 800d0d6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d0da:	4912      	ldr	r1, [pc, #72]	; (800d124 <tcp_recv_null+0x64>)
 800d0dc:	4812      	ldr	r0, [pc, #72]	; (800d128 <tcp_recv_null+0x68>)
 800d0de:	f007 fee1 	bl	8014ea4 <iprintf>
 800d0e2:	f06f 030f 	mvn.w	r3, #15
 800d0e6:	e016      	b.n	800d116 <tcp_recv_null+0x56>

  if (p != NULL) {
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d009      	beq.n	800d102 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	891b      	ldrh	r3, [r3, #8]
 800d0f2:	4619      	mov	r1, r3
 800d0f4:	68b8      	ldr	r0, [r7, #8]
 800d0f6:	f7ff f9bb 	bl	800c470 <tcp_recved>
    pbuf_free(p);
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f7fe fac2 	bl	800b684 <pbuf_free>
 800d100:	e008      	b.n	800d114 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d102:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d104      	bne.n	800d114 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d10a:	68b8      	ldr	r0, [r7, #8]
 800d10c:	f7fe ffc8 	bl	800c0a0 <tcp_close>
 800d110:	4603      	mov	r3, r0
 800d112:	e000      	b.n	800d116 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d114:	2300      	movs	r3, #0
}
 800d116:	4618      	mov	r0, r3
 800d118:	3710      	adds	r7, #16
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}
 800d11e:	bf00      	nop
 800d120:	08017590 	.word	0x08017590
 800d124:	08017b00 	.word	0x08017b00
 800d128:	080175d4 	.word	0x080175d4

0800d12c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b086      	sub	sp, #24
 800d130:	af00      	add	r7, sp, #0
 800d132:	4603      	mov	r3, r0
 800d134:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	db01      	blt.n	800d142 <tcp_kill_prio+0x16>
 800d13e:	79fb      	ldrb	r3, [r7, #7]
 800d140:	e000      	b.n	800d144 <tcp_kill_prio+0x18>
 800d142:	237f      	movs	r3, #127	; 0x7f
 800d144:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d146:	7afb      	ldrb	r3, [r7, #11]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d034      	beq.n	800d1b6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d14c:	7afb      	ldrb	r3, [r7, #11]
 800d14e:	3b01      	subs	r3, #1
 800d150:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d152:	2300      	movs	r3, #0
 800d154:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d156:	2300      	movs	r3, #0
 800d158:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d15a:	4b19      	ldr	r3, [pc, #100]	; (800d1c0 <tcp_kill_prio+0x94>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	617b      	str	r3, [r7, #20]
 800d160:	e01f      	b.n	800d1a2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	7d5b      	ldrb	r3, [r3, #21]
 800d166:	7afa      	ldrb	r2, [r7, #11]
 800d168:	429a      	cmp	r2, r3
 800d16a:	d80c      	bhi.n	800d186 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d170:	7afa      	ldrb	r2, [r7, #11]
 800d172:	429a      	cmp	r2, r3
 800d174:	d112      	bne.n	800d19c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d176:	4b13      	ldr	r3, [pc, #76]	; (800d1c4 <tcp_kill_prio+0x98>)
 800d178:	681a      	ldr	r2, [r3, #0]
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	6a1b      	ldr	r3, [r3, #32]
 800d17e:	1ad3      	subs	r3, r2, r3
 800d180:	68fa      	ldr	r2, [r7, #12]
 800d182:	429a      	cmp	r2, r3
 800d184:	d80a      	bhi.n	800d19c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d186:	4b0f      	ldr	r3, [pc, #60]	; (800d1c4 <tcp_kill_prio+0x98>)
 800d188:	681a      	ldr	r2, [r3, #0]
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	6a1b      	ldr	r3, [r3, #32]
 800d18e:	1ad3      	subs	r3, r2, r3
 800d190:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	7d5b      	ldrb	r3, [r3, #21]
 800d19a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d19c:	697b      	ldr	r3, [r7, #20]
 800d19e:	68db      	ldr	r3, [r3, #12]
 800d1a0:	617b      	str	r3, [r7, #20]
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d1dc      	bne.n	800d162 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d004      	beq.n	800d1b8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d1ae:	6938      	ldr	r0, [r7, #16]
 800d1b0:	f7ff f860 	bl	800c274 <tcp_abort>
 800d1b4:	e000      	b.n	800d1b8 <tcp_kill_prio+0x8c>
    return;
 800d1b6:	bf00      	nop
  }
}
 800d1b8:	3718      	adds	r7, #24
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}
 800d1be:	bf00      	nop
 800d1c0:	2000ab18 	.word	0x2000ab18
 800d1c4:	2000ab1c 	.word	0x2000ab1c

0800d1c8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b086      	sub	sp, #24
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d1d2:	79fb      	ldrb	r3, [r7, #7]
 800d1d4:	2b08      	cmp	r3, #8
 800d1d6:	d009      	beq.n	800d1ec <tcp_kill_state+0x24>
 800d1d8:	79fb      	ldrb	r3, [r7, #7]
 800d1da:	2b09      	cmp	r3, #9
 800d1dc:	d006      	beq.n	800d1ec <tcp_kill_state+0x24>
 800d1de:	4b1a      	ldr	r3, [pc, #104]	; (800d248 <tcp_kill_state+0x80>)
 800d1e0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d1e4:	4919      	ldr	r1, [pc, #100]	; (800d24c <tcp_kill_state+0x84>)
 800d1e6:	481a      	ldr	r0, [pc, #104]	; (800d250 <tcp_kill_state+0x88>)
 800d1e8:	f007 fe5c 	bl	8014ea4 <iprintf>

  inactivity = 0;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d1f4:	4b17      	ldr	r3, [pc, #92]	; (800d254 <tcp_kill_state+0x8c>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	617b      	str	r3, [r7, #20]
 800d1fa:	e017      	b.n	800d22c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	7d1b      	ldrb	r3, [r3, #20]
 800d200:	79fa      	ldrb	r2, [r7, #7]
 800d202:	429a      	cmp	r2, r3
 800d204:	d10f      	bne.n	800d226 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d206:	4b14      	ldr	r3, [pc, #80]	; (800d258 <tcp_kill_state+0x90>)
 800d208:	681a      	ldr	r2, [r3, #0]
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	6a1b      	ldr	r3, [r3, #32]
 800d20e:	1ad3      	subs	r3, r2, r3
 800d210:	68fa      	ldr	r2, [r7, #12]
 800d212:	429a      	cmp	r2, r3
 800d214:	d807      	bhi.n	800d226 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d216:	4b10      	ldr	r3, [pc, #64]	; (800d258 <tcp_kill_state+0x90>)
 800d218:	681a      	ldr	r2, [r3, #0]
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	6a1b      	ldr	r3, [r3, #32]
 800d21e:	1ad3      	subs	r3, r2, r3
 800d220:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	68db      	ldr	r3, [r3, #12]
 800d22a:	617b      	str	r3, [r7, #20]
 800d22c:	697b      	ldr	r3, [r7, #20]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d1e4      	bne.n	800d1fc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d232:	693b      	ldr	r3, [r7, #16]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d003      	beq.n	800d240 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d238:	2100      	movs	r1, #0
 800d23a:	6938      	ldr	r0, [r7, #16]
 800d23c:	f7fe ff5c 	bl	800c0f8 <tcp_abandon>
  }
}
 800d240:	bf00      	nop
 800d242:	3718      	adds	r7, #24
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}
 800d248:	08017590 	.word	0x08017590
 800d24c:	08017b1c 	.word	0x08017b1c
 800d250:	080175d4 	.word	0x080175d4
 800d254:	2000ab18 	.word	0x2000ab18
 800d258:	2000ab1c 	.word	0x2000ab1c

0800d25c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b084      	sub	sp, #16
 800d260:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d262:	2300      	movs	r3, #0
 800d264:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d266:	2300      	movs	r3, #0
 800d268:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d26a:	4b12      	ldr	r3, [pc, #72]	; (800d2b4 <tcp_kill_timewait+0x58>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	60fb      	str	r3, [r7, #12]
 800d270:	e012      	b.n	800d298 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d272:	4b11      	ldr	r3, [pc, #68]	; (800d2b8 <tcp_kill_timewait+0x5c>)
 800d274:	681a      	ldr	r2, [r3, #0]
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	6a1b      	ldr	r3, [r3, #32]
 800d27a:	1ad3      	subs	r3, r2, r3
 800d27c:	687a      	ldr	r2, [r7, #4]
 800d27e:	429a      	cmp	r2, r3
 800d280:	d807      	bhi.n	800d292 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d282:	4b0d      	ldr	r3, [pc, #52]	; (800d2b8 <tcp_kill_timewait+0x5c>)
 800d284:	681a      	ldr	r2, [r3, #0]
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	6a1b      	ldr	r3, [r3, #32]
 800d28a:	1ad3      	subs	r3, r2, r3
 800d28c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	68db      	ldr	r3, [r3, #12]
 800d296:	60fb      	str	r3, [r7, #12]
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d1e9      	bne.n	800d272 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d002      	beq.n	800d2aa <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d2a4:	68b8      	ldr	r0, [r7, #8]
 800d2a6:	f7fe ffe5 	bl	800c274 <tcp_abort>
  }
}
 800d2aa:	bf00      	nop
 800d2ac:	3710      	adds	r7, #16
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}
 800d2b2:	bf00      	nop
 800d2b4:	2000ab28 	.word	0x2000ab28
 800d2b8:	2000ab1c 	.word	0x2000ab1c

0800d2bc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b082      	sub	sp, #8
 800d2c0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d2c2:	4b10      	ldr	r3, [pc, #64]	; (800d304 <tcp_handle_closepend+0x48>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d2c8:	e014      	b.n	800d2f4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	68db      	ldr	r3, [r3, #12]
 800d2ce:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	8b5b      	ldrh	r3, [r3, #26]
 800d2d4:	f003 0308 	and.w	r3, r3, #8
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d009      	beq.n	800d2f0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	8b5b      	ldrh	r3, [r3, #26]
 800d2e0:	f023 0308 	bic.w	r3, r3, #8
 800d2e4:	b29a      	uxth	r2, r3
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f7fe fe6e 	bl	800bfcc <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d1e7      	bne.n	800d2ca <tcp_handle_closepend+0xe>
  }
}
 800d2fa:	bf00      	nop
 800d2fc:	bf00      	nop
 800d2fe:	3708      	adds	r7, #8
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}
 800d304:	2000ab18 	.word	0x2000ab18

0800d308 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b084      	sub	sp, #16
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	4603      	mov	r3, r0
 800d310:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d312:	2001      	movs	r0, #1
 800d314:	f7fd fac0 	bl	800a898 <memp_malloc>
 800d318:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d126      	bne.n	800d36e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d320:	f7ff ffcc 	bl	800d2bc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d324:	f7ff ff9a 	bl	800d25c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d328:	2001      	movs	r0, #1
 800d32a:	f7fd fab5 	bl	800a898 <memp_malloc>
 800d32e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d11b      	bne.n	800d36e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d336:	2009      	movs	r0, #9
 800d338:	f7ff ff46 	bl	800d1c8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d33c:	2001      	movs	r0, #1
 800d33e:	f7fd faab 	bl	800a898 <memp_malloc>
 800d342:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d111      	bne.n	800d36e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d34a:	2008      	movs	r0, #8
 800d34c:	f7ff ff3c 	bl	800d1c8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d350:	2001      	movs	r0, #1
 800d352:	f7fd faa1 	bl	800a898 <memp_malloc>
 800d356:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d107      	bne.n	800d36e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d35e:	79fb      	ldrb	r3, [r7, #7]
 800d360:	4618      	mov	r0, r3
 800d362:	f7ff fee3 	bl	800d12c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d366:	2001      	movs	r0, #1
 800d368:	f7fd fa96 	bl	800a898 <memp_malloc>
 800d36c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d03f      	beq.n	800d3f4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d374:	229c      	movs	r2, #156	; 0x9c
 800d376:	2100      	movs	r1, #0
 800d378:	68f8      	ldr	r0, [r7, #12]
 800d37a:	f007 fd8b 	bl	8014e94 <memset>
    pcb->prio = prio;
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	79fa      	ldrb	r2, [r7, #7]
 800d382:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d38a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d394:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	22ff      	movs	r2, #255	; 0xff
 800d3a2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d3aa:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	2206      	movs	r2, #6
 800d3b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	2206      	movs	r2, #6
 800d3b8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d3c0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	2201      	movs	r2, #1
 800d3c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d3ca:	4b0d      	ldr	r3, [pc, #52]	; (800d400 <tcp_alloc+0xf8>)
 800d3cc:	681a      	ldr	r2, [r3, #0]
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d3d2:	4b0c      	ldr	r3, [pc, #48]	; (800d404 <tcp_alloc+0xfc>)
 800d3d4:	781a      	ldrb	r2, [r3, #0]
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d3e0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	4a08      	ldr	r2, [pc, #32]	; (800d408 <tcp_alloc+0x100>)
 800d3e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	4a07      	ldr	r2, [pc, #28]	; (800d40c <tcp_alloc+0x104>)
 800d3f0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d3f4:	68fb      	ldr	r3, [r7, #12]
}
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	3710      	adds	r7, #16
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	bd80      	pop	{r7, pc}
 800d3fe:	bf00      	nop
 800d400:	2000ab1c 	.word	0x2000ab1c
 800d404:	2000409e 	.word	0x2000409e
 800d408:	0800d0c1 	.word	0x0800d0c1
 800d40c:	006ddd00 	.word	0x006ddd00

0800d410 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b084      	sub	sp, #16
 800d414:	af00      	add	r7, sp, #0
 800d416:	4603      	mov	r3, r0
 800d418:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800d41a:	2040      	movs	r0, #64	; 0x40
 800d41c:	f7ff ff74 	bl	800d308 <tcp_alloc>
 800d420:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800d422:	68fb      	ldr	r3, [r7, #12]
}
 800d424:	4618      	mov	r0, r3
 800d426:	3710      	adds	r7, #16
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}

0800d42c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800d42c:	b480      	push	{r7}
 800d42e:	b083      	sub	sp, #12
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
 800d434:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d002      	beq.n	800d442 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	683a      	ldr	r2, [r7, #0]
 800d440:	611a      	str	r2, [r3, #16]
  }
}
 800d442:	bf00      	nop
 800d444:	370c      	adds	r7, #12
 800d446:	46bd      	mov	sp, r7
 800d448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44c:	4770      	bx	lr
	...

0800d450 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b082      	sub	sp, #8
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
 800d458:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d00e      	beq.n	800d47e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	7d1b      	ldrb	r3, [r3, #20]
 800d464:	2b01      	cmp	r3, #1
 800d466:	d106      	bne.n	800d476 <tcp_recv+0x26>
 800d468:	4b07      	ldr	r3, [pc, #28]	; (800d488 <tcp_recv+0x38>)
 800d46a:	f240 72df 	movw	r2, #2015	; 0x7df
 800d46e:	4907      	ldr	r1, [pc, #28]	; (800d48c <tcp_recv+0x3c>)
 800d470:	4807      	ldr	r0, [pc, #28]	; (800d490 <tcp_recv+0x40>)
 800d472:	f007 fd17 	bl	8014ea4 <iprintf>
    pcb->recv = recv;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	683a      	ldr	r2, [r7, #0]
 800d47a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800d47e:	bf00      	nop
 800d480:	3708      	adds	r7, #8
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}
 800d486:	bf00      	nop
 800d488:	08017590 	.word	0x08017590
 800d48c:	08017b2c 	.word	0x08017b2c
 800d490:	080175d4 	.word	0x080175d4

0800d494 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b082      	sub	sp, #8
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
 800d49c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d00e      	beq.n	800d4c2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	7d1b      	ldrb	r3, [r3, #20]
 800d4a8:	2b01      	cmp	r3, #1
 800d4aa:	d106      	bne.n	800d4ba <tcp_sent+0x26>
 800d4ac:	4b07      	ldr	r3, [pc, #28]	; (800d4cc <tcp_sent+0x38>)
 800d4ae:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800d4b2:	4907      	ldr	r1, [pc, #28]	; (800d4d0 <tcp_sent+0x3c>)
 800d4b4:	4807      	ldr	r0, [pc, #28]	; (800d4d4 <tcp_sent+0x40>)
 800d4b6:	f007 fcf5 	bl	8014ea4 <iprintf>
    pcb->sent = sent;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	683a      	ldr	r2, [r7, #0]
 800d4be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800d4c2:	bf00      	nop
 800d4c4:	3708      	adds	r7, #8
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}
 800d4ca:	bf00      	nop
 800d4cc:	08017590 	.word	0x08017590
 800d4d0:	08017b54 	.word	0x08017b54
 800d4d4:	080175d4 	.word	0x080175d4

0800d4d8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b082      	sub	sp, #8
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
 800d4e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d00e      	beq.n	800d506 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	7d1b      	ldrb	r3, [r3, #20]
 800d4ec:	2b01      	cmp	r3, #1
 800d4ee:	d106      	bne.n	800d4fe <tcp_err+0x26>
 800d4f0:	4b07      	ldr	r3, [pc, #28]	; (800d510 <tcp_err+0x38>)
 800d4f2:	f640 020d 	movw	r2, #2061	; 0x80d
 800d4f6:	4907      	ldr	r1, [pc, #28]	; (800d514 <tcp_err+0x3c>)
 800d4f8:	4807      	ldr	r0, [pc, #28]	; (800d518 <tcp_err+0x40>)
 800d4fa:	f007 fcd3 	bl	8014ea4 <iprintf>
    pcb->errf = err;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	683a      	ldr	r2, [r7, #0]
 800d502:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800d506:	bf00      	nop
 800d508:	3708      	adds	r7, #8
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}
 800d50e:	bf00      	nop
 800d510:	08017590 	.word	0x08017590
 800d514:	08017b7c 	.word	0x08017b7c
 800d518:	080175d4 	.word	0x080175d4

0800d51c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b084      	sub	sp, #16
 800d520:	af00      	add	r7, sp, #0
 800d522:	60f8      	str	r0, [r7, #12]
 800d524:	60b9      	str	r1, [r7, #8]
 800d526:	4613      	mov	r3, r2
 800d528:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d107      	bne.n	800d540 <tcp_poll+0x24>
 800d530:	4b0e      	ldr	r3, [pc, #56]	; (800d56c <tcp_poll+0x50>)
 800d532:	f640 023d 	movw	r2, #2109	; 0x83d
 800d536:	490e      	ldr	r1, [pc, #56]	; (800d570 <tcp_poll+0x54>)
 800d538:	480e      	ldr	r0, [pc, #56]	; (800d574 <tcp_poll+0x58>)
 800d53a:	f007 fcb3 	bl	8014ea4 <iprintf>
 800d53e:	e011      	b.n	800d564 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	7d1b      	ldrb	r3, [r3, #20]
 800d544:	2b01      	cmp	r3, #1
 800d546:	d106      	bne.n	800d556 <tcp_poll+0x3a>
 800d548:	4b08      	ldr	r3, [pc, #32]	; (800d56c <tcp_poll+0x50>)
 800d54a:	f640 023e 	movw	r2, #2110	; 0x83e
 800d54e:	490a      	ldr	r1, [pc, #40]	; (800d578 <tcp_poll+0x5c>)
 800d550:	4808      	ldr	r0, [pc, #32]	; (800d574 <tcp_poll+0x58>)
 800d552:	f007 fca7 	bl	8014ea4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	68ba      	ldr	r2, [r7, #8]
 800d55a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	79fa      	ldrb	r2, [r7, #7]
 800d562:	775a      	strb	r2, [r3, #29]
}
 800d564:	3710      	adds	r7, #16
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}
 800d56a:	bf00      	nop
 800d56c:	08017590 	.word	0x08017590
 800d570:	08017ba4 	.word	0x08017ba4
 800d574:	080175d4 	.word	0x080175d4
 800d578:	08017bbc 	.word	0x08017bbc

0800d57c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b082      	sub	sp, #8
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d107      	bne.n	800d59a <tcp_pcb_purge+0x1e>
 800d58a:	4b21      	ldr	r3, [pc, #132]	; (800d610 <tcp_pcb_purge+0x94>)
 800d58c:	f640 0251 	movw	r2, #2129	; 0x851
 800d590:	4920      	ldr	r1, [pc, #128]	; (800d614 <tcp_pcb_purge+0x98>)
 800d592:	4821      	ldr	r0, [pc, #132]	; (800d618 <tcp_pcb_purge+0x9c>)
 800d594:	f007 fc86 	bl	8014ea4 <iprintf>
 800d598:	e037      	b.n	800d60a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	7d1b      	ldrb	r3, [r3, #20]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d033      	beq.n	800d60a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d5a6:	2b0a      	cmp	r3, #10
 800d5a8:	d02f      	beq.n	800d60a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d5ae:	2b01      	cmp	r3, #1
 800d5b0:	d02b      	beq.n	800d60a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d007      	beq.n	800d5ca <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f7fe f860 	bl	800b684 <pbuf_free>
      pcb->refused_data = NULL;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d002      	beq.n	800d5d8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d5d2:	6878      	ldr	r0, [r7, #4]
 800d5d4:	f000 f986 	bl	800d8e4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d5de:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f7ff fd11 	bl	800d00c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f7ff fd0c 	bl	800d00c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	66da      	str	r2, [r3, #108]	; 0x6c
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2200      	movs	r2, #0
 800d606:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d60a:	3708      	adds	r7, #8
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}
 800d610:	08017590 	.word	0x08017590
 800d614:	08017bdc 	.word	0x08017bdc
 800d618:	080175d4 	.word	0x080175d4

0800d61c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b084      	sub	sp, #16
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
 800d624:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d106      	bne.n	800d63a <tcp_pcb_remove+0x1e>
 800d62c:	4b3e      	ldr	r3, [pc, #248]	; (800d728 <tcp_pcb_remove+0x10c>)
 800d62e:	f640 0283 	movw	r2, #2179	; 0x883
 800d632:	493e      	ldr	r1, [pc, #248]	; (800d72c <tcp_pcb_remove+0x110>)
 800d634:	483e      	ldr	r0, [pc, #248]	; (800d730 <tcp_pcb_remove+0x114>)
 800d636:	f007 fc35 	bl	8014ea4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d106      	bne.n	800d64e <tcp_pcb_remove+0x32>
 800d640:	4b39      	ldr	r3, [pc, #228]	; (800d728 <tcp_pcb_remove+0x10c>)
 800d642:	f640 0284 	movw	r2, #2180	; 0x884
 800d646:	493b      	ldr	r1, [pc, #236]	; (800d734 <tcp_pcb_remove+0x118>)
 800d648:	4839      	ldr	r0, [pc, #228]	; (800d730 <tcp_pcb_remove+0x114>)
 800d64a:	f007 fc2b 	bl	8014ea4 <iprintf>

  TCP_RMV(pcblist, pcb);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	683a      	ldr	r2, [r7, #0]
 800d654:	429a      	cmp	r2, r3
 800d656:	d105      	bne.n	800d664 <tcp_pcb_remove+0x48>
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	68da      	ldr	r2, [r3, #12]
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	601a      	str	r2, [r3, #0]
 800d662:	e013      	b.n	800d68c <tcp_pcb_remove+0x70>
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	60fb      	str	r3, [r7, #12]
 800d66a:	e00c      	b.n	800d686 <tcp_pcb_remove+0x6a>
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	68db      	ldr	r3, [r3, #12]
 800d670:	683a      	ldr	r2, [r7, #0]
 800d672:	429a      	cmp	r2, r3
 800d674:	d104      	bne.n	800d680 <tcp_pcb_remove+0x64>
 800d676:	683b      	ldr	r3, [r7, #0]
 800d678:	68da      	ldr	r2, [r3, #12]
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	60da      	str	r2, [r3, #12]
 800d67e:	e005      	b.n	800d68c <tcp_pcb_remove+0x70>
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	68db      	ldr	r3, [r3, #12]
 800d684:	60fb      	str	r3, [r7, #12]
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d1ef      	bne.n	800d66c <tcp_pcb_remove+0x50>
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	2200      	movs	r2, #0
 800d690:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d692:	6838      	ldr	r0, [r7, #0]
 800d694:	f7ff ff72 	bl	800d57c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	7d1b      	ldrb	r3, [r3, #20]
 800d69c:	2b0a      	cmp	r3, #10
 800d69e:	d013      	beq.n	800d6c8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d6a4:	2b01      	cmp	r3, #1
 800d6a6:	d00f      	beq.n	800d6c8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	8b5b      	ldrh	r3, [r3, #26]
 800d6ac:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d009      	beq.n	800d6c8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	8b5b      	ldrh	r3, [r3, #26]
 800d6b8:	f043 0302 	orr.w	r3, r3, #2
 800d6bc:	b29a      	uxth	r2, r3
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d6c2:	6838      	ldr	r0, [r7, #0]
 800d6c4:	f003 fbc2 	bl	8010e4c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	7d1b      	ldrb	r3, [r3, #20]
 800d6cc:	2b01      	cmp	r3, #1
 800d6ce:	d020      	beq.n	800d712 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d006      	beq.n	800d6e6 <tcp_pcb_remove+0xca>
 800d6d8:	4b13      	ldr	r3, [pc, #76]	; (800d728 <tcp_pcb_remove+0x10c>)
 800d6da:	f640 0293 	movw	r2, #2195	; 0x893
 800d6de:	4916      	ldr	r1, [pc, #88]	; (800d738 <tcp_pcb_remove+0x11c>)
 800d6e0:	4813      	ldr	r0, [pc, #76]	; (800d730 <tcp_pcb_remove+0x114>)
 800d6e2:	f007 fbdf 	bl	8014ea4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d006      	beq.n	800d6fc <tcp_pcb_remove+0xe0>
 800d6ee:	4b0e      	ldr	r3, [pc, #56]	; (800d728 <tcp_pcb_remove+0x10c>)
 800d6f0:	f640 0294 	movw	r2, #2196	; 0x894
 800d6f4:	4911      	ldr	r1, [pc, #68]	; (800d73c <tcp_pcb_remove+0x120>)
 800d6f6:	480e      	ldr	r0, [pc, #56]	; (800d730 <tcp_pcb_remove+0x114>)
 800d6f8:	f007 fbd4 	bl	8014ea4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d700:	2b00      	cmp	r3, #0
 800d702:	d006      	beq.n	800d712 <tcp_pcb_remove+0xf6>
 800d704:	4b08      	ldr	r3, [pc, #32]	; (800d728 <tcp_pcb_remove+0x10c>)
 800d706:	f640 0296 	movw	r2, #2198	; 0x896
 800d70a:	490d      	ldr	r1, [pc, #52]	; (800d740 <tcp_pcb_remove+0x124>)
 800d70c:	4808      	ldr	r0, [pc, #32]	; (800d730 <tcp_pcb_remove+0x114>)
 800d70e:	f007 fbc9 	bl	8014ea4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	2200      	movs	r2, #0
 800d716:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	2200      	movs	r2, #0
 800d71c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d71e:	bf00      	nop
 800d720:	3710      	adds	r7, #16
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}
 800d726:	bf00      	nop
 800d728:	08017590 	.word	0x08017590
 800d72c:	08017bf8 	.word	0x08017bf8
 800d730:	080175d4 	.word	0x080175d4
 800d734:	08017c14 	.word	0x08017c14
 800d738:	08017c34 	.word	0x08017c34
 800d73c:	08017c4c 	.word	0x08017c4c
 800d740:	08017c68 	.word	0x08017c68

0800d744 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b082      	sub	sp, #8
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d106      	bne.n	800d760 <tcp_next_iss+0x1c>
 800d752:	4b0a      	ldr	r3, [pc, #40]	; (800d77c <tcp_next_iss+0x38>)
 800d754:	f640 02af 	movw	r2, #2223	; 0x8af
 800d758:	4909      	ldr	r1, [pc, #36]	; (800d780 <tcp_next_iss+0x3c>)
 800d75a:	480a      	ldr	r0, [pc, #40]	; (800d784 <tcp_next_iss+0x40>)
 800d75c:	f007 fba2 	bl	8014ea4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d760:	4b09      	ldr	r3, [pc, #36]	; (800d788 <tcp_next_iss+0x44>)
 800d762:	681a      	ldr	r2, [r3, #0]
 800d764:	4b09      	ldr	r3, [pc, #36]	; (800d78c <tcp_next_iss+0x48>)
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	4413      	add	r3, r2
 800d76a:	4a07      	ldr	r2, [pc, #28]	; (800d788 <tcp_next_iss+0x44>)
 800d76c:	6013      	str	r3, [r2, #0]
  return iss;
 800d76e:	4b06      	ldr	r3, [pc, #24]	; (800d788 <tcp_next_iss+0x44>)
 800d770:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d772:	4618      	mov	r0, r3
 800d774:	3708      	adds	r7, #8
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}
 800d77a:	bf00      	nop
 800d77c:	08017590 	.word	0x08017590
 800d780:	08017c80 	.word	0x08017c80
 800d784:	080175d4 	.word	0x080175d4
 800d788:	20000014 	.word	0x20000014
 800d78c:	2000ab1c 	.word	0x2000ab1c

0800d790 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b086      	sub	sp, #24
 800d794:	af00      	add	r7, sp, #0
 800d796:	4603      	mov	r3, r0
 800d798:	60b9      	str	r1, [r7, #8]
 800d79a:	607a      	str	r2, [r7, #4]
 800d79c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d106      	bne.n	800d7b2 <tcp_eff_send_mss_netif+0x22>
 800d7a4:	4b14      	ldr	r3, [pc, #80]	; (800d7f8 <tcp_eff_send_mss_netif+0x68>)
 800d7a6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800d7aa:	4914      	ldr	r1, [pc, #80]	; (800d7fc <tcp_eff_send_mss_netif+0x6c>)
 800d7ac:	4814      	ldr	r0, [pc, #80]	; (800d800 <tcp_eff_send_mss_netif+0x70>)
 800d7ae:	f007 fb79 	bl	8014ea4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d7b2:	68bb      	ldr	r3, [r7, #8]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d101      	bne.n	800d7bc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d7b8:	89fb      	ldrh	r3, [r7, #14]
 800d7ba:	e019      	b.n	800d7f0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d7c0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d7c2:	8afb      	ldrh	r3, [r7, #22]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d012      	beq.n	800d7ee <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d7c8:	2328      	movs	r3, #40	; 0x28
 800d7ca:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d7cc:	8afa      	ldrh	r2, [r7, #22]
 800d7ce:	8abb      	ldrh	r3, [r7, #20]
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	d904      	bls.n	800d7de <tcp_eff_send_mss_netif+0x4e>
 800d7d4:	8afa      	ldrh	r2, [r7, #22]
 800d7d6:	8abb      	ldrh	r3, [r7, #20]
 800d7d8:	1ad3      	subs	r3, r2, r3
 800d7da:	b29b      	uxth	r3, r3
 800d7dc:	e000      	b.n	800d7e0 <tcp_eff_send_mss_netif+0x50>
 800d7de:	2300      	movs	r3, #0
 800d7e0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d7e2:	8a7a      	ldrh	r2, [r7, #18]
 800d7e4:	89fb      	ldrh	r3, [r7, #14]
 800d7e6:	4293      	cmp	r3, r2
 800d7e8:	bf28      	it	cs
 800d7ea:	4613      	movcs	r3, r2
 800d7ec:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d7ee:	89fb      	ldrh	r3, [r7, #14]
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	3718      	adds	r7, #24
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}
 800d7f8:	08017590 	.word	0x08017590
 800d7fc:	08017c9c 	.word	0x08017c9c
 800d800:	080175d4 	.word	0x080175d4

0800d804 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b084      	sub	sp, #16
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
 800d80c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d119      	bne.n	800d84c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d818:	4b10      	ldr	r3, [pc, #64]	; (800d85c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d81a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800d81e:	4910      	ldr	r1, [pc, #64]	; (800d860 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d820:	4810      	ldr	r0, [pc, #64]	; (800d864 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d822:	f007 fb3f 	bl	8014ea4 <iprintf>

  while (pcb != NULL) {
 800d826:	e011      	b.n	800d84c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	681a      	ldr	r2, [r3, #0]
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	429a      	cmp	r2, r3
 800d832:	d108      	bne.n	800d846 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	68db      	ldr	r3, [r3, #12]
 800d838:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d83a:	68f8      	ldr	r0, [r7, #12]
 800d83c:	f7fe fd1a 	bl	800c274 <tcp_abort>
      pcb = next;
 800d840:	68bb      	ldr	r3, [r7, #8]
 800d842:	60fb      	str	r3, [r7, #12]
 800d844:	e002      	b.n	800d84c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	68db      	ldr	r3, [r3, #12]
 800d84a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d1ea      	bne.n	800d828 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d852:	bf00      	nop
 800d854:	bf00      	nop
 800d856:	3710      	adds	r7, #16
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd80      	pop	{r7, pc}
 800d85c:	08017590 	.word	0x08017590
 800d860:	08017cc4 	.word	0x08017cc4
 800d864:	080175d4 	.word	0x080175d4

0800d868 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b084      	sub	sp, #16
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
 800d870:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d02a      	beq.n	800d8ce <tcp_netif_ip_addr_changed+0x66>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d026      	beq.n	800d8ce <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d880:	4b15      	ldr	r3, [pc, #84]	; (800d8d8 <tcp_netif_ip_addr_changed+0x70>)
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	4619      	mov	r1, r3
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f7ff ffbc 	bl	800d804 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d88c:	4b13      	ldr	r3, [pc, #76]	; (800d8dc <tcp_netif_ip_addr_changed+0x74>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	4619      	mov	r1, r3
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	f7ff ffb6 	bl	800d804 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d017      	beq.n	800d8ce <tcp_netif_ip_addr_changed+0x66>
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d013      	beq.n	800d8ce <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d8a6:	4b0e      	ldr	r3, [pc, #56]	; (800d8e0 <tcp_netif_ip_addr_changed+0x78>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	60fb      	str	r3, [r7, #12]
 800d8ac:	e00c      	b.n	800d8c8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	681a      	ldr	r2, [r3, #0]
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	429a      	cmp	r2, r3
 800d8b8:	d103      	bne.n	800d8c2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	681a      	ldr	r2, [r3, #0]
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	68db      	ldr	r3, [r3, #12]
 800d8c6:	60fb      	str	r3, [r7, #12]
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d1ef      	bne.n	800d8ae <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d8ce:	bf00      	nop
 800d8d0:	3710      	adds	r7, #16
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bd80      	pop	{r7, pc}
 800d8d6:	bf00      	nop
 800d8d8:	2000ab18 	.word	0x2000ab18
 800d8dc:	2000ab24 	.word	0x2000ab24
 800d8e0:	2000ab20 	.word	0x2000ab20

0800d8e4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b082      	sub	sp, #8
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d007      	beq.n	800d904 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f7ff fb87 	bl	800d00c <tcp_segs_free>
    pcb->ooseq = NULL;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	2200      	movs	r2, #0
 800d902:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d904:	bf00      	nop
 800d906:	3708      	adds	r7, #8
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}

0800d90c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d90c:	b590      	push	{r4, r7, lr}
 800d90e:	b08d      	sub	sp, #52	; 0x34
 800d910:	af04      	add	r7, sp, #16
 800d912:	6078      	str	r0, [r7, #4]
 800d914:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d105      	bne.n	800d928 <tcp_input+0x1c>
 800d91c:	4b9b      	ldr	r3, [pc, #620]	; (800db8c <tcp_input+0x280>)
 800d91e:	2283      	movs	r2, #131	; 0x83
 800d920:	499b      	ldr	r1, [pc, #620]	; (800db90 <tcp_input+0x284>)
 800d922:	489c      	ldr	r0, [pc, #624]	; (800db94 <tcp_input+0x288>)
 800d924:	f007 fabe 	bl	8014ea4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	685b      	ldr	r3, [r3, #4]
 800d92c:	4a9a      	ldr	r2, [pc, #616]	; (800db98 <tcp_input+0x28c>)
 800d92e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	895b      	ldrh	r3, [r3, #10]
 800d934:	2b13      	cmp	r3, #19
 800d936:	f240 83c4 	bls.w	800e0c2 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d93a:	4b98      	ldr	r3, [pc, #608]	; (800db9c <tcp_input+0x290>)
 800d93c:	695b      	ldr	r3, [r3, #20]
 800d93e:	4a97      	ldr	r2, [pc, #604]	; (800db9c <tcp_input+0x290>)
 800d940:	6812      	ldr	r2, [r2, #0]
 800d942:	4611      	mov	r1, r2
 800d944:	4618      	mov	r0, r3
 800d946:	f006 f8d5 	bl	8013af4 <ip4_addr_isbroadcast_u32>
 800d94a:	4603      	mov	r3, r0
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	f040 83ba 	bne.w	800e0c6 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d952:	4b92      	ldr	r3, [pc, #584]	; (800db9c <tcp_input+0x290>)
 800d954:	695b      	ldr	r3, [r3, #20]
 800d956:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d95a:	2be0      	cmp	r3, #224	; 0xe0
 800d95c:	f000 83b3 	beq.w	800e0c6 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d960:	4b8d      	ldr	r3, [pc, #564]	; (800db98 <tcp_input+0x28c>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	899b      	ldrh	r3, [r3, #12]
 800d966:	b29b      	uxth	r3, r3
 800d968:	4618      	mov	r0, r3
 800d96a:	f7fc fab7 	bl	8009edc <lwip_htons>
 800d96e:	4603      	mov	r3, r0
 800d970:	0b1b      	lsrs	r3, r3, #12
 800d972:	b29b      	uxth	r3, r3
 800d974:	b2db      	uxtb	r3, r3
 800d976:	009b      	lsls	r3, r3, #2
 800d978:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d97a:	7cbb      	ldrb	r3, [r7, #18]
 800d97c:	2b13      	cmp	r3, #19
 800d97e:	f240 83a4 	bls.w	800e0ca <tcp_input+0x7be>
 800d982:	7cbb      	ldrb	r3, [r7, #18]
 800d984:	b29a      	uxth	r2, r3
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	891b      	ldrh	r3, [r3, #8]
 800d98a:	429a      	cmp	r2, r3
 800d98c:	f200 839d 	bhi.w	800e0ca <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d990:	7cbb      	ldrb	r3, [r7, #18]
 800d992:	b29b      	uxth	r3, r3
 800d994:	3b14      	subs	r3, #20
 800d996:	b29a      	uxth	r2, r3
 800d998:	4b81      	ldr	r3, [pc, #516]	; (800dba0 <tcp_input+0x294>)
 800d99a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d99c:	4b81      	ldr	r3, [pc, #516]	; (800dba4 <tcp_input+0x298>)
 800d99e:	2200      	movs	r2, #0
 800d9a0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	895a      	ldrh	r2, [r3, #10]
 800d9a6:	7cbb      	ldrb	r3, [r7, #18]
 800d9a8:	b29b      	uxth	r3, r3
 800d9aa:	429a      	cmp	r2, r3
 800d9ac:	d309      	bcc.n	800d9c2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d9ae:	4b7c      	ldr	r3, [pc, #496]	; (800dba0 <tcp_input+0x294>)
 800d9b0:	881a      	ldrh	r2, [r3, #0]
 800d9b2:	4b7d      	ldr	r3, [pc, #500]	; (800dba8 <tcp_input+0x29c>)
 800d9b4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d9b6:	7cbb      	ldrb	r3, [r7, #18]
 800d9b8:	4619      	mov	r1, r3
 800d9ba:	6878      	ldr	r0, [r7, #4]
 800d9bc:	f7fd fddc 	bl	800b578 <pbuf_remove_header>
 800d9c0:	e04e      	b.n	800da60 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d105      	bne.n	800d9d6 <tcp_input+0xca>
 800d9ca:	4b70      	ldr	r3, [pc, #448]	; (800db8c <tcp_input+0x280>)
 800d9cc:	22c2      	movs	r2, #194	; 0xc2
 800d9ce:	4977      	ldr	r1, [pc, #476]	; (800dbac <tcp_input+0x2a0>)
 800d9d0:	4870      	ldr	r0, [pc, #448]	; (800db94 <tcp_input+0x288>)
 800d9d2:	f007 fa67 	bl	8014ea4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d9d6:	2114      	movs	r1, #20
 800d9d8:	6878      	ldr	r0, [r7, #4]
 800d9da:	f7fd fdcd 	bl	800b578 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	895a      	ldrh	r2, [r3, #10]
 800d9e2:	4b71      	ldr	r3, [pc, #452]	; (800dba8 <tcp_input+0x29c>)
 800d9e4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d9e6:	4b6e      	ldr	r3, [pc, #440]	; (800dba0 <tcp_input+0x294>)
 800d9e8:	881a      	ldrh	r2, [r3, #0]
 800d9ea:	4b6f      	ldr	r3, [pc, #444]	; (800dba8 <tcp_input+0x29c>)
 800d9ec:	881b      	ldrh	r3, [r3, #0]
 800d9ee:	1ad3      	subs	r3, r2, r3
 800d9f0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d9f2:	4b6d      	ldr	r3, [pc, #436]	; (800dba8 <tcp_input+0x29c>)
 800d9f4:	881b      	ldrh	r3, [r3, #0]
 800d9f6:	4619      	mov	r1, r3
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f7fd fdbd 	bl	800b578 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	895b      	ldrh	r3, [r3, #10]
 800da04:	8a3a      	ldrh	r2, [r7, #16]
 800da06:	429a      	cmp	r2, r3
 800da08:	f200 8361 	bhi.w	800e0ce <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	685b      	ldr	r3, [r3, #4]
 800da12:	4a64      	ldr	r2, [pc, #400]	; (800dba4 <tcp_input+0x298>)
 800da14:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	8a3a      	ldrh	r2, [r7, #16]
 800da1c:	4611      	mov	r1, r2
 800da1e:	4618      	mov	r0, r3
 800da20:	f7fd fdaa 	bl	800b578 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	891a      	ldrh	r2, [r3, #8]
 800da28:	8a3b      	ldrh	r3, [r7, #16]
 800da2a:	1ad3      	subs	r3, r2, r3
 800da2c:	b29a      	uxth	r2, r3
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	895b      	ldrh	r3, [r3, #10]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d005      	beq.n	800da46 <tcp_input+0x13a>
 800da3a:	4b54      	ldr	r3, [pc, #336]	; (800db8c <tcp_input+0x280>)
 800da3c:	22df      	movs	r2, #223	; 0xdf
 800da3e:	495c      	ldr	r1, [pc, #368]	; (800dbb0 <tcp_input+0x2a4>)
 800da40:	4854      	ldr	r0, [pc, #336]	; (800db94 <tcp_input+0x288>)
 800da42:	f007 fa2f 	bl	8014ea4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	891a      	ldrh	r2, [r3, #8]
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	891b      	ldrh	r3, [r3, #8]
 800da50:	429a      	cmp	r2, r3
 800da52:	d005      	beq.n	800da60 <tcp_input+0x154>
 800da54:	4b4d      	ldr	r3, [pc, #308]	; (800db8c <tcp_input+0x280>)
 800da56:	22e0      	movs	r2, #224	; 0xe0
 800da58:	4956      	ldr	r1, [pc, #344]	; (800dbb4 <tcp_input+0x2a8>)
 800da5a:	484e      	ldr	r0, [pc, #312]	; (800db94 <tcp_input+0x288>)
 800da5c:	f007 fa22 	bl	8014ea4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800da60:	4b4d      	ldr	r3, [pc, #308]	; (800db98 <tcp_input+0x28c>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	881b      	ldrh	r3, [r3, #0]
 800da66:	b29b      	uxth	r3, r3
 800da68:	4a4b      	ldr	r2, [pc, #300]	; (800db98 <tcp_input+0x28c>)
 800da6a:	6814      	ldr	r4, [r2, #0]
 800da6c:	4618      	mov	r0, r3
 800da6e:	f7fc fa35 	bl	8009edc <lwip_htons>
 800da72:	4603      	mov	r3, r0
 800da74:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800da76:	4b48      	ldr	r3, [pc, #288]	; (800db98 <tcp_input+0x28c>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	885b      	ldrh	r3, [r3, #2]
 800da7c:	b29b      	uxth	r3, r3
 800da7e:	4a46      	ldr	r2, [pc, #280]	; (800db98 <tcp_input+0x28c>)
 800da80:	6814      	ldr	r4, [r2, #0]
 800da82:	4618      	mov	r0, r3
 800da84:	f7fc fa2a 	bl	8009edc <lwip_htons>
 800da88:	4603      	mov	r3, r0
 800da8a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800da8c:	4b42      	ldr	r3, [pc, #264]	; (800db98 <tcp_input+0x28c>)
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	685b      	ldr	r3, [r3, #4]
 800da92:	4a41      	ldr	r2, [pc, #260]	; (800db98 <tcp_input+0x28c>)
 800da94:	6814      	ldr	r4, [r2, #0]
 800da96:	4618      	mov	r0, r3
 800da98:	f7fc fa35 	bl	8009f06 <lwip_htonl>
 800da9c:	4603      	mov	r3, r0
 800da9e:	6063      	str	r3, [r4, #4]
 800daa0:	6863      	ldr	r3, [r4, #4]
 800daa2:	4a45      	ldr	r2, [pc, #276]	; (800dbb8 <tcp_input+0x2ac>)
 800daa4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800daa6:	4b3c      	ldr	r3, [pc, #240]	; (800db98 <tcp_input+0x28c>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	689b      	ldr	r3, [r3, #8]
 800daac:	4a3a      	ldr	r2, [pc, #232]	; (800db98 <tcp_input+0x28c>)
 800daae:	6814      	ldr	r4, [r2, #0]
 800dab0:	4618      	mov	r0, r3
 800dab2:	f7fc fa28 	bl	8009f06 <lwip_htonl>
 800dab6:	4603      	mov	r3, r0
 800dab8:	60a3      	str	r3, [r4, #8]
 800daba:	68a3      	ldr	r3, [r4, #8]
 800dabc:	4a3f      	ldr	r2, [pc, #252]	; (800dbbc <tcp_input+0x2b0>)
 800dabe:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800dac0:	4b35      	ldr	r3, [pc, #212]	; (800db98 <tcp_input+0x28c>)
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	89db      	ldrh	r3, [r3, #14]
 800dac6:	b29b      	uxth	r3, r3
 800dac8:	4a33      	ldr	r2, [pc, #204]	; (800db98 <tcp_input+0x28c>)
 800daca:	6814      	ldr	r4, [r2, #0]
 800dacc:	4618      	mov	r0, r3
 800dace:	f7fc fa05 	bl	8009edc <lwip_htons>
 800dad2:	4603      	mov	r3, r0
 800dad4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800dad6:	4b30      	ldr	r3, [pc, #192]	; (800db98 <tcp_input+0x28c>)
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	899b      	ldrh	r3, [r3, #12]
 800dadc:	b29b      	uxth	r3, r3
 800dade:	4618      	mov	r0, r3
 800dae0:	f7fc f9fc 	bl	8009edc <lwip_htons>
 800dae4:	4603      	mov	r3, r0
 800dae6:	b2db      	uxtb	r3, r3
 800dae8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800daec:	b2da      	uxtb	r2, r3
 800daee:	4b34      	ldr	r3, [pc, #208]	; (800dbc0 <tcp_input+0x2b4>)
 800daf0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	891a      	ldrh	r2, [r3, #8]
 800daf6:	4b33      	ldr	r3, [pc, #204]	; (800dbc4 <tcp_input+0x2b8>)
 800daf8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800dafa:	4b31      	ldr	r3, [pc, #196]	; (800dbc0 <tcp_input+0x2b4>)
 800dafc:	781b      	ldrb	r3, [r3, #0]
 800dafe:	f003 0303 	and.w	r3, r3, #3
 800db02:	2b00      	cmp	r3, #0
 800db04:	d00c      	beq.n	800db20 <tcp_input+0x214>
    tcplen++;
 800db06:	4b2f      	ldr	r3, [pc, #188]	; (800dbc4 <tcp_input+0x2b8>)
 800db08:	881b      	ldrh	r3, [r3, #0]
 800db0a:	3301      	adds	r3, #1
 800db0c:	b29a      	uxth	r2, r3
 800db0e:	4b2d      	ldr	r3, [pc, #180]	; (800dbc4 <tcp_input+0x2b8>)
 800db10:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	891a      	ldrh	r2, [r3, #8]
 800db16:	4b2b      	ldr	r3, [pc, #172]	; (800dbc4 <tcp_input+0x2b8>)
 800db18:	881b      	ldrh	r3, [r3, #0]
 800db1a:	429a      	cmp	r2, r3
 800db1c:	f200 82d9 	bhi.w	800e0d2 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800db20:	2300      	movs	r3, #0
 800db22:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800db24:	4b28      	ldr	r3, [pc, #160]	; (800dbc8 <tcp_input+0x2bc>)
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	61fb      	str	r3, [r7, #28]
 800db2a:	e09d      	b.n	800dc68 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800db2c:	69fb      	ldr	r3, [r7, #28]
 800db2e:	7d1b      	ldrb	r3, [r3, #20]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d105      	bne.n	800db40 <tcp_input+0x234>
 800db34:	4b15      	ldr	r3, [pc, #84]	; (800db8c <tcp_input+0x280>)
 800db36:	22fb      	movs	r2, #251	; 0xfb
 800db38:	4924      	ldr	r1, [pc, #144]	; (800dbcc <tcp_input+0x2c0>)
 800db3a:	4816      	ldr	r0, [pc, #88]	; (800db94 <tcp_input+0x288>)
 800db3c:	f007 f9b2 	bl	8014ea4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800db40:	69fb      	ldr	r3, [r7, #28]
 800db42:	7d1b      	ldrb	r3, [r3, #20]
 800db44:	2b0a      	cmp	r3, #10
 800db46:	d105      	bne.n	800db54 <tcp_input+0x248>
 800db48:	4b10      	ldr	r3, [pc, #64]	; (800db8c <tcp_input+0x280>)
 800db4a:	22fc      	movs	r2, #252	; 0xfc
 800db4c:	4920      	ldr	r1, [pc, #128]	; (800dbd0 <tcp_input+0x2c4>)
 800db4e:	4811      	ldr	r0, [pc, #68]	; (800db94 <tcp_input+0x288>)
 800db50:	f007 f9a8 	bl	8014ea4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800db54:	69fb      	ldr	r3, [r7, #28]
 800db56:	7d1b      	ldrb	r3, [r3, #20]
 800db58:	2b01      	cmp	r3, #1
 800db5a:	d105      	bne.n	800db68 <tcp_input+0x25c>
 800db5c:	4b0b      	ldr	r3, [pc, #44]	; (800db8c <tcp_input+0x280>)
 800db5e:	22fd      	movs	r2, #253	; 0xfd
 800db60:	491c      	ldr	r1, [pc, #112]	; (800dbd4 <tcp_input+0x2c8>)
 800db62:	480c      	ldr	r0, [pc, #48]	; (800db94 <tcp_input+0x288>)
 800db64:	f007 f99e 	bl	8014ea4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800db68:	69fb      	ldr	r3, [r7, #28]
 800db6a:	7a1b      	ldrb	r3, [r3, #8]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d033      	beq.n	800dbd8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800db70:	69fb      	ldr	r3, [r7, #28]
 800db72:	7a1a      	ldrb	r2, [r3, #8]
 800db74:	4b09      	ldr	r3, [pc, #36]	; (800db9c <tcp_input+0x290>)
 800db76:	685b      	ldr	r3, [r3, #4]
 800db78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800db7c:	3301      	adds	r3, #1
 800db7e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800db80:	429a      	cmp	r2, r3
 800db82:	d029      	beq.n	800dbd8 <tcp_input+0x2cc>
      prev = pcb;
 800db84:	69fb      	ldr	r3, [r7, #28]
 800db86:	61bb      	str	r3, [r7, #24]
      continue;
 800db88:	e06b      	b.n	800dc62 <tcp_input+0x356>
 800db8a:	bf00      	nop
 800db8c:	08017cf8 	.word	0x08017cf8
 800db90:	08017d2c 	.word	0x08017d2c
 800db94:	08017d44 	.word	0x08017d44
 800db98:	200040b0 	.word	0x200040b0
 800db9c:	20007404 	.word	0x20007404
 800dba0:	200040b4 	.word	0x200040b4
 800dba4:	200040b8 	.word	0x200040b8
 800dba8:	200040b6 	.word	0x200040b6
 800dbac:	08017d6c 	.word	0x08017d6c
 800dbb0:	08017d7c 	.word	0x08017d7c
 800dbb4:	08017d88 	.word	0x08017d88
 800dbb8:	200040c0 	.word	0x200040c0
 800dbbc:	200040c4 	.word	0x200040c4
 800dbc0:	200040cc 	.word	0x200040cc
 800dbc4:	200040ca 	.word	0x200040ca
 800dbc8:	2000ab18 	.word	0x2000ab18
 800dbcc:	08017da8 	.word	0x08017da8
 800dbd0:	08017dd0 	.word	0x08017dd0
 800dbd4:	08017dfc 	.word	0x08017dfc
    }

    if (pcb->remote_port == tcphdr->src &&
 800dbd8:	69fb      	ldr	r3, [r7, #28]
 800dbda:	8b1a      	ldrh	r2, [r3, #24]
 800dbdc:	4b94      	ldr	r3, [pc, #592]	; (800de30 <tcp_input+0x524>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	881b      	ldrh	r3, [r3, #0]
 800dbe2:	b29b      	uxth	r3, r3
 800dbe4:	429a      	cmp	r2, r3
 800dbe6:	d13a      	bne.n	800dc5e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800dbe8:	69fb      	ldr	r3, [r7, #28]
 800dbea:	8ada      	ldrh	r2, [r3, #22]
 800dbec:	4b90      	ldr	r3, [pc, #576]	; (800de30 <tcp_input+0x524>)
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	885b      	ldrh	r3, [r3, #2]
 800dbf2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800dbf4:	429a      	cmp	r2, r3
 800dbf6:	d132      	bne.n	800dc5e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dbf8:	69fb      	ldr	r3, [r7, #28]
 800dbfa:	685a      	ldr	r2, [r3, #4]
 800dbfc:	4b8d      	ldr	r3, [pc, #564]	; (800de34 <tcp_input+0x528>)
 800dbfe:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800dc00:	429a      	cmp	r2, r3
 800dc02:	d12c      	bne.n	800dc5e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dc04:	69fb      	ldr	r3, [r7, #28]
 800dc06:	681a      	ldr	r2, [r3, #0]
 800dc08:	4b8a      	ldr	r3, [pc, #552]	; (800de34 <tcp_input+0x528>)
 800dc0a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dc0c:	429a      	cmp	r2, r3
 800dc0e:	d126      	bne.n	800dc5e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800dc10:	69fb      	ldr	r3, [r7, #28]
 800dc12:	68db      	ldr	r3, [r3, #12]
 800dc14:	69fa      	ldr	r2, [r7, #28]
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d106      	bne.n	800dc28 <tcp_input+0x31c>
 800dc1a:	4b87      	ldr	r3, [pc, #540]	; (800de38 <tcp_input+0x52c>)
 800dc1c:	f240 120d 	movw	r2, #269	; 0x10d
 800dc20:	4986      	ldr	r1, [pc, #536]	; (800de3c <tcp_input+0x530>)
 800dc22:	4887      	ldr	r0, [pc, #540]	; (800de40 <tcp_input+0x534>)
 800dc24:	f007 f93e 	bl	8014ea4 <iprintf>
      if (prev != NULL) {
 800dc28:	69bb      	ldr	r3, [r7, #24]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d00a      	beq.n	800dc44 <tcp_input+0x338>
        prev->next = pcb->next;
 800dc2e:	69fb      	ldr	r3, [r7, #28]
 800dc30:	68da      	ldr	r2, [r3, #12]
 800dc32:	69bb      	ldr	r3, [r7, #24]
 800dc34:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800dc36:	4b83      	ldr	r3, [pc, #524]	; (800de44 <tcp_input+0x538>)
 800dc38:	681a      	ldr	r2, [r3, #0]
 800dc3a:	69fb      	ldr	r3, [r7, #28]
 800dc3c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800dc3e:	4a81      	ldr	r2, [pc, #516]	; (800de44 <tcp_input+0x538>)
 800dc40:	69fb      	ldr	r3, [r7, #28]
 800dc42:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800dc44:	69fb      	ldr	r3, [r7, #28]
 800dc46:	68db      	ldr	r3, [r3, #12]
 800dc48:	69fa      	ldr	r2, [r7, #28]
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d111      	bne.n	800dc72 <tcp_input+0x366>
 800dc4e:	4b7a      	ldr	r3, [pc, #488]	; (800de38 <tcp_input+0x52c>)
 800dc50:	f240 1215 	movw	r2, #277	; 0x115
 800dc54:	497c      	ldr	r1, [pc, #496]	; (800de48 <tcp_input+0x53c>)
 800dc56:	487a      	ldr	r0, [pc, #488]	; (800de40 <tcp_input+0x534>)
 800dc58:	f007 f924 	bl	8014ea4 <iprintf>
      break;
 800dc5c:	e009      	b.n	800dc72 <tcp_input+0x366>
    }
    prev = pcb;
 800dc5e:	69fb      	ldr	r3, [r7, #28]
 800dc60:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc62:	69fb      	ldr	r3, [r7, #28]
 800dc64:	68db      	ldr	r3, [r3, #12]
 800dc66:	61fb      	str	r3, [r7, #28]
 800dc68:	69fb      	ldr	r3, [r7, #28]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	f47f af5e 	bne.w	800db2c <tcp_input+0x220>
 800dc70:	e000      	b.n	800dc74 <tcp_input+0x368>
      break;
 800dc72:	bf00      	nop
  }

  if (pcb == NULL) {
 800dc74:	69fb      	ldr	r3, [r7, #28]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	f040 8095 	bne.w	800dda6 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc7c:	4b73      	ldr	r3, [pc, #460]	; (800de4c <tcp_input+0x540>)
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	61fb      	str	r3, [r7, #28]
 800dc82:	e03f      	b.n	800dd04 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800dc84:	69fb      	ldr	r3, [r7, #28]
 800dc86:	7d1b      	ldrb	r3, [r3, #20]
 800dc88:	2b0a      	cmp	r3, #10
 800dc8a:	d006      	beq.n	800dc9a <tcp_input+0x38e>
 800dc8c:	4b6a      	ldr	r3, [pc, #424]	; (800de38 <tcp_input+0x52c>)
 800dc8e:	f240 121f 	movw	r2, #287	; 0x11f
 800dc92:	496f      	ldr	r1, [pc, #444]	; (800de50 <tcp_input+0x544>)
 800dc94:	486a      	ldr	r0, [pc, #424]	; (800de40 <tcp_input+0x534>)
 800dc96:	f007 f905 	bl	8014ea4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dc9a:	69fb      	ldr	r3, [r7, #28]
 800dc9c:	7a1b      	ldrb	r3, [r3, #8]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d009      	beq.n	800dcb6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dca2:	69fb      	ldr	r3, [r7, #28]
 800dca4:	7a1a      	ldrb	r2, [r3, #8]
 800dca6:	4b63      	ldr	r3, [pc, #396]	; (800de34 <tcp_input+0x528>)
 800dca8:	685b      	ldr	r3, [r3, #4]
 800dcaa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dcae:	3301      	adds	r3, #1
 800dcb0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dcb2:	429a      	cmp	r2, r3
 800dcb4:	d122      	bne.n	800dcfc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800dcb6:	69fb      	ldr	r3, [r7, #28]
 800dcb8:	8b1a      	ldrh	r2, [r3, #24]
 800dcba:	4b5d      	ldr	r3, [pc, #372]	; (800de30 <tcp_input+0x524>)
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	881b      	ldrh	r3, [r3, #0]
 800dcc0:	b29b      	uxth	r3, r3
 800dcc2:	429a      	cmp	r2, r3
 800dcc4:	d11b      	bne.n	800dcfe <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800dcc6:	69fb      	ldr	r3, [r7, #28]
 800dcc8:	8ada      	ldrh	r2, [r3, #22]
 800dcca:	4b59      	ldr	r3, [pc, #356]	; (800de30 <tcp_input+0x524>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	885b      	ldrh	r3, [r3, #2]
 800dcd0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800dcd2:	429a      	cmp	r2, r3
 800dcd4:	d113      	bne.n	800dcfe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dcd6:	69fb      	ldr	r3, [r7, #28]
 800dcd8:	685a      	ldr	r2, [r3, #4]
 800dcda:	4b56      	ldr	r3, [pc, #344]	; (800de34 <tcp_input+0x528>)
 800dcdc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800dcde:	429a      	cmp	r2, r3
 800dce0:	d10d      	bne.n	800dcfe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dce2:	69fb      	ldr	r3, [r7, #28]
 800dce4:	681a      	ldr	r2, [r3, #0]
 800dce6:	4b53      	ldr	r3, [pc, #332]	; (800de34 <tcp_input+0x528>)
 800dce8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dcea:	429a      	cmp	r2, r3
 800dcec:	d107      	bne.n	800dcfe <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800dcee:	69f8      	ldr	r0, [r7, #28]
 800dcf0:	f000 fb54 	bl	800e39c <tcp_timewait_input>
        }
        pbuf_free(p);
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f7fd fcc5 	bl	800b684 <pbuf_free>
        return;
 800dcfa:	e1f0      	b.n	800e0de <tcp_input+0x7d2>
        continue;
 800dcfc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dcfe:	69fb      	ldr	r3, [r7, #28]
 800dd00:	68db      	ldr	r3, [r3, #12]
 800dd02:	61fb      	str	r3, [r7, #28]
 800dd04:	69fb      	ldr	r3, [r7, #28]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d1bc      	bne.n	800dc84 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dd0e:	4b51      	ldr	r3, [pc, #324]	; (800de54 <tcp_input+0x548>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	617b      	str	r3, [r7, #20]
 800dd14:	e02a      	b.n	800dd6c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800dd16:	697b      	ldr	r3, [r7, #20]
 800dd18:	7a1b      	ldrb	r3, [r3, #8]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d00c      	beq.n	800dd38 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	7a1a      	ldrb	r2, [r3, #8]
 800dd22:	4b44      	ldr	r3, [pc, #272]	; (800de34 <tcp_input+0x528>)
 800dd24:	685b      	ldr	r3, [r3, #4]
 800dd26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dd2a:	3301      	adds	r3, #1
 800dd2c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800dd2e:	429a      	cmp	r2, r3
 800dd30:	d002      	beq.n	800dd38 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800dd32:	697b      	ldr	r3, [r7, #20]
 800dd34:	61bb      	str	r3, [r7, #24]
        continue;
 800dd36:	e016      	b.n	800dd66 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800dd38:	697b      	ldr	r3, [r7, #20]
 800dd3a:	8ada      	ldrh	r2, [r3, #22]
 800dd3c:	4b3c      	ldr	r3, [pc, #240]	; (800de30 <tcp_input+0x524>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	885b      	ldrh	r3, [r3, #2]
 800dd42:	b29b      	uxth	r3, r3
 800dd44:	429a      	cmp	r2, r3
 800dd46:	d10c      	bne.n	800dd62 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800dd48:	697b      	ldr	r3, [r7, #20]
 800dd4a:	681a      	ldr	r2, [r3, #0]
 800dd4c:	4b39      	ldr	r3, [pc, #228]	; (800de34 <tcp_input+0x528>)
 800dd4e:	695b      	ldr	r3, [r3, #20]
 800dd50:	429a      	cmp	r2, r3
 800dd52:	d00f      	beq.n	800dd74 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800dd54:	697b      	ldr	r3, [r7, #20]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d00d      	beq.n	800dd76 <tcp_input+0x46a>
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d009      	beq.n	800dd76 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800dd62:	697b      	ldr	r3, [r7, #20]
 800dd64:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	68db      	ldr	r3, [r3, #12]
 800dd6a:	617b      	str	r3, [r7, #20]
 800dd6c:	697b      	ldr	r3, [r7, #20]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d1d1      	bne.n	800dd16 <tcp_input+0x40a>
 800dd72:	e000      	b.n	800dd76 <tcp_input+0x46a>
            break;
 800dd74:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d014      	beq.n	800dda6 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800dd7c:	69bb      	ldr	r3, [r7, #24]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d00a      	beq.n	800dd98 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	68da      	ldr	r2, [r3, #12]
 800dd86:	69bb      	ldr	r3, [r7, #24]
 800dd88:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800dd8a:	4b32      	ldr	r3, [pc, #200]	; (800de54 <tcp_input+0x548>)
 800dd8c:	681a      	ldr	r2, [r3, #0]
 800dd8e:	697b      	ldr	r3, [r7, #20]
 800dd90:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800dd92:	4a30      	ldr	r2, [pc, #192]	; (800de54 <tcp_input+0x548>)
 800dd94:	697b      	ldr	r3, [r7, #20]
 800dd96:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800dd98:	6978      	ldr	r0, [r7, #20]
 800dd9a:	f000 fa01 	bl	800e1a0 <tcp_listen_input>
      }
      pbuf_free(p);
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f7fd fc70 	bl	800b684 <pbuf_free>
      return;
 800dda4:	e19b      	b.n	800e0de <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800dda6:	69fb      	ldr	r3, [r7, #28]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	f000 8160 	beq.w	800e06e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800ddae:	4b2a      	ldr	r3, [pc, #168]	; (800de58 <tcp_input+0x54c>)
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	891a      	ldrh	r2, [r3, #8]
 800ddb8:	4b27      	ldr	r3, [pc, #156]	; (800de58 <tcp_input+0x54c>)
 800ddba:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800ddbc:	4a26      	ldr	r2, [pc, #152]	; (800de58 <tcp_input+0x54c>)
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ddc2:	4b1b      	ldr	r3, [pc, #108]	; (800de30 <tcp_input+0x524>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	4a24      	ldr	r2, [pc, #144]	; (800de58 <tcp_input+0x54c>)
 800ddc8:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800ddca:	4b24      	ldr	r3, [pc, #144]	; (800de5c <tcp_input+0x550>)
 800ddcc:	2200      	movs	r2, #0
 800ddce:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ddd0:	4b23      	ldr	r3, [pc, #140]	; (800de60 <tcp_input+0x554>)
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800ddd6:	4b23      	ldr	r3, [pc, #140]	; (800de64 <tcp_input+0x558>)
 800ddd8:	2200      	movs	r2, #0
 800ddda:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800dddc:	4b22      	ldr	r3, [pc, #136]	; (800de68 <tcp_input+0x55c>)
 800ddde:	781b      	ldrb	r3, [r3, #0]
 800dde0:	f003 0308 	and.w	r3, r3, #8
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d006      	beq.n	800ddf6 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	7b5b      	ldrb	r3, [r3, #13]
 800ddec:	f043 0301 	orr.w	r3, r3, #1
 800ddf0:	b2da      	uxtb	r2, r3
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800ddf6:	69fb      	ldr	r3, [r7, #28]
 800ddf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d038      	beq.n	800de70 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ddfe:	69f8      	ldr	r0, [r7, #28]
 800de00:	f7ff f888 	bl	800cf14 <tcp_process_refused_data>
 800de04:	4603      	mov	r3, r0
 800de06:	f113 0f0d 	cmn.w	r3, #13
 800de0a:	d007      	beq.n	800de1c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800de0c:	69fb      	ldr	r3, [r7, #28]
 800de0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800de10:	2b00      	cmp	r3, #0
 800de12:	d02d      	beq.n	800de70 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800de14:	4b15      	ldr	r3, [pc, #84]	; (800de6c <tcp_input+0x560>)
 800de16:	881b      	ldrh	r3, [r3, #0]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d029      	beq.n	800de70 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800de1c:	69fb      	ldr	r3, [r7, #28]
 800de1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de20:	2b00      	cmp	r3, #0
 800de22:	f040 8104 	bne.w	800e02e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800de26:	69f8      	ldr	r0, [r7, #28]
 800de28:	f003 fe16 	bl	8011a58 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800de2c:	e0ff      	b.n	800e02e <tcp_input+0x722>
 800de2e:	bf00      	nop
 800de30:	200040b0 	.word	0x200040b0
 800de34:	20007404 	.word	0x20007404
 800de38:	08017cf8 	.word	0x08017cf8
 800de3c:	08017e24 	.word	0x08017e24
 800de40:	08017d44 	.word	0x08017d44
 800de44:	2000ab18 	.word	0x2000ab18
 800de48:	08017e50 	.word	0x08017e50
 800de4c:	2000ab28 	.word	0x2000ab28
 800de50:	08017e7c 	.word	0x08017e7c
 800de54:	2000ab20 	.word	0x2000ab20
 800de58:	200040a0 	.word	0x200040a0
 800de5c:	200040d0 	.word	0x200040d0
 800de60:	200040cd 	.word	0x200040cd
 800de64:	200040c8 	.word	0x200040c8
 800de68:	200040cc 	.word	0x200040cc
 800de6c:	200040ca 	.word	0x200040ca
      }
    }
    tcp_input_pcb = pcb;
 800de70:	4a9c      	ldr	r2, [pc, #624]	; (800e0e4 <tcp_input+0x7d8>)
 800de72:	69fb      	ldr	r3, [r7, #28]
 800de74:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800de76:	69f8      	ldr	r0, [r7, #28]
 800de78:	f000 fb0a 	bl	800e490 <tcp_process>
 800de7c:	4603      	mov	r3, r0
 800de7e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800de80:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800de84:	f113 0f0d 	cmn.w	r3, #13
 800de88:	f000 80d3 	beq.w	800e032 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800de8c:	4b96      	ldr	r3, [pc, #600]	; (800e0e8 <tcp_input+0x7dc>)
 800de8e:	781b      	ldrb	r3, [r3, #0]
 800de90:	f003 0308 	and.w	r3, r3, #8
 800de94:	2b00      	cmp	r3, #0
 800de96:	d015      	beq.n	800dec4 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800de98:	69fb      	ldr	r3, [r7, #28]
 800de9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d008      	beq.n	800deb4 <tcp_input+0x5a8>
 800dea2:	69fb      	ldr	r3, [r7, #28]
 800dea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dea8:	69fa      	ldr	r2, [r7, #28]
 800deaa:	6912      	ldr	r2, [r2, #16]
 800deac:	f06f 010d 	mvn.w	r1, #13
 800deb0:	4610      	mov	r0, r2
 800deb2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800deb4:	69f9      	ldr	r1, [r7, #28]
 800deb6:	488d      	ldr	r0, [pc, #564]	; (800e0ec <tcp_input+0x7e0>)
 800deb8:	f7ff fbb0 	bl	800d61c <tcp_pcb_remove>
        tcp_free(pcb);
 800debc:	69f8      	ldr	r0, [r7, #28]
 800debe:	f7fd fef1 	bl	800bca4 <tcp_free>
 800dec2:	e0c1      	b.n	800e048 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800dec4:	2300      	movs	r3, #0
 800dec6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800dec8:	4b89      	ldr	r3, [pc, #548]	; (800e0f0 <tcp_input+0x7e4>)
 800deca:	881b      	ldrh	r3, [r3, #0]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d01d      	beq.n	800df0c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ded0:	4b87      	ldr	r3, [pc, #540]	; (800e0f0 <tcp_input+0x7e4>)
 800ded2:	881b      	ldrh	r3, [r3, #0]
 800ded4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ded6:	69fb      	ldr	r3, [r7, #28]
 800ded8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d00a      	beq.n	800def6 <tcp_input+0x5ea>
 800dee0:	69fb      	ldr	r3, [r7, #28]
 800dee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dee6:	69fa      	ldr	r2, [r7, #28]
 800dee8:	6910      	ldr	r0, [r2, #16]
 800deea:	89fa      	ldrh	r2, [r7, #14]
 800deec:	69f9      	ldr	r1, [r7, #28]
 800deee:	4798      	blx	r3
 800def0:	4603      	mov	r3, r0
 800def2:	74fb      	strb	r3, [r7, #19]
 800def4:	e001      	b.n	800defa <tcp_input+0x5ee>
 800def6:	2300      	movs	r3, #0
 800def8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800defa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800defe:	f113 0f0d 	cmn.w	r3, #13
 800df02:	f000 8098 	beq.w	800e036 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800df06:	4b7a      	ldr	r3, [pc, #488]	; (800e0f0 <tcp_input+0x7e4>)
 800df08:	2200      	movs	r2, #0
 800df0a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800df0c:	69f8      	ldr	r0, [r7, #28]
 800df0e:	f000 f907 	bl	800e120 <tcp_input_delayed_close>
 800df12:	4603      	mov	r3, r0
 800df14:	2b00      	cmp	r3, #0
 800df16:	f040 8090 	bne.w	800e03a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800df1a:	4b76      	ldr	r3, [pc, #472]	; (800e0f4 <tcp_input+0x7e8>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d041      	beq.n	800dfa6 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800df22:	69fb      	ldr	r3, [r7, #28]
 800df24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df26:	2b00      	cmp	r3, #0
 800df28:	d006      	beq.n	800df38 <tcp_input+0x62c>
 800df2a:	4b73      	ldr	r3, [pc, #460]	; (800e0f8 <tcp_input+0x7ec>)
 800df2c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800df30:	4972      	ldr	r1, [pc, #456]	; (800e0fc <tcp_input+0x7f0>)
 800df32:	4873      	ldr	r0, [pc, #460]	; (800e100 <tcp_input+0x7f4>)
 800df34:	f006 ffb6 	bl	8014ea4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800df38:	69fb      	ldr	r3, [r7, #28]
 800df3a:	8b5b      	ldrh	r3, [r3, #26]
 800df3c:	f003 0310 	and.w	r3, r3, #16
 800df40:	2b00      	cmp	r3, #0
 800df42:	d008      	beq.n	800df56 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800df44:	4b6b      	ldr	r3, [pc, #428]	; (800e0f4 <tcp_input+0x7e8>)
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	4618      	mov	r0, r3
 800df4a:	f7fd fb9b 	bl	800b684 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800df4e:	69f8      	ldr	r0, [r7, #28]
 800df50:	f7fe f990 	bl	800c274 <tcp_abort>
            goto aborted;
 800df54:	e078      	b.n	800e048 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800df56:	69fb      	ldr	r3, [r7, #28]
 800df58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d00c      	beq.n	800df7a <tcp_input+0x66e>
 800df60:	69fb      	ldr	r3, [r7, #28]
 800df62:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800df66:	69fb      	ldr	r3, [r7, #28]
 800df68:	6918      	ldr	r0, [r3, #16]
 800df6a:	4b62      	ldr	r3, [pc, #392]	; (800e0f4 <tcp_input+0x7e8>)
 800df6c:	681a      	ldr	r2, [r3, #0]
 800df6e:	2300      	movs	r3, #0
 800df70:	69f9      	ldr	r1, [r7, #28]
 800df72:	47a0      	blx	r4
 800df74:	4603      	mov	r3, r0
 800df76:	74fb      	strb	r3, [r7, #19]
 800df78:	e008      	b.n	800df8c <tcp_input+0x680>
 800df7a:	4b5e      	ldr	r3, [pc, #376]	; (800e0f4 <tcp_input+0x7e8>)
 800df7c:	681a      	ldr	r2, [r3, #0]
 800df7e:	2300      	movs	r3, #0
 800df80:	69f9      	ldr	r1, [r7, #28]
 800df82:	2000      	movs	r0, #0
 800df84:	f7ff f89c 	bl	800d0c0 <tcp_recv_null>
 800df88:	4603      	mov	r3, r0
 800df8a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800df8c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800df90:	f113 0f0d 	cmn.w	r3, #13
 800df94:	d053      	beq.n	800e03e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800df96:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d003      	beq.n	800dfa6 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800df9e:	4b55      	ldr	r3, [pc, #340]	; (800e0f4 <tcp_input+0x7e8>)
 800dfa0:	681a      	ldr	r2, [r3, #0]
 800dfa2:	69fb      	ldr	r3, [r7, #28]
 800dfa4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800dfa6:	4b50      	ldr	r3, [pc, #320]	; (800e0e8 <tcp_input+0x7dc>)
 800dfa8:	781b      	ldrb	r3, [r3, #0]
 800dfaa:	f003 0320 	and.w	r3, r3, #32
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d030      	beq.n	800e014 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800dfb2:	69fb      	ldr	r3, [r7, #28]
 800dfb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d009      	beq.n	800dfce <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800dfba:	69fb      	ldr	r3, [r7, #28]
 800dfbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dfbe:	7b5a      	ldrb	r2, [r3, #13]
 800dfc0:	69fb      	ldr	r3, [r7, #28]
 800dfc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dfc4:	f042 0220 	orr.w	r2, r2, #32
 800dfc8:	b2d2      	uxtb	r2, r2
 800dfca:	735a      	strb	r2, [r3, #13]
 800dfcc:	e022      	b.n	800e014 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800dfce:	69fb      	ldr	r3, [r7, #28]
 800dfd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dfd2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800dfd6:	d005      	beq.n	800dfe4 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800dfd8:	69fb      	ldr	r3, [r7, #28]
 800dfda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dfdc:	3301      	adds	r3, #1
 800dfde:	b29a      	uxth	r2, r3
 800dfe0:	69fb      	ldr	r3, [r7, #28]
 800dfe2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800dfe4:	69fb      	ldr	r3, [r7, #28]
 800dfe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d00b      	beq.n	800e006 <tcp_input+0x6fa>
 800dfee:	69fb      	ldr	r3, [r7, #28]
 800dff0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800dff4:	69fb      	ldr	r3, [r7, #28]
 800dff6:	6918      	ldr	r0, [r3, #16]
 800dff8:	2300      	movs	r3, #0
 800dffa:	2200      	movs	r2, #0
 800dffc:	69f9      	ldr	r1, [r7, #28]
 800dffe:	47a0      	blx	r4
 800e000:	4603      	mov	r3, r0
 800e002:	74fb      	strb	r3, [r7, #19]
 800e004:	e001      	b.n	800e00a <tcp_input+0x6fe>
 800e006:	2300      	movs	r3, #0
 800e008:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e00a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e00e:	f113 0f0d 	cmn.w	r3, #13
 800e012:	d016      	beq.n	800e042 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e014:	4b33      	ldr	r3, [pc, #204]	; (800e0e4 <tcp_input+0x7d8>)
 800e016:	2200      	movs	r2, #0
 800e018:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e01a:	69f8      	ldr	r0, [r7, #28]
 800e01c:	f000 f880 	bl	800e120 <tcp_input_delayed_close>
 800e020:	4603      	mov	r3, r0
 800e022:	2b00      	cmp	r3, #0
 800e024:	d10f      	bne.n	800e046 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e026:	69f8      	ldr	r0, [r7, #28]
 800e028:	f002 ff10 	bl	8010e4c <tcp_output>
 800e02c:	e00c      	b.n	800e048 <tcp_input+0x73c>
        goto aborted;
 800e02e:	bf00      	nop
 800e030:	e00a      	b.n	800e048 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e032:	bf00      	nop
 800e034:	e008      	b.n	800e048 <tcp_input+0x73c>
              goto aborted;
 800e036:	bf00      	nop
 800e038:	e006      	b.n	800e048 <tcp_input+0x73c>
          goto aborted;
 800e03a:	bf00      	nop
 800e03c:	e004      	b.n	800e048 <tcp_input+0x73c>
            goto aborted;
 800e03e:	bf00      	nop
 800e040:	e002      	b.n	800e048 <tcp_input+0x73c>
              goto aborted;
 800e042:	bf00      	nop
 800e044:	e000      	b.n	800e048 <tcp_input+0x73c>
          goto aborted;
 800e046:	bf00      	nop
    tcp_input_pcb = NULL;
 800e048:	4b26      	ldr	r3, [pc, #152]	; (800e0e4 <tcp_input+0x7d8>)
 800e04a:	2200      	movs	r2, #0
 800e04c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e04e:	4b29      	ldr	r3, [pc, #164]	; (800e0f4 <tcp_input+0x7e8>)
 800e050:	2200      	movs	r2, #0
 800e052:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e054:	4b2b      	ldr	r3, [pc, #172]	; (800e104 <tcp_input+0x7f8>)
 800e056:	685b      	ldr	r3, [r3, #4]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d03f      	beq.n	800e0dc <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800e05c:	4b29      	ldr	r3, [pc, #164]	; (800e104 <tcp_input+0x7f8>)
 800e05e:	685b      	ldr	r3, [r3, #4]
 800e060:	4618      	mov	r0, r3
 800e062:	f7fd fb0f 	bl	800b684 <pbuf_free>
      inseg.p = NULL;
 800e066:	4b27      	ldr	r3, [pc, #156]	; (800e104 <tcp_input+0x7f8>)
 800e068:	2200      	movs	r2, #0
 800e06a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e06c:	e036      	b.n	800e0dc <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e06e:	4b26      	ldr	r3, [pc, #152]	; (800e108 <tcp_input+0x7fc>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	899b      	ldrh	r3, [r3, #12]
 800e074:	b29b      	uxth	r3, r3
 800e076:	4618      	mov	r0, r3
 800e078:	f7fb ff30 	bl	8009edc <lwip_htons>
 800e07c:	4603      	mov	r3, r0
 800e07e:	b2db      	uxtb	r3, r3
 800e080:	f003 0304 	and.w	r3, r3, #4
 800e084:	2b00      	cmp	r3, #0
 800e086:	d118      	bne.n	800e0ba <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e088:	4b20      	ldr	r3, [pc, #128]	; (800e10c <tcp_input+0x800>)
 800e08a:	6819      	ldr	r1, [r3, #0]
 800e08c:	4b20      	ldr	r3, [pc, #128]	; (800e110 <tcp_input+0x804>)
 800e08e:	881b      	ldrh	r3, [r3, #0]
 800e090:	461a      	mov	r2, r3
 800e092:	4b20      	ldr	r3, [pc, #128]	; (800e114 <tcp_input+0x808>)
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e098:	4b1b      	ldr	r3, [pc, #108]	; (800e108 <tcp_input+0x7fc>)
 800e09a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e09c:	885b      	ldrh	r3, [r3, #2]
 800e09e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e0a0:	4a19      	ldr	r2, [pc, #100]	; (800e108 <tcp_input+0x7fc>)
 800e0a2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e0a4:	8812      	ldrh	r2, [r2, #0]
 800e0a6:	b292      	uxth	r2, r2
 800e0a8:	9202      	str	r2, [sp, #8]
 800e0aa:	9301      	str	r3, [sp, #4]
 800e0ac:	4b1a      	ldr	r3, [pc, #104]	; (800e118 <tcp_input+0x80c>)
 800e0ae:	9300      	str	r3, [sp, #0]
 800e0b0:	4b1a      	ldr	r3, [pc, #104]	; (800e11c <tcp_input+0x810>)
 800e0b2:	4602      	mov	r2, r0
 800e0b4:	2000      	movs	r0, #0
 800e0b6:	f003 fc7d 	bl	80119b4 <tcp_rst>
    pbuf_free(p);
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	f7fd fae2 	bl	800b684 <pbuf_free>
  return;
 800e0c0:	e00c      	b.n	800e0dc <tcp_input+0x7d0>
    goto dropped;
 800e0c2:	bf00      	nop
 800e0c4:	e006      	b.n	800e0d4 <tcp_input+0x7c8>
    goto dropped;
 800e0c6:	bf00      	nop
 800e0c8:	e004      	b.n	800e0d4 <tcp_input+0x7c8>
    goto dropped;
 800e0ca:	bf00      	nop
 800e0cc:	e002      	b.n	800e0d4 <tcp_input+0x7c8>
      goto dropped;
 800e0ce:	bf00      	nop
 800e0d0:	e000      	b.n	800e0d4 <tcp_input+0x7c8>
      goto dropped;
 800e0d2:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f7fd fad5 	bl	800b684 <pbuf_free>
 800e0da:	e000      	b.n	800e0de <tcp_input+0x7d2>
  return;
 800e0dc:	bf00      	nop
}
 800e0de:	3724      	adds	r7, #36	; 0x24
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd90      	pop	{r4, r7, pc}
 800e0e4:	2000ab2c 	.word	0x2000ab2c
 800e0e8:	200040cd 	.word	0x200040cd
 800e0ec:	2000ab18 	.word	0x2000ab18
 800e0f0:	200040c8 	.word	0x200040c8
 800e0f4:	200040d0 	.word	0x200040d0
 800e0f8:	08017cf8 	.word	0x08017cf8
 800e0fc:	08017eac 	.word	0x08017eac
 800e100:	08017d44 	.word	0x08017d44
 800e104:	200040a0 	.word	0x200040a0
 800e108:	200040b0 	.word	0x200040b0
 800e10c:	200040c4 	.word	0x200040c4
 800e110:	200040ca 	.word	0x200040ca
 800e114:	200040c0 	.word	0x200040c0
 800e118:	20007414 	.word	0x20007414
 800e11c:	20007418 	.word	0x20007418

0800e120 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b082      	sub	sp, #8
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d106      	bne.n	800e13c <tcp_input_delayed_close+0x1c>
 800e12e:	4b17      	ldr	r3, [pc, #92]	; (800e18c <tcp_input_delayed_close+0x6c>)
 800e130:	f240 225a 	movw	r2, #602	; 0x25a
 800e134:	4916      	ldr	r1, [pc, #88]	; (800e190 <tcp_input_delayed_close+0x70>)
 800e136:	4817      	ldr	r0, [pc, #92]	; (800e194 <tcp_input_delayed_close+0x74>)
 800e138:	f006 feb4 	bl	8014ea4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e13c:	4b16      	ldr	r3, [pc, #88]	; (800e198 <tcp_input_delayed_close+0x78>)
 800e13e:	781b      	ldrb	r3, [r3, #0]
 800e140:	f003 0310 	and.w	r3, r3, #16
 800e144:	2b00      	cmp	r3, #0
 800e146:	d01c      	beq.n	800e182 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	8b5b      	ldrh	r3, [r3, #26]
 800e14c:	f003 0310 	and.w	r3, r3, #16
 800e150:	2b00      	cmp	r3, #0
 800e152:	d10d      	bne.n	800e170 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d008      	beq.n	800e170 <tcp_input_delayed_close+0x50>
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e164:	687a      	ldr	r2, [r7, #4]
 800e166:	6912      	ldr	r2, [r2, #16]
 800e168:	f06f 010e 	mvn.w	r1, #14
 800e16c:	4610      	mov	r0, r2
 800e16e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e170:	6879      	ldr	r1, [r7, #4]
 800e172:	480a      	ldr	r0, [pc, #40]	; (800e19c <tcp_input_delayed_close+0x7c>)
 800e174:	f7ff fa52 	bl	800d61c <tcp_pcb_remove>
    tcp_free(pcb);
 800e178:	6878      	ldr	r0, [r7, #4]
 800e17a:	f7fd fd93 	bl	800bca4 <tcp_free>
    return 1;
 800e17e:	2301      	movs	r3, #1
 800e180:	e000      	b.n	800e184 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e182:	2300      	movs	r3, #0
}
 800e184:	4618      	mov	r0, r3
 800e186:	3708      	adds	r7, #8
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}
 800e18c:	08017cf8 	.word	0x08017cf8
 800e190:	08017ec8 	.word	0x08017ec8
 800e194:	08017d44 	.word	0x08017d44
 800e198:	200040cd 	.word	0x200040cd
 800e19c:	2000ab18 	.word	0x2000ab18

0800e1a0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e1a0:	b590      	push	{r4, r7, lr}
 800e1a2:	b08b      	sub	sp, #44	; 0x2c
 800e1a4:	af04      	add	r7, sp, #16
 800e1a6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e1a8:	4b6f      	ldr	r3, [pc, #444]	; (800e368 <tcp_listen_input+0x1c8>)
 800e1aa:	781b      	ldrb	r3, [r3, #0]
 800e1ac:	f003 0304 	and.w	r3, r3, #4
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	f040 80d2 	bne.w	800e35a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d106      	bne.n	800e1ca <tcp_listen_input+0x2a>
 800e1bc:	4b6b      	ldr	r3, [pc, #428]	; (800e36c <tcp_listen_input+0x1cc>)
 800e1be:	f240 2281 	movw	r2, #641	; 0x281
 800e1c2:	496b      	ldr	r1, [pc, #428]	; (800e370 <tcp_listen_input+0x1d0>)
 800e1c4:	486b      	ldr	r0, [pc, #428]	; (800e374 <tcp_listen_input+0x1d4>)
 800e1c6:	f006 fe6d 	bl	8014ea4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e1ca:	4b67      	ldr	r3, [pc, #412]	; (800e368 <tcp_listen_input+0x1c8>)
 800e1cc:	781b      	ldrb	r3, [r3, #0]
 800e1ce:	f003 0310 	and.w	r3, r3, #16
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d019      	beq.n	800e20a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e1d6:	4b68      	ldr	r3, [pc, #416]	; (800e378 <tcp_listen_input+0x1d8>)
 800e1d8:	6819      	ldr	r1, [r3, #0]
 800e1da:	4b68      	ldr	r3, [pc, #416]	; (800e37c <tcp_listen_input+0x1dc>)
 800e1dc:	881b      	ldrh	r3, [r3, #0]
 800e1de:	461a      	mov	r2, r3
 800e1e0:	4b67      	ldr	r3, [pc, #412]	; (800e380 <tcp_listen_input+0x1e0>)
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e1e6:	4b67      	ldr	r3, [pc, #412]	; (800e384 <tcp_listen_input+0x1e4>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e1ea:	885b      	ldrh	r3, [r3, #2]
 800e1ec:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e1ee:	4a65      	ldr	r2, [pc, #404]	; (800e384 <tcp_listen_input+0x1e4>)
 800e1f0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e1f2:	8812      	ldrh	r2, [r2, #0]
 800e1f4:	b292      	uxth	r2, r2
 800e1f6:	9202      	str	r2, [sp, #8]
 800e1f8:	9301      	str	r3, [sp, #4]
 800e1fa:	4b63      	ldr	r3, [pc, #396]	; (800e388 <tcp_listen_input+0x1e8>)
 800e1fc:	9300      	str	r3, [sp, #0]
 800e1fe:	4b63      	ldr	r3, [pc, #396]	; (800e38c <tcp_listen_input+0x1ec>)
 800e200:	4602      	mov	r2, r0
 800e202:	6878      	ldr	r0, [r7, #4]
 800e204:	f003 fbd6 	bl	80119b4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e208:	e0a9      	b.n	800e35e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e20a:	4b57      	ldr	r3, [pc, #348]	; (800e368 <tcp_listen_input+0x1c8>)
 800e20c:	781b      	ldrb	r3, [r3, #0]
 800e20e:	f003 0302 	and.w	r3, r3, #2
 800e212:	2b00      	cmp	r3, #0
 800e214:	f000 80a3 	beq.w	800e35e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	7d5b      	ldrb	r3, [r3, #21]
 800e21c:	4618      	mov	r0, r3
 800e21e:	f7ff f873 	bl	800d308 <tcp_alloc>
 800e222:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e224:	697b      	ldr	r3, [r7, #20]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d111      	bne.n	800e24e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	699b      	ldr	r3, [r3, #24]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d00a      	beq.n	800e248 <tcp_listen_input+0xa8>
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	699b      	ldr	r3, [r3, #24]
 800e236:	687a      	ldr	r2, [r7, #4]
 800e238:	6910      	ldr	r0, [r2, #16]
 800e23a:	f04f 32ff 	mov.w	r2, #4294967295
 800e23e:	2100      	movs	r1, #0
 800e240:	4798      	blx	r3
 800e242:	4603      	mov	r3, r0
 800e244:	73bb      	strb	r3, [r7, #14]
      return;
 800e246:	e08b      	b.n	800e360 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e248:	23f0      	movs	r3, #240	; 0xf0
 800e24a:	73bb      	strb	r3, [r7, #14]
      return;
 800e24c:	e088      	b.n	800e360 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e24e:	4b50      	ldr	r3, [pc, #320]	; (800e390 <tcp_listen_input+0x1f0>)
 800e250:	695a      	ldr	r2, [r3, #20]
 800e252:	697b      	ldr	r3, [r7, #20]
 800e254:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e256:	4b4e      	ldr	r3, [pc, #312]	; (800e390 <tcp_listen_input+0x1f0>)
 800e258:	691a      	ldr	r2, [r3, #16]
 800e25a:	697b      	ldr	r3, [r7, #20]
 800e25c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	8ada      	ldrh	r2, [r3, #22]
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e266:	4b47      	ldr	r3, [pc, #284]	; (800e384 <tcp_listen_input+0x1e4>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	881b      	ldrh	r3, [r3, #0]
 800e26c:	b29a      	uxth	r2, r3
 800e26e:	697b      	ldr	r3, [r7, #20]
 800e270:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e272:	697b      	ldr	r3, [r7, #20]
 800e274:	2203      	movs	r2, #3
 800e276:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e278:	4b41      	ldr	r3, [pc, #260]	; (800e380 <tcp_listen_input+0x1e0>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	1c5a      	adds	r2, r3, #1
 800e27e:	697b      	ldr	r3, [r7, #20]
 800e280:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e286:	697b      	ldr	r3, [r7, #20]
 800e288:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e28a:	6978      	ldr	r0, [r7, #20]
 800e28c:	f7ff fa5a 	bl	800d744 <tcp_next_iss>
 800e290:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e292:	697b      	ldr	r3, [r7, #20]
 800e294:	693a      	ldr	r2, [r7, #16]
 800e296:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e298:	697b      	ldr	r3, [r7, #20]
 800e29a:	693a      	ldr	r2, [r7, #16]
 800e29c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e29e:	697b      	ldr	r3, [r7, #20]
 800e2a0:	693a      	ldr	r2, [r7, #16]
 800e2a2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e2a4:	697b      	ldr	r3, [r7, #20]
 800e2a6:	693a      	ldr	r2, [r7, #16]
 800e2a8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e2aa:	4b35      	ldr	r3, [pc, #212]	; (800e380 <tcp_listen_input+0x1e0>)
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	1e5a      	subs	r2, r3, #1
 800e2b0:	697b      	ldr	r3, [r7, #20]
 800e2b2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	691a      	ldr	r2, [r3, #16]
 800e2b8:	697b      	ldr	r3, [r7, #20]
 800e2ba:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e2bc:	697b      	ldr	r3, [r7, #20]
 800e2be:	687a      	ldr	r2, [r7, #4]
 800e2c0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	7a5b      	ldrb	r3, [r3, #9]
 800e2c6:	f003 030c 	and.w	r3, r3, #12
 800e2ca:	b2da      	uxtb	r2, r3
 800e2cc:	697b      	ldr	r3, [r7, #20]
 800e2ce:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	7a1a      	ldrb	r2, [r3, #8]
 800e2d4:	697b      	ldr	r3, [r7, #20]
 800e2d6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e2d8:	4b2e      	ldr	r3, [pc, #184]	; (800e394 <tcp_listen_input+0x1f4>)
 800e2da:	681a      	ldr	r2, [r3, #0]
 800e2dc:	697b      	ldr	r3, [r7, #20]
 800e2de:	60da      	str	r2, [r3, #12]
 800e2e0:	4a2c      	ldr	r2, [pc, #176]	; (800e394 <tcp_listen_input+0x1f4>)
 800e2e2:	697b      	ldr	r3, [r7, #20]
 800e2e4:	6013      	str	r3, [r2, #0]
 800e2e6:	f003 fd27 	bl	8011d38 <tcp_timer_needed>
 800e2ea:	4b2b      	ldr	r3, [pc, #172]	; (800e398 <tcp_listen_input+0x1f8>)
 800e2ec:	2201      	movs	r2, #1
 800e2ee:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e2f0:	6978      	ldr	r0, [r7, #20]
 800e2f2:	f001 fd8d 	bl	800fe10 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e2f6:	4b23      	ldr	r3, [pc, #140]	; (800e384 <tcp_listen_input+0x1e4>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	89db      	ldrh	r3, [r3, #14]
 800e2fc:	b29a      	uxth	r2, r3
 800e2fe:	697b      	ldr	r3, [r7, #20]
 800e300:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e304:	697b      	ldr	r3, [r7, #20]
 800e306:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e30a:	697b      	ldr	r3, [r7, #20]
 800e30c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e310:	697b      	ldr	r3, [r7, #20]
 800e312:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	3304      	adds	r3, #4
 800e318:	4618      	mov	r0, r3
 800e31a:	f005 f955 	bl	80135c8 <ip4_route>
 800e31e:	4601      	mov	r1, r0
 800e320:	697b      	ldr	r3, [r7, #20]
 800e322:	3304      	adds	r3, #4
 800e324:	461a      	mov	r2, r3
 800e326:	4620      	mov	r0, r4
 800e328:	f7ff fa32 	bl	800d790 <tcp_eff_send_mss_netif>
 800e32c:	4603      	mov	r3, r0
 800e32e:	461a      	mov	r2, r3
 800e330:	697b      	ldr	r3, [r7, #20]
 800e332:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e334:	2112      	movs	r1, #18
 800e336:	6978      	ldr	r0, [r7, #20]
 800e338:	f002 fc9a 	bl	8010c70 <tcp_enqueue_flags>
 800e33c:	4603      	mov	r3, r0
 800e33e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e340:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d004      	beq.n	800e352 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e348:	2100      	movs	r1, #0
 800e34a:	6978      	ldr	r0, [r7, #20]
 800e34c:	f7fd fed4 	bl	800c0f8 <tcp_abandon>
      return;
 800e350:	e006      	b.n	800e360 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e352:	6978      	ldr	r0, [r7, #20]
 800e354:	f002 fd7a 	bl	8010e4c <tcp_output>
  return;
 800e358:	e001      	b.n	800e35e <tcp_listen_input+0x1be>
    return;
 800e35a:	bf00      	nop
 800e35c:	e000      	b.n	800e360 <tcp_listen_input+0x1c0>
  return;
 800e35e:	bf00      	nop
}
 800e360:	371c      	adds	r7, #28
 800e362:	46bd      	mov	sp, r7
 800e364:	bd90      	pop	{r4, r7, pc}
 800e366:	bf00      	nop
 800e368:	200040cc 	.word	0x200040cc
 800e36c:	08017cf8 	.word	0x08017cf8
 800e370:	08017ef0 	.word	0x08017ef0
 800e374:	08017d44 	.word	0x08017d44
 800e378:	200040c4 	.word	0x200040c4
 800e37c:	200040ca 	.word	0x200040ca
 800e380:	200040c0 	.word	0x200040c0
 800e384:	200040b0 	.word	0x200040b0
 800e388:	20007414 	.word	0x20007414
 800e38c:	20007418 	.word	0x20007418
 800e390:	20007404 	.word	0x20007404
 800e394:	2000ab18 	.word	0x2000ab18
 800e398:	2000ab14 	.word	0x2000ab14

0800e39c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b086      	sub	sp, #24
 800e3a0:	af04      	add	r7, sp, #16
 800e3a2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e3a4:	4b2f      	ldr	r3, [pc, #188]	; (800e464 <tcp_timewait_input+0xc8>)
 800e3a6:	781b      	ldrb	r3, [r3, #0]
 800e3a8:	f003 0304 	and.w	r3, r3, #4
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d153      	bne.n	800e458 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d106      	bne.n	800e3c4 <tcp_timewait_input+0x28>
 800e3b6:	4b2c      	ldr	r3, [pc, #176]	; (800e468 <tcp_timewait_input+0xcc>)
 800e3b8:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e3bc:	492b      	ldr	r1, [pc, #172]	; (800e46c <tcp_timewait_input+0xd0>)
 800e3be:	482c      	ldr	r0, [pc, #176]	; (800e470 <tcp_timewait_input+0xd4>)
 800e3c0:	f006 fd70 	bl	8014ea4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e3c4:	4b27      	ldr	r3, [pc, #156]	; (800e464 <tcp_timewait_input+0xc8>)
 800e3c6:	781b      	ldrb	r3, [r3, #0]
 800e3c8:	f003 0302 	and.w	r3, r3, #2
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d02a      	beq.n	800e426 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e3d0:	4b28      	ldr	r3, [pc, #160]	; (800e474 <tcp_timewait_input+0xd8>)
 800e3d2:	681a      	ldr	r2, [r3, #0]
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3d8:	1ad3      	subs	r3, r2, r3
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	db2d      	blt.n	800e43a <tcp_timewait_input+0x9e>
 800e3de:	4b25      	ldr	r3, [pc, #148]	; (800e474 <tcp_timewait_input+0xd8>)
 800e3e0:	681a      	ldr	r2, [r3, #0]
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3e6:	6879      	ldr	r1, [r7, #4]
 800e3e8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e3ea:	440b      	add	r3, r1
 800e3ec:	1ad3      	subs	r3, r2, r3
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	dc23      	bgt.n	800e43a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e3f2:	4b21      	ldr	r3, [pc, #132]	; (800e478 <tcp_timewait_input+0xdc>)
 800e3f4:	6819      	ldr	r1, [r3, #0]
 800e3f6:	4b21      	ldr	r3, [pc, #132]	; (800e47c <tcp_timewait_input+0xe0>)
 800e3f8:	881b      	ldrh	r3, [r3, #0]
 800e3fa:	461a      	mov	r2, r3
 800e3fc:	4b1d      	ldr	r3, [pc, #116]	; (800e474 <tcp_timewait_input+0xd8>)
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e402:	4b1f      	ldr	r3, [pc, #124]	; (800e480 <tcp_timewait_input+0xe4>)
 800e404:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e406:	885b      	ldrh	r3, [r3, #2]
 800e408:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e40a:	4a1d      	ldr	r2, [pc, #116]	; (800e480 <tcp_timewait_input+0xe4>)
 800e40c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e40e:	8812      	ldrh	r2, [r2, #0]
 800e410:	b292      	uxth	r2, r2
 800e412:	9202      	str	r2, [sp, #8]
 800e414:	9301      	str	r3, [sp, #4]
 800e416:	4b1b      	ldr	r3, [pc, #108]	; (800e484 <tcp_timewait_input+0xe8>)
 800e418:	9300      	str	r3, [sp, #0]
 800e41a:	4b1b      	ldr	r3, [pc, #108]	; (800e488 <tcp_timewait_input+0xec>)
 800e41c:	4602      	mov	r2, r0
 800e41e:	6878      	ldr	r0, [r7, #4]
 800e420:	f003 fac8 	bl	80119b4 <tcp_rst>
      return;
 800e424:	e01b      	b.n	800e45e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e426:	4b0f      	ldr	r3, [pc, #60]	; (800e464 <tcp_timewait_input+0xc8>)
 800e428:	781b      	ldrb	r3, [r3, #0]
 800e42a:	f003 0301 	and.w	r3, r3, #1
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d003      	beq.n	800e43a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e432:	4b16      	ldr	r3, [pc, #88]	; (800e48c <tcp_timewait_input+0xf0>)
 800e434:	681a      	ldr	r2, [r3, #0]
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e43a:	4b10      	ldr	r3, [pc, #64]	; (800e47c <tcp_timewait_input+0xe0>)
 800e43c:	881b      	ldrh	r3, [r3, #0]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d00c      	beq.n	800e45c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	8b5b      	ldrh	r3, [r3, #26]
 800e446:	f043 0302 	orr.w	r3, r3, #2
 800e44a:	b29a      	uxth	r2, r3
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	f002 fcfb 	bl	8010e4c <tcp_output>
  }
  return;
 800e456:	e001      	b.n	800e45c <tcp_timewait_input+0xc0>
    return;
 800e458:	bf00      	nop
 800e45a:	e000      	b.n	800e45e <tcp_timewait_input+0xc2>
  return;
 800e45c:	bf00      	nop
}
 800e45e:	3708      	adds	r7, #8
 800e460:	46bd      	mov	sp, r7
 800e462:	bd80      	pop	{r7, pc}
 800e464:	200040cc 	.word	0x200040cc
 800e468:	08017cf8 	.word	0x08017cf8
 800e46c:	08017f10 	.word	0x08017f10
 800e470:	08017d44 	.word	0x08017d44
 800e474:	200040c0 	.word	0x200040c0
 800e478:	200040c4 	.word	0x200040c4
 800e47c:	200040ca 	.word	0x200040ca
 800e480:	200040b0 	.word	0x200040b0
 800e484:	20007414 	.word	0x20007414
 800e488:	20007418 	.word	0x20007418
 800e48c:	2000ab1c 	.word	0x2000ab1c

0800e490 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e490:	b590      	push	{r4, r7, lr}
 800e492:	b08d      	sub	sp, #52	; 0x34
 800e494:	af04      	add	r7, sp, #16
 800e496:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e498:	2300      	movs	r3, #0
 800e49a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e49c:	2300      	movs	r3, #0
 800e49e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d106      	bne.n	800e4b4 <tcp_process+0x24>
 800e4a6:	4ba5      	ldr	r3, [pc, #660]	; (800e73c <tcp_process+0x2ac>)
 800e4a8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e4ac:	49a4      	ldr	r1, [pc, #656]	; (800e740 <tcp_process+0x2b0>)
 800e4ae:	48a5      	ldr	r0, [pc, #660]	; (800e744 <tcp_process+0x2b4>)
 800e4b0:	f006 fcf8 	bl	8014ea4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e4b4:	4ba4      	ldr	r3, [pc, #656]	; (800e748 <tcp_process+0x2b8>)
 800e4b6:	781b      	ldrb	r3, [r3, #0]
 800e4b8:	f003 0304 	and.w	r3, r3, #4
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d04e      	beq.n	800e55e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	7d1b      	ldrb	r3, [r3, #20]
 800e4c4:	2b02      	cmp	r3, #2
 800e4c6:	d108      	bne.n	800e4da <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e4cc:	4b9f      	ldr	r3, [pc, #636]	; (800e74c <tcp_process+0x2bc>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	429a      	cmp	r2, r3
 800e4d2:	d123      	bne.n	800e51c <tcp_process+0x8c>
        acceptable = 1;
 800e4d4:	2301      	movs	r3, #1
 800e4d6:	76fb      	strb	r3, [r7, #27]
 800e4d8:	e020      	b.n	800e51c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e4de:	4b9c      	ldr	r3, [pc, #624]	; (800e750 <tcp_process+0x2c0>)
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	429a      	cmp	r2, r3
 800e4e4:	d102      	bne.n	800e4ec <tcp_process+0x5c>
        acceptable = 1;
 800e4e6:	2301      	movs	r3, #1
 800e4e8:	76fb      	strb	r3, [r7, #27]
 800e4ea:	e017      	b.n	800e51c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e4ec:	4b98      	ldr	r3, [pc, #608]	; (800e750 <tcp_process+0x2c0>)
 800e4ee:	681a      	ldr	r2, [r3, #0]
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4f4:	1ad3      	subs	r3, r2, r3
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	db10      	blt.n	800e51c <tcp_process+0x8c>
 800e4fa:	4b95      	ldr	r3, [pc, #596]	; (800e750 <tcp_process+0x2c0>)
 800e4fc:	681a      	ldr	r2, [r3, #0]
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e502:	6879      	ldr	r1, [r7, #4]
 800e504:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e506:	440b      	add	r3, r1
 800e508:	1ad3      	subs	r3, r2, r3
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	dc06      	bgt.n	800e51c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	8b5b      	ldrh	r3, [r3, #26]
 800e512:	f043 0302 	orr.w	r3, r3, #2
 800e516:	b29a      	uxth	r2, r3
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e51c:	7efb      	ldrb	r3, [r7, #27]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d01b      	beq.n	800e55a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	7d1b      	ldrb	r3, [r3, #20]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d106      	bne.n	800e538 <tcp_process+0xa8>
 800e52a:	4b84      	ldr	r3, [pc, #528]	; (800e73c <tcp_process+0x2ac>)
 800e52c:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e530:	4988      	ldr	r1, [pc, #544]	; (800e754 <tcp_process+0x2c4>)
 800e532:	4884      	ldr	r0, [pc, #528]	; (800e744 <tcp_process+0x2b4>)
 800e534:	f006 fcb6 	bl	8014ea4 <iprintf>
      recv_flags |= TF_RESET;
 800e538:	4b87      	ldr	r3, [pc, #540]	; (800e758 <tcp_process+0x2c8>)
 800e53a:	781b      	ldrb	r3, [r3, #0]
 800e53c:	f043 0308 	orr.w	r3, r3, #8
 800e540:	b2da      	uxtb	r2, r3
 800e542:	4b85      	ldr	r3, [pc, #532]	; (800e758 <tcp_process+0x2c8>)
 800e544:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	8b5b      	ldrh	r3, [r3, #26]
 800e54a:	f023 0301 	bic.w	r3, r3, #1
 800e54e:	b29a      	uxth	r2, r3
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e554:	f06f 030d 	mvn.w	r3, #13
 800e558:	e37a      	b.n	800ec50 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e55a:	2300      	movs	r3, #0
 800e55c:	e378      	b.n	800ec50 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e55e:	4b7a      	ldr	r3, [pc, #488]	; (800e748 <tcp_process+0x2b8>)
 800e560:	781b      	ldrb	r3, [r3, #0]
 800e562:	f003 0302 	and.w	r3, r3, #2
 800e566:	2b00      	cmp	r3, #0
 800e568:	d010      	beq.n	800e58c <tcp_process+0xfc>
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	7d1b      	ldrb	r3, [r3, #20]
 800e56e:	2b02      	cmp	r3, #2
 800e570:	d00c      	beq.n	800e58c <tcp_process+0xfc>
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	7d1b      	ldrb	r3, [r3, #20]
 800e576:	2b03      	cmp	r3, #3
 800e578:	d008      	beq.n	800e58c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	8b5b      	ldrh	r3, [r3, #26]
 800e57e:	f043 0302 	orr.w	r3, r3, #2
 800e582:	b29a      	uxth	r2, r3
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e588:	2300      	movs	r3, #0
 800e58a:	e361      	b.n	800ec50 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	8b5b      	ldrh	r3, [r3, #26]
 800e590:	f003 0310 	and.w	r3, r3, #16
 800e594:	2b00      	cmp	r3, #0
 800e596:	d103      	bne.n	800e5a0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e598:	4b70      	ldr	r3, [pc, #448]	; (800e75c <tcp_process+0x2cc>)
 800e59a:	681a      	ldr	r2, [r3, #0]
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800e5b0:	6878      	ldr	r0, [r7, #4]
 800e5b2:	f001 fc2d 	bl	800fe10 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	7d1b      	ldrb	r3, [r3, #20]
 800e5ba:	3b02      	subs	r3, #2
 800e5bc:	2b07      	cmp	r3, #7
 800e5be:	f200 8337 	bhi.w	800ec30 <tcp_process+0x7a0>
 800e5c2:	a201      	add	r2, pc, #4	; (adr r2, 800e5c8 <tcp_process+0x138>)
 800e5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5c8:	0800e5e9 	.word	0x0800e5e9
 800e5cc:	0800e819 	.word	0x0800e819
 800e5d0:	0800e991 	.word	0x0800e991
 800e5d4:	0800e9bb 	.word	0x0800e9bb
 800e5d8:	0800eadf 	.word	0x0800eadf
 800e5dc:	0800e991 	.word	0x0800e991
 800e5e0:	0800eb6b 	.word	0x0800eb6b
 800e5e4:	0800ebfb 	.word	0x0800ebfb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e5e8:	4b57      	ldr	r3, [pc, #348]	; (800e748 <tcp_process+0x2b8>)
 800e5ea:	781b      	ldrb	r3, [r3, #0]
 800e5ec:	f003 0310 	and.w	r3, r3, #16
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	f000 80e4 	beq.w	800e7be <tcp_process+0x32e>
 800e5f6:	4b54      	ldr	r3, [pc, #336]	; (800e748 <tcp_process+0x2b8>)
 800e5f8:	781b      	ldrb	r3, [r3, #0]
 800e5fa:	f003 0302 	and.w	r3, r3, #2
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	f000 80dd 	beq.w	800e7be <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e608:	1c5a      	adds	r2, r3, #1
 800e60a:	4b50      	ldr	r3, [pc, #320]	; (800e74c <tcp_process+0x2bc>)
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	429a      	cmp	r2, r3
 800e610:	f040 80d5 	bne.w	800e7be <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e614:	4b4e      	ldr	r3, [pc, #312]	; (800e750 <tcp_process+0x2c0>)
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	1c5a      	adds	r2, r3, #1
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800e626:	4b49      	ldr	r3, [pc, #292]	; (800e74c <tcp_process+0x2bc>)
 800e628:	681a      	ldr	r2, [r3, #0]
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e62e:	4b4c      	ldr	r3, [pc, #304]	; (800e760 <tcp_process+0x2d0>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	89db      	ldrh	r3, [r3, #14]
 800e634:	b29a      	uxth	r2, r3
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e648:	4b41      	ldr	r3, [pc, #260]	; (800e750 <tcp_process+0x2c0>)
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	1e5a      	subs	r2, r3, #1
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	2204      	movs	r2, #4
 800e656:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	3304      	adds	r3, #4
 800e660:	4618      	mov	r0, r3
 800e662:	f004 ffb1 	bl	80135c8 <ip4_route>
 800e666:	4601      	mov	r1, r0
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	3304      	adds	r3, #4
 800e66c:	461a      	mov	r2, r3
 800e66e:	4620      	mov	r0, r4
 800e670:	f7ff f88e 	bl	800d790 <tcp_eff_send_mss_netif>
 800e674:	4603      	mov	r3, r0
 800e676:	461a      	mov	r2, r3
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e680:	009a      	lsls	r2, r3, #2
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e686:	005b      	lsls	r3, r3, #1
 800e688:	f241 111c 	movw	r1, #4380	; 0x111c
 800e68c:	428b      	cmp	r3, r1
 800e68e:	bf38      	it	cc
 800e690:	460b      	movcc	r3, r1
 800e692:	429a      	cmp	r2, r3
 800e694:	d204      	bcs.n	800e6a0 <tcp_process+0x210>
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e69a:	009b      	lsls	r3, r3, #2
 800e69c:	b29b      	uxth	r3, r3
 800e69e:	e00d      	b.n	800e6bc <tcp_process+0x22c>
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e6a4:	005b      	lsls	r3, r3, #1
 800e6a6:	f241 121c 	movw	r2, #4380	; 0x111c
 800e6aa:	4293      	cmp	r3, r2
 800e6ac:	d904      	bls.n	800e6b8 <tcp_process+0x228>
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e6b2:	005b      	lsls	r3, r3, #1
 800e6b4:	b29b      	uxth	r3, r3
 800e6b6:	e001      	b.n	800e6bc <tcp_process+0x22c>
 800e6b8:	f241 131c 	movw	r3, #4380	; 0x111c
 800e6bc:	687a      	ldr	r2, [r7, #4]
 800e6be:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d106      	bne.n	800e6da <tcp_process+0x24a>
 800e6cc:	4b1b      	ldr	r3, [pc, #108]	; (800e73c <tcp_process+0x2ac>)
 800e6ce:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800e6d2:	4924      	ldr	r1, [pc, #144]	; (800e764 <tcp_process+0x2d4>)
 800e6d4:	481b      	ldr	r0, [pc, #108]	; (800e744 <tcp_process+0x2b4>)
 800e6d6:	f006 fbe5 	bl	8014ea4 <iprintf>
        --pcb->snd_queuelen;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e6e0:	3b01      	subs	r3, #1
 800e6e2:	b29a      	uxth	r2, r3
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6ee:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e6f0:	69fb      	ldr	r3, [r7, #28]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d111      	bne.n	800e71a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6fa:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e6fc:	69fb      	ldr	r3, [r7, #28]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d106      	bne.n	800e710 <tcp_process+0x280>
 800e702:	4b0e      	ldr	r3, [pc, #56]	; (800e73c <tcp_process+0x2ac>)
 800e704:	f44f 725d 	mov.w	r2, #884	; 0x374
 800e708:	4917      	ldr	r1, [pc, #92]	; (800e768 <tcp_process+0x2d8>)
 800e70a:	480e      	ldr	r0, [pc, #56]	; (800e744 <tcp_process+0x2b4>)
 800e70c:	f006 fbca 	bl	8014ea4 <iprintf>
          pcb->unsent = rseg->next;
 800e710:	69fb      	ldr	r3, [r7, #28]
 800e712:	681a      	ldr	r2, [r3, #0]
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	66da      	str	r2, [r3, #108]	; 0x6c
 800e718:	e003      	b.n	800e722 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800e71a:	69fb      	ldr	r3, [r7, #28]
 800e71c:	681a      	ldr	r2, [r3, #0]
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800e722:	69f8      	ldr	r0, [r7, #28]
 800e724:	f7fe fc87 	bl	800d036 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d11d      	bne.n	800e76c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e736:	861a      	strh	r2, [r3, #48]	; 0x30
 800e738:	e01f      	b.n	800e77a <tcp_process+0x2ea>
 800e73a:	bf00      	nop
 800e73c:	08017cf8 	.word	0x08017cf8
 800e740:	08017f30 	.word	0x08017f30
 800e744:	08017d44 	.word	0x08017d44
 800e748:	200040cc 	.word	0x200040cc
 800e74c:	200040c4 	.word	0x200040c4
 800e750:	200040c0 	.word	0x200040c0
 800e754:	08017f4c 	.word	0x08017f4c
 800e758:	200040cd 	.word	0x200040cd
 800e75c:	2000ab1c 	.word	0x2000ab1c
 800e760:	200040b0 	.word	0x200040b0
 800e764:	08017f6c 	.word	0x08017f6c
 800e768:	08017f84 	.word	0x08017f84
        } else {
          pcb->rtime = 0;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2200      	movs	r2, #0
 800e770:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	2200      	movs	r2, #0
 800e776:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e780:	2b00      	cmp	r3, #0
 800e782:	d00a      	beq.n	800e79a <tcp_process+0x30a>
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e78a:	687a      	ldr	r2, [r7, #4]
 800e78c:	6910      	ldr	r0, [r2, #16]
 800e78e:	2200      	movs	r2, #0
 800e790:	6879      	ldr	r1, [r7, #4]
 800e792:	4798      	blx	r3
 800e794:	4603      	mov	r3, r0
 800e796:	76bb      	strb	r3, [r7, #26]
 800e798:	e001      	b.n	800e79e <tcp_process+0x30e>
 800e79a:	2300      	movs	r3, #0
 800e79c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e79e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e7a2:	f113 0f0d 	cmn.w	r3, #13
 800e7a6:	d102      	bne.n	800e7ae <tcp_process+0x31e>
          return ERR_ABRT;
 800e7a8:	f06f 030c 	mvn.w	r3, #12
 800e7ac:	e250      	b.n	800ec50 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	8b5b      	ldrh	r3, [r3, #26]
 800e7b2:	f043 0302 	orr.w	r3, r3, #2
 800e7b6:	b29a      	uxth	r2, r3
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e7bc:	e23a      	b.n	800ec34 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e7be:	4b9d      	ldr	r3, [pc, #628]	; (800ea34 <tcp_process+0x5a4>)
 800e7c0:	781b      	ldrb	r3, [r3, #0]
 800e7c2:	f003 0310 	and.w	r3, r3, #16
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	f000 8234 	beq.w	800ec34 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7cc:	4b9a      	ldr	r3, [pc, #616]	; (800ea38 <tcp_process+0x5a8>)
 800e7ce:	6819      	ldr	r1, [r3, #0]
 800e7d0:	4b9a      	ldr	r3, [pc, #616]	; (800ea3c <tcp_process+0x5ac>)
 800e7d2:	881b      	ldrh	r3, [r3, #0]
 800e7d4:	461a      	mov	r2, r3
 800e7d6:	4b9a      	ldr	r3, [pc, #616]	; (800ea40 <tcp_process+0x5b0>)
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e7dc:	4b99      	ldr	r3, [pc, #612]	; (800ea44 <tcp_process+0x5b4>)
 800e7de:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7e0:	885b      	ldrh	r3, [r3, #2]
 800e7e2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e7e4:	4a97      	ldr	r2, [pc, #604]	; (800ea44 <tcp_process+0x5b4>)
 800e7e6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7e8:	8812      	ldrh	r2, [r2, #0]
 800e7ea:	b292      	uxth	r2, r2
 800e7ec:	9202      	str	r2, [sp, #8]
 800e7ee:	9301      	str	r3, [sp, #4]
 800e7f0:	4b95      	ldr	r3, [pc, #596]	; (800ea48 <tcp_process+0x5b8>)
 800e7f2:	9300      	str	r3, [sp, #0]
 800e7f4:	4b95      	ldr	r3, [pc, #596]	; (800ea4c <tcp_process+0x5bc>)
 800e7f6:	4602      	mov	r2, r0
 800e7f8:	6878      	ldr	r0, [r7, #4]
 800e7fa:	f003 f8db 	bl	80119b4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e804:	2b05      	cmp	r3, #5
 800e806:	f200 8215 	bhi.w	800ec34 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	2200      	movs	r2, #0
 800e80e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f002 fea5 	bl	8011560 <tcp_rexmit_rto>
      break;
 800e816:	e20d      	b.n	800ec34 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e818:	4b86      	ldr	r3, [pc, #536]	; (800ea34 <tcp_process+0x5a4>)
 800e81a:	781b      	ldrb	r3, [r3, #0]
 800e81c:	f003 0310 	and.w	r3, r3, #16
 800e820:	2b00      	cmp	r3, #0
 800e822:	f000 80a1 	beq.w	800e968 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e826:	4b84      	ldr	r3, [pc, #528]	; (800ea38 <tcp_process+0x5a8>)
 800e828:	681a      	ldr	r2, [r3, #0]
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e82e:	1ad3      	subs	r3, r2, r3
 800e830:	3b01      	subs	r3, #1
 800e832:	2b00      	cmp	r3, #0
 800e834:	db7e      	blt.n	800e934 <tcp_process+0x4a4>
 800e836:	4b80      	ldr	r3, [pc, #512]	; (800ea38 <tcp_process+0x5a8>)
 800e838:	681a      	ldr	r2, [r3, #0]
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e83e:	1ad3      	subs	r3, r2, r3
 800e840:	2b00      	cmp	r3, #0
 800e842:	dc77      	bgt.n	800e934 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2204      	movs	r2, #4
 800e848:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d102      	bne.n	800e858 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e852:	23fa      	movs	r3, #250	; 0xfa
 800e854:	76bb      	strb	r3, [r7, #26]
 800e856:	e01d      	b.n	800e894 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e85c:	699b      	ldr	r3, [r3, #24]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d106      	bne.n	800e870 <tcp_process+0x3e0>
 800e862:	4b7b      	ldr	r3, [pc, #492]	; (800ea50 <tcp_process+0x5c0>)
 800e864:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800e868:	497a      	ldr	r1, [pc, #488]	; (800ea54 <tcp_process+0x5c4>)
 800e86a:	487b      	ldr	r0, [pc, #492]	; (800ea58 <tcp_process+0x5c8>)
 800e86c:	f006 fb1a 	bl	8014ea4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e874:	699b      	ldr	r3, [r3, #24]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d00a      	beq.n	800e890 <tcp_process+0x400>
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e87e:	699b      	ldr	r3, [r3, #24]
 800e880:	687a      	ldr	r2, [r7, #4]
 800e882:	6910      	ldr	r0, [r2, #16]
 800e884:	2200      	movs	r2, #0
 800e886:	6879      	ldr	r1, [r7, #4]
 800e888:	4798      	blx	r3
 800e88a:	4603      	mov	r3, r0
 800e88c:	76bb      	strb	r3, [r7, #26]
 800e88e:	e001      	b.n	800e894 <tcp_process+0x404>
 800e890:	23f0      	movs	r3, #240	; 0xf0
 800e892:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e894:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d00a      	beq.n	800e8b2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e89c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e8a0:	f113 0f0d 	cmn.w	r3, #13
 800e8a4:	d002      	beq.n	800e8ac <tcp_process+0x41c>
              tcp_abort(pcb);
 800e8a6:	6878      	ldr	r0, [r7, #4]
 800e8a8:	f7fd fce4 	bl	800c274 <tcp_abort>
            }
            return ERR_ABRT;
 800e8ac:	f06f 030c 	mvn.w	r3, #12
 800e8b0:	e1ce      	b.n	800ec50 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e8b2:	6878      	ldr	r0, [r7, #4]
 800e8b4:	f000 fae0 	bl	800ee78 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e8b8:	4b68      	ldr	r3, [pc, #416]	; (800ea5c <tcp_process+0x5cc>)
 800e8ba:	881b      	ldrh	r3, [r3, #0]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d005      	beq.n	800e8cc <tcp_process+0x43c>
            recv_acked--;
 800e8c0:	4b66      	ldr	r3, [pc, #408]	; (800ea5c <tcp_process+0x5cc>)
 800e8c2:	881b      	ldrh	r3, [r3, #0]
 800e8c4:	3b01      	subs	r3, #1
 800e8c6:	b29a      	uxth	r2, r3
 800e8c8:	4b64      	ldr	r3, [pc, #400]	; (800ea5c <tcp_process+0x5cc>)
 800e8ca:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e8d0:	009a      	lsls	r2, r3, #2
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e8d6:	005b      	lsls	r3, r3, #1
 800e8d8:	f241 111c 	movw	r1, #4380	; 0x111c
 800e8dc:	428b      	cmp	r3, r1
 800e8de:	bf38      	it	cc
 800e8e0:	460b      	movcc	r3, r1
 800e8e2:	429a      	cmp	r2, r3
 800e8e4:	d204      	bcs.n	800e8f0 <tcp_process+0x460>
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e8ea:	009b      	lsls	r3, r3, #2
 800e8ec:	b29b      	uxth	r3, r3
 800e8ee:	e00d      	b.n	800e90c <tcp_process+0x47c>
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e8f4:	005b      	lsls	r3, r3, #1
 800e8f6:	f241 121c 	movw	r2, #4380	; 0x111c
 800e8fa:	4293      	cmp	r3, r2
 800e8fc:	d904      	bls.n	800e908 <tcp_process+0x478>
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e902:	005b      	lsls	r3, r3, #1
 800e904:	b29b      	uxth	r3, r3
 800e906:	e001      	b.n	800e90c <tcp_process+0x47c>
 800e908:	f241 131c 	movw	r3, #4380	; 0x111c
 800e90c:	687a      	ldr	r2, [r7, #4]
 800e90e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e912:	4b53      	ldr	r3, [pc, #332]	; (800ea60 <tcp_process+0x5d0>)
 800e914:	781b      	ldrb	r3, [r3, #0]
 800e916:	f003 0320 	and.w	r3, r3, #32
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d037      	beq.n	800e98e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	8b5b      	ldrh	r3, [r3, #26]
 800e922:	f043 0302 	orr.w	r3, r3, #2
 800e926:	b29a      	uxth	r2, r3
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2207      	movs	r2, #7
 800e930:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e932:	e02c      	b.n	800e98e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e934:	4b40      	ldr	r3, [pc, #256]	; (800ea38 <tcp_process+0x5a8>)
 800e936:	6819      	ldr	r1, [r3, #0]
 800e938:	4b40      	ldr	r3, [pc, #256]	; (800ea3c <tcp_process+0x5ac>)
 800e93a:	881b      	ldrh	r3, [r3, #0]
 800e93c:	461a      	mov	r2, r3
 800e93e:	4b40      	ldr	r3, [pc, #256]	; (800ea40 <tcp_process+0x5b0>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e944:	4b3f      	ldr	r3, [pc, #252]	; (800ea44 <tcp_process+0x5b4>)
 800e946:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e948:	885b      	ldrh	r3, [r3, #2]
 800e94a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e94c:	4a3d      	ldr	r2, [pc, #244]	; (800ea44 <tcp_process+0x5b4>)
 800e94e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e950:	8812      	ldrh	r2, [r2, #0]
 800e952:	b292      	uxth	r2, r2
 800e954:	9202      	str	r2, [sp, #8]
 800e956:	9301      	str	r3, [sp, #4]
 800e958:	4b3b      	ldr	r3, [pc, #236]	; (800ea48 <tcp_process+0x5b8>)
 800e95a:	9300      	str	r3, [sp, #0]
 800e95c:	4b3b      	ldr	r3, [pc, #236]	; (800ea4c <tcp_process+0x5bc>)
 800e95e:	4602      	mov	r2, r0
 800e960:	6878      	ldr	r0, [r7, #4]
 800e962:	f003 f827 	bl	80119b4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e966:	e167      	b.n	800ec38 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e968:	4b32      	ldr	r3, [pc, #200]	; (800ea34 <tcp_process+0x5a4>)
 800e96a:	781b      	ldrb	r3, [r3, #0]
 800e96c:	f003 0302 	and.w	r3, r3, #2
 800e970:	2b00      	cmp	r3, #0
 800e972:	f000 8161 	beq.w	800ec38 <tcp_process+0x7a8>
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e97a:	1e5a      	subs	r2, r3, #1
 800e97c:	4b30      	ldr	r3, [pc, #192]	; (800ea40 <tcp_process+0x5b0>)
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	429a      	cmp	r2, r3
 800e982:	f040 8159 	bne.w	800ec38 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e986:	6878      	ldr	r0, [r7, #4]
 800e988:	f002 fe0c 	bl	80115a4 <tcp_rexmit>
      break;
 800e98c:	e154      	b.n	800ec38 <tcp_process+0x7a8>
 800e98e:	e153      	b.n	800ec38 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e990:	6878      	ldr	r0, [r7, #4]
 800e992:	f000 fa71 	bl	800ee78 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e996:	4b32      	ldr	r3, [pc, #200]	; (800ea60 <tcp_process+0x5d0>)
 800e998:	781b      	ldrb	r3, [r3, #0]
 800e99a:	f003 0320 	and.w	r3, r3, #32
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	f000 814c 	beq.w	800ec3c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	8b5b      	ldrh	r3, [r3, #26]
 800e9a8:	f043 0302 	orr.w	r3, r3, #2
 800e9ac:	b29a      	uxth	r2, r3
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	2207      	movs	r2, #7
 800e9b6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e9b8:	e140      	b.n	800ec3c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	f000 fa5c 	bl	800ee78 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e9c0:	4b27      	ldr	r3, [pc, #156]	; (800ea60 <tcp_process+0x5d0>)
 800e9c2:	781b      	ldrb	r3, [r3, #0]
 800e9c4:	f003 0320 	and.w	r3, r3, #32
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d071      	beq.n	800eab0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e9cc:	4b19      	ldr	r3, [pc, #100]	; (800ea34 <tcp_process+0x5a4>)
 800e9ce:	781b      	ldrb	r3, [r3, #0]
 800e9d0:	f003 0310 	and.w	r3, r3, #16
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d060      	beq.n	800ea9a <tcp_process+0x60a>
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e9dc:	4b16      	ldr	r3, [pc, #88]	; (800ea38 <tcp_process+0x5a8>)
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	429a      	cmp	r2, r3
 800e9e2:	d15a      	bne.n	800ea9a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d156      	bne.n	800ea9a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	8b5b      	ldrh	r3, [r3, #26]
 800e9f0:	f043 0302 	orr.w	r3, r3, #2
 800e9f4:	b29a      	uxth	r2, r3
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e9fa:	6878      	ldr	r0, [r7, #4]
 800e9fc:	f7fe fdbe 	bl	800d57c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ea00:	4b18      	ldr	r3, [pc, #96]	; (800ea64 <tcp_process+0x5d4>)
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	687a      	ldr	r2, [r7, #4]
 800ea06:	429a      	cmp	r2, r3
 800ea08:	d105      	bne.n	800ea16 <tcp_process+0x586>
 800ea0a:	4b16      	ldr	r3, [pc, #88]	; (800ea64 <tcp_process+0x5d4>)
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	68db      	ldr	r3, [r3, #12]
 800ea10:	4a14      	ldr	r2, [pc, #80]	; (800ea64 <tcp_process+0x5d4>)
 800ea12:	6013      	str	r3, [r2, #0]
 800ea14:	e02e      	b.n	800ea74 <tcp_process+0x5e4>
 800ea16:	4b13      	ldr	r3, [pc, #76]	; (800ea64 <tcp_process+0x5d4>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	617b      	str	r3, [r7, #20]
 800ea1c:	e027      	b.n	800ea6e <tcp_process+0x5de>
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	68db      	ldr	r3, [r3, #12]
 800ea22:	687a      	ldr	r2, [r7, #4]
 800ea24:	429a      	cmp	r2, r3
 800ea26:	d11f      	bne.n	800ea68 <tcp_process+0x5d8>
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	68da      	ldr	r2, [r3, #12]
 800ea2c:	697b      	ldr	r3, [r7, #20]
 800ea2e:	60da      	str	r2, [r3, #12]
 800ea30:	e020      	b.n	800ea74 <tcp_process+0x5e4>
 800ea32:	bf00      	nop
 800ea34:	200040cc 	.word	0x200040cc
 800ea38:	200040c4 	.word	0x200040c4
 800ea3c:	200040ca 	.word	0x200040ca
 800ea40:	200040c0 	.word	0x200040c0
 800ea44:	200040b0 	.word	0x200040b0
 800ea48:	20007414 	.word	0x20007414
 800ea4c:	20007418 	.word	0x20007418
 800ea50:	08017cf8 	.word	0x08017cf8
 800ea54:	08017f98 	.word	0x08017f98
 800ea58:	08017d44 	.word	0x08017d44
 800ea5c:	200040c8 	.word	0x200040c8
 800ea60:	200040cd 	.word	0x200040cd
 800ea64:	2000ab18 	.word	0x2000ab18
 800ea68:	697b      	ldr	r3, [r7, #20]
 800ea6a:	68db      	ldr	r3, [r3, #12]
 800ea6c:	617b      	str	r3, [r7, #20]
 800ea6e:	697b      	ldr	r3, [r7, #20]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d1d4      	bne.n	800ea1e <tcp_process+0x58e>
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2200      	movs	r2, #0
 800ea78:	60da      	str	r2, [r3, #12]
 800ea7a:	4b77      	ldr	r3, [pc, #476]	; (800ec58 <tcp_process+0x7c8>)
 800ea7c:	2201      	movs	r2, #1
 800ea7e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	220a      	movs	r2, #10
 800ea84:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ea86:	4b75      	ldr	r3, [pc, #468]	; (800ec5c <tcp_process+0x7cc>)
 800ea88:	681a      	ldr	r2, [r3, #0]
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	60da      	str	r2, [r3, #12]
 800ea8e:	4a73      	ldr	r2, [pc, #460]	; (800ec5c <tcp_process+0x7cc>)
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	6013      	str	r3, [r2, #0]
 800ea94:	f003 f950 	bl	8011d38 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ea98:	e0d2      	b.n	800ec40 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	8b5b      	ldrh	r3, [r3, #26]
 800ea9e:	f043 0302 	orr.w	r3, r3, #2
 800eaa2:	b29a      	uxth	r2, r3
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2208      	movs	r2, #8
 800eaac:	751a      	strb	r2, [r3, #20]
      break;
 800eaae:	e0c7      	b.n	800ec40 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eab0:	4b6b      	ldr	r3, [pc, #428]	; (800ec60 <tcp_process+0x7d0>)
 800eab2:	781b      	ldrb	r3, [r3, #0]
 800eab4:	f003 0310 	and.w	r3, r3, #16
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	f000 80c1 	beq.w	800ec40 <tcp_process+0x7b0>
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eac2:	4b68      	ldr	r3, [pc, #416]	; (800ec64 <tcp_process+0x7d4>)
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	429a      	cmp	r2, r3
 800eac8:	f040 80ba 	bne.w	800ec40 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	f040 80b5 	bne.w	800ec40 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	2206      	movs	r2, #6
 800eada:	751a      	strb	r2, [r3, #20]
      break;
 800eadc:	e0b0      	b.n	800ec40 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800eade:	6878      	ldr	r0, [r7, #4]
 800eae0:	f000 f9ca 	bl	800ee78 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800eae4:	4b60      	ldr	r3, [pc, #384]	; (800ec68 <tcp_process+0x7d8>)
 800eae6:	781b      	ldrb	r3, [r3, #0]
 800eae8:	f003 0320 	and.w	r3, r3, #32
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	f000 80a9 	beq.w	800ec44 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	8b5b      	ldrh	r3, [r3, #26]
 800eaf6:	f043 0302 	orr.w	r3, r3, #2
 800eafa:	b29a      	uxth	r2, r3
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800eb00:	6878      	ldr	r0, [r7, #4]
 800eb02:	f7fe fd3b 	bl	800d57c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800eb06:	4b59      	ldr	r3, [pc, #356]	; (800ec6c <tcp_process+0x7dc>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	687a      	ldr	r2, [r7, #4]
 800eb0c:	429a      	cmp	r2, r3
 800eb0e:	d105      	bne.n	800eb1c <tcp_process+0x68c>
 800eb10:	4b56      	ldr	r3, [pc, #344]	; (800ec6c <tcp_process+0x7dc>)
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	68db      	ldr	r3, [r3, #12]
 800eb16:	4a55      	ldr	r2, [pc, #340]	; (800ec6c <tcp_process+0x7dc>)
 800eb18:	6013      	str	r3, [r2, #0]
 800eb1a:	e013      	b.n	800eb44 <tcp_process+0x6b4>
 800eb1c:	4b53      	ldr	r3, [pc, #332]	; (800ec6c <tcp_process+0x7dc>)
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	613b      	str	r3, [r7, #16]
 800eb22:	e00c      	b.n	800eb3e <tcp_process+0x6ae>
 800eb24:	693b      	ldr	r3, [r7, #16]
 800eb26:	68db      	ldr	r3, [r3, #12]
 800eb28:	687a      	ldr	r2, [r7, #4]
 800eb2a:	429a      	cmp	r2, r3
 800eb2c:	d104      	bne.n	800eb38 <tcp_process+0x6a8>
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	68da      	ldr	r2, [r3, #12]
 800eb32:	693b      	ldr	r3, [r7, #16]
 800eb34:	60da      	str	r2, [r3, #12]
 800eb36:	e005      	b.n	800eb44 <tcp_process+0x6b4>
 800eb38:	693b      	ldr	r3, [r7, #16]
 800eb3a:	68db      	ldr	r3, [r3, #12]
 800eb3c:	613b      	str	r3, [r7, #16]
 800eb3e:	693b      	ldr	r3, [r7, #16]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d1ef      	bne.n	800eb24 <tcp_process+0x694>
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2200      	movs	r2, #0
 800eb48:	60da      	str	r2, [r3, #12]
 800eb4a:	4b43      	ldr	r3, [pc, #268]	; (800ec58 <tcp_process+0x7c8>)
 800eb4c:	2201      	movs	r2, #1
 800eb4e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	220a      	movs	r2, #10
 800eb54:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800eb56:	4b41      	ldr	r3, [pc, #260]	; (800ec5c <tcp_process+0x7cc>)
 800eb58:	681a      	ldr	r2, [r3, #0]
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	60da      	str	r2, [r3, #12]
 800eb5e:	4a3f      	ldr	r2, [pc, #252]	; (800ec5c <tcp_process+0x7cc>)
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	6013      	str	r3, [r2, #0]
 800eb64:	f003 f8e8 	bl	8011d38 <tcp_timer_needed>
      }
      break;
 800eb68:	e06c      	b.n	800ec44 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800eb6a:	6878      	ldr	r0, [r7, #4]
 800eb6c:	f000 f984 	bl	800ee78 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800eb70:	4b3b      	ldr	r3, [pc, #236]	; (800ec60 <tcp_process+0x7d0>)
 800eb72:	781b      	ldrb	r3, [r3, #0]
 800eb74:	f003 0310 	and.w	r3, r3, #16
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d065      	beq.n	800ec48 <tcp_process+0x7b8>
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eb80:	4b38      	ldr	r3, [pc, #224]	; (800ec64 <tcp_process+0x7d4>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	429a      	cmp	r2, r3
 800eb86:	d15f      	bne.n	800ec48 <tcp_process+0x7b8>
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d15b      	bne.n	800ec48 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800eb90:	6878      	ldr	r0, [r7, #4]
 800eb92:	f7fe fcf3 	bl	800d57c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800eb96:	4b35      	ldr	r3, [pc, #212]	; (800ec6c <tcp_process+0x7dc>)
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	687a      	ldr	r2, [r7, #4]
 800eb9c:	429a      	cmp	r2, r3
 800eb9e:	d105      	bne.n	800ebac <tcp_process+0x71c>
 800eba0:	4b32      	ldr	r3, [pc, #200]	; (800ec6c <tcp_process+0x7dc>)
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	68db      	ldr	r3, [r3, #12]
 800eba6:	4a31      	ldr	r2, [pc, #196]	; (800ec6c <tcp_process+0x7dc>)
 800eba8:	6013      	str	r3, [r2, #0]
 800ebaa:	e013      	b.n	800ebd4 <tcp_process+0x744>
 800ebac:	4b2f      	ldr	r3, [pc, #188]	; (800ec6c <tcp_process+0x7dc>)
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	60fb      	str	r3, [r7, #12]
 800ebb2:	e00c      	b.n	800ebce <tcp_process+0x73e>
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	68db      	ldr	r3, [r3, #12]
 800ebb8:	687a      	ldr	r2, [r7, #4]
 800ebba:	429a      	cmp	r2, r3
 800ebbc:	d104      	bne.n	800ebc8 <tcp_process+0x738>
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	68da      	ldr	r2, [r3, #12]
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	60da      	str	r2, [r3, #12]
 800ebc6:	e005      	b.n	800ebd4 <tcp_process+0x744>
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	68db      	ldr	r3, [r3, #12]
 800ebcc:	60fb      	str	r3, [r7, #12]
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d1ef      	bne.n	800ebb4 <tcp_process+0x724>
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	60da      	str	r2, [r3, #12]
 800ebda:	4b1f      	ldr	r3, [pc, #124]	; (800ec58 <tcp_process+0x7c8>)
 800ebdc:	2201      	movs	r2, #1
 800ebde:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	220a      	movs	r2, #10
 800ebe4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ebe6:	4b1d      	ldr	r3, [pc, #116]	; (800ec5c <tcp_process+0x7cc>)
 800ebe8:	681a      	ldr	r2, [r3, #0]
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	60da      	str	r2, [r3, #12]
 800ebee:	4a1b      	ldr	r2, [pc, #108]	; (800ec5c <tcp_process+0x7cc>)
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	6013      	str	r3, [r2, #0]
 800ebf4:	f003 f8a0 	bl	8011d38 <tcp_timer_needed>
      }
      break;
 800ebf8:	e026      	b.n	800ec48 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800ebfa:	6878      	ldr	r0, [r7, #4]
 800ebfc:	f000 f93c 	bl	800ee78 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ec00:	4b17      	ldr	r3, [pc, #92]	; (800ec60 <tcp_process+0x7d0>)
 800ec02:	781b      	ldrb	r3, [r3, #0]
 800ec04:	f003 0310 	and.w	r3, r3, #16
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d01f      	beq.n	800ec4c <tcp_process+0x7bc>
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ec10:	4b14      	ldr	r3, [pc, #80]	; (800ec64 <tcp_process+0x7d4>)
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	429a      	cmp	r2, r3
 800ec16:	d119      	bne.n	800ec4c <tcp_process+0x7bc>
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d115      	bne.n	800ec4c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ec20:	4b11      	ldr	r3, [pc, #68]	; (800ec68 <tcp_process+0x7d8>)
 800ec22:	781b      	ldrb	r3, [r3, #0]
 800ec24:	f043 0310 	orr.w	r3, r3, #16
 800ec28:	b2da      	uxtb	r2, r3
 800ec2a:	4b0f      	ldr	r3, [pc, #60]	; (800ec68 <tcp_process+0x7d8>)
 800ec2c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ec2e:	e00d      	b.n	800ec4c <tcp_process+0x7bc>
    default:
      break;
 800ec30:	bf00      	nop
 800ec32:	e00c      	b.n	800ec4e <tcp_process+0x7be>
      break;
 800ec34:	bf00      	nop
 800ec36:	e00a      	b.n	800ec4e <tcp_process+0x7be>
      break;
 800ec38:	bf00      	nop
 800ec3a:	e008      	b.n	800ec4e <tcp_process+0x7be>
      break;
 800ec3c:	bf00      	nop
 800ec3e:	e006      	b.n	800ec4e <tcp_process+0x7be>
      break;
 800ec40:	bf00      	nop
 800ec42:	e004      	b.n	800ec4e <tcp_process+0x7be>
      break;
 800ec44:	bf00      	nop
 800ec46:	e002      	b.n	800ec4e <tcp_process+0x7be>
      break;
 800ec48:	bf00      	nop
 800ec4a:	e000      	b.n	800ec4e <tcp_process+0x7be>
      break;
 800ec4c:	bf00      	nop
  }
  return ERR_OK;
 800ec4e:	2300      	movs	r3, #0
}
 800ec50:	4618      	mov	r0, r3
 800ec52:	3724      	adds	r7, #36	; 0x24
 800ec54:	46bd      	mov	sp, r7
 800ec56:	bd90      	pop	{r4, r7, pc}
 800ec58:	2000ab14 	.word	0x2000ab14
 800ec5c:	2000ab28 	.word	0x2000ab28
 800ec60:	200040cc 	.word	0x200040cc
 800ec64:	200040c4 	.word	0x200040c4
 800ec68:	200040cd 	.word	0x200040cd
 800ec6c:	2000ab18 	.word	0x2000ab18

0800ec70 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ec70:	b590      	push	{r4, r7, lr}
 800ec72:	b085      	sub	sp, #20
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
 800ec78:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d106      	bne.n	800ec8e <tcp_oos_insert_segment+0x1e>
 800ec80:	4b3b      	ldr	r3, [pc, #236]	; (800ed70 <tcp_oos_insert_segment+0x100>)
 800ec82:	f240 421f 	movw	r2, #1055	; 0x41f
 800ec86:	493b      	ldr	r1, [pc, #236]	; (800ed74 <tcp_oos_insert_segment+0x104>)
 800ec88:	483b      	ldr	r0, [pc, #236]	; (800ed78 <tcp_oos_insert_segment+0x108>)
 800ec8a:	f006 f90b 	bl	8014ea4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	68db      	ldr	r3, [r3, #12]
 800ec92:	899b      	ldrh	r3, [r3, #12]
 800ec94:	b29b      	uxth	r3, r3
 800ec96:	4618      	mov	r0, r3
 800ec98:	f7fb f920 	bl	8009edc <lwip_htons>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	b2db      	uxtb	r3, r3
 800eca0:	f003 0301 	and.w	r3, r3, #1
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d028      	beq.n	800ecfa <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800eca8:	6838      	ldr	r0, [r7, #0]
 800ecaa:	f7fe f9af 	bl	800d00c <tcp_segs_free>
    next = NULL;
 800ecae:	2300      	movs	r3, #0
 800ecb0:	603b      	str	r3, [r7, #0]
 800ecb2:	e056      	b.n	800ed62 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	68db      	ldr	r3, [r3, #12]
 800ecb8:	899b      	ldrh	r3, [r3, #12]
 800ecba:	b29b      	uxth	r3, r3
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f7fb f90d 	bl	8009edc <lwip_htons>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	b2db      	uxtb	r3, r3
 800ecc6:	f003 0301 	and.w	r3, r3, #1
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d00d      	beq.n	800ecea <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	68db      	ldr	r3, [r3, #12]
 800ecd2:	899b      	ldrh	r3, [r3, #12]
 800ecd4:	b29c      	uxth	r4, r3
 800ecd6:	2001      	movs	r0, #1
 800ecd8:	f7fb f900 	bl	8009edc <lwip_htons>
 800ecdc:	4603      	mov	r3, r0
 800ecde:	461a      	mov	r2, r3
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	68db      	ldr	r3, [r3, #12]
 800ece4:	4322      	orrs	r2, r4
 800ece6:	b292      	uxth	r2, r2
 800ece8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ecee:	683b      	ldr	r3, [r7, #0]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ecf4:	68f8      	ldr	r0, [r7, #12]
 800ecf6:	f7fe f99e 	bl	800d036 <tcp_seg_free>
    while (next &&
 800ecfa:	683b      	ldr	r3, [r7, #0]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d00e      	beq.n	800ed1e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	891b      	ldrh	r3, [r3, #8]
 800ed04:	461a      	mov	r2, r3
 800ed06:	4b1d      	ldr	r3, [pc, #116]	; (800ed7c <tcp_oos_insert_segment+0x10c>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	441a      	add	r2, r3
 800ed0c:	683b      	ldr	r3, [r7, #0]
 800ed0e:	68db      	ldr	r3, [r3, #12]
 800ed10:	685b      	ldr	r3, [r3, #4]
 800ed12:	6839      	ldr	r1, [r7, #0]
 800ed14:	8909      	ldrh	r1, [r1, #8]
 800ed16:	440b      	add	r3, r1
 800ed18:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	daca      	bge.n	800ecb4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ed1e:	683b      	ldr	r3, [r7, #0]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d01e      	beq.n	800ed62 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	891b      	ldrh	r3, [r3, #8]
 800ed28:	461a      	mov	r2, r3
 800ed2a:	4b14      	ldr	r3, [pc, #80]	; (800ed7c <tcp_oos_insert_segment+0x10c>)
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	441a      	add	r2, r3
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	68db      	ldr	r3, [r3, #12]
 800ed34:	685b      	ldr	r3, [r3, #4]
 800ed36:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	dd12      	ble.n	800ed62 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	68db      	ldr	r3, [r3, #12]
 800ed40:	685b      	ldr	r3, [r3, #4]
 800ed42:	b29a      	uxth	r2, r3
 800ed44:	4b0d      	ldr	r3, [pc, #52]	; (800ed7c <tcp_oos_insert_segment+0x10c>)
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	b29b      	uxth	r3, r3
 800ed4a:	1ad3      	subs	r3, r2, r3
 800ed4c:	b29a      	uxth	r2, r3
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	685a      	ldr	r2, [r3, #4]
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	891b      	ldrh	r3, [r3, #8]
 800ed5a:	4619      	mov	r1, r3
 800ed5c:	4610      	mov	r0, r2
 800ed5e:	f7fc fb0b 	bl	800b378 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	683a      	ldr	r2, [r7, #0]
 800ed66:	601a      	str	r2, [r3, #0]
}
 800ed68:	bf00      	nop
 800ed6a:	3714      	adds	r7, #20
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	bd90      	pop	{r4, r7, pc}
 800ed70:	08017cf8 	.word	0x08017cf8
 800ed74:	08017fb8 	.word	0x08017fb8
 800ed78:	08017d44 	.word	0x08017d44
 800ed7c:	200040c0 	.word	0x200040c0

0800ed80 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ed80:	b5b0      	push	{r4, r5, r7, lr}
 800ed82:	b086      	sub	sp, #24
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	60f8      	str	r0, [r7, #12]
 800ed88:	60b9      	str	r1, [r7, #8]
 800ed8a:	607a      	str	r2, [r7, #4]
 800ed8c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ed8e:	e03e      	b.n	800ee0e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ed90:	68bb      	ldr	r3, [r7, #8]
 800ed92:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ed94:	68bb      	ldr	r3, [r7, #8]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ed9a:	697b      	ldr	r3, [r7, #20]
 800ed9c:	685b      	ldr	r3, [r3, #4]
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f7fc fcfe 	bl	800b7a0 <pbuf_clen>
 800eda4:	4603      	mov	r3, r0
 800eda6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800edae:	8a7a      	ldrh	r2, [r7, #18]
 800edb0:	429a      	cmp	r2, r3
 800edb2:	d906      	bls.n	800edc2 <tcp_free_acked_segments+0x42>
 800edb4:	4b2a      	ldr	r3, [pc, #168]	; (800ee60 <tcp_free_acked_segments+0xe0>)
 800edb6:	f240 4257 	movw	r2, #1111	; 0x457
 800edba:	492a      	ldr	r1, [pc, #168]	; (800ee64 <tcp_free_acked_segments+0xe4>)
 800edbc:	482a      	ldr	r0, [pc, #168]	; (800ee68 <tcp_free_acked_segments+0xe8>)
 800edbe:	f006 f871 	bl	8014ea4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800edc8:	8a7b      	ldrh	r3, [r7, #18]
 800edca:	1ad3      	subs	r3, r2, r3
 800edcc:	b29a      	uxth	r2, r3
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800edd4:	697b      	ldr	r3, [r7, #20]
 800edd6:	891a      	ldrh	r2, [r3, #8]
 800edd8:	4b24      	ldr	r3, [pc, #144]	; (800ee6c <tcp_free_acked_segments+0xec>)
 800edda:	881b      	ldrh	r3, [r3, #0]
 800eddc:	4413      	add	r3, r2
 800edde:	b29a      	uxth	r2, r3
 800ede0:	4b22      	ldr	r3, [pc, #136]	; (800ee6c <tcp_free_acked_segments+0xec>)
 800ede2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800ede4:	6978      	ldr	r0, [r7, #20]
 800ede6:	f7fe f926 	bl	800d036 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d00c      	beq.n	800ee0e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800edf4:	68bb      	ldr	r3, [r7, #8]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d109      	bne.n	800ee0e <tcp_free_acked_segments+0x8e>
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d106      	bne.n	800ee0e <tcp_free_acked_segments+0x8e>
 800ee00:	4b17      	ldr	r3, [pc, #92]	; (800ee60 <tcp_free_acked_segments+0xe0>)
 800ee02:	f240 4261 	movw	r2, #1121	; 0x461
 800ee06:	491a      	ldr	r1, [pc, #104]	; (800ee70 <tcp_free_acked_segments+0xf0>)
 800ee08:	4817      	ldr	r0, [pc, #92]	; (800ee68 <tcp_free_acked_segments+0xe8>)
 800ee0a:	f006 f84b 	bl	8014ea4 <iprintf>
  while (seg_list != NULL &&
 800ee0e:	68bb      	ldr	r3, [r7, #8]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d020      	beq.n	800ee56 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	68db      	ldr	r3, [r3, #12]
 800ee18:	685b      	ldr	r3, [r3, #4]
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f7fb f873 	bl	8009f06 <lwip_htonl>
 800ee20:	4604      	mov	r4, r0
 800ee22:	68bb      	ldr	r3, [r7, #8]
 800ee24:	891b      	ldrh	r3, [r3, #8]
 800ee26:	461d      	mov	r5, r3
 800ee28:	68bb      	ldr	r3, [r7, #8]
 800ee2a:	68db      	ldr	r3, [r3, #12]
 800ee2c:	899b      	ldrh	r3, [r3, #12]
 800ee2e:	b29b      	uxth	r3, r3
 800ee30:	4618      	mov	r0, r3
 800ee32:	f7fb f853 	bl	8009edc <lwip_htons>
 800ee36:	4603      	mov	r3, r0
 800ee38:	b2db      	uxtb	r3, r3
 800ee3a:	f003 0303 	and.w	r3, r3, #3
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d001      	beq.n	800ee46 <tcp_free_acked_segments+0xc6>
 800ee42:	2301      	movs	r3, #1
 800ee44:	e000      	b.n	800ee48 <tcp_free_acked_segments+0xc8>
 800ee46:	2300      	movs	r3, #0
 800ee48:	442b      	add	r3, r5
 800ee4a:	18e2      	adds	r2, r4, r3
 800ee4c:	4b09      	ldr	r3, [pc, #36]	; (800ee74 <tcp_free_acked_segments+0xf4>)
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	dd9c      	ble.n	800ed90 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ee56:	68bb      	ldr	r3, [r7, #8]
}
 800ee58:	4618      	mov	r0, r3
 800ee5a:	3718      	adds	r7, #24
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bdb0      	pop	{r4, r5, r7, pc}
 800ee60:	08017cf8 	.word	0x08017cf8
 800ee64:	08017fe0 	.word	0x08017fe0
 800ee68:	08017d44 	.word	0x08017d44
 800ee6c:	200040c8 	.word	0x200040c8
 800ee70:	08018008 	.word	0x08018008
 800ee74:	200040c4 	.word	0x200040c4

0800ee78 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ee78:	b5b0      	push	{r4, r5, r7, lr}
 800ee7a:	b094      	sub	sp, #80	; 0x50
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ee80:	2300      	movs	r3, #0
 800ee82:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d106      	bne.n	800ee98 <tcp_receive+0x20>
 800ee8a:	4ba6      	ldr	r3, [pc, #664]	; (800f124 <tcp_receive+0x2ac>)
 800ee8c:	f240 427b 	movw	r2, #1147	; 0x47b
 800ee90:	49a5      	ldr	r1, [pc, #660]	; (800f128 <tcp_receive+0x2b0>)
 800ee92:	48a6      	ldr	r0, [pc, #664]	; (800f12c <tcp_receive+0x2b4>)
 800ee94:	f006 f806 	bl	8014ea4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	7d1b      	ldrb	r3, [r3, #20]
 800ee9c:	2b03      	cmp	r3, #3
 800ee9e:	d806      	bhi.n	800eeae <tcp_receive+0x36>
 800eea0:	4ba0      	ldr	r3, [pc, #640]	; (800f124 <tcp_receive+0x2ac>)
 800eea2:	f240 427c 	movw	r2, #1148	; 0x47c
 800eea6:	49a2      	ldr	r1, [pc, #648]	; (800f130 <tcp_receive+0x2b8>)
 800eea8:	48a0      	ldr	r0, [pc, #640]	; (800f12c <tcp_receive+0x2b4>)
 800eeaa:	f005 fffb 	bl	8014ea4 <iprintf>

  if (flags & TCP_ACK) {
 800eeae:	4ba1      	ldr	r3, [pc, #644]	; (800f134 <tcp_receive+0x2bc>)
 800eeb0:	781b      	ldrb	r3, [r3, #0]
 800eeb2:	f003 0310 	and.w	r3, r3, #16
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	f000 8263 	beq.w	800f382 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eec2:	461a      	mov	r2, r3
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eec8:	4413      	add	r3, r2
 800eeca:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eed0:	4b99      	ldr	r3, [pc, #612]	; (800f138 <tcp_receive+0x2c0>)
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	1ad3      	subs	r3, r2, r3
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	db1b      	blt.n	800ef12 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eede:	4b96      	ldr	r3, [pc, #600]	; (800f138 <tcp_receive+0x2c0>)
 800eee0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800eee2:	429a      	cmp	r2, r3
 800eee4:	d106      	bne.n	800eef4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eeea:	4b94      	ldr	r3, [pc, #592]	; (800f13c <tcp_receive+0x2c4>)
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	1ad3      	subs	r3, r2, r3
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	db0e      	blt.n	800ef12 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eef8:	4b90      	ldr	r3, [pc, #576]	; (800f13c <tcp_receive+0x2c4>)
 800eefa:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800eefc:	429a      	cmp	r2, r3
 800eefe:	d125      	bne.n	800ef4c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ef00:	4b8f      	ldr	r3, [pc, #572]	; (800f140 <tcp_receive+0x2c8>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	89db      	ldrh	r3, [r3, #14]
 800ef06:	b29a      	uxth	r2, r3
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ef0e:	429a      	cmp	r2, r3
 800ef10:	d91c      	bls.n	800ef4c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ef12:	4b8b      	ldr	r3, [pc, #556]	; (800f140 <tcp_receive+0x2c8>)
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	89db      	ldrh	r3, [r3, #14]
 800ef18:	b29a      	uxth	r2, r3
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ef2c:	429a      	cmp	r2, r3
 800ef2e:	d205      	bcs.n	800ef3c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800ef3c:	4b7e      	ldr	r3, [pc, #504]	; (800f138 <tcp_receive+0x2c0>)
 800ef3e:	681a      	ldr	r2, [r3, #0]
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800ef44:	4b7d      	ldr	r3, [pc, #500]	; (800f13c <tcp_receive+0x2c4>)
 800ef46:	681a      	ldr	r2, [r3, #0]
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ef4c:	4b7b      	ldr	r3, [pc, #492]	; (800f13c <tcp_receive+0x2c4>)
 800ef4e:	681a      	ldr	r2, [r3, #0]
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef54:	1ad3      	subs	r3, r2, r3
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	dc58      	bgt.n	800f00c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800ef5a:	4b7a      	ldr	r3, [pc, #488]	; (800f144 <tcp_receive+0x2cc>)
 800ef5c:	881b      	ldrh	r3, [r3, #0]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d14b      	bne.n	800effa <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef66:	687a      	ldr	r2, [r7, #4]
 800ef68:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800ef6c:	4413      	add	r3, r2
 800ef6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef70:	429a      	cmp	r2, r3
 800ef72:	d142      	bne.n	800effa <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	db3d      	blt.n	800effa <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ef82:	4b6e      	ldr	r3, [pc, #440]	; (800f13c <tcp_receive+0x2c4>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	429a      	cmp	r2, r3
 800ef88:	d137      	bne.n	800effa <tcp_receive+0x182>
              found_dupack = 1;
 800ef8a:	2301      	movs	r3, #1
 800ef8c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ef94:	2bff      	cmp	r3, #255	; 0xff
 800ef96:	d007      	beq.n	800efa8 <tcp_receive+0x130>
                ++pcb->dupacks;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ef9e:	3301      	adds	r3, #1
 800efa0:	b2da      	uxtb	r2, r3
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800efae:	2b03      	cmp	r3, #3
 800efb0:	d91b      	bls.n	800efea <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800efbc:	4413      	add	r3, r2
 800efbe:	b29a      	uxth	r2, r3
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800efc6:	429a      	cmp	r2, r3
 800efc8:	d30a      	bcc.n	800efe0 <tcp_receive+0x168>
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800efd4:	4413      	add	r3, r2
 800efd6:	b29a      	uxth	r2, r3
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800efde:	e004      	b.n	800efea <tcp_receive+0x172>
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800efe6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800eff0:	2b02      	cmp	r3, #2
 800eff2:	d902      	bls.n	800effa <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800eff4:	6878      	ldr	r0, [r7, #4]
 800eff6:	f002 fb41 	bl	801167c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800effa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800effc:	2b00      	cmp	r3, #0
 800effe:	f040 8160 	bne.w	800f2c2 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2200      	movs	r2, #0
 800f006:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f00a:	e15a      	b.n	800f2c2 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f00c:	4b4b      	ldr	r3, [pc, #300]	; (800f13c <tcp_receive+0x2c4>)
 800f00e:	681a      	ldr	r2, [r3, #0]
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f014:	1ad3      	subs	r3, r2, r3
 800f016:	3b01      	subs	r3, #1
 800f018:	2b00      	cmp	r3, #0
 800f01a:	f2c0 814d 	blt.w	800f2b8 <tcp_receive+0x440>
 800f01e:	4b47      	ldr	r3, [pc, #284]	; (800f13c <tcp_receive+0x2c4>)
 800f020:	681a      	ldr	r2, [r3, #0]
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f026:	1ad3      	subs	r3, r2, r3
 800f028:	2b00      	cmp	r3, #0
 800f02a:	f300 8145 	bgt.w	800f2b8 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	8b5b      	ldrh	r3, [r3, #26]
 800f032:	f003 0304 	and.w	r3, r3, #4
 800f036:	2b00      	cmp	r3, #0
 800f038:	d010      	beq.n	800f05c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	8b5b      	ldrh	r3, [r3, #26]
 800f03e:	f023 0304 	bic.w	r3, r3, #4
 800f042:	b29a      	uxth	r2, r3
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	2200      	movs	r2, #0
 800f058:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	2200      	movs	r2, #0
 800f060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f06a:	10db      	asrs	r3, r3, #3
 800f06c:	b21b      	sxth	r3, r3
 800f06e:	b29a      	uxth	r2, r3
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f076:	b29b      	uxth	r3, r3
 800f078:	4413      	add	r3, r2
 800f07a:	b29b      	uxth	r3, r3
 800f07c:	b21a      	sxth	r2, r3
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f084:	4b2d      	ldr	r3, [pc, #180]	; (800f13c <tcp_receive+0x2c4>)
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	b29a      	uxth	r2, r3
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f08e:	b29b      	uxth	r3, r3
 800f090:	1ad3      	subs	r3, r2, r3
 800f092:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2200      	movs	r2, #0
 800f098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f09c:	4b27      	ldr	r3, [pc, #156]	; (800f13c <tcp_receive+0x2c4>)
 800f09e:	681a      	ldr	r2, [r3, #0]
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	7d1b      	ldrb	r3, [r3, #20]
 800f0a8:	2b03      	cmp	r3, #3
 800f0aa:	f240 8096 	bls.w	800f1da <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f0ba:	429a      	cmp	r2, r3
 800f0bc:	d244      	bcs.n	800f148 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	8b5b      	ldrh	r3, [r3, #26]
 800f0c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d001      	beq.n	800f0ce <tcp_receive+0x256>
 800f0ca:	2301      	movs	r3, #1
 800f0cc:	e000      	b.n	800f0d0 <tcp_receive+0x258>
 800f0ce:	2302      	movs	r3, #2
 800f0d0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f0d4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f0d8:	b29a      	uxth	r2, r3
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f0de:	fb12 f303 	smulbb	r3, r2, r3
 800f0e2:	b29b      	uxth	r3, r3
 800f0e4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f0e6:	4293      	cmp	r3, r2
 800f0e8:	bf28      	it	cs
 800f0ea:	4613      	movcs	r3, r2
 800f0ec:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f0f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f0f6:	4413      	add	r3, r2
 800f0f8:	b29a      	uxth	r2, r3
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f100:	429a      	cmp	r2, r3
 800f102:	d309      	bcc.n	800f118 <tcp_receive+0x2a0>
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f10a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f10c:	4413      	add	r3, r2
 800f10e:	b29a      	uxth	r2, r3
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f116:	e060      	b.n	800f1da <tcp_receive+0x362>
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f11e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f122:	e05a      	b.n	800f1da <tcp_receive+0x362>
 800f124:	08017cf8 	.word	0x08017cf8
 800f128:	08018028 	.word	0x08018028
 800f12c:	08017d44 	.word	0x08017d44
 800f130:	08018044 	.word	0x08018044
 800f134:	200040cc 	.word	0x200040cc
 800f138:	200040c0 	.word	0x200040c0
 800f13c:	200040c4 	.word	0x200040c4
 800f140:	200040b0 	.word	0x200040b0
 800f144:	200040ca 	.word	0x200040ca
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f14e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f150:	4413      	add	r3, r2
 800f152:	b29a      	uxth	r2, r3
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f15a:	429a      	cmp	r2, r3
 800f15c:	d309      	bcc.n	800f172 <tcp_receive+0x2fa>
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f164:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f166:	4413      	add	r3, r2
 800f168:	b29a      	uxth	r2, r3
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f170:	e004      	b.n	800f17c <tcp_receive+0x304>
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f178:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f188:	429a      	cmp	r2, r3
 800f18a:	d326      	bcc.n	800f1da <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f198:	1ad3      	subs	r3, r2, r3
 800f19a:	b29a      	uxth	r2, r3
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f1ac:	4413      	add	r3, r2
 800f1ae:	b29a      	uxth	r2, r3
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f1b6:	429a      	cmp	r2, r3
 800f1b8:	d30a      	bcc.n	800f1d0 <tcp_receive+0x358>
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f1c4:	4413      	add	r3, r2
 800f1c6:	b29a      	uxth	r2, r3
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f1ce:	e004      	b.n	800f1da <tcp_receive+0x362>
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f1d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1e2:	4a98      	ldr	r2, [pc, #608]	; (800f444 <tcp_receive+0x5cc>)
 800f1e4:	6878      	ldr	r0, [r7, #4]
 800f1e6:	f7ff fdcb 	bl	800ed80 <tcp_free_acked_segments>
 800f1ea:	4602      	mov	r2, r0
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1f8:	4a93      	ldr	r2, [pc, #588]	; (800f448 <tcp_receive+0x5d0>)
 800f1fa:	6878      	ldr	r0, [r7, #4]
 800f1fc:	f7ff fdc0 	bl	800ed80 <tcp_free_acked_segments>
 800f200:	4602      	mov	r2, r0
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d104      	bne.n	800f218 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f214:	861a      	strh	r2, [r3, #48]	; 0x30
 800f216:	e002      	b.n	800f21e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2200      	movs	r2, #0
 800f21c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	2200      	movs	r2, #0
 800f222:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d103      	bne.n	800f234 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2200      	movs	r2, #0
 800f230:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f23a:	4b84      	ldr	r3, [pc, #528]	; (800f44c <tcp_receive+0x5d4>)
 800f23c:	881b      	ldrh	r3, [r3, #0]
 800f23e:	4413      	add	r3, r2
 800f240:	b29a      	uxth	r2, r3
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	8b5b      	ldrh	r3, [r3, #26]
 800f24c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f250:	2b00      	cmp	r3, #0
 800f252:	d035      	beq.n	800f2c0 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d118      	bne.n	800f28e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f260:	2b00      	cmp	r3, #0
 800f262:	d00c      	beq.n	800f27e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f26c:	68db      	ldr	r3, [r3, #12]
 800f26e:	685b      	ldr	r3, [r3, #4]
 800f270:	4618      	mov	r0, r3
 800f272:	f7fa fe48 	bl	8009f06 <lwip_htonl>
 800f276:	4603      	mov	r3, r0
 800f278:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	dc20      	bgt.n	800f2c0 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	8b5b      	ldrh	r3, [r3, #26]
 800f282:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f286:	b29a      	uxth	r2, r3
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f28c:	e018      	b.n	800f2c0 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f296:	68db      	ldr	r3, [r3, #12]
 800f298:	685b      	ldr	r3, [r3, #4]
 800f29a:	4618      	mov	r0, r3
 800f29c:	f7fa fe33 	bl	8009f06 <lwip_htonl>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	1ae3      	subs	r3, r4, r3
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	dc0b      	bgt.n	800f2c0 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	8b5b      	ldrh	r3, [r3, #26]
 800f2ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f2b0:	b29a      	uxth	r2, r3
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f2b6:	e003      	b.n	800f2c0 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f2b8:	6878      	ldr	r0, [r7, #4]
 800f2ba:	f002 fbcd 	bl	8011a58 <tcp_send_empty_ack>
 800f2be:	e000      	b.n	800f2c2 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f2c0:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d05b      	beq.n	800f382 <tcp_receive+0x50a>
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f2ce:	4b60      	ldr	r3, [pc, #384]	; (800f450 <tcp_receive+0x5d8>)
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	1ad3      	subs	r3, r2, r3
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	da54      	bge.n	800f382 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f2d8:	4b5e      	ldr	r3, [pc, #376]	; (800f454 <tcp_receive+0x5dc>)
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	b29a      	uxth	r2, r3
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2e2:	b29b      	uxth	r3, r3
 800f2e4:	1ad3      	subs	r3, r2, r3
 800f2e6:	b29b      	uxth	r3, r3
 800f2e8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f2ec:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f2f6:	10db      	asrs	r3, r3, #3
 800f2f8:	b21b      	sxth	r3, r3
 800f2fa:	b29b      	uxth	r3, r3
 800f2fc:	1ad3      	subs	r3, r2, r3
 800f2fe:	b29b      	uxth	r3, r3
 800f300:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f30a:	b29a      	uxth	r2, r3
 800f30c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f310:	4413      	add	r3, r2
 800f312:	b29b      	uxth	r3, r3
 800f314:	b21a      	sxth	r2, r3
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f31a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f31e:	2b00      	cmp	r3, #0
 800f320:	da05      	bge.n	800f32e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800f322:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f326:	425b      	negs	r3, r3
 800f328:	b29b      	uxth	r3, r3
 800f32a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f32e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f338:	109b      	asrs	r3, r3, #2
 800f33a:	b21b      	sxth	r3, r3
 800f33c:	b29b      	uxth	r3, r3
 800f33e:	1ad3      	subs	r3, r2, r3
 800f340:	b29b      	uxth	r3, r3
 800f342:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f34c:	b29a      	uxth	r2, r3
 800f34e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f352:	4413      	add	r3, r2
 800f354:	b29b      	uxth	r3, r3
 800f356:	b21a      	sxth	r2, r3
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f362:	10db      	asrs	r3, r3, #3
 800f364:	b21b      	sxth	r3, r3
 800f366:	b29a      	uxth	r2, r3
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f36e:	b29b      	uxth	r3, r3
 800f370:	4413      	add	r3, r2
 800f372:	b29b      	uxth	r3, r3
 800f374:	b21a      	sxth	r2, r3
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	2200      	movs	r2, #0
 800f380:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f382:	4b35      	ldr	r3, [pc, #212]	; (800f458 <tcp_receive+0x5e0>)
 800f384:	881b      	ldrh	r3, [r3, #0]
 800f386:	2b00      	cmp	r3, #0
 800f388:	f000 84e1 	beq.w	800fd4e <tcp_receive+0xed6>
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	7d1b      	ldrb	r3, [r3, #20]
 800f390:	2b06      	cmp	r3, #6
 800f392:	f200 84dc 	bhi.w	800fd4e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f39a:	4b30      	ldr	r3, [pc, #192]	; (800f45c <tcp_receive+0x5e4>)
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	1ad3      	subs	r3, r2, r3
 800f3a0:	3b01      	subs	r3, #1
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	f2c0 808e 	blt.w	800f4c4 <tcp_receive+0x64c>
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f3ac:	4b2a      	ldr	r3, [pc, #168]	; (800f458 <tcp_receive+0x5e0>)
 800f3ae:	881b      	ldrh	r3, [r3, #0]
 800f3b0:	4619      	mov	r1, r3
 800f3b2:	4b2a      	ldr	r3, [pc, #168]	; (800f45c <tcp_receive+0x5e4>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	440b      	add	r3, r1
 800f3b8:	1ad3      	subs	r3, r2, r3
 800f3ba:	3301      	adds	r3, #1
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	f300 8081 	bgt.w	800f4c4 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f3c2:	4b27      	ldr	r3, [pc, #156]	; (800f460 <tcp_receive+0x5e8>)
 800f3c4:	685b      	ldr	r3, [r3, #4]
 800f3c6:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f3cc:	4b23      	ldr	r3, [pc, #140]	; (800f45c <tcp_receive+0x5e4>)
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	1ad3      	subs	r3, r2, r3
 800f3d2:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f3d4:	4b22      	ldr	r3, [pc, #136]	; (800f460 <tcp_receive+0x5e8>)
 800f3d6:	685b      	ldr	r3, [r3, #4]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d106      	bne.n	800f3ea <tcp_receive+0x572>
 800f3dc:	4b21      	ldr	r3, [pc, #132]	; (800f464 <tcp_receive+0x5ec>)
 800f3de:	f240 5294 	movw	r2, #1428	; 0x594
 800f3e2:	4921      	ldr	r1, [pc, #132]	; (800f468 <tcp_receive+0x5f0>)
 800f3e4:	4821      	ldr	r0, [pc, #132]	; (800f46c <tcp_receive+0x5f4>)
 800f3e6:	f005 fd5d 	bl	8014ea4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f3f0:	4293      	cmp	r3, r2
 800f3f2:	d906      	bls.n	800f402 <tcp_receive+0x58a>
 800f3f4:	4b1b      	ldr	r3, [pc, #108]	; (800f464 <tcp_receive+0x5ec>)
 800f3f6:	f240 5295 	movw	r2, #1429	; 0x595
 800f3fa:	491d      	ldr	r1, [pc, #116]	; (800f470 <tcp_receive+0x5f8>)
 800f3fc:	481b      	ldr	r0, [pc, #108]	; (800f46c <tcp_receive+0x5f4>)
 800f3fe:	f005 fd51 	bl	8014ea4 <iprintf>
      off = (u16_t)off32;
 800f402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f404:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f408:	4b15      	ldr	r3, [pc, #84]	; (800f460 <tcp_receive+0x5e8>)
 800f40a:	685b      	ldr	r3, [r3, #4]
 800f40c:	891b      	ldrh	r3, [r3, #8]
 800f40e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f412:	429a      	cmp	r2, r3
 800f414:	d906      	bls.n	800f424 <tcp_receive+0x5ac>
 800f416:	4b13      	ldr	r3, [pc, #76]	; (800f464 <tcp_receive+0x5ec>)
 800f418:	f240 5297 	movw	r2, #1431	; 0x597
 800f41c:	4915      	ldr	r1, [pc, #84]	; (800f474 <tcp_receive+0x5fc>)
 800f41e:	4813      	ldr	r0, [pc, #76]	; (800f46c <tcp_receive+0x5f4>)
 800f420:	f005 fd40 	bl	8014ea4 <iprintf>
      inseg.len -= off;
 800f424:	4b0e      	ldr	r3, [pc, #56]	; (800f460 <tcp_receive+0x5e8>)
 800f426:	891a      	ldrh	r2, [r3, #8]
 800f428:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f42c:	1ad3      	subs	r3, r2, r3
 800f42e:	b29a      	uxth	r2, r3
 800f430:	4b0b      	ldr	r3, [pc, #44]	; (800f460 <tcp_receive+0x5e8>)
 800f432:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f434:	4b0a      	ldr	r3, [pc, #40]	; (800f460 <tcp_receive+0x5e8>)
 800f436:	685b      	ldr	r3, [r3, #4]
 800f438:	891a      	ldrh	r2, [r3, #8]
 800f43a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f43e:	1ad3      	subs	r3, r2, r3
 800f440:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f442:	e029      	b.n	800f498 <tcp_receive+0x620>
 800f444:	08018060 	.word	0x08018060
 800f448:	08018068 	.word	0x08018068
 800f44c:	200040c8 	.word	0x200040c8
 800f450:	200040c4 	.word	0x200040c4
 800f454:	2000ab1c 	.word	0x2000ab1c
 800f458:	200040ca 	.word	0x200040ca
 800f45c:	200040c0 	.word	0x200040c0
 800f460:	200040a0 	.word	0x200040a0
 800f464:	08017cf8 	.word	0x08017cf8
 800f468:	08018070 	.word	0x08018070
 800f46c:	08017d44 	.word	0x08017d44
 800f470:	08018080 	.word	0x08018080
 800f474:	08018090 	.word	0x08018090
        off -= p->len;
 800f478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f47a:	895b      	ldrh	r3, [r3, #10]
 800f47c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f480:	1ad3      	subs	r3, r2, r3
 800f482:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f486:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f488:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f48a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f48c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f48e:	2200      	movs	r2, #0
 800f490:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f492:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f49a:	895b      	ldrh	r3, [r3, #10]
 800f49c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f4a0:	429a      	cmp	r2, r3
 800f4a2:	d8e9      	bhi.n	800f478 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f4a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f4a8:	4619      	mov	r1, r3
 800f4aa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f4ac:	f7fc f864 	bl	800b578 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4b4:	4a91      	ldr	r2, [pc, #580]	; (800f6fc <tcp_receive+0x884>)
 800f4b6:	6013      	str	r3, [r2, #0]
 800f4b8:	4b91      	ldr	r3, [pc, #580]	; (800f700 <tcp_receive+0x888>)
 800f4ba:	68db      	ldr	r3, [r3, #12]
 800f4bc:	4a8f      	ldr	r2, [pc, #572]	; (800f6fc <tcp_receive+0x884>)
 800f4be:	6812      	ldr	r2, [r2, #0]
 800f4c0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f4c2:	e00d      	b.n	800f4e0 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f4c4:	4b8d      	ldr	r3, [pc, #564]	; (800f6fc <tcp_receive+0x884>)
 800f4c6:	681a      	ldr	r2, [r3, #0]
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4cc:	1ad3      	subs	r3, r2, r3
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	da06      	bge.n	800f4e0 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	8b5b      	ldrh	r3, [r3, #26]
 800f4d6:	f043 0302 	orr.w	r3, r3, #2
 800f4da:	b29a      	uxth	r2, r3
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f4e0:	4b86      	ldr	r3, [pc, #536]	; (800f6fc <tcp_receive+0x884>)
 800f4e2:	681a      	ldr	r2, [r3, #0]
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4e8:	1ad3      	subs	r3, r2, r3
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	f2c0 842a 	blt.w	800fd44 <tcp_receive+0xecc>
 800f4f0:	4b82      	ldr	r3, [pc, #520]	; (800f6fc <tcp_receive+0x884>)
 800f4f2:	681a      	ldr	r2, [r3, #0]
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4f8:	6879      	ldr	r1, [r7, #4]
 800f4fa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f4fc:	440b      	add	r3, r1
 800f4fe:	1ad3      	subs	r3, r2, r3
 800f500:	3301      	adds	r3, #1
 800f502:	2b00      	cmp	r3, #0
 800f504:	f300 841e 	bgt.w	800fd44 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f50c:	4b7b      	ldr	r3, [pc, #492]	; (800f6fc <tcp_receive+0x884>)
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	429a      	cmp	r2, r3
 800f512:	f040 829a 	bne.w	800fa4a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f516:	4b7a      	ldr	r3, [pc, #488]	; (800f700 <tcp_receive+0x888>)
 800f518:	891c      	ldrh	r4, [r3, #8]
 800f51a:	4b79      	ldr	r3, [pc, #484]	; (800f700 <tcp_receive+0x888>)
 800f51c:	68db      	ldr	r3, [r3, #12]
 800f51e:	899b      	ldrh	r3, [r3, #12]
 800f520:	b29b      	uxth	r3, r3
 800f522:	4618      	mov	r0, r3
 800f524:	f7fa fcda 	bl	8009edc <lwip_htons>
 800f528:	4603      	mov	r3, r0
 800f52a:	b2db      	uxtb	r3, r3
 800f52c:	f003 0303 	and.w	r3, r3, #3
 800f530:	2b00      	cmp	r3, #0
 800f532:	d001      	beq.n	800f538 <tcp_receive+0x6c0>
 800f534:	2301      	movs	r3, #1
 800f536:	e000      	b.n	800f53a <tcp_receive+0x6c2>
 800f538:	2300      	movs	r3, #0
 800f53a:	4423      	add	r3, r4
 800f53c:	b29a      	uxth	r2, r3
 800f53e:	4b71      	ldr	r3, [pc, #452]	; (800f704 <tcp_receive+0x88c>)
 800f540:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f546:	4b6f      	ldr	r3, [pc, #444]	; (800f704 <tcp_receive+0x88c>)
 800f548:	881b      	ldrh	r3, [r3, #0]
 800f54a:	429a      	cmp	r2, r3
 800f54c:	d275      	bcs.n	800f63a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f54e:	4b6c      	ldr	r3, [pc, #432]	; (800f700 <tcp_receive+0x888>)
 800f550:	68db      	ldr	r3, [r3, #12]
 800f552:	899b      	ldrh	r3, [r3, #12]
 800f554:	b29b      	uxth	r3, r3
 800f556:	4618      	mov	r0, r3
 800f558:	f7fa fcc0 	bl	8009edc <lwip_htons>
 800f55c:	4603      	mov	r3, r0
 800f55e:	b2db      	uxtb	r3, r3
 800f560:	f003 0301 	and.w	r3, r3, #1
 800f564:	2b00      	cmp	r3, #0
 800f566:	d01f      	beq.n	800f5a8 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f568:	4b65      	ldr	r3, [pc, #404]	; (800f700 <tcp_receive+0x888>)
 800f56a:	68db      	ldr	r3, [r3, #12]
 800f56c:	899b      	ldrh	r3, [r3, #12]
 800f56e:	b29b      	uxth	r3, r3
 800f570:	b21b      	sxth	r3, r3
 800f572:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f576:	b21c      	sxth	r4, r3
 800f578:	4b61      	ldr	r3, [pc, #388]	; (800f700 <tcp_receive+0x888>)
 800f57a:	68db      	ldr	r3, [r3, #12]
 800f57c:	899b      	ldrh	r3, [r3, #12]
 800f57e:	b29b      	uxth	r3, r3
 800f580:	4618      	mov	r0, r3
 800f582:	f7fa fcab 	bl	8009edc <lwip_htons>
 800f586:	4603      	mov	r3, r0
 800f588:	b2db      	uxtb	r3, r3
 800f58a:	b29b      	uxth	r3, r3
 800f58c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f590:	b29b      	uxth	r3, r3
 800f592:	4618      	mov	r0, r3
 800f594:	f7fa fca2 	bl	8009edc <lwip_htons>
 800f598:	4603      	mov	r3, r0
 800f59a:	b21b      	sxth	r3, r3
 800f59c:	4323      	orrs	r3, r4
 800f59e:	b21a      	sxth	r2, r3
 800f5a0:	4b57      	ldr	r3, [pc, #348]	; (800f700 <tcp_receive+0x888>)
 800f5a2:	68db      	ldr	r3, [r3, #12]
 800f5a4:	b292      	uxth	r2, r2
 800f5a6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f5ac:	4b54      	ldr	r3, [pc, #336]	; (800f700 <tcp_receive+0x888>)
 800f5ae:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f5b0:	4b53      	ldr	r3, [pc, #332]	; (800f700 <tcp_receive+0x888>)
 800f5b2:	68db      	ldr	r3, [r3, #12]
 800f5b4:	899b      	ldrh	r3, [r3, #12]
 800f5b6:	b29b      	uxth	r3, r3
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	f7fa fc8f 	bl	8009edc <lwip_htons>
 800f5be:	4603      	mov	r3, r0
 800f5c0:	b2db      	uxtb	r3, r3
 800f5c2:	f003 0302 	and.w	r3, r3, #2
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d005      	beq.n	800f5d6 <tcp_receive+0x75e>
            inseg.len -= 1;
 800f5ca:	4b4d      	ldr	r3, [pc, #308]	; (800f700 <tcp_receive+0x888>)
 800f5cc:	891b      	ldrh	r3, [r3, #8]
 800f5ce:	3b01      	subs	r3, #1
 800f5d0:	b29a      	uxth	r2, r3
 800f5d2:	4b4b      	ldr	r3, [pc, #300]	; (800f700 <tcp_receive+0x888>)
 800f5d4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f5d6:	4b4a      	ldr	r3, [pc, #296]	; (800f700 <tcp_receive+0x888>)
 800f5d8:	685b      	ldr	r3, [r3, #4]
 800f5da:	4a49      	ldr	r2, [pc, #292]	; (800f700 <tcp_receive+0x888>)
 800f5dc:	8912      	ldrh	r2, [r2, #8]
 800f5de:	4611      	mov	r1, r2
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	f7fb fec9 	bl	800b378 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f5e6:	4b46      	ldr	r3, [pc, #280]	; (800f700 <tcp_receive+0x888>)
 800f5e8:	891c      	ldrh	r4, [r3, #8]
 800f5ea:	4b45      	ldr	r3, [pc, #276]	; (800f700 <tcp_receive+0x888>)
 800f5ec:	68db      	ldr	r3, [r3, #12]
 800f5ee:	899b      	ldrh	r3, [r3, #12]
 800f5f0:	b29b      	uxth	r3, r3
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	f7fa fc72 	bl	8009edc <lwip_htons>
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	b2db      	uxtb	r3, r3
 800f5fc:	f003 0303 	and.w	r3, r3, #3
 800f600:	2b00      	cmp	r3, #0
 800f602:	d001      	beq.n	800f608 <tcp_receive+0x790>
 800f604:	2301      	movs	r3, #1
 800f606:	e000      	b.n	800f60a <tcp_receive+0x792>
 800f608:	2300      	movs	r3, #0
 800f60a:	4423      	add	r3, r4
 800f60c:	b29a      	uxth	r2, r3
 800f60e:	4b3d      	ldr	r3, [pc, #244]	; (800f704 <tcp_receive+0x88c>)
 800f610:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f612:	4b3c      	ldr	r3, [pc, #240]	; (800f704 <tcp_receive+0x88c>)
 800f614:	881b      	ldrh	r3, [r3, #0]
 800f616:	461a      	mov	r2, r3
 800f618:	4b38      	ldr	r3, [pc, #224]	; (800f6fc <tcp_receive+0x884>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	441a      	add	r2, r3
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f622:	6879      	ldr	r1, [r7, #4]
 800f624:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f626:	440b      	add	r3, r1
 800f628:	429a      	cmp	r2, r3
 800f62a:	d006      	beq.n	800f63a <tcp_receive+0x7c2>
 800f62c:	4b36      	ldr	r3, [pc, #216]	; (800f708 <tcp_receive+0x890>)
 800f62e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800f632:	4936      	ldr	r1, [pc, #216]	; (800f70c <tcp_receive+0x894>)
 800f634:	4836      	ldr	r0, [pc, #216]	; (800f710 <tcp_receive+0x898>)
 800f636:	f005 fc35 	bl	8014ea4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f63e:	2b00      	cmp	r3, #0
 800f640:	f000 80e7 	beq.w	800f812 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f644:	4b2e      	ldr	r3, [pc, #184]	; (800f700 <tcp_receive+0x888>)
 800f646:	68db      	ldr	r3, [r3, #12]
 800f648:	899b      	ldrh	r3, [r3, #12]
 800f64a:	b29b      	uxth	r3, r3
 800f64c:	4618      	mov	r0, r3
 800f64e:	f7fa fc45 	bl	8009edc <lwip_htons>
 800f652:	4603      	mov	r3, r0
 800f654:	b2db      	uxtb	r3, r3
 800f656:	f003 0301 	and.w	r3, r3, #1
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d010      	beq.n	800f680 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f65e:	e00a      	b.n	800f676 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f664:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f66a:	681a      	ldr	r2, [r3, #0]
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800f670:	68f8      	ldr	r0, [r7, #12]
 800f672:	f7fd fce0 	bl	800d036 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d1f0      	bne.n	800f660 <tcp_receive+0x7e8>
 800f67e:	e0c8      	b.n	800f812 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f684:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f686:	e052      	b.n	800f72e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f68a:	68db      	ldr	r3, [r3, #12]
 800f68c:	899b      	ldrh	r3, [r3, #12]
 800f68e:	b29b      	uxth	r3, r3
 800f690:	4618      	mov	r0, r3
 800f692:	f7fa fc23 	bl	8009edc <lwip_htons>
 800f696:	4603      	mov	r3, r0
 800f698:	b2db      	uxtb	r3, r3
 800f69a:	f003 0301 	and.w	r3, r3, #1
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d03d      	beq.n	800f71e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f6a2:	4b17      	ldr	r3, [pc, #92]	; (800f700 <tcp_receive+0x888>)
 800f6a4:	68db      	ldr	r3, [r3, #12]
 800f6a6:	899b      	ldrh	r3, [r3, #12]
 800f6a8:	b29b      	uxth	r3, r3
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	f7fa fc16 	bl	8009edc <lwip_htons>
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	b2db      	uxtb	r3, r3
 800f6b4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d130      	bne.n	800f71e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f6bc:	4b10      	ldr	r3, [pc, #64]	; (800f700 <tcp_receive+0x888>)
 800f6be:	68db      	ldr	r3, [r3, #12]
 800f6c0:	899b      	ldrh	r3, [r3, #12]
 800f6c2:	b29c      	uxth	r4, r3
 800f6c4:	2001      	movs	r0, #1
 800f6c6:	f7fa fc09 	bl	8009edc <lwip_htons>
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	461a      	mov	r2, r3
 800f6ce:	4b0c      	ldr	r3, [pc, #48]	; (800f700 <tcp_receive+0x888>)
 800f6d0:	68db      	ldr	r3, [r3, #12]
 800f6d2:	4322      	orrs	r2, r4
 800f6d4:	b292      	uxth	r2, r2
 800f6d6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f6d8:	4b09      	ldr	r3, [pc, #36]	; (800f700 <tcp_receive+0x888>)
 800f6da:	891c      	ldrh	r4, [r3, #8]
 800f6dc:	4b08      	ldr	r3, [pc, #32]	; (800f700 <tcp_receive+0x888>)
 800f6de:	68db      	ldr	r3, [r3, #12]
 800f6e0:	899b      	ldrh	r3, [r3, #12]
 800f6e2:	b29b      	uxth	r3, r3
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f7fa fbf9 	bl	8009edc <lwip_htons>
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	b2db      	uxtb	r3, r3
 800f6ee:	f003 0303 	and.w	r3, r3, #3
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d00e      	beq.n	800f714 <tcp_receive+0x89c>
 800f6f6:	2301      	movs	r3, #1
 800f6f8:	e00d      	b.n	800f716 <tcp_receive+0x89e>
 800f6fa:	bf00      	nop
 800f6fc:	200040c0 	.word	0x200040c0
 800f700:	200040a0 	.word	0x200040a0
 800f704:	200040ca 	.word	0x200040ca
 800f708:	08017cf8 	.word	0x08017cf8
 800f70c:	080180a0 	.word	0x080180a0
 800f710:	08017d44 	.word	0x08017d44
 800f714:	2300      	movs	r3, #0
 800f716:	4423      	add	r3, r4
 800f718:	b29a      	uxth	r2, r3
 800f71a:	4b98      	ldr	r3, [pc, #608]	; (800f97c <tcp_receive+0xb04>)
 800f71c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f71e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f720:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800f728:	6938      	ldr	r0, [r7, #16]
 800f72a:	f7fd fc84 	bl	800d036 <tcp_seg_free>
            while (next &&
 800f72e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f730:	2b00      	cmp	r3, #0
 800f732:	d00e      	beq.n	800f752 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f734:	4b91      	ldr	r3, [pc, #580]	; (800f97c <tcp_receive+0xb04>)
 800f736:	881b      	ldrh	r3, [r3, #0]
 800f738:	461a      	mov	r2, r3
 800f73a:	4b91      	ldr	r3, [pc, #580]	; (800f980 <tcp_receive+0xb08>)
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	441a      	add	r2, r3
 800f740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f742:	68db      	ldr	r3, [r3, #12]
 800f744:	685b      	ldr	r3, [r3, #4]
 800f746:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f748:	8909      	ldrh	r1, [r1, #8]
 800f74a:	440b      	add	r3, r1
 800f74c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f74e:	2b00      	cmp	r3, #0
 800f750:	da9a      	bge.n	800f688 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f754:	2b00      	cmp	r3, #0
 800f756:	d059      	beq.n	800f80c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800f758:	4b88      	ldr	r3, [pc, #544]	; (800f97c <tcp_receive+0xb04>)
 800f75a:	881b      	ldrh	r3, [r3, #0]
 800f75c:	461a      	mov	r2, r3
 800f75e:	4b88      	ldr	r3, [pc, #544]	; (800f980 <tcp_receive+0xb08>)
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	441a      	add	r2, r3
 800f764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f766:	68db      	ldr	r3, [r3, #12]
 800f768:	685b      	ldr	r3, [r3, #4]
 800f76a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	dd4d      	ble.n	800f80c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f772:	68db      	ldr	r3, [r3, #12]
 800f774:	685b      	ldr	r3, [r3, #4]
 800f776:	b29a      	uxth	r2, r3
 800f778:	4b81      	ldr	r3, [pc, #516]	; (800f980 <tcp_receive+0xb08>)
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	b29b      	uxth	r3, r3
 800f77e:	1ad3      	subs	r3, r2, r3
 800f780:	b29a      	uxth	r2, r3
 800f782:	4b80      	ldr	r3, [pc, #512]	; (800f984 <tcp_receive+0xb0c>)
 800f784:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f786:	4b7f      	ldr	r3, [pc, #508]	; (800f984 <tcp_receive+0xb0c>)
 800f788:	68db      	ldr	r3, [r3, #12]
 800f78a:	899b      	ldrh	r3, [r3, #12]
 800f78c:	b29b      	uxth	r3, r3
 800f78e:	4618      	mov	r0, r3
 800f790:	f7fa fba4 	bl	8009edc <lwip_htons>
 800f794:	4603      	mov	r3, r0
 800f796:	b2db      	uxtb	r3, r3
 800f798:	f003 0302 	and.w	r3, r3, #2
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d005      	beq.n	800f7ac <tcp_receive+0x934>
                inseg.len -= 1;
 800f7a0:	4b78      	ldr	r3, [pc, #480]	; (800f984 <tcp_receive+0xb0c>)
 800f7a2:	891b      	ldrh	r3, [r3, #8]
 800f7a4:	3b01      	subs	r3, #1
 800f7a6:	b29a      	uxth	r2, r3
 800f7a8:	4b76      	ldr	r3, [pc, #472]	; (800f984 <tcp_receive+0xb0c>)
 800f7aa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f7ac:	4b75      	ldr	r3, [pc, #468]	; (800f984 <tcp_receive+0xb0c>)
 800f7ae:	685b      	ldr	r3, [r3, #4]
 800f7b0:	4a74      	ldr	r2, [pc, #464]	; (800f984 <tcp_receive+0xb0c>)
 800f7b2:	8912      	ldrh	r2, [r2, #8]
 800f7b4:	4611      	mov	r1, r2
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	f7fb fdde 	bl	800b378 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f7bc:	4b71      	ldr	r3, [pc, #452]	; (800f984 <tcp_receive+0xb0c>)
 800f7be:	891c      	ldrh	r4, [r3, #8]
 800f7c0:	4b70      	ldr	r3, [pc, #448]	; (800f984 <tcp_receive+0xb0c>)
 800f7c2:	68db      	ldr	r3, [r3, #12]
 800f7c4:	899b      	ldrh	r3, [r3, #12]
 800f7c6:	b29b      	uxth	r3, r3
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	f7fa fb87 	bl	8009edc <lwip_htons>
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	b2db      	uxtb	r3, r3
 800f7d2:	f003 0303 	and.w	r3, r3, #3
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d001      	beq.n	800f7de <tcp_receive+0x966>
 800f7da:	2301      	movs	r3, #1
 800f7dc:	e000      	b.n	800f7e0 <tcp_receive+0x968>
 800f7de:	2300      	movs	r3, #0
 800f7e0:	4423      	add	r3, r4
 800f7e2:	b29a      	uxth	r2, r3
 800f7e4:	4b65      	ldr	r3, [pc, #404]	; (800f97c <tcp_receive+0xb04>)
 800f7e6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f7e8:	4b64      	ldr	r3, [pc, #400]	; (800f97c <tcp_receive+0xb04>)
 800f7ea:	881b      	ldrh	r3, [r3, #0]
 800f7ec:	461a      	mov	r2, r3
 800f7ee:	4b64      	ldr	r3, [pc, #400]	; (800f980 <tcp_receive+0xb08>)
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	441a      	add	r2, r3
 800f7f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7f6:	68db      	ldr	r3, [r3, #12]
 800f7f8:	685b      	ldr	r3, [r3, #4]
 800f7fa:	429a      	cmp	r2, r3
 800f7fc:	d006      	beq.n	800f80c <tcp_receive+0x994>
 800f7fe:	4b62      	ldr	r3, [pc, #392]	; (800f988 <tcp_receive+0xb10>)
 800f800:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800f804:	4961      	ldr	r1, [pc, #388]	; (800f98c <tcp_receive+0xb14>)
 800f806:	4862      	ldr	r0, [pc, #392]	; (800f990 <tcp_receive+0xb18>)
 800f808:	f005 fb4c 	bl	8014ea4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f810:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f812:	4b5a      	ldr	r3, [pc, #360]	; (800f97c <tcp_receive+0xb04>)
 800f814:	881b      	ldrh	r3, [r3, #0]
 800f816:	461a      	mov	r2, r3
 800f818:	4b59      	ldr	r3, [pc, #356]	; (800f980 <tcp_receive+0xb08>)
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	441a      	add	r2, r3
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f826:	4b55      	ldr	r3, [pc, #340]	; (800f97c <tcp_receive+0xb04>)
 800f828:	881b      	ldrh	r3, [r3, #0]
 800f82a:	429a      	cmp	r2, r3
 800f82c:	d206      	bcs.n	800f83c <tcp_receive+0x9c4>
 800f82e:	4b56      	ldr	r3, [pc, #344]	; (800f988 <tcp_receive+0xb10>)
 800f830:	f240 6207 	movw	r2, #1543	; 0x607
 800f834:	4957      	ldr	r1, [pc, #348]	; (800f994 <tcp_receive+0xb1c>)
 800f836:	4856      	ldr	r0, [pc, #344]	; (800f990 <tcp_receive+0xb18>)
 800f838:	f005 fb34 	bl	8014ea4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f840:	4b4e      	ldr	r3, [pc, #312]	; (800f97c <tcp_receive+0xb04>)
 800f842:	881b      	ldrh	r3, [r3, #0]
 800f844:	1ad3      	subs	r3, r2, r3
 800f846:	b29a      	uxth	r2, r3
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f84c:	6878      	ldr	r0, [r7, #4]
 800f84e:	f7fc fdb5 	bl	800c3bc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f852:	4b4c      	ldr	r3, [pc, #304]	; (800f984 <tcp_receive+0xb0c>)
 800f854:	685b      	ldr	r3, [r3, #4]
 800f856:	891b      	ldrh	r3, [r3, #8]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d006      	beq.n	800f86a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800f85c:	4b49      	ldr	r3, [pc, #292]	; (800f984 <tcp_receive+0xb0c>)
 800f85e:	685b      	ldr	r3, [r3, #4]
 800f860:	4a4d      	ldr	r2, [pc, #308]	; (800f998 <tcp_receive+0xb20>)
 800f862:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f864:	4b47      	ldr	r3, [pc, #284]	; (800f984 <tcp_receive+0xb0c>)
 800f866:	2200      	movs	r2, #0
 800f868:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f86a:	4b46      	ldr	r3, [pc, #280]	; (800f984 <tcp_receive+0xb0c>)
 800f86c:	68db      	ldr	r3, [r3, #12]
 800f86e:	899b      	ldrh	r3, [r3, #12]
 800f870:	b29b      	uxth	r3, r3
 800f872:	4618      	mov	r0, r3
 800f874:	f7fa fb32 	bl	8009edc <lwip_htons>
 800f878:	4603      	mov	r3, r0
 800f87a:	b2db      	uxtb	r3, r3
 800f87c:	f003 0301 	and.w	r3, r3, #1
 800f880:	2b00      	cmp	r3, #0
 800f882:	f000 80b8 	beq.w	800f9f6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f886:	4b45      	ldr	r3, [pc, #276]	; (800f99c <tcp_receive+0xb24>)
 800f888:	781b      	ldrb	r3, [r3, #0]
 800f88a:	f043 0320 	orr.w	r3, r3, #32
 800f88e:	b2da      	uxtb	r2, r3
 800f890:	4b42      	ldr	r3, [pc, #264]	; (800f99c <tcp_receive+0xb24>)
 800f892:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f894:	e0af      	b.n	800f9f6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f89a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f8a0:	68db      	ldr	r3, [r3, #12]
 800f8a2:	685b      	ldr	r3, [r3, #4]
 800f8a4:	4a36      	ldr	r2, [pc, #216]	; (800f980 <tcp_receive+0xb08>)
 800f8a6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f8a8:	68bb      	ldr	r3, [r7, #8]
 800f8aa:	891b      	ldrh	r3, [r3, #8]
 800f8ac:	461c      	mov	r4, r3
 800f8ae:	68bb      	ldr	r3, [r7, #8]
 800f8b0:	68db      	ldr	r3, [r3, #12]
 800f8b2:	899b      	ldrh	r3, [r3, #12]
 800f8b4:	b29b      	uxth	r3, r3
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f7fa fb10 	bl	8009edc <lwip_htons>
 800f8bc:	4603      	mov	r3, r0
 800f8be:	b2db      	uxtb	r3, r3
 800f8c0:	f003 0303 	and.w	r3, r3, #3
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d001      	beq.n	800f8cc <tcp_receive+0xa54>
 800f8c8:	2301      	movs	r3, #1
 800f8ca:	e000      	b.n	800f8ce <tcp_receive+0xa56>
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	191a      	adds	r2, r3, r4
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8d4:	441a      	add	r2, r3
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f8de:	461c      	mov	r4, r3
 800f8e0:	68bb      	ldr	r3, [r7, #8]
 800f8e2:	891b      	ldrh	r3, [r3, #8]
 800f8e4:	461d      	mov	r5, r3
 800f8e6:	68bb      	ldr	r3, [r7, #8]
 800f8e8:	68db      	ldr	r3, [r3, #12]
 800f8ea:	899b      	ldrh	r3, [r3, #12]
 800f8ec:	b29b      	uxth	r3, r3
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	f7fa faf4 	bl	8009edc <lwip_htons>
 800f8f4:	4603      	mov	r3, r0
 800f8f6:	b2db      	uxtb	r3, r3
 800f8f8:	f003 0303 	and.w	r3, r3, #3
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d001      	beq.n	800f904 <tcp_receive+0xa8c>
 800f900:	2301      	movs	r3, #1
 800f902:	e000      	b.n	800f906 <tcp_receive+0xa8e>
 800f904:	2300      	movs	r3, #0
 800f906:	442b      	add	r3, r5
 800f908:	429c      	cmp	r4, r3
 800f90a:	d206      	bcs.n	800f91a <tcp_receive+0xaa2>
 800f90c:	4b1e      	ldr	r3, [pc, #120]	; (800f988 <tcp_receive+0xb10>)
 800f90e:	f240 622b 	movw	r2, #1579	; 0x62b
 800f912:	4923      	ldr	r1, [pc, #140]	; (800f9a0 <tcp_receive+0xb28>)
 800f914:	481e      	ldr	r0, [pc, #120]	; (800f990 <tcp_receive+0xb18>)
 800f916:	f005 fac5 	bl	8014ea4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f91a:	68bb      	ldr	r3, [r7, #8]
 800f91c:	891b      	ldrh	r3, [r3, #8]
 800f91e:	461c      	mov	r4, r3
 800f920:	68bb      	ldr	r3, [r7, #8]
 800f922:	68db      	ldr	r3, [r3, #12]
 800f924:	899b      	ldrh	r3, [r3, #12]
 800f926:	b29b      	uxth	r3, r3
 800f928:	4618      	mov	r0, r3
 800f92a:	f7fa fad7 	bl	8009edc <lwip_htons>
 800f92e:	4603      	mov	r3, r0
 800f930:	b2db      	uxtb	r3, r3
 800f932:	f003 0303 	and.w	r3, r3, #3
 800f936:	2b00      	cmp	r3, #0
 800f938:	d001      	beq.n	800f93e <tcp_receive+0xac6>
 800f93a:	2301      	movs	r3, #1
 800f93c:	e000      	b.n	800f940 <tcp_receive+0xac8>
 800f93e:	2300      	movs	r3, #0
 800f940:	1919      	adds	r1, r3, r4
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f946:	b28b      	uxth	r3, r1
 800f948:	1ad3      	subs	r3, r2, r3
 800f94a:	b29a      	uxth	r2, r3
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f950:	6878      	ldr	r0, [r7, #4]
 800f952:	f7fc fd33 	bl	800c3bc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f956:	68bb      	ldr	r3, [r7, #8]
 800f958:	685b      	ldr	r3, [r3, #4]
 800f95a:	891b      	ldrh	r3, [r3, #8]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d028      	beq.n	800f9b2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f960:	4b0d      	ldr	r3, [pc, #52]	; (800f998 <tcp_receive+0xb20>)
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d01d      	beq.n	800f9a4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800f968:	4b0b      	ldr	r3, [pc, #44]	; (800f998 <tcp_receive+0xb20>)
 800f96a:	681a      	ldr	r2, [r3, #0]
 800f96c:	68bb      	ldr	r3, [r7, #8]
 800f96e:	685b      	ldr	r3, [r3, #4]
 800f970:	4619      	mov	r1, r3
 800f972:	4610      	mov	r0, r2
 800f974:	f7fb ff54 	bl	800b820 <pbuf_cat>
 800f978:	e018      	b.n	800f9ac <tcp_receive+0xb34>
 800f97a:	bf00      	nop
 800f97c:	200040ca 	.word	0x200040ca
 800f980:	200040c0 	.word	0x200040c0
 800f984:	200040a0 	.word	0x200040a0
 800f988:	08017cf8 	.word	0x08017cf8
 800f98c:	080180d8 	.word	0x080180d8
 800f990:	08017d44 	.word	0x08017d44
 800f994:	08018114 	.word	0x08018114
 800f998:	200040d0 	.word	0x200040d0
 800f99c:	200040cd 	.word	0x200040cd
 800f9a0:	08018134 	.word	0x08018134
            } else {
              recv_data = cseg->p;
 800f9a4:	68bb      	ldr	r3, [r7, #8]
 800f9a6:	685b      	ldr	r3, [r3, #4]
 800f9a8:	4a70      	ldr	r2, [pc, #448]	; (800fb6c <tcp_receive+0xcf4>)
 800f9aa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f9ac:	68bb      	ldr	r3, [r7, #8]
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f9b2:	68bb      	ldr	r3, [r7, #8]
 800f9b4:	68db      	ldr	r3, [r3, #12]
 800f9b6:	899b      	ldrh	r3, [r3, #12]
 800f9b8:	b29b      	uxth	r3, r3
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	f7fa fa8e 	bl	8009edc <lwip_htons>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	b2db      	uxtb	r3, r3
 800f9c4:	f003 0301 	and.w	r3, r3, #1
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d00d      	beq.n	800f9e8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f9cc:	4b68      	ldr	r3, [pc, #416]	; (800fb70 <tcp_receive+0xcf8>)
 800f9ce:	781b      	ldrb	r3, [r3, #0]
 800f9d0:	f043 0320 	orr.w	r3, r3, #32
 800f9d4:	b2da      	uxtb	r2, r3
 800f9d6:	4b66      	ldr	r3, [pc, #408]	; (800fb70 <tcp_receive+0xcf8>)
 800f9d8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	7d1b      	ldrb	r3, [r3, #20]
 800f9de:	2b04      	cmp	r3, #4
 800f9e0:	d102      	bne.n	800f9e8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	2207      	movs	r2, #7
 800f9e6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f9e8:	68bb      	ldr	r3, [r7, #8]
 800f9ea:	681a      	ldr	r2, [r3, #0]
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800f9f0:	68b8      	ldr	r0, [r7, #8]
 800f9f2:	f7fd fb20 	bl	800d036 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d008      	beq.n	800fa10 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa02:	68db      	ldr	r3, [r3, #12]
 800fa04:	685a      	ldr	r2, [r3, #4]
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800fa0a:	429a      	cmp	r2, r3
 800fa0c:	f43f af43 	beq.w	800f896 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	8b5b      	ldrh	r3, [r3, #26]
 800fa14:	f003 0301 	and.w	r3, r3, #1
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d00e      	beq.n	800fa3a <tcp_receive+0xbc2>
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	8b5b      	ldrh	r3, [r3, #26]
 800fa20:	f023 0301 	bic.w	r3, r3, #1
 800fa24:	b29a      	uxth	r2, r3
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	835a      	strh	r2, [r3, #26]
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	8b5b      	ldrh	r3, [r3, #26]
 800fa2e:	f043 0302 	orr.w	r3, r3, #2
 800fa32:	b29a      	uxth	r2, r3
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fa38:	e188      	b.n	800fd4c <tcp_receive+0xed4>
        tcp_ack(pcb);
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	8b5b      	ldrh	r3, [r3, #26]
 800fa3e:	f043 0301 	orr.w	r3, r3, #1
 800fa42:	b29a      	uxth	r2, r3
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fa48:	e180      	b.n	800fd4c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d106      	bne.n	800fa60 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800fa52:	4848      	ldr	r0, [pc, #288]	; (800fb74 <tcp_receive+0xcfc>)
 800fa54:	f7fd fb08 	bl	800d068 <tcp_seg_copy>
 800fa58:	4602      	mov	r2, r0
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	675a      	str	r2, [r3, #116]	; 0x74
 800fa5e:	e16d      	b.n	800fd3c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800fa60:	2300      	movs	r3, #0
 800fa62:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa68:	63bb      	str	r3, [r7, #56]	; 0x38
 800fa6a:	e157      	b.n	800fd1c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800fa6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa6e:	68db      	ldr	r3, [r3, #12]
 800fa70:	685a      	ldr	r2, [r3, #4]
 800fa72:	4b41      	ldr	r3, [pc, #260]	; (800fb78 <tcp_receive+0xd00>)
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	429a      	cmp	r2, r3
 800fa78:	d11d      	bne.n	800fab6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800fa7a:	4b3e      	ldr	r3, [pc, #248]	; (800fb74 <tcp_receive+0xcfc>)
 800fa7c:	891a      	ldrh	r2, [r3, #8]
 800fa7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa80:	891b      	ldrh	r3, [r3, #8]
 800fa82:	429a      	cmp	r2, r3
 800fa84:	f240 814f 	bls.w	800fd26 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fa88:	483a      	ldr	r0, [pc, #232]	; (800fb74 <tcp_receive+0xcfc>)
 800fa8a:	f7fd faed 	bl	800d068 <tcp_seg_copy>
 800fa8e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800fa90:	697b      	ldr	r3, [r7, #20]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	f000 8149 	beq.w	800fd2a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800fa98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d003      	beq.n	800faa6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800fa9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faa0:	697a      	ldr	r2, [r7, #20]
 800faa2:	601a      	str	r2, [r3, #0]
 800faa4:	e002      	b.n	800faac <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	697a      	ldr	r2, [r7, #20]
 800faaa:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800faac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800faae:	6978      	ldr	r0, [r7, #20]
 800fab0:	f7ff f8de 	bl	800ec70 <tcp_oos_insert_segment>
                }
                break;
 800fab4:	e139      	b.n	800fd2a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800fab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d117      	bne.n	800faec <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800fabc:	4b2e      	ldr	r3, [pc, #184]	; (800fb78 <tcp_receive+0xd00>)
 800fabe:	681a      	ldr	r2, [r3, #0]
 800fac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fac2:	68db      	ldr	r3, [r3, #12]
 800fac4:	685b      	ldr	r3, [r3, #4]
 800fac6:	1ad3      	subs	r3, r2, r3
 800fac8:	2b00      	cmp	r3, #0
 800faca:	da57      	bge.n	800fb7c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800facc:	4829      	ldr	r0, [pc, #164]	; (800fb74 <tcp_receive+0xcfc>)
 800face:	f7fd facb 	bl	800d068 <tcp_seg_copy>
 800fad2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800fad4:	69bb      	ldr	r3, [r7, #24]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	f000 8129 	beq.w	800fd2e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	69ba      	ldr	r2, [r7, #24]
 800fae0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800fae2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fae4:	69b8      	ldr	r0, [r7, #24]
 800fae6:	f7ff f8c3 	bl	800ec70 <tcp_oos_insert_segment>
                  }
                  break;
 800faea:	e120      	b.n	800fd2e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800faec:	4b22      	ldr	r3, [pc, #136]	; (800fb78 <tcp_receive+0xd00>)
 800faee:	681a      	ldr	r2, [r3, #0]
 800faf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faf2:	68db      	ldr	r3, [r3, #12]
 800faf4:	685b      	ldr	r3, [r3, #4]
 800faf6:	1ad3      	subs	r3, r2, r3
 800faf8:	3b01      	subs	r3, #1
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	db3e      	blt.n	800fb7c <tcp_receive+0xd04>
 800fafe:	4b1e      	ldr	r3, [pc, #120]	; (800fb78 <tcp_receive+0xd00>)
 800fb00:	681a      	ldr	r2, [r3, #0]
 800fb02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb04:	68db      	ldr	r3, [r3, #12]
 800fb06:	685b      	ldr	r3, [r3, #4]
 800fb08:	1ad3      	subs	r3, r2, r3
 800fb0a:	3301      	adds	r3, #1
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	dc35      	bgt.n	800fb7c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fb10:	4818      	ldr	r0, [pc, #96]	; (800fb74 <tcp_receive+0xcfc>)
 800fb12:	f7fd faa9 	bl	800d068 <tcp_seg_copy>
 800fb16:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800fb18:	69fb      	ldr	r3, [r7, #28]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	f000 8109 	beq.w	800fd32 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800fb20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb22:	68db      	ldr	r3, [r3, #12]
 800fb24:	685b      	ldr	r3, [r3, #4]
 800fb26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb28:	8912      	ldrh	r2, [r2, #8]
 800fb2a:	441a      	add	r2, r3
 800fb2c:	4b12      	ldr	r3, [pc, #72]	; (800fb78 <tcp_receive+0xd00>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	1ad3      	subs	r3, r2, r3
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	dd12      	ble.n	800fb5c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800fb36:	4b10      	ldr	r3, [pc, #64]	; (800fb78 <tcp_receive+0xd00>)
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	b29a      	uxth	r2, r3
 800fb3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb3e:	68db      	ldr	r3, [r3, #12]
 800fb40:	685b      	ldr	r3, [r3, #4]
 800fb42:	b29b      	uxth	r3, r3
 800fb44:	1ad3      	subs	r3, r2, r3
 800fb46:	b29a      	uxth	r2, r3
 800fb48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb4a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800fb4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb4e:	685a      	ldr	r2, [r3, #4]
 800fb50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb52:	891b      	ldrh	r3, [r3, #8]
 800fb54:	4619      	mov	r1, r3
 800fb56:	4610      	mov	r0, r2
 800fb58:	f7fb fc0e 	bl	800b378 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800fb5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb5e:	69fa      	ldr	r2, [r7, #28]
 800fb60:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800fb62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fb64:	69f8      	ldr	r0, [r7, #28]
 800fb66:	f7ff f883 	bl	800ec70 <tcp_oos_insert_segment>
                  }
                  break;
 800fb6a:	e0e2      	b.n	800fd32 <tcp_receive+0xeba>
 800fb6c:	200040d0 	.word	0x200040d0
 800fb70:	200040cd 	.word	0x200040cd
 800fb74:	200040a0 	.word	0x200040a0
 800fb78:	200040c0 	.word	0x200040c0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800fb7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb7e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800fb80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	f040 80c6 	bne.w	800fd16 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800fb8a:	4b80      	ldr	r3, [pc, #512]	; (800fd8c <tcp_receive+0xf14>)
 800fb8c:	681a      	ldr	r2, [r3, #0]
 800fb8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb90:	68db      	ldr	r3, [r3, #12]
 800fb92:	685b      	ldr	r3, [r3, #4]
 800fb94:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	f340 80bd 	ble.w	800fd16 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb9e:	68db      	ldr	r3, [r3, #12]
 800fba0:	899b      	ldrh	r3, [r3, #12]
 800fba2:	b29b      	uxth	r3, r3
 800fba4:	4618      	mov	r0, r3
 800fba6:	f7fa f999 	bl	8009edc <lwip_htons>
 800fbaa:	4603      	mov	r3, r0
 800fbac:	b2db      	uxtb	r3, r3
 800fbae:	f003 0301 	and.w	r3, r3, #1
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	f040 80bf 	bne.w	800fd36 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800fbb8:	4875      	ldr	r0, [pc, #468]	; (800fd90 <tcp_receive+0xf18>)
 800fbba:	f7fd fa55 	bl	800d068 <tcp_seg_copy>
 800fbbe:	4602      	mov	r2, r0
 800fbc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbc2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800fbc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	f000 80b6 	beq.w	800fd3a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800fbce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbd0:	68db      	ldr	r3, [r3, #12]
 800fbd2:	685b      	ldr	r3, [r3, #4]
 800fbd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fbd6:	8912      	ldrh	r2, [r2, #8]
 800fbd8:	441a      	add	r2, r3
 800fbda:	4b6c      	ldr	r3, [pc, #432]	; (800fd8c <tcp_receive+0xf14>)
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	1ad3      	subs	r3, r2, r3
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	dd12      	ble.n	800fc0a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800fbe4:	4b69      	ldr	r3, [pc, #420]	; (800fd8c <tcp_receive+0xf14>)
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	b29a      	uxth	r2, r3
 800fbea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbec:	68db      	ldr	r3, [r3, #12]
 800fbee:	685b      	ldr	r3, [r3, #4]
 800fbf0:	b29b      	uxth	r3, r3
 800fbf2:	1ad3      	subs	r3, r2, r3
 800fbf4:	b29a      	uxth	r2, r3
 800fbf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbf8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800fbfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbfc:	685a      	ldr	r2, [r3, #4]
 800fbfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc00:	891b      	ldrh	r3, [r3, #8]
 800fc02:	4619      	mov	r1, r3
 800fc04:	4610      	mov	r0, r2
 800fc06:	f7fb fbb7 	bl	800b378 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800fc0a:	4b62      	ldr	r3, [pc, #392]	; (800fd94 <tcp_receive+0xf1c>)
 800fc0c:	881b      	ldrh	r3, [r3, #0]
 800fc0e:	461a      	mov	r2, r3
 800fc10:	4b5e      	ldr	r3, [pc, #376]	; (800fd8c <tcp_receive+0xf14>)
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	441a      	add	r2, r3
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc1a:	6879      	ldr	r1, [r7, #4]
 800fc1c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fc1e:	440b      	add	r3, r1
 800fc20:	1ad3      	subs	r3, r2, r3
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	f340 8089 	ble.w	800fd3a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800fc28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	68db      	ldr	r3, [r3, #12]
 800fc2e:	899b      	ldrh	r3, [r3, #12]
 800fc30:	b29b      	uxth	r3, r3
 800fc32:	4618      	mov	r0, r3
 800fc34:	f7fa f952 	bl	8009edc <lwip_htons>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	b2db      	uxtb	r3, r3
 800fc3c:	f003 0301 	and.w	r3, r3, #1
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d022      	beq.n	800fc8a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800fc44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	68db      	ldr	r3, [r3, #12]
 800fc4a:	899b      	ldrh	r3, [r3, #12]
 800fc4c:	b29b      	uxth	r3, r3
 800fc4e:	b21b      	sxth	r3, r3
 800fc50:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fc54:	b21c      	sxth	r4, r3
 800fc56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	68db      	ldr	r3, [r3, #12]
 800fc5c:	899b      	ldrh	r3, [r3, #12]
 800fc5e:	b29b      	uxth	r3, r3
 800fc60:	4618      	mov	r0, r3
 800fc62:	f7fa f93b 	bl	8009edc <lwip_htons>
 800fc66:	4603      	mov	r3, r0
 800fc68:	b2db      	uxtb	r3, r3
 800fc6a:	b29b      	uxth	r3, r3
 800fc6c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fc70:	b29b      	uxth	r3, r3
 800fc72:	4618      	mov	r0, r3
 800fc74:	f7fa f932 	bl	8009edc <lwip_htons>
 800fc78:	4603      	mov	r3, r0
 800fc7a:	b21b      	sxth	r3, r3
 800fc7c:	4323      	orrs	r3, r4
 800fc7e:	b21a      	sxth	r2, r3
 800fc80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	68db      	ldr	r3, [r3, #12]
 800fc86:	b292      	uxth	r2, r2
 800fc88:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc8e:	b29a      	uxth	r2, r3
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fc94:	4413      	add	r3, r2
 800fc96:	b299      	uxth	r1, r3
 800fc98:	4b3c      	ldr	r3, [pc, #240]	; (800fd8c <tcp_receive+0xf14>)
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	b29a      	uxth	r2, r3
 800fc9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	1a8a      	subs	r2, r1, r2
 800fca4:	b292      	uxth	r2, r2
 800fca6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800fca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	685a      	ldr	r2, [r3, #4]
 800fcae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	891b      	ldrh	r3, [r3, #8]
 800fcb4:	4619      	mov	r1, r3
 800fcb6:	4610      	mov	r0, r2
 800fcb8:	f7fb fb5e 	bl	800b378 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800fcbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	891c      	ldrh	r4, [r3, #8]
 800fcc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	68db      	ldr	r3, [r3, #12]
 800fcc8:	899b      	ldrh	r3, [r3, #12]
 800fcca:	b29b      	uxth	r3, r3
 800fccc:	4618      	mov	r0, r3
 800fcce:	f7fa f905 	bl	8009edc <lwip_htons>
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	b2db      	uxtb	r3, r3
 800fcd6:	f003 0303 	and.w	r3, r3, #3
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d001      	beq.n	800fce2 <tcp_receive+0xe6a>
 800fcde:	2301      	movs	r3, #1
 800fce0:	e000      	b.n	800fce4 <tcp_receive+0xe6c>
 800fce2:	2300      	movs	r3, #0
 800fce4:	4423      	add	r3, r4
 800fce6:	b29a      	uxth	r2, r3
 800fce8:	4b2a      	ldr	r3, [pc, #168]	; (800fd94 <tcp_receive+0xf1c>)
 800fcea:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fcec:	4b29      	ldr	r3, [pc, #164]	; (800fd94 <tcp_receive+0xf1c>)
 800fcee:	881b      	ldrh	r3, [r3, #0]
 800fcf0:	461a      	mov	r2, r3
 800fcf2:	4b26      	ldr	r3, [pc, #152]	; (800fd8c <tcp_receive+0xf14>)
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	441a      	add	r2, r3
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcfc:	6879      	ldr	r1, [r7, #4]
 800fcfe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fd00:	440b      	add	r3, r1
 800fd02:	429a      	cmp	r2, r3
 800fd04:	d019      	beq.n	800fd3a <tcp_receive+0xec2>
 800fd06:	4b24      	ldr	r3, [pc, #144]	; (800fd98 <tcp_receive+0xf20>)
 800fd08:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800fd0c:	4923      	ldr	r1, [pc, #140]	; (800fd9c <tcp_receive+0xf24>)
 800fd0e:	4824      	ldr	r0, [pc, #144]	; (800fda0 <tcp_receive+0xf28>)
 800fd10:	f005 f8c8 	bl	8014ea4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800fd14:	e011      	b.n	800fd3a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fd16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	63bb      	str	r3, [r7, #56]	; 0x38
 800fd1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	f47f aea4 	bne.w	800fa6c <tcp_receive+0xbf4>
 800fd24:	e00a      	b.n	800fd3c <tcp_receive+0xec4>
                break;
 800fd26:	bf00      	nop
 800fd28:	e008      	b.n	800fd3c <tcp_receive+0xec4>
                break;
 800fd2a:	bf00      	nop
 800fd2c:	e006      	b.n	800fd3c <tcp_receive+0xec4>
                  break;
 800fd2e:	bf00      	nop
 800fd30:	e004      	b.n	800fd3c <tcp_receive+0xec4>
                  break;
 800fd32:	bf00      	nop
 800fd34:	e002      	b.n	800fd3c <tcp_receive+0xec4>
                  break;
 800fd36:	bf00      	nop
 800fd38:	e000      	b.n	800fd3c <tcp_receive+0xec4>
                break;
 800fd3a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800fd3c:	6878      	ldr	r0, [r7, #4]
 800fd3e:	f001 fe8b 	bl	8011a58 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800fd42:	e003      	b.n	800fd4c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800fd44:	6878      	ldr	r0, [r7, #4]
 800fd46:	f001 fe87 	bl	8011a58 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fd4a:	e01a      	b.n	800fd82 <tcp_receive+0xf0a>
 800fd4c:	e019      	b.n	800fd82 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800fd4e:	4b0f      	ldr	r3, [pc, #60]	; (800fd8c <tcp_receive+0xf14>)
 800fd50:	681a      	ldr	r2, [r3, #0]
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd56:	1ad3      	subs	r3, r2, r3
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	db0a      	blt.n	800fd72 <tcp_receive+0xefa>
 800fd5c:	4b0b      	ldr	r3, [pc, #44]	; (800fd8c <tcp_receive+0xf14>)
 800fd5e:	681a      	ldr	r2, [r3, #0]
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd64:	6879      	ldr	r1, [r7, #4]
 800fd66:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fd68:	440b      	add	r3, r1
 800fd6a:	1ad3      	subs	r3, r2, r3
 800fd6c:	3301      	adds	r3, #1
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	dd07      	ble.n	800fd82 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	8b5b      	ldrh	r3, [r3, #26]
 800fd76:	f043 0302 	orr.w	r3, r3, #2
 800fd7a:	b29a      	uxth	r2, r3
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800fd80:	e7ff      	b.n	800fd82 <tcp_receive+0xf0a>
 800fd82:	bf00      	nop
 800fd84:	3750      	adds	r7, #80	; 0x50
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bdb0      	pop	{r4, r5, r7, pc}
 800fd8a:	bf00      	nop
 800fd8c:	200040c0 	.word	0x200040c0
 800fd90:	200040a0 	.word	0x200040a0
 800fd94:	200040ca 	.word	0x200040ca
 800fd98:	08017cf8 	.word	0x08017cf8
 800fd9c:	080180a0 	.word	0x080180a0
 800fda0:	08017d44 	.word	0x08017d44

0800fda4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800fda4:	b480      	push	{r7}
 800fda6:	b083      	sub	sp, #12
 800fda8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800fdaa:	4b15      	ldr	r3, [pc, #84]	; (800fe00 <tcp_get_next_optbyte+0x5c>)
 800fdac:	881b      	ldrh	r3, [r3, #0]
 800fdae:	1c5a      	adds	r2, r3, #1
 800fdb0:	b291      	uxth	r1, r2
 800fdb2:	4a13      	ldr	r2, [pc, #76]	; (800fe00 <tcp_get_next_optbyte+0x5c>)
 800fdb4:	8011      	strh	r1, [r2, #0]
 800fdb6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fdb8:	4b12      	ldr	r3, [pc, #72]	; (800fe04 <tcp_get_next_optbyte+0x60>)
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d004      	beq.n	800fdca <tcp_get_next_optbyte+0x26>
 800fdc0:	4b11      	ldr	r3, [pc, #68]	; (800fe08 <tcp_get_next_optbyte+0x64>)
 800fdc2:	881b      	ldrh	r3, [r3, #0]
 800fdc4:	88fa      	ldrh	r2, [r7, #6]
 800fdc6:	429a      	cmp	r2, r3
 800fdc8:	d208      	bcs.n	800fddc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800fdca:	4b10      	ldr	r3, [pc, #64]	; (800fe0c <tcp_get_next_optbyte+0x68>)
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	3314      	adds	r3, #20
 800fdd0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800fdd2:	88fb      	ldrh	r3, [r7, #6]
 800fdd4:	683a      	ldr	r2, [r7, #0]
 800fdd6:	4413      	add	r3, r2
 800fdd8:	781b      	ldrb	r3, [r3, #0]
 800fdda:	e00b      	b.n	800fdf4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800fddc:	88fb      	ldrh	r3, [r7, #6]
 800fdde:	b2da      	uxtb	r2, r3
 800fde0:	4b09      	ldr	r3, [pc, #36]	; (800fe08 <tcp_get_next_optbyte+0x64>)
 800fde2:	881b      	ldrh	r3, [r3, #0]
 800fde4:	b2db      	uxtb	r3, r3
 800fde6:	1ad3      	subs	r3, r2, r3
 800fde8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800fdea:	4b06      	ldr	r3, [pc, #24]	; (800fe04 <tcp_get_next_optbyte+0x60>)
 800fdec:	681a      	ldr	r2, [r3, #0]
 800fdee:	797b      	ldrb	r3, [r7, #5]
 800fdf0:	4413      	add	r3, r2
 800fdf2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	370c      	adds	r7, #12
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdfe:	4770      	bx	lr
 800fe00:	200040bc 	.word	0x200040bc
 800fe04:	200040b8 	.word	0x200040b8
 800fe08:	200040b6 	.word	0x200040b6
 800fe0c:	200040b0 	.word	0x200040b0

0800fe10 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b084      	sub	sp, #16
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d106      	bne.n	800fe2c <tcp_parseopt+0x1c>
 800fe1e:	4b32      	ldr	r3, [pc, #200]	; (800fee8 <tcp_parseopt+0xd8>)
 800fe20:	f240 727d 	movw	r2, #1917	; 0x77d
 800fe24:	4931      	ldr	r1, [pc, #196]	; (800feec <tcp_parseopt+0xdc>)
 800fe26:	4832      	ldr	r0, [pc, #200]	; (800fef0 <tcp_parseopt+0xe0>)
 800fe28:	f005 f83c 	bl	8014ea4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800fe2c:	4b31      	ldr	r3, [pc, #196]	; (800fef4 <tcp_parseopt+0xe4>)
 800fe2e:	881b      	ldrh	r3, [r3, #0]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d055      	beq.n	800fee0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fe34:	4b30      	ldr	r3, [pc, #192]	; (800fef8 <tcp_parseopt+0xe8>)
 800fe36:	2200      	movs	r2, #0
 800fe38:	801a      	strh	r2, [r3, #0]
 800fe3a:	e045      	b.n	800fec8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800fe3c:	f7ff ffb2 	bl	800fda4 <tcp_get_next_optbyte>
 800fe40:	4603      	mov	r3, r0
 800fe42:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800fe44:	7bfb      	ldrb	r3, [r7, #15]
 800fe46:	2b02      	cmp	r3, #2
 800fe48:	d006      	beq.n	800fe58 <tcp_parseopt+0x48>
 800fe4a:	2b02      	cmp	r3, #2
 800fe4c:	dc2b      	bgt.n	800fea6 <tcp_parseopt+0x96>
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d041      	beq.n	800fed6 <tcp_parseopt+0xc6>
 800fe52:	2b01      	cmp	r3, #1
 800fe54:	d127      	bne.n	800fea6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800fe56:	e037      	b.n	800fec8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800fe58:	f7ff ffa4 	bl	800fda4 <tcp_get_next_optbyte>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	2b04      	cmp	r3, #4
 800fe60:	d13b      	bne.n	800feda <tcp_parseopt+0xca>
 800fe62:	4b25      	ldr	r3, [pc, #148]	; (800fef8 <tcp_parseopt+0xe8>)
 800fe64:	881b      	ldrh	r3, [r3, #0]
 800fe66:	3301      	adds	r3, #1
 800fe68:	4a22      	ldr	r2, [pc, #136]	; (800fef4 <tcp_parseopt+0xe4>)
 800fe6a:	8812      	ldrh	r2, [r2, #0]
 800fe6c:	4293      	cmp	r3, r2
 800fe6e:	da34      	bge.n	800feda <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800fe70:	f7ff ff98 	bl	800fda4 <tcp_get_next_optbyte>
 800fe74:	4603      	mov	r3, r0
 800fe76:	b29b      	uxth	r3, r3
 800fe78:	021b      	lsls	r3, r3, #8
 800fe7a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800fe7c:	f7ff ff92 	bl	800fda4 <tcp_get_next_optbyte>
 800fe80:	4603      	mov	r3, r0
 800fe82:	b29a      	uxth	r2, r3
 800fe84:	89bb      	ldrh	r3, [r7, #12]
 800fe86:	4313      	orrs	r3, r2
 800fe88:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800fe8a:	89bb      	ldrh	r3, [r7, #12]
 800fe8c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800fe90:	d804      	bhi.n	800fe9c <tcp_parseopt+0x8c>
 800fe92:	89bb      	ldrh	r3, [r7, #12]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d001      	beq.n	800fe9c <tcp_parseopt+0x8c>
 800fe98:	89ba      	ldrh	r2, [r7, #12]
 800fe9a:	e001      	b.n	800fea0 <tcp_parseopt+0x90>
 800fe9c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800fea4:	e010      	b.n	800fec8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800fea6:	f7ff ff7d 	bl	800fda4 <tcp_get_next_optbyte>
 800feaa:	4603      	mov	r3, r0
 800feac:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800feae:	7afb      	ldrb	r3, [r7, #11]
 800feb0:	2b01      	cmp	r3, #1
 800feb2:	d914      	bls.n	800fede <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800feb4:	7afb      	ldrb	r3, [r7, #11]
 800feb6:	b29a      	uxth	r2, r3
 800feb8:	4b0f      	ldr	r3, [pc, #60]	; (800fef8 <tcp_parseopt+0xe8>)
 800feba:	881b      	ldrh	r3, [r3, #0]
 800febc:	4413      	add	r3, r2
 800febe:	b29b      	uxth	r3, r3
 800fec0:	3b02      	subs	r3, #2
 800fec2:	b29a      	uxth	r2, r3
 800fec4:	4b0c      	ldr	r3, [pc, #48]	; (800fef8 <tcp_parseopt+0xe8>)
 800fec6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fec8:	4b0b      	ldr	r3, [pc, #44]	; (800fef8 <tcp_parseopt+0xe8>)
 800feca:	881a      	ldrh	r2, [r3, #0]
 800fecc:	4b09      	ldr	r3, [pc, #36]	; (800fef4 <tcp_parseopt+0xe4>)
 800fece:	881b      	ldrh	r3, [r3, #0]
 800fed0:	429a      	cmp	r2, r3
 800fed2:	d3b3      	bcc.n	800fe3c <tcp_parseopt+0x2c>
 800fed4:	e004      	b.n	800fee0 <tcp_parseopt+0xd0>
          return;
 800fed6:	bf00      	nop
 800fed8:	e002      	b.n	800fee0 <tcp_parseopt+0xd0>
            return;
 800feda:	bf00      	nop
 800fedc:	e000      	b.n	800fee0 <tcp_parseopt+0xd0>
            return;
 800fede:	bf00      	nop
      }
    }
  }
}
 800fee0:	3710      	adds	r7, #16
 800fee2:	46bd      	mov	sp, r7
 800fee4:	bd80      	pop	{r7, pc}
 800fee6:	bf00      	nop
 800fee8:	08017cf8 	.word	0x08017cf8
 800feec:	0801815c 	.word	0x0801815c
 800fef0:	08017d44 	.word	0x08017d44
 800fef4:	200040b4 	.word	0x200040b4
 800fef8:	200040bc 	.word	0x200040bc

0800fefc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800fefc:	b480      	push	{r7}
 800fefe:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800ff00:	4b05      	ldr	r3, [pc, #20]	; (800ff18 <tcp_trigger_input_pcb_close+0x1c>)
 800ff02:	781b      	ldrb	r3, [r3, #0]
 800ff04:	f043 0310 	orr.w	r3, r3, #16
 800ff08:	b2da      	uxtb	r2, r3
 800ff0a:	4b03      	ldr	r3, [pc, #12]	; (800ff18 <tcp_trigger_input_pcb_close+0x1c>)
 800ff0c:	701a      	strb	r2, [r3, #0]
}
 800ff0e:	bf00      	nop
 800ff10:	46bd      	mov	sp, r7
 800ff12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff16:	4770      	bx	lr
 800ff18:	200040cd 	.word	0x200040cd

0800ff1c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	b084      	sub	sp, #16
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	60f8      	str	r0, [r7, #12]
 800ff24:	60b9      	str	r1, [r7, #8]
 800ff26:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d00a      	beq.n	800ff44 <tcp_route+0x28>
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	7a1b      	ldrb	r3, [r3, #8]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d006      	beq.n	800ff44 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	7a1b      	ldrb	r3, [r3, #8]
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f7fb f814 	bl	800af68 <netif_get_by_index>
 800ff40:	4603      	mov	r3, r0
 800ff42:	e003      	b.n	800ff4c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800ff44:	6878      	ldr	r0, [r7, #4]
 800ff46:	f003 fb3f 	bl	80135c8 <ip4_route>
 800ff4a:	4603      	mov	r3, r0
  }
}
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	3710      	adds	r7, #16
 800ff50:	46bd      	mov	sp, r7
 800ff52:	bd80      	pop	{r7, pc}

0800ff54 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800ff54:	b590      	push	{r4, r7, lr}
 800ff56:	b087      	sub	sp, #28
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	60f8      	str	r0, [r7, #12]
 800ff5c:	60b9      	str	r1, [r7, #8]
 800ff5e:	603b      	str	r3, [r7, #0]
 800ff60:	4613      	mov	r3, r2
 800ff62:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d105      	bne.n	800ff76 <tcp_create_segment+0x22>
 800ff6a:	4b44      	ldr	r3, [pc, #272]	; (801007c <tcp_create_segment+0x128>)
 800ff6c:	22a3      	movs	r2, #163	; 0xa3
 800ff6e:	4944      	ldr	r1, [pc, #272]	; (8010080 <tcp_create_segment+0x12c>)
 800ff70:	4844      	ldr	r0, [pc, #272]	; (8010084 <tcp_create_segment+0x130>)
 800ff72:	f004 ff97 	bl	8014ea4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ff76:	68bb      	ldr	r3, [r7, #8]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d105      	bne.n	800ff88 <tcp_create_segment+0x34>
 800ff7c:	4b3f      	ldr	r3, [pc, #252]	; (801007c <tcp_create_segment+0x128>)
 800ff7e:	22a4      	movs	r2, #164	; 0xa4
 800ff80:	4941      	ldr	r1, [pc, #260]	; (8010088 <tcp_create_segment+0x134>)
 800ff82:	4840      	ldr	r0, [pc, #256]	; (8010084 <tcp_create_segment+0x130>)
 800ff84:	f004 ff8e 	bl	8014ea4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ff88:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ff8c:	009b      	lsls	r3, r3, #2
 800ff8e:	b2db      	uxtb	r3, r3
 800ff90:	f003 0304 	and.w	r3, r3, #4
 800ff94:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ff96:	2003      	movs	r0, #3
 800ff98:	f7fa fc7e 	bl	800a898 <memp_malloc>
 800ff9c:	6138      	str	r0, [r7, #16]
 800ff9e:	693b      	ldr	r3, [r7, #16]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d104      	bne.n	800ffae <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800ffa4:	68b8      	ldr	r0, [r7, #8]
 800ffa6:	f7fb fb6d 	bl	800b684 <pbuf_free>
    return NULL;
 800ffaa:	2300      	movs	r3, #0
 800ffac:	e061      	b.n	8010072 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800ffae:	693b      	ldr	r3, [r7, #16]
 800ffb0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ffb4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800ffb6:	693b      	ldr	r3, [r7, #16]
 800ffb8:	2200      	movs	r2, #0
 800ffba:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800ffbc:	693b      	ldr	r3, [r7, #16]
 800ffbe:	68ba      	ldr	r2, [r7, #8]
 800ffc0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ffc2:	68bb      	ldr	r3, [r7, #8]
 800ffc4:	891a      	ldrh	r2, [r3, #8]
 800ffc6:	7dfb      	ldrb	r3, [r7, #23]
 800ffc8:	b29b      	uxth	r3, r3
 800ffca:	429a      	cmp	r2, r3
 800ffcc:	d205      	bcs.n	800ffda <tcp_create_segment+0x86>
 800ffce:	4b2b      	ldr	r3, [pc, #172]	; (801007c <tcp_create_segment+0x128>)
 800ffd0:	22b0      	movs	r2, #176	; 0xb0
 800ffd2:	492e      	ldr	r1, [pc, #184]	; (801008c <tcp_create_segment+0x138>)
 800ffd4:	482b      	ldr	r0, [pc, #172]	; (8010084 <tcp_create_segment+0x130>)
 800ffd6:	f004 ff65 	bl	8014ea4 <iprintf>
  seg->len = p->tot_len - optlen;
 800ffda:	68bb      	ldr	r3, [r7, #8]
 800ffdc:	891a      	ldrh	r2, [r3, #8]
 800ffde:	7dfb      	ldrb	r3, [r7, #23]
 800ffe0:	b29b      	uxth	r3, r3
 800ffe2:	1ad3      	subs	r3, r2, r3
 800ffe4:	b29a      	uxth	r2, r3
 800ffe6:	693b      	ldr	r3, [r7, #16]
 800ffe8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800ffea:	2114      	movs	r1, #20
 800ffec:	68b8      	ldr	r0, [r7, #8]
 800ffee:	f7fb fab3 	bl	800b558 <pbuf_add_header>
 800fff2:	4603      	mov	r3, r0
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d004      	beq.n	8010002 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800fff8:	6938      	ldr	r0, [r7, #16]
 800fffa:	f7fd f81c 	bl	800d036 <tcp_seg_free>
    return NULL;
 800fffe:	2300      	movs	r3, #0
 8010000:	e037      	b.n	8010072 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010002:	693b      	ldr	r3, [r7, #16]
 8010004:	685b      	ldr	r3, [r3, #4]
 8010006:	685a      	ldr	r2, [r3, #4]
 8010008:	693b      	ldr	r3, [r7, #16]
 801000a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	8ada      	ldrh	r2, [r3, #22]
 8010010:	693b      	ldr	r3, [r7, #16]
 8010012:	68dc      	ldr	r4, [r3, #12]
 8010014:	4610      	mov	r0, r2
 8010016:	f7f9 ff61 	bl	8009edc <lwip_htons>
 801001a:	4603      	mov	r3, r0
 801001c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	8b1a      	ldrh	r2, [r3, #24]
 8010022:	693b      	ldr	r3, [r7, #16]
 8010024:	68dc      	ldr	r4, [r3, #12]
 8010026:	4610      	mov	r0, r2
 8010028:	f7f9 ff58 	bl	8009edc <lwip_htons>
 801002c:	4603      	mov	r3, r0
 801002e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010030:	693b      	ldr	r3, [r7, #16]
 8010032:	68dc      	ldr	r4, [r3, #12]
 8010034:	6838      	ldr	r0, [r7, #0]
 8010036:	f7f9 ff66 	bl	8009f06 <lwip_htonl>
 801003a:	4603      	mov	r3, r0
 801003c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801003e:	7dfb      	ldrb	r3, [r7, #23]
 8010040:	089b      	lsrs	r3, r3, #2
 8010042:	b2db      	uxtb	r3, r3
 8010044:	b29b      	uxth	r3, r3
 8010046:	3305      	adds	r3, #5
 8010048:	b29b      	uxth	r3, r3
 801004a:	031b      	lsls	r3, r3, #12
 801004c:	b29a      	uxth	r2, r3
 801004e:	79fb      	ldrb	r3, [r7, #7]
 8010050:	b29b      	uxth	r3, r3
 8010052:	4313      	orrs	r3, r2
 8010054:	b29a      	uxth	r2, r3
 8010056:	693b      	ldr	r3, [r7, #16]
 8010058:	68dc      	ldr	r4, [r3, #12]
 801005a:	4610      	mov	r0, r2
 801005c:	f7f9 ff3e 	bl	8009edc <lwip_htons>
 8010060:	4603      	mov	r3, r0
 8010062:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010064:	693b      	ldr	r3, [r7, #16]
 8010066:	68db      	ldr	r3, [r3, #12]
 8010068:	2200      	movs	r2, #0
 801006a:	749a      	strb	r2, [r3, #18]
 801006c:	2200      	movs	r2, #0
 801006e:	74da      	strb	r2, [r3, #19]
  return seg;
 8010070:	693b      	ldr	r3, [r7, #16]
}
 8010072:	4618      	mov	r0, r3
 8010074:	371c      	adds	r7, #28
 8010076:	46bd      	mov	sp, r7
 8010078:	bd90      	pop	{r4, r7, pc}
 801007a:	bf00      	nop
 801007c:	08018178 	.word	0x08018178
 8010080:	080181ac 	.word	0x080181ac
 8010084:	080181cc 	.word	0x080181cc
 8010088:	080181f4 	.word	0x080181f4
 801008c:	08018218 	.word	0x08018218

08010090 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010090:	b580      	push	{r7, lr}
 8010092:	b086      	sub	sp, #24
 8010094:	af00      	add	r7, sp, #0
 8010096:	607b      	str	r3, [r7, #4]
 8010098:	4603      	mov	r3, r0
 801009a:	73fb      	strb	r3, [r7, #15]
 801009c:	460b      	mov	r3, r1
 801009e:	81bb      	strh	r3, [r7, #12]
 80100a0:	4613      	mov	r3, r2
 80100a2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80100a4:	89bb      	ldrh	r3, [r7, #12]
 80100a6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d105      	bne.n	80100ba <tcp_pbuf_prealloc+0x2a>
 80100ae:	4b30      	ldr	r3, [pc, #192]	; (8010170 <tcp_pbuf_prealloc+0xe0>)
 80100b0:	22e8      	movs	r2, #232	; 0xe8
 80100b2:	4930      	ldr	r1, [pc, #192]	; (8010174 <tcp_pbuf_prealloc+0xe4>)
 80100b4:	4830      	ldr	r0, [pc, #192]	; (8010178 <tcp_pbuf_prealloc+0xe8>)
 80100b6:	f004 fef5 	bl	8014ea4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80100ba:	6a3b      	ldr	r3, [r7, #32]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d105      	bne.n	80100cc <tcp_pbuf_prealloc+0x3c>
 80100c0:	4b2b      	ldr	r3, [pc, #172]	; (8010170 <tcp_pbuf_prealloc+0xe0>)
 80100c2:	22e9      	movs	r2, #233	; 0xe9
 80100c4:	492d      	ldr	r1, [pc, #180]	; (801017c <tcp_pbuf_prealloc+0xec>)
 80100c6:	482c      	ldr	r0, [pc, #176]	; (8010178 <tcp_pbuf_prealloc+0xe8>)
 80100c8:	f004 feec 	bl	8014ea4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80100cc:	89ba      	ldrh	r2, [r7, #12]
 80100ce:	897b      	ldrh	r3, [r7, #10]
 80100d0:	429a      	cmp	r2, r3
 80100d2:	d221      	bcs.n	8010118 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80100d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80100d8:	f003 0302 	and.w	r3, r3, #2
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d111      	bne.n	8010104 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80100e0:	6a3b      	ldr	r3, [r7, #32]
 80100e2:	8b5b      	ldrh	r3, [r3, #26]
 80100e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d115      	bne.n	8010118 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80100ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d007      	beq.n	8010104 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80100f4:	6a3b      	ldr	r3, [r7, #32]
 80100f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d103      	bne.n	8010104 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80100fc:	6a3b      	ldr	r3, [r7, #32]
 80100fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8010100:	2b00      	cmp	r3, #0
 8010102:	d009      	beq.n	8010118 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010104:	89bb      	ldrh	r3, [r7, #12]
 8010106:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801010a:	f023 0203 	bic.w	r2, r3, #3
 801010e:	897b      	ldrh	r3, [r7, #10]
 8010110:	4293      	cmp	r3, r2
 8010112:	bf28      	it	cs
 8010114:	4613      	movcs	r3, r2
 8010116:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010118:	8af9      	ldrh	r1, [r7, #22]
 801011a:	7bfb      	ldrb	r3, [r7, #15]
 801011c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010120:	4618      	mov	r0, r3
 8010122:	f7fa ffcb 	bl	800b0bc <pbuf_alloc>
 8010126:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010128:	693b      	ldr	r3, [r7, #16]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d101      	bne.n	8010132 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801012e:	2300      	movs	r3, #0
 8010130:	e019      	b.n	8010166 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8010132:	693b      	ldr	r3, [r7, #16]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d006      	beq.n	8010148 <tcp_pbuf_prealloc+0xb8>
 801013a:	4b0d      	ldr	r3, [pc, #52]	; (8010170 <tcp_pbuf_prealloc+0xe0>)
 801013c:	f240 120b 	movw	r2, #267	; 0x10b
 8010140:	490f      	ldr	r1, [pc, #60]	; (8010180 <tcp_pbuf_prealloc+0xf0>)
 8010142:	480d      	ldr	r0, [pc, #52]	; (8010178 <tcp_pbuf_prealloc+0xe8>)
 8010144:	f004 feae 	bl	8014ea4 <iprintf>
  *oversize = p->len - length;
 8010148:	693b      	ldr	r3, [r7, #16]
 801014a:	895a      	ldrh	r2, [r3, #10]
 801014c:	89bb      	ldrh	r3, [r7, #12]
 801014e:	1ad3      	subs	r3, r2, r3
 8010150:	b29a      	uxth	r2, r3
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8010156:	693b      	ldr	r3, [r7, #16]
 8010158:	89ba      	ldrh	r2, [r7, #12]
 801015a:	811a      	strh	r2, [r3, #8]
 801015c:	693b      	ldr	r3, [r7, #16]
 801015e:	891a      	ldrh	r2, [r3, #8]
 8010160:	693b      	ldr	r3, [r7, #16]
 8010162:	815a      	strh	r2, [r3, #10]
  return p;
 8010164:	693b      	ldr	r3, [r7, #16]
}
 8010166:	4618      	mov	r0, r3
 8010168:	3718      	adds	r7, #24
 801016a:	46bd      	mov	sp, r7
 801016c:	bd80      	pop	{r7, pc}
 801016e:	bf00      	nop
 8010170:	08018178 	.word	0x08018178
 8010174:	08018230 	.word	0x08018230
 8010178:	080181cc 	.word	0x080181cc
 801017c:	08018254 	.word	0x08018254
 8010180:	08018274 	.word	0x08018274

08010184 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8010184:	b580      	push	{r7, lr}
 8010186:	b082      	sub	sp, #8
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
 801018c:	460b      	mov	r3, r1
 801018e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d106      	bne.n	80101a4 <tcp_write_checks+0x20>
 8010196:	4b33      	ldr	r3, [pc, #204]	; (8010264 <tcp_write_checks+0xe0>)
 8010198:	f240 1233 	movw	r2, #307	; 0x133
 801019c:	4932      	ldr	r1, [pc, #200]	; (8010268 <tcp_write_checks+0xe4>)
 801019e:	4833      	ldr	r0, [pc, #204]	; (801026c <tcp_write_checks+0xe8>)
 80101a0:	f004 fe80 	bl	8014ea4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	7d1b      	ldrb	r3, [r3, #20]
 80101a8:	2b04      	cmp	r3, #4
 80101aa:	d00e      	beq.n	80101ca <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80101b0:	2b07      	cmp	r3, #7
 80101b2:	d00a      	beq.n	80101ca <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80101b8:	2b02      	cmp	r3, #2
 80101ba:	d006      	beq.n	80101ca <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80101c0:	2b03      	cmp	r3, #3
 80101c2:	d002      	beq.n	80101ca <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80101c4:	f06f 030a 	mvn.w	r3, #10
 80101c8:	e048      	b.n	801025c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80101ca:	887b      	ldrh	r3, [r7, #2]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d101      	bne.n	80101d4 <tcp_write_checks+0x50>
    return ERR_OK;
 80101d0:	2300      	movs	r3, #0
 80101d2:	e043      	b.n	801025c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80101da:	887a      	ldrh	r2, [r7, #2]
 80101dc:	429a      	cmp	r2, r3
 80101de:	d909      	bls.n	80101f4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	8b5b      	ldrh	r3, [r3, #26]
 80101e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101e8:	b29a      	uxth	r2, r3
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80101ee:	f04f 33ff 	mov.w	r3, #4294967295
 80101f2:	e033      	b.n	801025c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80101fa:	2b08      	cmp	r3, #8
 80101fc:	d909      	bls.n	8010212 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	8b5b      	ldrh	r3, [r3, #26]
 8010202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010206:	b29a      	uxth	r2, r3
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801020c:	f04f 33ff 	mov.w	r3, #4294967295
 8010210:	e024      	b.n	801025c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010218:	2b00      	cmp	r3, #0
 801021a:	d00f      	beq.n	801023c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010220:	2b00      	cmp	r3, #0
 8010222:	d11a      	bne.n	801025a <tcp_write_checks+0xd6>
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010228:	2b00      	cmp	r3, #0
 801022a:	d116      	bne.n	801025a <tcp_write_checks+0xd6>
 801022c:	4b0d      	ldr	r3, [pc, #52]	; (8010264 <tcp_write_checks+0xe0>)
 801022e:	f240 1255 	movw	r2, #341	; 0x155
 8010232:	490f      	ldr	r1, [pc, #60]	; (8010270 <tcp_write_checks+0xec>)
 8010234:	480d      	ldr	r0, [pc, #52]	; (801026c <tcp_write_checks+0xe8>)
 8010236:	f004 fe35 	bl	8014ea4 <iprintf>
 801023a:	e00e      	b.n	801025a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010240:	2b00      	cmp	r3, #0
 8010242:	d103      	bne.n	801024c <tcp_write_checks+0xc8>
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010248:	2b00      	cmp	r3, #0
 801024a:	d006      	beq.n	801025a <tcp_write_checks+0xd6>
 801024c:	4b05      	ldr	r3, [pc, #20]	; (8010264 <tcp_write_checks+0xe0>)
 801024e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8010252:	4908      	ldr	r1, [pc, #32]	; (8010274 <tcp_write_checks+0xf0>)
 8010254:	4805      	ldr	r0, [pc, #20]	; (801026c <tcp_write_checks+0xe8>)
 8010256:	f004 fe25 	bl	8014ea4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801025a:	2300      	movs	r3, #0
}
 801025c:	4618      	mov	r0, r3
 801025e:	3708      	adds	r7, #8
 8010260:	46bd      	mov	sp, r7
 8010262:	bd80      	pop	{r7, pc}
 8010264:	08018178 	.word	0x08018178
 8010268:	08018288 	.word	0x08018288
 801026c:	080181cc 	.word	0x080181cc
 8010270:	080182a8 	.word	0x080182a8
 8010274:	080182e4 	.word	0x080182e4

08010278 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8010278:	b590      	push	{r4, r7, lr}
 801027a:	b09b      	sub	sp, #108	; 0x6c
 801027c:	af04      	add	r7, sp, #16
 801027e:	60f8      	str	r0, [r7, #12]
 8010280:	60b9      	str	r1, [r7, #8]
 8010282:	4611      	mov	r1, r2
 8010284:	461a      	mov	r2, r3
 8010286:	460b      	mov	r3, r1
 8010288:	80fb      	strh	r3, [r7, #6]
 801028a:	4613      	mov	r3, r2
 801028c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801028e:	2300      	movs	r3, #0
 8010290:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8010292:	2300      	movs	r3, #0
 8010294:	653b      	str	r3, [r7, #80]	; 0x50
 8010296:	2300      	movs	r3, #0
 8010298:	64fb      	str	r3, [r7, #76]	; 0x4c
 801029a:	2300      	movs	r3, #0
 801029c:	64bb      	str	r3, [r7, #72]	; 0x48
 801029e:	2300      	movs	r3, #0
 80102a0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80102a2:	2300      	movs	r3, #0
 80102a4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80102a8:	2300      	movs	r3, #0
 80102aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80102ae:	2300      	movs	r3, #0
 80102b0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80102b2:	2300      	movs	r3, #0
 80102b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80102b6:	2300      	movs	r3, #0
 80102b8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d109      	bne.n	80102d4 <tcp_write+0x5c>
 80102c0:	4ba4      	ldr	r3, [pc, #656]	; (8010554 <tcp_write+0x2dc>)
 80102c2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80102c6:	49a4      	ldr	r1, [pc, #656]	; (8010558 <tcp_write+0x2e0>)
 80102c8:	48a4      	ldr	r0, [pc, #656]	; (801055c <tcp_write+0x2e4>)
 80102ca:	f004 fdeb 	bl	8014ea4 <iprintf>
 80102ce:	f06f 030f 	mvn.w	r3, #15
 80102d2:	e32a      	b.n	801092a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80102da:	085b      	lsrs	r3, r3, #1
 80102dc:	b29a      	uxth	r2, r3
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102e2:	4293      	cmp	r3, r2
 80102e4:	bf28      	it	cs
 80102e6:	4613      	movcs	r3, r2
 80102e8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80102ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d102      	bne.n	80102f6 <tcp_write+0x7e>
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102f4:	e000      	b.n	80102f8 <tcp_write+0x80>
 80102f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80102f8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80102fa:	68bb      	ldr	r3, [r7, #8]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d109      	bne.n	8010314 <tcp_write+0x9c>
 8010300:	4b94      	ldr	r3, [pc, #592]	; (8010554 <tcp_write+0x2dc>)
 8010302:	f240 12ad 	movw	r2, #429	; 0x1ad
 8010306:	4996      	ldr	r1, [pc, #600]	; (8010560 <tcp_write+0x2e8>)
 8010308:	4894      	ldr	r0, [pc, #592]	; (801055c <tcp_write+0x2e4>)
 801030a:	f004 fdcb 	bl	8014ea4 <iprintf>
 801030e:	f06f 030f 	mvn.w	r3, #15
 8010312:	e30a      	b.n	801092a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8010314:	88fb      	ldrh	r3, [r7, #6]
 8010316:	4619      	mov	r1, r3
 8010318:	68f8      	ldr	r0, [r7, #12]
 801031a:	f7ff ff33 	bl	8010184 <tcp_write_checks>
 801031e:	4603      	mov	r3, r0
 8010320:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8010324:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010328:	2b00      	cmp	r3, #0
 801032a:	d002      	beq.n	8010332 <tcp_write+0xba>
    return err;
 801032c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010330:	e2fb      	b.n	801092a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010338:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801033c:	2300      	movs	r3, #0
 801033e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010346:	2b00      	cmp	r3, #0
 8010348:	f000 80f6 	beq.w	8010538 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010350:	653b      	str	r3, [r7, #80]	; 0x50
 8010352:	e002      	b.n	801035a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8010354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801035a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d1f8      	bne.n	8010354 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8010362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010364:	7a9b      	ldrb	r3, [r3, #10]
 8010366:	009b      	lsls	r3, r3, #2
 8010368:	b29b      	uxth	r3, r3
 801036a:	f003 0304 	and.w	r3, r3, #4
 801036e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010370:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010374:	891b      	ldrh	r3, [r3, #8]
 8010376:	4619      	mov	r1, r3
 8010378:	8c3b      	ldrh	r3, [r7, #32]
 801037a:	440b      	add	r3, r1
 801037c:	429a      	cmp	r2, r3
 801037e:	da06      	bge.n	801038e <tcp_write+0x116>
 8010380:	4b74      	ldr	r3, [pc, #464]	; (8010554 <tcp_write+0x2dc>)
 8010382:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010386:	4977      	ldr	r1, [pc, #476]	; (8010564 <tcp_write+0x2ec>)
 8010388:	4874      	ldr	r0, [pc, #464]	; (801055c <tcp_write+0x2e4>)
 801038a:	f004 fd8b 	bl	8014ea4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801038e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010390:	891a      	ldrh	r2, [r3, #8]
 8010392:	8c3b      	ldrh	r3, [r7, #32]
 8010394:	4413      	add	r3, r2
 8010396:	b29b      	uxth	r3, r3
 8010398:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801039a:	1ad3      	subs	r3, r2, r3
 801039c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80103a4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80103a6:	8a7b      	ldrh	r3, [r7, #18]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d026      	beq.n	80103fa <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80103ac:	8a7b      	ldrh	r3, [r7, #18]
 80103ae:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80103b0:	429a      	cmp	r2, r3
 80103b2:	d206      	bcs.n	80103c2 <tcp_write+0x14a>
 80103b4:	4b67      	ldr	r3, [pc, #412]	; (8010554 <tcp_write+0x2dc>)
 80103b6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80103ba:	496b      	ldr	r1, [pc, #428]	; (8010568 <tcp_write+0x2f0>)
 80103bc:	4867      	ldr	r0, [pc, #412]	; (801055c <tcp_write+0x2e4>)
 80103be:	f004 fd71 	bl	8014ea4 <iprintf>
      seg = last_unsent;
 80103c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103c4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80103c6:	8a7b      	ldrh	r3, [r7, #18]
 80103c8:	88fa      	ldrh	r2, [r7, #6]
 80103ca:	4293      	cmp	r3, r2
 80103cc:	bf28      	it	cs
 80103ce:	4613      	movcs	r3, r2
 80103d0:	b29b      	uxth	r3, r3
 80103d2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80103d4:	4293      	cmp	r3, r2
 80103d6:	bf28      	it	cs
 80103d8:	4613      	movcs	r3, r2
 80103da:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80103dc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80103e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80103e2:	4413      	add	r3, r2
 80103e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80103e8:	8a7a      	ldrh	r2, [r7, #18]
 80103ea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80103ec:	1ad3      	subs	r3, r2, r3
 80103ee:	b29b      	uxth	r3, r3
 80103f0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80103f2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80103f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80103f6:	1ad3      	subs	r3, r2, r3
 80103f8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80103fa:	8a7b      	ldrh	r3, [r7, #18]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d00b      	beq.n	8010418 <tcp_write+0x1a0>
 8010400:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010404:	88fb      	ldrh	r3, [r7, #6]
 8010406:	429a      	cmp	r2, r3
 8010408:	d006      	beq.n	8010418 <tcp_write+0x1a0>
 801040a:	4b52      	ldr	r3, [pc, #328]	; (8010554 <tcp_write+0x2dc>)
 801040c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010410:	4956      	ldr	r1, [pc, #344]	; (801056c <tcp_write+0x2f4>)
 8010412:	4852      	ldr	r0, [pc, #328]	; (801055c <tcp_write+0x2e4>)
 8010414:	f004 fd46 	bl	8014ea4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010418:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801041c:	88fb      	ldrh	r3, [r7, #6]
 801041e:	429a      	cmp	r2, r3
 8010420:	f080 8167 	bcs.w	80106f2 <tcp_write+0x47a>
 8010424:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010426:	2b00      	cmp	r3, #0
 8010428:	f000 8163 	beq.w	80106f2 <tcp_write+0x47a>
 801042c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801042e:	891b      	ldrh	r3, [r3, #8]
 8010430:	2b00      	cmp	r3, #0
 8010432:	f000 815e 	beq.w	80106f2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8010436:	88fa      	ldrh	r2, [r7, #6]
 8010438:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801043c:	1ad2      	subs	r2, r2, r3
 801043e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010440:	4293      	cmp	r3, r2
 8010442:	bfa8      	it	ge
 8010444:	4613      	movge	r3, r2
 8010446:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8010448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801044a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801044c:	797b      	ldrb	r3, [r7, #5]
 801044e:	f003 0301 	and.w	r3, r3, #1
 8010452:	2b00      	cmp	r3, #0
 8010454:	d027      	beq.n	80104a6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8010456:	f107 0012 	add.w	r0, r7, #18
 801045a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801045c:	8bf9      	ldrh	r1, [r7, #30]
 801045e:	2301      	movs	r3, #1
 8010460:	9302      	str	r3, [sp, #8]
 8010462:	797b      	ldrb	r3, [r7, #5]
 8010464:	9301      	str	r3, [sp, #4]
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	9300      	str	r3, [sp, #0]
 801046a:	4603      	mov	r3, r0
 801046c:	2000      	movs	r0, #0
 801046e:	f7ff fe0f 	bl	8010090 <tcp_pbuf_prealloc>
 8010472:	6578      	str	r0, [r7, #84]	; 0x54
 8010474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010476:	2b00      	cmp	r3, #0
 8010478:	f000 8225 	beq.w	80108c6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801047c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801047e:	6858      	ldr	r0, [r3, #4]
 8010480:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010484:	68ba      	ldr	r2, [r7, #8]
 8010486:	4413      	add	r3, r2
 8010488:	8bfa      	ldrh	r2, [r7, #30]
 801048a:	4619      	mov	r1, r3
 801048c:	f004 fcf4 	bl	8014e78 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8010490:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010492:	f7fb f985 	bl	800b7a0 <pbuf_clen>
 8010496:	4603      	mov	r3, r0
 8010498:	461a      	mov	r2, r3
 801049a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801049e:	4413      	add	r3, r2
 80104a0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80104a4:	e041      	b.n	801052a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80104a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104a8:	685b      	ldr	r3, [r3, #4]
 80104aa:	637b      	str	r3, [r7, #52]	; 0x34
 80104ac:	e002      	b.n	80104b4 <tcp_write+0x23c>
 80104ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	637b      	str	r3, [r7, #52]	; 0x34
 80104b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d1f8      	bne.n	80104ae <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80104bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104be:	7b1b      	ldrb	r3, [r3, #12]
 80104c0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d115      	bne.n	80104f4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80104c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104ca:	685b      	ldr	r3, [r3, #4]
 80104cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80104ce:	8952      	ldrh	r2, [r2, #10]
 80104d0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80104d2:	68ba      	ldr	r2, [r7, #8]
 80104d4:	429a      	cmp	r2, r3
 80104d6:	d10d      	bne.n	80104f4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80104d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d006      	beq.n	80104ee <tcp_write+0x276>
 80104e0:	4b1c      	ldr	r3, [pc, #112]	; (8010554 <tcp_write+0x2dc>)
 80104e2:	f240 2231 	movw	r2, #561	; 0x231
 80104e6:	4922      	ldr	r1, [pc, #136]	; (8010570 <tcp_write+0x2f8>)
 80104e8:	481c      	ldr	r0, [pc, #112]	; (801055c <tcp_write+0x2e4>)
 80104ea:	f004 fcdb 	bl	8014ea4 <iprintf>
          extendlen = seglen;
 80104ee:	8bfb      	ldrh	r3, [r7, #30]
 80104f0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80104f2:	e01a      	b.n	801052a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80104f4:	8bfb      	ldrh	r3, [r7, #30]
 80104f6:	2201      	movs	r2, #1
 80104f8:	4619      	mov	r1, r3
 80104fa:	2000      	movs	r0, #0
 80104fc:	f7fa fdde 	bl	800b0bc <pbuf_alloc>
 8010500:	6578      	str	r0, [r7, #84]	; 0x54
 8010502:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010504:	2b00      	cmp	r3, #0
 8010506:	f000 81e0 	beq.w	80108ca <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801050a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801050e:	68ba      	ldr	r2, [r7, #8]
 8010510:	441a      	add	r2, r3
 8010512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010514:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8010516:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010518:	f7fb f942 	bl	800b7a0 <pbuf_clen>
 801051c:	4603      	mov	r3, r0
 801051e:	461a      	mov	r2, r3
 8010520:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010524:	4413      	add	r3, r2
 8010526:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801052a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801052e:	8bfb      	ldrh	r3, [r7, #30]
 8010530:	4413      	add	r3, r2
 8010532:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010536:	e0dc      	b.n	80106f2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801053e:	2b00      	cmp	r3, #0
 8010540:	f000 80d7 	beq.w	80106f2 <tcp_write+0x47a>
 8010544:	4b03      	ldr	r3, [pc, #12]	; (8010554 <tcp_write+0x2dc>)
 8010546:	f240 224a 	movw	r2, #586	; 0x24a
 801054a:	490a      	ldr	r1, [pc, #40]	; (8010574 <tcp_write+0x2fc>)
 801054c:	4803      	ldr	r0, [pc, #12]	; (801055c <tcp_write+0x2e4>)
 801054e:	f004 fca9 	bl	8014ea4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8010552:	e0ce      	b.n	80106f2 <tcp_write+0x47a>
 8010554:	08018178 	.word	0x08018178
 8010558:	08018318 	.word	0x08018318
 801055c:	080181cc 	.word	0x080181cc
 8010560:	08018330 	.word	0x08018330
 8010564:	08018364 	.word	0x08018364
 8010568:	0801837c 	.word	0x0801837c
 801056c:	0801839c 	.word	0x0801839c
 8010570:	080183bc 	.word	0x080183bc
 8010574:	080183e8 	.word	0x080183e8
    struct pbuf *p;
    u16_t left = len - pos;
 8010578:	88fa      	ldrh	r2, [r7, #6]
 801057a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801057e:	1ad3      	subs	r3, r2, r3
 8010580:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8010582:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010586:	b29b      	uxth	r3, r3
 8010588:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801058a:	1ad3      	subs	r3, r2, r3
 801058c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801058e:	8b7a      	ldrh	r2, [r7, #26]
 8010590:	8bbb      	ldrh	r3, [r7, #28]
 8010592:	4293      	cmp	r3, r2
 8010594:	bf28      	it	cs
 8010596:	4613      	movcs	r3, r2
 8010598:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801059a:	797b      	ldrb	r3, [r7, #5]
 801059c:	f003 0301 	and.w	r3, r3, #1
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d036      	beq.n	8010612 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80105a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80105a8:	b29a      	uxth	r2, r3
 80105aa:	8b3b      	ldrh	r3, [r7, #24]
 80105ac:	4413      	add	r3, r2
 80105ae:	b299      	uxth	r1, r3
 80105b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	bf0c      	ite	eq
 80105b6:	2301      	moveq	r3, #1
 80105b8:	2300      	movne	r3, #0
 80105ba:	b2db      	uxtb	r3, r3
 80105bc:	f107 0012 	add.w	r0, r7, #18
 80105c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80105c2:	9302      	str	r3, [sp, #8]
 80105c4:	797b      	ldrb	r3, [r7, #5]
 80105c6:	9301      	str	r3, [sp, #4]
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	9300      	str	r3, [sp, #0]
 80105cc:	4603      	mov	r3, r0
 80105ce:	2036      	movs	r0, #54	; 0x36
 80105d0:	f7ff fd5e 	bl	8010090 <tcp_pbuf_prealloc>
 80105d4:	6338      	str	r0, [r7, #48]	; 0x30
 80105d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105d8:	2b00      	cmp	r3, #0
 80105da:	f000 8178 	beq.w	80108ce <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80105de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105e0:	895b      	ldrh	r3, [r3, #10]
 80105e2:	8b3a      	ldrh	r2, [r7, #24]
 80105e4:	429a      	cmp	r2, r3
 80105e6:	d906      	bls.n	80105f6 <tcp_write+0x37e>
 80105e8:	4b8c      	ldr	r3, [pc, #560]	; (801081c <tcp_write+0x5a4>)
 80105ea:	f240 2266 	movw	r2, #614	; 0x266
 80105ee:	498c      	ldr	r1, [pc, #560]	; (8010820 <tcp_write+0x5a8>)
 80105f0:	488c      	ldr	r0, [pc, #560]	; (8010824 <tcp_write+0x5ac>)
 80105f2:	f004 fc57 	bl	8014ea4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80105f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105f8:	685a      	ldr	r2, [r3, #4]
 80105fa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80105fe:	18d0      	adds	r0, r2, r3
 8010600:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010604:	68ba      	ldr	r2, [r7, #8]
 8010606:	4413      	add	r3, r2
 8010608:	8b3a      	ldrh	r2, [r7, #24]
 801060a:	4619      	mov	r1, r3
 801060c:	f004 fc34 	bl	8014e78 <memcpy>
 8010610:	e02f      	b.n	8010672 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8010612:	8a7b      	ldrh	r3, [r7, #18]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d006      	beq.n	8010626 <tcp_write+0x3ae>
 8010618:	4b80      	ldr	r3, [pc, #512]	; (801081c <tcp_write+0x5a4>)
 801061a:	f240 2271 	movw	r2, #625	; 0x271
 801061e:	4982      	ldr	r1, [pc, #520]	; (8010828 <tcp_write+0x5b0>)
 8010620:	4880      	ldr	r0, [pc, #512]	; (8010824 <tcp_write+0x5ac>)
 8010622:	f004 fc3f 	bl	8014ea4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8010626:	8b3b      	ldrh	r3, [r7, #24]
 8010628:	2201      	movs	r2, #1
 801062a:	4619      	mov	r1, r3
 801062c:	2036      	movs	r0, #54	; 0x36
 801062e:	f7fa fd45 	bl	800b0bc <pbuf_alloc>
 8010632:	6178      	str	r0, [r7, #20]
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	2b00      	cmp	r3, #0
 8010638:	f000 814b 	beq.w	80108d2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801063c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010640:	68ba      	ldr	r2, [r7, #8]
 8010642:	441a      	add	r2, r3
 8010644:	697b      	ldr	r3, [r7, #20]
 8010646:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010648:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801064c:	b29b      	uxth	r3, r3
 801064e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010652:	4619      	mov	r1, r3
 8010654:	2036      	movs	r0, #54	; 0x36
 8010656:	f7fa fd31 	bl	800b0bc <pbuf_alloc>
 801065a:	6338      	str	r0, [r7, #48]	; 0x30
 801065c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801065e:	2b00      	cmp	r3, #0
 8010660:	d103      	bne.n	801066a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8010662:	6978      	ldr	r0, [r7, #20]
 8010664:	f7fb f80e 	bl	800b684 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8010668:	e136      	b.n	80108d8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801066a:	6979      	ldr	r1, [r7, #20]
 801066c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801066e:	f7fb f8d7 	bl	800b820 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8010672:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010674:	f7fb f894 	bl	800b7a0 <pbuf_clen>
 8010678:	4603      	mov	r3, r0
 801067a:	461a      	mov	r2, r3
 801067c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010680:	4413      	add	r3, r2
 8010682:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8010686:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801068a:	2b09      	cmp	r3, #9
 801068c:	d903      	bls.n	8010696 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801068e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010690:	f7fa fff8 	bl	800b684 <pbuf_free>
      goto memerr;
 8010694:	e120      	b.n	80108d8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801069a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801069e:	441a      	add	r2, r3
 80106a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80106a4:	9300      	str	r3, [sp, #0]
 80106a6:	4613      	mov	r3, r2
 80106a8:	2200      	movs	r2, #0
 80106aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80106ac:	68f8      	ldr	r0, [r7, #12]
 80106ae:	f7ff fc51 	bl	800ff54 <tcp_create_segment>
 80106b2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80106b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	f000 810d 	beq.w	80108d6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80106bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d102      	bne.n	80106c8 <tcp_write+0x450>
      queue = seg;
 80106c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106c4:	647b      	str	r3, [r7, #68]	; 0x44
 80106c6:	e00c      	b.n	80106e2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80106c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d106      	bne.n	80106dc <tcp_write+0x464>
 80106ce:	4b53      	ldr	r3, [pc, #332]	; (801081c <tcp_write+0x5a4>)
 80106d0:	f240 22ab 	movw	r2, #683	; 0x2ab
 80106d4:	4955      	ldr	r1, [pc, #340]	; (801082c <tcp_write+0x5b4>)
 80106d6:	4853      	ldr	r0, [pc, #332]	; (8010824 <tcp_write+0x5ac>)
 80106d8:	f004 fbe4 	bl	8014ea4 <iprintf>
      prev_seg->next = seg;
 80106dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80106e0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80106e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106e4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80106e6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80106ea:	8b3b      	ldrh	r3, [r7, #24]
 80106ec:	4413      	add	r3, r2
 80106ee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80106f2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80106f6:	88fb      	ldrh	r3, [r7, #6]
 80106f8:	429a      	cmp	r2, r3
 80106fa:	f4ff af3d 	bcc.w	8010578 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80106fe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010700:	2b00      	cmp	r3, #0
 8010702:	d02c      	beq.n	801075e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8010704:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010706:	685b      	ldr	r3, [r3, #4]
 8010708:	62fb      	str	r3, [r7, #44]	; 0x2c
 801070a:	e01e      	b.n	801074a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801070c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801070e:	891a      	ldrh	r2, [r3, #8]
 8010710:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010712:	4413      	add	r3, r2
 8010714:	b29a      	uxth	r2, r3
 8010716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010718:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801071a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d110      	bne.n	8010744 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8010722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010724:	685b      	ldr	r3, [r3, #4]
 8010726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010728:	8952      	ldrh	r2, [r2, #10]
 801072a:	4413      	add	r3, r2
 801072c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801072e:	68b9      	ldr	r1, [r7, #8]
 8010730:	4618      	mov	r0, r3
 8010732:	f004 fba1 	bl	8014e78 <memcpy>
        p->len += oversize_used;
 8010736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010738:	895a      	ldrh	r2, [r3, #10]
 801073a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801073c:	4413      	add	r3, r2
 801073e:	b29a      	uxth	r2, r3
 8010740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010742:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8010744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	62fb      	str	r3, [r7, #44]	; 0x2c
 801074a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801074c:	2b00      	cmp	r3, #0
 801074e:	d1dd      	bne.n	801070c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8010750:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010752:	891a      	ldrh	r2, [r3, #8]
 8010754:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010756:	4413      	add	r3, r2
 8010758:	b29a      	uxth	r2, r3
 801075a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801075c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801075e:	8a7a      	ldrh	r2, [r7, #18]
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8010766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010768:	2b00      	cmp	r3, #0
 801076a:	d018      	beq.n	801079e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801076c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801076e:	2b00      	cmp	r3, #0
 8010770:	d106      	bne.n	8010780 <tcp_write+0x508>
 8010772:	4b2a      	ldr	r3, [pc, #168]	; (801081c <tcp_write+0x5a4>)
 8010774:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8010778:	492d      	ldr	r1, [pc, #180]	; (8010830 <tcp_write+0x5b8>)
 801077a:	482a      	ldr	r0, [pc, #168]	; (8010824 <tcp_write+0x5ac>)
 801077c:	f004 fb92 	bl	8014ea4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8010780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010782:	685b      	ldr	r3, [r3, #4]
 8010784:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010786:	4618      	mov	r0, r3
 8010788:	f7fb f84a 	bl	800b820 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801078c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801078e:	891a      	ldrh	r2, [r3, #8]
 8010790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010792:	891b      	ldrh	r3, [r3, #8]
 8010794:	4413      	add	r3, r2
 8010796:	b29a      	uxth	r2, r3
 8010798:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801079a:	811a      	strh	r2, [r3, #8]
 801079c:	e037      	b.n	801080e <tcp_write+0x596>
  } else if (extendlen > 0) {
 801079e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d034      	beq.n	801080e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80107a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d003      	beq.n	80107b2 <tcp_write+0x53a>
 80107aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107ac:	685b      	ldr	r3, [r3, #4]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d106      	bne.n	80107c0 <tcp_write+0x548>
 80107b2:	4b1a      	ldr	r3, [pc, #104]	; (801081c <tcp_write+0x5a4>)
 80107b4:	f240 22e6 	movw	r2, #742	; 0x2e6
 80107b8:	491e      	ldr	r1, [pc, #120]	; (8010834 <tcp_write+0x5bc>)
 80107ba:	481a      	ldr	r0, [pc, #104]	; (8010824 <tcp_write+0x5ac>)
 80107bc:	f004 fb72 	bl	8014ea4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80107c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107c2:	685b      	ldr	r3, [r3, #4]
 80107c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80107c6:	e009      	b.n	80107dc <tcp_write+0x564>
      p->tot_len += extendlen;
 80107c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107ca:	891a      	ldrh	r2, [r3, #8]
 80107cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80107ce:	4413      	add	r3, r2
 80107d0:	b29a      	uxth	r2, r3
 80107d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107d4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80107d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	62bb      	str	r3, [r7, #40]	; 0x28
 80107dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d1f1      	bne.n	80107c8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80107e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107e6:	891a      	ldrh	r2, [r3, #8]
 80107e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80107ea:	4413      	add	r3, r2
 80107ec:	b29a      	uxth	r2, r3
 80107ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107f0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80107f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107f4:	895a      	ldrh	r2, [r3, #10]
 80107f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80107f8:	4413      	add	r3, r2
 80107fa:	b29a      	uxth	r2, r3
 80107fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107fe:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8010800:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010802:	891a      	ldrh	r2, [r3, #8]
 8010804:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010806:	4413      	add	r3, r2
 8010808:	b29a      	uxth	r2, r3
 801080a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801080c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801080e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010810:	2b00      	cmp	r3, #0
 8010812:	d111      	bne.n	8010838 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010818:	66da      	str	r2, [r3, #108]	; 0x6c
 801081a:	e010      	b.n	801083e <tcp_write+0x5c6>
 801081c:	08018178 	.word	0x08018178
 8010820:	08018418 	.word	0x08018418
 8010824:	080181cc 	.word	0x080181cc
 8010828:	08018458 	.word	0x08018458
 801082c:	08018468 	.word	0x08018468
 8010830:	0801847c 	.word	0x0801847c
 8010834:	080184b4 	.word	0x080184b4
  } else {
    last_unsent->next = queue;
 8010838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801083a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801083c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010842:	88fb      	ldrh	r3, [r7, #6]
 8010844:	441a      	add	r2, r3
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010850:	88fb      	ldrh	r3, [r7, #6]
 8010852:	1ad3      	subs	r3, r2, r3
 8010854:	b29a      	uxth	r2, r3
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010862:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801086c:	2b00      	cmp	r3, #0
 801086e:	d00e      	beq.n	801088e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010874:	2b00      	cmp	r3, #0
 8010876:	d10a      	bne.n	801088e <tcp_write+0x616>
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801087c:	2b00      	cmp	r3, #0
 801087e:	d106      	bne.n	801088e <tcp_write+0x616>
 8010880:	4b2c      	ldr	r3, [pc, #176]	; (8010934 <tcp_write+0x6bc>)
 8010882:	f240 3212 	movw	r2, #786	; 0x312
 8010886:	492c      	ldr	r1, [pc, #176]	; (8010938 <tcp_write+0x6c0>)
 8010888:	482c      	ldr	r0, [pc, #176]	; (801093c <tcp_write+0x6c4>)
 801088a:	f004 fb0b 	bl	8014ea4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801088e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010890:	2b00      	cmp	r3, #0
 8010892:	d016      	beq.n	80108c2 <tcp_write+0x64a>
 8010894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010896:	68db      	ldr	r3, [r3, #12]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d012      	beq.n	80108c2 <tcp_write+0x64a>
 801089c:	797b      	ldrb	r3, [r7, #5]
 801089e:	f003 0302 	and.w	r3, r3, #2
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d10d      	bne.n	80108c2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80108a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108a8:	68db      	ldr	r3, [r3, #12]
 80108aa:	899b      	ldrh	r3, [r3, #12]
 80108ac:	b29c      	uxth	r4, r3
 80108ae:	2008      	movs	r0, #8
 80108b0:	f7f9 fb14 	bl	8009edc <lwip_htons>
 80108b4:	4603      	mov	r3, r0
 80108b6:	461a      	mov	r2, r3
 80108b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108ba:	68db      	ldr	r3, [r3, #12]
 80108bc:	4322      	orrs	r2, r4
 80108be:	b292      	uxth	r2, r2
 80108c0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80108c2:	2300      	movs	r3, #0
 80108c4:	e031      	b.n	801092a <tcp_write+0x6b2>
          goto memerr;
 80108c6:	bf00      	nop
 80108c8:	e006      	b.n	80108d8 <tcp_write+0x660>
            goto memerr;
 80108ca:	bf00      	nop
 80108cc:	e004      	b.n	80108d8 <tcp_write+0x660>
        goto memerr;
 80108ce:	bf00      	nop
 80108d0:	e002      	b.n	80108d8 <tcp_write+0x660>
        goto memerr;
 80108d2:	bf00      	nop
 80108d4:	e000      	b.n	80108d8 <tcp_write+0x660>
      goto memerr;
 80108d6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	8b5b      	ldrh	r3, [r3, #26]
 80108dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80108e0:	b29a      	uxth	r2, r3
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80108e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d002      	beq.n	80108f2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 80108ec:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80108ee:	f7fa fec9 	bl	800b684 <pbuf_free>
  }
  if (queue != NULL) {
 80108f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d002      	beq.n	80108fe <tcp_write+0x686>
    tcp_segs_free(queue);
 80108f8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80108fa:	f7fc fb87 	bl	800d00c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010904:	2b00      	cmp	r3, #0
 8010906:	d00e      	beq.n	8010926 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801090c:	2b00      	cmp	r3, #0
 801090e:	d10a      	bne.n	8010926 <tcp_write+0x6ae>
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010914:	2b00      	cmp	r3, #0
 8010916:	d106      	bne.n	8010926 <tcp_write+0x6ae>
 8010918:	4b06      	ldr	r3, [pc, #24]	; (8010934 <tcp_write+0x6bc>)
 801091a:	f240 3227 	movw	r2, #807	; 0x327
 801091e:	4906      	ldr	r1, [pc, #24]	; (8010938 <tcp_write+0x6c0>)
 8010920:	4806      	ldr	r0, [pc, #24]	; (801093c <tcp_write+0x6c4>)
 8010922:	f004 fabf 	bl	8014ea4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8010926:	f04f 33ff 	mov.w	r3, #4294967295
}
 801092a:	4618      	mov	r0, r3
 801092c:	375c      	adds	r7, #92	; 0x5c
 801092e:	46bd      	mov	sp, r7
 8010930:	bd90      	pop	{r4, r7, pc}
 8010932:	bf00      	nop
 8010934:	08018178 	.word	0x08018178
 8010938:	080184ec 	.word	0x080184ec
 801093c:	080181cc 	.word	0x080181cc

08010940 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010940:	b590      	push	{r4, r7, lr}
 8010942:	b08b      	sub	sp, #44	; 0x2c
 8010944:	af02      	add	r7, sp, #8
 8010946:	6078      	str	r0, [r7, #4]
 8010948:	460b      	mov	r3, r1
 801094a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801094c:	2300      	movs	r3, #0
 801094e:	61fb      	str	r3, [r7, #28]
 8010950:	2300      	movs	r3, #0
 8010952:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010954:	2300      	movs	r3, #0
 8010956:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d106      	bne.n	801096c <tcp_split_unsent_seg+0x2c>
 801095e:	4b95      	ldr	r3, [pc, #596]	; (8010bb4 <tcp_split_unsent_seg+0x274>)
 8010960:	f240 324b 	movw	r2, #843	; 0x34b
 8010964:	4994      	ldr	r1, [pc, #592]	; (8010bb8 <tcp_split_unsent_seg+0x278>)
 8010966:	4895      	ldr	r0, [pc, #596]	; (8010bbc <tcp_split_unsent_seg+0x27c>)
 8010968:	f004 fa9c 	bl	8014ea4 <iprintf>

  useg = pcb->unsent;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010970:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010972:	697b      	ldr	r3, [r7, #20]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d102      	bne.n	801097e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010978:	f04f 33ff 	mov.w	r3, #4294967295
 801097c:	e116      	b.n	8010bac <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801097e:	887b      	ldrh	r3, [r7, #2]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d109      	bne.n	8010998 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010984:	4b8b      	ldr	r3, [pc, #556]	; (8010bb4 <tcp_split_unsent_seg+0x274>)
 8010986:	f240 3253 	movw	r2, #851	; 0x353
 801098a:	498d      	ldr	r1, [pc, #564]	; (8010bc0 <tcp_split_unsent_seg+0x280>)
 801098c:	488b      	ldr	r0, [pc, #556]	; (8010bbc <tcp_split_unsent_seg+0x27c>)
 801098e:	f004 fa89 	bl	8014ea4 <iprintf>
    return ERR_VAL;
 8010992:	f06f 0305 	mvn.w	r3, #5
 8010996:	e109      	b.n	8010bac <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010998:	697b      	ldr	r3, [r7, #20]
 801099a:	891b      	ldrh	r3, [r3, #8]
 801099c:	887a      	ldrh	r2, [r7, #2]
 801099e:	429a      	cmp	r2, r3
 80109a0:	d301      	bcc.n	80109a6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80109a2:	2300      	movs	r3, #0
 80109a4:	e102      	b.n	8010bac <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80109aa:	887a      	ldrh	r2, [r7, #2]
 80109ac:	429a      	cmp	r2, r3
 80109ae:	d906      	bls.n	80109be <tcp_split_unsent_seg+0x7e>
 80109b0:	4b80      	ldr	r3, [pc, #512]	; (8010bb4 <tcp_split_unsent_seg+0x274>)
 80109b2:	f240 325b 	movw	r2, #859	; 0x35b
 80109b6:	4983      	ldr	r1, [pc, #524]	; (8010bc4 <tcp_split_unsent_seg+0x284>)
 80109b8:	4880      	ldr	r0, [pc, #512]	; (8010bbc <tcp_split_unsent_seg+0x27c>)
 80109ba:	f004 fa73 	bl	8014ea4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80109be:	697b      	ldr	r3, [r7, #20]
 80109c0:	891b      	ldrh	r3, [r3, #8]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d106      	bne.n	80109d4 <tcp_split_unsent_seg+0x94>
 80109c6:	4b7b      	ldr	r3, [pc, #492]	; (8010bb4 <tcp_split_unsent_seg+0x274>)
 80109c8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80109cc:	497e      	ldr	r1, [pc, #504]	; (8010bc8 <tcp_split_unsent_seg+0x288>)
 80109ce:	487b      	ldr	r0, [pc, #492]	; (8010bbc <tcp_split_unsent_seg+0x27c>)
 80109d0:	f004 fa68 	bl	8014ea4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80109d4:	697b      	ldr	r3, [r7, #20]
 80109d6:	7a9b      	ldrb	r3, [r3, #10]
 80109d8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80109da:	7bfb      	ldrb	r3, [r7, #15]
 80109dc:	009b      	lsls	r3, r3, #2
 80109de:	b2db      	uxtb	r3, r3
 80109e0:	f003 0304 	and.w	r3, r3, #4
 80109e4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80109e6:	697b      	ldr	r3, [r7, #20]
 80109e8:	891a      	ldrh	r2, [r3, #8]
 80109ea:	887b      	ldrh	r3, [r7, #2]
 80109ec:	1ad3      	subs	r3, r2, r3
 80109ee:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80109f0:	7bbb      	ldrb	r3, [r7, #14]
 80109f2:	b29a      	uxth	r2, r3
 80109f4:	89bb      	ldrh	r3, [r7, #12]
 80109f6:	4413      	add	r3, r2
 80109f8:	b29b      	uxth	r3, r3
 80109fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80109fe:	4619      	mov	r1, r3
 8010a00:	2036      	movs	r0, #54	; 0x36
 8010a02:	f7fa fb5b 	bl	800b0bc <pbuf_alloc>
 8010a06:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010a08:	693b      	ldr	r3, [r7, #16]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	f000 80b7 	beq.w	8010b7e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010a10:	697b      	ldr	r3, [r7, #20]
 8010a12:	685b      	ldr	r3, [r3, #4]
 8010a14:	891a      	ldrh	r2, [r3, #8]
 8010a16:	697b      	ldr	r3, [r7, #20]
 8010a18:	891b      	ldrh	r3, [r3, #8]
 8010a1a:	1ad3      	subs	r3, r2, r3
 8010a1c:	b29a      	uxth	r2, r3
 8010a1e:	887b      	ldrh	r3, [r7, #2]
 8010a20:	4413      	add	r3, r2
 8010a22:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010a24:	697b      	ldr	r3, [r7, #20]
 8010a26:	6858      	ldr	r0, [r3, #4]
 8010a28:	693b      	ldr	r3, [r7, #16]
 8010a2a:	685a      	ldr	r2, [r3, #4]
 8010a2c:	7bbb      	ldrb	r3, [r7, #14]
 8010a2e:	18d1      	adds	r1, r2, r3
 8010a30:	897b      	ldrh	r3, [r7, #10]
 8010a32:	89ba      	ldrh	r2, [r7, #12]
 8010a34:	f7fb f81c 	bl	800ba70 <pbuf_copy_partial>
 8010a38:	4603      	mov	r3, r0
 8010a3a:	461a      	mov	r2, r3
 8010a3c:	89bb      	ldrh	r3, [r7, #12]
 8010a3e:	4293      	cmp	r3, r2
 8010a40:	f040 809f 	bne.w	8010b82 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010a44:	697b      	ldr	r3, [r7, #20]
 8010a46:	68db      	ldr	r3, [r3, #12]
 8010a48:	899b      	ldrh	r3, [r3, #12]
 8010a4a:	b29b      	uxth	r3, r3
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	f7f9 fa45 	bl	8009edc <lwip_htons>
 8010a52:	4603      	mov	r3, r0
 8010a54:	b2db      	uxtb	r3, r3
 8010a56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010a5a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010a60:	7efb      	ldrb	r3, [r7, #27]
 8010a62:	f003 0308 	and.w	r3, r3, #8
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d007      	beq.n	8010a7a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010a6a:	7efb      	ldrb	r3, [r7, #27]
 8010a6c:	f023 0308 	bic.w	r3, r3, #8
 8010a70:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010a72:	7ebb      	ldrb	r3, [r7, #26]
 8010a74:	f043 0308 	orr.w	r3, r3, #8
 8010a78:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010a7a:	7efb      	ldrb	r3, [r7, #27]
 8010a7c:	f003 0301 	and.w	r3, r3, #1
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d007      	beq.n	8010a94 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010a84:	7efb      	ldrb	r3, [r7, #27]
 8010a86:	f023 0301 	bic.w	r3, r3, #1
 8010a8a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010a8c:	7ebb      	ldrb	r3, [r7, #26]
 8010a8e:	f043 0301 	orr.w	r3, r3, #1
 8010a92:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010a94:	697b      	ldr	r3, [r7, #20]
 8010a96:	68db      	ldr	r3, [r3, #12]
 8010a98:	685b      	ldr	r3, [r3, #4]
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	f7f9 fa33 	bl	8009f06 <lwip_htonl>
 8010aa0:	4602      	mov	r2, r0
 8010aa2:	887b      	ldrh	r3, [r7, #2]
 8010aa4:	18d1      	adds	r1, r2, r3
 8010aa6:	7eba      	ldrb	r2, [r7, #26]
 8010aa8:	7bfb      	ldrb	r3, [r7, #15]
 8010aaa:	9300      	str	r3, [sp, #0]
 8010aac:	460b      	mov	r3, r1
 8010aae:	6939      	ldr	r1, [r7, #16]
 8010ab0:	6878      	ldr	r0, [r7, #4]
 8010ab2:	f7ff fa4f 	bl	800ff54 <tcp_create_segment>
 8010ab6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010ab8:	69fb      	ldr	r3, [r7, #28]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d063      	beq.n	8010b86 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010abe:	697b      	ldr	r3, [r7, #20]
 8010ac0:	685b      	ldr	r3, [r3, #4]
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	f7fa fe6c 	bl	800b7a0 <pbuf_clen>
 8010ac8:	4603      	mov	r3, r0
 8010aca:	461a      	mov	r2, r3
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010ad2:	1a9b      	subs	r3, r3, r2
 8010ad4:	b29a      	uxth	r2, r3
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010adc:	697b      	ldr	r3, [r7, #20]
 8010ade:	6858      	ldr	r0, [r3, #4]
 8010ae0:	697b      	ldr	r3, [r7, #20]
 8010ae2:	685b      	ldr	r3, [r3, #4]
 8010ae4:	891a      	ldrh	r2, [r3, #8]
 8010ae6:	89bb      	ldrh	r3, [r7, #12]
 8010ae8:	1ad3      	subs	r3, r2, r3
 8010aea:	b29b      	uxth	r3, r3
 8010aec:	4619      	mov	r1, r3
 8010aee:	f7fa fc43 	bl	800b378 <pbuf_realloc>
  useg->len -= remainder;
 8010af2:	697b      	ldr	r3, [r7, #20]
 8010af4:	891a      	ldrh	r2, [r3, #8]
 8010af6:	89bb      	ldrh	r3, [r7, #12]
 8010af8:	1ad3      	subs	r3, r2, r3
 8010afa:	b29a      	uxth	r2, r3
 8010afc:	697b      	ldr	r3, [r7, #20]
 8010afe:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010b00:	697b      	ldr	r3, [r7, #20]
 8010b02:	68db      	ldr	r3, [r3, #12]
 8010b04:	899b      	ldrh	r3, [r3, #12]
 8010b06:	b29c      	uxth	r4, r3
 8010b08:	7efb      	ldrb	r3, [r7, #27]
 8010b0a:	b29b      	uxth	r3, r3
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	f7f9 f9e5 	bl	8009edc <lwip_htons>
 8010b12:	4603      	mov	r3, r0
 8010b14:	461a      	mov	r2, r3
 8010b16:	697b      	ldr	r3, [r7, #20]
 8010b18:	68db      	ldr	r3, [r3, #12]
 8010b1a:	4322      	orrs	r2, r4
 8010b1c:	b292      	uxth	r2, r2
 8010b1e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010b20:	697b      	ldr	r3, [r7, #20]
 8010b22:	685b      	ldr	r3, [r3, #4]
 8010b24:	4618      	mov	r0, r3
 8010b26:	f7fa fe3b 	bl	800b7a0 <pbuf_clen>
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	461a      	mov	r2, r3
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010b34:	4413      	add	r3, r2
 8010b36:	b29a      	uxth	r2, r3
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010b3e:	69fb      	ldr	r3, [r7, #28]
 8010b40:	685b      	ldr	r3, [r3, #4]
 8010b42:	4618      	mov	r0, r3
 8010b44:	f7fa fe2c 	bl	800b7a0 <pbuf_clen>
 8010b48:	4603      	mov	r3, r0
 8010b4a:	461a      	mov	r2, r3
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010b52:	4413      	add	r3, r2
 8010b54:	b29a      	uxth	r2, r3
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010b5c:	697b      	ldr	r3, [r7, #20]
 8010b5e:	681a      	ldr	r2, [r3, #0]
 8010b60:	69fb      	ldr	r3, [r7, #28]
 8010b62:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010b64:	697b      	ldr	r3, [r7, #20]
 8010b66:	69fa      	ldr	r2, [r7, #28]
 8010b68:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010b6a:	69fb      	ldr	r3, [r7, #28]
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d103      	bne.n	8010b7a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	2200      	movs	r2, #0
 8010b76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	e016      	b.n	8010bac <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010b7e:	bf00      	nop
 8010b80:	e002      	b.n	8010b88 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010b82:	bf00      	nop
 8010b84:	e000      	b.n	8010b88 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010b86:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010b88:	69fb      	ldr	r3, [r7, #28]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d006      	beq.n	8010b9c <tcp_split_unsent_seg+0x25c>
 8010b8e:	4b09      	ldr	r3, [pc, #36]	; (8010bb4 <tcp_split_unsent_seg+0x274>)
 8010b90:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010b94:	490d      	ldr	r1, [pc, #52]	; (8010bcc <tcp_split_unsent_seg+0x28c>)
 8010b96:	4809      	ldr	r0, [pc, #36]	; (8010bbc <tcp_split_unsent_seg+0x27c>)
 8010b98:	f004 f984 	bl	8014ea4 <iprintf>
  if (p != NULL) {
 8010b9c:	693b      	ldr	r3, [r7, #16]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d002      	beq.n	8010ba8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010ba2:	6938      	ldr	r0, [r7, #16]
 8010ba4:	f7fa fd6e 	bl	800b684 <pbuf_free>
  }

  return ERR_MEM;
 8010ba8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010bac:	4618      	mov	r0, r3
 8010bae:	3724      	adds	r7, #36	; 0x24
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	bd90      	pop	{r4, r7, pc}
 8010bb4:	08018178 	.word	0x08018178
 8010bb8:	0801850c 	.word	0x0801850c
 8010bbc:	080181cc 	.word	0x080181cc
 8010bc0:	08018530 	.word	0x08018530
 8010bc4:	08018554 	.word	0x08018554
 8010bc8:	08018564 	.word	0x08018564
 8010bcc:	08018574 	.word	0x08018574

08010bd0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010bd0:	b590      	push	{r4, r7, lr}
 8010bd2:	b085      	sub	sp, #20
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d106      	bne.n	8010bec <tcp_send_fin+0x1c>
 8010bde:	4b21      	ldr	r3, [pc, #132]	; (8010c64 <tcp_send_fin+0x94>)
 8010be0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8010be4:	4920      	ldr	r1, [pc, #128]	; (8010c68 <tcp_send_fin+0x98>)
 8010be6:	4821      	ldr	r0, [pc, #132]	; (8010c6c <tcp_send_fin+0x9c>)
 8010be8:	f004 f95c 	bl	8014ea4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d02e      	beq.n	8010c52 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bf8:	60fb      	str	r3, [r7, #12]
 8010bfa:	e002      	b.n	8010c02 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d1f8      	bne.n	8010bfc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	68db      	ldr	r3, [r3, #12]
 8010c0e:	899b      	ldrh	r3, [r3, #12]
 8010c10:	b29b      	uxth	r3, r3
 8010c12:	4618      	mov	r0, r3
 8010c14:	f7f9 f962 	bl	8009edc <lwip_htons>
 8010c18:	4603      	mov	r3, r0
 8010c1a:	b2db      	uxtb	r3, r3
 8010c1c:	f003 0307 	and.w	r3, r3, #7
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d116      	bne.n	8010c52 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	68db      	ldr	r3, [r3, #12]
 8010c28:	899b      	ldrh	r3, [r3, #12]
 8010c2a:	b29c      	uxth	r4, r3
 8010c2c:	2001      	movs	r0, #1
 8010c2e:	f7f9 f955 	bl	8009edc <lwip_htons>
 8010c32:	4603      	mov	r3, r0
 8010c34:	461a      	mov	r2, r3
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	68db      	ldr	r3, [r3, #12]
 8010c3a:	4322      	orrs	r2, r4
 8010c3c:	b292      	uxth	r2, r2
 8010c3e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	8b5b      	ldrh	r3, [r3, #26]
 8010c44:	f043 0320 	orr.w	r3, r3, #32
 8010c48:	b29a      	uxth	r2, r3
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010c4e:	2300      	movs	r3, #0
 8010c50:	e004      	b.n	8010c5c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010c52:	2101      	movs	r1, #1
 8010c54:	6878      	ldr	r0, [r7, #4]
 8010c56:	f000 f80b 	bl	8010c70 <tcp_enqueue_flags>
 8010c5a:	4603      	mov	r3, r0
}
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	3714      	adds	r7, #20
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bd90      	pop	{r4, r7, pc}
 8010c64:	08018178 	.word	0x08018178
 8010c68:	08018580 	.word	0x08018580
 8010c6c:	080181cc 	.word	0x080181cc

08010c70 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b08a      	sub	sp, #40	; 0x28
 8010c74:	af02      	add	r7, sp, #8
 8010c76:	6078      	str	r0, [r7, #4]
 8010c78:	460b      	mov	r3, r1
 8010c7a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010c80:	2300      	movs	r3, #0
 8010c82:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010c84:	78fb      	ldrb	r3, [r7, #3]
 8010c86:	f003 0303 	and.w	r3, r3, #3
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d106      	bne.n	8010c9c <tcp_enqueue_flags+0x2c>
 8010c8e:	4b67      	ldr	r3, [pc, #412]	; (8010e2c <tcp_enqueue_flags+0x1bc>)
 8010c90:	f240 4211 	movw	r2, #1041	; 0x411
 8010c94:	4966      	ldr	r1, [pc, #408]	; (8010e30 <tcp_enqueue_flags+0x1c0>)
 8010c96:	4867      	ldr	r0, [pc, #412]	; (8010e34 <tcp_enqueue_flags+0x1c4>)
 8010c98:	f004 f904 	bl	8014ea4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d106      	bne.n	8010cb0 <tcp_enqueue_flags+0x40>
 8010ca2:	4b62      	ldr	r3, [pc, #392]	; (8010e2c <tcp_enqueue_flags+0x1bc>)
 8010ca4:	f240 4213 	movw	r2, #1043	; 0x413
 8010ca8:	4963      	ldr	r1, [pc, #396]	; (8010e38 <tcp_enqueue_flags+0x1c8>)
 8010caa:	4862      	ldr	r0, [pc, #392]	; (8010e34 <tcp_enqueue_flags+0x1c4>)
 8010cac:	f004 f8fa 	bl	8014ea4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010cb0:	78fb      	ldrb	r3, [r7, #3]
 8010cb2:	f003 0302 	and.w	r3, r3, #2
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d001      	beq.n	8010cbe <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010cba:	2301      	movs	r3, #1
 8010cbc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010cbe:	7ffb      	ldrb	r3, [r7, #31]
 8010cc0:	009b      	lsls	r3, r3, #2
 8010cc2:	b2db      	uxtb	r3, r3
 8010cc4:	f003 0304 	and.w	r3, r3, #4
 8010cc8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010cca:	7dfb      	ldrb	r3, [r7, #23]
 8010ccc:	b29b      	uxth	r3, r3
 8010cce:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010cd2:	4619      	mov	r1, r3
 8010cd4:	2036      	movs	r0, #54	; 0x36
 8010cd6:	f7fa f9f1 	bl	800b0bc <pbuf_alloc>
 8010cda:	6138      	str	r0, [r7, #16]
 8010cdc:	693b      	ldr	r3, [r7, #16]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d109      	bne.n	8010cf6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	8b5b      	ldrh	r3, [r3, #26]
 8010ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cea:	b29a      	uxth	r2, r3
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8010cf4:	e095      	b.n	8010e22 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010cf6:	693b      	ldr	r3, [r7, #16]
 8010cf8:	895a      	ldrh	r2, [r3, #10]
 8010cfa:	7dfb      	ldrb	r3, [r7, #23]
 8010cfc:	b29b      	uxth	r3, r3
 8010cfe:	429a      	cmp	r2, r3
 8010d00:	d206      	bcs.n	8010d10 <tcp_enqueue_flags+0xa0>
 8010d02:	4b4a      	ldr	r3, [pc, #296]	; (8010e2c <tcp_enqueue_flags+0x1bc>)
 8010d04:	f240 4239 	movw	r2, #1081	; 0x439
 8010d08:	494c      	ldr	r1, [pc, #304]	; (8010e3c <tcp_enqueue_flags+0x1cc>)
 8010d0a:	484a      	ldr	r0, [pc, #296]	; (8010e34 <tcp_enqueue_flags+0x1c4>)
 8010d0c:	f004 f8ca 	bl	8014ea4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8010d14:	78fa      	ldrb	r2, [r7, #3]
 8010d16:	7ffb      	ldrb	r3, [r7, #31]
 8010d18:	9300      	str	r3, [sp, #0]
 8010d1a:	460b      	mov	r3, r1
 8010d1c:	6939      	ldr	r1, [r7, #16]
 8010d1e:	6878      	ldr	r0, [r7, #4]
 8010d20:	f7ff f918 	bl	800ff54 <tcp_create_segment>
 8010d24:	60f8      	str	r0, [r7, #12]
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d109      	bne.n	8010d40 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	8b5b      	ldrh	r3, [r3, #26]
 8010d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d34:	b29a      	uxth	r2, r3
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8010d3e:	e070      	b.n	8010e22 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	68db      	ldr	r3, [r3, #12]
 8010d44:	f003 0303 	and.w	r3, r3, #3
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d006      	beq.n	8010d5a <tcp_enqueue_flags+0xea>
 8010d4c:	4b37      	ldr	r3, [pc, #220]	; (8010e2c <tcp_enqueue_flags+0x1bc>)
 8010d4e:	f240 4242 	movw	r2, #1090	; 0x442
 8010d52:	493b      	ldr	r1, [pc, #236]	; (8010e40 <tcp_enqueue_flags+0x1d0>)
 8010d54:	4837      	ldr	r0, [pc, #220]	; (8010e34 <tcp_enqueue_flags+0x1c4>)
 8010d56:	f004 f8a5 	bl	8014ea4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	891b      	ldrh	r3, [r3, #8]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d006      	beq.n	8010d70 <tcp_enqueue_flags+0x100>
 8010d62:	4b32      	ldr	r3, [pc, #200]	; (8010e2c <tcp_enqueue_flags+0x1bc>)
 8010d64:	f240 4243 	movw	r2, #1091	; 0x443
 8010d68:	4936      	ldr	r1, [pc, #216]	; (8010e44 <tcp_enqueue_flags+0x1d4>)
 8010d6a:	4832      	ldr	r0, [pc, #200]	; (8010e34 <tcp_enqueue_flags+0x1c4>)
 8010d6c:	f004 f89a 	bl	8014ea4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d103      	bne.n	8010d80 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	68fa      	ldr	r2, [r7, #12]
 8010d7c:	66da      	str	r2, [r3, #108]	; 0x6c
 8010d7e:	e00d      	b.n	8010d9c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d84:	61bb      	str	r3, [r7, #24]
 8010d86:	e002      	b.n	8010d8e <tcp_enqueue_flags+0x11e>
 8010d88:	69bb      	ldr	r3, [r7, #24]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	61bb      	str	r3, [r7, #24]
 8010d8e:	69bb      	ldr	r3, [r7, #24]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d1f8      	bne.n	8010d88 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010d96:	69bb      	ldr	r3, [r7, #24]
 8010d98:	68fa      	ldr	r2, [r7, #12]
 8010d9a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	2200      	movs	r2, #0
 8010da0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010da4:	78fb      	ldrb	r3, [r7, #3]
 8010da6:	f003 0302 	and.w	r3, r3, #2
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d104      	bne.n	8010db8 <tcp_enqueue_flags+0x148>
 8010dae:	78fb      	ldrb	r3, [r7, #3]
 8010db0:	f003 0301 	and.w	r3, r3, #1
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d004      	beq.n	8010dc2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010dbc:	1c5a      	adds	r2, r3, #1
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010dc2:	78fb      	ldrb	r3, [r7, #3]
 8010dc4:	f003 0301 	and.w	r3, r3, #1
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d006      	beq.n	8010dda <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	8b5b      	ldrh	r3, [r3, #26]
 8010dd0:	f043 0320 	orr.w	r3, r3, #32
 8010dd4:	b29a      	uxth	r2, r3
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	685b      	ldr	r3, [r3, #4]
 8010dde:	4618      	mov	r0, r3
 8010de0:	f7fa fcde 	bl	800b7a0 <pbuf_clen>
 8010de4:	4603      	mov	r3, r0
 8010de6:	461a      	mov	r2, r3
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010dee:	4413      	add	r3, r2
 8010df0:	b29a      	uxth	r2, r3
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d00e      	beq.n	8010e20 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d10a      	bne.n	8010e20 <tcp_enqueue_flags+0x1b0>
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d106      	bne.n	8010e20 <tcp_enqueue_flags+0x1b0>
 8010e12:	4b06      	ldr	r3, [pc, #24]	; (8010e2c <tcp_enqueue_flags+0x1bc>)
 8010e14:	f240 4265 	movw	r2, #1125	; 0x465
 8010e18:	490b      	ldr	r1, [pc, #44]	; (8010e48 <tcp_enqueue_flags+0x1d8>)
 8010e1a:	4806      	ldr	r0, [pc, #24]	; (8010e34 <tcp_enqueue_flags+0x1c4>)
 8010e1c:	f004 f842 	bl	8014ea4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010e20:	2300      	movs	r3, #0
}
 8010e22:	4618      	mov	r0, r3
 8010e24:	3720      	adds	r7, #32
 8010e26:	46bd      	mov	sp, r7
 8010e28:	bd80      	pop	{r7, pc}
 8010e2a:	bf00      	nop
 8010e2c:	08018178 	.word	0x08018178
 8010e30:	0801859c 	.word	0x0801859c
 8010e34:	080181cc 	.word	0x080181cc
 8010e38:	080185f4 	.word	0x080185f4
 8010e3c:	08018614 	.word	0x08018614
 8010e40:	08018650 	.word	0x08018650
 8010e44:	08018668 	.word	0x08018668
 8010e48:	08018694 	.word	0x08018694

08010e4c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010e4c:	b5b0      	push	{r4, r5, r7, lr}
 8010e4e:	b08a      	sub	sp, #40	; 0x28
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d106      	bne.n	8010e68 <tcp_output+0x1c>
 8010e5a:	4b9e      	ldr	r3, [pc, #632]	; (80110d4 <tcp_output+0x288>)
 8010e5c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8010e60:	499d      	ldr	r1, [pc, #628]	; (80110d8 <tcp_output+0x28c>)
 8010e62:	489e      	ldr	r0, [pc, #632]	; (80110dc <tcp_output+0x290>)
 8010e64:	f004 f81e 	bl	8014ea4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	7d1b      	ldrb	r3, [r3, #20]
 8010e6c:	2b01      	cmp	r3, #1
 8010e6e:	d106      	bne.n	8010e7e <tcp_output+0x32>
 8010e70:	4b98      	ldr	r3, [pc, #608]	; (80110d4 <tcp_output+0x288>)
 8010e72:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8010e76:	499a      	ldr	r1, [pc, #616]	; (80110e0 <tcp_output+0x294>)
 8010e78:	4898      	ldr	r0, [pc, #608]	; (80110dc <tcp_output+0x290>)
 8010e7a:	f004 f813 	bl	8014ea4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010e7e:	4b99      	ldr	r3, [pc, #612]	; (80110e4 <tcp_output+0x298>)
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	687a      	ldr	r2, [r7, #4]
 8010e84:	429a      	cmp	r2, r3
 8010e86:	d101      	bne.n	8010e8c <tcp_output+0x40>
    return ERR_OK;
 8010e88:	2300      	movs	r3, #0
 8010e8a:	e1ce      	b.n	801122a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010e98:	4293      	cmp	r3, r2
 8010e9a:	bf28      	it	cs
 8010e9c:	4613      	movcs	r3, r2
 8010e9e:	b29b      	uxth	r3, r3
 8010ea0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ea6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8010ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d10b      	bne.n	8010ec6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	8b5b      	ldrh	r3, [r3, #26]
 8010eb2:	f003 0302 	and.w	r3, r3, #2
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	f000 81aa 	beq.w	8011210 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8010ebc:	6878      	ldr	r0, [r7, #4]
 8010ebe:	f000 fdcb 	bl	8011a58 <tcp_send_empty_ack>
 8010ec2:	4603      	mov	r3, r0
 8010ec4:	e1b1      	b.n	801122a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010ec6:	6879      	ldr	r1, [r7, #4]
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	3304      	adds	r3, #4
 8010ecc:	461a      	mov	r2, r3
 8010ece:	6878      	ldr	r0, [r7, #4]
 8010ed0:	f7ff f824 	bl	800ff1c <tcp_route>
 8010ed4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010ed6:	697b      	ldr	r3, [r7, #20]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d102      	bne.n	8010ee2 <tcp_output+0x96>
    return ERR_RTE;
 8010edc:	f06f 0303 	mvn.w	r3, #3
 8010ee0:	e1a3      	b.n	801122a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d003      	beq.n	8010ef0 <tcp_output+0xa4>
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d111      	bne.n	8010f14 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010ef0:	697b      	ldr	r3, [r7, #20]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d002      	beq.n	8010efc <tcp_output+0xb0>
 8010ef6:	697b      	ldr	r3, [r7, #20]
 8010ef8:	3304      	adds	r3, #4
 8010efa:	e000      	b.n	8010efe <tcp_output+0xb2>
 8010efc:	2300      	movs	r3, #0
 8010efe:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010f00:	693b      	ldr	r3, [r7, #16]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d102      	bne.n	8010f0c <tcp_output+0xc0>
      return ERR_RTE;
 8010f06:	f06f 0303 	mvn.w	r3, #3
 8010f0a:	e18e      	b.n	801122a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010f0c:	693b      	ldr	r3, [r7, #16]
 8010f0e:	681a      	ldr	r2, [r3, #0]
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f16:	68db      	ldr	r3, [r3, #12]
 8010f18:	685b      	ldr	r3, [r3, #4]
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f7f8 fff3 	bl	8009f06 <lwip_htonl>
 8010f20:	4602      	mov	r2, r0
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f26:	1ad3      	subs	r3, r2, r3
 8010f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f2a:	8912      	ldrh	r2, [r2, #8]
 8010f2c:	4413      	add	r3, r2
 8010f2e:	69ba      	ldr	r2, [r7, #24]
 8010f30:	429a      	cmp	r2, r3
 8010f32:	d227      	bcs.n	8010f84 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010f3a:	461a      	mov	r2, r3
 8010f3c:	69bb      	ldr	r3, [r7, #24]
 8010f3e:	4293      	cmp	r3, r2
 8010f40:	d114      	bne.n	8010f6c <tcp_output+0x120>
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d110      	bne.n	8010f6c <tcp_output+0x120>
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d10b      	bne.n	8010f6c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	2200      	movs	r2, #0
 8010f58:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	2201      	movs	r2, #1
 8010f60:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	2200      	movs	r2, #0
 8010f68:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	8b5b      	ldrh	r3, [r3, #26]
 8010f70:	f003 0302 	and.w	r3, r3, #2
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	f000 814d 	beq.w	8011214 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8010f7a:	6878      	ldr	r0, [r7, #4]
 8010f7c:	f000 fd6c 	bl	8011a58 <tcp_send_empty_ack>
 8010f80:	4603      	mov	r3, r0
 8010f82:	e152      	b.n	801122a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	2200      	movs	r2, #0
 8010f88:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f90:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010f92:	6a3b      	ldr	r3, [r7, #32]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	f000 811c 	beq.w	80111d2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8010f9a:	e002      	b.n	8010fa2 <tcp_output+0x156>
 8010f9c:	6a3b      	ldr	r3, [r7, #32]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	623b      	str	r3, [r7, #32]
 8010fa2:	6a3b      	ldr	r3, [r7, #32]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d1f8      	bne.n	8010f9c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8010faa:	e112      	b.n	80111d2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fae:	68db      	ldr	r3, [r3, #12]
 8010fb0:	899b      	ldrh	r3, [r3, #12]
 8010fb2:	b29b      	uxth	r3, r3
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	f7f8 ff91 	bl	8009edc <lwip_htons>
 8010fba:	4603      	mov	r3, r0
 8010fbc:	b2db      	uxtb	r3, r3
 8010fbe:	f003 0304 	and.w	r3, r3, #4
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d006      	beq.n	8010fd4 <tcp_output+0x188>
 8010fc6:	4b43      	ldr	r3, [pc, #268]	; (80110d4 <tcp_output+0x288>)
 8010fc8:	f240 5236 	movw	r2, #1334	; 0x536
 8010fcc:	4946      	ldr	r1, [pc, #280]	; (80110e8 <tcp_output+0x29c>)
 8010fce:	4843      	ldr	r0, [pc, #268]	; (80110dc <tcp_output+0x290>)
 8010fd0:	f003 ff68 	bl	8014ea4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d01f      	beq.n	801101c <tcp_output+0x1d0>
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	8b5b      	ldrh	r3, [r3, #26]
 8010fe0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d119      	bne.n	801101c <tcp_output+0x1d0>
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d00b      	beq.n	8011008 <tcp_output+0x1bc>
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d110      	bne.n	801101c <tcp_output+0x1d0>
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ffe:	891a      	ldrh	r2, [r3, #8]
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011004:	429a      	cmp	r2, r3
 8011006:	d209      	bcs.n	801101c <tcp_output+0x1d0>
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801100e:	2b00      	cmp	r3, #0
 8011010:	d004      	beq.n	801101c <tcp_output+0x1d0>
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011018:	2b08      	cmp	r3, #8
 801101a:	d901      	bls.n	8011020 <tcp_output+0x1d4>
 801101c:	2301      	movs	r3, #1
 801101e:	e000      	b.n	8011022 <tcp_output+0x1d6>
 8011020:	2300      	movs	r3, #0
 8011022:	2b00      	cmp	r3, #0
 8011024:	d106      	bne.n	8011034 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	8b5b      	ldrh	r3, [r3, #26]
 801102a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801102e:	2b00      	cmp	r3, #0
 8011030:	f000 80e4 	beq.w	80111fc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	7d1b      	ldrb	r3, [r3, #20]
 8011038:	2b02      	cmp	r3, #2
 801103a:	d00d      	beq.n	8011058 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801103e:	68db      	ldr	r3, [r3, #12]
 8011040:	899b      	ldrh	r3, [r3, #12]
 8011042:	b29c      	uxth	r4, r3
 8011044:	2010      	movs	r0, #16
 8011046:	f7f8 ff49 	bl	8009edc <lwip_htons>
 801104a:	4603      	mov	r3, r0
 801104c:	461a      	mov	r2, r3
 801104e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011050:	68db      	ldr	r3, [r3, #12]
 8011052:	4322      	orrs	r2, r4
 8011054:	b292      	uxth	r2, r2
 8011056:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011058:	697a      	ldr	r2, [r7, #20]
 801105a:	6879      	ldr	r1, [r7, #4]
 801105c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801105e:	f000 f909 	bl	8011274 <tcp_output_segment>
 8011062:	4603      	mov	r3, r0
 8011064:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d009      	beq.n	8011082 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	8b5b      	ldrh	r3, [r3, #26]
 8011072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011076:	b29a      	uxth	r2, r3
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	835a      	strh	r2, [r3, #26]
      return err;
 801107c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011080:	e0d3      	b.n	801122a <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011084:	681a      	ldr	r2, [r3, #0]
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	7d1b      	ldrb	r3, [r3, #20]
 801108e:	2b02      	cmp	r3, #2
 8011090:	d006      	beq.n	80110a0 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	8b5b      	ldrh	r3, [r3, #26]
 8011096:	f023 0303 	bic.w	r3, r3, #3
 801109a:	b29a      	uxth	r2, r3
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80110a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110a2:	68db      	ldr	r3, [r3, #12]
 80110a4:	685b      	ldr	r3, [r3, #4]
 80110a6:	4618      	mov	r0, r3
 80110a8:	f7f8 ff2d 	bl	8009f06 <lwip_htonl>
 80110ac:	4604      	mov	r4, r0
 80110ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110b0:	891b      	ldrh	r3, [r3, #8]
 80110b2:	461d      	mov	r5, r3
 80110b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110b6:	68db      	ldr	r3, [r3, #12]
 80110b8:	899b      	ldrh	r3, [r3, #12]
 80110ba:	b29b      	uxth	r3, r3
 80110bc:	4618      	mov	r0, r3
 80110be:	f7f8 ff0d 	bl	8009edc <lwip_htons>
 80110c2:	4603      	mov	r3, r0
 80110c4:	b2db      	uxtb	r3, r3
 80110c6:	f003 0303 	and.w	r3, r3, #3
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d00e      	beq.n	80110ec <tcp_output+0x2a0>
 80110ce:	2301      	movs	r3, #1
 80110d0:	e00d      	b.n	80110ee <tcp_output+0x2a2>
 80110d2:	bf00      	nop
 80110d4:	08018178 	.word	0x08018178
 80110d8:	080186bc 	.word	0x080186bc
 80110dc:	080181cc 	.word	0x080181cc
 80110e0:	080186d4 	.word	0x080186d4
 80110e4:	2000ab2c 	.word	0x2000ab2c
 80110e8:	080186fc 	.word	0x080186fc
 80110ec:	2300      	movs	r3, #0
 80110ee:	442b      	add	r3, r5
 80110f0:	4423      	add	r3, r4
 80110f2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80110f8:	68bb      	ldr	r3, [r7, #8]
 80110fa:	1ad3      	subs	r3, r2, r3
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	da02      	bge.n	8011106 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	68ba      	ldr	r2, [r7, #8]
 8011104:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011108:	891b      	ldrh	r3, [r3, #8]
 801110a:	461c      	mov	r4, r3
 801110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801110e:	68db      	ldr	r3, [r3, #12]
 8011110:	899b      	ldrh	r3, [r3, #12]
 8011112:	b29b      	uxth	r3, r3
 8011114:	4618      	mov	r0, r3
 8011116:	f7f8 fee1 	bl	8009edc <lwip_htons>
 801111a:	4603      	mov	r3, r0
 801111c:	b2db      	uxtb	r3, r3
 801111e:	f003 0303 	and.w	r3, r3, #3
 8011122:	2b00      	cmp	r3, #0
 8011124:	d001      	beq.n	801112a <tcp_output+0x2de>
 8011126:	2301      	movs	r3, #1
 8011128:	e000      	b.n	801112c <tcp_output+0x2e0>
 801112a:	2300      	movs	r3, #0
 801112c:	4423      	add	r3, r4
 801112e:	2b00      	cmp	r3, #0
 8011130:	d049      	beq.n	80111c6 <tcp_output+0x37a>
      seg->next = NULL;
 8011132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011134:	2200      	movs	r2, #0
 8011136:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801113c:	2b00      	cmp	r3, #0
 801113e:	d105      	bne.n	801114c <tcp_output+0x300>
        pcb->unacked = seg;
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011144:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8011146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011148:	623b      	str	r3, [r7, #32]
 801114a:	e03f      	b.n	80111cc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801114c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801114e:	68db      	ldr	r3, [r3, #12]
 8011150:	685b      	ldr	r3, [r3, #4]
 8011152:	4618      	mov	r0, r3
 8011154:	f7f8 fed7 	bl	8009f06 <lwip_htonl>
 8011158:	4604      	mov	r4, r0
 801115a:	6a3b      	ldr	r3, [r7, #32]
 801115c:	68db      	ldr	r3, [r3, #12]
 801115e:	685b      	ldr	r3, [r3, #4]
 8011160:	4618      	mov	r0, r3
 8011162:	f7f8 fed0 	bl	8009f06 <lwip_htonl>
 8011166:	4603      	mov	r3, r0
 8011168:	1ae3      	subs	r3, r4, r3
 801116a:	2b00      	cmp	r3, #0
 801116c:	da24      	bge.n	80111b8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	3370      	adds	r3, #112	; 0x70
 8011172:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011174:	e002      	b.n	801117c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011176:	69fb      	ldr	r3, [r7, #28]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801117c:	69fb      	ldr	r3, [r7, #28]
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d011      	beq.n	80111a8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011184:	69fb      	ldr	r3, [r7, #28]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	68db      	ldr	r3, [r3, #12]
 801118a:	685b      	ldr	r3, [r3, #4]
 801118c:	4618      	mov	r0, r3
 801118e:	f7f8 feba 	bl	8009f06 <lwip_htonl>
 8011192:	4604      	mov	r4, r0
 8011194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011196:	68db      	ldr	r3, [r3, #12]
 8011198:	685b      	ldr	r3, [r3, #4]
 801119a:	4618      	mov	r0, r3
 801119c:	f7f8 feb3 	bl	8009f06 <lwip_htonl>
 80111a0:	4603      	mov	r3, r0
 80111a2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	dbe6      	blt.n	8011176 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80111a8:	69fb      	ldr	r3, [r7, #28]
 80111aa:	681a      	ldr	r2, [r3, #0]
 80111ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111ae:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80111b0:	69fb      	ldr	r3, [r7, #28]
 80111b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80111b4:	601a      	str	r2, [r3, #0]
 80111b6:	e009      	b.n	80111cc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80111b8:	6a3b      	ldr	r3, [r7, #32]
 80111ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80111bc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80111be:	6a3b      	ldr	r3, [r7, #32]
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	623b      	str	r3, [r7, #32]
 80111c4:	e002      	b.n	80111cc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80111c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80111c8:	f7fb ff35 	bl	800d036 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111d0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80111d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d012      	beq.n	80111fe <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80111d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111da:	68db      	ldr	r3, [r3, #12]
 80111dc:	685b      	ldr	r3, [r3, #4]
 80111de:	4618      	mov	r0, r3
 80111e0:	f7f8 fe91 	bl	8009f06 <lwip_htonl>
 80111e4:	4602      	mov	r2, r0
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80111ea:	1ad3      	subs	r3, r2, r3
 80111ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80111ee:	8912      	ldrh	r2, [r2, #8]
 80111f0:	4413      	add	r3, r2
  while (seg != NULL &&
 80111f2:	69ba      	ldr	r2, [r7, #24]
 80111f4:	429a      	cmp	r2, r3
 80111f6:	f4bf aed9 	bcs.w	8010fac <tcp_output+0x160>
 80111fa:	e000      	b.n	80111fe <tcp_output+0x3b2>
      break;
 80111fc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011202:	2b00      	cmp	r3, #0
 8011204:	d108      	bne.n	8011218 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	2200      	movs	r2, #0
 801120a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801120e:	e004      	b.n	801121a <tcp_output+0x3ce>
    goto output_done;
 8011210:	bf00      	nop
 8011212:	e002      	b.n	801121a <tcp_output+0x3ce>
    goto output_done;
 8011214:	bf00      	nop
 8011216:	e000      	b.n	801121a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011218:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	8b5b      	ldrh	r3, [r3, #26]
 801121e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011222:	b29a      	uxth	r2, r3
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011228:	2300      	movs	r3, #0
}
 801122a:	4618      	mov	r0, r3
 801122c:	3728      	adds	r7, #40	; 0x28
 801122e:	46bd      	mov	sp, r7
 8011230:	bdb0      	pop	{r4, r5, r7, pc}
 8011232:	bf00      	nop

08011234 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011234:	b580      	push	{r7, lr}
 8011236:	b082      	sub	sp, #8
 8011238:	af00      	add	r7, sp, #0
 801123a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d106      	bne.n	8011250 <tcp_output_segment_busy+0x1c>
 8011242:	4b09      	ldr	r3, [pc, #36]	; (8011268 <tcp_output_segment_busy+0x34>)
 8011244:	f240 529a 	movw	r2, #1434	; 0x59a
 8011248:	4908      	ldr	r1, [pc, #32]	; (801126c <tcp_output_segment_busy+0x38>)
 801124a:	4809      	ldr	r0, [pc, #36]	; (8011270 <tcp_output_segment_busy+0x3c>)
 801124c:	f003 fe2a 	bl	8014ea4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	685b      	ldr	r3, [r3, #4]
 8011254:	7b9b      	ldrb	r3, [r3, #14]
 8011256:	2b01      	cmp	r3, #1
 8011258:	d001      	beq.n	801125e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801125a:	2301      	movs	r3, #1
 801125c:	e000      	b.n	8011260 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801125e:	2300      	movs	r3, #0
}
 8011260:	4618      	mov	r0, r3
 8011262:	3708      	adds	r7, #8
 8011264:	46bd      	mov	sp, r7
 8011266:	bd80      	pop	{r7, pc}
 8011268:	08018178 	.word	0x08018178
 801126c:	08018714 	.word	0x08018714
 8011270:	080181cc 	.word	0x080181cc

08011274 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011274:	b5b0      	push	{r4, r5, r7, lr}
 8011276:	b08c      	sub	sp, #48	; 0x30
 8011278:	af04      	add	r7, sp, #16
 801127a:	60f8      	str	r0, [r7, #12]
 801127c:	60b9      	str	r1, [r7, #8]
 801127e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d106      	bne.n	8011294 <tcp_output_segment+0x20>
 8011286:	4b63      	ldr	r3, [pc, #396]	; (8011414 <tcp_output_segment+0x1a0>)
 8011288:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801128c:	4962      	ldr	r1, [pc, #392]	; (8011418 <tcp_output_segment+0x1a4>)
 801128e:	4863      	ldr	r0, [pc, #396]	; (801141c <tcp_output_segment+0x1a8>)
 8011290:	f003 fe08 	bl	8014ea4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011294:	68bb      	ldr	r3, [r7, #8]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d106      	bne.n	80112a8 <tcp_output_segment+0x34>
 801129a:	4b5e      	ldr	r3, [pc, #376]	; (8011414 <tcp_output_segment+0x1a0>)
 801129c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80112a0:	495f      	ldr	r1, [pc, #380]	; (8011420 <tcp_output_segment+0x1ac>)
 80112a2:	485e      	ldr	r0, [pc, #376]	; (801141c <tcp_output_segment+0x1a8>)
 80112a4:	f003 fdfe 	bl	8014ea4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d106      	bne.n	80112bc <tcp_output_segment+0x48>
 80112ae:	4b59      	ldr	r3, [pc, #356]	; (8011414 <tcp_output_segment+0x1a0>)
 80112b0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80112b4:	495b      	ldr	r1, [pc, #364]	; (8011424 <tcp_output_segment+0x1b0>)
 80112b6:	4859      	ldr	r0, [pc, #356]	; (801141c <tcp_output_segment+0x1a8>)
 80112b8:	f003 fdf4 	bl	8014ea4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80112bc:	68f8      	ldr	r0, [r7, #12]
 80112be:	f7ff ffb9 	bl	8011234 <tcp_output_segment_busy>
 80112c2:	4603      	mov	r3, r0
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d001      	beq.n	80112cc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80112c8:	2300      	movs	r3, #0
 80112ca:	e09f      	b.n	801140c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80112cc:	68bb      	ldr	r3, [r7, #8]
 80112ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	68dc      	ldr	r4, [r3, #12]
 80112d4:	4610      	mov	r0, r2
 80112d6:	f7f8 fe16 	bl	8009f06 <lwip_htonl>
 80112da:	4603      	mov	r3, r0
 80112dc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80112de:	68bb      	ldr	r3, [r7, #8]
 80112e0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	68dc      	ldr	r4, [r3, #12]
 80112e6:	4610      	mov	r0, r2
 80112e8:	f7f8 fdf8 	bl	8009edc <lwip_htons>
 80112ec:	4603      	mov	r3, r0
 80112ee:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80112f0:	68bb      	ldr	r3, [r7, #8]
 80112f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112f4:	68ba      	ldr	r2, [r7, #8]
 80112f6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80112f8:	441a      	add	r2, r3
 80112fa:	68bb      	ldr	r3, [r7, #8]
 80112fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	68db      	ldr	r3, [r3, #12]
 8011302:	3314      	adds	r3, #20
 8011304:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	7a9b      	ldrb	r3, [r3, #10]
 801130a:	f003 0301 	and.w	r3, r3, #1
 801130e:	2b00      	cmp	r3, #0
 8011310:	d015      	beq.n	801133e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011312:	68bb      	ldr	r3, [r7, #8]
 8011314:	3304      	adds	r3, #4
 8011316:	461a      	mov	r2, r3
 8011318:	6879      	ldr	r1, [r7, #4]
 801131a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801131e:	f7fc fa37 	bl	800d790 <tcp_eff_send_mss_netif>
 8011322:	4603      	mov	r3, r0
 8011324:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011326:	8b7b      	ldrh	r3, [r7, #26]
 8011328:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801132c:	4618      	mov	r0, r3
 801132e:	f7f8 fdea 	bl	8009f06 <lwip_htonl>
 8011332:	4602      	mov	r2, r0
 8011334:	69fb      	ldr	r3, [r7, #28]
 8011336:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011338:	69fb      	ldr	r3, [r7, #28]
 801133a:	3304      	adds	r3, #4
 801133c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801133e:	68bb      	ldr	r3, [r7, #8]
 8011340:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011344:	2b00      	cmp	r3, #0
 8011346:	da02      	bge.n	801134e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011348:	68bb      	ldr	r3, [r7, #8]
 801134a:	2200      	movs	r2, #0
 801134c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801134e:	68bb      	ldr	r3, [r7, #8]
 8011350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011352:	2b00      	cmp	r3, #0
 8011354:	d10c      	bne.n	8011370 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011356:	4b34      	ldr	r3, [pc, #208]	; (8011428 <tcp_output_segment+0x1b4>)
 8011358:	681a      	ldr	r2, [r3, #0]
 801135a:	68bb      	ldr	r3, [r7, #8]
 801135c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	68db      	ldr	r3, [r3, #12]
 8011362:	685b      	ldr	r3, [r3, #4]
 8011364:	4618      	mov	r0, r3
 8011366:	f7f8 fdce 	bl	8009f06 <lwip_htonl>
 801136a:	4602      	mov	r2, r0
 801136c:	68bb      	ldr	r3, [r7, #8]
 801136e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	68da      	ldr	r2, [r3, #12]
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	685b      	ldr	r3, [r3, #4]
 8011378:	685b      	ldr	r3, [r3, #4]
 801137a:	1ad3      	subs	r3, r2, r3
 801137c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	685b      	ldr	r3, [r3, #4]
 8011382:	8959      	ldrh	r1, [r3, #10]
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	685b      	ldr	r3, [r3, #4]
 8011388:	8b3a      	ldrh	r2, [r7, #24]
 801138a:	1a8a      	subs	r2, r1, r2
 801138c:	b292      	uxth	r2, r2
 801138e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	685b      	ldr	r3, [r3, #4]
 8011394:	8919      	ldrh	r1, [r3, #8]
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	685b      	ldr	r3, [r3, #4]
 801139a:	8b3a      	ldrh	r2, [r7, #24]
 801139c:	1a8a      	subs	r2, r1, r2
 801139e:	b292      	uxth	r2, r2
 80113a0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	685b      	ldr	r3, [r3, #4]
 80113a6:	68fa      	ldr	r2, [r7, #12]
 80113a8:	68d2      	ldr	r2, [r2, #12]
 80113aa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	68db      	ldr	r3, [r3, #12]
 80113b0:	2200      	movs	r2, #0
 80113b2:	741a      	strb	r2, [r3, #16]
 80113b4:	2200      	movs	r2, #0
 80113b6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	68db      	ldr	r3, [r3, #12]
 80113bc:	f103 0214 	add.w	r2, r3, #20
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	7a9b      	ldrb	r3, [r3, #10]
 80113c4:	009b      	lsls	r3, r3, #2
 80113c6:	f003 0304 	and.w	r3, r3, #4
 80113ca:	4413      	add	r3, r2
 80113cc:	69fa      	ldr	r2, [r7, #28]
 80113ce:	429a      	cmp	r2, r3
 80113d0:	d006      	beq.n	80113e0 <tcp_output_segment+0x16c>
 80113d2:	4b10      	ldr	r3, [pc, #64]	; (8011414 <tcp_output_segment+0x1a0>)
 80113d4:	f240 621c 	movw	r2, #1564	; 0x61c
 80113d8:	4914      	ldr	r1, [pc, #80]	; (801142c <tcp_output_segment+0x1b8>)
 80113da:	4810      	ldr	r0, [pc, #64]	; (801141c <tcp_output_segment+0x1a8>)
 80113dc:	f003 fd62 	bl	8014ea4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	6858      	ldr	r0, [r3, #4]
 80113e4:	68b9      	ldr	r1, [r7, #8]
 80113e6:	68bb      	ldr	r3, [r7, #8]
 80113e8:	1d1c      	adds	r4, r3, #4
 80113ea:	68bb      	ldr	r3, [r7, #8]
 80113ec:	7add      	ldrb	r5, [r3, #11]
 80113ee:	68bb      	ldr	r3, [r7, #8]
 80113f0:	7a9b      	ldrb	r3, [r3, #10]
 80113f2:	687a      	ldr	r2, [r7, #4]
 80113f4:	9202      	str	r2, [sp, #8]
 80113f6:	2206      	movs	r2, #6
 80113f8:	9201      	str	r2, [sp, #4]
 80113fa:	9300      	str	r3, [sp, #0]
 80113fc:	462b      	mov	r3, r5
 80113fe:	4622      	mov	r2, r4
 8011400:	f002 faa0 	bl	8013944 <ip4_output_if>
 8011404:	4603      	mov	r3, r0
 8011406:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011408:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801140c:	4618      	mov	r0, r3
 801140e:	3720      	adds	r7, #32
 8011410:	46bd      	mov	sp, r7
 8011412:	bdb0      	pop	{r4, r5, r7, pc}
 8011414:	08018178 	.word	0x08018178
 8011418:	0801873c 	.word	0x0801873c
 801141c:	080181cc 	.word	0x080181cc
 8011420:	0801875c 	.word	0x0801875c
 8011424:	0801877c 	.word	0x0801877c
 8011428:	2000ab1c 	.word	0x2000ab1c
 801142c:	080187a0 	.word	0x080187a0

08011430 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011430:	b5b0      	push	{r4, r5, r7, lr}
 8011432:	b084      	sub	sp, #16
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d106      	bne.n	801144c <tcp_rexmit_rto_prepare+0x1c>
 801143e:	4b31      	ldr	r3, [pc, #196]	; (8011504 <tcp_rexmit_rto_prepare+0xd4>)
 8011440:	f240 6263 	movw	r2, #1635	; 0x663
 8011444:	4930      	ldr	r1, [pc, #192]	; (8011508 <tcp_rexmit_rto_prepare+0xd8>)
 8011446:	4831      	ldr	r0, [pc, #196]	; (801150c <tcp_rexmit_rto_prepare+0xdc>)
 8011448:	f003 fd2c 	bl	8014ea4 <iprintf>

  if (pcb->unacked == NULL) {
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011450:	2b00      	cmp	r3, #0
 8011452:	d102      	bne.n	801145a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011454:	f06f 0305 	mvn.w	r3, #5
 8011458:	e050      	b.n	80114fc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801145e:	60fb      	str	r3, [r7, #12]
 8011460:	e00b      	b.n	801147a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8011462:	68f8      	ldr	r0, [r7, #12]
 8011464:	f7ff fee6 	bl	8011234 <tcp_output_segment_busy>
 8011468:	4603      	mov	r3, r0
 801146a:	2b00      	cmp	r3, #0
 801146c:	d002      	beq.n	8011474 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801146e:	f06f 0305 	mvn.w	r3, #5
 8011472:	e043      	b.n	80114fc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	60fb      	str	r3, [r7, #12]
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d1ef      	bne.n	8011462 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8011482:	68f8      	ldr	r0, [r7, #12]
 8011484:	f7ff fed6 	bl	8011234 <tcp_output_segment_busy>
 8011488:	4603      	mov	r3, r0
 801148a:	2b00      	cmp	r3, #0
 801148c:	d002      	beq.n	8011494 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801148e:	f06f 0305 	mvn.w	r3, #5
 8011492:	e033      	b.n	80114fc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	2200      	movs	r2, #0
 80114a8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	8b5b      	ldrh	r3, [r3, #26]
 80114ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80114b2:	b29a      	uxth	r2, r3
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	68db      	ldr	r3, [r3, #12]
 80114bc:	685b      	ldr	r3, [r3, #4]
 80114be:	4618      	mov	r0, r3
 80114c0:	f7f8 fd21 	bl	8009f06 <lwip_htonl>
 80114c4:	4604      	mov	r4, r0
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	891b      	ldrh	r3, [r3, #8]
 80114ca:	461d      	mov	r5, r3
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	68db      	ldr	r3, [r3, #12]
 80114d0:	899b      	ldrh	r3, [r3, #12]
 80114d2:	b29b      	uxth	r3, r3
 80114d4:	4618      	mov	r0, r3
 80114d6:	f7f8 fd01 	bl	8009edc <lwip_htons>
 80114da:	4603      	mov	r3, r0
 80114dc:	b2db      	uxtb	r3, r3
 80114de:	f003 0303 	and.w	r3, r3, #3
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d001      	beq.n	80114ea <tcp_rexmit_rto_prepare+0xba>
 80114e6:	2301      	movs	r3, #1
 80114e8:	e000      	b.n	80114ec <tcp_rexmit_rto_prepare+0xbc>
 80114ea:	2300      	movs	r3, #0
 80114ec:	442b      	add	r3, r5
 80114ee:	18e2      	adds	r2, r4, r3
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	2200      	movs	r2, #0
 80114f8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80114fa:	2300      	movs	r3, #0
}
 80114fc:	4618      	mov	r0, r3
 80114fe:	3710      	adds	r7, #16
 8011500:	46bd      	mov	sp, r7
 8011502:	bdb0      	pop	{r4, r5, r7, pc}
 8011504:	08018178 	.word	0x08018178
 8011508:	080187b4 	.word	0x080187b4
 801150c:	080181cc 	.word	0x080181cc

08011510 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8011510:	b580      	push	{r7, lr}
 8011512:	b082      	sub	sp, #8
 8011514:	af00      	add	r7, sp, #0
 8011516:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d106      	bne.n	801152c <tcp_rexmit_rto_commit+0x1c>
 801151e:	4b0d      	ldr	r3, [pc, #52]	; (8011554 <tcp_rexmit_rto_commit+0x44>)
 8011520:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011524:	490c      	ldr	r1, [pc, #48]	; (8011558 <tcp_rexmit_rto_commit+0x48>)
 8011526:	480d      	ldr	r0, [pc, #52]	; (801155c <tcp_rexmit_rto_commit+0x4c>)
 8011528:	f003 fcbc 	bl	8014ea4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011532:	2bff      	cmp	r3, #255	; 0xff
 8011534:	d007      	beq.n	8011546 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801153c:	3301      	adds	r3, #1
 801153e:	b2da      	uxtb	r2, r3
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8011546:	6878      	ldr	r0, [r7, #4]
 8011548:	f7ff fc80 	bl	8010e4c <tcp_output>
}
 801154c:	bf00      	nop
 801154e:	3708      	adds	r7, #8
 8011550:	46bd      	mov	sp, r7
 8011552:	bd80      	pop	{r7, pc}
 8011554:	08018178 	.word	0x08018178
 8011558:	080187d8 	.word	0x080187d8
 801155c:	080181cc 	.word	0x080181cc

08011560 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011560:	b580      	push	{r7, lr}
 8011562:	b082      	sub	sp, #8
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d106      	bne.n	801157c <tcp_rexmit_rto+0x1c>
 801156e:	4b0a      	ldr	r3, [pc, #40]	; (8011598 <tcp_rexmit_rto+0x38>)
 8011570:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8011574:	4909      	ldr	r1, [pc, #36]	; (801159c <tcp_rexmit_rto+0x3c>)
 8011576:	480a      	ldr	r0, [pc, #40]	; (80115a0 <tcp_rexmit_rto+0x40>)
 8011578:	f003 fc94 	bl	8014ea4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801157c:	6878      	ldr	r0, [r7, #4]
 801157e:	f7ff ff57 	bl	8011430 <tcp_rexmit_rto_prepare>
 8011582:	4603      	mov	r3, r0
 8011584:	2b00      	cmp	r3, #0
 8011586:	d102      	bne.n	801158e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8011588:	6878      	ldr	r0, [r7, #4]
 801158a:	f7ff ffc1 	bl	8011510 <tcp_rexmit_rto_commit>
  }
}
 801158e:	bf00      	nop
 8011590:	3708      	adds	r7, #8
 8011592:	46bd      	mov	sp, r7
 8011594:	bd80      	pop	{r7, pc}
 8011596:	bf00      	nop
 8011598:	08018178 	.word	0x08018178
 801159c:	080187fc 	.word	0x080187fc
 80115a0:	080181cc 	.word	0x080181cc

080115a4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80115a4:	b590      	push	{r4, r7, lr}
 80115a6:	b085      	sub	sp, #20
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d106      	bne.n	80115c0 <tcp_rexmit+0x1c>
 80115b2:	4b2f      	ldr	r3, [pc, #188]	; (8011670 <tcp_rexmit+0xcc>)
 80115b4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80115b8:	492e      	ldr	r1, [pc, #184]	; (8011674 <tcp_rexmit+0xd0>)
 80115ba:	482f      	ldr	r0, [pc, #188]	; (8011678 <tcp_rexmit+0xd4>)
 80115bc:	f003 fc72 	bl	8014ea4 <iprintf>

  if (pcb->unacked == NULL) {
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d102      	bne.n	80115ce <tcp_rexmit+0x2a>
    return ERR_VAL;
 80115c8:	f06f 0305 	mvn.w	r3, #5
 80115cc:	e04c      	b.n	8011668 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80115d2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80115d4:	68b8      	ldr	r0, [r7, #8]
 80115d6:	f7ff fe2d 	bl	8011234 <tcp_output_segment_busy>
 80115da:	4603      	mov	r3, r0
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d002      	beq.n	80115e6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80115e0:	f06f 0305 	mvn.w	r3, #5
 80115e4:	e040      	b.n	8011668 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80115e6:	68bb      	ldr	r3, [r7, #8]
 80115e8:	681a      	ldr	r2, [r3, #0]
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	336c      	adds	r3, #108	; 0x6c
 80115f2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80115f4:	e002      	b.n	80115fc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d011      	beq.n	8011628 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	68db      	ldr	r3, [r3, #12]
 801160a:	685b      	ldr	r3, [r3, #4]
 801160c:	4618      	mov	r0, r3
 801160e:	f7f8 fc7a 	bl	8009f06 <lwip_htonl>
 8011612:	4604      	mov	r4, r0
 8011614:	68bb      	ldr	r3, [r7, #8]
 8011616:	68db      	ldr	r3, [r3, #12]
 8011618:	685b      	ldr	r3, [r3, #4]
 801161a:	4618      	mov	r0, r3
 801161c:	f7f8 fc73 	bl	8009f06 <lwip_htonl>
 8011620:	4603      	mov	r3, r0
 8011622:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011624:	2b00      	cmp	r3, #0
 8011626:	dbe6      	blt.n	80115f6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	681a      	ldr	r2, [r3, #0]
 801162c:	68bb      	ldr	r3, [r7, #8]
 801162e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	68ba      	ldr	r2, [r7, #8]
 8011634:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8011636:	68bb      	ldr	r3, [r7, #8]
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d103      	bne.n	8011646 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	2200      	movs	r2, #0
 8011642:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801164c:	2bff      	cmp	r3, #255	; 0xff
 801164e:	d007      	beq.n	8011660 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011656:	3301      	adds	r3, #1
 8011658:	b2da      	uxtb	r2, r3
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	2200      	movs	r2, #0
 8011664:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8011666:	2300      	movs	r3, #0
}
 8011668:	4618      	mov	r0, r3
 801166a:	3714      	adds	r7, #20
 801166c:	46bd      	mov	sp, r7
 801166e:	bd90      	pop	{r4, r7, pc}
 8011670:	08018178 	.word	0x08018178
 8011674:	08018818 	.word	0x08018818
 8011678:	080181cc 	.word	0x080181cc

0801167c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801167c:	b580      	push	{r7, lr}
 801167e:	b082      	sub	sp, #8
 8011680:	af00      	add	r7, sp, #0
 8011682:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d106      	bne.n	8011698 <tcp_rexmit_fast+0x1c>
 801168a:	4b2a      	ldr	r3, [pc, #168]	; (8011734 <tcp_rexmit_fast+0xb8>)
 801168c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8011690:	4929      	ldr	r1, [pc, #164]	; (8011738 <tcp_rexmit_fast+0xbc>)
 8011692:	482a      	ldr	r0, [pc, #168]	; (801173c <tcp_rexmit_fast+0xc0>)
 8011694:	f003 fc06 	bl	8014ea4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801169c:	2b00      	cmp	r3, #0
 801169e:	d045      	beq.n	801172c <tcp_rexmit_fast+0xb0>
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	8b5b      	ldrh	r3, [r3, #26]
 80116a4:	f003 0304 	and.w	r3, r3, #4
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d13f      	bne.n	801172c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80116ac:	6878      	ldr	r0, [r7, #4]
 80116ae:	f7ff ff79 	bl	80115a4 <tcp_rexmit>
 80116b2:	4603      	mov	r3, r0
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d139      	bne.n	801172c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80116c4:	4293      	cmp	r3, r2
 80116c6:	bf28      	it	cs
 80116c8:	4613      	movcs	r3, r2
 80116ca:	b29b      	uxth	r3, r3
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	da00      	bge.n	80116d2 <tcp_rexmit_fast+0x56>
 80116d0:	3301      	adds	r3, #1
 80116d2:	105b      	asrs	r3, r3, #1
 80116d4:	b29a      	uxth	r2, r3
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80116e2:	461a      	mov	r2, r3
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80116e8:	005b      	lsls	r3, r3, #1
 80116ea:	429a      	cmp	r2, r3
 80116ec:	d206      	bcs.n	80116fc <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80116f2:	005b      	lsls	r3, r3, #1
 80116f4:	b29a      	uxth	r2, r3
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011706:	4619      	mov	r1, r3
 8011708:	0049      	lsls	r1, r1, #1
 801170a:	440b      	add	r3, r1
 801170c:	b29b      	uxth	r3, r3
 801170e:	4413      	add	r3, r2
 8011710:	b29a      	uxth	r2, r3
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	8b5b      	ldrh	r3, [r3, #26]
 801171c:	f043 0304 	orr.w	r3, r3, #4
 8011720:	b29a      	uxth	r2, r3
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	2200      	movs	r2, #0
 801172a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801172c:	bf00      	nop
 801172e:	3708      	adds	r7, #8
 8011730:	46bd      	mov	sp, r7
 8011732:	bd80      	pop	{r7, pc}
 8011734:	08018178 	.word	0x08018178
 8011738:	08018830 	.word	0x08018830
 801173c:	080181cc 	.word	0x080181cc

08011740 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8011740:	b580      	push	{r7, lr}
 8011742:	b086      	sub	sp, #24
 8011744:	af00      	add	r7, sp, #0
 8011746:	60f8      	str	r0, [r7, #12]
 8011748:	607b      	str	r3, [r7, #4]
 801174a:	460b      	mov	r3, r1
 801174c:	817b      	strh	r3, [r7, #10]
 801174e:	4613      	mov	r3, r2
 8011750:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8011752:	897a      	ldrh	r2, [r7, #10]
 8011754:	893b      	ldrh	r3, [r7, #8]
 8011756:	4413      	add	r3, r2
 8011758:	b29b      	uxth	r3, r3
 801175a:	3314      	adds	r3, #20
 801175c:	b29b      	uxth	r3, r3
 801175e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011762:	4619      	mov	r1, r3
 8011764:	2022      	movs	r0, #34	; 0x22
 8011766:	f7f9 fca9 	bl	800b0bc <pbuf_alloc>
 801176a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801176c:	697b      	ldr	r3, [r7, #20]
 801176e:	2b00      	cmp	r3, #0
 8011770:	d04d      	beq.n	801180e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011772:	897b      	ldrh	r3, [r7, #10]
 8011774:	3313      	adds	r3, #19
 8011776:	697a      	ldr	r2, [r7, #20]
 8011778:	8952      	ldrh	r2, [r2, #10]
 801177a:	4293      	cmp	r3, r2
 801177c:	db06      	blt.n	801178c <tcp_output_alloc_header_common+0x4c>
 801177e:	4b26      	ldr	r3, [pc, #152]	; (8011818 <tcp_output_alloc_header_common+0xd8>)
 8011780:	f240 7223 	movw	r2, #1827	; 0x723
 8011784:	4925      	ldr	r1, [pc, #148]	; (801181c <tcp_output_alloc_header_common+0xdc>)
 8011786:	4826      	ldr	r0, [pc, #152]	; (8011820 <tcp_output_alloc_header_common+0xe0>)
 8011788:	f003 fb8c 	bl	8014ea4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801178c:	697b      	ldr	r3, [r7, #20]
 801178e:	685b      	ldr	r3, [r3, #4]
 8011790:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8011792:	8c3b      	ldrh	r3, [r7, #32]
 8011794:	4618      	mov	r0, r3
 8011796:	f7f8 fba1 	bl	8009edc <lwip_htons>
 801179a:	4603      	mov	r3, r0
 801179c:	461a      	mov	r2, r3
 801179e:	693b      	ldr	r3, [r7, #16]
 80117a0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80117a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80117a4:	4618      	mov	r0, r3
 80117a6:	f7f8 fb99 	bl	8009edc <lwip_htons>
 80117aa:	4603      	mov	r3, r0
 80117ac:	461a      	mov	r2, r3
 80117ae:	693b      	ldr	r3, [r7, #16]
 80117b0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80117b2:	693b      	ldr	r3, [r7, #16]
 80117b4:	687a      	ldr	r2, [r7, #4]
 80117b6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80117b8:	68f8      	ldr	r0, [r7, #12]
 80117ba:	f7f8 fba4 	bl	8009f06 <lwip_htonl>
 80117be:	4602      	mov	r2, r0
 80117c0:	693b      	ldr	r3, [r7, #16]
 80117c2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80117c4:	897b      	ldrh	r3, [r7, #10]
 80117c6:	089b      	lsrs	r3, r3, #2
 80117c8:	b29b      	uxth	r3, r3
 80117ca:	3305      	adds	r3, #5
 80117cc:	b29b      	uxth	r3, r3
 80117ce:	031b      	lsls	r3, r3, #12
 80117d0:	b29a      	uxth	r2, r3
 80117d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80117d6:	b29b      	uxth	r3, r3
 80117d8:	4313      	orrs	r3, r2
 80117da:	b29b      	uxth	r3, r3
 80117dc:	4618      	mov	r0, r3
 80117de:	f7f8 fb7d 	bl	8009edc <lwip_htons>
 80117e2:	4603      	mov	r3, r0
 80117e4:	461a      	mov	r2, r3
 80117e6:	693b      	ldr	r3, [r7, #16]
 80117e8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80117ea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80117ec:	4618      	mov	r0, r3
 80117ee:	f7f8 fb75 	bl	8009edc <lwip_htons>
 80117f2:	4603      	mov	r3, r0
 80117f4:	461a      	mov	r2, r3
 80117f6:	693b      	ldr	r3, [r7, #16]
 80117f8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80117fa:	693b      	ldr	r3, [r7, #16]
 80117fc:	2200      	movs	r2, #0
 80117fe:	741a      	strb	r2, [r3, #16]
 8011800:	2200      	movs	r2, #0
 8011802:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011804:	693b      	ldr	r3, [r7, #16]
 8011806:	2200      	movs	r2, #0
 8011808:	749a      	strb	r2, [r3, #18]
 801180a:	2200      	movs	r2, #0
 801180c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801180e:	697b      	ldr	r3, [r7, #20]
}
 8011810:	4618      	mov	r0, r3
 8011812:	3718      	adds	r7, #24
 8011814:	46bd      	mov	sp, r7
 8011816:	bd80      	pop	{r7, pc}
 8011818:	08018178 	.word	0x08018178
 801181c:	08018850 	.word	0x08018850
 8011820:	080181cc 	.word	0x080181cc

08011824 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011824:	b5b0      	push	{r4, r5, r7, lr}
 8011826:	b08a      	sub	sp, #40	; 0x28
 8011828:	af04      	add	r7, sp, #16
 801182a:	60f8      	str	r0, [r7, #12]
 801182c:	607b      	str	r3, [r7, #4]
 801182e:	460b      	mov	r3, r1
 8011830:	817b      	strh	r3, [r7, #10]
 8011832:	4613      	mov	r3, r2
 8011834:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d106      	bne.n	801184a <tcp_output_alloc_header+0x26>
 801183c:	4b15      	ldr	r3, [pc, #84]	; (8011894 <tcp_output_alloc_header+0x70>)
 801183e:	f240 7242 	movw	r2, #1858	; 0x742
 8011842:	4915      	ldr	r1, [pc, #84]	; (8011898 <tcp_output_alloc_header+0x74>)
 8011844:	4815      	ldr	r0, [pc, #84]	; (801189c <tcp_output_alloc_header+0x78>)
 8011846:	f003 fb2d 	bl	8014ea4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	8adb      	ldrh	r3, [r3, #22]
 8011852:	68fa      	ldr	r2, [r7, #12]
 8011854:	8b12      	ldrh	r2, [r2, #24]
 8011856:	68f9      	ldr	r1, [r7, #12]
 8011858:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801185a:	893d      	ldrh	r5, [r7, #8]
 801185c:	897c      	ldrh	r4, [r7, #10]
 801185e:	9103      	str	r1, [sp, #12]
 8011860:	2110      	movs	r1, #16
 8011862:	9102      	str	r1, [sp, #8]
 8011864:	9201      	str	r2, [sp, #4]
 8011866:	9300      	str	r3, [sp, #0]
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	462a      	mov	r2, r5
 801186c:	4621      	mov	r1, r4
 801186e:	f7ff ff67 	bl	8011740 <tcp_output_alloc_header_common>
 8011872:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011874:	697b      	ldr	r3, [r7, #20]
 8011876:	2b00      	cmp	r3, #0
 8011878:	d006      	beq.n	8011888 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801187e:	68fa      	ldr	r2, [r7, #12]
 8011880:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011882:	441a      	add	r2, r3
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8011888:	697b      	ldr	r3, [r7, #20]
}
 801188a:	4618      	mov	r0, r3
 801188c:	3718      	adds	r7, #24
 801188e:	46bd      	mov	sp, r7
 8011890:	bdb0      	pop	{r4, r5, r7, pc}
 8011892:	bf00      	nop
 8011894:	08018178 	.word	0x08018178
 8011898:	08018880 	.word	0x08018880
 801189c:	080181cc 	.word	0x080181cc

080118a0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80118a0:	b580      	push	{r7, lr}
 80118a2:	b088      	sub	sp, #32
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	60f8      	str	r0, [r7, #12]
 80118a8:	60b9      	str	r1, [r7, #8]
 80118aa:	4611      	mov	r1, r2
 80118ac:	461a      	mov	r2, r3
 80118ae:	460b      	mov	r3, r1
 80118b0:	71fb      	strb	r3, [r7, #7]
 80118b2:	4613      	mov	r3, r2
 80118b4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80118b6:	2300      	movs	r3, #0
 80118b8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80118ba:	68bb      	ldr	r3, [r7, #8]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d106      	bne.n	80118ce <tcp_output_fill_options+0x2e>
 80118c0:	4b13      	ldr	r3, [pc, #76]	; (8011910 <tcp_output_fill_options+0x70>)
 80118c2:	f240 7256 	movw	r2, #1878	; 0x756
 80118c6:	4913      	ldr	r1, [pc, #76]	; (8011914 <tcp_output_fill_options+0x74>)
 80118c8:	4813      	ldr	r0, [pc, #76]	; (8011918 <tcp_output_fill_options+0x78>)
 80118ca:	f003 faeb 	bl	8014ea4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80118ce:	68bb      	ldr	r3, [r7, #8]
 80118d0:	685b      	ldr	r3, [r3, #4]
 80118d2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80118d4:	69bb      	ldr	r3, [r7, #24]
 80118d6:	3314      	adds	r3, #20
 80118d8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80118da:	69bb      	ldr	r3, [r7, #24]
 80118dc:	f103 0214 	add.w	r2, r3, #20
 80118e0:	8bfb      	ldrh	r3, [r7, #30]
 80118e2:	009b      	lsls	r3, r3, #2
 80118e4:	4619      	mov	r1, r3
 80118e6:	79fb      	ldrb	r3, [r7, #7]
 80118e8:	009b      	lsls	r3, r3, #2
 80118ea:	f003 0304 	and.w	r3, r3, #4
 80118ee:	440b      	add	r3, r1
 80118f0:	4413      	add	r3, r2
 80118f2:	697a      	ldr	r2, [r7, #20]
 80118f4:	429a      	cmp	r2, r3
 80118f6:	d006      	beq.n	8011906 <tcp_output_fill_options+0x66>
 80118f8:	4b05      	ldr	r3, [pc, #20]	; (8011910 <tcp_output_fill_options+0x70>)
 80118fa:	f240 7275 	movw	r2, #1909	; 0x775
 80118fe:	4907      	ldr	r1, [pc, #28]	; (801191c <tcp_output_fill_options+0x7c>)
 8011900:	4805      	ldr	r0, [pc, #20]	; (8011918 <tcp_output_fill_options+0x78>)
 8011902:	f003 facf 	bl	8014ea4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8011906:	bf00      	nop
 8011908:	3720      	adds	r7, #32
 801190a:	46bd      	mov	sp, r7
 801190c:	bd80      	pop	{r7, pc}
 801190e:	bf00      	nop
 8011910:	08018178 	.word	0x08018178
 8011914:	080188a8 	.word	0x080188a8
 8011918:	080181cc 	.word	0x080181cc
 801191c:	080187a0 	.word	0x080187a0

08011920 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011920:	b580      	push	{r7, lr}
 8011922:	b08a      	sub	sp, #40	; 0x28
 8011924:	af04      	add	r7, sp, #16
 8011926:	60f8      	str	r0, [r7, #12]
 8011928:	60b9      	str	r1, [r7, #8]
 801192a:	607a      	str	r2, [r7, #4]
 801192c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801192e:	68bb      	ldr	r3, [r7, #8]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d106      	bne.n	8011942 <tcp_output_control_segment+0x22>
 8011934:	4b1c      	ldr	r3, [pc, #112]	; (80119a8 <tcp_output_control_segment+0x88>)
 8011936:	f240 7287 	movw	r2, #1927	; 0x787
 801193a:	491c      	ldr	r1, [pc, #112]	; (80119ac <tcp_output_control_segment+0x8c>)
 801193c:	481c      	ldr	r0, [pc, #112]	; (80119b0 <tcp_output_control_segment+0x90>)
 801193e:	f003 fab1 	bl	8014ea4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011942:	683a      	ldr	r2, [r7, #0]
 8011944:	6879      	ldr	r1, [r7, #4]
 8011946:	68f8      	ldr	r0, [r7, #12]
 8011948:	f7fe fae8 	bl	800ff1c <tcp_route>
 801194c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801194e:	693b      	ldr	r3, [r7, #16]
 8011950:	2b00      	cmp	r3, #0
 8011952:	d102      	bne.n	801195a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011954:	23fc      	movs	r3, #252	; 0xfc
 8011956:	75fb      	strb	r3, [r7, #23]
 8011958:	e01c      	b.n	8011994 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d006      	beq.n	801196e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	7adb      	ldrb	r3, [r3, #11]
 8011964:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	7a9b      	ldrb	r3, [r3, #10]
 801196a:	757b      	strb	r3, [r7, #21]
 801196c:	e003      	b.n	8011976 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801196e:	23ff      	movs	r3, #255	; 0xff
 8011970:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011972:	2300      	movs	r3, #0
 8011974:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011976:	7dba      	ldrb	r2, [r7, #22]
 8011978:	693b      	ldr	r3, [r7, #16]
 801197a:	9302      	str	r3, [sp, #8]
 801197c:	2306      	movs	r3, #6
 801197e:	9301      	str	r3, [sp, #4]
 8011980:	7d7b      	ldrb	r3, [r7, #21]
 8011982:	9300      	str	r3, [sp, #0]
 8011984:	4613      	mov	r3, r2
 8011986:	683a      	ldr	r2, [r7, #0]
 8011988:	6879      	ldr	r1, [r7, #4]
 801198a:	68b8      	ldr	r0, [r7, #8]
 801198c:	f001 ffda 	bl	8013944 <ip4_output_if>
 8011990:	4603      	mov	r3, r0
 8011992:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011994:	68b8      	ldr	r0, [r7, #8]
 8011996:	f7f9 fe75 	bl	800b684 <pbuf_free>
  return err;
 801199a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801199e:	4618      	mov	r0, r3
 80119a0:	3718      	adds	r7, #24
 80119a2:	46bd      	mov	sp, r7
 80119a4:	bd80      	pop	{r7, pc}
 80119a6:	bf00      	nop
 80119a8:	08018178 	.word	0x08018178
 80119ac:	080188d0 	.word	0x080188d0
 80119b0:	080181cc 	.word	0x080181cc

080119b4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80119b4:	b590      	push	{r4, r7, lr}
 80119b6:	b08b      	sub	sp, #44	; 0x2c
 80119b8:	af04      	add	r7, sp, #16
 80119ba:	60f8      	str	r0, [r7, #12]
 80119bc:	60b9      	str	r1, [r7, #8]
 80119be:	607a      	str	r2, [r7, #4]
 80119c0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80119c2:	683b      	ldr	r3, [r7, #0]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d106      	bne.n	80119d6 <tcp_rst+0x22>
 80119c8:	4b1f      	ldr	r3, [pc, #124]	; (8011a48 <tcp_rst+0x94>)
 80119ca:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80119ce:	491f      	ldr	r1, [pc, #124]	; (8011a4c <tcp_rst+0x98>)
 80119d0:	481f      	ldr	r0, [pc, #124]	; (8011a50 <tcp_rst+0x9c>)
 80119d2:	f003 fa67 	bl	8014ea4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80119d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d106      	bne.n	80119ea <tcp_rst+0x36>
 80119dc:	4b1a      	ldr	r3, [pc, #104]	; (8011a48 <tcp_rst+0x94>)
 80119de:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80119e2:	491c      	ldr	r1, [pc, #112]	; (8011a54 <tcp_rst+0xa0>)
 80119e4:	481a      	ldr	r0, [pc, #104]	; (8011a50 <tcp_rst+0x9c>)
 80119e6:	f003 fa5d 	bl	8014ea4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80119ea:	2300      	movs	r3, #0
 80119ec:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80119ee:	f246 0308 	movw	r3, #24584	; 0x6008
 80119f2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80119f4:	7dfb      	ldrb	r3, [r7, #23]
 80119f6:	b29c      	uxth	r4, r3
 80119f8:	68b8      	ldr	r0, [r7, #8]
 80119fa:	f7f8 fa84 	bl	8009f06 <lwip_htonl>
 80119fe:	4602      	mov	r2, r0
 8011a00:	8abb      	ldrh	r3, [r7, #20]
 8011a02:	9303      	str	r3, [sp, #12]
 8011a04:	2314      	movs	r3, #20
 8011a06:	9302      	str	r3, [sp, #8]
 8011a08:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011a0a:	9301      	str	r3, [sp, #4]
 8011a0c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011a0e:	9300      	str	r3, [sp, #0]
 8011a10:	4613      	mov	r3, r2
 8011a12:	2200      	movs	r2, #0
 8011a14:	4621      	mov	r1, r4
 8011a16:	6878      	ldr	r0, [r7, #4]
 8011a18:	f7ff fe92 	bl	8011740 <tcp_output_alloc_header_common>
 8011a1c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011a1e:	693b      	ldr	r3, [r7, #16]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d00c      	beq.n	8011a3e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011a24:	7dfb      	ldrb	r3, [r7, #23]
 8011a26:	2200      	movs	r2, #0
 8011a28:	6939      	ldr	r1, [r7, #16]
 8011a2a:	68f8      	ldr	r0, [r7, #12]
 8011a2c:	f7ff ff38 	bl	80118a0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a32:	683a      	ldr	r2, [r7, #0]
 8011a34:	6939      	ldr	r1, [r7, #16]
 8011a36:	68f8      	ldr	r0, [r7, #12]
 8011a38:	f7ff ff72 	bl	8011920 <tcp_output_control_segment>
 8011a3c:	e000      	b.n	8011a40 <tcp_rst+0x8c>
    return;
 8011a3e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011a40:	371c      	adds	r7, #28
 8011a42:	46bd      	mov	sp, r7
 8011a44:	bd90      	pop	{r4, r7, pc}
 8011a46:	bf00      	nop
 8011a48:	08018178 	.word	0x08018178
 8011a4c:	080188fc 	.word	0x080188fc
 8011a50:	080181cc 	.word	0x080181cc
 8011a54:	08018918 	.word	0x08018918

08011a58 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011a58:	b590      	push	{r4, r7, lr}
 8011a5a:	b087      	sub	sp, #28
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011a60:	2300      	movs	r3, #0
 8011a62:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011a64:	2300      	movs	r3, #0
 8011a66:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d106      	bne.n	8011a7c <tcp_send_empty_ack+0x24>
 8011a6e:	4b28      	ldr	r3, [pc, #160]	; (8011b10 <tcp_send_empty_ack+0xb8>)
 8011a70:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8011a74:	4927      	ldr	r1, [pc, #156]	; (8011b14 <tcp_send_empty_ack+0xbc>)
 8011a76:	4828      	ldr	r0, [pc, #160]	; (8011b18 <tcp_send_empty_ack+0xc0>)
 8011a78:	f003 fa14 	bl	8014ea4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011a7c:	7dfb      	ldrb	r3, [r7, #23]
 8011a7e:	009b      	lsls	r3, r3, #2
 8011a80:	b2db      	uxtb	r3, r3
 8011a82:	f003 0304 	and.w	r3, r3, #4
 8011a86:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011a88:	7d7b      	ldrb	r3, [r7, #21]
 8011a8a:	b29c      	uxth	r4, r3
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a90:	4618      	mov	r0, r3
 8011a92:	f7f8 fa38 	bl	8009f06 <lwip_htonl>
 8011a96:	4603      	mov	r3, r0
 8011a98:	2200      	movs	r2, #0
 8011a9a:	4621      	mov	r1, r4
 8011a9c:	6878      	ldr	r0, [r7, #4]
 8011a9e:	f7ff fec1 	bl	8011824 <tcp_output_alloc_header>
 8011aa2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011aa4:	693b      	ldr	r3, [r7, #16]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d109      	bne.n	8011abe <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	8b5b      	ldrh	r3, [r3, #26]
 8011aae:	f043 0303 	orr.w	r3, r3, #3
 8011ab2:	b29a      	uxth	r2, r3
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011ab8:	f06f 0301 	mvn.w	r3, #1
 8011abc:	e023      	b.n	8011b06 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011abe:	7dbb      	ldrb	r3, [r7, #22]
 8011ac0:	7dfa      	ldrb	r2, [r7, #23]
 8011ac2:	6939      	ldr	r1, [r7, #16]
 8011ac4:	6878      	ldr	r0, [r7, #4]
 8011ac6:	f7ff feeb 	bl	80118a0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011aca:	687a      	ldr	r2, [r7, #4]
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	3304      	adds	r3, #4
 8011ad0:	6939      	ldr	r1, [r7, #16]
 8011ad2:	6878      	ldr	r0, [r7, #4]
 8011ad4:	f7ff ff24 	bl	8011920 <tcp_output_control_segment>
 8011ad8:	4603      	mov	r3, r0
 8011ada:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011adc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d007      	beq.n	8011af4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	8b5b      	ldrh	r3, [r3, #26]
 8011ae8:	f043 0303 	orr.w	r3, r3, #3
 8011aec:	b29a      	uxth	r2, r3
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	835a      	strh	r2, [r3, #26]
 8011af2:	e006      	b.n	8011b02 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	8b5b      	ldrh	r3, [r3, #26]
 8011af8:	f023 0303 	bic.w	r3, r3, #3
 8011afc:	b29a      	uxth	r2, r3
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011b06:	4618      	mov	r0, r3
 8011b08:	371c      	adds	r7, #28
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd90      	pop	{r4, r7, pc}
 8011b0e:	bf00      	nop
 8011b10:	08018178 	.word	0x08018178
 8011b14:	08018934 	.word	0x08018934
 8011b18:	080181cc 	.word	0x080181cc

08011b1c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011b1c:	b590      	push	{r4, r7, lr}
 8011b1e:	b087      	sub	sp, #28
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011b24:	2300      	movs	r3, #0
 8011b26:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d106      	bne.n	8011b3c <tcp_keepalive+0x20>
 8011b2e:	4b18      	ldr	r3, [pc, #96]	; (8011b90 <tcp_keepalive+0x74>)
 8011b30:	f640 0224 	movw	r2, #2084	; 0x824
 8011b34:	4917      	ldr	r1, [pc, #92]	; (8011b94 <tcp_keepalive+0x78>)
 8011b36:	4818      	ldr	r0, [pc, #96]	; (8011b98 <tcp_keepalive+0x7c>)
 8011b38:	f003 f9b4 	bl	8014ea4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011b3c:	7dfb      	ldrb	r3, [r7, #23]
 8011b3e:	b29c      	uxth	r4, r3
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b44:	3b01      	subs	r3, #1
 8011b46:	4618      	mov	r0, r3
 8011b48:	f7f8 f9dd 	bl	8009f06 <lwip_htonl>
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	2200      	movs	r2, #0
 8011b50:	4621      	mov	r1, r4
 8011b52:	6878      	ldr	r0, [r7, #4]
 8011b54:	f7ff fe66 	bl	8011824 <tcp_output_alloc_header>
 8011b58:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011b5a:	693b      	ldr	r3, [r7, #16]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d102      	bne.n	8011b66 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011b60:	f04f 33ff 	mov.w	r3, #4294967295
 8011b64:	e010      	b.n	8011b88 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011b66:	7dfb      	ldrb	r3, [r7, #23]
 8011b68:	2200      	movs	r2, #0
 8011b6a:	6939      	ldr	r1, [r7, #16]
 8011b6c:	6878      	ldr	r0, [r7, #4]
 8011b6e:	f7ff fe97 	bl	80118a0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011b72:	687a      	ldr	r2, [r7, #4]
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	3304      	adds	r3, #4
 8011b78:	6939      	ldr	r1, [r7, #16]
 8011b7a:	6878      	ldr	r0, [r7, #4]
 8011b7c:	f7ff fed0 	bl	8011920 <tcp_output_control_segment>
 8011b80:	4603      	mov	r3, r0
 8011b82:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011b84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011b88:	4618      	mov	r0, r3
 8011b8a:	371c      	adds	r7, #28
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	bd90      	pop	{r4, r7, pc}
 8011b90:	08018178 	.word	0x08018178
 8011b94:	08018954 	.word	0x08018954
 8011b98:	080181cc 	.word	0x080181cc

08011b9c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011b9c:	b590      	push	{r4, r7, lr}
 8011b9e:	b08b      	sub	sp, #44	; 0x2c
 8011ba0:	af00      	add	r7, sp, #0
 8011ba2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011ba4:	2300      	movs	r3, #0
 8011ba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d106      	bne.n	8011bbe <tcp_zero_window_probe+0x22>
 8011bb0:	4b4c      	ldr	r3, [pc, #304]	; (8011ce4 <tcp_zero_window_probe+0x148>)
 8011bb2:	f640 024f 	movw	r2, #2127	; 0x84f
 8011bb6:	494c      	ldr	r1, [pc, #304]	; (8011ce8 <tcp_zero_window_probe+0x14c>)
 8011bb8:	484c      	ldr	r0, [pc, #304]	; (8011cec <tcp_zero_window_probe+0x150>)
 8011bba:	f003 f973 	bl	8014ea4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bc2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011bc4:	6a3b      	ldr	r3, [r7, #32]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d101      	bne.n	8011bce <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011bca:	2300      	movs	r3, #0
 8011bcc:	e086      	b.n	8011cdc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011bd4:	2bff      	cmp	r3, #255	; 0xff
 8011bd6:	d007      	beq.n	8011be8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011bde:	3301      	adds	r3, #1
 8011be0:	b2da      	uxtb	r2, r3
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011be8:	6a3b      	ldr	r3, [r7, #32]
 8011bea:	68db      	ldr	r3, [r3, #12]
 8011bec:	899b      	ldrh	r3, [r3, #12]
 8011bee:	b29b      	uxth	r3, r3
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	f7f8 f973 	bl	8009edc <lwip_htons>
 8011bf6:	4603      	mov	r3, r0
 8011bf8:	b2db      	uxtb	r3, r3
 8011bfa:	f003 0301 	and.w	r3, r3, #1
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d005      	beq.n	8011c0e <tcp_zero_window_probe+0x72>
 8011c02:	6a3b      	ldr	r3, [r7, #32]
 8011c04:	891b      	ldrh	r3, [r3, #8]
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d101      	bne.n	8011c0e <tcp_zero_window_probe+0x72>
 8011c0a:	2301      	movs	r3, #1
 8011c0c:	e000      	b.n	8011c10 <tcp_zero_window_probe+0x74>
 8011c0e:	2300      	movs	r3, #0
 8011c10:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011c12:	7ffb      	ldrb	r3, [r7, #31]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	bf0c      	ite	eq
 8011c18:	2301      	moveq	r3, #1
 8011c1a:	2300      	movne	r3, #0
 8011c1c:	b2db      	uxtb	r3, r3
 8011c1e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011c20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c24:	b299      	uxth	r1, r3
 8011c26:	6a3b      	ldr	r3, [r7, #32]
 8011c28:	68db      	ldr	r3, [r3, #12]
 8011c2a:	685b      	ldr	r3, [r3, #4]
 8011c2c:	8bba      	ldrh	r2, [r7, #28]
 8011c2e:	6878      	ldr	r0, [r7, #4]
 8011c30:	f7ff fdf8 	bl	8011824 <tcp_output_alloc_header>
 8011c34:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011c36:	69bb      	ldr	r3, [r7, #24]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d102      	bne.n	8011c42 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8011c40:	e04c      	b.n	8011cdc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011c42:	69bb      	ldr	r3, [r7, #24]
 8011c44:	685b      	ldr	r3, [r3, #4]
 8011c46:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011c48:	7ffb      	ldrb	r3, [r7, #31]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d011      	beq.n	8011c72 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011c4e:	697b      	ldr	r3, [r7, #20]
 8011c50:	899b      	ldrh	r3, [r3, #12]
 8011c52:	b29b      	uxth	r3, r3
 8011c54:	b21b      	sxth	r3, r3
 8011c56:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011c5a:	b21c      	sxth	r4, r3
 8011c5c:	2011      	movs	r0, #17
 8011c5e:	f7f8 f93d 	bl	8009edc <lwip_htons>
 8011c62:	4603      	mov	r3, r0
 8011c64:	b21b      	sxth	r3, r3
 8011c66:	4323      	orrs	r3, r4
 8011c68:	b21b      	sxth	r3, r3
 8011c6a:	b29a      	uxth	r2, r3
 8011c6c:	697b      	ldr	r3, [r7, #20]
 8011c6e:	819a      	strh	r2, [r3, #12]
 8011c70:	e010      	b.n	8011c94 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011c72:	69bb      	ldr	r3, [r7, #24]
 8011c74:	685b      	ldr	r3, [r3, #4]
 8011c76:	3314      	adds	r3, #20
 8011c78:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011c7a:	6a3b      	ldr	r3, [r7, #32]
 8011c7c:	6858      	ldr	r0, [r3, #4]
 8011c7e:	6a3b      	ldr	r3, [r7, #32]
 8011c80:	685b      	ldr	r3, [r3, #4]
 8011c82:	891a      	ldrh	r2, [r3, #8]
 8011c84:	6a3b      	ldr	r3, [r7, #32]
 8011c86:	891b      	ldrh	r3, [r3, #8]
 8011c88:	1ad3      	subs	r3, r2, r3
 8011c8a:	b29b      	uxth	r3, r3
 8011c8c:	2201      	movs	r2, #1
 8011c8e:	6939      	ldr	r1, [r7, #16]
 8011c90:	f7f9 feee 	bl	800ba70 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011c94:	6a3b      	ldr	r3, [r7, #32]
 8011c96:	68db      	ldr	r3, [r3, #12]
 8011c98:	685b      	ldr	r3, [r3, #4]
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	f7f8 f933 	bl	8009f06 <lwip_htonl>
 8011ca0:	4603      	mov	r3, r0
 8011ca2:	3301      	adds	r3, #1
 8011ca4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	1ad3      	subs	r3, r2, r3
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	da02      	bge.n	8011cb8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	68fa      	ldr	r2, [r7, #12]
 8011cb6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011cbc:	2200      	movs	r2, #0
 8011cbe:	69b9      	ldr	r1, [r7, #24]
 8011cc0:	6878      	ldr	r0, [r7, #4]
 8011cc2:	f7ff fded 	bl	80118a0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011cc6:	687a      	ldr	r2, [r7, #4]
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	3304      	adds	r3, #4
 8011ccc:	69b9      	ldr	r1, [r7, #24]
 8011cce:	6878      	ldr	r0, [r7, #4]
 8011cd0:	f7ff fe26 	bl	8011920 <tcp_output_control_segment>
 8011cd4:	4603      	mov	r3, r0
 8011cd6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011cd8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011cdc:	4618      	mov	r0, r3
 8011cde:	372c      	adds	r7, #44	; 0x2c
 8011ce0:	46bd      	mov	sp, r7
 8011ce2:	bd90      	pop	{r4, r7, pc}
 8011ce4:	08018178 	.word	0x08018178
 8011ce8:	08018970 	.word	0x08018970
 8011cec:	080181cc 	.word	0x080181cc

08011cf0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011cf0:	b580      	push	{r7, lr}
 8011cf2:	b082      	sub	sp, #8
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011cf8:	f7fa f80c 	bl	800bd14 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011cfc:	4b0a      	ldr	r3, [pc, #40]	; (8011d28 <tcpip_tcp_timer+0x38>)
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d103      	bne.n	8011d0c <tcpip_tcp_timer+0x1c>
 8011d04:	4b09      	ldr	r3, [pc, #36]	; (8011d2c <tcpip_tcp_timer+0x3c>)
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d005      	beq.n	8011d18 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011d0c:	2200      	movs	r2, #0
 8011d0e:	4908      	ldr	r1, [pc, #32]	; (8011d30 <tcpip_tcp_timer+0x40>)
 8011d10:	20fa      	movs	r0, #250	; 0xfa
 8011d12:	f000 f8f3 	bl	8011efc <sys_timeout>
 8011d16:	e003      	b.n	8011d20 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011d18:	4b06      	ldr	r3, [pc, #24]	; (8011d34 <tcpip_tcp_timer+0x44>)
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	601a      	str	r2, [r3, #0]
  }
}
 8011d1e:	bf00      	nop
 8011d20:	bf00      	nop
 8011d22:	3708      	adds	r7, #8
 8011d24:	46bd      	mov	sp, r7
 8011d26:	bd80      	pop	{r7, pc}
 8011d28:	2000ab18 	.word	0x2000ab18
 8011d2c:	2000ab28 	.word	0x2000ab28
 8011d30:	08011cf1 	.word	0x08011cf1
 8011d34:	200040dc 	.word	0x200040dc

08011d38 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011d3c:	4b0a      	ldr	r3, [pc, #40]	; (8011d68 <tcp_timer_needed+0x30>)
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d10f      	bne.n	8011d64 <tcp_timer_needed+0x2c>
 8011d44:	4b09      	ldr	r3, [pc, #36]	; (8011d6c <tcp_timer_needed+0x34>)
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d103      	bne.n	8011d54 <tcp_timer_needed+0x1c>
 8011d4c:	4b08      	ldr	r3, [pc, #32]	; (8011d70 <tcp_timer_needed+0x38>)
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d007      	beq.n	8011d64 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011d54:	4b04      	ldr	r3, [pc, #16]	; (8011d68 <tcp_timer_needed+0x30>)
 8011d56:	2201      	movs	r2, #1
 8011d58:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011d5a:	2200      	movs	r2, #0
 8011d5c:	4905      	ldr	r1, [pc, #20]	; (8011d74 <tcp_timer_needed+0x3c>)
 8011d5e:	20fa      	movs	r0, #250	; 0xfa
 8011d60:	f000 f8cc 	bl	8011efc <sys_timeout>
  }
}
 8011d64:	bf00      	nop
 8011d66:	bd80      	pop	{r7, pc}
 8011d68:	200040dc 	.word	0x200040dc
 8011d6c:	2000ab18 	.word	0x2000ab18
 8011d70:	2000ab28 	.word	0x2000ab28
 8011d74:	08011cf1 	.word	0x08011cf1

08011d78 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011d78:	b580      	push	{r7, lr}
 8011d7a:	b086      	sub	sp, #24
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	60f8      	str	r0, [r7, #12]
 8011d80:	60b9      	str	r1, [r7, #8]
 8011d82:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011d84:	200a      	movs	r0, #10
 8011d86:	f7f8 fd87 	bl	800a898 <memp_malloc>
 8011d8a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011d8c:	693b      	ldr	r3, [r7, #16]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d109      	bne.n	8011da6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011d92:	693b      	ldr	r3, [r7, #16]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d151      	bne.n	8011e3c <sys_timeout_abs+0xc4>
 8011d98:	4b2a      	ldr	r3, [pc, #168]	; (8011e44 <sys_timeout_abs+0xcc>)
 8011d9a:	22be      	movs	r2, #190	; 0xbe
 8011d9c:	492a      	ldr	r1, [pc, #168]	; (8011e48 <sys_timeout_abs+0xd0>)
 8011d9e:	482b      	ldr	r0, [pc, #172]	; (8011e4c <sys_timeout_abs+0xd4>)
 8011da0:	f003 f880 	bl	8014ea4 <iprintf>
    return;
 8011da4:	e04a      	b.n	8011e3c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011da6:	693b      	ldr	r3, [r7, #16]
 8011da8:	2200      	movs	r2, #0
 8011daa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011dac:	693b      	ldr	r3, [r7, #16]
 8011dae:	68ba      	ldr	r2, [r7, #8]
 8011db0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011db2:	693b      	ldr	r3, [r7, #16]
 8011db4:	687a      	ldr	r2, [r7, #4]
 8011db6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011db8:	693b      	ldr	r3, [r7, #16]
 8011dba:	68fa      	ldr	r2, [r7, #12]
 8011dbc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011dbe:	4b24      	ldr	r3, [pc, #144]	; (8011e50 <sys_timeout_abs+0xd8>)
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d103      	bne.n	8011dce <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011dc6:	4a22      	ldr	r2, [pc, #136]	; (8011e50 <sys_timeout_abs+0xd8>)
 8011dc8:	693b      	ldr	r3, [r7, #16]
 8011dca:	6013      	str	r3, [r2, #0]
    return;
 8011dcc:	e037      	b.n	8011e3e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011dce:	693b      	ldr	r3, [r7, #16]
 8011dd0:	685a      	ldr	r2, [r3, #4]
 8011dd2:	4b1f      	ldr	r3, [pc, #124]	; (8011e50 <sys_timeout_abs+0xd8>)
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	685b      	ldr	r3, [r3, #4]
 8011dd8:	1ad3      	subs	r3, r2, r3
 8011dda:	0fdb      	lsrs	r3, r3, #31
 8011ddc:	f003 0301 	and.w	r3, r3, #1
 8011de0:	b2db      	uxtb	r3, r3
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d007      	beq.n	8011df6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011de6:	4b1a      	ldr	r3, [pc, #104]	; (8011e50 <sys_timeout_abs+0xd8>)
 8011de8:	681a      	ldr	r2, [r3, #0]
 8011dea:	693b      	ldr	r3, [r7, #16]
 8011dec:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011dee:	4a18      	ldr	r2, [pc, #96]	; (8011e50 <sys_timeout_abs+0xd8>)
 8011df0:	693b      	ldr	r3, [r7, #16]
 8011df2:	6013      	str	r3, [r2, #0]
 8011df4:	e023      	b.n	8011e3e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011df6:	4b16      	ldr	r3, [pc, #88]	; (8011e50 <sys_timeout_abs+0xd8>)
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	617b      	str	r3, [r7, #20]
 8011dfc:	e01a      	b.n	8011e34 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011dfe:	697b      	ldr	r3, [r7, #20]
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d00b      	beq.n	8011e1e <sys_timeout_abs+0xa6>
 8011e06:	693b      	ldr	r3, [r7, #16]
 8011e08:	685a      	ldr	r2, [r3, #4]
 8011e0a:	697b      	ldr	r3, [r7, #20]
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	685b      	ldr	r3, [r3, #4]
 8011e10:	1ad3      	subs	r3, r2, r3
 8011e12:	0fdb      	lsrs	r3, r3, #31
 8011e14:	f003 0301 	and.w	r3, r3, #1
 8011e18:	b2db      	uxtb	r3, r3
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d007      	beq.n	8011e2e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8011e1e:	697b      	ldr	r3, [r7, #20]
 8011e20:	681a      	ldr	r2, [r3, #0]
 8011e22:	693b      	ldr	r3, [r7, #16]
 8011e24:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011e26:	697b      	ldr	r3, [r7, #20]
 8011e28:	693a      	ldr	r2, [r7, #16]
 8011e2a:	601a      	str	r2, [r3, #0]
        break;
 8011e2c:	e007      	b.n	8011e3e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011e2e:	697b      	ldr	r3, [r7, #20]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	617b      	str	r3, [r7, #20]
 8011e34:	697b      	ldr	r3, [r7, #20]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d1e1      	bne.n	8011dfe <sys_timeout_abs+0x86>
 8011e3a:	e000      	b.n	8011e3e <sys_timeout_abs+0xc6>
    return;
 8011e3c:	bf00      	nop
      }
    }
  }
}
 8011e3e:	3718      	adds	r7, #24
 8011e40:	46bd      	mov	sp, r7
 8011e42:	bd80      	pop	{r7, pc}
 8011e44:	08018994 	.word	0x08018994
 8011e48:	080189c8 	.word	0x080189c8
 8011e4c:	08018a08 	.word	0x08018a08
 8011e50:	200040d4 	.word	0x200040d4

08011e54 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011e54:	b580      	push	{r7, lr}
 8011e56:	b086      	sub	sp, #24
 8011e58:	af00      	add	r7, sp, #0
 8011e5a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011e60:	697b      	ldr	r3, [r7, #20]
 8011e62:	685b      	ldr	r3, [r3, #4]
 8011e64:	4798      	blx	r3

  now = sys_now();
 8011e66:	f7f3 fa43 	bl	80052f0 <sys_now>
 8011e6a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011e6c:	697b      	ldr	r3, [r7, #20]
 8011e6e:	681a      	ldr	r2, [r3, #0]
 8011e70:	4b0f      	ldr	r3, [pc, #60]	; (8011eb0 <lwip_cyclic_timer+0x5c>)
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	4413      	add	r3, r2
 8011e76:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011e78:	68fa      	ldr	r2, [r7, #12]
 8011e7a:	693b      	ldr	r3, [r7, #16]
 8011e7c:	1ad3      	subs	r3, r2, r3
 8011e7e:	0fdb      	lsrs	r3, r3, #31
 8011e80:	f003 0301 	and.w	r3, r3, #1
 8011e84:	b2db      	uxtb	r3, r3
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d009      	beq.n	8011e9e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011e8a:	697b      	ldr	r3, [r7, #20]
 8011e8c:	681a      	ldr	r2, [r3, #0]
 8011e8e:	693b      	ldr	r3, [r7, #16]
 8011e90:	4413      	add	r3, r2
 8011e92:	687a      	ldr	r2, [r7, #4]
 8011e94:	4907      	ldr	r1, [pc, #28]	; (8011eb4 <lwip_cyclic_timer+0x60>)
 8011e96:	4618      	mov	r0, r3
 8011e98:	f7ff ff6e 	bl	8011d78 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011e9c:	e004      	b.n	8011ea8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011e9e:	687a      	ldr	r2, [r7, #4]
 8011ea0:	4904      	ldr	r1, [pc, #16]	; (8011eb4 <lwip_cyclic_timer+0x60>)
 8011ea2:	68f8      	ldr	r0, [r7, #12]
 8011ea4:	f7ff ff68 	bl	8011d78 <sys_timeout_abs>
}
 8011ea8:	bf00      	nop
 8011eaa:	3718      	adds	r7, #24
 8011eac:	46bd      	mov	sp, r7
 8011eae:	bd80      	pop	{r7, pc}
 8011eb0:	200040d8 	.word	0x200040d8
 8011eb4:	08011e55 	.word	0x08011e55

08011eb8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	b082      	sub	sp, #8
 8011ebc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011ebe:	2301      	movs	r3, #1
 8011ec0:	607b      	str	r3, [r7, #4]
 8011ec2:	e00e      	b.n	8011ee2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011ec4:	4a0b      	ldr	r2, [pc, #44]	; (8011ef4 <sys_timeouts_init+0x3c>)
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	00db      	lsls	r3, r3, #3
 8011ed0:	4a08      	ldr	r2, [pc, #32]	; (8011ef4 <sys_timeouts_init+0x3c>)
 8011ed2:	4413      	add	r3, r2
 8011ed4:	461a      	mov	r2, r3
 8011ed6:	4908      	ldr	r1, [pc, #32]	; (8011ef8 <sys_timeouts_init+0x40>)
 8011ed8:	f000 f810 	bl	8011efc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	3301      	adds	r3, #1
 8011ee0:	607b      	str	r3, [r7, #4]
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	2b02      	cmp	r3, #2
 8011ee6:	d9ed      	bls.n	8011ec4 <sys_timeouts_init+0xc>
  }
}
 8011ee8:	bf00      	nop
 8011eea:	bf00      	nop
 8011eec:	3708      	adds	r7, #8
 8011eee:	46bd      	mov	sp, r7
 8011ef0:	bd80      	pop	{r7, pc}
 8011ef2:	bf00      	nop
 8011ef4:	08019634 	.word	0x08019634
 8011ef8:	08011e55 	.word	0x08011e55

08011efc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b086      	sub	sp, #24
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	60f8      	str	r0, [r7, #12]
 8011f04:	60b9      	str	r1, [r7, #8]
 8011f06:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011f0e:	d306      	bcc.n	8011f1e <sys_timeout+0x22>
 8011f10:	4b0a      	ldr	r3, [pc, #40]	; (8011f3c <sys_timeout+0x40>)
 8011f12:	f240 1229 	movw	r2, #297	; 0x129
 8011f16:	490a      	ldr	r1, [pc, #40]	; (8011f40 <sys_timeout+0x44>)
 8011f18:	480a      	ldr	r0, [pc, #40]	; (8011f44 <sys_timeout+0x48>)
 8011f1a:	f002 ffc3 	bl	8014ea4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8011f1e:	f7f3 f9e7 	bl	80052f0 <sys_now>
 8011f22:	4602      	mov	r2, r0
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	4413      	add	r3, r2
 8011f28:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011f2a:	687a      	ldr	r2, [r7, #4]
 8011f2c:	68b9      	ldr	r1, [r7, #8]
 8011f2e:	6978      	ldr	r0, [r7, #20]
 8011f30:	f7ff ff22 	bl	8011d78 <sys_timeout_abs>
#endif
}
 8011f34:	bf00      	nop
 8011f36:	3718      	adds	r7, #24
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	bd80      	pop	{r7, pc}
 8011f3c:	08018994 	.word	0x08018994
 8011f40:	08018a30 	.word	0x08018a30
 8011f44:	08018a08 	.word	0x08018a08

08011f48 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 8011f48:	b580      	push	{r7, lr}
 8011f4a:	b084      	sub	sp, #16
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	6078      	str	r0, [r7, #4]
 8011f50:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8011f52:	4b19      	ldr	r3, [pc, #100]	; (8011fb8 <sys_untimeout+0x70>)
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d029      	beq.n	8011fae <sys_untimeout+0x66>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8011f5a:	4b17      	ldr	r3, [pc, #92]	; (8011fb8 <sys_untimeout+0x70>)
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	60bb      	str	r3, [r7, #8]
 8011f60:	2300      	movs	r3, #0
 8011f62:	60fb      	str	r3, [r7, #12]
 8011f64:	e01f      	b.n	8011fa6 <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 8011f66:	68bb      	ldr	r3, [r7, #8]
 8011f68:	689b      	ldr	r3, [r3, #8]
 8011f6a:	687a      	ldr	r2, [r7, #4]
 8011f6c:	429a      	cmp	r2, r3
 8011f6e:	d115      	bne.n	8011f9c <sys_untimeout+0x54>
 8011f70:	68bb      	ldr	r3, [r7, #8]
 8011f72:	68db      	ldr	r3, [r3, #12]
 8011f74:	683a      	ldr	r2, [r7, #0]
 8011f76:	429a      	cmp	r2, r3
 8011f78:	d110      	bne.n	8011f9c <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d104      	bne.n	8011f8a <sys_untimeout+0x42>
        next_timeout = t->next;
 8011f80:	68bb      	ldr	r3, [r7, #8]
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	4a0c      	ldr	r2, [pc, #48]	; (8011fb8 <sys_untimeout+0x70>)
 8011f86:	6013      	str	r3, [r2, #0]
 8011f88:	e003      	b.n	8011f92 <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 8011f8a:	68bb      	ldr	r3, [r7, #8]
 8011f8c:	681a      	ldr	r2, [r3, #0]
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 8011f92:	68b9      	ldr	r1, [r7, #8]
 8011f94:	200a      	movs	r0, #10
 8011f96:	f7f8 fcd1 	bl	800a93c <memp_free>
      return;
 8011f9a:	e009      	b.n	8011fb0 <sys_untimeout+0x68>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8011f9c:	68bb      	ldr	r3, [r7, #8]
 8011f9e:	60fb      	str	r3, [r7, #12]
 8011fa0:	68bb      	ldr	r3, [r7, #8]
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	60bb      	str	r3, [r7, #8]
 8011fa6:	68bb      	ldr	r3, [r7, #8]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d1dc      	bne.n	8011f66 <sys_untimeout+0x1e>
    }
  }
  return;
 8011fac:	e000      	b.n	8011fb0 <sys_untimeout+0x68>
    return;
 8011fae:	bf00      	nop
}
 8011fb0:	3710      	adds	r7, #16
 8011fb2:	46bd      	mov	sp, r7
 8011fb4:	bd80      	pop	{r7, pc}
 8011fb6:	bf00      	nop
 8011fb8:	200040d4 	.word	0x200040d4

08011fbc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011fbc:	b580      	push	{r7, lr}
 8011fbe:	b084      	sub	sp, #16
 8011fc0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8011fc2:	f7f3 f995 	bl	80052f0 <sys_now>
 8011fc6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8011fc8:	4b17      	ldr	r3, [pc, #92]	; (8012028 <sys_check_timeouts+0x6c>)
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8011fce:	68bb      	ldr	r3, [r7, #8]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d022      	beq.n	801201a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011fd4:	68bb      	ldr	r3, [r7, #8]
 8011fd6:	685b      	ldr	r3, [r3, #4]
 8011fd8:	68fa      	ldr	r2, [r7, #12]
 8011fda:	1ad3      	subs	r3, r2, r3
 8011fdc:	0fdb      	lsrs	r3, r3, #31
 8011fde:	f003 0301 	and.w	r3, r3, #1
 8011fe2:	b2db      	uxtb	r3, r3
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d11a      	bne.n	801201e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8011fe8:	68bb      	ldr	r3, [r7, #8]
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	4a0e      	ldr	r2, [pc, #56]	; (8012028 <sys_check_timeouts+0x6c>)
 8011fee:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8011ff0:	68bb      	ldr	r3, [r7, #8]
 8011ff2:	689b      	ldr	r3, [r3, #8]
 8011ff4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8011ff6:	68bb      	ldr	r3, [r7, #8]
 8011ff8:	68db      	ldr	r3, [r3, #12]
 8011ffa:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8011ffc:	68bb      	ldr	r3, [r7, #8]
 8011ffe:	685b      	ldr	r3, [r3, #4]
 8012000:	4a0a      	ldr	r2, [pc, #40]	; (801202c <sys_check_timeouts+0x70>)
 8012002:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012004:	68b9      	ldr	r1, [r7, #8]
 8012006:	200a      	movs	r0, #10
 8012008:	f7f8 fc98 	bl	800a93c <memp_free>
    if (handler != NULL) {
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d0da      	beq.n	8011fc8 <sys_check_timeouts+0xc>
      handler(arg);
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	6838      	ldr	r0, [r7, #0]
 8012016:	4798      	blx	r3
  do {
 8012018:	e7d6      	b.n	8011fc8 <sys_check_timeouts+0xc>
      return;
 801201a:	bf00      	nop
 801201c:	e000      	b.n	8012020 <sys_check_timeouts+0x64>
      return;
 801201e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012020:	3710      	adds	r7, #16
 8012022:	46bd      	mov	sp, r7
 8012024:	bd80      	pop	{r7, pc}
 8012026:	bf00      	nop
 8012028:	200040d4 	.word	0x200040d4
 801202c:	200040d8 	.word	0x200040d8

08012030 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8012030:	b580      	push	{r7, lr}
 8012032:	b082      	sub	sp, #8
 8012034:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8012036:	4b16      	ldr	r3, [pc, #88]	; (8012090 <sys_timeouts_sleeptime+0x60>)
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	2b00      	cmp	r3, #0
 801203c:	d102      	bne.n	8012044 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801203e:	f04f 33ff 	mov.w	r3, #4294967295
 8012042:	e020      	b.n	8012086 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8012044:	f7f3 f954 	bl	80052f0 <sys_now>
 8012048:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801204a:	4b11      	ldr	r3, [pc, #68]	; (8012090 <sys_timeouts_sleeptime+0x60>)
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	685a      	ldr	r2, [r3, #4]
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	1ad3      	subs	r3, r2, r3
 8012054:	0fdb      	lsrs	r3, r3, #31
 8012056:	f003 0301 	and.w	r3, r3, #1
 801205a:	b2db      	uxtb	r3, r3
 801205c:	2b00      	cmp	r3, #0
 801205e:	d001      	beq.n	8012064 <sys_timeouts_sleeptime+0x34>
    return 0;
 8012060:	2300      	movs	r3, #0
 8012062:	e010      	b.n	8012086 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8012064:	4b0a      	ldr	r3, [pc, #40]	; (8012090 <sys_timeouts_sleeptime+0x60>)
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	685a      	ldr	r2, [r3, #4]
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	1ad3      	subs	r3, r2, r3
 801206e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8012070:	683b      	ldr	r3, [r7, #0]
 8012072:	2b00      	cmp	r3, #0
 8012074:	da06      	bge.n	8012084 <sys_timeouts_sleeptime+0x54>
 8012076:	4b07      	ldr	r3, [pc, #28]	; (8012094 <sys_timeouts_sleeptime+0x64>)
 8012078:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801207c:	4906      	ldr	r1, [pc, #24]	; (8012098 <sys_timeouts_sleeptime+0x68>)
 801207e:	4807      	ldr	r0, [pc, #28]	; (801209c <sys_timeouts_sleeptime+0x6c>)
 8012080:	f002 ff10 	bl	8014ea4 <iprintf>
    return ret;
 8012084:	683b      	ldr	r3, [r7, #0]
  }
}
 8012086:	4618      	mov	r0, r3
 8012088:	3708      	adds	r7, #8
 801208a:	46bd      	mov	sp, r7
 801208c:	bd80      	pop	{r7, pc}
 801208e:	bf00      	nop
 8012090:	200040d4 	.word	0x200040d4
 8012094:	08018994 	.word	0x08018994
 8012098:	08018a68 	.word	0x08018a68
 801209c:	08018a08 	.word	0x08018a08

080120a0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80120a0:	b580      	push	{r7, lr}
 80120a2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80120a4:	f002 ff8c 	bl	8014fc0 <rand>
 80120a8:	4603      	mov	r3, r0
 80120aa:	b29b      	uxth	r3, r3
 80120ac:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80120b0:	b29b      	uxth	r3, r3
 80120b2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80120b6:	b29a      	uxth	r2, r3
 80120b8:	4b01      	ldr	r3, [pc, #4]	; (80120c0 <udp_init+0x20>)
 80120ba:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80120bc:	bf00      	nop
 80120be:	bd80      	pop	{r7, pc}
 80120c0:	20000018 	.word	0x20000018

080120c4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b084      	sub	sp, #16
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	60f8      	str	r0, [r7, #12]
 80120cc:	60b9      	str	r1, [r7, #8]
 80120ce:	4613      	mov	r3, r2
 80120d0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d105      	bne.n	80120e4 <udp_input_local_match+0x20>
 80120d8:	4b27      	ldr	r3, [pc, #156]	; (8012178 <udp_input_local_match+0xb4>)
 80120da:	2287      	movs	r2, #135	; 0x87
 80120dc:	4927      	ldr	r1, [pc, #156]	; (801217c <udp_input_local_match+0xb8>)
 80120de:	4828      	ldr	r0, [pc, #160]	; (8012180 <udp_input_local_match+0xbc>)
 80120e0:	f002 fee0 	bl	8014ea4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80120e4:	68bb      	ldr	r3, [r7, #8]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d105      	bne.n	80120f6 <udp_input_local_match+0x32>
 80120ea:	4b23      	ldr	r3, [pc, #140]	; (8012178 <udp_input_local_match+0xb4>)
 80120ec:	2288      	movs	r2, #136	; 0x88
 80120ee:	4925      	ldr	r1, [pc, #148]	; (8012184 <udp_input_local_match+0xc0>)
 80120f0:	4823      	ldr	r0, [pc, #140]	; (8012180 <udp_input_local_match+0xbc>)
 80120f2:	f002 fed7 	bl	8014ea4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	7a1b      	ldrb	r3, [r3, #8]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d00b      	beq.n	8012116 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	7a1a      	ldrb	r2, [r3, #8]
 8012102:	4b21      	ldr	r3, [pc, #132]	; (8012188 <udp_input_local_match+0xc4>)
 8012104:	685b      	ldr	r3, [r3, #4]
 8012106:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801210a:	3301      	adds	r3, #1
 801210c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801210e:	429a      	cmp	r2, r3
 8012110:	d001      	beq.n	8012116 <udp_input_local_match+0x52>
    return 0;
 8012112:	2300      	movs	r3, #0
 8012114:	e02b      	b.n	801216e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012116:	79fb      	ldrb	r3, [r7, #7]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d018      	beq.n	801214e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	2b00      	cmp	r3, #0
 8012120:	d013      	beq.n	801214a <udp_input_local_match+0x86>
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d00f      	beq.n	801214a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801212a:	4b17      	ldr	r3, [pc, #92]	; (8012188 <udp_input_local_match+0xc4>)
 801212c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801212e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012132:	d00a      	beq.n	801214a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	681a      	ldr	r2, [r3, #0]
 8012138:	4b13      	ldr	r3, [pc, #76]	; (8012188 <udp_input_local_match+0xc4>)
 801213a:	695b      	ldr	r3, [r3, #20]
 801213c:	405a      	eors	r2, r3
 801213e:	68bb      	ldr	r3, [r7, #8]
 8012140:	3308      	adds	r3, #8
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012146:	2b00      	cmp	r3, #0
 8012148:	d110      	bne.n	801216c <udp_input_local_match+0xa8>
          return 1;
 801214a:	2301      	movs	r3, #1
 801214c:	e00f      	b.n	801216e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d009      	beq.n	8012168 <udp_input_local_match+0xa4>
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	2b00      	cmp	r3, #0
 801215a:	d005      	beq.n	8012168 <udp_input_local_match+0xa4>
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	681a      	ldr	r2, [r3, #0]
 8012160:	4b09      	ldr	r3, [pc, #36]	; (8012188 <udp_input_local_match+0xc4>)
 8012162:	695b      	ldr	r3, [r3, #20]
 8012164:	429a      	cmp	r2, r3
 8012166:	d101      	bne.n	801216c <udp_input_local_match+0xa8>
        return 1;
 8012168:	2301      	movs	r3, #1
 801216a:	e000      	b.n	801216e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801216c:	2300      	movs	r3, #0
}
 801216e:	4618      	mov	r0, r3
 8012170:	3710      	adds	r7, #16
 8012172:	46bd      	mov	sp, r7
 8012174:	bd80      	pop	{r7, pc}
 8012176:	bf00      	nop
 8012178:	08018a7c 	.word	0x08018a7c
 801217c:	08018aac 	.word	0x08018aac
 8012180:	08018ad0 	.word	0x08018ad0
 8012184:	08018af8 	.word	0x08018af8
 8012188:	20007404 	.word	0x20007404

0801218c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801218c:	b590      	push	{r4, r7, lr}
 801218e:	b08d      	sub	sp, #52	; 0x34
 8012190:	af02      	add	r7, sp, #8
 8012192:	6078      	str	r0, [r7, #4]
 8012194:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012196:	2300      	movs	r3, #0
 8012198:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	2b00      	cmp	r3, #0
 801219e:	d105      	bne.n	80121ac <udp_input+0x20>
 80121a0:	4b7c      	ldr	r3, [pc, #496]	; (8012394 <udp_input+0x208>)
 80121a2:	22cf      	movs	r2, #207	; 0xcf
 80121a4:	497c      	ldr	r1, [pc, #496]	; (8012398 <udp_input+0x20c>)
 80121a6:	487d      	ldr	r0, [pc, #500]	; (801239c <udp_input+0x210>)
 80121a8:	f002 fe7c 	bl	8014ea4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80121ac:	683b      	ldr	r3, [r7, #0]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d105      	bne.n	80121be <udp_input+0x32>
 80121b2:	4b78      	ldr	r3, [pc, #480]	; (8012394 <udp_input+0x208>)
 80121b4:	22d0      	movs	r2, #208	; 0xd0
 80121b6:	497a      	ldr	r1, [pc, #488]	; (80123a0 <udp_input+0x214>)
 80121b8:	4878      	ldr	r0, [pc, #480]	; (801239c <udp_input+0x210>)
 80121ba:	f002 fe73 	bl	8014ea4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	895b      	ldrh	r3, [r3, #10]
 80121c2:	2b07      	cmp	r3, #7
 80121c4:	d803      	bhi.n	80121ce <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80121c6:	6878      	ldr	r0, [r7, #4]
 80121c8:	f7f9 fa5c 	bl	800b684 <pbuf_free>
    goto end;
 80121cc:	e0de      	b.n	801238c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	685b      	ldr	r3, [r3, #4]
 80121d2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80121d4:	4b73      	ldr	r3, [pc, #460]	; (80123a4 <udp_input+0x218>)
 80121d6:	695b      	ldr	r3, [r3, #20]
 80121d8:	4a72      	ldr	r2, [pc, #456]	; (80123a4 <udp_input+0x218>)
 80121da:	6812      	ldr	r2, [r2, #0]
 80121dc:	4611      	mov	r1, r2
 80121de:	4618      	mov	r0, r3
 80121e0:	f001 fc88 	bl	8013af4 <ip4_addr_isbroadcast_u32>
 80121e4:	4603      	mov	r3, r0
 80121e6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80121e8:	697b      	ldr	r3, [r7, #20]
 80121ea:	881b      	ldrh	r3, [r3, #0]
 80121ec:	b29b      	uxth	r3, r3
 80121ee:	4618      	mov	r0, r3
 80121f0:	f7f7 fe74 	bl	8009edc <lwip_htons>
 80121f4:	4603      	mov	r3, r0
 80121f6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80121f8:	697b      	ldr	r3, [r7, #20]
 80121fa:	885b      	ldrh	r3, [r3, #2]
 80121fc:	b29b      	uxth	r3, r3
 80121fe:	4618      	mov	r0, r3
 8012200:	f7f7 fe6c 	bl	8009edc <lwip_htons>
 8012204:	4603      	mov	r3, r0
 8012206:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012208:	2300      	movs	r3, #0
 801220a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801220c:	2300      	movs	r3, #0
 801220e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012210:	2300      	movs	r3, #0
 8012212:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012214:	4b64      	ldr	r3, [pc, #400]	; (80123a8 <udp_input+0x21c>)
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	627b      	str	r3, [r7, #36]	; 0x24
 801221a:	e054      	b.n	80122c6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801221e:	8a5b      	ldrh	r3, [r3, #18]
 8012220:	89fa      	ldrh	r2, [r7, #14]
 8012222:	429a      	cmp	r2, r3
 8012224:	d14a      	bne.n	80122bc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8012226:	7cfb      	ldrb	r3, [r7, #19]
 8012228:	461a      	mov	r2, r3
 801222a:	6839      	ldr	r1, [r7, #0]
 801222c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801222e:	f7ff ff49 	bl	80120c4 <udp_input_local_match>
 8012232:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012234:	2b00      	cmp	r3, #0
 8012236:	d041      	beq.n	80122bc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8012238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801223a:	7c1b      	ldrb	r3, [r3, #16]
 801223c:	f003 0304 	and.w	r3, r3, #4
 8012240:	2b00      	cmp	r3, #0
 8012242:	d11d      	bne.n	8012280 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8012244:	69fb      	ldr	r3, [r7, #28]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d102      	bne.n	8012250 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801224c:	61fb      	str	r3, [r7, #28]
 801224e:	e017      	b.n	8012280 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8012250:	7cfb      	ldrb	r3, [r7, #19]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d014      	beq.n	8012280 <udp_input+0xf4>
 8012256:	4b53      	ldr	r3, [pc, #332]	; (80123a4 <udp_input+0x218>)
 8012258:	695b      	ldr	r3, [r3, #20]
 801225a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801225e:	d10f      	bne.n	8012280 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8012260:	69fb      	ldr	r3, [r7, #28]
 8012262:	681a      	ldr	r2, [r3, #0]
 8012264:	683b      	ldr	r3, [r7, #0]
 8012266:	3304      	adds	r3, #4
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	429a      	cmp	r2, r3
 801226c:	d008      	beq.n	8012280 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012270:	681a      	ldr	r2, [r3, #0]
 8012272:	683b      	ldr	r3, [r7, #0]
 8012274:	3304      	adds	r3, #4
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	429a      	cmp	r2, r3
 801227a:	d101      	bne.n	8012280 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801227e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012282:	8a9b      	ldrh	r3, [r3, #20]
 8012284:	8a3a      	ldrh	r2, [r7, #16]
 8012286:	429a      	cmp	r2, r3
 8012288:	d118      	bne.n	80122bc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801228c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801228e:	2b00      	cmp	r3, #0
 8012290:	d005      	beq.n	801229e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012294:	685a      	ldr	r2, [r3, #4]
 8012296:	4b43      	ldr	r3, [pc, #268]	; (80123a4 <udp_input+0x218>)
 8012298:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801229a:	429a      	cmp	r2, r3
 801229c:	d10e      	bne.n	80122bc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801229e:	6a3b      	ldr	r3, [r7, #32]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d014      	beq.n	80122ce <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80122a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122a6:	68da      	ldr	r2, [r3, #12]
 80122a8:	6a3b      	ldr	r3, [r7, #32]
 80122aa:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80122ac:	4b3e      	ldr	r3, [pc, #248]	; (80123a8 <udp_input+0x21c>)
 80122ae:	681a      	ldr	r2, [r3, #0]
 80122b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122b2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80122b4:	4a3c      	ldr	r2, [pc, #240]	; (80123a8 <udp_input+0x21c>)
 80122b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122b8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80122ba:	e008      	b.n	80122ce <udp_input+0x142>
      }
    }

    prev = pcb;
 80122bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122be:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80122c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122c2:	68db      	ldr	r3, [r3, #12]
 80122c4:	627b      	str	r3, [r7, #36]	; 0x24
 80122c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d1a7      	bne.n	801221c <udp_input+0x90>
 80122cc:	e000      	b.n	80122d0 <udp_input+0x144>
        break;
 80122ce:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80122d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d101      	bne.n	80122da <udp_input+0x14e>
    pcb = uncon_pcb;
 80122d6:	69fb      	ldr	r3, [r7, #28]
 80122d8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80122da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d002      	beq.n	80122e6 <udp_input+0x15a>
    for_us = 1;
 80122e0:	2301      	movs	r3, #1
 80122e2:	76fb      	strb	r3, [r7, #27]
 80122e4:	e00a      	b.n	80122fc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80122e6:	683b      	ldr	r3, [r7, #0]
 80122e8:	3304      	adds	r3, #4
 80122ea:	681a      	ldr	r2, [r3, #0]
 80122ec:	4b2d      	ldr	r3, [pc, #180]	; (80123a4 <udp_input+0x218>)
 80122ee:	695b      	ldr	r3, [r3, #20]
 80122f0:	429a      	cmp	r2, r3
 80122f2:	bf0c      	ite	eq
 80122f4:	2301      	moveq	r3, #1
 80122f6:	2300      	movne	r3, #0
 80122f8:	b2db      	uxtb	r3, r3
 80122fa:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80122fc:	7efb      	ldrb	r3, [r7, #27]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d041      	beq.n	8012386 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8012302:	2108      	movs	r1, #8
 8012304:	6878      	ldr	r0, [r7, #4]
 8012306:	f7f9 f937 	bl	800b578 <pbuf_remove_header>
 801230a:	4603      	mov	r3, r0
 801230c:	2b00      	cmp	r3, #0
 801230e:	d00a      	beq.n	8012326 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012310:	4b20      	ldr	r3, [pc, #128]	; (8012394 <udp_input+0x208>)
 8012312:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8012316:	4925      	ldr	r1, [pc, #148]	; (80123ac <udp_input+0x220>)
 8012318:	4820      	ldr	r0, [pc, #128]	; (801239c <udp_input+0x210>)
 801231a:	f002 fdc3 	bl	8014ea4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801231e:	6878      	ldr	r0, [r7, #4]
 8012320:	f7f9 f9b0 	bl	800b684 <pbuf_free>
      goto end;
 8012324:	e032      	b.n	801238c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8012326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012328:	2b00      	cmp	r3, #0
 801232a:	d012      	beq.n	8012352 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801232e:	699b      	ldr	r3, [r3, #24]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d00a      	beq.n	801234a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012336:	699c      	ldr	r4, [r3, #24]
 8012338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801233a:	69d8      	ldr	r0, [r3, #28]
 801233c:	8a3b      	ldrh	r3, [r7, #16]
 801233e:	9300      	str	r3, [sp, #0]
 8012340:	4b1b      	ldr	r3, [pc, #108]	; (80123b0 <udp_input+0x224>)
 8012342:	687a      	ldr	r2, [r7, #4]
 8012344:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012346:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012348:	e021      	b.n	801238e <udp_input+0x202>
        pbuf_free(p);
 801234a:	6878      	ldr	r0, [r7, #4]
 801234c:	f7f9 f99a 	bl	800b684 <pbuf_free>
        goto end;
 8012350:	e01c      	b.n	801238c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012352:	7cfb      	ldrb	r3, [r7, #19]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d112      	bne.n	801237e <udp_input+0x1f2>
 8012358:	4b12      	ldr	r3, [pc, #72]	; (80123a4 <udp_input+0x218>)
 801235a:	695b      	ldr	r3, [r3, #20]
 801235c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012360:	2be0      	cmp	r3, #224	; 0xe0
 8012362:	d00c      	beq.n	801237e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012364:	4b0f      	ldr	r3, [pc, #60]	; (80123a4 <udp_input+0x218>)
 8012366:	899b      	ldrh	r3, [r3, #12]
 8012368:	3308      	adds	r3, #8
 801236a:	b29b      	uxth	r3, r3
 801236c:	b21b      	sxth	r3, r3
 801236e:	4619      	mov	r1, r3
 8012370:	6878      	ldr	r0, [r7, #4]
 8012372:	f7f9 f974 	bl	800b65e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012376:	2103      	movs	r1, #3
 8012378:	6878      	ldr	r0, [r7, #4]
 801237a:	f001 f89b 	bl	80134b4 <icmp_dest_unreach>
      pbuf_free(p);
 801237e:	6878      	ldr	r0, [r7, #4]
 8012380:	f7f9 f980 	bl	800b684 <pbuf_free>
  return;
 8012384:	e003      	b.n	801238e <udp_input+0x202>
    pbuf_free(p);
 8012386:	6878      	ldr	r0, [r7, #4]
 8012388:	f7f9 f97c 	bl	800b684 <pbuf_free>
  return;
 801238c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801238e:	372c      	adds	r7, #44	; 0x2c
 8012390:	46bd      	mov	sp, r7
 8012392:	bd90      	pop	{r4, r7, pc}
 8012394:	08018a7c 	.word	0x08018a7c
 8012398:	08018b20 	.word	0x08018b20
 801239c:	08018ad0 	.word	0x08018ad0
 80123a0:	08018b38 	.word	0x08018b38
 80123a4:	20007404 	.word	0x20007404
 80123a8:	2000ab30 	.word	0x2000ab30
 80123ac:	08018b54 	.word	0x08018b54
 80123b0:	20007414 	.word	0x20007414

080123b4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80123b4:	b480      	push	{r7}
 80123b6:	b085      	sub	sp, #20
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
 80123bc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d01e      	beq.n	8012402 <udp_netif_ip_addr_changed+0x4e>
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d01a      	beq.n	8012402 <udp_netif_ip_addr_changed+0x4e>
 80123cc:	683b      	ldr	r3, [r7, #0]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d017      	beq.n	8012402 <udp_netif_ip_addr_changed+0x4e>
 80123d2:	683b      	ldr	r3, [r7, #0]
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d013      	beq.n	8012402 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80123da:	4b0d      	ldr	r3, [pc, #52]	; (8012410 <udp_netif_ip_addr_changed+0x5c>)
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	60fb      	str	r3, [r7, #12]
 80123e0:	e00c      	b.n	80123fc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	681a      	ldr	r2, [r3, #0]
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	429a      	cmp	r2, r3
 80123ec:	d103      	bne.n	80123f6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80123ee:	683b      	ldr	r3, [r7, #0]
 80123f0:	681a      	ldr	r2, [r3, #0]
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	68db      	ldr	r3, [r3, #12]
 80123fa:	60fb      	str	r3, [r7, #12]
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d1ef      	bne.n	80123e2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012402:	bf00      	nop
 8012404:	3714      	adds	r7, #20
 8012406:	46bd      	mov	sp, r7
 8012408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801240c:	4770      	bx	lr
 801240e:	bf00      	nop
 8012410:	2000ab30 	.word	0x2000ab30

08012414 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8012414:	b580      	push	{r7, lr}
 8012416:	b082      	sub	sp, #8
 8012418:	af00      	add	r7, sp, #0
 801241a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801241c:	4915      	ldr	r1, [pc, #84]	; (8012474 <etharp_free_entry+0x60>)
 801241e:	687a      	ldr	r2, [r7, #4]
 8012420:	4613      	mov	r3, r2
 8012422:	005b      	lsls	r3, r3, #1
 8012424:	4413      	add	r3, r2
 8012426:	00db      	lsls	r3, r3, #3
 8012428:	440b      	add	r3, r1
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	2b00      	cmp	r3, #0
 801242e:	d013      	beq.n	8012458 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8012430:	4910      	ldr	r1, [pc, #64]	; (8012474 <etharp_free_entry+0x60>)
 8012432:	687a      	ldr	r2, [r7, #4]
 8012434:	4613      	mov	r3, r2
 8012436:	005b      	lsls	r3, r3, #1
 8012438:	4413      	add	r3, r2
 801243a:	00db      	lsls	r3, r3, #3
 801243c:	440b      	add	r3, r1
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	4618      	mov	r0, r3
 8012442:	f7f9 f91f 	bl	800b684 <pbuf_free>
    arp_table[i].q = NULL;
 8012446:	490b      	ldr	r1, [pc, #44]	; (8012474 <etharp_free_entry+0x60>)
 8012448:	687a      	ldr	r2, [r7, #4]
 801244a:	4613      	mov	r3, r2
 801244c:	005b      	lsls	r3, r3, #1
 801244e:	4413      	add	r3, r2
 8012450:	00db      	lsls	r3, r3, #3
 8012452:	440b      	add	r3, r1
 8012454:	2200      	movs	r2, #0
 8012456:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8012458:	4906      	ldr	r1, [pc, #24]	; (8012474 <etharp_free_entry+0x60>)
 801245a:	687a      	ldr	r2, [r7, #4]
 801245c:	4613      	mov	r3, r2
 801245e:	005b      	lsls	r3, r3, #1
 8012460:	4413      	add	r3, r2
 8012462:	00db      	lsls	r3, r3, #3
 8012464:	440b      	add	r3, r1
 8012466:	3314      	adds	r3, #20
 8012468:	2200      	movs	r2, #0
 801246a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801246c:	bf00      	nop
 801246e:	3708      	adds	r7, #8
 8012470:	46bd      	mov	sp, r7
 8012472:	bd80      	pop	{r7, pc}
 8012474:	200040e0 	.word	0x200040e0

08012478 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8012478:	b580      	push	{r7, lr}
 801247a:	b082      	sub	sp, #8
 801247c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801247e:	2300      	movs	r3, #0
 8012480:	607b      	str	r3, [r7, #4]
 8012482:	e096      	b.n	80125b2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8012484:	494f      	ldr	r1, [pc, #316]	; (80125c4 <etharp_tmr+0x14c>)
 8012486:	687a      	ldr	r2, [r7, #4]
 8012488:	4613      	mov	r3, r2
 801248a:	005b      	lsls	r3, r3, #1
 801248c:	4413      	add	r3, r2
 801248e:	00db      	lsls	r3, r3, #3
 8012490:	440b      	add	r3, r1
 8012492:	3314      	adds	r3, #20
 8012494:	781b      	ldrb	r3, [r3, #0]
 8012496:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8012498:	78fb      	ldrb	r3, [r7, #3]
 801249a:	2b00      	cmp	r3, #0
 801249c:	f000 8086 	beq.w	80125ac <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80124a0:	4948      	ldr	r1, [pc, #288]	; (80125c4 <etharp_tmr+0x14c>)
 80124a2:	687a      	ldr	r2, [r7, #4]
 80124a4:	4613      	mov	r3, r2
 80124a6:	005b      	lsls	r3, r3, #1
 80124a8:	4413      	add	r3, r2
 80124aa:	00db      	lsls	r3, r3, #3
 80124ac:	440b      	add	r3, r1
 80124ae:	3312      	adds	r3, #18
 80124b0:	881b      	ldrh	r3, [r3, #0]
 80124b2:	3301      	adds	r3, #1
 80124b4:	b298      	uxth	r0, r3
 80124b6:	4943      	ldr	r1, [pc, #268]	; (80125c4 <etharp_tmr+0x14c>)
 80124b8:	687a      	ldr	r2, [r7, #4]
 80124ba:	4613      	mov	r3, r2
 80124bc:	005b      	lsls	r3, r3, #1
 80124be:	4413      	add	r3, r2
 80124c0:	00db      	lsls	r3, r3, #3
 80124c2:	440b      	add	r3, r1
 80124c4:	3312      	adds	r3, #18
 80124c6:	4602      	mov	r2, r0
 80124c8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80124ca:	493e      	ldr	r1, [pc, #248]	; (80125c4 <etharp_tmr+0x14c>)
 80124cc:	687a      	ldr	r2, [r7, #4]
 80124ce:	4613      	mov	r3, r2
 80124d0:	005b      	lsls	r3, r3, #1
 80124d2:	4413      	add	r3, r2
 80124d4:	00db      	lsls	r3, r3, #3
 80124d6:	440b      	add	r3, r1
 80124d8:	3312      	adds	r3, #18
 80124da:	881b      	ldrh	r3, [r3, #0]
 80124dc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80124e0:	d215      	bcs.n	801250e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80124e2:	4938      	ldr	r1, [pc, #224]	; (80125c4 <etharp_tmr+0x14c>)
 80124e4:	687a      	ldr	r2, [r7, #4]
 80124e6:	4613      	mov	r3, r2
 80124e8:	005b      	lsls	r3, r3, #1
 80124ea:	4413      	add	r3, r2
 80124ec:	00db      	lsls	r3, r3, #3
 80124ee:	440b      	add	r3, r1
 80124f0:	3314      	adds	r3, #20
 80124f2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80124f4:	2b01      	cmp	r3, #1
 80124f6:	d10e      	bne.n	8012516 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80124f8:	4932      	ldr	r1, [pc, #200]	; (80125c4 <etharp_tmr+0x14c>)
 80124fa:	687a      	ldr	r2, [r7, #4]
 80124fc:	4613      	mov	r3, r2
 80124fe:	005b      	lsls	r3, r3, #1
 8012500:	4413      	add	r3, r2
 8012502:	00db      	lsls	r3, r3, #3
 8012504:	440b      	add	r3, r1
 8012506:	3312      	adds	r3, #18
 8012508:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801250a:	2b04      	cmp	r3, #4
 801250c:	d903      	bls.n	8012516 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801250e:	6878      	ldr	r0, [r7, #4]
 8012510:	f7ff ff80 	bl	8012414 <etharp_free_entry>
 8012514:	e04a      	b.n	80125ac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8012516:	492b      	ldr	r1, [pc, #172]	; (80125c4 <etharp_tmr+0x14c>)
 8012518:	687a      	ldr	r2, [r7, #4]
 801251a:	4613      	mov	r3, r2
 801251c:	005b      	lsls	r3, r3, #1
 801251e:	4413      	add	r3, r2
 8012520:	00db      	lsls	r3, r3, #3
 8012522:	440b      	add	r3, r1
 8012524:	3314      	adds	r3, #20
 8012526:	781b      	ldrb	r3, [r3, #0]
 8012528:	2b03      	cmp	r3, #3
 801252a:	d10a      	bne.n	8012542 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801252c:	4925      	ldr	r1, [pc, #148]	; (80125c4 <etharp_tmr+0x14c>)
 801252e:	687a      	ldr	r2, [r7, #4]
 8012530:	4613      	mov	r3, r2
 8012532:	005b      	lsls	r3, r3, #1
 8012534:	4413      	add	r3, r2
 8012536:	00db      	lsls	r3, r3, #3
 8012538:	440b      	add	r3, r1
 801253a:	3314      	adds	r3, #20
 801253c:	2204      	movs	r2, #4
 801253e:	701a      	strb	r2, [r3, #0]
 8012540:	e034      	b.n	80125ac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8012542:	4920      	ldr	r1, [pc, #128]	; (80125c4 <etharp_tmr+0x14c>)
 8012544:	687a      	ldr	r2, [r7, #4]
 8012546:	4613      	mov	r3, r2
 8012548:	005b      	lsls	r3, r3, #1
 801254a:	4413      	add	r3, r2
 801254c:	00db      	lsls	r3, r3, #3
 801254e:	440b      	add	r3, r1
 8012550:	3314      	adds	r3, #20
 8012552:	781b      	ldrb	r3, [r3, #0]
 8012554:	2b04      	cmp	r3, #4
 8012556:	d10a      	bne.n	801256e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8012558:	491a      	ldr	r1, [pc, #104]	; (80125c4 <etharp_tmr+0x14c>)
 801255a:	687a      	ldr	r2, [r7, #4]
 801255c:	4613      	mov	r3, r2
 801255e:	005b      	lsls	r3, r3, #1
 8012560:	4413      	add	r3, r2
 8012562:	00db      	lsls	r3, r3, #3
 8012564:	440b      	add	r3, r1
 8012566:	3314      	adds	r3, #20
 8012568:	2202      	movs	r2, #2
 801256a:	701a      	strb	r2, [r3, #0]
 801256c:	e01e      	b.n	80125ac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801256e:	4915      	ldr	r1, [pc, #84]	; (80125c4 <etharp_tmr+0x14c>)
 8012570:	687a      	ldr	r2, [r7, #4]
 8012572:	4613      	mov	r3, r2
 8012574:	005b      	lsls	r3, r3, #1
 8012576:	4413      	add	r3, r2
 8012578:	00db      	lsls	r3, r3, #3
 801257a:	440b      	add	r3, r1
 801257c:	3314      	adds	r3, #20
 801257e:	781b      	ldrb	r3, [r3, #0]
 8012580:	2b01      	cmp	r3, #1
 8012582:	d113      	bne.n	80125ac <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012584:	490f      	ldr	r1, [pc, #60]	; (80125c4 <etharp_tmr+0x14c>)
 8012586:	687a      	ldr	r2, [r7, #4]
 8012588:	4613      	mov	r3, r2
 801258a:	005b      	lsls	r3, r3, #1
 801258c:	4413      	add	r3, r2
 801258e:	00db      	lsls	r3, r3, #3
 8012590:	440b      	add	r3, r1
 8012592:	3308      	adds	r3, #8
 8012594:	6818      	ldr	r0, [r3, #0]
 8012596:	687a      	ldr	r2, [r7, #4]
 8012598:	4613      	mov	r3, r2
 801259a:	005b      	lsls	r3, r3, #1
 801259c:	4413      	add	r3, r2
 801259e:	00db      	lsls	r3, r3, #3
 80125a0:	4a08      	ldr	r2, [pc, #32]	; (80125c4 <etharp_tmr+0x14c>)
 80125a2:	4413      	add	r3, r2
 80125a4:	3304      	adds	r3, #4
 80125a6:	4619      	mov	r1, r3
 80125a8:	f000 fe6e 	bl	8013288 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	3301      	adds	r3, #1
 80125b0:	607b      	str	r3, [r7, #4]
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	2b09      	cmp	r3, #9
 80125b6:	f77f af65 	ble.w	8012484 <etharp_tmr+0xc>
      }
    }
  }
}
 80125ba:	bf00      	nop
 80125bc:	bf00      	nop
 80125be:	3708      	adds	r7, #8
 80125c0:	46bd      	mov	sp, r7
 80125c2:	bd80      	pop	{r7, pc}
 80125c4:	200040e0 	.word	0x200040e0

080125c8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80125c8:	b580      	push	{r7, lr}
 80125ca:	b08a      	sub	sp, #40	; 0x28
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	60f8      	str	r0, [r7, #12]
 80125d0:	460b      	mov	r3, r1
 80125d2:	607a      	str	r2, [r7, #4]
 80125d4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80125d6:	230a      	movs	r3, #10
 80125d8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80125da:	230a      	movs	r3, #10
 80125dc:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80125de:	230a      	movs	r3, #10
 80125e0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80125e2:	2300      	movs	r3, #0
 80125e4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80125e6:	230a      	movs	r3, #10
 80125e8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80125ea:	2300      	movs	r3, #0
 80125ec:	83bb      	strh	r3, [r7, #28]
 80125ee:	2300      	movs	r3, #0
 80125f0:	837b      	strh	r3, [r7, #26]
 80125f2:	2300      	movs	r3, #0
 80125f4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80125f6:	2300      	movs	r3, #0
 80125f8:	843b      	strh	r3, [r7, #32]
 80125fa:	e0ae      	b.n	801275a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80125fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012600:	49a6      	ldr	r1, [pc, #664]	; (801289c <etharp_find_entry+0x2d4>)
 8012602:	4613      	mov	r3, r2
 8012604:	005b      	lsls	r3, r3, #1
 8012606:	4413      	add	r3, r2
 8012608:	00db      	lsls	r3, r3, #3
 801260a:	440b      	add	r3, r1
 801260c:	3314      	adds	r3, #20
 801260e:	781b      	ldrb	r3, [r3, #0]
 8012610:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8012612:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012616:	2b0a      	cmp	r3, #10
 8012618:	d105      	bne.n	8012626 <etharp_find_entry+0x5e>
 801261a:	7dfb      	ldrb	r3, [r7, #23]
 801261c:	2b00      	cmp	r3, #0
 801261e:	d102      	bne.n	8012626 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012620:	8c3b      	ldrh	r3, [r7, #32]
 8012622:	847b      	strh	r3, [r7, #34]	; 0x22
 8012624:	e095      	b.n	8012752 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8012626:	7dfb      	ldrb	r3, [r7, #23]
 8012628:	2b00      	cmp	r3, #0
 801262a:	f000 8092 	beq.w	8012752 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801262e:	7dfb      	ldrb	r3, [r7, #23]
 8012630:	2b01      	cmp	r3, #1
 8012632:	d009      	beq.n	8012648 <etharp_find_entry+0x80>
 8012634:	7dfb      	ldrb	r3, [r7, #23]
 8012636:	2b01      	cmp	r3, #1
 8012638:	d806      	bhi.n	8012648 <etharp_find_entry+0x80>
 801263a:	4b99      	ldr	r3, [pc, #612]	; (80128a0 <etharp_find_entry+0x2d8>)
 801263c:	f240 1223 	movw	r2, #291	; 0x123
 8012640:	4998      	ldr	r1, [pc, #608]	; (80128a4 <etharp_find_entry+0x2dc>)
 8012642:	4899      	ldr	r0, [pc, #612]	; (80128a8 <etharp_find_entry+0x2e0>)
 8012644:	f002 fc2e 	bl	8014ea4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d020      	beq.n	8012690 <etharp_find_entry+0xc8>
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	6819      	ldr	r1, [r3, #0]
 8012652:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012656:	4891      	ldr	r0, [pc, #580]	; (801289c <etharp_find_entry+0x2d4>)
 8012658:	4613      	mov	r3, r2
 801265a:	005b      	lsls	r3, r3, #1
 801265c:	4413      	add	r3, r2
 801265e:	00db      	lsls	r3, r3, #3
 8012660:	4403      	add	r3, r0
 8012662:	3304      	adds	r3, #4
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	4299      	cmp	r1, r3
 8012668:	d112      	bne.n	8012690 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d00c      	beq.n	801268a <etharp_find_entry+0xc2>
 8012670:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012674:	4989      	ldr	r1, [pc, #548]	; (801289c <etharp_find_entry+0x2d4>)
 8012676:	4613      	mov	r3, r2
 8012678:	005b      	lsls	r3, r3, #1
 801267a:	4413      	add	r3, r2
 801267c:	00db      	lsls	r3, r3, #3
 801267e:	440b      	add	r3, r1
 8012680:	3308      	adds	r3, #8
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	687a      	ldr	r2, [r7, #4]
 8012686:	429a      	cmp	r2, r3
 8012688:	d102      	bne.n	8012690 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801268a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801268e:	e100      	b.n	8012892 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012690:	7dfb      	ldrb	r3, [r7, #23]
 8012692:	2b01      	cmp	r3, #1
 8012694:	d140      	bne.n	8012718 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8012696:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801269a:	4980      	ldr	r1, [pc, #512]	; (801289c <etharp_find_entry+0x2d4>)
 801269c:	4613      	mov	r3, r2
 801269e:	005b      	lsls	r3, r3, #1
 80126a0:	4413      	add	r3, r2
 80126a2:	00db      	lsls	r3, r3, #3
 80126a4:	440b      	add	r3, r1
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d01a      	beq.n	80126e2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80126ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80126b0:	497a      	ldr	r1, [pc, #488]	; (801289c <etharp_find_entry+0x2d4>)
 80126b2:	4613      	mov	r3, r2
 80126b4:	005b      	lsls	r3, r3, #1
 80126b6:	4413      	add	r3, r2
 80126b8:	00db      	lsls	r3, r3, #3
 80126ba:	440b      	add	r3, r1
 80126bc:	3312      	adds	r3, #18
 80126be:	881b      	ldrh	r3, [r3, #0]
 80126c0:	8bba      	ldrh	r2, [r7, #28]
 80126c2:	429a      	cmp	r2, r3
 80126c4:	d845      	bhi.n	8012752 <etharp_find_entry+0x18a>
            old_queue = i;
 80126c6:	8c3b      	ldrh	r3, [r7, #32]
 80126c8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80126ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80126ce:	4973      	ldr	r1, [pc, #460]	; (801289c <etharp_find_entry+0x2d4>)
 80126d0:	4613      	mov	r3, r2
 80126d2:	005b      	lsls	r3, r3, #1
 80126d4:	4413      	add	r3, r2
 80126d6:	00db      	lsls	r3, r3, #3
 80126d8:	440b      	add	r3, r1
 80126da:	3312      	adds	r3, #18
 80126dc:	881b      	ldrh	r3, [r3, #0]
 80126de:	83bb      	strh	r3, [r7, #28]
 80126e0:	e037      	b.n	8012752 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80126e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80126e6:	496d      	ldr	r1, [pc, #436]	; (801289c <etharp_find_entry+0x2d4>)
 80126e8:	4613      	mov	r3, r2
 80126ea:	005b      	lsls	r3, r3, #1
 80126ec:	4413      	add	r3, r2
 80126ee:	00db      	lsls	r3, r3, #3
 80126f0:	440b      	add	r3, r1
 80126f2:	3312      	adds	r3, #18
 80126f4:	881b      	ldrh	r3, [r3, #0]
 80126f6:	8b7a      	ldrh	r2, [r7, #26]
 80126f8:	429a      	cmp	r2, r3
 80126fa:	d82a      	bhi.n	8012752 <etharp_find_entry+0x18a>
            old_pending = i;
 80126fc:	8c3b      	ldrh	r3, [r7, #32]
 80126fe:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8012700:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012704:	4965      	ldr	r1, [pc, #404]	; (801289c <etharp_find_entry+0x2d4>)
 8012706:	4613      	mov	r3, r2
 8012708:	005b      	lsls	r3, r3, #1
 801270a:	4413      	add	r3, r2
 801270c:	00db      	lsls	r3, r3, #3
 801270e:	440b      	add	r3, r1
 8012710:	3312      	adds	r3, #18
 8012712:	881b      	ldrh	r3, [r3, #0]
 8012714:	837b      	strh	r3, [r7, #26]
 8012716:	e01c      	b.n	8012752 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8012718:	7dfb      	ldrb	r3, [r7, #23]
 801271a:	2b01      	cmp	r3, #1
 801271c:	d919      	bls.n	8012752 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801271e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012722:	495e      	ldr	r1, [pc, #376]	; (801289c <etharp_find_entry+0x2d4>)
 8012724:	4613      	mov	r3, r2
 8012726:	005b      	lsls	r3, r3, #1
 8012728:	4413      	add	r3, r2
 801272a:	00db      	lsls	r3, r3, #3
 801272c:	440b      	add	r3, r1
 801272e:	3312      	adds	r3, #18
 8012730:	881b      	ldrh	r3, [r3, #0]
 8012732:	8b3a      	ldrh	r2, [r7, #24]
 8012734:	429a      	cmp	r2, r3
 8012736:	d80c      	bhi.n	8012752 <etharp_find_entry+0x18a>
            old_stable = i;
 8012738:	8c3b      	ldrh	r3, [r7, #32]
 801273a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801273c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012740:	4956      	ldr	r1, [pc, #344]	; (801289c <etharp_find_entry+0x2d4>)
 8012742:	4613      	mov	r3, r2
 8012744:	005b      	lsls	r3, r3, #1
 8012746:	4413      	add	r3, r2
 8012748:	00db      	lsls	r3, r3, #3
 801274a:	440b      	add	r3, r1
 801274c:	3312      	adds	r3, #18
 801274e:	881b      	ldrh	r3, [r3, #0]
 8012750:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012752:	8c3b      	ldrh	r3, [r7, #32]
 8012754:	3301      	adds	r3, #1
 8012756:	b29b      	uxth	r3, r3
 8012758:	843b      	strh	r3, [r7, #32]
 801275a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801275e:	2b09      	cmp	r3, #9
 8012760:	f77f af4c 	ble.w	80125fc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012764:	7afb      	ldrb	r3, [r7, #11]
 8012766:	f003 0302 	and.w	r3, r3, #2
 801276a:	2b00      	cmp	r3, #0
 801276c:	d108      	bne.n	8012780 <etharp_find_entry+0x1b8>
 801276e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012772:	2b0a      	cmp	r3, #10
 8012774:	d107      	bne.n	8012786 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8012776:	7afb      	ldrb	r3, [r7, #11]
 8012778:	f003 0301 	and.w	r3, r3, #1
 801277c:	2b00      	cmp	r3, #0
 801277e:	d102      	bne.n	8012786 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012780:	f04f 33ff 	mov.w	r3, #4294967295
 8012784:	e085      	b.n	8012892 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8012786:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801278a:	2b09      	cmp	r3, #9
 801278c:	dc02      	bgt.n	8012794 <etharp_find_entry+0x1cc>
    i = empty;
 801278e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012790:	843b      	strh	r3, [r7, #32]
 8012792:	e039      	b.n	8012808 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012794:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8012798:	2b09      	cmp	r3, #9
 801279a:	dc14      	bgt.n	80127c6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801279c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801279e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80127a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80127a4:	493d      	ldr	r1, [pc, #244]	; (801289c <etharp_find_entry+0x2d4>)
 80127a6:	4613      	mov	r3, r2
 80127a8:	005b      	lsls	r3, r3, #1
 80127aa:	4413      	add	r3, r2
 80127ac:	00db      	lsls	r3, r3, #3
 80127ae:	440b      	add	r3, r1
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d018      	beq.n	80127e8 <etharp_find_entry+0x220>
 80127b6:	4b3a      	ldr	r3, [pc, #232]	; (80128a0 <etharp_find_entry+0x2d8>)
 80127b8:	f240 126d 	movw	r2, #365	; 0x16d
 80127bc:	493b      	ldr	r1, [pc, #236]	; (80128ac <etharp_find_entry+0x2e4>)
 80127be:	483a      	ldr	r0, [pc, #232]	; (80128a8 <etharp_find_entry+0x2e0>)
 80127c0:	f002 fb70 	bl	8014ea4 <iprintf>
 80127c4:	e010      	b.n	80127e8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80127c6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80127ca:	2b09      	cmp	r3, #9
 80127cc:	dc02      	bgt.n	80127d4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80127ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80127d0:	843b      	strh	r3, [r7, #32]
 80127d2:	e009      	b.n	80127e8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80127d4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80127d8:	2b09      	cmp	r3, #9
 80127da:	dc02      	bgt.n	80127e2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80127dc:	8bfb      	ldrh	r3, [r7, #30]
 80127de:	843b      	strh	r3, [r7, #32]
 80127e0:	e002      	b.n	80127e8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80127e2:	f04f 33ff 	mov.w	r3, #4294967295
 80127e6:	e054      	b.n	8012892 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80127e8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80127ec:	2b09      	cmp	r3, #9
 80127ee:	dd06      	ble.n	80127fe <etharp_find_entry+0x236>
 80127f0:	4b2b      	ldr	r3, [pc, #172]	; (80128a0 <etharp_find_entry+0x2d8>)
 80127f2:	f240 127f 	movw	r2, #383	; 0x17f
 80127f6:	492e      	ldr	r1, [pc, #184]	; (80128b0 <etharp_find_entry+0x2e8>)
 80127f8:	482b      	ldr	r0, [pc, #172]	; (80128a8 <etharp_find_entry+0x2e0>)
 80127fa:	f002 fb53 	bl	8014ea4 <iprintf>
    etharp_free_entry(i);
 80127fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012802:	4618      	mov	r0, r3
 8012804:	f7ff fe06 	bl	8012414 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012808:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801280c:	2b09      	cmp	r3, #9
 801280e:	dd06      	ble.n	801281e <etharp_find_entry+0x256>
 8012810:	4b23      	ldr	r3, [pc, #140]	; (80128a0 <etharp_find_entry+0x2d8>)
 8012812:	f240 1283 	movw	r2, #387	; 0x183
 8012816:	4926      	ldr	r1, [pc, #152]	; (80128b0 <etharp_find_entry+0x2e8>)
 8012818:	4823      	ldr	r0, [pc, #140]	; (80128a8 <etharp_find_entry+0x2e0>)
 801281a:	f002 fb43 	bl	8014ea4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801281e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012822:	491e      	ldr	r1, [pc, #120]	; (801289c <etharp_find_entry+0x2d4>)
 8012824:	4613      	mov	r3, r2
 8012826:	005b      	lsls	r3, r3, #1
 8012828:	4413      	add	r3, r2
 801282a:	00db      	lsls	r3, r3, #3
 801282c:	440b      	add	r3, r1
 801282e:	3314      	adds	r3, #20
 8012830:	781b      	ldrb	r3, [r3, #0]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d006      	beq.n	8012844 <etharp_find_entry+0x27c>
 8012836:	4b1a      	ldr	r3, [pc, #104]	; (80128a0 <etharp_find_entry+0x2d8>)
 8012838:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801283c:	491d      	ldr	r1, [pc, #116]	; (80128b4 <etharp_find_entry+0x2ec>)
 801283e:	481a      	ldr	r0, [pc, #104]	; (80128a8 <etharp_find_entry+0x2e0>)
 8012840:	f002 fb30 	bl	8014ea4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d00b      	beq.n	8012862 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801284a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	6819      	ldr	r1, [r3, #0]
 8012852:	4812      	ldr	r0, [pc, #72]	; (801289c <etharp_find_entry+0x2d4>)
 8012854:	4613      	mov	r3, r2
 8012856:	005b      	lsls	r3, r3, #1
 8012858:	4413      	add	r3, r2
 801285a:	00db      	lsls	r3, r3, #3
 801285c:	4403      	add	r3, r0
 801285e:	3304      	adds	r3, #4
 8012860:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8012862:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012866:	490d      	ldr	r1, [pc, #52]	; (801289c <etharp_find_entry+0x2d4>)
 8012868:	4613      	mov	r3, r2
 801286a:	005b      	lsls	r3, r3, #1
 801286c:	4413      	add	r3, r2
 801286e:	00db      	lsls	r3, r3, #3
 8012870:	440b      	add	r3, r1
 8012872:	3312      	adds	r3, #18
 8012874:	2200      	movs	r2, #0
 8012876:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8012878:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801287c:	4907      	ldr	r1, [pc, #28]	; (801289c <etharp_find_entry+0x2d4>)
 801287e:	4613      	mov	r3, r2
 8012880:	005b      	lsls	r3, r3, #1
 8012882:	4413      	add	r3, r2
 8012884:	00db      	lsls	r3, r3, #3
 8012886:	440b      	add	r3, r1
 8012888:	3308      	adds	r3, #8
 801288a:	687a      	ldr	r2, [r7, #4]
 801288c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801288e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8012892:	4618      	mov	r0, r3
 8012894:	3728      	adds	r7, #40	; 0x28
 8012896:	46bd      	mov	sp, r7
 8012898:	bd80      	pop	{r7, pc}
 801289a:	bf00      	nop
 801289c:	200040e0 	.word	0x200040e0
 80128a0:	08018de0 	.word	0x08018de0
 80128a4:	08018e18 	.word	0x08018e18
 80128a8:	08018e58 	.word	0x08018e58
 80128ac:	08018e80 	.word	0x08018e80
 80128b0:	08018e98 	.word	0x08018e98
 80128b4:	08018eac 	.word	0x08018eac

080128b8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80128b8:	b580      	push	{r7, lr}
 80128ba:	b088      	sub	sp, #32
 80128bc:	af02      	add	r7, sp, #8
 80128be:	60f8      	str	r0, [r7, #12]
 80128c0:	60b9      	str	r1, [r7, #8]
 80128c2:	607a      	str	r2, [r7, #4]
 80128c4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80128cc:	2b06      	cmp	r3, #6
 80128ce:	d006      	beq.n	80128de <etharp_update_arp_entry+0x26>
 80128d0:	4b48      	ldr	r3, [pc, #288]	; (80129f4 <etharp_update_arp_entry+0x13c>)
 80128d2:	f240 12a9 	movw	r2, #425	; 0x1a9
 80128d6:	4948      	ldr	r1, [pc, #288]	; (80129f8 <etharp_update_arp_entry+0x140>)
 80128d8:	4848      	ldr	r0, [pc, #288]	; (80129fc <etharp_update_arp_entry+0x144>)
 80128da:	f002 fae3 	bl	8014ea4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80128de:	68bb      	ldr	r3, [r7, #8]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d012      	beq.n	801290a <etharp_update_arp_entry+0x52>
 80128e4:	68bb      	ldr	r3, [r7, #8]
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d00e      	beq.n	801290a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80128ec:	68bb      	ldr	r3, [r7, #8]
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	68f9      	ldr	r1, [r7, #12]
 80128f2:	4618      	mov	r0, r3
 80128f4:	f001 f8fe 	bl	8013af4 <ip4_addr_isbroadcast_u32>
 80128f8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d105      	bne.n	801290a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80128fe:	68bb      	ldr	r3, [r7, #8]
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012906:	2be0      	cmp	r3, #224	; 0xe0
 8012908:	d102      	bne.n	8012910 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801290a:	f06f 030f 	mvn.w	r3, #15
 801290e:	e06c      	b.n	80129ea <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012910:	78fb      	ldrb	r3, [r7, #3]
 8012912:	68fa      	ldr	r2, [r7, #12]
 8012914:	4619      	mov	r1, r3
 8012916:	68b8      	ldr	r0, [r7, #8]
 8012918:	f7ff fe56 	bl	80125c8 <etharp_find_entry>
 801291c:	4603      	mov	r3, r0
 801291e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012920:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012924:	2b00      	cmp	r3, #0
 8012926:	da02      	bge.n	801292e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012928:	8afb      	ldrh	r3, [r7, #22]
 801292a:	b25b      	sxtb	r3, r3
 801292c:	e05d      	b.n	80129ea <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801292e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012932:	4933      	ldr	r1, [pc, #204]	; (8012a00 <etharp_update_arp_entry+0x148>)
 8012934:	4613      	mov	r3, r2
 8012936:	005b      	lsls	r3, r3, #1
 8012938:	4413      	add	r3, r2
 801293a:	00db      	lsls	r3, r3, #3
 801293c:	440b      	add	r3, r1
 801293e:	3314      	adds	r3, #20
 8012940:	2202      	movs	r2, #2
 8012942:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012944:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012948:	492d      	ldr	r1, [pc, #180]	; (8012a00 <etharp_update_arp_entry+0x148>)
 801294a:	4613      	mov	r3, r2
 801294c:	005b      	lsls	r3, r3, #1
 801294e:	4413      	add	r3, r2
 8012950:	00db      	lsls	r3, r3, #3
 8012952:	440b      	add	r3, r1
 8012954:	3308      	adds	r3, #8
 8012956:	68fa      	ldr	r2, [r7, #12]
 8012958:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801295a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801295e:	4613      	mov	r3, r2
 8012960:	005b      	lsls	r3, r3, #1
 8012962:	4413      	add	r3, r2
 8012964:	00db      	lsls	r3, r3, #3
 8012966:	3308      	adds	r3, #8
 8012968:	4a25      	ldr	r2, [pc, #148]	; (8012a00 <etharp_update_arp_entry+0x148>)
 801296a:	4413      	add	r3, r2
 801296c:	3304      	adds	r3, #4
 801296e:	2206      	movs	r2, #6
 8012970:	6879      	ldr	r1, [r7, #4]
 8012972:	4618      	mov	r0, r3
 8012974:	f002 fa80 	bl	8014e78 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012978:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801297c:	4920      	ldr	r1, [pc, #128]	; (8012a00 <etharp_update_arp_entry+0x148>)
 801297e:	4613      	mov	r3, r2
 8012980:	005b      	lsls	r3, r3, #1
 8012982:	4413      	add	r3, r2
 8012984:	00db      	lsls	r3, r3, #3
 8012986:	440b      	add	r3, r1
 8012988:	3312      	adds	r3, #18
 801298a:	2200      	movs	r2, #0
 801298c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801298e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012992:	491b      	ldr	r1, [pc, #108]	; (8012a00 <etharp_update_arp_entry+0x148>)
 8012994:	4613      	mov	r3, r2
 8012996:	005b      	lsls	r3, r3, #1
 8012998:	4413      	add	r3, r2
 801299a:	00db      	lsls	r3, r3, #3
 801299c:	440b      	add	r3, r1
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d021      	beq.n	80129e8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80129a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80129a8:	4915      	ldr	r1, [pc, #84]	; (8012a00 <etharp_update_arp_entry+0x148>)
 80129aa:	4613      	mov	r3, r2
 80129ac:	005b      	lsls	r3, r3, #1
 80129ae:	4413      	add	r3, r2
 80129b0:	00db      	lsls	r3, r3, #3
 80129b2:	440b      	add	r3, r1
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80129b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80129bc:	4910      	ldr	r1, [pc, #64]	; (8012a00 <etharp_update_arp_entry+0x148>)
 80129be:	4613      	mov	r3, r2
 80129c0:	005b      	lsls	r3, r3, #1
 80129c2:	4413      	add	r3, r2
 80129c4:	00db      	lsls	r3, r3, #3
 80129c6:	440b      	add	r3, r1
 80129c8:	2200      	movs	r2, #0
 80129ca:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80129d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80129d6:	9300      	str	r3, [sp, #0]
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	6939      	ldr	r1, [r7, #16]
 80129dc:	68f8      	ldr	r0, [r7, #12]
 80129de:	f002 f8bb 	bl	8014b58 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80129e2:	6938      	ldr	r0, [r7, #16]
 80129e4:	f7f8 fe4e 	bl	800b684 <pbuf_free>
  }
  return ERR_OK;
 80129e8:	2300      	movs	r3, #0
}
 80129ea:	4618      	mov	r0, r3
 80129ec:	3718      	adds	r7, #24
 80129ee:	46bd      	mov	sp, r7
 80129f0:	bd80      	pop	{r7, pc}
 80129f2:	bf00      	nop
 80129f4:	08018de0 	.word	0x08018de0
 80129f8:	08018ed8 	.word	0x08018ed8
 80129fc:	08018e58 	.word	0x08018e58
 8012a00:	200040e0 	.word	0x200040e0

08012a04 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8012a04:	b580      	push	{r7, lr}
 8012a06:	b084      	sub	sp, #16
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012a0c:	2300      	movs	r3, #0
 8012a0e:	60fb      	str	r3, [r7, #12]
 8012a10:	e01e      	b.n	8012a50 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8012a12:	4913      	ldr	r1, [pc, #76]	; (8012a60 <etharp_cleanup_netif+0x5c>)
 8012a14:	68fa      	ldr	r2, [r7, #12]
 8012a16:	4613      	mov	r3, r2
 8012a18:	005b      	lsls	r3, r3, #1
 8012a1a:	4413      	add	r3, r2
 8012a1c:	00db      	lsls	r3, r3, #3
 8012a1e:	440b      	add	r3, r1
 8012a20:	3314      	adds	r3, #20
 8012a22:	781b      	ldrb	r3, [r3, #0]
 8012a24:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8012a26:	7afb      	ldrb	r3, [r7, #11]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d00e      	beq.n	8012a4a <etharp_cleanup_netif+0x46>
 8012a2c:	490c      	ldr	r1, [pc, #48]	; (8012a60 <etharp_cleanup_netif+0x5c>)
 8012a2e:	68fa      	ldr	r2, [r7, #12]
 8012a30:	4613      	mov	r3, r2
 8012a32:	005b      	lsls	r3, r3, #1
 8012a34:	4413      	add	r3, r2
 8012a36:	00db      	lsls	r3, r3, #3
 8012a38:	440b      	add	r3, r1
 8012a3a:	3308      	adds	r3, #8
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	687a      	ldr	r2, [r7, #4]
 8012a40:	429a      	cmp	r2, r3
 8012a42:	d102      	bne.n	8012a4a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012a44:	68f8      	ldr	r0, [r7, #12]
 8012a46:	f7ff fce5 	bl	8012414 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	3301      	adds	r3, #1
 8012a4e:	60fb      	str	r3, [r7, #12]
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	2b09      	cmp	r3, #9
 8012a54:	dddd      	ble.n	8012a12 <etharp_cleanup_netif+0xe>
    }
  }
}
 8012a56:	bf00      	nop
 8012a58:	bf00      	nop
 8012a5a:	3710      	adds	r7, #16
 8012a5c:	46bd      	mov	sp, r7
 8012a5e:	bd80      	pop	{r7, pc}
 8012a60:	200040e0 	.word	0x200040e0

08012a64 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012a64:	b5b0      	push	{r4, r5, r7, lr}
 8012a66:	b08a      	sub	sp, #40	; 0x28
 8012a68:	af04      	add	r7, sp, #16
 8012a6a:	6078      	str	r0, [r7, #4]
 8012a6c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012a6e:	683b      	ldr	r3, [r7, #0]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d107      	bne.n	8012a84 <etharp_input+0x20>
 8012a74:	4b3d      	ldr	r3, [pc, #244]	; (8012b6c <etharp_input+0x108>)
 8012a76:	f240 228a 	movw	r2, #650	; 0x28a
 8012a7a:	493d      	ldr	r1, [pc, #244]	; (8012b70 <etharp_input+0x10c>)
 8012a7c:	483d      	ldr	r0, [pc, #244]	; (8012b74 <etharp_input+0x110>)
 8012a7e:	f002 fa11 	bl	8014ea4 <iprintf>
 8012a82:	e06f      	b.n	8012b64 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	685b      	ldr	r3, [r3, #4]
 8012a88:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012a8a:	693b      	ldr	r3, [r7, #16]
 8012a8c:	881b      	ldrh	r3, [r3, #0]
 8012a8e:	b29b      	uxth	r3, r3
 8012a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012a94:	d10c      	bne.n	8012ab0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012a96:	693b      	ldr	r3, [r7, #16]
 8012a98:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012a9a:	2b06      	cmp	r3, #6
 8012a9c:	d108      	bne.n	8012ab0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012a9e:	693b      	ldr	r3, [r7, #16]
 8012aa0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012aa2:	2b04      	cmp	r3, #4
 8012aa4:	d104      	bne.n	8012ab0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8012aa6:	693b      	ldr	r3, [r7, #16]
 8012aa8:	885b      	ldrh	r3, [r3, #2]
 8012aaa:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012aac:	2b08      	cmp	r3, #8
 8012aae:	d003      	beq.n	8012ab8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012ab0:	6878      	ldr	r0, [r7, #4]
 8012ab2:	f7f8 fde7 	bl	800b684 <pbuf_free>
    return;
 8012ab6:	e055      	b.n	8012b64 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8012ab8:	693b      	ldr	r3, [r7, #16]
 8012aba:	330e      	adds	r3, #14
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012ac0:	693b      	ldr	r3, [r7, #16]
 8012ac2:	3318      	adds	r3, #24
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012ac8:	683b      	ldr	r3, [r7, #0]
 8012aca:	3304      	adds	r3, #4
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d102      	bne.n	8012ad8 <etharp_input+0x74>
    for_us = 0;
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	75fb      	strb	r3, [r7, #23]
 8012ad6:	e009      	b.n	8012aec <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012ad8:	68ba      	ldr	r2, [r7, #8]
 8012ada:	683b      	ldr	r3, [r7, #0]
 8012adc:	3304      	adds	r3, #4
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	429a      	cmp	r2, r3
 8012ae2:	bf0c      	ite	eq
 8012ae4:	2301      	moveq	r3, #1
 8012ae6:	2300      	movne	r3, #0
 8012ae8:	b2db      	uxtb	r3, r3
 8012aea:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012aec:	693b      	ldr	r3, [r7, #16]
 8012aee:	f103 0208 	add.w	r2, r3, #8
 8012af2:	7dfb      	ldrb	r3, [r7, #23]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d001      	beq.n	8012afc <etharp_input+0x98>
 8012af8:	2301      	movs	r3, #1
 8012afa:	e000      	b.n	8012afe <etharp_input+0x9a>
 8012afc:	2302      	movs	r3, #2
 8012afe:	f107 010c 	add.w	r1, r7, #12
 8012b02:	6838      	ldr	r0, [r7, #0]
 8012b04:	f7ff fed8 	bl	80128b8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8012b08:	693b      	ldr	r3, [r7, #16]
 8012b0a:	88db      	ldrh	r3, [r3, #6]
 8012b0c:	b29b      	uxth	r3, r3
 8012b0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012b12:	d003      	beq.n	8012b1c <etharp_input+0xb8>
 8012b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012b18:	d01e      	beq.n	8012b58 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8012b1a:	e020      	b.n	8012b5e <etharp_input+0xfa>
      if (for_us) {
 8012b1c:	7dfb      	ldrb	r3, [r7, #23]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d01c      	beq.n	8012b5c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8012b22:	683b      	ldr	r3, [r7, #0]
 8012b24:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012b28:	693b      	ldr	r3, [r7, #16]
 8012b2a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012b2e:	683b      	ldr	r3, [r7, #0]
 8012b30:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8012b34:	683b      	ldr	r3, [r7, #0]
 8012b36:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012b38:	693a      	ldr	r2, [r7, #16]
 8012b3a:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012b3c:	2102      	movs	r1, #2
 8012b3e:	9103      	str	r1, [sp, #12]
 8012b40:	f107 010c 	add.w	r1, r7, #12
 8012b44:	9102      	str	r1, [sp, #8]
 8012b46:	9201      	str	r2, [sp, #4]
 8012b48:	9300      	str	r3, [sp, #0]
 8012b4a:	462b      	mov	r3, r5
 8012b4c:	4622      	mov	r2, r4
 8012b4e:	4601      	mov	r1, r0
 8012b50:	6838      	ldr	r0, [r7, #0]
 8012b52:	f000 faeb 	bl	801312c <etharp_raw>
      break;
 8012b56:	e001      	b.n	8012b5c <etharp_input+0xf8>
      break;
 8012b58:	bf00      	nop
 8012b5a:	e000      	b.n	8012b5e <etharp_input+0xfa>
      break;
 8012b5c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012b5e:	6878      	ldr	r0, [r7, #4]
 8012b60:	f7f8 fd90 	bl	800b684 <pbuf_free>
}
 8012b64:	3718      	adds	r7, #24
 8012b66:	46bd      	mov	sp, r7
 8012b68:	bdb0      	pop	{r4, r5, r7, pc}
 8012b6a:	bf00      	nop
 8012b6c:	08018de0 	.word	0x08018de0
 8012b70:	08018f30 	.word	0x08018f30
 8012b74:	08018e58 	.word	0x08018e58

08012b78 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8012b78:	b580      	push	{r7, lr}
 8012b7a:	b086      	sub	sp, #24
 8012b7c:	af02      	add	r7, sp, #8
 8012b7e:	60f8      	str	r0, [r7, #12]
 8012b80:	60b9      	str	r1, [r7, #8]
 8012b82:	4613      	mov	r3, r2
 8012b84:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012b86:	79fa      	ldrb	r2, [r7, #7]
 8012b88:	4944      	ldr	r1, [pc, #272]	; (8012c9c <etharp_output_to_arp_index+0x124>)
 8012b8a:	4613      	mov	r3, r2
 8012b8c:	005b      	lsls	r3, r3, #1
 8012b8e:	4413      	add	r3, r2
 8012b90:	00db      	lsls	r3, r3, #3
 8012b92:	440b      	add	r3, r1
 8012b94:	3314      	adds	r3, #20
 8012b96:	781b      	ldrb	r3, [r3, #0]
 8012b98:	2b01      	cmp	r3, #1
 8012b9a:	d806      	bhi.n	8012baa <etharp_output_to_arp_index+0x32>
 8012b9c:	4b40      	ldr	r3, [pc, #256]	; (8012ca0 <etharp_output_to_arp_index+0x128>)
 8012b9e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8012ba2:	4940      	ldr	r1, [pc, #256]	; (8012ca4 <etharp_output_to_arp_index+0x12c>)
 8012ba4:	4840      	ldr	r0, [pc, #256]	; (8012ca8 <etharp_output_to_arp_index+0x130>)
 8012ba6:	f002 f97d 	bl	8014ea4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8012baa:	79fa      	ldrb	r2, [r7, #7]
 8012bac:	493b      	ldr	r1, [pc, #236]	; (8012c9c <etharp_output_to_arp_index+0x124>)
 8012bae:	4613      	mov	r3, r2
 8012bb0:	005b      	lsls	r3, r3, #1
 8012bb2:	4413      	add	r3, r2
 8012bb4:	00db      	lsls	r3, r3, #3
 8012bb6:	440b      	add	r3, r1
 8012bb8:	3314      	adds	r3, #20
 8012bba:	781b      	ldrb	r3, [r3, #0]
 8012bbc:	2b02      	cmp	r3, #2
 8012bbe:	d153      	bne.n	8012c68 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012bc0:	79fa      	ldrb	r2, [r7, #7]
 8012bc2:	4936      	ldr	r1, [pc, #216]	; (8012c9c <etharp_output_to_arp_index+0x124>)
 8012bc4:	4613      	mov	r3, r2
 8012bc6:	005b      	lsls	r3, r3, #1
 8012bc8:	4413      	add	r3, r2
 8012bca:	00db      	lsls	r3, r3, #3
 8012bcc:	440b      	add	r3, r1
 8012bce:	3312      	adds	r3, #18
 8012bd0:	881b      	ldrh	r3, [r3, #0]
 8012bd2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8012bd6:	d919      	bls.n	8012c0c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012bd8:	79fa      	ldrb	r2, [r7, #7]
 8012bda:	4613      	mov	r3, r2
 8012bdc:	005b      	lsls	r3, r3, #1
 8012bde:	4413      	add	r3, r2
 8012be0:	00db      	lsls	r3, r3, #3
 8012be2:	4a2e      	ldr	r2, [pc, #184]	; (8012c9c <etharp_output_to_arp_index+0x124>)
 8012be4:	4413      	add	r3, r2
 8012be6:	3304      	adds	r3, #4
 8012be8:	4619      	mov	r1, r3
 8012bea:	68f8      	ldr	r0, [r7, #12]
 8012bec:	f000 fb4c 	bl	8013288 <etharp_request>
 8012bf0:	4603      	mov	r3, r0
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d138      	bne.n	8012c68 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012bf6:	79fa      	ldrb	r2, [r7, #7]
 8012bf8:	4928      	ldr	r1, [pc, #160]	; (8012c9c <etharp_output_to_arp_index+0x124>)
 8012bfa:	4613      	mov	r3, r2
 8012bfc:	005b      	lsls	r3, r3, #1
 8012bfe:	4413      	add	r3, r2
 8012c00:	00db      	lsls	r3, r3, #3
 8012c02:	440b      	add	r3, r1
 8012c04:	3314      	adds	r3, #20
 8012c06:	2203      	movs	r2, #3
 8012c08:	701a      	strb	r2, [r3, #0]
 8012c0a:	e02d      	b.n	8012c68 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8012c0c:	79fa      	ldrb	r2, [r7, #7]
 8012c0e:	4923      	ldr	r1, [pc, #140]	; (8012c9c <etharp_output_to_arp_index+0x124>)
 8012c10:	4613      	mov	r3, r2
 8012c12:	005b      	lsls	r3, r3, #1
 8012c14:	4413      	add	r3, r2
 8012c16:	00db      	lsls	r3, r3, #3
 8012c18:	440b      	add	r3, r1
 8012c1a:	3312      	adds	r3, #18
 8012c1c:	881b      	ldrh	r3, [r3, #0]
 8012c1e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012c22:	d321      	bcc.n	8012c68 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012c24:	79fa      	ldrb	r2, [r7, #7]
 8012c26:	4613      	mov	r3, r2
 8012c28:	005b      	lsls	r3, r3, #1
 8012c2a:	4413      	add	r3, r2
 8012c2c:	00db      	lsls	r3, r3, #3
 8012c2e:	4a1b      	ldr	r2, [pc, #108]	; (8012c9c <etharp_output_to_arp_index+0x124>)
 8012c30:	4413      	add	r3, r2
 8012c32:	1d19      	adds	r1, r3, #4
 8012c34:	79fa      	ldrb	r2, [r7, #7]
 8012c36:	4613      	mov	r3, r2
 8012c38:	005b      	lsls	r3, r3, #1
 8012c3a:	4413      	add	r3, r2
 8012c3c:	00db      	lsls	r3, r3, #3
 8012c3e:	3308      	adds	r3, #8
 8012c40:	4a16      	ldr	r2, [pc, #88]	; (8012c9c <etharp_output_to_arp_index+0x124>)
 8012c42:	4413      	add	r3, r2
 8012c44:	3304      	adds	r3, #4
 8012c46:	461a      	mov	r2, r3
 8012c48:	68f8      	ldr	r0, [r7, #12]
 8012c4a:	f000 fafb 	bl	8013244 <etharp_request_dst>
 8012c4e:	4603      	mov	r3, r0
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d109      	bne.n	8012c68 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012c54:	79fa      	ldrb	r2, [r7, #7]
 8012c56:	4911      	ldr	r1, [pc, #68]	; (8012c9c <etharp_output_to_arp_index+0x124>)
 8012c58:	4613      	mov	r3, r2
 8012c5a:	005b      	lsls	r3, r3, #1
 8012c5c:	4413      	add	r3, r2
 8012c5e:	00db      	lsls	r3, r3, #3
 8012c60:	440b      	add	r3, r1
 8012c62:	3314      	adds	r3, #20
 8012c64:	2203      	movs	r2, #3
 8012c66:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8012c6e:	79fa      	ldrb	r2, [r7, #7]
 8012c70:	4613      	mov	r3, r2
 8012c72:	005b      	lsls	r3, r3, #1
 8012c74:	4413      	add	r3, r2
 8012c76:	00db      	lsls	r3, r3, #3
 8012c78:	3308      	adds	r3, #8
 8012c7a:	4a08      	ldr	r2, [pc, #32]	; (8012c9c <etharp_output_to_arp_index+0x124>)
 8012c7c:	4413      	add	r3, r2
 8012c7e:	3304      	adds	r3, #4
 8012c80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012c84:	9200      	str	r2, [sp, #0]
 8012c86:	460a      	mov	r2, r1
 8012c88:	68b9      	ldr	r1, [r7, #8]
 8012c8a:	68f8      	ldr	r0, [r7, #12]
 8012c8c:	f001 ff64 	bl	8014b58 <ethernet_output>
 8012c90:	4603      	mov	r3, r0
}
 8012c92:	4618      	mov	r0, r3
 8012c94:	3710      	adds	r7, #16
 8012c96:	46bd      	mov	sp, r7
 8012c98:	bd80      	pop	{r7, pc}
 8012c9a:	bf00      	nop
 8012c9c:	200040e0 	.word	0x200040e0
 8012ca0:	08018de0 	.word	0x08018de0
 8012ca4:	08018f50 	.word	0x08018f50
 8012ca8:	08018e58 	.word	0x08018e58

08012cac <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012cac:	b580      	push	{r7, lr}
 8012cae:	b08a      	sub	sp, #40	; 0x28
 8012cb0:	af02      	add	r7, sp, #8
 8012cb2:	60f8      	str	r0, [r7, #12]
 8012cb4:	60b9      	str	r1, [r7, #8]
 8012cb6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d106      	bne.n	8012cd0 <etharp_output+0x24>
 8012cc2:	4b73      	ldr	r3, [pc, #460]	; (8012e90 <etharp_output+0x1e4>)
 8012cc4:	f240 321e 	movw	r2, #798	; 0x31e
 8012cc8:	4972      	ldr	r1, [pc, #456]	; (8012e94 <etharp_output+0x1e8>)
 8012cca:	4873      	ldr	r0, [pc, #460]	; (8012e98 <etharp_output+0x1ec>)
 8012ccc:	f002 f8ea 	bl	8014ea4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012cd0:	68bb      	ldr	r3, [r7, #8]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d106      	bne.n	8012ce4 <etharp_output+0x38>
 8012cd6:	4b6e      	ldr	r3, [pc, #440]	; (8012e90 <etharp_output+0x1e4>)
 8012cd8:	f240 321f 	movw	r2, #799	; 0x31f
 8012cdc:	496f      	ldr	r1, [pc, #444]	; (8012e9c <etharp_output+0x1f0>)
 8012cde:	486e      	ldr	r0, [pc, #440]	; (8012e98 <etharp_output+0x1ec>)
 8012ce0:	f002 f8e0 	bl	8014ea4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d106      	bne.n	8012cf8 <etharp_output+0x4c>
 8012cea:	4b69      	ldr	r3, [pc, #420]	; (8012e90 <etharp_output+0x1e4>)
 8012cec:	f44f 7248 	mov.w	r2, #800	; 0x320
 8012cf0:	496b      	ldr	r1, [pc, #428]	; (8012ea0 <etharp_output+0x1f4>)
 8012cf2:	4869      	ldr	r0, [pc, #420]	; (8012e98 <etharp_output+0x1ec>)
 8012cf4:	f002 f8d6 	bl	8014ea4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	68f9      	ldr	r1, [r7, #12]
 8012cfe:	4618      	mov	r0, r3
 8012d00:	f000 fef8 	bl	8013af4 <ip4_addr_isbroadcast_u32>
 8012d04:	4603      	mov	r3, r0
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d002      	beq.n	8012d10 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8012d0a:	4b66      	ldr	r3, [pc, #408]	; (8012ea4 <etharp_output+0x1f8>)
 8012d0c:	61fb      	str	r3, [r7, #28]
 8012d0e:	e0af      	b.n	8012e70 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012d18:	2be0      	cmp	r3, #224	; 0xe0
 8012d1a:	d118      	bne.n	8012d4e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012d1c:	2301      	movs	r3, #1
 8012d1e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012d20:	2300      	movs	r3, #0
 8012d22:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8012d24:	235e      	movs	r3, #94	; 0x5e
 8012d26:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	3301      	adds	r3, #1
 8012d2c:	781b      	ldrb	r3, [r3, #0]
 8012d2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012d32:	b2db      	uxtb	r3, r3
 8012d34:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	3302      	adds	r3, #2
 8012d3a:	781b      	ldrb	r3, [r3, #0]
 8012d3c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	3303      	adds	r3, #3
 8012d42:	781b      	ldrb	r3, [r3, #0]
 8012d44:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8012d46:	f107 0310 	add.w	r3, r7, #16
 8012d4a:	61fb      	str	r3, [r7, #28]
 8012d4c:	e090      	b.n	8012e70 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	681a      	ldr	r2, [r3, #0]
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	3304      	adds	r3, #4
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	405a      	eors	r2, r3
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	3308      	adds	r3, #8
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	4013      	ands	r3, r2
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d012      	beq.n	8012d8c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012d6c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8012d70:	4293      	cmp	r3, r2
 8012d72:	d00b      	beq.n	8012d8c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	330c      	adds	r3, #12
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d003      	beq.n	8012d86 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	330c      	adds	r3, #12
 8012d82:	61bb      	str	r3, [r7, #24]
 8012d84:	e002      	b.n	8012d8c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8012d86:	f06f 0303 	mvn.w	r3, #3
 8012d8a:	e07d      	b.n	8012e88 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012d8c:	4b46      	ldr	r3, [pc, #280]	; (8012ea8 <etharp_output+0x1fc>)
 8012d8e:	781b      	ldrb	r3, [r3, #0]
 8012d90:	4619      	mov	r1, r3
 8012d92:	4a46      	ldr	r2, [pc, #280]	; (8012eac <etharp_output+0x200>)
 8012d94:	460b      	mov	r3, r1
 8012d96:	005b      	lsls	r3, r3, #1
 8012d98:	440b      	add	r3, r1
 8012d9a:	00db      	lsls	r3, r3, #3
 8012d9c:	4413      	add	r3, r2
 8012d9e:	3314      	adds	r3, #20
 8012da0:	781b      	ldrb	r3, [r3, #0]
 8012da2:	2b01      	cmp	r3, #1
 8012da4:	d925      	bls.n	8012df2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012da6:	4b40      	ldr	r3, [pc, #256]	; (8012ea8 <etharp_output+0x1fc>)
 8012da8:	781b      	ldrb	r3, [r3, #0]
 8012daa:	4619      	mov	r1, r3
 8012dac:	4a3f      	ldr	r2, [pc, #252]	; (8012eac <etharp_output+0x200>)
 8012dae:	460b      	mov	r3, r1
 8012db0:	005b      	lsls	r3, r3, #1
 8012db2:	440b      	add	r3, r1
 8012db4:	00db      	lsls	r3, r3, #3
 8012db6:	4413      	add	r3, r2
 8012db8:	3308      	adds	r3, #8
 8012dba:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012dbc:	68fa      	ldr	r2, [r7, #12]
 8012dbe:	429a      	cmp	r2, r3
 8012dc0:	d117      	bne.n	8012df2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8012dc2:	69bb      	ldr	r3, [r7, #24]
 8012dc4:	681a      	ldr	r2, [r3, #0]
 8012dc6:	4b38      	ldr	r3, [pc, #224]	; (8012ea8 <etharp_output+0x1fc>)
 8012dc8:	781b      	ldrb	r3, [r3, #0]
 8012dca:	4618      	mov	r0, r3
 8012dcc:	4937      	ldr	r1, [pc, #220]	; (8012eac <etharp_output+0x200>)
 8012dce:	4603      	mov	r3, r0
 8012dd0:	005b      	lsls	r3, r3, #1
 8012dd2:	4403      	add	r3, r0
 8012dd4:	00db      	lsls	r3, r3, #3
 8012dd6:	440b      	add	r3, r1
 8012dd8:	3304      	adds	r3, #4
 8012dda:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012ddc:	429a      	cmp	r2, r3
 8012dde:	d108      	bne.n	8012df2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012de0:	4b31      	ldr	r3, [pc, #196]	; (8012ea8 <etharp_output+0x1fc>)
 8012de2:	781b      	ldrb	r3, [r3, #0]
 8012de4:	461a      	mov	r2, r3
 8012de6:	68b9      	ldr	r1, [r7, #8]
 8012de8:	68f8      	ldr	r0, [r7, #12]
 8012dea:	f7ff fec5 	bl	8012b78 <etharp_output_to_arp_index>
 8012dee:	4603      	mov	r3, r0
 8012df0:	e04a      	b.n	8012e88 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012df2:	2300      	movs	r3, #0
 8012df4:	75fb      	strb	r3, [r7, #23]
 8012df6:	e031      	b.n	8012e5c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012df8:	7dfa      	ldrb	r2, [r7, #23]
 8012dfa:	492c      	ldr	r1, [pc, #176]	; (8012eac <etharp_output+0x200>)
 8012dfc:	4613      	mov	r3, r2
 8012dfe:	005b      	lsls	r3, r3, #1
 8012e00:	4413      	add	r3, r2
 8012e02:	00db      	lsls	r3, r3, #3
 8012e04:	440b      	add	r3, r1
 8012e06:	3314      	adds	r3, #20
 8012e08:	781b      	ldrb	r3, [r3, #0]
 8012e0a:	2b01      	cmp	r3, #1
 8012e0c:	d923      	bls.n	8012e56 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8012e0e:	7dfa      	ldrb	r2, [r7, #23]
 8012e10:	4926      	ldr	r1, [pc, #152]	; (8012eac <etharp_output+0x200>)
 8012e12:	4613      	mov	r3, r2
 8012e14:	005b      	lsls	r3, r3, #1
 8012e16:	4413      	add	r3, r2
 8012e18:	00db      	lsls	r3, r3, #3
 8012e1a:	440b      	add	r3, r1
 8012e1c:	3308      	adds	r3, #8
 8012e1e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012e20:	68fa      	ldr	r2, [r7, #12]
 8012e22:	429a      	cmp	r2, r3
 8012e24:	d117      	bne.n	8012e56 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8012e26:	69bb      	ldr	r3, [r7, #24]
 8012e28:	6819      	ldr	r1, [r3, #0]
 8012e2a:	7dfa      	ldrb	r2, [r7, #23]
 8012e2c:	481f      	ldr	r0, [pc, #124]	; (8012eac <etharp_output+0x200>)
 8012e2e:	4613      	mov	r3, r2
 8012e30:	005b      	lsls	r3, r3, #1
 8012e32:	4413      	add	r3, r2
 8012e34:	00db      	lsls	r3, r3, #3
 8012e36:	4403      	add	r3, r0
 8012e38:	3304      	adds	r3, #4
 8012e3a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8012e3c:	4299      	cmp	r1, r3
 8012e3e:	d10a      	bne.n	8012e56 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8012e40:	4a19      	ldr	r2, [pc, #100]	; (8012ea8 <etharp_output+0x1fc>)
 8012e42:	7dfb      	ldrb	r3, [r7, #23]
 8012e44:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8012e46:	7dfb      	ldrb	r3, [r7, #23]
 8012e48:	461a      	mov	r2, r3
 8012e4a:	68b9      	ldr	r1, [r7, #8]
 8012e4c:	68f8      	ldr	r0, [r7, #12]
 8012e4e:	f7ff fe93 	bl	8012b78 <etharp_output_to_arp_index>
 8012e52:	4603      	mov	r3, r0
 8012e54:	e018      	b.n	8012e88 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012e56:	7dfb      	ldrb	r3, [r7, #23]
 8012e58:	3301      	adds	r3, #1
 8012e5a:	75fb      	strb	r3, [r7, #23]
 8012e5c:	7dfb      	ldrb	r3, [r7, #23]
 8012e5e:	2b09      	cmp	r3, #9
 8012e60:	d9ca      	bls.n	8012df8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8012e62:	68ba      	ldr	r2, [r7, #8]
 8012e64:	69b9      	ldr	r1, [r7, #24]
 8012e66:	68f8      	ldr	r0, [r7, #12]
 8012e68:	f000 f822 	bl	8012eb0 <etharp_query>
 8012e6c:	4603      	mov	r3, r0
 8012e6e:	e00b      	b.n	8012e88 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8012e76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012e7a:	9300      	str	r3, [sp, #0]
 8012e7c:	69fb      	ldr	r3, [r7, #28]
 8012e7e:	68b9      	ldr	r1, [r7, #8]
 8012e80:	68f8      	ldr	r0, [r7, #12]
 8012e82:	f001 fe69 	bl	8014b58 <ethernet_output>
 8012e86:	4603      	mov	r3, r0
}
 8012e88:	4618      	mov	r0, r3
 8012e8a:	3720      	adds	r7, #32
 8012e8c:	46bd      	mov	sp, r7
 8012e8e:	bd80      	pop	{r7, pc}
 8012e90:	08018de0 	.word	0x08018de0
 8012e94:	08018f30 	.word	0x08018f30
 8012e98:	08018e58 	.word	0x08018e58
 8012e9c:	08018f80 	.word	0x08018f80
 8012ea0:	08018f20 	.word	0x08018f20
 8012ea4:	08019650 	.word	0x08019650
 8012ea8:	200041d0 	.word	0x200041d0
 8012eac:	200040e0 	.word	0x200040e0

08012eb0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b08c      	sub	sp, #48	; 0x30
 8012eb4:	af02      	add	r7, sp, #8
 8012eb6:	60f8      	str	r0, [r7, #12]
 8012eb8:	60b9      	str	r1, [r7, #8]
 8012eba:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	3326      	adds	r3, #38	; 0x26
 8012ec0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8012ec2:	23ff      	movs	r3, #255	; 0xff
 8012ec4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8012ec8:	2300      	movs	r3, #0
 8012eca:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012ecc:	68bb      	ldr	r3, [r7, #8]
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	68f9      	ldr	r1, [r7, #12]
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	f000 fe0e 	bl	8013af4 <ip4_addr_isbroadcast_u32>
 8012ed8:	4603      	mov	r3, r0
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d10c      	bne.n	8012ef8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012ede:	68bb      	ldr	r3, [r7, #8]
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012ee6:	2be0      	cmp	r3, #224	; 0xe0
 8012ee8:	d006      	beq.n	8012ef8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012eea:	68bb      	ldr	r3, [r7, #8]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d003      	beq.n	8012ef8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8012ef0:	68bb      	ldr	r3, [r7, #8]
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d102      	bne.n	8012efe <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012ef8:	f06f 030f 	mvn.w	r3, #15
 8012efc:	e101      	b.n	8013102 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8012efe:	68fa      	ldr	r2, [r7, #12]
 8012f00:	2101      	movs	r1, #1
 8012f02:	68b8      	ldr	r0, [r7, #8]
 8012f04:	f7ff fb60 	bl	80125c8 <etharp_find_entry>
 8012f08:	4603      	mov	r3, r0
 8012f0a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8012f0c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	da02      	bge.n	8012f1a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8012f14:	8a7b      	ldrh	r3, [r7, #18]
 8012f16:	b25b      	sxtb	r3, r3
 8012f18:	e0f3      	b.n	8013102 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8012f1a:	8a7b      	ldrh	r3, [r7, #18]
 8012f1c:	2b7e      	cmp	r3, #126	; 0x7e
 8012f1e:	d906      	bls.n	8012f2e <etharp_query+0x7e>
 8012f20:	4b7a      	ldr	r3, [pc, #488]	; (801310c <etharp_query+0x25c>)
 8012f22:	f240 32c1 	movw	r2, #961	; 0x3c1
 8012f26:	497a      	ldr	r1, [pc, #488]	; (8013110 <etharp_query+0x260>)
 8012f28:	487a      	ldr	r0, [pc, #488]	; (8013114 <etharp_query+0x264>)
 8012f2a:	f001 ffbb 	bl	8014ea4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8012f2e:	8a7b      	ldrh	r3, [r7, #18]
 8012f30:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012f32:	7c7a      	ldrb	r2, [r7, #17]
 8012f34:	4978      	ldr	r1, [pc, #480]	; (8013118 <etharp_query+0x268>)
 8012f36:	4613      	mov	r3, r2
 8012f38:	005b      	lsls	r3, r3, #1
 8012f3a:	4413      	add	r3, r2
 8012f3c:	00db      	lsls	r3, r3, #3
 8012f3e:	440b      	add	r3, r1
 8012f40:	3314      	adds	r3, #20
 8012f42:	781b      	ldrb	r3, [r3, #0]
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d115      	bne.n	8012f74 <etharp_query+0xc4>
    is_new_entry = 1;
 8012f48:	2301      	movs	r3, #1
 8012f4a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012f4c:	7c7a      	ldrb	r2, [r7, #17]
 8012f4e:	4972      	ldr	r1, [pc, #456]	; (8013118 <etharp_query+0x268>)
 8012f50:	4613      	mov	r3, r2
 8012f52:	005b      	lsls	r3, r3, #1
 8012f54:	4413      	add	r3, r2
 8012f56:	00db      	lsls	r3, r3, #3
 8012f58:	440b      	add	r3, r1
 8012f5a:	3314      	adds	r3, #20
 8012f5c:	2201      	movs	r2, #1
 8012f5e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012f60:	7c7a      	ldrb	r2, [r7, #17]
 8012f62:	496d      	ldr	r1, [pc, #436]	; (8013118 <etharp_query+0x268>)
 8012f64:	4613      	mov	r3, r2
 8012f66:	005b      	lsls	r3, r3, #1
 8012f68:	4413      	add	r3, r2
 8012f6a:	00db      	lsls	r3, r3, #3
 8012f6c:	440b      	add	r3, r1
 8012f6e:	3308      	adds	r3, #8
 8012f70:	68fa      	ldr	r2, [r7, #12]
 8012f72:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012f74:	7c7a      	ldrb	r2, [r7, #17]
 8012f76:	4968      	ldr	r1, [pc, #416]	; (8013118 <etharp_query+0x268>)
 8012f78:	4613      	mov	r3, r2
 8012f7a:	005b      	lsls	r3, r3, #1
 8012f7c:	4413      	add	r3, r2
 8012f7e:	00db      	lsls	r3, r3, #3
 8012f80:	440b      	add	r3, r1
 8012f82:	3314      	adds	r3, #20
 8012f84:	781b      	ldrb	r3, [r3, #0]
 8012f86:	2b01      	cmp	r3, #1
 8012f88:	d011      	beq.n	8012fae <etharp_query+0xfe>
 8012f8a:	7c7a      	ldrb	r2, [r7, #17]
 8012f8c:	4962      	ldr	r1, [pc, #392]	; (8013118 <etharp_query+0x268>)
 8012f8e:	4613      	mov	r3, r2
 8012f90:	005b      	lsls	r3, r3, #1
 8012f92:	4413      	add	r3, r2
 8012f94:	00db      	lsls	r3, r3, #3
 8012f96:	440b      	add	r3, r1
 8012f98:	3314      	adds	r3, #20
 8012f9a:	781b      	ldrb	r3, [r3, #0]
 8012f9c:	2b01      	cmp	r3, #1
 8012f9e:	d806      	bhi.n	8012fae <etharp_query+0xfe>
 8012fa0:	4b5a      	ldr	r3, [pc, #360]	; (801310c <etharp_query+0x25c>)
 8012fa2:	f240 32cd 	movw	r2, #973	; 0x3cd
 8012fa6:	495d      	ldr	r1, [pc, #372]	; (801311c <etharp_query+0x26c>)
 8012fa8:	485a      	ldr	r0, [pc, #360]	; (8013114 <etharp_query+0x264>)
 8012faa:	f001 ff7b 	bl	8014ea4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012fae:	6a3b      	ldr	r3, [r7, #32]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d102      	bne.n	8012fba <etharp_query+0x10a>
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d10c      	bne.n	8012fd4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8012fba:	68b9      	ldr	r1, [r7, #8]
 8012fbc:	68f8      	ldr	r0, [r7, #12]
 8012fbe:	f000 f963 	bl	8013288 <etharp_request>
 8012fc2:	4603      	mov	r3, r0
 8012fc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d102      	bne.n	8012fd4 <etharp_query+0x124>
      return result;
 8012fce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012fd2:	e096      	b.n	8013102 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d106      	bne.n	8012fe8 <etharp_query+0x138>
 8012fda:	4b4c      	ldr	r3, [pc, #304]	; (801310c <etharp_query+0x25c>)
 8012fdc:	f240 32e1 	movw	r2, #993	; 0x3e1
 8012fe0:	494f      	ldr	r1, [pc, #316]	; (8013120 <etharp_query+0x270>)
 8012fe2:	484c      	ldr	r0, [pc, #304]	; (8013114 <etharp_query+0x264>)
 8012fe4:	f001 ff5e 	bl	8014ea4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012fe8:	7c7a      	ldrb	r2, [r7, #17]
 8012fea:	494b      	ldr	r1, [pc, #300]	; (8013118 <etharp_query+0x268>)
 8012fec:	4613      	mov	r3, r2
 8012fee:	005b      	lsls	r3, r3, #1
 8012ff0:	4413      	add	r3, r2
 8012ff2:	00db      	lsls	r3, r3, #3
 8012ff4:	440b      	add	r3, r1
 8012ff6:	3314      	adds	r3, #20
 8012ff8:	781b      	ldrb	r3, [r3, #0]
 8012ffa:	2b01      	cmp	r3, #1
 8012ffc:	d917      	bls.n	801302e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8012ffe:	4a49      	ldr	r2, [pc, #292]	; (8013124 <etharp_query+0x274>)
 8013000:	7c7b      	ldrb	r3, [r7, #17]
 8013002:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013004:	7c7a      	ldrb	r2, [r7, #17]
 8013006:	4613      	mov	r3, r2
 8013008:	005b      	lsls	r3, r3, #1
 801300a:	4413      	add	r3, r2
 801300c:	00db      	lsls	r3, r3, #3
 801300e:	3308      	adds	r3, #8
 8013010:	4a41      	ldr	r2, [pc, #260]	; (8013118 <etharp_query+0x268>)
 8013012:	4413      	add	r3, r2
 8013014:	3304      	adds	r3, #4
 8013016:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801301a:	9200      	str	r2, [sp, #0]
 801301c:	697a      	ldr	r2, [r7, #20]
 801301e:	6879      	ldr	r1, [r7, #4]
 8013020:	68f8      	ldr	r0, [r7, #12]
 8013022:	f001 fd99 	bl	8014b58 <ethernet_output>
 8013026:	4603      	mov	r3, r0
 8013028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801302c:	e067      	b.n	80130fe <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801302e:	7c7a      	ldrb	r2, [r7, #17]
 8013030:	4939      	ldr	r1, [pc, #228]	; (8013118 <etharp_query+0x268>)
 8013032:	4613      	mov	r3, r2
 8013034:	005b      	lsls	r3, r3, #1
 8013036:	4413      	add	r3, r2
 8013038:	00db      	lsls	r3, r3, #3
 801303a:	440b      	add	r3, r1
 801303c:	3314      	adds	r3, #20
 801303e:	781b      	ldrb	r3, [r3, #0]
 8013040:	2b01      	cmp	r3, #1
 8013042:	d15c      	bne.n	80130fe <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8013044:	2300      	movs	r3, #0
 8013046:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801304c:	e01c      	b.n	8013088 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801304e:	69fb      	ldr	r3, [r7, #28]
 8013050:	895a      	ldrh	r2, [r3, #10]
 8013052:	69fb      	ldr	r3, [r7, #28]
 8013054:	891b      	ldrh	r3, [r3, #8]
 8013056:	429a      	cmp	r2, r3
 8013058:	d10a      	bne.n	8013070 <etharp_query+0x1c0>
 801305a:	69fb      	ldr	r3, [r7, #28]
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	2b00      	cmp	r3, #0
 8013060:	d006      	beq.n	8013070 <etharp_query+0x1c0>
 8013062:	4b2a      	ldr	r3, [pc, #168]	; (801310c <etharp_query+0x25c>)
 8013064:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8013068:	492f      	ldr	r1, [pc, #188]	; (8013128 <etharp_query+0x278>)
 801306a:	482a      	ldr	r0, [pc, #168]	; (8013114 <etharp_query+0x264>)
 801306c:	f001 ff1a 	bl	8014ea4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8013070:	69fb      	ldr	r3, [r7, #28]
 8013072:	7b1b      	ldrb	r3, [r3, #12]
 8013074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013078:	2b00      	cmp	r3, #0
 801307a:	d002      	beq.n	8013082 <etharp_query+0x1d2>
        copy_needed = 1;
 801307c:	2301      	movs	r3, #1
 801307e:	61bb      	str	r3, [r7, #24]
        break;
 8013080:	e005      	b.n	801308e <etharp_query+0x1de>
      }
      p = p->next;
 8013082:	69fb      	ldr	r3, [r7, #28]
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013088:	69fb      	ldr	r3, [r7, #28]
 801308a:	2b00      	cmp	r3, #0
 801308c:	d1df      	bne.n	801304e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801308e:	69bb      	ldr	r3, [r7, #24]
 8013090:	2b00      	cmp	r3, #0
 8013092:	d007      	beq.n	80130a4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8013094:	687a      	ldr	r2, [r7, #4]
 8013096:	f44f 7120 	mov.w	r1, #640	; 0x280
 801309a:	200e      	movs	r0, #14
 801309c:	f7f8 fd84 	bl	800bba8 <pbuf_clone>
 80130a0:	61f8      	str	r0, [r7, #28]
 80130a2:	e004      	b.n	80130ae <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80130a8:	69f8      	ldr	r0, [r7, #28]
 80130aa:	f7f8 fb91 	bl	800b7d0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80130ae:	69fb      	ldr	r3, [r7, #28]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d021      	beq.n	80130f8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80130b4:	7c7a      	ldrb	r2, [r7, #17]
 80130b6:	4918      	ldr	r1, [pc, #96]	; (8013118 <etharp_query+0x268>)
 80130b8:	4613      	mov	r3, r2
 80130ba:	005b      	lsls	r3, r3, #1
 80130bc:	4413      	add	r3, r2
 80130be:	00db      	lsls	r3, r3, #3
 80130c0:	440b      	add	r3, r1
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d00a      	beq.n	80130de <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80130c8:	7c7a      	ldrb	r2, [r7, #17]
 80130ca:	4913      	ldr	r1, [pc, #76]	; (8013118 <etharp_query+0x268>)
 80130cc:	4613      	mov	r3, r2
 80130ce:	005b      	lsls	r3, r3, #1
 80130d0:	4413      	add	r3, r2
 80130d2:	00db      	lsls	r3, r3, #3
 80130d4:	440b      	add	r3, r1
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	4618      	mov	r0, r3
 80130da:	f7f8 fad3 	bl	800b684 <pbuf_free>
      }
      arp_table[i].q = p;
 80130de:	7c7a      	ldrb	r2, [r7, #17]
 80130e0:	490d      	ldr	r1, [pc, #52]	; (8013118 <etharp_query+0x268>)
 80130e2:	4613      	mov	r3, r2
 80130e4:	005b      	lsls	r3, r3, #1
 80130e6:	4413      	add	r3, r2
 80130e8:	00db      	lsls	r3, r3, #3
 80130ea:	440b      	add	r3, r1
 80130ec:	69fa      	ldr	r2, [r7, #28]
 80130ee:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80130f0:	2300      	movs	r3, #0
 80130f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80130f6:	e002      	b.n	80130fe <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80130f8:	23ff      	movs	r3, #255	; 0xff
 80130fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80130fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8013102:	4618      	mov	r0, r3
 8013104:	3728      	adds	r7, #40	; 0x28
 8013106:	46bd      	mov	sp, r7
 8013108:	bd80      	pop	{r7, pc}
 801310a:	bf00      	nop
 801310c:	08018de0 	.word	0x08018de0
 8013110:	08018f8c 	.word	0x08018f8c
 8013114:	08018e58 	.word	0x08018e58
 8013118:	200040e0 	.word	0x200040e0
 801311c:	08018f9c 	.word	0x08018f9c
 8013120:	08018f80 	.word	0x08018f80
 8013124:	200041d0 	.word	0x200041d0
 8013128:	08018fc4 	.word	0x08018fc4

0801312c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801312c:	b580      	push	{r7, lr}
 801312e:	b08a      	sub	sp, #40	; 0x28
 8013130:	af02      	add	r7, sp, #8
 8013132:	60f8      	str	r0, [r7, #12]
 8013134:	60b9      	str	r1, [r7, #8]
 8013136:	607a      	str	r2, [r7, #4]
 8013138:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801313a:	2300      	movs	r3, #0
 801313c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	2b00      	cmp	r3, #0
 8013142:	d106      	bne.n	8013152 <etharp_raw+0x26>
 8013144:	4b3a      	ldr	r3, [pc, #232]	; (8013230 <etharp_raw+0x104>)
 8013146:	f240 4257 	movw	r2, #1111	; 0x457
 801314a:	493a      	ldr	r1, [pc, #232]	; (8013234 <etharp_raw+0x108>)
 801314c:	483a      	ldr	r0, [pc, #232]	; (8013238 <etharp_raw+0x10c>)
 801314e:	f001 fea9 	bl	8014ea4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8013152:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013156:	211c      	movs	r1, #28
 8013158:	200e      	movs	r0, #14
 801315a:	f7f7 ffaf 	bl	800b0bc <pbuf_alloc>
 801315e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8013160:	69bb      	ldr	r3, [r7, #24]
 8013162:	2b00      	cmp	r3, #0
 8013164:	d102      	bne.n	801316c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8013166:	f04f 33ff 	mov.w	r3, #4294967295
 801316a:	e05d      	b.n	8013228 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801316c:	69bb      	ldr	r3, [r7, #24]
 801316e:	895b      	ldrh	r3, [r3, #10]
 8013170:	2b1b      	cmp	r3, #27
 8013172:	d806      	bhi.n	8013182 <etharp_raw+0x56>
 8013174:	4b2e      	ldr	r3, [pc, #184]	; (8013230 <etharp_raw+0x104>)
 8013176:	f240 4262 	movw	r2, #1122	; 0x462
 801317a:	4930      	ldr	r1, [pc, #192]	; (801323c <etharp_raw+0x110>)
 801317c:	482e      	ldr	r0, [pc, #184]	; (8013238 <etharp_raw+0x10c>)
 801317e:	f001 fe91 	bl	8014ea4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8013182:	69bb      	ldr	r3, [r7, #24]
 8013184:	685b      	ldr	r3, [r3, #4]
 8013186:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8013188:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801318a:	4618      	mov	r0, r3
 801318c:	f7f6 fea6 	bl	8009edc <lwip_htons>
 8013190:	4603      	mov	r3, r0
 8013192:	461a      	mov	r2, r3
 8013194:	697b      	ldr	r3, [r7, #20]
 8013196:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801319e:	2b06      	cmp	r3, #6
 80131a0:	d006      	beq.n	80131b0 <etharp_raw+0x84>
 80131a2:	4b23      	ldr	r3, [pc, #140]	; (8013230 <etharp_raw+0x104>)
 80131a4:	f240 4269 	movw	r2, #1129	; 0x469
 80131a8:	4925      	ldr	r1, [pc, #148]	; (8013240 <etharp_raw+0x114>)
 80131aa:	4823      	ldr	r0, [pc, #140]	; (8013238 <etharp_raw+0x10c>)
 80131ac:	f001 fe7a 	bl	8014ea4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80131b0:	697b      	ldr	r3, [r7, #20]
 80131b2:	3308      	adds	r3, #8
 80131b4:	2206      	movs	r2, #6
 80131b6:	6839      	ldr	r1, [r7, #0]
 80131b8:	4618      	mov	r0, r3
 80131ba:	f001 fe5d 	bl	8014e78 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80131be:	697b      	ldr	r3, [r7, #20]
 80131c0:	3312      	adds	r3, #18
 80131c2:	2206      	movs	r2, #6
 80131c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80131c6:	4618      	mov	r0, r3
 80131c8:	f001 fe56 	bl	8014e78 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80131cc:	697b      	ldr	r3, [r7, #20]
 80131ce:	330e      	adds	r3, #14
 80131d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80131d2:	6812      	ldr	r2, [r2, #0]
 80131d4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80131d6:	697b      	ldr	r3, [r7, #20]
 80131d8:	3318      	adds	r3, #24
 80131da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80131dc:	6812      	ldr	r2, [r2, #0]
 80131de:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80131e0:	697b      	ldr	r3, [r7, #20]
 80131e2:	2200      	movs	r2, #0
 80131e4:	701a      	strb	r2, [r3, #0]
 80131e6:	2200      	movs	r2, #0
 80131e8:	f042 0201 	orr.w	r2, r2, #1
 80131ec:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80131ee:	697b      	ldr	r3, [r7, #20]
 80131f0:	2200      	movs	r2, #0
 80131f2:	f042 0208 	orr.w	r2, r2, #8
 80131f6:	709a      	strb	r2, [r3, #2]
 80131f8:	2200      	movs	r2, #0
 80131fa:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80131fc:	697b      	ldr	r3, [r7, #20]
 80131fe:	2206      	movs	r2, #6
 8013200:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8013202:	697b      	ldr	r3, [r7, #20]
 8013204:	2204      	movs	r2, #4
 8013206:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8013208:	f640 0306 	movw	r3, #2054	; 0x806
 801320c:	9300      	str	r3, [sp, #0]
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	68ba      	ldr	r2, [r7, #8]
 8013212:	69b9      	ldr	r1, [r7, #24]
 8013214:	68f8      	ldr	r0, [r7, #12]
 8013216:	f001 fc9f 	bl	8014b58 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801321a:	69b8      	ldr	r0, [r7, #24]
 801321c:	f7f8 fa32 	bl	800b684 <pbuf_free>
  p = NULL;
 8013220:	2300      	movs	r3, #0
 8013222:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8013224:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013228:	4618      	mov	r0, r3
 801322a:	3720      	adds	r7, #32
 801322c:	46bd      	mov	sp, r7
 801322e:	bd80      	pop	{r7, pc}
 8013230:	08018de0 	.word	0x08018de0
 8013234:	08018f30 	.word	0x08018f30
 8013238:	08018e58 	.word	0x08018e58
 801323c:	08018fe0 	.word	0x08018fe0
 8013240:	08019014 	.word	0x08019014

08013244 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8013244:	b580      	push	{r7, lr}
 8013246:	b088      	sub	sp, #32
 8013248:	af04      	add	r7, sp, #16
 801324a:	60f8      	str	r0, [r7, #12]
 801324c:	60b9      	str	r1, [r7, #8]
 801324e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013260:	2201      	movs	r2, #1
 8013262:	9203      	str	r2, [sp, #12]
 8013264:	68ba      	ldr	r2, [r7, #8]
 8013266:	9202      	str	r2, [sp, #8]
 8013268:	4a06      	ldr	r2, [pc, #24]	; (8013284 <etharp_request_dst+0x40>)
 801326a:	9201      	str	r2, [sp, #4]
 801326c:	9300      	str	r3, [sp, #0]
 801326e:	4603      	mov	r3, r0
 8013270:	687a      	ldr	r2, [r7, #4]
 8013272:	68f8      	ldr	r0, [r7, #12]
 8013274:	f7ff ff5a 	bl	801312c <etharp_raw>
 8013278:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801327a:	4618      	mov	r0, r3
 801327c:	3710      	adds	r7, #16
 801327e:	46bd      	mov	sp, r7
 8013280:	bd80      	pop	{r7, pc}
 8013282:	bf00      	nop
 8013284:	08019658 	.word	0x08019658

08013288 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8013288:	b580      	push	{r7, lr}
 801328a:	b082      	sub	sp, #8
 801328c:	af00      	add	r7, sp, #0
 801328e:	6078      	str	r0, [r7, #4]
 8013290:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8013292:	4a05      	ldr	r2, [pc, #20]	; (80132a8 <etharp_request+0x20>)
 8013294:	6839      	ldr	r1, [r7, #0]
 8013296:	6878      	ldr	r0, [r7, #4]
 8013298:	f7ff ffd4 	bl	8013244 <etharp_request_dst>
 801329c:	4603      	mov	r3, r0
}
 801329e:	4618      	mov	r0, r3
 80132a0:	3708      	adds	r7, #8
 80132a2:	46bd      	mov	sp, r7
 80132a4:	bd80      	pop	{r7, pc}
 80132a6:	bf00      	nop
 80132a8:	08019650 	.word	0x08019650

080132ac <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80132ac:	b580      	push	{r7, lr}
 80132ae:	b08e      	sub	sp, #56	; 0x38
 80132b0:	af04      	add	r7, sp, #16
 80132b2:	6078      	str	r0, [r7, #4]
 80132b4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80132b6:	4b79      	ldr	r3, [pc, #484]	; (801349c <icmp_input+0x1f0>)
 80132b8:	689b      	ldr	r3, [r3, #8]
 80132ba:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80132bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132be:	781b      	ldrb	r3, [r3, #0]
 80132c0:	f003 030f 	and.w	r3, r3, #15
 80132c4:	b2db      	uxtb	r3, r3
 80132c6:	009b      	lsls	r3, r3, #2
 80132c8:	b2db      	uxtb	r3, r3
 80132ca:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80132cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80132ce:	2b13      	cmp	r3, #19
 80132d0:	f240 80cd 	bls.w	801346e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	895b      	ldrh	r3, [r3, #10]
 80132d8:	2b03      	cmp	r3, #3
 80132da:	f240 80ca 	bls.w	8013472 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	685b      	ldr	r3, [r3, #4]
 80132e2:	781b      	ldrb	r3, [r3, #0]
 80132e4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80132e8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	f000 80b7 	beq.w	8013460 <icmp_input+0x1b4>
 80132f2:	2b08      	cmp	r3, #8
 80132f4:	f040 80b7 	bne.w	8013466 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80132f8:	4b69      	ldr	r3, [pc, #420]	; (80134a0 <icmp_input+0x1f4>)
 80132fa:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80132fc:	4b67      	ldr	r3, [pc, #412]	; (801349c <icmp_input+0x1f0>)
 80132fe:	695b      	ldr	r3, [r3, #20]
 8013300:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013304:	2be0      	cmp	r3, #224	; 0xe0
 8013306:	f000 80bb 	beq.w	8013480 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801330a:	4b64      	ldr	r3, [pc, #400]	; (801349c <icmp_input+0x1f0>)
 801330c:	695b      	ldr	r3, [r3, #20]
 801330e:	4a63      	ldr	r2, [pc, #396]	; (801349c <icmp_input+0x1f0>)
 8013310:	6812      	ldr	r2, [r2, #0]
 8013312:	4611      	mov	r1, r2
 8013314:	4618      	mov	r0, r3
 8013316:	f000 fbed 	bl	8013af4 <ip4_addr_isbroadcast_u32>
 801331a:	4603      	mov	r3, r0
 801331c:	2b00      	cmp	r3, #0
 801331e:	f040 80b1 	bne.w	8013484 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	891b      	ldrh	r3, [r3, #8]
 8013326:	2b07      	cmp	r3, #7
 8013328:	f240 80a5 	bls.w	8013476 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801332c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801332e:	330e      	adds	r3, #14
 8013330:	4619      	mov	r1, r3
 8013332:	6878      	ldr	r0, [r7, #4]
 8013334:	f7f8 f910 	bl	800b558 <pbuf_add_header>
 8013338:	4603      	mov	r3, r0
 801333a:	2b00      	cmp	r3, #0
 801333c:	d04b      	beq.n	80133d6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	891a      	ldrh	r2, [r3, #8]
 8013342:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013344:	4413      	add	r3, r2
 8013346:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	891b      	ldrh	r3, [r3, #8]
 801334c:	8b7a      	ldrh	r2, [r7, #26]
 801334e:	429a      	cmp	r2, r3
 8013350:	f0c0 809a 	bcc.w	8013488 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8013354:	8b7b      	ldrh	r3, [r7, #26]
 8013356:	f44f 7220 	mov.w	r2, #640	; 0x280
 801335a:	4619      	mov	r1, r3
 801335c:	200e      	movs	r0, #14
 801335e:	f7f7 fead 	bl	800b0bc <pbuf_alloc>
 8013362:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8013364:	697b      	ldr	r3, [r7, #20]
 8013366:	2b00      	cmp	r3, #0
 8013368:	f000 8090 	beq.w	801348c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801336c:	697b      	ldr	r3, [r7, #20]
 801336e:	895b      	ldrh	r3, [r3, #10]
 8013370:	461a      	mov	r2, r3
 8013372:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013374:	3308      	adds	r3, #8
 8013376:	429a      	cmp	r2, r3
 8013378:	d203      	bcs.n	8013382 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801337a:	6978      	ldr	r0, [r7, #20]
 801337c:	f7f8 f982 	bl	800b684 <pbuf_free>
          goto icmperr;
 8013380:	e085      	b.n	801348e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8013382:	697b      	ldr	r3, [r7, #20]
 8013384:	685b      	ldr	r3, [r3, #4]
 8013386:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013388:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801338a:	4618      	mov	r0, r3
 801338c:	f001 fd74 	bl	8014e78 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8013390:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013392:	4619      	mov	r1, r3
 8013394:	6978      	ldr	r0, [r7, #20]
 8013396:	f7f8 f8ef 	bl	800b578 <pbuf_remove_header>
 801339a:	4603      	mov	r3, r0
 801339c:	2b00      	cmp	r3, #0
 801339e:	d009      	beq.n	80133b4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80133a0:	4b40      	ldr	r3, [pc, #256]	; (80134a4 <icmp_input+0x1f8>)
 80133a2:	22b6      	movs	r2, #182	; 0xb6
 80133a4:	4940      	ldr	r1, [pc, #256]	; (80134a8 <icmp_input+0x1fc>)
 80133a6:	4841      	ldr	r0, [pc, #260]	; (80134ac <icmp_input+0x200>)
 80133a8:	f001 fd7c 	bl	8014ea4 <iprintf>
          pbuf_free(r);
 80133ac:	6978      	ldr	r0, [r7, #20]
 80133ae:	f7f8 f969 	bl	800b684 <pbuf_free>
          goto icmperr;
 80133b2:	e06c      	b.n	801348e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80133b4:	6879      	ldr	r1, [r7, #4]
 80133b6:	6978      	ldr	r0, [r7, #20]
 80133b8:	f7f8 fa88 	bl	800b8cc <pbuf_copy>
 80133bc:	4603      	mov	r3, r0
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d003      	beq.n	80133ca <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80133c2:	6978      	ldr	r0, [r7, #20]
 80133c4:	f7f8 f95e 	bl	800b684 <pbuf_free>
          goto icmperr;
 80133c8:	e061      	b.n	801348e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80133ca:	6878      	ldr	r0, [r7, #4]
 80133cc:	f7f8 f95a 	bl	800b684 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80133d0:	697b      	ldr	r3, [r7, #20]
 80133d2:	607b      	str	r3, [r7, #4]
 80133d4:	e00f      	b.n	80133f6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80133d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80133d8:	330e      	adds	r3, #14
 80133da:	4619      	mov	r1, r3
 80133dc:	6878      	ldr	r0, [r7, #4]
 80133de:	f7f8 f8cb 	bl	800b578 <pbuf_remove_header>
 80133e2:	4603      	mov	r3, r0
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d006      	beq.n	80133f6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80133e8:	4b2e      	ldr	r3, [pc, #184]	; (80134a4 <icmp_input+0x1f8>)
 80133ea:	22c7      	movs	r2, #199	; 0xc7
 80133ec:	4930      	ldr	r1, [pc, #192]	; (80134b0 <icmp_input+0x204>)
 80133ee:	482f      	ldr	r0, [pc, #188]	; (80134ac <icmp_input+0x200>)
 80133f0:	f001 fd58 	bl	8014ea4 <iprintf>
          goto icmperr;
 80133f4:	e04b      	b.n	801348e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	685b      	ldr	r3, [r3, #4]
 80133fa:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80133fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80133fe:	4619      	mov	r1, r3
 8013400:	6878      	ldr	r0, [r7, #4]
 8013402:	f7f8 f8a9 	bl	800b558 <pbuf_add_header>
 8013406:	4603      	mov	r3, r0
 8013408:	2b00      	cmp	r3, #0
 801340a:	d12b      	bne.n	8013464 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	685b      	ldr	r3, [r3, #4]
 8013410:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8013412:	69fb      	ldr	r3, [r7, #28]
 8013414:	681a      	ldr	r2, [r3, #0]
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801341a:	4b20      	ldr	r3, [pc, #128]	; (801349c <icmp_input+0x1f0>)
 801341c:	691a      	ldr	r2, [r3, #16]
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8013422:	693b      	ldr	r3, [r7, #16]
 8013424:	2200      	movs	r2, #0
 8013426:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8013428:	693b      	ldr	r3, [r7, #16]
 801342a:	2200      	movs	r2, #0
 801342c:	709a      	strb	r2, [r3, #2]
 801342e:	2200      	movs	r2, #0
 8013430:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	22ff      	movs	r2, #255	; 0xff
 8013436:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	2200      	movs	r2, #0
 801343c:	729a      	strb	r2, [r3, #10]
 801343e:	2200      	movs	r2, #0
 8013440:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8013442:	683b      	ldr	r3, [r7, #0]
 8013444:	9302      	str	r3, [sp, #8]
 8013446:	2301      	movs	r3, #1
 8013448:	9301      	str	r3, [sp, #4]
 801344a:	2300      	movs	r3, #0
 801344c:	9300      	str	r3, [sp, #0]
 801344e:	23ff      	movs	r3, #255	; 0xff
 8013450:	2200      	movs	r2, #0
 8013452:	69f9      	ldr	r1, [r7, #28]
 8013454:	6878      	ldr	r0, [r7, #4]
 8013456:	f000 fa75 	bl	8013944 <ip4_output_if>
 801345a:	4603      	mov	r3, r0
 801345c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801345e:	e001      	b.n	8013464 <icmp_input+0x1b8>
      break;
 8013460:	bf00      	nop
 8013462:	e000      	b.n	8013466 <icmp_input+0x1ba>
      break;
 8013464:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8013466:	6878      	ldr	r0, [r7, #4]
 8013468:	f7f8 f90c 	bl	800b684 <pbuf_free>
  return;
 801346c:	e013      	b.n	8013496 <icmp_input+0x1ea>
    goto lenerr;
 801346e:	bf00      	nop
 8013470:	e002      	b.n	8013478 <icmp_input+0x1cc>
    goto lenerr;
 8013472:	bf00      	nop
 8013474:	e000      	b.n	8013478 <icmp_input+0x1cc>
        goto lenerr;
 8013476:	bf00      	nop
lenerr:
  pbuf_free(p);
 8013478:	6878      	ldr	r0, [r7, #4]
 801347a:	f7f8 f903 	bl	800b684 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801347e:	e00a      	b.n	8013496 <icmp_input+0x1ea>
        goto icmperr;
 8013480:	bf00      	nop
 8013482:	e004      	b.n	801348e <icmp_input+0x1e2>
        goto icmperr;
 8013484:	bf00      	nop
 8013486:	e002      	b.n	801348e <icmp_input+0x1e2>
          goto icmperr;
 8013488:	bf00      	nop
 801348a:	e000      	b.n	801348e <icmp_input+0x1e2>
          goto icmperr;
 801348c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801348e:	6878      	ldr	r0, [r7, #4]
 8013490:	f7f8 f8f8 	bl	800b684 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013494:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8013496:	3728      	adds	r7, #40	; 0x28
 8013498:	46bd      	mov	sp, r7
 801349a:	bd80      	pop	{r7, pc}
 801349c:	20007404 	.word	0x20007404
 80134a0:	20007418 	.word	0x20007418
 80134a4:	08019058 	.word	0x08019058
 80134a8:	08019090 	.word	0x08019090
 80134ac:	080190c8 	.word	0x080190c8
 80134b0:	080190f0 	.word	0x080190f0

080134b4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80134b4:	b580      	push	{r7, lr}
 80134b6:	b082      	sub	sp, #8
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	6078      	str	r0, [r7, #4]
 80134bc:	460b      	mov	r3, r1
 80134be:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80134c0:	78fb      	ldrb	r3, [r7, #3]
 80134c2:	461a      	mov	r2, r3
 80134c4:	2103      	movs	r1, #3
 80134c6:	6878      	ldr	r0, [r7, #4]
 80134c8:	f000 f814 	bl	80134f4 <icmp_send_response>
}
 80134cc:	bf00      	nop
 80134ce:	3708      	adds	r7, #8
 80134d0:	46bd      	mov	sp, r7
 80134d2:	bd80      	pop	{r7, pc}

080134d4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80134d4:	b580      	push	{r7, lr}
 80134d6:	b082      	sub	sp, #8
 80134d8:	af00      	add	r7, sp, #0
 80134da:	6078      	str	r0, [r7, #4]
 80134dc:	460b      	mov	r3, r1
 80134de:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80134e0:	78fb      	ldrb	r3, [r7, #3]
 80134e2:	461a      	mov	r2, r3
 80134e4:	210b      	movs	r1, #11
 80134e6:	6878      	ldr	r0, [r7, #4]
 80134e8:	f000 f804 	bl	80134f4 <icmp_send_response>
}
 80134ec:	bf00      	nop
 80134ee:	3708      	adds	r7, #8
 80134f0:	46bd      	mov	sp, r7
 80134f2:	bd80      	pop	{r7, pc}

080134f4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80134f4:	b580      	push	{r7, lr}
 80134f6:	b08c      	sub	sp, #48	; 0x30
 80134f8:	af04      	add	r7, sp, #16
 80134fa:	6078      	str	r0, [r7, #4]
 80134fc:	460b      	mov	r3, r1
 80134fe:	70fb      	strb	r3, [r7, #3]
 8013500:	4613      	mov	r3, r2
 8013502:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013504:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013508:	2124      	movs	r1, #36	; 0x24
 801350a:	2022      	movs	r0, #34	; 0x22
 801350c:	f7f7 fdd6 	bl	800b0bc <pbuf_alloc>
 8013510:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8013512:	69fb      	ldr	r3, [r7, #28]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d04c      	beq.n	80135b2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8013518:	69fb      	ldr	r3, [r7, #28]
 801351a:	895b      	ldrh	r3, [r3, #10]
 801351c:	2b23      	cmp	r3, #35	; 0x23
 801351e:	d806      	bhi.n	801352e <icmp_send_response+0x3a>
 8013520:	4b26      	ldr	r3, [pc, #152]	; (80135bc <icmp_send_response+0xc8>)
 8013522:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8013526:	4926      	ldr	r1, [pc, #152]	; (80135c0 <icmp_send_response+0xcc>)
 8013528:	4826      	ldr	r0, [pc, #152]	; (80135c4 <icmp_send_response+0xd0>)
 801352a:	f001 fcbb 	bl	8014ea4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	685b      	ldr	r3, [r3, #4]
 8013532:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8013534:	69fb      	ldr	r3, [r7, #28]
 8013536:	685b      	ldr	r3, [r3, #4]
 8013538:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801353a:	697b      	ldr	r3, [r7, #20]
 801353c:	78fa      	ldrb	r2, [r7, #3]
 801353e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8013540:	697b      	ldr	r3, [r7, #20]
 8013542:	78ba      	ldrb	r2, [r7, #2]
 8013544:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8013546:	697b      	ldr	r3, [r7, #20]
 8013548:	2200      	movs	r2, #0
 801354a:	711a      	strb	r2, [r3, #4]
 801354c:	2200      	movs	r2, #0
 801354e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8013550:	697b      	ldr	r3, [r7, #20]
 8013552:	2200      	movs	r2, #0
 8013554:	719a      	strb	r2, [r3, #6]
 8013556:	2200      	movs	r2, #0
 8013558:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801355a:	69fb      	ldr	r3, [r7, #28]
 801355c:	685b      	ldr	r3, [r3, #4]
 801355e:	f103 0008 	add.w	r0, r3, #8
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	685b      	ldr	r3, [r3, #4]
 8013566:	221c      	movs	r2, #28
 8013568:	4619      	mov	r1, r3
 801356a:	f001 fc85 	bl	8014e78 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801356e:	69bb      	ldr	r3, [r7, #24]
 8013570:	68db      	ldr	r3, [r3, #12]
 8013572:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8013574:	f107 030c 	add.w	r3, r7, #12
 8013578:	4618      	mov	r0, r3
 801357a:	f000 f825 	bl	80135c8 <ip4_route>
 801357e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8013580:	693b      	ldr	r3, [r7, #16]
 8013582:	2b00      	cmp	r3, #0
 8013584:	d011      	beq.n	80135aa <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8013586:	697b      	ldr	r3, [r7, #20]
 8013588:	2200      	movs	r2, #0
 801358a:	709a      	strb	r2, [r3, #2]
 801358c:	2200      	movs	r2, #0
 801358e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8013590:	f107 020c 	add.w	r2, r7, #12
 8013594:	693b      	ldr	r3, [r7, #16]
 8013596:	9302      	str	r3, [sp, #8]
 8013598:	2301      	movs	r3, #1
 801359a:	9301      	str	r3, [sp, #4]
 801359c:	2300      	movs	r3, #0
 801359e:	9300      	str	r3, [sp, #0]
 80135a0:	23ff      	movs	r3, #255	; 0xff
 80135a2:	2100      	movs	r1, #0
 80135a4:	69f8      	ldr	r0, [r7, #28]
 80135a6:	f000 f9cd 	bl	8013944 <ip4_output_if>
  }
  pbuf_free(q);
 80135aa:	69f8      	ldr	r0, [r7, #28]
 80135ac:	f7f8 f86a 	bl	800b684 <pbuf_free>
 80135b0:	e000      	b.n	80135b4 <icmp_send_response+0xc0>
    return;
 80135b2:	bf00      	nop
}
 80135b4:	3720      	adds	r7, #32
 80135b6:	46bd      	mov	sp, r7
 80135b8:	bd80      	pop	{r7, pc}
 80135ba:	bf00      	nop
 80135bc:	08019058 	.word	0x08019058
 80135c0:	08019124 	.word	0x08019124
 80135c4:	080190c8 	.word	0x080190c8

080135c8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80135c8:	b480      	push	{r7}
 80135ca:	b085      	sub	sp, #20
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80135d0:	4b33      	ldr	r3, [pc, #204]	; (80136a0 <ip4_route+0xd8>)
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	60fb      	str	r3, [r7, #12]
 80135d6:	e036      	b.n	8013646 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80135de:	f003 0301 	and.w	r3, r3, #1
 80135e2:	b2db      	uxtb	r3, r3
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d02b      	beq.n	8013640 <ip4_route+0x78>
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80135ee:	089b      	lsrs	r3, r3, #2
 80135f0:	f003 0301 	and.w	r3, r3, #1
 80135f4:	b2db      	uxtb	r3, r3
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d022      	beq.n	8013640 <ip4_route+0x78>
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	3304      	adds	r3, #4
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	2b00      	cmp	r3, #0
 8013602:	d01d      	beq.n	8013640 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	681a      	ldr	r2, [r3, #0]
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	3304      	adds	r3, #4
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	405a      	eors	r2, r3
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	3308      	adds	r3, #8
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	4013      	ands	r3, r2
 8013618:	2b00      	cmp	r3, #0
 801361a:	d101      	bne.n	8013620 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	e038      	b.n	8013692 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013626:	f003 0302 	and.w	r3, r3, #2
 801362a:	2b00      	cmp	r3, #0
 801362c:	d108      	bne.n	8013640 <ip4_route+0x78>
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	681a      	ldr	r2, [r3, #0]
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	330c      	adds	r3, #12
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	429a      	cmp	r2, r3
 801363a:	d101      	bne.n	8013640 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	e028      	b.n	8013692 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	60fb      	str	r3, [r7, #12]
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d1c5      	bne.n	80135d8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801364c:	4b15      	ldr	r3, [pc, #84]	; (80136a4 <ip4_route+0xdc>)
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	2b00      	cmp	r3, #0
 8013652:	d01a      	beq.n	801368a <ip4_route+0xc2>
 8013654:	4b13      	ldr	r3, [pc, #76]	; (80136a4 <ip4_route+0xdc>)
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801365c:	f003 0301 	and.w	r3, r3, #1
 8013660:	2b00      	cmp	r3, #0
 8013662:	d012      	beq.n	801368a <ip4_route+0xc2>
 8013664:	4b0f      	ldr	r3, [pc, #60]	; (80136a4 <ip4_route+0xdc>)
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801366c:	f003 0304 	and.w	r3, r3, #4
 8013670:	2b00      	cmp	r3, #0
 8013672:	d00a      	beq.n	801368a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013674:	4b0b      	ldr	r3, [pc, #44]	; (80136a4 <ip4_route+0xdc>)
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	3304      	adds	r3, #4
 801367a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801367c:	2b00      	cmp	r3, #0
 801367e:	d004      	beq.n	801368a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	681b      	ldr	r3, [r3, #0]
 8013684:	b2db      	uxtb	r3, r3
 8013686:	2b7f      	cmp	r3, #127	; 0x7f
 8013688:	d101      	bne.n	801368e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801368a:	2300      	movs	r3, #0
 801368c:	e001      	b.n	8013692 <ip4_route+0xca>
  }

  return netif_default;
 801368e:	4b05      	ldr	r3, [pc, #20]	; (80136a4 <ip4_route+0xdc>)
 8013690:	681b      	ldr	r3, [r3, #0]
}
 8013692:	4618      	mov	r0, r3
 8013694:	3714      	adds	r7, #20
 8013696:	46bd      	mov	sp, r7
 8013698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801369c:	4770      	bx	lr
 801369e:	bf00      	nop
 80136a0:	2000ab08 	.word	0x2000ab08
 80136a4:	2000ab0c 	.word	0x2000ab0c

080136a8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80136a8:	b580      	push	{r7, lr}
 80136aa:	b082      	sub	sp, #8
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80136b6:	f003 0301 	and.w	r3, r3, #1
 80136ba:	b2db      	uxtb	r3, r3
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d016      	beq.n	80136ee <ip4_input_accept+0x46>
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	3304      	adds	r3, #4
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d011      	beq.n	80136ee <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80136ca:	4b0b      	ldr	r3, [pc, #44]	; (80136f8 <ip4_input_accept+0x50>)
 80136cc:	695a      	ldr	r2, [r3, #20]
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	3304      	adds	r3, #4
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	429a      	cmp	r2, r3
 80136d6:	d008      	beq.n	80136ea <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80136d8:	4b07      	ldr	r3, [pc, #28]	; (80136f8 <ip4_input_accept+0x50>)
 80136da:	695b      	ldr	r3, [r3, #20]
 80136dc:	6879      	ldr	r1, [r7, #4]
 80136de:	4618      	mov	r0, r3
 80136e0:	f000 fa08 	bl	8013af4 <ip4_addr_isbroadcast_u32>
 80136e4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d001      	beq.n	80136ee <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80136ea:	2301      	movs	r3, #1
 80136ec:	e000      	b.n	80136f0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80136ee:	2300      	movs	r3, #0
}
 80136f0:	4618      	mov	r0, r3
 80136f2:	3708      	adds	r7, #8
 80136f4:	46bd      	mov	sp, r7
 80136f6:	bd80      	pop	{r7, pc}
 80136f8:	20007404 	.word	0x20007404

080136fc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80136fc:	b580      	push	{r7, lr}
 80136fe:	b086      	sub	sp, #24
 8013700:	af00      	add	r7, sp, #0
 8013702:	6078      	str	r0, [r7, #4]
 8013704:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	685b      	ldr	r3, [r3, #4]
 801370a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801370c:	697b      	ldr	r3, [r7, #20]
 801370e:	781b      	ldrb	r3, [r3, #0]
 8013710:	091b      	lsrs	r3, r3, #4
 8013712:	b2db      	uxtb	r3, r3
 8013714:	2b04      	cmp	r3, #4
 8013716:	d004      	beq.n	8013722 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8013718:	6878      	ldr	r0, [r7, #4]
 801371a:	f7f7 ffb3 	bl	800b684 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801371e:	2300      	movs	r3, #0
 8013720:	e107      	b.n	8013932 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8013722:	697b      	ldr	r3, [r7, #20]
 8013724:	781b      	ldrb	r3, [r3, #0]
 8013726:	f003 030f 	and.w	r3, r3, #15
 801372a:	b2db      	uxtb	r3, r3
 801372c:	009b      	lsls	r3, r3, #2
 801372e:	b2db      	uxtb	r3, r3
 8013730:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013732:	697b      	ldr	r3, [r7, #20]
 8013734:	885b      	ldrh	r3, [r3, #2]
 8013736:	b29b      	uxth	r3, r3
 8013738:	4618      	mov	r0, r3
 801373a:	f7f6 fbcf 	bl	8009edc <lwip_htons>
 801373e:	4603      	mov	r3, r0
 8013740:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	891b      	ldrh	r3, [r3, #8]
 8013746:	89ba      	ldrh	r2, [r7, #12]
 8013748:	429a      	cmp	r2, r3
 801374a:	d204      	bcs.n	8013756 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801374c:	89bb      	ldrh	r3, [r7, #12]
 801374e:	4619      	mov	r1, r3
 8013750:	6878      	ldr	r0, [r7, #4]
 8013752:	f7f7 fe11 	bl	800b378 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	895b      	ldrh	r3, [r3, #10]
 801375a:	89fa      	ldrh	r2, [r7, #14]
 801375c:	429a      	cmp	r2, r3
 801375e:	d807      	bhi.n	8013770 <ip4_input+0x74>
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	891b      	ldrh	r3, [r3, #8]
 8013764:	89ba      	ldrh	r2, [r7, #12]
 8013766:	429a      	cmp	r2, r3
 8013768:	d802      	bhi.n	8013770 <ip4_input+0x74>
 801376a:	89fb      	ldrh	r3, [r7, #14]
 801376c:	2b13      	cmp	r3, #19
 801376e:	d804      	bhi.n	801377a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8013770:	6878      	ldr	r0, [r7, #4]
 8013772:	f7f7 ff87 	bl	800b684 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8013776:	2300      	movs	r3, #0
 8013778:	e0db      	b.n	8013932 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801377a:	697b      	ldr	r3, [r7, #20]
 801377c:	691b      	ldr	r3, [r3, #16]
 801377e:	4a6f      	ldr	r2, [pc, #444]	; (801393c <ip4_input+0x240>)
 8013780:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8013782:	697b      	ldr	r3, [r7, #20]
 8013784:	68db      	ldr	r3, [r3, #12]
 8013786:	4a6d      	ldr	r2, [pc, #436]	; (801393c <ip4_input+0x240>)
 8013788:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801378a:	4b6c      	ldr	r3, [pc, #432]	; (801393c <ip4_input+0x240>)
 801378c:	695b      	ldr	r3, [r3, #20]
 801378e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013792:	2be0      	cmp	r3, #224	; 0xe0
 8013794:	d112      	bne.n	80137bc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8013796:	683b      	ldr	r3, [r7, #0]
 8013798:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801379c:	f003 0301 	and.w	r3, r3, #1
 80137a0:	b2db      	uxtb	r3, r3
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d007      	beq.n	80137b6 <ip4_input+0xba>
 80137a6:	683b      	ldr	r3, [r7, #0]
 80137a8:	3304      	adds	r3, #4
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d002      	beq.n	80137b6 <ip4_input+0xba>
      netif = inp;
 80137b0:	683b      	ldr	r3, [r7, #0]
 80137b2:	613b      	str	r3, [r7, #16]
 80137b4:	e02a      	b.n	801380c <ip4_input+0x110>
    } else {
      netif = NULL;
 80137b6:	2300      	movs	r3, #0
 80137b8:	613b      	str	r3, [r7, #16]
 80137ba:	e027      	b.n	801380c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80137bc:	6838      	ldr	r0, [r7, #0]
 80137be:	f7ff ff73 	bl	80136a8 <ip4_input_accept>
 80137c2:	4603      	mov	r3, r0
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d002      	beq.n	80137ce <ip4_input+0xd2>
      netif = inp;
 80137c8:	683b      	ldr	r3, [r7, #0]
 80137ca:	613b      	str	r3, [r7, #16]
 80137cc:	e01e      	b.n	801380c <ip4_input+0x110>
    } else {
      netif = NULL;
 80137ce:	2300      	movs	r3, #0
 80137d0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80137d2:	4b5a      	ldr	r3, [pc, #360]	; (801393c <ip4_input+0x240>)
 80137d4:	695b      	ldr	r3, [r3, #20]
 80137d6:	b2db      	uxtb	r3, r3
 80137d8:	2b7f      	cmp	r3, #127	; 0x7f
 80137da:	d017      	beq.n	801380c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80137dc:	4b58      	ldr	r3, [pc, #352]	; (8013940 <ip4_input+0x244>)
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	613b      	str	r3, [r7, #16]
 80137e2:	e00e      	b.n	8013802 <ip4_input+0x106>
          if (netif == inp) {
 80137e4:	693a      	ldr	r2, [r7, #16]
 80137e6:	683b      	ldr	r3, [r7, #0]
 80137e8:	429a      	cmp	r2, r3
 80137ea:	d006      	beq.n	80137fa <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80137ec:	6938      	ldr	r0, [r7, #16]
 80137ee:	f7ff ff5b 	bl	80136a8 <ip4_input_accept>
 80137f2:	4603      	mov	r3, r0
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d108      	bne.n	801380a <ip4_input+0x10e>
 80137f8:	e000      	b.n	80137fc <ip4_input+0x100>
            continue;
 80137fa:	bf00      	nop
        NETIF_FOREACH(netif) {
 80137fc:	693b      	ldr	r3, [r7, #16]
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	613b      	str	r3, [r7, #16]
 8013802:	693b      	ldr	r3, [r7, #16]
 8013804:	2b00      	cmp	r3, #0
 8013806:	d1ed      	bne.n	80137e4 <ip4_input+0xe8>
 8013808:	e000      	b.n	801380c <ip4_input+0x110>
            break;
 801380a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801380c:	4b4b      	ldr	r3, [pc, #300]	; (801393c <ip4_input+0x240>)
 801380e:	691b      	ldr	r3, [r3, #16]
 8013810:	6839      	ldr	r1, [r7, #0]
 8013812:	4618      	mov	r0, r3
 8013814:	f000 f96e 	bl	8013af4 <ip4_addr_isbroadcast_u32>
 8013818:	4603      	mov	r3, r0
 801381a:	2b00      	cmp	r3, #0
 801381c:	d105      	bne.n	801382a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801381e:	4b47      	ldr	r3, [pc, #284]	; (801393c <ip4_input+0x240>)
 8013820:	691b      	ldr	r3, [r3, #16]
 8013822:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013826:	2be0      	cmp	r3, #224	; 0xe0
 8013828:	d104      	bne.n	8013834 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801382a:	6878      	ldr	r0, [r7, #4]
 801382c:	f7f7 ff2a 	bl	800b684 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013830:	2300      	movs	r3, #0
 8013832:	e07e      	b.n	8013932 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013834:	693b      	ldr	r3, [r7, #16]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d104      	bne.n	8013844 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801383a:	6878      	ldr	r0, [r7, #4]
 801383c:	f7f7 ff22 	bl	800b684 <pbuf_free>
    return ERR_OK;
 8013840:	2300      	movs	r3, #0
 8013842:	e076      	b.n	8013932 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013844:	697b      	ldr	r3, [r7, #20]
 8013846:	88db      	ldrh	r3, [r3, #6]
 8013848:	b29b      	uxth	r3, r3
 801384a:	461a      	mov	r2, r3
 801384c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8013850:	4013      	ands	r3, r2
 8013852:	2b00      	cmp	r3, #0
 8013854:	d00b      	beq.n	801386e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8013856:	6878      	ldr	r0, [r7, #4]
 8013858:	f000 fdbc 	bl	80143d4 <ip4_reass>
 801385c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d101      	bne.n	8013868 <ip4_input+0x16c>
      return ERR_OK;
 8013864:	2300      	movs	r3, #0
 8013866:	e064      	b.n	8013932 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	685b      	ldr	r3, [r3, #4]
 801386c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801386e:	4a33      	ldr	r2, [pc, #204]	; (801393c <ip4_input+0x240>)
 8013870:	693b      	ldr	r3, [r7, #16]
 8013872:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013874:	4a31      	ldr	r2, [pc, #196]	; (801393c <ip4_input+0x240>)
 8013876:	683b      	ldr	r3, [r7, #0]
 8013878:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801387a:	4a30      	ldr	r2, [pc, #192]	; (801393c <ip4_input+0x240>)
 801387c:	697b      	ldr	r3, [r7, #20]
 801387e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8013880:	697b      	ldr	r3, [r7, #20]
 8013882:	781b      	ldrb	r3, [r3, #0]
 8013884:	f003 030f 	and.w	r3, r3, #15
 8013888:	b2db      	uxtb	r3, r3
 801388a:	009b      	lsls	r3, r3, #2
 801388c:	b2db      	uxtb	r3, r3
 801388e:	b29a      	uxth	r2, r3
 8013890:	4b2a      	ldr	r3, [pc, #168]	; (801393c <ip4_input+0x240>)
 8013892:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013894:	89fb      	ldrh	r3, [r7, #14]
 8013896:	4619      	mov	r1, r3
 8013898:	6878      	ldr	r0, [r7, #4]
 801389a:	f7f7 fe6d 	bl	800b578 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801389e:	697b      	ldr	r3, [r7, #20]
 80138a0:	7a5b      	ldrb	r3, [r3, #9]
 80138a2:	2b11      	cmp	r3, #17
 80138a4:	d006      	beq.n	80138b4 <ip4_input+0x1b8>
 80138a6:	2b11      	cmp	r3, #17
 80138a8:	dc13      	bgt.n	80138d2 <ip4_input+0x1d6>
 80138aa:	2b01      	cmp	r3, #1
 80138ac:	d00c      	beq.n	80138c8 <ip4_input+0x1cc>
 80138ae:	2b06      	cmp	r3, #6
 80138b0:	d005      	beq.n	80138be <ip4_input+0x1c2>
 80138b2:	e00e      	b.n	80138d2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80138b4:	6839      	ldr	r1, [r7, #0]
 80138b6:	6878      	ldr	r0, [r7, #4]
 80138b8:	f7fe fc68 	bl	801218c <udp_input>
        break;
 80138bc:	e026      	b.n	801390c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80138be:	6839      	ldr	r1, [r7, #0]
 80138c0:	6878      	ldr	r0, [r7, #4]
 80138c2:	f7fa f823 	bl	800d90c <tcp_input>
        break;
 80138c6:	e021      	b.n	801390c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80138c8:	6839      	ldr	r1, [r7, #0]
 80138ca:	6878      	ldr	r0, [r7, #4]
 80138cc:	f7ff fcee 	bl	80132ac <icmp_input>
        break;
 80138d0:	e01c      	b.n	801390c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80138d2:	4b1a      	ldr	r3, [pc, #104]	; (801393c <ip4_input+0x240>)
 80138d4:	695b      	ldr	r3, [r3, #20]
 80138d6:	6939      	ldr	r1, [r7, #16]
 80138d8:	4618      	mov	r0, r3
 80138da:	f000 f90b 	bl	8013af4 <ip4_addr_isbroadcast_u32>
 80138de:	4603      	mov	r3, r0
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d10f      	bne.n	8013904 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80138e4:	4b15      	ldr	r3, [pc, #84]	; (801393c <ip4_input+0x240>)
 80138e6:	695b      	ldr	r3, [r3, #20]
 80138e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80138ec:	2be0      	cmp	r3, #224	; 0xe0
 80138ee:	d009      	beq.n	8013904 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80138f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80138f4:	4619      	mov	r1, r3
 80138f6:	6878      	ldr	r0, [r7, #4]
 80138f8:	f7f7 feb1 	bl	800b65e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80138fc:	2102      	movs	r1, #2
 80138fe:	6878      	ldr	r0, [r7, #4]
 8013900:	f7ff fdd8 	bl	80134b4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8013904:	6878      	ldr	r0, [r7, #4]
 8013906:	f7f7 febd 	bl	800b684 <pbuf_free>
        break;
 801390a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801390c:	4b0b      	ldr	r3, [pc, #44]	; (801393c <ip4_input+0x240>)
 801390e:	2200      	movs	r2, #0
 8013910:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8013912:	4b0a      	ldr	r3, [pc, #40]	; (801393c <ip4_input+0x240>)
 8013914:	2200      	movs	r2, #0
 8013916:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8013918:	4b08      	ldr	r3, [pc, #32]	; (801393c <ip4_input+0x240>)
 801391a:	2200      	movs	r2, #0
 801391c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801391e:	4b07      	ldr	r3, [pc, #28]	; (801393c <ip4_input+0x240>)
 8013920:	2200      	movs	r2, #0
 8013922:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013924:	4b05      	ldr	r3, [pc, #20]	; (801393c <ip4_input+0x240>)
 8013926:	2200      	movs	r2, #0
 8013928:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801392a:	4b04      	ldr	r3, [pc, #16]	; (801393c <ip4_input+0x240>)
 801392c:	2200      	movs	r2, #0
 801392e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013930:	2300      	movs	r3, #0
}
 8013932:	4618      	mov	r0, r3
 8013934:	3718      	adds	r7, #24
 8013936:	46bd      	mov	sp, r7
 8013938:	bd80      	pop	{r7, pc}
 801393a:	bf00      	nop
 801393c:	20007404 	.word	0x20007404
 8013940:	2000ab08 	.word	0x2000ab08

08013944 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013944:	b580      	push	{r7, lr}
 8013946:	b08a      	sub	sp, #40	; 0x28
 8013948:	af04      	add	r7, sp, #16
 801394a:	60f8      	str	r0, [r7, #12]
 801394c:	60b9      	str	r1, [r7, #8]
 801394e:	607a      	str	r2, [r7, #4]
 8013950:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013952:	68bb      	ldr	r3, [r7, #8]
 8013954:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	2b00      	cmp	r3, #0
 801395a:	d009      	beq.n	8013970 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801395c:	68bb      	ldr	r3, [r7, #8]
 801395e:	2b00      	cmp	r3, #0
 8013960:	d003      	beq.n	801396a <ip4_output_if+0x26>
 8013962:	68bb      	ldr	r3, [r7, #8]
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	2b00      	cmp	r3, #0
 8013968:	d102      	bne.n	8013970 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801396a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801396c:	3304      	adds	r3, #4
 801396e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013970:	78fa      	ldrb	r2, [r7, #3]
 8013972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013974:	9302      	str	r3, [sp, #8]
 8013976:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801397a:	9301      	str	r3, [sp, #4]
 801397c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013980:	9300      	str	r3, [sp, #0]
 8013982:	4613      	mov	r3, r2
 8013984:	687a      	ldr	r2, [r7, #4]
 8013986:	6979      	ldr	r1, [r7, #20]
 8013988:	68f8      	ldr	r0, [r7, #12]
 801398a:	f000 f805 	bl	8013998 <ip4_output_if_src>
 801398e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013990:	4618      	mov	r0, r3
 8013992:	3718      	adds	r7, #24
 8013994:	46bd      	mov	sp, r7
 8013996:	bd80      	pop	{r7, pc}

08013998 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8013998:	b580      	push	{r7, lr}
 801399a:	b088      	sub	sp, #32
 801399c:	af00      	add	r7, sp, #0
 801399e:	60f8      	str	r0, [r7, #12]
 80139a0:	60b9      	str	r1, [r7, #8]
 80139a2:	607a      	str	r2, [r7, #4]
 80139a4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	7b9b      	ldrb	r3, [r3, #14]
 80139aa:	2b01      	cmp	r3, #1
 80139ac:	d006      	beq.n	80139bc <ip4_output_if_src+0x24>
 80139ae:	4b4b      	ldr	r3, [pc, #300]	; (8013adc <ip4_output_if_src+0x144>)
 80139b0:	f44f 7255 	mov.w	r2, #852	; 0x354
 80139b4:	494a      	ldr	r1, [pc, #296]	; (8013ae0 <ip4_output_if_src+0x148>)
 80139b6:	484b      	ldr	r0, [pc, #300]	; (8013ae4 <ip4_output_if_src+0x14c>)
 80139b8:	f001 fa74 	bl	8014ea4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d060      	beq.n	8013a84 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80139c2:	2314      	movs	r3, #20
 80139c4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80139c6:	2114      	movs	r1, #20
 80139c8:	68f8      	ldr	r0, [r7, #12]
 80139ca:	f7f7 fdc5 	bl	800b558 <pbuf_add_header>
 80139ce:	4603      	mov	r3, r0
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d002      	beq.n	80139da <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80139d4:	f06f 0301 	mvn.w	r3, #1
 80139d8:	e07c      	b.n	8013ad4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	685b      	ldr	r3, [r3, #4]
 80139de:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	895b      	ldrh	r3, [r3, #10]
 80139e4:	2b13      	cmp	r3, #19
 80139e6:	d806      	bhi.n	80139f6 <ip4_output_if_src+0x5e>
 80139e8:	4b3c      	ldr	r3, [pc, #240]	; (8013adc <ip4_output_if_src+0x144>)
 80139ea:	f44f 7262 	mov.w	r2, #904	; 0x388
 80139ee:	493e      	ldr	r1, [pc, #248]	; (8013ae8 <ip4_output_if_src+0x150>)
 80139f0:	483c      	ldr	r0, [pc, #240]	; (8013ae4 <ip4_output_if_src+0x14c>)
 80139f2:	f001 fa57 	bl	8014ea4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80139f6:	69fb      	ldr	r3, [r7, #28]
 80139f8:	78fa      	ldrb	r2, [r7, #3]
 80139fa:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80139fc:	69fb      	ldr	r3, [r7, #28]
 80139fe:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8013a02:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	681a      	ldr	r2, [r3, #0]
 8013a08:	69fb      	ldr	r3, [r7, #28]
 8013a0a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013a0c:	8b7b      	ldrh	r3, [r7, #26]
 8013a0e:	089b      	lsrs	r3, r3, #2
 8013a10:	b29b      	uxth	r3, r3
 8013a12:	b2db      	uxtb	r3, r3
 8013a14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a18:	b2da      	uxtb	r2, r3
 8013a1a:	69fb      	ldr	r3, [r7, #28]
 8013a1c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013a1e:	69fb      	ldr	r3, [r7, #28]
 8013a20:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013a24:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	891b      	ldrh	r3, [r3, #8]
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	f7f6 fa56 	bl	8009edc <lwip_htons>
 8013a30:	4603      	mov	r3, r0
 8013a32:	461a      	mov	r2, r3
 8013a34:	69fb      	ldr	r3, [r7, #28]
 8013a36:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8013a38:	69fb      	ldr	r3, [r7, #28]
 8013a3a:	2200      	movs	r2, #0
 8013a3c:	719a      	strb	r2, [r3, #6]
 8013a3e:	2200      	movs	r2, #0
 8013a40:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013a42:	4b2a      	ldr	r3, [pc, #168]	; (8013aec <ip4_output_if_src+0x154>)
 8013a44:	881b      	ldrh	r3, [r3, #0]
 8013a46:	4618      	mov	r0, r3
 8013a48:	f7f6 fa48 	bl	8009edc <lwip_htons>
 8013a4c:	4603      	mov	r3, r0
 8013a4e:	461a      	mov	r2, r3
 8013a50:	69fb      	ldr	r3, [r7, #28]
 8013a52:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013a54:	4b25      	ldr	r3, [pc, #148]	; (8013aec <ip4_output_if_src+0x154>)
 8013a56:	881b      	ldrh	r3, [r3, #0]
 8013a58:	3301      	adds	r3, #1
 8013a5a:	b29a      	uxth	r2, r3
 8013a5c:	4b23      	ldr	r3, [pc, #140]	; (8013aec <ip4_output_if_src+0x154>)
 8013a5e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013a60:	68bb      	ldr	r3, [r7, #8]
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d104      	bne.n	8013a70 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8013a66:	4b22      	ldr	r3, [pc, #136]	; (8013af0 <ip4_output_if_src+0x158>)
 8013a68:	681a      	ldr	r2, [r3, #0]
 8013a6a:	69fb      	ldr	r3, [r7, #28]
 8013a6c:	60da      	str	r2, [r3, #12]
 8013a6e:	e003      	b.n	8013a78 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013a70:	68bb      	ldr	r3, [r7, #8]
 8013a72:	681a      	ldr	r2, [r3, #0]
 8013a74:	69fb      	ldr	r3, [r7, #28]
 8013a76:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013a78:	69fb      	ldr	r3, [r7, #28]
 8013a7a:	2200      	movs	r2, #0
 8013a7c:	729a      	strb	r2, [r3, #10]
 8013a7e:	2200      	movs	r2, #0
 8013a80:	72da      	strb	r2, [r3, #11]
 8013a82:	e00f      	b.n	8013aa4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	895b      	ldrh	r3, [r3, #10]
 8013a88:	2b13      	cmp	r3, #19
 8013a8a:	d802      	bhi.n	8013a92 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013a8c:	f06f 0301 	mvn.w	r3, #1
 8013a90:	e020      	b.n	8013ad4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	685b      	ldr	r3, [r3, #4]
 8013a96:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8013a98:	69fb      	ldr	r3, [r7, #28]
 8013a9a:	691b      	ldr	r3, [r3, #16]
 8013a9c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013a9e:	f107 0314 	add.w	r3, r7, #20
 8013aa2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aa6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d00c      	beq.n	8013ac6 <ip4_output_if_src+0x12e>
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	891a      	ldrh	r2, [r3, #8]
 8013ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ab2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013ab4:	429a      	cmp	r2, r3
 8013ab6:	d906      	bls.n	8013ac6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8013ab8:	687a      	ldr	r2, [r7, #4]
 8013aba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013abc:	68f8      	ldr	r0, [r7, #12]
 8013abe:	f000 fe77 	bl	80147b0 <ip4_frag>
 8013ac2:	4603      	mov	r3, r0
 8013ac4:	e006      	b.n	8013ad4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8013ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ac8:	695b      	ldr	r3, [r3, #20]
 8013aca:	687a      	ldr	r2, [r7, #4]
 8013acc:	68f9      	ldr	r1, [r7, #12]
 8013ace:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013ad0:	4798      	blx	r3
 8013ad2:	4603      	mov	r3, r0
}
 8013ad4:	4618      	mov	r0, r3
 8013ad6:	3720      	adds	r7, #32
 8013ad8:	46bd      	mov	sp, r7
 8013ada:	bd80      	pop	{r7, pc}
 8013adc:	08019150 	.word	0x08019150
 8013ae0:	08019184 	.word	0x08019184
 8013ae4:	08019190 	.word	0x08019190
 8013ae8:	080191b8 	.word	0x080191b8
 8013aec:	200041d2 	.word	0x200041d2
 8013af0:	0801964c 	.word	0x0801964c

08013af4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013af4:	b480      	push	{r7}
 8013af6:	b085      	sub	sp, #20
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	6078      	str	r0, [r7, #4]
 8013afc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b08:	d002      	beq.n	8013b10 <ip4_addr_isbroadcast_u32+0x1c>
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d101      	bne.n	8013b14 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013b10:	2301      	movs	r3, #1
 8013b12:	e02a      	b.n	8013b6a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013b14:	683b      	ldr	r3, [r7, #0]
 8013b16:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013b1a:	f003 0302 	and.w	r3, r3, #2
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d101      	bne.n	8013b26 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013b22:	2300      	movs	r3, #0
 8013b24:	e021      	b.n	8013b6a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8013b26:	683b      	ldr	r3, [r7, #0]
 8013b28:	3304      	adds	r3, #4
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	687a      	ldr	r2, [r7, #4]
 8013b2e:	429a      	cmp	r2, r3
 8013b30:	d101      	bne.n	8013b36 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013b32:	2300      	movs	r3, #0
 8013b34:	e019      	b.n	8013b6a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013b36:	68fa      	ldr	r2, [r7, #12]
 8013b38:	683b      	ldr	r3, [r7, #0]
 8013b3a:	3304      	adds	r3, #4
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	405a      	eors	r2, r3
 8013b40:	683b      	ldr	r3, [r7, #0]
 8013b42:	3308      	adds	r3, #8
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	4013      	ands	r3, r2
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d10d      	bne.n	8013b68 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013b4c:	683b      	ldr	r3, [r7, #0]
 8013b4e:	3308      	adds	r3, #8
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	43da      	mvns	r2, r3
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013b58:	683b      	ldr	r3, [r7, #0]
 8013b5a:	3308      	adds	r3, #8
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013b60:	429a      	cmp	r2, r3
 8013b62:	d101      	bne.n	8013b68 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013b64:	2301      	movs	r3, #1
 8013b66:	e000      	b.n	8013b6a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013b68:	2300      	movs	r3, #0
  }
}
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	3714      	adds	r7, #20
 8013b6e:	46bd      	mov	sp, r7
 8013b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b74:	4770      	bx	lr
	...

08013b78 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8013b78:	b580      	push	{r7, lr}
 8013b7a:	b08a      	sub	sp, #40	; 0x28
 8013b7c:	af00      	add	r7, sp, #0
 8013b7e:	6078      	str	r0, [r7, #4]
 8013b80:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 8013b82:	f107 030c 	add.w	r3, r7, #12
 8013b86:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	781b      	ldrb	r3, [r3, #0]
 8013b8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8013b90:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013b94:	3301      	adds	r3, #1
 8013b96:	4a89      	ldr	r2, [pc, #548]	; (8013dbc <ip4addr_aton+0x244>)
 8013b98:	4413      	add	r3, r2
 8013b9a:	781b      	ldrb	r3, [r3, #0]
 8013b9c:	f003 0304 	and.w	r3, r3, #4
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d101      	bne.n	8013ba8 <ip4addr_aton+0x30>
      return 0;
 8013ba4:	2300      	movs	r3, #0
 8013ba6:	e105      	b.n	8013db4 <ip4addr_aton+0x23c>
    }
    val = 0;
 8013ba8:	2300      	movs	r3, #0
 8013baa:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 8013bac:	230a      	movs	r3, #10
 8013bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 8013bb2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013bb6:	2b30      	cmp	r3, #48	; 0x30
 8013bb8:	d11c      	bne.n	8013bf4 <ip4addr_aton+0x7c>
      c = *++cp;
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	3301      	adds	r3, #1
 8013bbe:	607b      	str	r3, [r7, #4]
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	781b      	ldrb	r3, [r3, #0]
 8013bc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 8013bc8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013bcc:	2b78      	cmp	r3, #120	; 0x78
 8013bce:	d003      	beq.n	8013bd8 <ip4addr_aton+0x60>
 8013bd0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013bd4:	2b58      	cmp	r3, #88	; 0x58
 8013bd6:	d10a      	bne.n	8013bee <ip4addr_aton+0x76>
        base = 16;
 8013bd8:	2310      	movs	r3, #16
 8013bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	3301      	adds	r3, #1
 8013be2:	607b      	str	r3, [r7, #4]
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	781b      	ldrb	r3, [r3, #0]
 8013be8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8013bec:	e002      	b.n	8013bf4 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 8013bee:	2308      	movs	r3, #8
 8013bf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8013bf4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013bf8:	3301      	adds	r3, #1
 8013bfa:	4a70      	ldr	r2, [pc, #448]	; (8013dbc <ip4addr_aton+0x244>)
 8013bfc:	4413      	add	r3, r2
 8013bfe:	781b      	ldrb	r3, [r3, #0]
 8013c00:	f003 0304 	and.w	r3, r3, #4
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d011      	beq.n	8013c2c <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 8013c08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c0e:	fb02 f203 	mul.w	r2, r2, r3
 8013c12:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013c16:	4413      	add	r3, r2
 8013c18:	3b30      	subs	r3, #48	; 0x30
 8013c1a:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	3301      	adds	r3, #1
 8013c20:	607b      	str	r3, [r7, #4]
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	781b      	ldrb	r3, [r3, #0]
 8013c26:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8013c2a:	e7e3      	b.n	8013bf4 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8013c2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013c30:	2b10      	cmp	r3, #16
 8013c32:	d127      	bne.n	8013c84 <ip4addr_aton+0x10c>
 8013c34:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013c38:	3301      	adds	r3, #1
 8013c3a:	4a60      	ldr	r2, [pc, #384]	; (8013dbc <ip4addr_aton+0x244>)
 8013c3c:	4413      	add	r3, r2
 8013c3e:	781b      	ldrb	r3, [r3, #0]
 8013c40:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d01d      	beq.n	8013c84 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8013c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c4a:	011b      	lsls	r3, r3, #4
 8013c4c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8013c50:	f102 010a 	add.w	r1, r2, #10
 8013c54:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8013c58:	3201      	adds	r2, #1
 8013c5a:	4858      	ldr	r0, [pc, #352]	; (8013dbc <ip4addr_aton+0x244>)
 8013c5c:	4402      	add	r2, r0
 8013c5e:	7812      	ldrb	r2, [r2, #0]
 8013c60:	f002 0203 	and.w	r2, r2, #3
 8013c64:	2a02      	cmp	r2, #2
 8013c66:	d101      	bne.n	8013c6c <ip4addr_aton+0xf4>
 8013c68:	2261      	movs	r2, #97	; 0x61
 8013c6a:	e000      	b.n	8013c6e <ip4addr_aton+0xf6>
 8013c6c:	2241      	movs	r2, #65	; 0x41
 8013c6e:	1a8a      	subs	r2, r1, r2
 8013c70:	4313      	orrs	r3, r2
 8013c72:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	3301      	adds	r3, #1
 8013c78:	607b      	str	r3, [r7, #4]
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	781b      	ldrb	r3, [r3, #0]
 8013c7e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 8013c82:	e7b7      	b.n	8013bf4 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 8013c84:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013c88:	2b2e      	cmp	r3, #46	; 0x2e
 8013c8a:	d114      	bne.n	8013cb6 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8013c8c:	f107 030c 	add.w	r3, r7, #12
 8013c90:	330c      	adds	r3, #12
 8013c92:	69fa      	ldr	r2, [r7, #28]
 8013c94:	429a      	cmp	r2, r3
 8013c96:	d301      	bcc.n	8013c9c <ip4addr_aton+0x124>
        return 0;
 8013c98:	2300      	movs	r3, #0
 8013c9a:	e08b      	b.n	8013db4 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 8013c9c:	69fb      	ldr	r3, [r7, #28]
 8013c9e:	1d1a      	adds	r2, r3, #4
 8013ca0:	61fa      	str	r2, [r7, #28]
 8013ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ca4:	601a      	str	r2, [r3, #0]
      c = *++cp;
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	3301      	adds	r3, #1
 8013caa:	607b      	str	r3, [r7, #4]
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	781b      	ldrb	r3, [r3, #0]
 8013cb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 8013cb4:	e76c      	b.n	8013b90 <ip4addr_aton+0x18>
    } else {
      break;
 8013cb6:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 8013cb8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d00b      	beq.n	8013cd8 <ip4addr_aton+0x160>
 8013cc0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013cc4:	3301      	adds	r3, #1
 8013cc6:	4a3d      	ldr	r2, [pc, #244]	; (8013dbc <ip4addr_aton+0x244>)
 8013cc8:	4413      	add	r3, r2
 8013cca:	781b      	ldrb	r3, [r3, #0]
 8013ccc:	f003 0308 	and.w	r3, r3, #8
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d101      	bne.n	8013cd8 <ip4addr_aton+0x160>
    return 0;
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	e06d      	b.n	8013db4 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8013cd8:	f107 030c 	add.w	r3, r7, #12
 8013cdc:	69fa      	ldr	r2, [r7, #28]
 8013cde:	1ad3      	subs	r3, r2, r3
 8013ce0:	109b      	asrs	r3, r3, #2
 8013ce2:	3301      	adds	r3, #1
 8013ce4:	2b04      	cmp	r3, #4
 8013ce6:	d853      	bhi.n	8013d90 <ip4addr_aton+0x218>
 8013ce8:	a201      	add	r2, pc, #4	; (adr r2, 8013cf0 <ip4addr_aton+0x178>)
 8013cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013cee:	bf00      	nop
 8013cf0:	08013d05 	.word	0x08013d05
 8013cf4:	08013d9f 	.word	0x08013d9f
 8013cf8:	08013d09 	.word	0x08013d09
 8013cfc:	08013d2b 	.word	0x08013d2b
 8013d00:	08013d59 	.word	0x08013d59

    case 0:
      return 0;       /* initial nondigit */
 8013d04:	2300      	movs	r3, #0
 8013d06:	e055      	b.n	8013db4 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 8013d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8013d0e:	d301      	bcc.n	8013d14 <ip4addr_aton+0x19c>
        return 0;
 8013d10:	2300      	movs	r3, #0
 8013d12:	e04f      	b.n	8013db4 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	2bff      	cmp	r3, #255	; 0xff
 8013d18:	d901      	bls.n	8013d1e <ip4addr_aton+0x1a6>
        return 0;
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	e04a      	b.n	8013db4 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	061b      	lsls	r3, r3, #24
 8013d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d24:	4313      	orrs	r3, r2
 8013d26:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8013d28:	e03a      	b.n	8013da0 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 8013d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013d30:	d301      	bcc.n	8013d36 <ip4addr_aton+0x1be>
        return 0;
 8013d32:	2300      	movs	r3, #0
 8013d34:	e03e      	b.n	8013db4 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	2bff      	cmp	r3, #255	; 0xff
 8013d3a:	d802      	bhi.n	8013d42 <ip4addr_aton+0x1ca>
 8013d3c:	693b      	ldr	r3, [r7, #16]
 8013d3e:	2bff      	cmp	r3, #255	; 0xff
 8013d40:	d901      	bls.n	8013d46 <ip4addr_aton+0x1ce>
        return 0;
 8013d42:	2300      	movs	r3, #0
 8013d44:	e036      	b.n	8013db4 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	061a      	lsls	r2, r3, #24
 8013d4a:	693b      	ldr	r3, [r7, #16]
 8013d4c:	041b      	lsls	r3, r3, #16
 8013d4e:	4313      	orrs	r3, r2
 8013d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d52:	4313      	orrs	r3, r2
 8013d54:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8013d56:	e023      	b.n	8013da0 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 8013d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d5a:	2bff      	cmp	r3, #255	; 0xff
 8013d5c:	d901      	bls.n	8013d62 <ip4addr_aton+0x1ea>
        return 0;
 8013d5e:	2300      	movs	r3, #0
 8013d60:	e028      	b.n	8013db4 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	2bff      	cmp	r3, #255	; 0xff
 8013d66:	d805      	bhi.n	8013d74 <ip4addr_aton+0x1fc>
 8013d68:	693b      	ldr	r3, [r7, #16]
 8013d6a:	2bff      	cmp	r3, #255	; 0xff
 8013d6c:	d802      	bhi.n	8013d74 <ip4addr_aton+0x1fc>
 8013d6e:	697b      	ldr	r3, [r7, #20]
 8013d70:	2bff      	cmp	r3, #255	; 0xff
 8013d72:	d901      	bls.n	8013d78 <ip4addr_aton+0x200>
        return 0;
 8013d74:	2300      	movs	r3, #0
 8013d76:	e01d      	b.n	8013db4 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	061a      	lsls	r2, r3, #24
 8013d7c:	693b      	ldr	r3, [r7, #16]
 8013d7e:	041b      	lsls	r3, r3, #16
 8013d80:	431a      	orrs	r2, r3
 8013d82:	697b      	ldr	r3, [r7, #20]
 8013d84:	021b      	lsls	r3, r3, #8
 8013d86:	4313      	orrs	r3, r2
 8013d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d8a:	4313      	orrs	r3, r2
 8013d8c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8013d8e:	e007      	b.n	8013da0 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 8013d90:	4b0b      	ldr	r3, [pc, #44]	; (8013dc0 <ip4addr_aton+0x248>)
 8013d92:	22f9      	movs	r2, #249	; 0xf9
 8013d94:	490b      	ldr	r1, [pc, #44]	; (8013dc4 <ip4addr_aton+0x24c>)
 8013d96:	480c      	ldr	r0, [pc, #48]	; (8013dc8 <ip4addr_aton+0x250>)
 8013d98:	f001 f884 	bl	8014ea4 <iprintf>
      break;
 8013d9c:	e000      	b.n	8013da0 <ip4addr_aton+0x228>
      break;
 8013d9e:	bf00      	nop
  }
  if (addr) {
 8013da0:	683b      	ldr	r3, [r7, #0]
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d005      	beq.n	8013db2 <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8013da6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013da8:	f7f6 f8ad 	bl	8009f06 <lwip_htonl>
 8013dac:	4602      	mov	r2, r0
 8013dae:	683b      	ldr	r3, [r7, #0]
 8013db0:	601a      	str	r2, [r3, #0]
  }
  return 1;
 8013db2:	2301      	movs	r3, #1
}
 8013db4:	4618      	mov	r0, r3
 8013db6:	3728      	adds	r7, #40	; 0x28
 8013db8:	46bd      	mov	sp, r7
 8013dba:	bd80      	pop	{r7, pc}
 8013dbc:	08019668 	.word	0x08019668
 8013dc0:	080191e8 	.word	0x080191e8
 8013dc4:	08019224 	.word	0x08019224
 8013dc8:	08019230 	.word	0x08019230

08013dcc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013dcc:	b580      	push	{r7, lr}
 8013dce:	b084      	sub	sp, #16
 8013dd0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8013dd6:	4b12      	ldr	r3, [pc, #72]	; (8013e20 <ip_reass_tmr+0x54>)
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013ddc:	e018      	b.n	8013e10 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	7fdb      	ldrb	r3, [r3, #31]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d00b      	beq.n	8013dfe <ip_reass_tmr+0x32>
      r->timer--;
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	7fdb      	ldrb	r3, [r3, #31]
 8013dea:	3b01      	subs	r3, #1
 8013dec:	b2da      	uxtb	r2, r3
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013df2:	68fb      	ldr	r3, [r7, #12]
 8013df4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	60fb      	str	r3, [r7, #12]
 8013dfc:	e008      	b.n	8013e10 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	681b      	ldr	r3, [r3, #0]
 8013e06:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013e08:	68b9      	ldr	r1, [r7, #8]
 8013e0a:	6878      	ldr	r0, [r7, #4]
 8013e0c:	f000 f80a 	bl	8013e24 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d1e3      	bne.n	8013dde <ip_reass_tmr+0x12>
    }
  }
}
 8013e16:	bf00      	nop
 8013e18:	bf00      	nop
 8013e1a:	3710      	adds	r7, #16
 8013e1c:	46bd      	mov	sp, r7
 8013e1e:	bd80      	pop	{r7, pc}
 8013e20:	200041d4 	.word	0x200041d4

08013e24 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013e24:	b580      	push	{r7, lr}
 8013e26:	b088      	sub	sp, #32
 8013e28:	af00      	add	r7, sp, #0
 8013e2a:	6078      	str	r0, [r7, #4]
 8013e2c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8013e2e:	2300      	movs	r3, #0
 8013e30:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8013e32:	683a      	ldr	r2, [r7, #0]
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	429a      	cmp	r2, r3
 8013e38:	d105      	bne.n	8013e46 <ip_reass_free_complete_datagram+0x22>
 8013e3a:	4b45      	ldr	r3, [pc, #276]	; (8013f50 <ip_reass_free_complete_datagram+0x12c>)
 8013e3c:	22ab      	movs	r2, #171	; 0xab
 8013e3e:	4945      	ldr	r1, [pc, #276]	; (8013f54 <ip_reass_free_complete_datagram+0x130>)
 8013e40:	4845      	ldr	r0, [pc, #276]	; (8013f58 <ip_reass_free_complete_datagram+0x134>)
 8013e42:	f001 f82f 	bl	8014ea4 <iprintf>
  if (prev != NULL) {
 8013e46:	683b      	ldr	r3, [r7, #0]
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d00a      	beq.n	8013e62 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8013e4c:	683b      	ldr	r3, [r7, #0]
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	687a      	ldr	r2, [r7, #4]
 8013e52:	429a      	cmp	r2, r3
 8013e54:	d005      	beq.n	8013e62 <ip_reass_free_complete_datagram+0x3e>
 8013e56:	4b3e      	ldr	r3, [pc, #248]	; (8013f50 <ip_reass_free_complete_datagram+0x12c>)
 8013e58:	22ad      	movs	r2, #173	; 0xad
 8013e5a:	4940      	ldr	r1, [pc, #256]	; (8013f5c <ip_reass_free_complete_datagram+0x138>)
 8013e5c:	483e      	ldr	r0, [pc, #248]	; (8013f58 <ip_reass_free_complete_datagram+0x134>)
 8013e5e:	f001 f821 	bl	8014ea4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	685b      	ldr	r3, [r3, #4]
 8013e66:	685b      	ldr	r3, [r3, #4]
 8013e68:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8013e6a:	697b      	ldr	r3, [r7, #20]
 8013e6c:	889b      	ldrh	r3, [r3, #4]
 8013e6e:	b29b      	uxth	r3, r3
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d12a      	bne.n	8013eca <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	685b      	ldr	r3, [r3, #4]
 8013e78:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8013e7a:	697b      	ldr	r3, [r7, #20]
 8013e7c:	681a      	ldr	r2, [r3, #0]
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013e82:	69bb      	ldr	r3, [r7, #24]
 8013e84:	6858      	ldr	r0, [r3, #4]
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	3308      	adds	r3, #8
 8013e8a:	2214      	movs	r2, #20
 8013e8c:	4619      	mov	r1, r3
 8013e8e:	f000 fff3 	bl	8014e78 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013e92:	2101      	movs	r1, #1
 8013e94:	69b8      	ldr	r0, [r7, #24]
 8013e96:	f7ff fb1d 	bl	80134d4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8013e9a:	69b8      	ldr	r0, [r7, #24]
 8013e9c:	f7f7 fc80 	bl	800b7a0 <pbuf_clen>
 8013ea0:	4603      	mov	r3, r0
 8013ea2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013ea4:	8bfa      	ldrh	r2, [r7, #30]
 8013ea6:	8a7b      	ldrh	r3, [r7, #18]
 8013ea8:	4413      	add	r3, r2
 8013eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013eae:	db05      	blt.n	8013ebc <ip_reass_free_complete_datagram+0x98>
 8013eb0:	4b27      	ldr	r3, [pc, #156]	; (8013f50 <ip_reass_free_complete_datagram+0x12c>)
 8013eb2:	22bc      	movs	r2, #188	; 0xbc
 8013eb4:	492a      	ldr	r1, [pc, #168]	; (8013f60 <ip_reass_free_complete_datagram+0x13c>)
 8013eb6:	4828      	ldr	r0, [pc, #160]	; (8013f58 <ip_reass_free_complete_datagram+0x134>)
 8013eb8:	f000 fff4 	bl	8014ea4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013ebc:	8bfa      	ldrh	r2, [r7, #30]
 8013ebe:	8a7b      	ldrh	r3, [r7, #18]
 8013ec0:	4413      	add	r3, r2
 8013ec2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013ec4:	69b8      	ldr	r0, [r7, #24]
 8013ec6:	f7f7 fbdd 	bl	800b684 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	685b      	ldr	r3, [r3, #4]
 8013ece:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013ed0:	e01f      	b.n	8013f12 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013ed2:	69bb      	ldr	r3, [r7, #24]
 8013ed4:	685b      	ldr	r3, [r3, #4]
 8013ed6:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013ed8:	69bb      	ldr	r3, [r7, #24]
 8013eda:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013edc:	697b      	ldr	r3, [r7, #20]
 8013ede:	681b      	ldr	r3, [r3, #0]
 8013ee0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013ee2:	68f8      	ldr	r0, [r7, #12]
 8013ee4:	f7f7 fc5c 	bl	800b7a0 <pbuf_clen>
 8013ee8:	4603      	mov	r3, r0
 8013eea:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013eec:	8bfa      	ldrh	r2, [r7, #30]
 8013eee:	8a7b      	ldrh	r3, [r7, #18]
 8013ef0:	4413      	add	r3, r2
 8013ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013ef6:	db05      	blt.n	8013f04 <ip_reass_free_complete_datagram+0xe0>
 8013ef8:	4b15      	ldr	r3, [pc, #84]	; (8013f50 <ip_reass_free_complete_datagram+0x12c>)
 8013efa:	22cc      	movs	r2, #204	; 0xcc
 8013efc:	4918      	ldr	r1, [pc, #96]	; (8013f60 <ip_reass_free_complete_datagram+0x13c>)
 8013efe:	4816      	ldr	r0, [pc, #88]	; (8013f58 <ip_reass_free_complete_datagram+0x134>)
 8013f00:	f000 ffd0 	bl	8014ea4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013f04:	8bfa      	ldrh	r2, [r7, #30]
 8013f06:	8a7b      	ldrh	r3, [r7, #18]
 8013f08:	4413      	add	r3, r2
 8013f0a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8013f0c:	68f8      	ldr	r0, [r7, #12]
 8013f0e:	f7f7 fbb9 	bl	800b684 <pbuf_free>
  while (p != NULL) {
 8013f12:	69bb      	ldr	r3, [r7, #24]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d1dc      	bne.n	8013ed2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013f18:	6839      	ldr	r1, [r7, #0]
 8013f1a:	6878      	ldr	r0, [r7, #4]
 8013f1c:	f000 f8c2 	bl	80140a4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8013f20:	4b10      	ldr	r3, [pc, #64]	; (8013f64 <ip_reass_free_complete_datagram+0x140>)
 8013f22:	881b      	ldrh	r3, [r3, #0]
 8013f24:	8bfa      	ldrh	r2, [r7, #30]
 8013f26:	429a      	cmp	r2, r3
 8013f28:	d905      	bls.n	8013f36 <ip_reass_free_complete_datagram+0x112>
 8013f2a:	4b09      	ldr	r3, [pc, #36]	; (8013f50 <ip_reass_free_complete_datagram+0x12c>)
 8013f2c:	22d2      	movs	r2, #210	; 0xd2
 8013f2e:	490e      	ldr	r1, [pc, #56]	; (8013f68 <ip_reass_free_complete_datagram+0x144>)
 8013f30:	4809      	ldr	r0, [pc, #36]	; (8013f58 <ip_reass_free_complete_datagram+0x134>)
 8013f32:	f000 ffb7 	bl	8014ea4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8013f36:	4b0b      	ldr	r3, [pc, #44]	; (8013f64 <ip_reass_free_complete_datagram+0x140>)
 8013f38:	881a      	ldrh	r2, [r3, #0]
 8013f3a:	8bfb      	ldrh	r3, [r7, #30]
 8013f3c:	1ad3      	subs	r3, r2, r3
 8013f3e:	b29a      	uxth	r2, r3
 8013f40:	4b08      	ldr	r3, [pc, #32]	; (8013f64 <ip_reass_free_complete_datagram+0x140>)
 8013f42:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8013f44:	8bfb      	ldrh	r3, [r7, #30]
}
 8013f46:	4618      	mov	r0, r3
 8013f48:	3720      	adds	r7, #32
 8013f4a:	46bd      	mov	sp, r7
 8013f4c:	bd80      	pop	{r7, pc}
 8013f4e:	bf00      	nop
 8013f50:	08019258 	.word	0x08019258
 8013f54:	08019294 	.word	0x08019294
 8013f58:	080192a0 	.word	0x080192a0
 8013f5c:	080192c8 	.word	0x080192c8
 8013f60:	080192dc 	.word	0x080192dc
 8013f64:	200041d8 	.word	0x200041d8
 8013f68:	080192fc 	.word	0x080192fc

08013f6c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8013f6c:	b580      	push	{r7, lr}
 8013f6e:	b08a      	sub	sp, #40	; 0x28
 8013f70:	af00      	add	r7, sp, #0
 8013f72:	6078      	str	r0, [r7, #4]
 8013f74:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8013f76:	2300      	movs	r3, #0
 8013f78:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8013f7a:	2300      	movs	r3, #0
 8013f7c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8013f7e:	2300      	movs	r3, #0
 8013f80:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013f82:	2300      	movs	r3, #0
 8013f84:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013f86:	2300      	movs	r3, #0
 8013f88:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8013f8a:	4b28      	ldr	r3, [pc, #160]	; (801402c <ip_reass_remove_oldest_datagram+0xc0>)
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013f90:	e030      	b.n	8013ff4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f94:	695a      	ldr	r2, [r3, #20]
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	68db      	ldr	r3, [r3, #12]
 8013f9a:	429a      	cmp	r2, r3
 8013f9c:	d10c      	bne.n	8013fb8 <ip_reass_remove_oldest_datagram+0x4c>
 8013f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fa0:	699a      	ldr	r2, [r3, #24]
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	691b      	ldr	r3, [r3, #16]
 8013fa6:	429a      	cmp	r2, r3
 8013fa8:	d106      	bne.n	8013fb8 <ip_reass_remove_oldest_datagram+0x4c>
 8013faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fac:	899a      	ldrh	r2, [r3, #12]
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	889b      	ldrh	r3, [r3, #4]
 8013fb2:	b29b      	uxth	r3, r3
 8013fb4:	429a      	cmp	r2, r3
 8013fb6:	d014      	beq.n	8013fe2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013fb8:	693b      	ldr	r3, [r7, #16]
 8013fba:	3301      	adds	r3, #1
 8013fbc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8013fbe:	6a3b      	ldr	r3, [r7, #32]
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d104      	bne.n	8013fce <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fc6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013fc8:	69fb      	ldr	r3, [r7, #28]
 8013fca:	61bb      	str	r3, [r7, #24]
 8013fcc:	e009      	b.n	8013fe2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8013fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fd0:	7fda      	ldrb	r2, [r3, #31]
 8013fd2:	6a3b      	ldr	r3, [r7, #32]
 8013fd4:	7fdb      	ldrb	r3, [r3, #31]
 8013fd6:	429a      	cmp	r2, r3
 8013fd8:	d803      	bhi.n	8013fe2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8013fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fdc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013fde:	69fb      	ldr	r3, [r7, #28]
 8013fe0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8013fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d001      	beq.n	8013fee <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8013fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fec:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8013fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d1cb      	bne.n	8013f92 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8013ffa:	6a3b      	ldr	r3, [r7, #32]
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d008      	beq.n	8014012 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8014000:	69b9      	ldr	r1, [r7, #24]
 8014002:	6a38      	ldr	r0, [r7, #32]
 8014004:	f7ff ff0e 	bl	8013e24 <ip_reass_free_complete_datagram>
 8014008:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801400a:	697a      	ldr	r2, [r7, #20]
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	4413      	add	r3, r2
 8014010:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8014012:	697a      	ldr	r2, [r7, #20]
 8014014:	683b      	ldr	r3, [r7, #0]
 8014016:	429a      	cmp	r2, r3
 8014018:	da02      	bge.n	8014020 <ip_reass_remove_oldest_datagram+0xb4>
 801401a:	693b      	ldr	r3, [r7, #16]
 801401c:	2b01      	cmp	r3, #1
 801401e:	dcac      	bgt.n	8013f7a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8014020:	697b      	ldr	r3, [r7, #20]
}
 8014022:	4618      	mov	r0, r3
 8014024:	3728      	adds	r7, #40	; 0x28
 8014026:	46bd      	mov	sp, r7
 8014028:	bd80      	pop	{r7, pc}
 801402a:	bf00      	nop
 801402c:	200041d4 	.word	0x200041d4

08014030 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8014030:	b580      	push	{r7, lr}
 8014032:	b084      	sub	sp, #16
 8014034:	af00      	add	r7, sp, #0
 8014036:	6078      	str	r0, [r7, #4]
 8014038:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801403a:	2004      	movs	r0, #4
 801403c:	f7f6 fc2c 	bl	800a898 <memp_malloc>
 8014040:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	2b00      	cmp	r3, #0
 8014046:	d110      	bne.n	801406a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8014048:	6839      	ldr	r1, [r7, #0]
 801404a:	6878      	ldr	r0, [r7, #4]
 801404c:	f7ff ff8e 	bl	8013f6c <ip_reass_remove_oldest_datagram>
 8014050:	4602      	mov	r2, r0
 8014052:	683b      	ldr	r3, [r7, #0]
 8014054:	4293      	cmp	r3, r2
 8014056:	dc03      	bgt.n	8014060 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014058:	2004      	movs	r0, #4
 801405a:	f7f6 fc1d 	bl	800a898 <memp_malloc>
 801405e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	2b00      	cmp	r3, #0
 8014064:	d101      	bne.n	801406a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8014066:	2300      	movs	r3, #0
 8014068:	e016      	b.n	8014098 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801406a:	2220      	movs	r2, #32
 801406c:	2100      	movs	r1, #0
 801406e:	68f8      	ldr	r0, [r7, #12]
 8014070:	f000 ff10 	bl	8014e94 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	220f      	movs	r2, #15
 8014078:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801407a:	4b09      	ldr	r3, [pc, #36]	; (80140a0 <ip_reass_enqueue_new_datagram+0x70>)
 801407c:	681a      	ldr	r2, [r3, #0]
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8014082:	4a07      	ldr	r2, [pc, #28]	; (80140a0 <ip_reass_enqueue_new_datagram+0x70>)
 8014084:	68fb      	ldr	r3, [r7, #12]
 8014086:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	3308      	adds	r3, #8
 801408c:	2214      	movs	r2, #20
 801408e:	6879      	ldr	r1, [r7, #4]
 8014090:	4618      	mov	r0, r3
 8014092:	f000 fef1 	bl	8014e78 <memcpy>
  return ipr;
 8014096:	68fb      	ldr	r3, [r7, #12]
}
 8014098:	4618      	mov	r0, r3
 801409a:	3710      	adds	r7, #16
 801409c:	46bd      	mov	sp, r7
 801409e:	bd80      	pop	{r7, pc}
 80140a0:	200041d4 	.word	0x200041d4

080140a4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80140a4:	b580      	push	{r7, lr}
 80140a6:	b082      	sub	sp, #8
 80140a8:	af00      	add	r7, sp, #0
 80140aa:	6078      	str	r0, [r7, #4]
 80140ac:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80140ae:	4b10      	ldr	r3, [pc, #64]	; (80140f0 <ip_reass_dequeue_datagram+0x4c>)
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	687a      	ldr	r2, [r7, #4]
 80140b4:	429a      	cmp	r2, r3
 80140b6:	d104      	bne.n	80140c2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	4a0c      	ldr	r2, [pc, #48]	; (80140f0 <ip_reass_dequeue_datagram+0x4c>)
 80140be:	6013      	str	r3, [r2, #0]
 80140c0:	e00d      	b.n	80140de <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80140c2:	683b      	ldr	r3, [r7, #0]
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d106      	bne.n	80140d6 <ip_reass_dequeue_datagram+0x32>
 80140c8:	4b0a      	ldr	r3, [pc, #40]	; (80140f4 <ip_reass_dequeue_datagram+0x50>)
 80140ca:	f240 1245 	movw	r2, #325	; 0x145
 80140ce:	490a      	ldr	r1, [pc, #40]	; (80140f8 <ip_reass_dequeue_datagram+0x54>)
 80140d0:	480a      	ldr	r0, [pc, #40]	; (80140fc <ip_reass_dequeue_datagram+0x58>)
 80140d2:	f000 fee7 	bl	8014ea4 <iprintf>
    prev->next = ipr->next;
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	681a      	ldr	r2, [r3, #0]
 80140da:	683b      	ldr	r3, [r7, #0]
 80140dc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80140de:	6879      	ldr	r1, [r7, #4]
 80140e0:	2004      	movs	r0, #4
 80140e2:	f7f6 fc2b 	bl	800a93c <memp_free>
}
 80140e6:	bf00      	nop
 80140e8:	3708      	adds	r7, #8
 80140ea:	46bd      	mov	sp, r7
 80140ec:	bd80      	pop	{r7, pc}
 80140ee:	bf00      	nop
 80140f0:	200041d4 	.word	0x200041d4
 80140f4:	08019258 	.word	0x08019258
 80140f8:	08019320 	.word	0x08019320
 80140fc:	080192a0 	.word	0x080192a0

08014100 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8014100:	b580      	push	{r7, lr}
 8014102:	b08c      	sub	sp, #48	; 0x30
 8014104:	af00      	add	r7, sp, #0
 8014106:	60f8      	str	r0, [r7, #12]
 8014108:	60b9      	str	r1, [r7, #8]
 801410a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801410c:	2300      	movs	r3, #0
 801410e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8014110:	2301      	movs	r3, #1
 8014112:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8014114:	68bb      	ldr	r3, [r7, #8]
 8014116:	685b      	ldr	r3, [r3, #4]
 8014118:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801411a:	69fb      	ldr	r3, [r7, #28]
 801411c:	885b      	ldrh	r3, [r3, #2]
 801411e:	b29b      	uxth	r3, r3
 8014120:	4618      	mov	r0, r3
 8014122:	f7f5 fedb 	bl	8009edc <lwip_htons>
 8014126:	4603      	mov	r3, r0
 8014128:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801412a:	69fb      	ldr	r3, [r7, #28]
 801412c:	781b      	ldrb	r3, [r3, #0]
 801412e:	f003 030f 	and.w	r3, r3, #15
 8014132:	b2db      	uxtb	r3, r3
 8014134:	009b      	lsls	r3, r3, #2
 8014136:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8014138:	7e7b      	ldrb	r3, [r7, #25]
 801413a:	b29b      	uxth	r3, r3
 801413c:	8b7a      	ldrh	r2, [r7, #26]
 801413e:	429a      	cmp	r2, r3
 8014140:	d202      	bcs.n	8014148 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014142:	f04f 33ff 	mov.w	r3, #4294967295
 8014146:	e135      	b.n	80143b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8014148:	7e7b      	ldrb	r3, [r7, #25]
 801414a:	b29b      	uxth	r3, r3
 801414c:	8b7a      	ldrh	r2, [r7, #26]
 801414e:	1ad3      	subs	r3, r2, r3
 8014150:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8014152:	69fb      	ldr	r3, [r7, #28]
 8014154:	88db      	ldrh	r3, [r3, #6]
 8014156:	b29b      	uxth	r3, r3
 8014158:	4618      	mov	r0, r3
 801415a:	f7f5 febf 	bl	8009edc <lwip_htons>
 801415e:	4603      	mov	r3, r0
 8014160:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014164:	b29b      	uxth	r3, r3
 8014166:	00db      	lsls	r3, r3, #3
 8014168:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801416a:	68bb      	ldr	r3, [r7, #8]
 801416c:	685b      	ldr	r3, [r3, #4]
 801416e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8014170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014172:	2200      	movs	r2, #0
 8014174:	701a      	strb	r2, [r3, #0]
 8014176:	2200      	movs	r2, #0
 8014178:	705a      	strb	r2, [r3, #1]
 801417a:	2200      	movs	r2, #0
 801417c:	709a      	strb	r2, [r3, #2]
 801417e:	2200      	movs	r2, #0
 8014180:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8014182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014184:	8afa      	ldrh	r2, [r7, #22]
 8014186:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8014188:	8afa      	ldrh	r2, [r7, #22]
 801418a:	8b7b      	ldrh	r3, [r7, #26]
 801418c:	4413      	add	r3, r2
 801418e:	b29a      	uxth	r2, r3
 8014190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014192:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8014194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014196:	88db      	ldrh	r3, [r3, #6]
 8014198:	b29b      	uxth	r3, r3
 801419a:	8afa      	ldrh	r2, [r7, #22]
 801419c:	429a      	cmp	r2, r3
 801419e:	d902      	bls.n	80141a6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80141a0:	f04f 33ff 	mov.w	r3, #4294967295
 80141a4:	e106      	b.n	80143b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	685b      	ldr	r3, [r3, #4]
 80141aa:	627b      	str	r3, [r7, #36]	; 0x24
 80141ac:	e068      	b.n	8014280 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80141ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141b0:	685b      	ldr	r3, [r3, #4]
 80141b2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80141b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141b6:	889b      	ldrh	r3, [r3, #4]
 80141b8:	b29a      	uxth	r2, r3
 80141ba:	693b      	ldr	r3, [r7, #16]
 80141bc:	889b      	ldrh	r3, [r3, #4]
 80141be:	b29b      	uxth	r3, r3
 80141c0:	429a      	cmp	r2, r3
 80141c2:	d235      	bcs.n	8014230 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80141c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141c8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80141ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d020      	beq.n	8014212 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80141d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141d2:	889b      	ldrh	r3, [r3, #4]
 80141d4:	b29a      	uxth	r2, r3
 80141d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141d8:	88db      	ldrh	r3, [r3, #6]
 80141da:	b29b      	uxth	r3, r3
 80141dc:	429a      	cmp	r2, r3
 80141de:	d307      	bcc.n	80141f0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80141e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141e2:	88db      	ldrh	r3, [r3, #6]
 80141e4:	b29a      	uxth	r2, r3
 80141e6:	693b      	ldr	r3, [r7, #16]
 80141e8:	889b      	ldrh	r3, [r3, #4]
 80141ea:	b29b      	uxth	r3, r3
 80141ec:	429a      	cmp	r2, r3
 80141ee:	d902      	bls.n	80141f6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80141f0:	f04f 33ff 	mov.w	r3, #4294967295
 80141f4:	e0de      	b.n	80143b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80141f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141f8:	68ba      	ldr	r2, [r7, #8]
 80141fa:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80141fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141fe:	88db      	ldrh	r3, [r3, #6]
 8014200:	b29a      	uxth	r2, r3
 8014202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014204:	889b      	ldrh	r3, [r3, #4]
 8014206:	b29b      	uxth	r3, r3
 8014208:	429a      	cmp	r2, r3
 801420a:	d03d      	beq.n	8014288 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801420c:	2300      	movs	r3, #0
 801420e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8014210:	e03a      	b.n	8014288 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8014212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014214:	88db      	ldrh	r3, [r3, #6]
 8014216:	b29a      	uxth	r2, r3
 8014218:	693b      	ldr	r3, [r7, #16]
 801421a:	889b      	ldrh	r3, [r3, #4]
 801421c:	b29b      	uxth	r3, r3
 801421e:	429a      	cmp	r2, r3
 8014220:	d902      	bls.n	8014228 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014222:	f04f 33ff 	mov.w	r3, #4294967295
 8014226:	e0c5      	b.n	80143b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8014228:	68fb      	ldr	r3, [r7, #12]
 801422a:	68ba      	ldr	r2, [r7, #8]
 801422c:	605a      	str	r2, [r3, #4]
      break;
 801422e:	e02b      	b.n	8014288 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8014230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014232:	889b      	ldrh	r3, [r3, #4]
 8014234:	b29a      	uxth	r2, r3
 8014236:	693b      	ldr	r3, [r7, #16]
 8014238:	889b      	ldrh	r3, [r3, #4]
 801423a:	b29b      	uxth	r3, r3
 801423c:	429a      	cmp	r2, r3
 801423e:	d102      	bne.n	8014246 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014240:	f04f 33ff 	mov.w	r3, #4294967295
 8014244:	e0b6      	b.n	80143b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8014246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014248:	889b      	ldrh	r3, [r3, #4]
 801424a:	b29a      	uxth	r2, r3
 801424c:	693b      	ldr	r3, [r7, #16]
 801424e:	88db      	ldrh	r3, [r3, #6]
 8014250:	b29b      	uxth	r3, r3
 8014252:	429a      	cmp	r2, r3
 8014254:	d202      	bcs.n	801425c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014256:	f04f 33ff 	mov.w	r3, #4294967295
 801425a:	e0ab      	b.n	80143b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801425c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801425e:	2b00      	cmp	r3, #0
 8014260:	d009      	beq.n	8014276 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8014262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014264:	88db      	ldrh	r3, [r3, #6]
 8014266:	b29a      	uxth	r2, r3
 8014268:	693b      	ldr	r3, [r7, #16]
 801426a:	889b      	ldrh	r3, [r3, #4]
 801426c:	b29b      	uxth	r3, r3
 801426e:	429a      	cmp	r2, r3
 8014270:	d001      	beq.n	8014276 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014272:	2300      	movs	r3, #0
 8014274:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8014276:	693b      	ldr	r3, [r7, #16]
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801427c:	693b      	ldr	r3, [r7, #16]
 801427e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8014280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014282:	2b00      	cmp	r3, #0
 8014284:	d193      	bne.n	80141ae <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8014286:	e000      	b.n	801428a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8014288:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801428c:	2b00      	cmp	r3, #0
 801428e:	d12d      	bne.n	80142ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8014290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014292:	2b00      	cmp	r3, #0
 8014294:	d01c      	beq.n	80142d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8014296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014298:	88db      	ldrh	r3, [r3, #6]
 801429a:	b29a      	uxth	r2, r3
 801429c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801429e:	889b      	ldrh	r3, [r3, #4]
 80142a0:	b29b      	uxth	r3, r3
 80142a2:	429a      	cmp	r2, r3
 80142a4:	d906      	bls.n	80142b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80142a6:	4b45      	ldr	r3, [pc, #276]	; (80143bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80142a8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80142ac:	4944      	ldr	r1, [pc, #272]	; (80143c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80142ae:	4845      	ldr	r0, [pc, #276]	; (80143c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80142b0:	f000 fdf8 	bl	8014ea4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80142b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142b6:	68ba      	ldr	r2, [r7, #8]
 80142b8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80142ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142bc:	88db      	ldrh	r3, [r3, #6]
 80142be:	b29a      	uxth	r2, r3
 80142c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142c2:	889b      	ldrh	r3, [r3, #4]
 80142c4:	b29b      	uxth	r3, r3
 80142c6:	429a      	cmp	r2, r3
 80142c8:	d010      	beq.n	80142ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80142ca:	2300      	movs	r3, #0
 80142cc:	623b      	str	r3, [r7, #32]
 80142ce:	e00d      	b.n	80142ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80142d0:	68fb      	ldr	r3, [r7, #12]
 80142d2:	685b      	ldr	r3, [r3, #4]
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d006      	beq.n	80142e6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80142d8:	4b38      	ldr	r3, [pc, #224]	; (80143bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80142da:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80142de:	493a      	ldr	r1, [pc, #232]	; (80143c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80142e0:	4838      	ldr	r0, [pc, #224]	; (80143c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80142e2:	f000 fddf 	bl	8014ea4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	68ba      	ldr	r2, [r7, #8]
 80142ea:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d105      	bne.n	80142fe <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	7f9b      	ldrb	r3, [r3, #30]
 80142f6:	f003 0301 	and.w	r3, r3, #1
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d059      	beq.n	80143b2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80142fe:	6a3b      	ldr	r3, [r7, #32]
 8014300:	2b00      	cmp	r3, #0
 8014302:	d04f      	beq.n	80143a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8014304:	68fb      	ldr	r3, [r7, #12]
 8014306:	685b      	ldr	r3, [r3, #4]
 8014308:	2b00      	cmp	r3, #0
 801430a:	d006      	beq.n	801431a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	685b      	ldr	r3, [r3, #4]
 8014310:	685b      	ldr	r3, [r3, #4]
 8014312:	889b      	ldrh	r3, [r3, #4]
 8014314:	b29b      	uxth	r3, r3
 8014316:	2b00      	cmp	r3, #0
 8014318:	d002      	beq.n	8014320 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801431a:	2300      	movs	r3, #0
 801431c:	623b      	str	r3, [r7, #32]
 801431e:	e041      	b.n	80143a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8014320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014322:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8014324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801432a:	e012      	b.n	8014352 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801432e:	685b      	ldr	r3, [r3, #4]
 8014330:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8014332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014334:	88db      	ldrh	r3, [r3, #6]
 8014336:	b29a      	uxth	r2, r3
 8014338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801433a:	889b      	ldrh	r3, [r3, #4]
 801433c:	b29b      	uxth	r3, r3
 801433e:	429a      	cmp	r2, r3
 8014340:	d002      	beq.n	8014348 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8014342:	2300      	movs	r3, #0
 8014344:	623b      	str	r3, [r7, #32]
            break;
 8014346:	e007      	b.n	8014358 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8014348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801434a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801434c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014354:	2b00      	cmp	r3, #0
 8014356:	d1e9      	bne.n	801432c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8014358:	6a3b      	ldr	r3, [r7, #32]
 801435a:	2b00      	cmp	r3, #0
 801435c:	d022      	beq.n	80143a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801435e:	68fb      	ldr	r3, [r7, #12]
 8014360:	685b      	ldr	r3, [r3, #4]
 8014362:	2b00      	cmp	r3, #0
 8014364:	d106      	bne.n	8014374 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8014366:	4b15      	ldr	r3, [pc, #84]	; (80143bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014368:	f240 12df 	movw	r2, #479	; 0x1df
 801436c:	4917      	ldr	r1, [pc, #92]	; (80143cc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801436e:	4815      	ldr	r0, [pc, #84]	; (80143c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014370:	f000 fd98 	bl	8014ea4 <iprintf>
          LWIP_ASSERT("sanity check",
 8014374:	68fb      	ldr	r3, [r7, #12]
 8014376:	685b      	ldr	r3, [r3, #4]
 8014378:	685b      	ldr	r3, [r3, #4]
 801437a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801437c:	429a      	cmp	r2, r3
 801437e:	d106      	bne.n	801438e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8014380:	4b0e      	ldr	r3, [pc, #56]	; (80143bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014382:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8014386:	4911      	ldr	r1, [pc, #68]	; (80143cc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014388:	480e      	ldr	r0, [pc, #56]	; (80143c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801438a:	f000 fd8b 	bl	8014ea4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801438e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	2b00      	cmp	r3, #0
 8014394:	d006      	beq.n	80143a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8014396:	4b09      	ldr	r3, [pc, #36]	; (80143bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014398:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801439c:	490c      	ldr	r1, [pc, #48]	; (80143d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801439e:	4809      	ldr	r0, [pc, #36]	; (80143c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80143a0:	f000 fd80 	bl	8014ea4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80143a4:	6a3b      	ldr	r3, [r7, #32]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	bf14      	ite	ne
 80143aa:	2301      	movne	r3, #1
 80143ac:	2300      	moveq	r3, #0
 80143ae:	b2db      	uxtb	r3, r3
 80143b0:	e000      	b.n	80143b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80143b2:	2300      	movs	r3, #0
}
 80143b4:	4618      	mov	r0, r3
 80143b6:	3730      	adds	r7, #48	; 0x30
 80143b8:	46bd      	mov	sp, r7
 80143ba:	bd80      	pop	{r7, pc}
 80143bc:	08019258 	.word	0x08019258
 80143c0:	0801933c 	.word	0x0801933c
 80143c4:	080192a0 	.word	0x080192a0
 80143c8:	0801935c 	.word	0x0801935c
 80143cc:	08019394 	.word	0x08019394
 80143d0:	080193a4 	.word	0x080193a4

080143d4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80143d4:	b580      	push	{r7, lr}
 80143d6:	b08e      	sub	sp, #56	; 0x38
 80143d8:	af00      	add	r7, sp, #0
 80143da:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	685b      	ldr	r3, [r3, #4]
 80143e0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80143e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143e4:	781b      	ldrb	r3, [r3, #0]
 80143e6:	f003 030f 	and.w	r3, r3, #15
 80143ea:	b2db      	uxtb	r3, r3
 80143ec:	009b      	lsls	r3, r3, #2
 80143ee:	b2db      	uxtb	r3, r3
 80143f0:	2b14      	cmp	r3, #20
 80143f2:	f040 8167 	bne.w	80146c4 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80143f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143f8:	88db      	ldrh	r3, [r3, #6]
 80143fa:	b29b      	uxth	r3, r3
 80143fc:	4618      	mov	r0, r3
 80143fe:	f7f5 fd6d 	bl	8009edc <lwip_htons>
 8014402:	4603      	mov	r3, r0
 8014404:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014408:	b29b      	uxth	r3, r3
 801440a:	00db      	lsls	r3, r3, #3
 801440c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801440e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014410:	885b      	ldrh	r3, [r3, #2]
 8014412:	b29b      	uxth	r3, r3
 8014414:	4618      	mov	r0, r3
 8014416:	f7f5 fd61 	bl	8009edc <lwip_htons>
 801441a:	4603      	mov	r3, r0
 801441c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801441e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014420:	781b      	ldrb	r3, [r3, #0]
 8014422:	f003 030f 	and.w	r3, r3, #15
 8014426:	b2db      	uxtb	r3, r3
 8014428:	009b      	lsls	r3, r3, #2
 801442a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801442e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014432:	b29b      	uxth	r3, r3
 8014434:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014436:	429a      	cmp	r2, r3
 8014438:	f0c0 8146 	bcc.w	80146c8 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801443c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014440:	b29b      	uxth	r3, r3
 8014442:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014444:	1ad3      	subs	r3, r2, r3
 8014446:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8014448:	6878      	ldr	r0, [r7, #4]
 801444a:	f7f7 f9a9 	bl	800b7a0 <pbuf_clen>
 801444e:	4603      	mov	r3, r0
 8014450:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8014452:	4b9f      	ldr	r3, [pc, #636]	; (80146d0 <ip4_reass+0x2fc>)
 8014454:	881b      	ldrh	r3, [r3, #0]
 8014456:	461a      	mov	r2, r3
 8014458:	8c3b      	ldrh	r3, [r7, #32]
 801445a:	4413      	add	r3, r2
 801445c:	2b0a      	cmp	r3, #10
 801445e:	dd10      	ble.n	8014482 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014460:	8c3b      	ldrh	r3, [r7, #32]
 8014462:	4619      	mov	r1, r3
 8014464:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014466:	f7ff fd81 	bl	8013f6c <ip_reass_remove_oldest_datagram>
 801446a:	4603      	mov	r3, r0
 801446c:	2b00      	cmp	r3, #0
 801446e:	f000 812d 	beq.w	80146cc <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8014472:	4b97      	ldr	r3, [pc, #604]	; (80146d0 <ip4_reass+0x2fc>)
 8014474:	881b      	ldrh	r3, [r3, #0]
 8014476:	461a      	mov	r2, r3
 8014478:	8c3b      	ldrh	r3, [r7, #32]
 801447a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801447c:	2b0a      	cmp	r3, #10
 801447e:	f300 8125 	bgt.w	80146cc <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014482:	4b94      	ldr	r3, [pc, #592]	; (80146d4 <ip4_reass+0x300>)
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	633b      	str	r3, [r7, #48]	; 0x30
 8014488:	e015      	b.n	80144b6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801448a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801448c:	695a      	ldr	r2, [r3, #20]
 801448e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014490:	68db      	ldr	r3, [r3, #12]
 8014492:	429a      	cmp	r2, r3
 8014494:	d10c      	bne.n	80144b0 <ip4_reass+0xdc>
 8014496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014498:	699a      	ldr	r2, [r3, #24]
 801449a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801449c:	691b      	ldr	r3, [r3, #16]
 801449e:	429a      	cmp	r2, r3
 80144a0:	d106      	bne.n	80144b0 <ip4_reass+0xdc>
 80144a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144a4:	899a      	ldrh	r2, [r3, #12]
 80144a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144a8:	889b      	ldrh	r3, [r3, #4]
 80144aa:	b29b      	uxth	r3, r3
 80144ac:	429a      	cmp	r2, r3
 80144ae:	d006      	beq.n	80144be <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80144b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	633b      	str	r3, [r7, #48]	; 0x30
 80144b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d1e6      	bne.n	801448a <ip4_reass+0xb6>
 80144bc:	e000      	b.n	80144c0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80144be:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80144c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d109      	bne.n	80144da <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80144c6:	8c3b      	ldrh	r3, [r7, #32]
 80144c8:	4619      	mov	r1, r3
 80144ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80144cc:	f7ff fdb0 	bl	8014030 <ip_reass_enqueue_new_datagram>
 80144d0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80144d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d11c      	bne.n	8014512 <ip4_reass+0x13e>
      goto nullreturn;
 80144d8:	e109      	b.n	80146ee <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80144da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144dc:	88db      	ldrh	r3, [r3, #6]
 80144de:	b29b      	uxth	r3, r3
 80144e0:	4618      	mov	r0, r3
 80144e2:	f7f5 fcfb 	bl	8009edc <lwip_htons>
 80144e6:	4603      	mov	r3, r0
 80144e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d110      	bne.n	8014512 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80144f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144f2:	89db      	ldrh	r3, [r3, #14]
 80144f4:	4618      	mov	r0, r3
 80144f6:	f7f5 fcf1 	bl	8009edc <lwip_htons>
 80144fa:	4603      	mov	r3, r0
 80144fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014500:	2b00      	cmp	r3, #0
 8014502:	d006      	beq.n	8014512 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014506:	3308      	adds	r3, #8
 8014508:	2214      	movs	r2, #20
 801450a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801450c:	4618      	mov	r0, r3
 801450e:	f000 fcb3 	bl	8014e78 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8014512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014514:	88db      	ldrh	r3, [r3, #6]
 8014516:	b29b      	uxth	r3, r3
 8014518:	f003 0320 	and.w	r3, r3, #32
 801451c:	2b00      	cmp	r3, #0
 801451e:	bf0c      	ite	eq
 8014520:	2301      	moveq	r3, #1
 8014522:	2300      	movne	r3, #0
 8014524:	b2db      	uxtb	r3, r3
 8014526:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8014528:	69fb      	ldr	r3, [r7, #28]
 801452a:	2b00      	cmp	r3, #0
 801452c:	d00e      	beq.n	801454c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801452e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014530:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014532:	4413      	add	r3, r2
 8014534:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8014536:	8b7a      	ldrh	r2, [r7, #26]
 8014538:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801453a:	429a      	cmp	r2, r3
 801453c:	f0c0 80a0 	bcc.w	8014680 <ip4_reass+0x2ac>
 8014540:	8b7b      	ldrh	r3, [r7, #26]
 8014542:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8014546:	4293      	cmp	r3, r2
 8014548:	f200 809a 	bhi.w	8014680 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801454c:	69fa      	ldr	r2, [r7, #28]
 801454e:	6879      	ldr	r1, [r7, #4]
 8014550:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014552:	f7ff fdd5 	bl	8014100 <ip_reass_chain_frag_into_datagram_and_validate>
 8014556:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8014558:	697b      	ldr	r3, [r7, #20]
 801455a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801455e:	f000 8091 	beq.w	8014684 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8014562:	4b5b      	ldr	r3, [pc, #364]	; (80146d0 <ip4_reass+0x2fc>)
 8014564:	881a      	ldrh	r2, [r3, #0]
 8014566:	8c3b      	ldrh	r3, [r7, #32]
 8014568:	4413      	add	r3, r2
 801456a:	b29a      	uxth	r2, r3
 801456c:	4b58      	ldr	r3, [pc, #352]	; (80146d0 <ip4_reass+0x2fc>)
 801456e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8014570:	69fb      	ldr	r3, [r7, #28]
 8014572:	2b00      	cmp	r3, #0
 8014574:	d00d      	beq.n	8014592 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8014576:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014578:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801457a:	4413      	add	r3, r2
 801457c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801457e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014580:	8a7a      	ldrh	r2, [r7, #18]
 8014582:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8014584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014586:	7f9b      	ldrb	r3, [r3, #30]
 8014588:	f043 0301 	orr.w	r3, r3, #1
 801458c:	b2da      	uxtb	r2, r3
 801458e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014590:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8014592:	697b      	ldr	r3, [r7, #20]
 8014594:	2b01      	cmp	r3, #1
 8014596:	d171      	bne.n	801467c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8014598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801459a:	8b9b      	ldrh	r3, [r3, #28]
 801459c:	3314      	adds	r3, #20
 801459e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80145a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145a2:	685b      	ldr	r3, [r3, #4]
 80145a4:	685b      	ldr	r3, [r3, #4]
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80145aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145ac:	685b      	ldr	r3, [r3, #4]
 80145ae:	685b      	ldr	r3, [r3, #4]
 80145b0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80145b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145b4:	3308      	adds	r3, #8
 80145b6:	2214      	movs	r2, #20
 80145b8:	4619      	mov	r1, r3
 80145ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80145bc:	f000 fc5c 	bl	8014e78 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80145c0:	8a3b      	ldrh	r3, [r7, #16]
 80145c2:	4618      	mov	r0, r3
 80145c4:	f7f5 fc8a 	bl	8009edc <lwip_htons>
 80145c8:	4603      	mov	r3, r0
 80145ca:	461a      	mov	r2, r3
 80145cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145ce:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80145d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145d2:	2200      	movs	r2, #0
 80145d4:	719a      	strb	r2, [r3, #6]
 80145d6:	2200      	movs	r2, #0
 80145d8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80145da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145dc:	2200      	movs	r2, #0
 80145de:	729a      	strb	r2, [r3, #10]
 80145e0:	2200      	movs	r2, #0
 80145e2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80145e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145e6:	685b      	ldr	r3, [r3, #4]
 80145e8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80145ea:	e00d      	b.n	8014608 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80145ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145ee:	685b      	ldr	r3, [r3, #4]
 80145f0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80145f2:	2114      	movs	r1, #20
 80145f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80145f6:	f7f6 ffbf 	bl	800b578 <pbuf_remove_header>
      pbuf_cat(p, r);
 80145fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80145fc:	6878      	ldr	r0, [r7, #4]
 80145fe:	f7f7 f90f 	bl	800b820 <pbuf_cat>
      r = iprh->next_pbuf;
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8014608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801460a:	2b00      	cmp	r3, #0
 801460c:	d1ee      	bne.n	80145ec <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801460e:	4b31      	ldr	r3, [pc, #196]	; (80146d4 <ip4_reass+0x300>)
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014614:	429a      	cmp	r2, r3
 8014616:	d102      	bne.n	801461e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8014618:	2300      	movs	r3, #0
 801461a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801461c:	e010      	b.n	8014640 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801461e:	4b2d      	ldr	r3, [pc, #180]	; (80146d4 <ip4_reass+0x300>)
 8014620:	681b      	ldr	r3, [r3, #0]
 8014622:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014624:	e007      	b.n	8014636 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8014626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801462c:	429a      	cmp	r2, r3
 801462e:	d006      	beq.n	801463e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014638:	2b00      	cmp	r3, #0
 801463a:	d1f4      	bne.n	8014626 <ip4_reass+0x252>
 801463c:	e000      	b.n	8014640 <ip4_reass+0x26c>
          break;
 801463e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8014640:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014642:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014644:	f7ff fd2e 	bl	80140a4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8014648:	6878      	ldr	r0, [r7, #4]
 801464a:	f7f7 f8a9 	bl	800b7a0 <pbuf_clen>
 801464e:	4603      	mov	r3, r0
 8014650:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8014652:	4b1f      	ldr	r3, [pc, #124]	; (80146d0 <ip4_reass+0x2fc>)
 8014654:	881b      	ldrh	r3, [r3, #0]
 8014656:	8c3a      	ldrh	r2, [r7, #32]
 8014658:	429a      	cmp	r2, r3
 801465a:	d906      	bls.n	801466a <ip4_reass+0x296>
 801465c:	4b1e      	ldr	r3, [pc, #120]	; (80146d8 <ip4_reass+0x304>)
 801465e:	f240 229b 	movw	r2, #667	; 0x29b
 8014662:	491e      	ldr	r1, [pc, #120]	; (80146dc <ip4_reass+0x308>)
 8014664:	481e      	ldr	r0, [pc, #120]	; (80146e0 <ip4_reass+0x30c>)
 8014666:	f000 fc1d 	bl	8014ea4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801466a:	4b19      	ldr	r3, [pc, #100]	; (80146d0 <ip4_reass+0x2fc>)
 801466c:	881a      	ldrh	r2, [r3, #0]
 801466e:	8c3b      	ldrh	r3, [r7, #32]
 8014670:	1ad3      	subs	r3, r2, r3
 8014672:	b29a      	uxth	r2, r3
 8014674:	4b16      	ldr	r3, [pc, #88]	; (80146d0 <ip4_reass+0x2fc>)
 8014676:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	e03c      	b.n	80146f6 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801467c:	2300      	movs	r3, #0
 801467e:	e03a      	b.n	80146f6 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8014680:	bf00      	nop
 8014682:	e000      	b.n	8014686 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8014684:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8014686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014688:	2b00      	cmp	r3, #0
 801468a:	d106      	bne.n	801469a <ip4_reass+0x2c6>
 801468c:	4b12      	ldr	r3, [pc, #72]	; (80146d8 <ip4_reass+0x304>)
 801468e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8014692:	4914      	ldr	r1, [pc, #80]	; (80146e4 <ip4_reass+0x310>)
 8014694:	4812      	ldr	r0, [pc, #72]	; (80146e0 <ip4_reass+0x30c>)
 8014696:	f000 fc05 	bl	8014ea4 <iprintf>
  if (ipr->p == NULL) {
 801469a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801469c:	685b      	ldr	r3, [r3, #4]
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d124      	bne.n	80146ec <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80146a2:	4b0c      	ldr	r3, [pc, #48]	; (80146d4 <ip4_reass+0x300>)
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80146a8:	429a      	cmp	r2, r3
 80146aa:	d006      	beq.n	80146ba <ip4_reass+0x2e6>
 80146ac:	4b0a      	ldr	r3, [pc, #40]	; (80146d8 <ip4_reass+0x304>)
 80146ae:	f240 22ab 	movw	r2, #683	; 0x2ab
 80146b2:	490d      	ldr	r1, [pc, #52]	; (80146e8 <ip4_reass+0x314>)
 80146b4:	480a      	ldr	r0, [pc, #40]	; (80146e0 <ip4_reass+0x30c>)
 80146b6:	f000 fbf5 	bl	8014ea4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80146ba:	2100      	movs	r1, #0
 80146bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80146be:	f7ff fcf1 	bl	80140a4 <ip_reass_dequeue_datagram>
 80146c2:	e014      	b.n	80146ee <ip4_reass+0x31a>
    goto nullreturn;
 80146c4:	bf00      	nop
 80146c6:	e012      	b.n	80146ee <ip4_reass+0x31a>
    goto nullreturn;
 80146c8:	bf00      	nop
 80146ca:	e010      	b.n	80146ee <ip4_reass+0x31a>
      goto nullreturn;
 80146cc:	bf00      	nop
 80146ce:	e00e      	b.n	80146ee <ip4_reass+0x31a>
 80146d0:	200041d8 	.word	0x200041d8
 80146d4:	200041d4 	.word	0x200041d4
 80146d8:	08019258 	.word	0x08019258
 80146dc:	080193c8 	.word	0x080193c8
 80146e0:	080192a0 	.word	0x080192a0
 80146e4:	080193e4 	.word	0x080193e4
 80146e8:	080193f0 	.word	0x080193f0
  }

nullreturn:
 80146ec:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80146ee:	6878      	ldr	r0, [r7, #4]
 80146f0:	f7f6 ffc8 	bl	800b684 <pbuf_free>
  return NULL;
 80146f4:	2300      	movs	r3, #0
}
 80146f6:	4618      	mov	r0, r3
 80146f8:	3738      	adds	r7, #56	; 0x38
 80146fa:	46bd      	mov	sp, r7
 80146fc:	bd80      	pop	{r7, pc}
 80146fe:	bf00      	nop

08014700 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8014700:	b580      	push	{r7, lr}
 8014702:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8014704:	2005      	movs	r0, #5
 8014706:	f7f6 f8c7 	bl	800a898 <memp_malloc>
 801470a:	4603      	mov	r3, r0
}
 801470c:	4618      	mov	r0, r3
 801470e:	bd80      	pop	{r7, pc}

08014710 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8014710:	b580      	push	{r7, lr}
 8014712:	b082      	sub	sp, #8
 8014714:	af00      	add	r7, sp, #0
 8014716:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	2b00      	cmp	r3, #0
 801471c:	d106      	bne.n	801472c <ip_frag_free_pbuf_custom_ref+0x1c>
 801471e:	4b07      	ldr	r3, [pc, #28]	; (801473c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014720:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8014724:	4906      	ldr	r1, [pc, #24]	; (8014740 <ip_frag_free_pbuf_custom_ref+0x30>)
 8014726:	4807      	ldr	r0, [pc, #28]	; (8014744 <ip_frag_free_pbuf_custom_ref+0x34>)
 8014728:	f000 fbbc 	bl	8014ea4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801472c:	6879      	ldr	r1, [r7, #4]
 801472e:	2005      	movs	r0, #5
 8014730:	f7f6 f904 	bl	800a93c <memp_free>
}
 8014734:	bf00      	nop
 8014736:	3708      	adds	r7, #8
 8014738:	46bd      	mov	sp, r7
 801473a:	bd80      	pop	{r7, pc}
 801473c:	08019258 	.word	0x08019258
 8014740:	08019410 	.word	0x08019410
 8014744:	080192a0 	.word	0x080192a0

08014748 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014748:	b580      	push	{r7, lr}
 801474a:	b084      	sub	sp, #16
 801474c:	af00      	add	r7, sp, #0
 801474e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014754:	68fb      	ldr	r3, [r7, #12]
 8014756:	2b00      	cmp	r3, #0
 8014758:	d106      	bne.n	8014768 <ipfrag_free_pbuf_custom+0x20>
 801475a:	4b11      	ldr	r3, [pc, #68]	; (80147a0 <ipfrag_free_pbuf_custom+0x58>)
 801475c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8014760:	4910      	ldr	r1, [pc, #64]	; (80147a4 <ipfrag_free_pbuf_custom+0x5c>)
 8014762:	4811      	ldr	r0, [pc, #68]	; (80147a8 <ipfrag_free_pbuf_custom+0x60>)
 8014764:	f000 fb9e 	bl	8014ea4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014768:	68fa      	ldr	r2, [r7, #12]
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	429a      	cmp	r2, r3
 801476e:	d006      	beq.n	801477e <ipfrag_free_pbuf_custom+0x36>
 8014770:	4b0b      	ldr	r3, [pc, #44]	; (80147a0 <ipfrag_free_pbuf_custom+0x58>)
 8014772:	f240 22cf 	movw	r2, #719	; 0x2cf
 8014776:	490d      	ldr	r1, [pc, #52]	; (80147ac <ipfrag_free_pbuf_custom+0x64>)
 8014778:	480b      	ldr	r0, [pc, #44]	; (80147a8 <ipfrag_free_pbuf_custom+0x60>)
 801477a:	f000 fb93 	bl	8014ea4 <iprintf>
  if (pcr->original != NULL) {
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	695b      	ldr	r3, [r3, #20]
 8014782:	2b00      	cmp	r3, #0
 8014784:	d004      	beq.n	8014790 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	695b      	ldr	r3, [r3, #20]
 801478a:	4618      	mov	r0, r3
 801478c:	f7f6 ff7a 	bl	800b684 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8014790:	68f8      	ldr	r0, [r7, #12]
 8014792:	f7ff ffbd 	bl	8014710 <ip_frag_free_pbuf_custom_ref>
}
 8014796:	bf00      	nop
 8014798:	3710      	adds	r7, #16
 801479a:	46bd      	mov	sp, r7
 801479c:	bd80      	pop	{r7, pc}
 801479e:	bf00      	nop
 80147a0:	08019258 	.word	0x08019258
 80147a4:	0801941c 	.word	0x0801941c
 80147a8:	080192a0 	.word	0x080192a0
 80147ac:	08019428 	.word	0x08019428

080147b0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80147b0:	b580      	push	{r7, lr}
 80147b2:	b094      	sub	sp, #80	; 0x50
 80147b4:	af02      	add	r7, sp, #8
 80147b6:	60f8      	str	r0, [r7, #12]
 80147b8:	60b9      	str	r1, [r7, #8]
 80147ba:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80147bc:	2300      	movs	r3, #0
 80147be:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80147c2:	68bb      	ldr	r3, [r7, #8]
 80147c4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80147c6:	3b14      	subs	r3, #20
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	da00      	bge.n	80147ce <ip4_frag+0x1e>
 80147cc:	3307      	adds	r3, #7
 80147ce:	10db      	asrs	r3, r3, #3
 80147d0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80147d2:	2314      	movs	r3, #20
 80147d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	685b      	ldr	r3, [r3, #4]
 80147da:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80147dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147de:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80147e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147e2:	781b      	ldrb	r3, [r3, #0]
 80147e4:	f003 030f 	and.w	r3, r3, #15
 80147e8:	b2db      	uxtb	r3, r3
 80147ea:	009b      	lsls	r3, r3, #2
 80147ec:	b2db      	uxtb	r3, r3
 80147ee:	2b14      	cmp	r3, #20
 80147f0:	d002      	beq.n	80147f8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80147f2:	f06f 0305 	mvn.w	r3, #5
 80147f6:	e110      	b.n	8014a1a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	895b      	ldrh	r3, [r3, #10]
 80147fc:	2b13      	cmp	r3, #19
 80147fe:	d809      	bhi.n	8014814 <ip4_frag+0x64>
 8014800:	4b88      	ldr	r3, [pc, #544]	; (8014a24 <ip4_frag+0x274>)
 8014802:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8014806:	4988      	ldr	r1, [pc, #544]	; (8014a28 <ip4_frag+0x278>)
 8014808:	4888      	ldr	r0, [pc, #544]	; (8014a2c <ip4_frag+0x27c>)
 801480a:	f000 fb4b 	bl	8014ea4 <iprintf>
 801480e:	f06f 0305 	mvn.w	r3, #5
 8014812:	e102      	b.n	8014a1a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014816:	88db      	ldrh	r3, [r3, #6]
 8014818:	b29b      	uxth	r3, r3
 801481a:	4618      	mov	r0, r3
 801481c:	f7f5 fb5e 	bl	8009edc <lwip_htons>
 8014820:	4603      	mov	r3, r0
 8014822:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8014824:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014826:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801482a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801482e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014830:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014834:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8014836:	68fb      	ldr	r3, [r7, #12]
 8014838:	891b      	ldrh	r3, [r3, #8]
 801483a:	3b14      	subs	r3, #20
 801483c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8014840:	e0e1      	b.n	8014a06 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8014842:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014844:	00db      	lsls	r3, r3, #3
 8014846:	b29b      	uxth	r3, r3
 8014848:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801484c:	4293      	cmp	r3, r2
 801484e:	bf28      	it	cs
 8014850:	4613      	movcs	r3, r2
 8014852:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8014854:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014858:	2114      	movs	r1, #20
 801485a:	200e      	movs	r0, #14
 801485c:	f7f6 fc2e 	bl	800b0bc <pbuf_alloc>
 8014860:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8014862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014864:	2b00      	cmp	r3, #0
 8014866:	f000 80d5 	beq.w	8014a14 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801486c:	895b      	ldrh	r3, [r3, #10]
 801486e:	2b13      	cmp	r3, #19
 8014870:	d806      	bhi.n	8014880 <ip4_frag+0xd0>
 8014872:	4b6c      	ldr	r3, [pc, #432]	; (8014a24 <ip4_frag+0x274>)
 8014874:	f44f 7249 	mov.w	r2, #804	; 0x324
 8014878:	496d      	ldr	r1, [pc, #436]	; (8014a30 <ip4_frag+0x280>)
 801487a:	486c      	ldr	r0, [pc, #432]	; (8014a2c <ip4_frag+0x27c>)
 801487c:	f000 fb12 	bl	8014ea4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014882:	685b      	ldr	r3, [r3, #4]
 8014884:	2214      	movs	r2, #20
 8014886:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014888:	4618      	mov	r0, r3
 801488a:	f000 faf5 	bl	8014e78 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014890:	685b      	ldr	r3, [r3, #4]
 8014892:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8014894:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014896:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801489a:	e064      	b.n	8014966 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	895a      	ldrh	r2, [r3, #10]
 80148a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80148a2:	1ad3      	subs	r3, r2, r3
 80148a4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	895b      	ldrh	r3, [r3, #10]
 80148aa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80148ac:	429a      	cmp	r2, r3
 80148ae:	d906      	bls.n	80148be <ip4_frag+0x10e>
 80148b0:	4b5c      	ldr	r3, [pc, #368]	; (8014a24 <ip4_frag+0x274>)
 80148b2:	f240 322d 	movw	r2, #813	; 0x32d
 80148b6:	495f      	ldr	r1, [pc, #380]	; (8014a34 <ip4_frag+0x284>)
 80148b8:	485c      	ldr	r0, [pc, #368]	; (8014a2c <ip4_frag+0x27c>)
 80148ba:	f000 faf3 	bl	8014ea4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80148be:	8bfa      	ldrh	r2, [r7, #30]
 80148c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80148c4:	4293      	cmp	r3, r2
 80148c6:	bf28      	it	cs
 80148c8:	4613      	movcs	r3, r2
 80148ca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80148ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d105      	bne.n	80148e2 <ip4_frag+0x132>
        poff = 0;
 80148d6:	2300      	movs	r3, #0
 80148d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	681b      	ldr	r3, [r3, #0]
 80148de:	60fb      	str	r3, [r7, #12]
        continue;
 80148e0:	e041      	b.n	8014966 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80148e2:	f7ff ff0d 	bl	8014700 <ip_frag_alloc_pbuf_custom_ref>
 80148e6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80148e8:	69bb      	ldr	r3, [r7, #24]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d103      	bne.n	80148f6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80148ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80148f0:	f7f6 fec8 	bl	800b684 <pbuf_free>
        goto memerr;
 80148f4:	e08f      	b.n	8014a16 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80148f6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80148fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80148fe:	4413      	add	r3, r2
 8014900:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8014904:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8014908:	9201      	str	r2, [sp, #4]
 801490a:	9300      	str	r3, [sp, #0]
 801490c:	4603      	mov	r3, r0
 801490e:	2241      	movs	r2, #65	; 0x41
 8014910:	2000      	movs	r0, #0
 8014912:	f7f6 fcfd 	bl	800b310 <pbuf_alloced_custom>
 8014916:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8014918:	697b      	ldr	r3, [r7, #20]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d106      	bne.n	801492c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801491e:	69b8      	ldr	r0, [r7, #24]
 8014920:	f7ff fef6 	bl	8014710 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8014924:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014926:	f7f6 fead 	bl	800b684 <pbuf_free>
        goto memerr;
 801492a:	e074      	b.n	8014a16 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801492c:	68f8      	ldr	r0, [r7, #12]
 801492e:	f7f6 ff4f 	bl	800b7d0 <pbuf_ref>
      pcr->original = p;
 8014932:	69bb      	ldr	r3, [r7, #24]
 8014934:	68fa      	ldr	r2, [r7, #12]
 8014936:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014938:	69bb      	ldr	r3, [r7, #24]
 801493a:	4a3f      	ldr	r2, [pc, #252]	; (8014a38 <ip4_frag+0x288>)
 801493c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801493e:	6979      	ldr	r1, [r7, #20]
 8014940:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014942:	f7f6 ff6d 	bl	800b820 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8014946:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801494a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801494e:	1ad3      	subs	r3, r2, r3
 8014950:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8014954:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014958:	2b00      	cmp	r3, #0
 801495a:	d004      	beq.n	8014966 <ip4_frag+0x1b6>
        poff = 0;
 801495c:	2300      	movs	r3, #0
 801495e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8014966:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801496a:	2b00      	cmp	r3, #0
 801496c:	d196      	bne.n	801489c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801496e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014970:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014974:	4413      	add	r3, r2
 8014976:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014978:	68bb      	ldr	r3, [r7, #8]
 801497a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801497c:	f1a3 0213 	sub.w	r2, r3, #19
 8014980:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014984:	429a      	cmp	r2, r3
 8014986:	bfcc      	ite	gt
 8014988:	2301      	movgt	r3, #1
 801498a:	2300      	movle	r3, #0
 801498c:	b2db      	uxtb	r3, r3
 801498e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8014990:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014994:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014998:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801499a:	6a3b      	ldr	r3, [r7, #32]
 801499c:	2b00      	cmp	r3, #0
 801499e:	d002      	beq.n	80149a6 <ip4_frag+0x1f6>
 80149a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d003      	beq.n	80149ae <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80149a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80149a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80149ac:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80149ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80149b0:	4618      	mov	r0, r3
 80149b2:	f7f5 fa93 	bl	8009edc <lwip_htons>
 80149b6:	4603      	mov	r3, r0
 80149b8:	461a      	mov	r2, r3
 80149ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149bc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80149be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80149c0:	3314      	adds	r3, #20
 80149c2:	b29b      	uxth	r3, r3
 80149c4:	4618      	mov	r0, r3
 80149c6:	f7f5 fa89 	bl	8009edc <lwip_htons>
 80149ca:	4603      	mov	r3, r0
 80149cc:	461a      	mov	r2, r3
 80149ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149d0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80149d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149d4:	2200      	movs	r2, #0
 80149d6:	729a      	strb	r2, [r3, #10]
 80149d8:	2200      	movs	r2, #0
 80149da:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80149dc:	68bb      	ldr	r3, [r7, #8]
 80149de:	695b      	ldr	r3, [r3, #20]
 80149e0:	687a      	ldr	r2, [r7, #4]
 80149e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80149e4:	68b8      	ldr	r0, [r7, #8]
 80149e6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80149e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80149ea:	f7f6 fe4b 	bl	800b684 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80149ee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80149f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80149f4:	1ad3      	subs	r3, r2, r3
 80149f6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80149fa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80149fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014a00:	4413      	add	r3, r2
 8014a02:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8014a06:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	f47f af19 	bne.w	8014842 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8014a10:	2300      	movs	r3, #0
 8014a12:	e002      	b.n	8014a1a <ip4_frag+0x26a>
      goto memerr;
 8014a14:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8014a16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014a1a:	4618      	mov	r0, r3
 8014a1c:	3748      	adds	r7, #72	; 0x48
 8014a1e:	46bd      	mov	sp, r7
 8014a20:	bd80      	pop	{r7, pc}
 8014a22:	bf00      	nop
 8014a24:	08019258 	.word	0x08019258
 8014a28:	08019434 	.word	0x08019434
 8014a2c:	080192a0 	.word	0x080192a0
 8014a30:	08019450 	.word	0x08019450
 8014a34:	08019470 	.word	0x08019470
 8014a38:	08014749 	.word	0x08014749

08014a3c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014a3c:	b580      	push	{r7, lr}
 8014a3e:	b086      	sub	sp, #24
 8014a40:	af00      	add	r7, sp, #0
 8014a42:	6078      	str	r0, [r7, #4]
 8014a44:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8014a46:	230e      	movs	r3, #14
 8014a48:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	895b      	ldrh	r3, [r3, #10]
 8014a4e:	2b0e      	cmp	r3, #14
 8014a50:	d96e      	bls.n	8014b30 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	7bdb      	ldrb	r3, [r3, #15]
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d106      	bne.n	8014a68 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8014a5a:	683b      	ldr	r3, [r7, #0]
 8014a5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014a60:	3301      	adds	r3, #1
 8014a62:	b2da      	uxtb	r2, r3
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	685b      	ldr	r3, [r3, #4]
 8014a6c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8014a6e:	693b      	ldr	r3, [r7, #16]
 8014a70:	7b1a      	ldrb	r2, [r3, #12]
 8014a72:	7b5b      	ldrb	r3, [r3, #13]
 8014a74:	021b      	lsls	r3, r3, #8
 8014a76:	4313      	orrs	r3, r2
 8014a78:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014a7a:	693b      	ldr	r3, [r7, #16]
 8014a7c:	781b      	ldrb	r3, [r3, #0]
 8014a7e:	f003 0301 	and.w	r3, r3, #1
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d023      	beq.n	8014ace <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014a86:	693b      	ldr	r3, [r7, #16]
 8014a88:	781b      	ldrb	r3, [r3, #0]
 8014a8a:	2b01      	cmp	r3, #1
 8014a8c:	d10f      	bne.n	8014aae <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014a8e:	693b      	ldr	r3, [r7, #16]
 8014a90:	785b      	ldrb	r3, [r3, #1]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d11b      	bne.n	8014ace <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014a96:	693b      	ldr	r3, [r7, #16]
 8014a98:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014a9a:	2b5e      	cmp	r3, #94	; 0x5e
 8014a9c:	d117      	bne.n	8014ace <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	7b5b      	ldrb	r3, [r3, #13]
 8014aa2:	f043 0310 	orr.w	r3, r3, #16
 8014aa6:	b2da      	uxtb	r2, r3
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	735a      	strb	r2, [r3, #13]
 8014aac:	e00f      	b.n	8014ace <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8014aae:	693b      	ldr	r3, [r7, #16]
 8014ab0:	2206      	movs	r2, #6
 8014ab2:	4928      	ldr	r1, [pc, #160]	; (8014b54 <ethernet_input+0x118>)
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	f000 f9d1 	bl	8014e5c <memcmp>
 8014aba:	4603      	mov	r3, r0
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d106      	bne.n	8014ace <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	7b5b      	ldrb	r3, [r3, #13]
 8014ac4:	f043 0308 	orr.w	r3, r3, #8
 8014ac8:	b2da      	uxtb	r2, r3
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014ace:	89fb      	ldrh	r3, [r7, #14]
 8014ad0:	2b08      	cmp	r3, #8
 8014ad2:	d003      	beq.n	8014adc <ethernet_input+0xa0>
 8014ad4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8014ad8:	d014      	beq.n	8014b04 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014ada:	e032      	b.n	8014b42 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014adc:	683b      	ldr	r3, [r7, #0]
 8014ade:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014ae2:	f003 0308 	and.w	r3, r3, #8
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d024      	beq.n	8014b34 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014aea:	8afb      	ldrh	r3, [r7, #22]
 8014aec:	4619      	mov	r1, r3
 8014aee:	6878      	ldr	r0, [r7, #4]
 8014af0:	f7f6 fd42 	bl	800b578 <pbuf_remove_header>
 8014af4:	4603      	mov	r3, r0
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d11e      	bne.n	8014b38 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8014afa:	6839      	ldr	r1, [r7, #0]
 8014afc:	6878      	ldr	r0, [r7, #4]
 8014afe:	f7fe fdfd 	bl	80136fc <ip4_input>
      break;
 8014b02:	e013      	b.n	8014b2c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014b04:	683b      	ldr	r3, [r7, #0]
 8014b06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014b0a:	f003 0308 	and.w	r3, r3, #8
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d014      	beq.n	8014b3c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014b12:	8afb      	ldrh	r3, [r7, #22]
 8014b14:	4619      	mov	r1, r3
 8014b16:	6878      	ldr	r0, [r7, #4]
 8014b18:	f7f6 fd2e 	bl	800b578 <pbuf_remove_header>
 8014b1c:	4603      	mov	r3, r0
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d10e      	bne.n	8014b40 <ethernet_input+0x104>
        etharp_input(p, netif);
 8014b22:	6839      	ldr	r1, [r7, #0]
 8014b24:	6878      	ldr	r0, [r7, #4]
 8014b26:	f7fd ff9d 	bl	8012a64 <etharp_input>
      break;
 8014b2a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8014b2c:	2300      	movs	r3, #0
 8014b2e:	e00c      	b.n	8014b4a <ethernet_input+0x10e>
    goto free_and_return;
 8014b30:	bf00      	nop
 8014b32:	e006      	b.n	8014b42 <ethernet_input+0x106>
        goto free_and_return;
 8014b34:	bf00      	nop
 8014b36:	e004      	b.n	8014b42 <ethernet_input+0x106>
        goto free_and_return;
 8014b38:	bf00      	nop
 8014b3a:	e002      	b.n	8014b42 <ethernet_input+0x106>
        goto free_and_return;
 8014b3c:	bf00      	nop
 8014b3e:	e000      	b.n	8014b42 <ethernet_input+0x106>
        goto free_and_return;
 8014b40:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8014b42:	6878      	ldr	r0, [r7, #4]
 8014b44:	f7f6 fd9e 	bl	800b684 <pbuf_free>
  return ERR_OK;
 8014b48:	2300      	movs	r3, #0
}
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	3718      	adds	r7, #24
 8014b4e:	46bd      	mov	sp, r7
 8014b50:	bd80      	pop	{r7, pc}
 8014b52:	bf00      	nop
 8014b54:	08019650 	.word	0x08019650

08014b58 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014b58:	b580      	push	{r7, lr}
 8014b5a:	b086      	sub	sp, #24
 8014b5c:	af00      	add	r7, sp, #0
 8014b5e:	60f8      	str	r0, [r7, #12]
 8014b60:	60b9      	str	r1, [r7, #8]
 8014b62:	607a      	str	r2, [r7, #4]
 8014b64:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014b66:	8c3b      	ldrh	r3, [r7, #32]
 8014b68:	4618      	mov	r0, r3
 8014b6a:	f7f5 f9b7 	bl	8009edc <lwip_htons>
 8014b6e:	4603      	mov	r3, r0
 8014b70:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014b72:	210e      	movs	r1, #14
 8014b74:	68b8      	ldr	r0, [r7, #8]
 8014b76:	f7f6 fcef 	bl	800b558 <pbuf_add_header>
 8014b7a:	4603      	mov	r3, r0
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d125      	bne.n	8014bcc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014b80:	68bb      	ldr	r3, [r7, #8]
 8014b82:	685b      	ldr	r3, [r3, #4]
 8014b84:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014b86:	693b      	ldr	r3, [r7, #16]
 8014b88:	8afa      	ldrh	r2, [r7, #22]
 8014b8a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014b8c:	693b      	ldr	r3, [r7, #16]
 8014b8e:	2206      	movs	r2, #6
 8014b90:	6839      	ldr	r1, [r7, #0]
 8014b92:	4618      	mov	r0, r3
 8014b94:	f000 f970 	bl	8014e78 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014b98:	693b      	ldr	r3, [r7, #16]
 8014b9a:	3306      	adds	r3, #6
 8014b9c:	2206      	movs	r2, #6
 8014b9e:	6879      	ldr	r1, [r7, #4]
 8014ba0:	4618      	mov	r0, r3
 8014ba2:	f000 f969 	bl	8014e78 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014bac:	2b06      	cmp	r3, #6
 8014bae:	d006      	beq.n	8014bbe <ethernet_output+0x66>
 8014bb0:	4b0a      	ldr	r3, [pc, #40]	; (8014bdc <ethernet_output+0x84>)
 8014bb2:	f44f 7299 	mov.w	r2, #306	; 0x132
 8014bb6:	490a      	ldr	r1, [pc, #40]	; (8014be0 <ethernet_output+0x88>)
 8014bb8:	480a      	ldr	r0, [pc, #40]	; (8014be4 <ethernet_output+0x8c>)
 8014bba:	f000 f973 	bl	8014ea4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	699b      	ldr	r3, [r3, #24]
 8014bc2:	68b9      	ldr	r1, [r7, #8]
 8014bc4:	68f8      	ldr	r0, [r7, #12]
 8014bc6:	4798      	blx	r3
 8014bc8:	4603      	mov	r3, r0
 8014bca:	e002      	b.n	8014bd2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014bcc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8014bce:	f06f 0301 	mvn.w	r3, #1
}
 8014bd2:	4618      	mov	r0, r3
 8014bd4:	3718      	adds	r7, #24
 8014bd6:	46bd      	mov	sp, r7
 8014bd8:	bd80      	pop	{r7, pc}
 8014bda:	bf00      	nop
 8014bdc:	08019480 	.word	0x08019480
 8014be0:	080194b8 	.word	0x080194b8
 8014be4:	080194ec 	.word	0x080194ec

08014be8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8014be8:	b580      	push	{r7, lr}
 8014bea:	b086      	sub	sp, #24
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	6078      	str	r0, [r7, #4]
 8014bf0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8014bf2:	683b      	ldr	r3, [r7, #0]
 8014bf4:	60bb      	str	r3, [r7, #8]
 8014bf6:	2304      	movs	r3, #4
 8014bf8:	60fb      	str	r3, [r7, #12]
 8014bfa:	2300      	movs	r3, #0
 8014bfc:	613b      	str	r3, [r7, #16]
 8014bfe:	2300      	movs	r3, #0
 8014c00:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8014c02:	f107 0308 	add.w	r3, r7, #8
 8014c06:	2100      	movs	r1, #0
 8014c08:	4618      	mov	r0, r3
 8014c0a:	f7f0 fe2f 	bl	800586c <osMessageCreate>
 8014c0e:	4602      	mov	r2, r0
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d102      	bne.n	8014c22 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8014c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8014c20:	e000      	b.n	8014c24 <sys_mbox_new+0x3c>

  return ERR_OK;
 8014c22:	2300      	movs	r3, #0
}
 8014c24:	4618      	mov	r0, r3
 8014c26:	3718      	adds	r7, #24
 8014c28:	46bd      	mov	sp, r7
 8014c2a:	bd80      	pop	{r7, pc}

08014c2c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8014c2c:	b580      	push	{r7, lr}
 8014c2e:	b084      	sub	sp, #16
 8014c30:	af00      	add	r7, sp, #0
 8014c32:	6078      	str	r0, [r7, #4]
 8014c34:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	6839      	ldr	r1, [r7, #0]
 8014c3c:	2200      	movs	r2, #0
 8014c3e:	4618      	mov	r0, r3
 8014c40:	f7f0 fe3c 	bl	80058bc <osMessagePut>
 8014c44:	4603      	mov	r3, r0
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d102      	bne.n	8014c50 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8014c4a:	2300      	movs	r3, #0
 8014c4c:	73fb      	strb	r3, [r7, #15]
 8014c4e:	e001      	b.n	8014c54 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8014c50:	23ff      	movs	r3, #255	; 0xff
 8014c52:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8014c54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014c58:	4618      	mov	r0, r3
 8014c5a:	3710      	adds	r7, #16
 8014c5c:	46bd      	mov	sp, r7
 8014c5e:	bd80      	pop	{r7, pc}

08014c60 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8014c60:	b580      	push	{r7, lr}
 8014c62:	b08c      	sub	sp, #48	; 0x30
 8014c64:	af00      	add	r7, sp, #0
 8014c66:	61f8      	str	r0, [r7, #28]
 8014c68:	61b9      	str	r1, [r7, #24]
 8014c6a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8014c6c:	f7f0 fc3b 	bl	80054e6 <osKernelSysTick>
 8014c70:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8014c72:	697b      	ldr	r3, [r7, #20]
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d017      	beq.n	8014ca8 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8014c78:	69fb      	ldr	r3, [r7, #28]
 8014c7a:	6819      	ldr	r1, [r3, #0]
 8014c7c:	f107 0320 	add.w	r3, r7, #32
 8014c80:	697a      	ldr	r2, [r7, #20]
 8014c82:	4618      	mov	r0, r3
 8014c84:	f7f0 fe5a 	bl	800593c <osMessageGet>

    if(event.status == osEventMessage)
 8014c88:	6a3b      	ldr	r3, [r7, #32]
 8014c8a:	2b10      	cmp	r3, #16
 8014c8c:	d109      	bne.n	8014ca2 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8014c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c90:	461a      	mov	r2, r3
 8014c92:	69bb      	ldr	r3, [r7, #24]
 8014c94:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8014c96:	f7f0 fc26 	bl	80054e6 <osKernelSysTick>
 8014c9a:	4602      	mov	r2, r0
 8014c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c9e:	1ad3      	subs	r3, r2, r3
 8014ca0:	e019      	b.n	8014cd6 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8014ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8014ca6:	e016      	b.n	8014cd6 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8014ca8:	69fb      	ldr	r3, [r7, #28]
 8014caa:	6819      	ldr	r1, [r3, #0]
 8014cac:	463b      	mov	r3, r7
 8014cae:	f04f 32ff 	mov.w	r2, #4294967295
 8014cb2:	4618      	mov	r0, r3
 8014cb4:	f7f0 fe42 	bl	800593c <osMessageGet>
 8014cb8:	f107 0320 	add.w	r3, r7, #32
 8014cbc:	463a      	mov	r2, r7
 8014cbe:	ca07      	ldmia	r2, {r0, r1, r2}
 8014cc0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8014cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cc6:	461a      	mov	r2, r3
 8014cc8:	69bb      	ldr	r3, [r7, #24]
 8014cca:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8014ccc:	f7f0 fc0b 	bl	80054e6 <osKernelSysTick>
 8014cd0:	4602      	mov	r2, r0
 8014cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cd4:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8014cd6:	4618      	mov	r0, r3
 8014cd8:	3730      	adds	r7, #48	; 0x30
 8014cda:	46bd      	mov	sp, r7
 8014cdc:	bd80      	pop	{r7, pc}

08014cde <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8014cde:	b480      	push	{r7}
 8014ce0:	b083      	sub	sp, #12
 8014ce2:	af00      	add	r7, sp, #0
 8014ce4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d101      	bne.n	8014cf2 <sys_mbox_valid+0x14>
    return 0;
 8014cee:	2300      	movs	r3, #0
 8014cf0:	e000      	b.n	8014cf4 <sys_mbox_valid+0x16>
  else
    return 1;
 8014cf2:	2301      	movs	r3, #1
}
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	370c      	adds	r7, #12
 8014cf8:	46bd      	mov	sp, r7
 8014cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cfe:	4770      	bx	lr

08014d00 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8014d00:	b580      	push	{r7, lr}
 8014d02:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8014d04:	4803      	ldr	r0, [pc, #12]	; (8014d14 <sys_init+0x14>)
 8014d06:	f7f0 fc5e 	bl	80055c6 <osMutexCreate>
 8014d0a:	4603      	mov	r3, r0
 8014d0c:	4a02      	ldr	r2, [pc, #8]	; (8014d18 <sys_init+0x18>)
 8014d0e:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8014d10:	bf00      	nop
 8014d12:	bd80      	pop	{r7, pc}
 8014d14:	08019660 	.word	0x08019660
 8014d18:	2000ab38 	.word	0x2000ab38

08014d1c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8014d1c:	b580      	push	{r7, lr}
 8014d1e:	b084      	sub	sp, #16
 8014d20:	af00      	add	r7, sp, #0
 8014d22:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8014d24:	2300      	movs	r3, #0
 8014d26:	60bb      	str	r3, [r7, #8]
 8014d28:	2300      	movs	r3, #0
 8014d2a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8014d2c:	f107 0308 	add.w	r3, r7, #8
 8014d30:	4618      	mov	r0, r3
 8014d32:	f7f0 fc48 	bl	80055c6 <osMutexCreate>
 8014d36:	4602      	mov	r2, r0
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	681b      	ldr	r3, [r3, #0]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d102      	bne.n	8014d4a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8014d44:	f04f 33ff 	mov.w	r3, #4294967295
 8014d48:	e000      	b.n	8014d4c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8014d4a:	2300      	movs	r3, #0
}
 8014d4c:	4618      	mov	r0, r3
 8014d4e:	3710      	adds	r7, #16
 8014d50:	46bd      	mov	sp, r7
 8014d52:	bd80      	pop	{r7, pc}

08014d54 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8014d54:	b580      	push	{r7, lr}
 8014d56:	b082      	sub	sp, #8
 8014d58:	af00      	add	r7, sp, #0
 8014d5a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	f04f 31ff 	mov.w	r1, #4294967295
 8014d64:	4618      	mov	r0, r3
 8014d66:	f7f0 fc47 	bl	80055f8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8014d6a:	bf00      	nop
 8014d6c:	3708      	adds	r7, #8
 8014d6e:	46bd      	mov	sp, r7
 8014d70:	bd80      	pop	{r7, pc}

08014d72 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8014d72:	b580      	push	{r7, lr}
 8014d74:	b082      	sub	sp, #8
 8014d76:	af00      	add	r7, sp, #0
 8014d78:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	4618      	mov	r0, r3
 8014d80:	f7f0 fc88 	bl	8005694 <osMutexRelease>
}
 8014d84:	bf00      	nop
 8014d86:	3708      	adds	r7, #8
 8014d88:	46bd      	mov	sp, r7
 8014d8a:	bd80      	pop	{r7, pc}

08014d8c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8014d8c:	b580      	push	{r7, lr}
 8014d8e:	b08c      	sub	sp, #48	; 0x30
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	60f8      	str	r0, [r7, #12]
 8014d94:	60b9      	str	r1, [r7, #8]
 8014d96:	607a      	str	r2, [r7, #4]
 8014d98:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8014d9a:	f107 0314 	add.w	r3, r7, #20
 8014d9e:	2200      	movs	r2, #0
 8014da0:	601a      	str	r2, [r3, #0]
 8014da2:	605a      	str	r2, [r3, #4]
 8014da4:	609a      	str	r2, [r3, #8]
 8014da6:	60da      	str	r2, [r3, #12]
 8014da8:	611a      	str	r2, [r3, #16]
 8014daa:	615a      	str	r2, [r3, #20]
 8014dac:	619a      	str	r2, [r3, #24]
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	617b      	str	r3, [r7, #20]
 8014db2:	68bb      	ldr	r3, [r7, #8]
 8014db4:	61bb      	str	r3, [r7, #24]
 8014db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014db8:	b21b      	sxth	r3, r3
 8014dba:	83bb      	strh	r3, [r7, #28]
 8014dbc:	683b      	ldr	r3, [r7, #0]
 8014dbe:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8014dc0:	f107 0314 	add.w	r3, r7, #20
 8014dc4:	6879      	ldr	r1, [r7, #4]
 8014dc6:	4618      	mov	r0, r3
 8014dc8:	f7f0 fb9d 	bl	8005506 <osThreadCreate>
 8014dcc:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8014dce:	4618      	mov	r0, r3
 8014dd0:	3730      	adds	r7, #48	; 0x30
 8014dd2:	46bd      	mov	sp, r7
 8014dd4:	bd80      	pop	{r7, pc}
	...

08014dd8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8014dd8:	b580      	push	{r7, lr}
 8014dda:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8014ddc:	4b04      	ldr	r3, [pc, #16]	; (8014df0 <sys_arch_protect+0x18>)
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	f04f 31ff 	mov.w	r1, #4294967295
 8014de4:	4618      	mov	r0, r3
 8014de6:	f7f0 fc07 	bl	80055f8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8014dea:	2301      	movs	r3, #1
}
 8014dec:	4618      	mov	r0, r3
 8014dee:	bd80      	pop	{r7, pc}
 8014df0:	2000ab38 	.word	0x2000ab38

08014df4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8014df4:	b580      	push	{r7, lr}
 8014df6:	b082      	sub	sp, #8
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8014dfc:	4b04      	ldr	r3, [pc, #16]	; (8014e10 <sys_arch_unprotect+0x1c>)
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	4618      	mov	r0, r3
 8014e02:	f7f0 fc47 	bl	8005694 <osMutexRelease>
}
 8014e06:	bf00      	nop
 8014e08:	3708      	adds	r7, #8
 8014e0a:	46bd      	mov	sp, r7
 8014e0c:	bd80      	pop	{r7, pc}
 8014e0e:	bf00      	nop
 8014e10:	2000ab38 	.word	0x2000ab38

08014e14 <__libc_init_array>:
 8014e14:	b570      	push	{r4, r5, r6, lr}
 8014e16:	4d0d      	ldr	r5, [pc, #52]	; (8014e4c <__libc_init_array+0x38>)
 8014e18:	4c0d      	ldr	r4, [pc, #52]	; (8014e50 <__libc_init_array+0x3c>)
 8014e1a:	1b64      	subs	r4, r4, r5
 8014e1c:	10a4      	asrs	r4, r4, #2
 8014e1e:	2600      	movs	r6, #0
 8014e20:	42a6      	cmp	r6, r4
 8014e22:	d109      	bne.n	8014e38 <__libc_init_array+0x24>
 8014e24:	4d0b      	ldr	r5, [pc, #44]	; (8014e54 <__libc_init_array+0x40>)
 8014e26:	4c0c      	ldr	r4, [pc, #48]	; (8014e58 <__libc_init_array+0x44>)
 8014e28:	f001 f8cc 	bl	8015fc4 <_init>
 8014e2c:	1b64      	subs	r4, r4, r5
 8014e2e:	10a4      	asrs	r4, r4, #2
 8014e30:	2600      	movs	r6, #0
 8014e32:	42a6      	cmp	r6, r4
 8014e34:	d105      	bne.n	8014e42 <__libc_init_array+0x2e>
 8014e36:	bd70      	pop	{r4, r5, r6, pc}
 8014e38:	f855 3b04 	ldr.w	r3, [r5], #4
 8014e3c:	4798      	blx	r3
 8014e3e:	3601      	adds	r6, #1
 8014e40:	e7ee      	b.n	8014e20 <__libc_init_array+0xc>
 8014e42:	f855 3b04 	ldr.w	r3, [r5], #4
 8014e46:	4798      	blx	r3
 8014e48:	3601      	adds	r6, #1
 8014e4a:	e7f2      	b.n	8014e32 <__libc_init_array+0x1e>
 8014e4c:	080198c0 	.word	0x080198c0
 8014e50:	080198c0 	.word	0x080198c0
 8014e54:	080198c0 	.word	0x080198c0
 8014e58:	080198c4 	.word	0x080198c4

08014e5c <memcmp>:
 8014e5c:	b530      	push	{r4, r5, lr}
 8014e5e:	3901      	subs	r1, #1
 8014e60:	2400      	movs	r4, #0
 8014e62:	42a2      	cmp	r2, r4
 8014e64:	d101      	bne.n	8014e6a <memcmp+0xe>
 8014e66:	2000      	movs	r0, #0
 8014e68:	e005      	b.n	8014e76 <memcmp+0x1a>
 8014e6a:	5d03      	ldrb	r3, [r0, r4]
 8014e6c:	3401      	adds	r4, #1
 8014e6e:	5d0d      	ldrb	r5, [r1, r4]
 8014e70:	42ab      	cmp	r3, r5
 8014e72:	d0f6      	beq.n	8014e62 <memcmp+0x6>
 8014e74:	1b58      	subs	r0, r3, r5
 8014e76:	bd30      	pop	{r4, r5, pc}

08014e78 <memcpy>:
 8014e78:	440a      	add	r2, r1
 8014e7a:	4291      	cmp	r1, r2
 8014e7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8014e80:	d100      	bne.n	8014e84 <memcpy+0xc>
 8014e82:	4770      	bx	lr
 8014e84:	b510      	push	{r4, lr}
 8014e86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014e8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014e8e:	4291      	cmp	r1, r2
 8014e90:	d1f9      	bne.n	8014e86 <memcpy+0xe>
 8014e92:	bd10      	pop	{r4, pc}

08014e94 <memset>:
 8014e94:	4402      	add	r2, r0
 8014e96:	4603      	mov	r3, r0
 8014e98:	4293      	cmp	r3, r2
 8014e9a:	d100      	bne.n	8014e9e <memset+0xa>
 8014e9c:	4770      	bx	lr
 8014e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8014ea2:	e7f9      	b.n	8014e98 <memset+0x4>

08014ea4 <iprintf>:
 8014ea4:	b40f      	push	{r0, r1, r2, r3}
 8014ea6:	4b0a      	ldr	r3, [pc, #40]	; (8014ed0 <iprintf+0x2c>)
 8014ea8:	b513      	push	{r0, r1, r4, lr}
 8014eaa:	681c      	ldr	r4, [r3, #0]
 8014eac:	b124      	cbz	r4, 8014eb8 <iprintf+0x14>
 8014eae:	69a3      	ldr	r3, [r4, #24]
 8014eb0:	b913      	cbnz	r3, 8014eb8 <iprintf+0x14>
 8014eb2:	4620      	mov	r0, r4
 8014eb4:	f000 fabc 	bl	8015430 <__sinit>
 8014eb8:	ab05      	add	r3, sp, #20
 8014eba:	9a04      	ldr	r2, [sp, #16]
 8014ebc:	68a1      	ldr	r1, [r4, #8]
 8014ebe:	9301      	str	r3, [sp, #4]
 8014ec0:	4620      	mov	r0, r4
 8014ec2:	f000 fca7 	bl	8015814 <_vfiprintf_r>
 8014ec6:	b002      	add	sp, #8
 8014ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ecc:	b004      	add	sp, #16
 8014ece:	4770      	bx	lr
 8014ed0:	2000001c 	.word	0x2000001c

08014ed4 <_puts_r>:
 8014ed4:	b570      	push	{r4, r5, r6, lr}
 8014ed6:	460e      	mov	r6, r1
 8014ed8:	4605      	mov	r5, r0
 8014eda:	b118      	cbz	r0, 8014ee4 <_puts_r+0x10>
 8014edc:	6983      	ldr	r3, [r0, #24]
 8014ede:	b90b      	cbnz	r3, 8014ee4 <_puts_r+0x10>
 8014ee0:	f000 faa6 	bl	8015430 <__sinit>
 8014ee4:	69ab      	ldr	r3, [r5, #24]
 8014ee6:	68ac      	ldr	r4, [r5, #8]
 8014ee8:	b913      	cbnz	r3, 8014ef0 <_puts_r+0x1c>
 8014eea:	4628      	mov	r0, r5
 8014eec:	f000 faa0 	bl	8015430 <__sinit>
 8014ef0:	4b2c      	ldr	r3, [pc, #176]	; (8014fa4 <_puts_r+0xd0>)
 8014ef2:	429c      	cmp	r4, r3
 8014ef4:	d120      	bne.n	8014f38 <_puts_r+0x64>
 8014ef6:	686c      	ldr	r4, [r5, #4]
 8014ef8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014efa:	07db      	lsls	r3, r3, #31
 8014efc:	d405      	bmi.n	8014f0a <_puts_r+0x36>
 8014efe:	89a3      	ldrh	r3, [r4, #12]
 8014f00:	0598      	lsls	r0, r3, #22
 8014f02:	d402      	bmi.n	8014f0a <_puts_r+0x36>
 8014f04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014f06:	f000 fb43 	bl	8015590 <__retarget_lock_acquire_recursive>
 8014f0a:	89a3      	ldrh	r3, [r4, #12]
 8014f0c:	0719      	lsls	r1, r3, #28
 8014f0e:	d51d      	bpl.n	8014f4c <_puts_r+0x78>
 8014f10:	6923      	ldr	r3, [r4, #16]
 8014f12:	b1db      	cbz	r3, 8014f4c <_puts_r+0x78>
 8014f14:	3e01      	subs	r6, #1
 8014f16:	68a3      	ldr	r3, [r4, #8]
 8014f18:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014f1c:	3b01      	subs	r3, #1
 8014f1e:	60a3      	str	r3, [r4, #8]
 8014f20:	bb39      	cbnz	r1, 8014f72 <_puts_r+0x9e>
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	da38      	bge.n	8014f98 <_puts_r+0xc4>
 8014f26:	4622      	mov	r2, r4
 8014f28:	210a      	movs	r1, #10
 8014f2a:	4628      	mov	r0, r5
 8014f2c:	f000 f888 	bl	8015040 <__swbuf_r>
 8014f30:	3001      	adds	r0, #1
 8014f32:	d011      	beq.n	8014f58 <_puts_r+0x84>
 8014f34:	250a      	movs	r5, #10
 8014f36:	e011      	b.n	8014f5c <_puts_r+0x88>
 8014f38:	4b1b      	ldr	r3, [pc, #108]	; (8014fa8 <_puts_r+0xd4>)
 8014f3a:	429c      	cmp	r4, r3
 8014f3c:	d101      	bne.n	8014f42 <_puts_r+0x6e>
 8014f3e:	68ac      	ldr	r4, [r5, #8]
 8014f40:	e7da      	b.n	8014ef8 <_puts_r+0x24>
 8014f42:	4b1a      	ldr	r3, [pc, #104]	; (8014fac <_puts_r+0xd8>)
 8014f44:	429c      	cmp	r4, r3
 8014f46:	bf08      	it	eq
 8014f48:	68ec      	ldreq	r4, [r5, #12]
 8014f4a:	e7d5      	b.n	8014ef8 <_puts_r+0x24>
 8014f4c:	4621      	mov	r1, r4
 8014f4e:	4628      	mov	r0, r5
 8014f50:	f000 f8c8 	bl	80150e4 <__swsetup_r>
 8014f54:	2800      	cmp	r0, #0
 8014f56:	d0dd      	beq.n	8014f14 <_puts_r+0x40>
 8014f58:	f04f 35ff 	mov.w	r5, #4294967295
 8014f5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014f5e:	07da      	lsls	r2, r3, #31
 8014f60:	d405      	bmi.n	8014f6e <_puts_r+0x9a>
 8014f62:	89a3      	ldrh	r3, [r4, #12]
 8014f64:	059b      	lsls	r3, r3, #22
 8014f66:	d402      	bmi.n	8014f6e <_puts_r+0x9a>
 8014f68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014f6a:	f000 fb12 	bl	8015592 <__retarget_lock_release_recursive>
 8014f6e:	4628      	mov	r0, r5
 8014f70:	bd70      	pop	{r4, r5, r6, pc}
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	da04      	bge.n	8014f80 <_puts_r+0xac>
 8014f76:	69a2      	ldr	r2, [r4, #24]
 8014f78:	429a      	cmp	r2, r3
 8014f7a:	dc06      	bgt.n	8014f8a <_puts_r+0xb6>
 8014f7c:	290a      	cmp	r1, #10
 8014f7e:	d004      	beq.n	8014f8a <_puts_r+0xb6>
 8014f80:	6823      	ldr	r3, [r4, #0]
 8014f82:	1c5a      	adds	r2, r3, #1
 8014f84:	6022      	str	r2, [r4, #0]
 8014f86:	7019      	strb	r1, [r3, #0]
 8014f88:	e7c5      	b.n	8014f16 <_puts_r+0x42>
 8014f8a:	4622      	mov	r2, r4
 8014f8c:	4628      	mov	r0, r5
 8014f8e:	f000 f857 	bl	8015040 <__swbuf_r>
 8014f92:	3001      	adds	r0, #1
 8014f94:	d1bf      	bne.n	8014f16 <_puts_r+0x42>
 8014f96:	e7df      	b.n	8014f58 <_puts_r+0x84>
 8014f98:	6823      	ldr	r3, [r4, #0]
 8014f9a:	250a      	movs	r5, #10
 8014f9c:	1c5a      	adds	r2, r3, #1
 8014f9e:	6022      	str	r2, [r4, #0]
 8014fa0:	701d      	strb	r5, [r3, #0]
 8014fa2:	e7db      	b.n	8014f5c <_puts_r+0x88>
 8014fa4:	08019844 	.word	0x08019844
 8014fa8:	08019864 	.word	0x08019864
 8014fac:	08019824 	.word	0x08019824

08014fb0 <puts>:
 8014fb0:	4b02      	ldr	r3, [pc, #8]	; (8014fbc <puts+0xc>)
 8014fb2:	4601      	mov	r1, r0
 8014fb4:	6818      	ldr	r0, [r3, #0]
 8014fb6:	f7ff bf8d 	b.w	8014ed4 <_puts_r>
 8014fba:	bf00      	nop
 8014fbc:	2000001c 	.word	0x2000001c

08014fc0 <rand>:
 8014fc0:	4b17      	ldr	r3, [pc, #92]	; (8015020 <rand+0x60>)
 8014fc2:	b510      	push	{r4, lr}
 8014fc4:	681c      	ldr	r4, [r3, #0]
 8014fc6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014fc8:	b9b3      	cbnz	r3, 8014ff8 <rand+0x38>
 8014fca:	2018      	movs	r0, #24
 8014fcc:	f000 fb46 	bl	801565c <malloc>
 8014fd0:	63a0      	str	r0, [r4, #56]	; 0x38
 8014fd2:	b928      	cbnz	r0, 8014fe0 <rand+0x20>
 8014fd4:	4602      	mov	r2, r0
 8014fd6:	4b13      	ldr	r3, [pc, #76]	; (8015024 <rand+0x64>)
 8014fd8:	4813      	ldr	r0, [pc, #76]	; (8015028 <rand+0x68>)
 8014fda:	214e      	movs	r1, #78	; 0x4e
 8014fdc:	f000 f8f0 	bl	80151c0 <__assert_func>
 8014fe0:	4a12      	ldr	r2, [pc, #72]	; (801502c <rand+0x6c>)
 8014fe2:	4b13      	ldr	r3, [pc, #76]	; (8015030 <rand+0x70>)
 8014fe4:	e9c0 2300 	strd	r2, r3, [r0]
 8014fe8:	4b12      	ldr	r3, [pc, #72]	; (8015034 <rand+0x74>)
 8014fea:	6083      	str	r3, [r0, #8]
 8014fec:	230b      	movs	r3, #11
 8014fee:	8183      	strh	r3, [r0, #12]
 8014ff0:	2201      	movs	r2, #1
 8014ff2:	2300      	movs	r3, #0
 8014ff4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8014ff8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014ffa:	480f      	ldr	r0, [pc, #60]	; (8015038 <rand+0x78>)
 8014ffc:	690a      	ldr	r2, [r1, #16]
 8014ffe:	694b      	ldr	r3, [r1, #20]
 8015000:	4c0e      	ldr	r4, [pc, #56]	; (801503c <rand+0x7c>)
 8015002:	4350      	muls	r0, r2
 8015004:	fb04 0003 	mla	r0, r4, r3, r0
 8015008:	fba2 3404 	umull	r3, r4, r2, r4
 801500c:	1c5a      	adds	r2, r3, #1
 801500e:	4404      	add	r4, r0
 8015010:	f144 0000 	adc.w	r0, r4, #0
 8015014:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8015018:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801501c:	bd10      	pop	{r4, pc}
 801501e:	bf00      	nop
 8015020:	2000001c 	.word	0x2000001c
 8015024:	08019770 	.word	0x08019770
 8015028:	08019787 	.word	0x08019787
 801502c:	abcd330e 	.word	0xabcd330e
 8015030:	e66d1234 	.word	0xe66d1234
 8015034:	0005deec 	.word	0x0005deec
 8015038:	5851f42d 	.word	0x5851f42d
 801503c:	4c957f2d 	.word	0x4c957f2d

08015040 <__swbuf_r>:
 8015040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015042:	460e      	mov	r6, r1
 8015044:	4614      	mov	r4, r2
 8015046:	4605      	mov	r5, r0
 8015048:	b118      	cbz	r0, 8015052 <__swbuf_r+0x12>
 801504a:	6983      	ldr	r3, [r0, #24]
 801504c:	b90b      	cbnz	r3, 8015052 <__swbuf_r+0x12>
 801504e:	f000 f9ef 	bl	8015430 <__sinit>
 8015052:	4b21      	ldr	r3, [pc, #132]	; (80150d8 <__swbuf_r+0x98>)
 8015054:	429c      	cmp	r4, r3
 8015056:	d12b      	bne.n	80150b0 <__swbuf_r+0x70>
 8015058:	686c      	ldr	r4, [r5, #4]
 801505a:	69a3      	ldr	r3, [r4, #24]
 801505c:	60a3      	str	r3, [r4, #8]
 801505e:	89a3      	ldrh	r3, [r4, #12]
 8015060:	071a      	lsls	r2, r3, #28
 8015062:	d52f      	bpl.n	80150c4 <__swbuf_r+0x84>
 8015064:	6923      	ldr	r3, [r4, #16]
 8015066:	b36b      	cbz	r3, 80150c4 <__swbuf_r+0x84>
 8015068:	6923      	ldr	r3, [r4, #16]
 801506a:	6820      	ldr	r0, [r4, #0]
 801506c:	1ac0      	subs	r0, r0, r3
 801506e:	6963      	ldr	r3, [r4, #20]
 8015070:	b2f6      	uxtb	r6, r6
 8015072:	4283      	cmp	r3, r0
 8015074:	4637      	mov	r7, r6
 8015076:	dc04      	bgt.n	8015082 <__swbuf_r+0x42>
 8015078:	4621      	mov	r1, r4
 801507a:	4628      	mov	r0, r5
 801507c:	f000 f944 	bl	8015308 <_fflush_r>
 8015080:	bb30      	cbnz	r0, 80150d0 <__swbuf_r+0x90>
 8015082:	68a3      	ldr	r3, [r4, #8]
 8015084:	3b01      	subs	r3, #1
 8015086:	60a3      	str	r3, [r4, #8]
 8015088:	6823      	ldr	r3, [r4, #0]
 801508a:	1c5a      	adds	r2, r3, #1
 801508c:	6022      	str	r2, [r4, #0]
 801508e:	701e      	strb	r6, [r3, #0]
 8015090:	6963      	ldr	r3, [r4, #20]
 8015092:	3001      	adds	r0, #1
 8015094:	4283      	cmp	r3, r0
 8015096:	d004      	beq.n	80150a2 <__swbuf_r+0x62>
 8015098:	89a3      	ldrh	r3, [r4, #12]
 801509a:	07db      	lsls	r3, r3, #31
 801509c:	d506      	bpl.n	80150ac <__swbuf_r+0x6c>
 801509e:	2e0a      	cmp	r6, #10
 80150a0:	d104      	bne.n	80150ac <__swbuf_r+0x6c>
 80150a2:	4621      	mov	r1, r4
 80150a4:	4628      	mov	r0, r5
 80150a6:	f000 f92f 	bl	8015308 <_fflush_r>
 80150aa:	b988      	cbnz	r0, 80150d0 <__swbuf_r+0x90>
 80150ac:	4638      	mov	r0, r7
 80150ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80150b0:	4b0a      	ldr	r3, [pc, #40]	; (80150dc <__swbuf_r+0x9c>)
 80150b2:	429c      	cmp	r4, r3
 80150b4:	d101      	bne.n	80150ba <__swbuf_r+0x7a>
 80150b6:	68ac      	ldr	r4, [r5, #8]
 80150b8:	e7cf      	b.n	801505a <__swbuf_r+0x1a>
 80150ba:	4b09      	ldr	r3, [pc, #36]	; (80150e0 <__swbuf_r+0xa0>)
 80150bc:	429c      	cmp	r4, r3
 80150be:	bf08      	it	eq
 80150c0:	68ec      	ldreq	r4, [r5, #12]
 80150c2:	e7ca      	b.n	801505a <__swbuf_r+0x1a>
 80150c4:	4621      	mov	r1, r4
 80150c6:	4628      	mov	r0, r5
 80150c8:	f000 f80c 	bl	80150e4 <__swsetup_r>
 80150cc:	2800      	cmp	r0, #0
 80150ce:	d0cb      	beq.n	8015068 <__swbuf_r+0x28>
 80150d0:	f04f 37ff 	mov.w	r7, #4294967295
 80150d4:	e7ea      	b.n	80150ac <__swbuf_r+0x6c>
 80150d6:	bf00      	nop
 80150d8:	08019844 	.word	0x08019844
 80150dc:	08019864 	.word	0x08019864
 80150e0:	08019824 	.word	0x08019824

080150e4 <__swsetup_r>:
 80150e4:	4b32      	ldr	r3, [pc, #200]	; (80151b0 <__swsetup_r+0xcc>)
 80150e6:	b570      	push	{r4, r5, r6, lr}
 80150e8:	681d      	ldr	r5, [r3, #0]
 80150ea:	4606      	mov	r6, r0
 80150ec:	460c      	mov	r4, r1
 80150ee:	b125      	cbz	r5, 80150fa <__swsetup_r+0x16>
 80150f0:	69ab      	ldr	r3, [r5, #24]
 80150f2:	b913      	cbnz	r3, 80150fa <__swsetup_r+0x16>
 80150f4:	4628      	mov	r0, r5
 80150f6:	f000 f99b 	bl	8015430 <__sinit>
 80150fa:	4b2e      	ldr	r3, [pc, #184]	; (80151b4 <__swsetup_r+0xd0>)
 80150fc:	429c      	cmp	r4, r3
 80150fe:	d10f      	bne.n	8015120 <__swsetup_r+0x3c>
 8015100:	686c      	ldr	r4, [r5, #4]
 8015102:	89a3      	ldrh	r3, [r4, #12]
 8015104:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015108:	0719      	lsls	r1, r3, #28
 801510a:	d42c      	bmi.n	8015166 <__swsetup_r+0x82>
 801510c:	06dd      	lsls	r5, r3, #27
 801510e:	d411      	bmi.n	8015134 <__swsetup_r+0x50>
 8015110:	2309      	movs	r3, #9
 8015112:	6033      	str	r3, [r6, #0]
 8015114:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015118:	81a3      	strh	r3, [r4, #12]
 801511a:	f04f 30ff 	mov.w	r0, #4294967295
 801511e:	e03e      	b.n	801519e <__swsetup_r+0xba>
 8015120:	4b25      	ldr	r3, [pc, #148]	; (80151b8 <__swsetup_r+0xd4>)
 8015122:	429c      	cmp	r4, r3
 8015124:	d101      	bne.n	801512a <__swsetup_r+0x46>
 8015126:	68ac      	ldr	r4, [r5, #8]
 8015128:	e7eb      	b.n	8015102 <__swsetup_r+0x1e>
 801512a:	4b24      	ldr	r3, [pc, #144]	; (80151bc <__swsetup_r+0xd8>)
 801512c:	429c      	cmp	r4, r3
 801512e:	bf08      	it	eq
 8015130:	68ec      	ldreq	r4, [r5, #12]
 8015132:	e7e6      	b.n	8015102 <__swsetup_r+0x1e>
 8015134:	0758      	lsls	r0, r3, #29
 8015136:	d512      	bpl.n	801515e <__swsetup_r+0x7a>
 8015138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801513a:	b141      	cbz	r1, 801514e <__swsetup_r+0x6a>
 801513c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015140:	4299      	cmp	r1, r3
 8015142:	d002      	beq.n	801514a <__swsetup_r+0x66>
 8015144:	4630      	mov	r0, r6
 8015146:	f000 fa91 	bl	801566c <_free_r>
 801514a:	2300      	movs	r3, #0
 801514c:	6363      	str	r3, [r4, #52]	; 0x34
 801514e:	89a3      	ldrh	r3, [r4, #12]
 8015150:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015154:	81a3      	strh	r3, [r4, #12]
 8015156:	2300      	movs	r3, #0
 8015158:	6063      	str	r3, [r4, #4]
 801515a:	6923      	ldr	r3, [r4, #16]
 801515c:	6023      	str	r3, [r4, #0]
 801515e:	89a3      	ldrh	r3, [r4, #12]
 8015160:	f043 0308 	orr.w	r3, r3, #8
 8015164:	81a3      	strh	r3, [r4, #12]
 8015166:	6923      	ldr	r3, [r4, #16]
 8015168:	b94b      	cbnz	r3, 801517e <__swsetup_r+0x9a>
 801516a:	89a3      	ldrh	r3, [r4, #12]
 801516c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015174:	d003      	beq.n	801517e <__swsetup_r+0x9a>
 8015176:	4621      	mov	r1, r4
 8015178:	4630      	mov	r0, r6
 801517a:	f000 fa2f 	bl	80155dc <__smakebuf_r>
 801517e:	89a0      	ldrh	r0, [r4, #12]
 8015180:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015184:	f010 0301 	ands.w	r3, r0, #1
 8015188:	d00a      	beq.n	80151a0 <__swsetup_r+0xbc>
 801518a:	2300      	movs	r3, #0
 801518c:	60a3      	str	r3, [r4, #8]
 801518e:	6963      	ldr	r3, [r4, #20]
 8015190:	425b      	negs	r3, r3
 8015192:	61a3      	str	r3, [r4, #24]
 8015194:	6923      	ldr	r3, [r4, #16]
 8015196:	b943      	cbnz	r3, 80151aa <__swsetup_r+0xc6>
 8015198:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801519c:	d1ba      	bne.n	8015114 <__swsetup_r+0x30>
 801519e:	bd70      	pop	{r4, r5, r6, pc}
 80151a0:	0781      	lsls	r1, r0, #30
 80151a2:	bf58      	it	pl
 80151a4:	6963      	ldrpl	r3, [r4, #20]
 80151a6:	60a3      	str	r3, [r4, #8]
 80151a8:	e7f4      	b.n	8015194 <__swsetup_r+0xb0>
 80151aa:	2000      	movs	r0, #0
 80151ac:	e7f7      	b.n	801519e <__swsetup_r+0xba>
 80151ae:	bf00      	nop
 80151b0:	2000001c 	.word	0x2000001c
 80151b4:	08019844 	.word	0x08019844
 80151b8:	08019864 	.word	0x08019864
 80151bc:	08019824 	.word	0x08019824

080151c0 <__assert_func>:
 80151c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80151c2:	4614      	mov	r4, r2
 80151c4:	461a      	mov	r2, r3
 80151c6:	4b09      	ldr	r3, [pc, #36]	; (80151ec <__assert_func+0x2c>)
 80151c8:	681b      	ldr	r3, [r3, #0]
 80151ca:	4605      	mov	r5, r0
 80151cc:	68d8      	ldr	r0, [r3, #12]
 80151ce:	b14c      	cbz	r4, 80151e4 <__assert_func+0x24>
 80151d0:	4b07      	ldr	r3, [pc, #28]	; (80151f0 <__assert_func+0x30>)
 80151d2:	9100      	str	r1, [sp, #0]
 80151d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80151d8:	4906      	ldr	r1, [pc, #24]	; (80151f4 <__assert_func+0x34>)
 80151da:	462b      	mov	r3, r5
 80151dc:	f000 f9a6 	bl	801552c <fiprintf>
 80151e0:	f000 fe42 	bl	8015e68 <abort>
 80151e4:	4b04      	ldr	r3, [pc, #16]	; (80151f8 <__assert_func+0x38>)
 80151e6:	461c      	mov	r4, r3
 80151e8:	e7f3      	b.n	80151d2 <__assert_func+0x12>
 80151ea:	bf00      	nop
 80151ec:	2000001c 	.word	0x2000001c
 80151f0:	080197e6 	.word	0x080197e6
 80151f4:	080197f3 	.word	0x080197f3
 80151f8:	08019821 	.word	0x08019821

080151fc <__sflush_r>:
 80151fc:	898a      	ldrh	r2, [r1, #12]
 80151fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015202:	4605      	mov	r5, r0
 8015204:	0710      	lsls	r0, r2, #28
 8015206:	460c      	mov	r4, r1
 8015208:	d458      	bmi.n	80152bc <__sflush_r+0xc0>
 801520a:	684b      	ldr	r3, [r1, #4]
 801520c:	2b00      	cmp	r3, #0
 801520e:	dc05      	bgt.n	801521c <__sflush_r+0x20>
 8015210:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015212:	2b00      	cmp	r3, #0
 8015214:	dc02      	bgt.n	801521c <__sflush_r+0x20>
 8015216:	2000      	movs	r0, #0
 8015218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801521c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801521e:	2e00      	cmp	r6, #0
 8015220:	d0f9      	beq.n	8015216 <__sflush_r+0x1a>
 8015222:	2300      	movs	r3, #0
 8015224:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015228:	682f      	ldr	r7, [r5, #0]
 801522a:	602b      	str	r3, [r5, #0]
 801522c:	d032      	beq.n	8015294 <__sflush_r+0x98>
 801522e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015230:	89a3      	ldrh	r3, [r4, #12]
 8015232:	075a      	lsls	r2, r3, #29
 8015234:	d505      	bpl.n	8015242 <__sflush_r+0x46>
 8015236:	6863      	ldr	r3, [r4, #4]
 8015238:	1ac0      	subs	r0, r0, r3
 801523a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801523c:	b10b      	cbz	r3, 8015242 <__sflush_r+0x46>
 801523e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015240:	1ac0      	subs	r0, r0, r3
 8015242:	2300      	movs	r3, #0
 8015244:	4602      	mov	r2, r0
 8015246:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015248:	6a21      	ldr	r1, [r4, #32]
 801524a:	4628      	mov	r0, r5
 801524c:	47b0      	blx	r6
 801524e:	1c43      	adds	r3, r0, #1
 8015250:	89a3      	ldrh	r3, [r4, #12]
 8015252:	d106      	bne.n	8015262 <__sflush_r+0x66>
 8015254:	6829      	ldr	r1, [r5, #0]
 8015256:	291d      	cmp	r1, #29
 8015258:	d82c      	bhi.n	80152b4 <__sflush_r+0xb8>
 801525a:	4a2a      	ldr	r2, [pc, #168]	; (8015304 <__sflush_r+0x108>)
 801525c:	40ca      	lsrs	r2, r1
 801525e:	07d6      	lsls	r6, r2, #31
 8015260:	d528      	bpl.n	80152b4 <__sflush_r+0xb8>
 8015262:	2200      	movs	r2, #0
 8015264:	6062      	str	r2, [r4, #4]
 8015266:	04d9      	lsls	r1, r3, #19
 8015268:	6922      	ldr	r2, [r4, #16]
 801526a:	6022      	str	r2, [r4, #0]
 801526c:	d504      	bpl.n	8015278 <__sflush_r+0x7c>
 801526e:	1c42      	adds	r2, r0, #1
 8015270:	d101      	bne.n	8015276 <__sflush_r+0x7a>
 8015272:	682b      	ldr	r3, [r5, #0]
 8015274:	b903      	cbnz	r3, 8015278 <__sflush_r+0x7c>
 8015276:	6560      	str	r0, [r4, #84]	; 0x54
 8015278:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801527a:	602f      	str	r7, [r5, #0]
 801527c:	2900      	cmp	r1, #0
 801527e:	d0ca      	beq.n	8015216 <__sflush_r+0x1a>
 8015280:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015284:	4299      	cmp	r1, r3
 8015286:	d002      	beq.n	801528e <__sflush_r+0x92>
 8015288:	4628      	mov	r0, r5
 801528a:	f000 f9ef 	bl	801566c <_free_r>
 801528e:	2000      	movs	r0, #0
 8015290:	6360      	str	r0, [r4, #52]	; 0x34
 8015292:	e7c1      	b.n	8015218 <__sflush_r+0x1c>
 8015294:	6a21      	ldr	r1, [r4, #32]
 8015296:	2301      	movs	r3, #1
 8015298:	4628      	mov	r0, r5
 801529a:	47b0      	blx	r6
 801529c:	1c41      	adds	r1, r0, #1
 801529e:	d1c7      	bne.n	8015230 <__sflush_r+0x34>
 80152a0:	682b      	ldr	r3, [r5, #0]
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d0c4      	beq.n	8015230 <__sflush_r+0x34>
 80152a6:	2b1d      	cmp	r3, #29
 80152a8:	d001      	beq.n	80152ae <__sflush_r+0xb2>
 80152aa:	2b16      	cmp	r3, #22
 80152ac:	d101      	bne.n	80152b2 <__sflush_r+0xb6>
 80152ae:	602f      	str	r7, [r5, #0]
 80152b0:	e7b1      	b.n	8015216 <__sflush_r+0x1a>
 80152b2:	89a3      	ldrh	r3, [r4, #12]
 80152b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80152b8:	81a3      	strh	r3, [r4, #12]
 80152ba:	e7ad      	b.n	8015218 <__sflush_r+0x1c>
 80152bc:	690f      	ldr	r7, [r1, #16]
 80152be:	2f00      	cmp	r7, #0
 80152c0:	d0a9      	beq.n	8015216 <__sflush_r+0x1a>
 80152c2:	0793      	lsls	r3, r2, #30
 80152c4:	680e      	ldr	r6, [r1, #0]
 80152c6:	bf08      	it	eq
 80152c8:	694b      	ldreq	r3, [r1, #20]
 80152ca:	600f      	str	r7, [r1, #0]
 80152cc:	bf18      	it	ne
 80152ce:	2300      	movne	r3, #0
 80152d0:	eba6 0807 	sub.w	r8, r6, r7
 80152d4:	608b      	str	r3, [r1, #8]
 80152d6:	f1b8 0f00 	cmp.w	r8, #0
 80152da:	dd9c      	ble.n	8015216 <__sflush_r+0x1a>
 80152dc:	6a21      	ldr	r1, [r4, #32]
 80152de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80152e0:	4643      	mov	r3, r8
 80152e2:	463a      	mov	r2, r7
 80152e4:	4628      	mov	r0, r5
 80152e6:	47b0      	blx	r6
 80152e8:	2800      	cmp	r0, #0
 80152ea:	dc06      	bgt.n	80152fa <__sflush_r+0xfe>
 80152ec:	89a3      	ldrh	r3, [r4, #12]
 80152ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80152f2:	81a3      	strh	r3, [r4, #12]
 80152f4:	f04f 30ff 	mov.w	r0, #4294967295
 80152f8:	e78e      	b.n	8015218 <__sflush_r+0x1c>
 80152fa:	4407      	add	r7, r0
 80152fc:	eba8 0800 	sub.w	r8, r8, r0
 8015300:	e7e9      	b.n	80152d6 <__sflush_r+0xda>
 8015302:	bf00      	nop
 8015304:	20400001 	.word	0x20400001

08015308 <_fflush_r>:
 8015308:	b538      	push	{r3, r4, r5, lr}
 801530a:	690b      	ldr	r3, [r1, #16]
 801530c:	4605      	mov	r5, r0
 801530e:	460c      	mov	r4, r1
 8015310:	b913      	cbnz	r3, 8015318 <_fflush_r+0x10>
 8015312:	2500      	movs	r5, #0
 8015314:	4628      	mov	r0, r5
 8015316:	bd38      	pop	{r3, r4, r5, pc}
 8015318:	b118      	cbz	r0, 8015322 <_fflush_r+0x1a>
 801531a:	6983      	ldr	r3, [r0, #24]
 801531c:	b90b      	cbnz	r3, 8015322 <_fflush_r+0x1a>
 801531e:	f000 f887 	bl	8015430 <__sinit>
 8015322:	4b14      	ldr	r3, [pc, #80]	; (8015374 <_fflush_r+0x6c>)
 8015324:	429c      	cmp	r4, r3
 8015326:	d11b      	bne.n	8015360 <_fflush_r+0x58>
 8015328:	686c      	ldr	r4, [r5, #4]
 801532a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801532e:	2b00      	cmp	r3, #0
 8015330:	d0ef      	beq.n	8015312 <_fflush_r+0xa>
 8015332:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015334:	07d0      	lsls	r0, r2, #31
 8015336:	d404      	bmi.n	8015342 <_fflush_r+0x3a>
 8015338:	0599      	lsls	r1, r3, #22
 801533a:	d402      	bmi.n	8015342 <_fflush_r+0x3a>
 801533c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801533e:	f000 f927 	bl	8015590 <__retarget_lock_acquire_recursive>
 8015342:	4628      	mov	r0, r5
 8015344:	4621      	mov	r1, r4
 8015346:	f7ff ff59 	bl	80151fc <__sflush_r>
 801534a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801534c:	07da      	lsls	r2, r3, #31
 801534e:	4605      	mov	r5, r0
 8015350:	d4e0      	bmi.n	8015314 <_fflush_r+0xc>
 8015352:	89a3      	ldrh	r3, [r4, #12]
 8015354:	059b      	lsls	r3, r3, #22
 8015356:	d4dd      	bmi.n	8015314 <_fflush_r+0xc>
 8015358:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801535a:	f000 f91a 	bl	8015592 <__retarget_lock_release_recursive>
 801535e:	e7d9      	b.n	8015314 <_fflush_r+0xc>
 8015360:	4b05      	ldr	r3, [pc, #20]	; (8015378 <_fflush_r+0x70>)
 8015362:	429c      	cmp	r4, r3
 8015364:	d101      	bne.n	801536a <_fflush_r+0x62>
 8015366:	68ac      	ldr	r4, [r5, #8]
 8015368:	e7df      	b.n	801532a <_fflush_r+0x22>
 801536a:	4b04      	ldr	r3, [pc, #16]	; (801537c <_fflush_r+0x74>)
 801536c:	429c      	cmp	r4, r3
 801536e:	bf08      	it	eq
 8015370:	68ec      	ldreq	r4, [r5, #12]
 8015372:	e7da      	b.n	801532a <_fflush_r+0x22>
 8015374:	08019844 	.word	0x08019844
 8015378:	08019864 	.word	0x08019864
 801537c:	08019824 	.word	0x08019824

08015380 <std>:
 8015380:	2300      	movs	r3, #0
 8015382:	b510      	push	{r4, lr}
 8015384:	4604      	mov	r4, r0
 8015386:	e9c0 3300 	strd	r3, r3, [r0]
 801538a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801538e:	6083      	str	r3, [r0, #8]
 8015390:	8181      	strh	r1, [r0, #12]
 8015392:	6643      	str	r3, [r0, #100]	; 0x64
 8015394:	81c2      	strh	r2, [r0, #14]
 8015396:	6183      	str	r3, [r0, #24]
 8015398:	4619      	mov	r1, r3
 801539a:	2208      	movs	r2, #8
 801539c:	305c      	adds	r0, #92	; 0x5c
 801539e:	f7ff fd79 	bl	8014e94 <memset>
 80153a2:	4b05      	ldr	r3, [pc, #20]	; (80153b8 <std+0x38>)
 80153a4:	6263      	str	r3, [r4, #36]	; 0x24
 80153a6:	4b05      	ldr	r3, [pc, #20]	; (80153bc <std+0x3c>)
 80153a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80153aa:	4b05      	ldr	r3, [pc, #20]	; (80153c0 <std+0x40>)
 80153ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80153ae:	4b05      	ldr	r3, [pc, #20]	; (80153c4 <std+0x44>)
 80153b0:	6224      	str	r4, [r4, #32]
 80153b2:	6323      	str	r3, [r4, #48]	; 0x30
 80153b4:	bd10      	pop	{r4, pc}
 80153b6:	bf00      	nop
 80153b8:	08015dbd 	.word	0x08015dbd
 80153bc:	08015ddf 	.word	0x08015ddf
 80153c0:	08015e17 	.word	0x08015e17
 80153c4:	08015e3b 	.word	0x08015e3b

080153c8 <_cleanup_r>:
 80153c8:	4901      	ldr	r1, [pc, #4]	; (80153d0 <_cleanup_r+0x8>)
 80153ca:	f000 b8c1 	b.w	8015550 <_fwalk_reent>
 80153ce:	bf00      	nop
 80153d0:	08015309 	.word	0x08015309

080153d4 <__sfmoreglue>:
 80153d4:	b570      	push	{r4, r5, r6, lr}
 80153d6:	1e4a      	subs	r2, r1, #1
 80153d8:	2568      	movs	r5, #104	; 0x68
 80153da:	4355      	muls	r5, r2
 80153dc:	460e      	mov	r6, r1
 80153de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80153e2:	f000 f993 	bl	801570c <_malloc_r>
 80153e6:	4604      	mov	r4, r0
 80153e8:	b140      	cbz	r0, 80153fc <__sfmoreglue+0x28>
 80153ea:	2100      	movs	r1, #0
 80153ec:	e9c0 1600 	strd	r1, r6, [r0]
 80153f0:	300c      	adds	r0, #12
 80153f2:	60a0      	str	r0, [r4, #8]
 80153f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80153f8:	f7ff fd4c 	bl	8014e94 <memset>
 80153fc:	4620      	mov	r0, r4
 80153fe:	bd70      	pop	{r4, r5, r6, pc}

08015400 <__sfp_lock_acquire>:
 8015400:	4801      	ldr	r0, [pc, #4]	; (8015408 <__sfp_lock_acquire+0x8>)
 8015402:	f000 b8c5 	b.w	8015590 <__retarget_lock_acquire_recursive>
 8015406:	bf00      	nop
 8015408:	2000ab44 	.word	0x2000ab44

0801540c <__sfp_lock_release>:
 801540c:	4801      	ldr	r0, [pc, #4]	; (8015414 <__sfp_lock_release+0x8>)
 801540e:	f000 b8c0 	b.w	8015592 <__retarget_lock_release_recursive>
 8015412:	bf00      	nop
 8015414:	2000ab44 	.word	0x2000ab44

08015418 <__sinit_lock_acquire>:
 8015418:	4801      	ldr	r0, [pc, #4]	; (8015420 <__sinit_lock_acquire+0x8>)
 801541a:	f000 b8b9 	b.w	8015590 <__retarget_lock_acquire_recursive>
 801541e:	bf00      	nop
 8015420:	2000ab3f 	.word	0x2000ab3f

08015424 <__sinit_lock_release>:
 8015424:	4801      	ldr	r0, [pc, #4]	; (801542c <__sinit_lock_release+0x8>)
 8015426:	f000 b8b4 	b.w	8015592 <__retarget_lock_release_recursive>
 801542a:	bf00      	nop
 801542c:	2000ab3f 	.word	0x2000ab3f

08015430 <__sinit>:
 8015430:	b510      	push	{r4, lr}
 8015432:	4604      	mov	r4, r0
 8015434:	f7ff fff0 	bl	8015418 <__sinit_lock_acquire>
 8015438:	69a3      	ldr	r3, [r4, #24]
 801543a:	b11b      	cbz	r3, 8015444 <__sinit+0x14>
 801543c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015440:	f7ff bff0 	b.w	8015424 <__sinit_lock_release>
 8015444:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015448:	6523      	str	r3, [r4, #80]	; 0x50
 801544a:	4b13      	ldr	r3, [pc, #76]	; (8015498 <__sinit+0x68>)
 801544c:	4a13      	ldr	r2, [pc, #76]	; (801549c <__sinit+0x6c>)
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	62a2      	str	r2, [r4, #40]	; 0x28
 8015452:	42a3      	cmp	r3, r4
 8015454:	bf04      	itt	eq
 8015456:	2301      	moveq	r3, #1
 8015458:	61a3      	streq	r3, [r4, #24]
 801545a:	4620      	mov	r0, r4
 801545c:	f000 f820 	bl	80154a0 <__sfp>
 8015460:	6060      	str	r0, [r4, #4]
 8015462:	4620      	mov	r0, r4
 8015464:	f000 f81c 	bl	80154a0 <__sfp>
 8015468:	60a0      	str	r0, [r4, #8]
 801546a:	4620      	mov	r0, r4
 801546c:	f000 f818 	bl	80154a0 <__sfp>
 8015470:	2200      	movs	r2, #0
 8015472:	60e0      	str	r0, [r4, #12]
 8015474:	2104      	movs	r1, #4
 8015476:	6860      	ldr	r0, [r4, #4]
 8015478:	f7ff ff82 	bl	8015380 <std>
 801547c:	68a0      	ldr	r0, [r4, #8]
 801547e:	2201      	movs	r2, #1
 8015480:	2109      	movs	r1, #9
 8015482:	f7ff ff7d 	bl	8015380 <std>
 8015486:	68e0      	ldr	r0, [r4, #12]
 8015488:	2202      	movs	r2, #2
 801548a:	2112      	movs	r1, #18
 801548c:	f7ff ff78 	bl	8015380 <std>
 8015490:	2301      	movs	r3, #1
 8015492:	61a3      	str	r3, [r4, #24]
 8015494:	e7d2      	b.n	801543c <__sinit+0xc>
 8015496:	bf00      	nop
 8015498:	0801976c 	.word	0x0801976c
 801549c:	080153c9 	.word	0x080153c9

080154a0 <__sfp>:
 80154a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154a2:	4607      	mov	r7, r0
 80154a4:	f7ff ffac 	bl	8015400 <__sfp_lock_acquire>
 80154a8:	4b1e      	ldr	r3, [pc, #120]	; (8015524 <__sfp+0x84>)
 80154aa:	681e      	ldr	r6, [r3, #0]
 80154ac:	69b3      	ldr	r3, [r6, #24]
 80154ae:	b913      	cbnz	r3, 80154b6 <__sfp+0x16>
 80154b0:	4630      	mov	r0, r6
 80154b2:	f7ff ffbd 	bl	8015430 <__sinit>
 80154b6:	3648      	adds	r6, #72	; 0x48
 80154b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80154bc:	3b01      	subs	r3, #1
 80154be:	d503      	bpl.n	80154c8 <__sfp+0x28>
 80154c0:	6833      	ldr	r3, [r6, #0]
 80154c2:	b30b      	cbz	r3, 8015508 <__sfp+0x68>
 80154c4:	6836      	ldr	r6, [r6, #0]
 80154c6:	e7f7      	b.n	80154b8 <__sfp+0x18>
 80154c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80154cc:	b9d5      	cbnz	r5, 8015504 <__sfp+0x64>
 80154ce:	4b16      	ldr	r3, [pc, #88]	; (8015528 <__sfp+0x88>)
 80154d0:	60e3      	str	r3, [r4, #12]
 80154d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80154d6:	6665      	str	r5, [r4, #100]	; 0x64
 80154d8:	f000 f859 	bl	801558e <__retarget_lock_init_recursive>
 80154dc:	f7ff ff96 	bl	801540c <__sfp_lock_release>
 80154e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80154e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80154e8:	6025      	str	r5, [r4, #0]
 80154ea:	61a5      	str	r5, [r4, #24]
 80154ec:	2208      	movs	r2, #8
 80154ee:	4629      	mov	r1, r5
 80154f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80154f4:	f7ff fcce 	bl	8014e94 <memset>
 80154f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80154fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015500:	4620      	mov	r0, r4
 8015502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015504:	3468      	adds	r4, #104	; 0x68
 8015506:	e7d9      	b.n	80154bc <__sfp+0x1c>
 8015508:	2104      	movs	r1, #4
 801550a:	4638      	mov	r0, r7
 801550c:	f7ff ff62 	bl	80153d4 <__sfmoreglue>
 8015510:	4604      	mov	r4, r0
 8015512:	6030      	str	r0, [r6, #0]
 8015514:	2800      	cmp	r0, #0
 8015516:	d1d5      	bne.n	80154c4 <__sfp+0x24>
 8015518:	f7ff ff78 	bl	801540c <__sfp_lock_release>
 801551c:	230c      	movs	r3, #12
 801551e:	603b      	str	r3, [r7, #0]
 8015520:	e7ee      	b.n	8015500 <__sfp+0x60>
 8015522:	bf00      	nop
 8015524:	0801976c 	.word	0x0801976c
 8015528:	ffff0001 	.word	0xffff0001

0801552c <fiprintf>:
 801552c:	b40e      	push	{r1, r2, r3}
 801552e:	b503      	push	{r0, r1, lr}
 8015530:	4601      	mov	r1, r0
 8015532:	ab03      	add	r3, sp, #12
 8015534:	4805      	ldr	r0, [pc, #20]	; (801554c <fiprintf+0x20>)
 8015536:	f853 2b04 	ldr.w	r2, [r3], #4
 801553a:	6800      	ldr	r0, [r0, #0]
 801553c:	9301      	str	r3, [sp, #4]
 801553e:	f000 f969 	bl	8015814 <_vfiprintf_r>
 8015542:	b002      	add	sp, #8
 8015544:	f85d eb04 	ldr.w	lr, [sp], #4
 8015548:	b003      	add	sp, #12
 801554a:	4770      	bx	lr
 801554c:	2000001c 	.word	0x2000001c

08015550 <_fwalk_reent>:
 8015550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015554:	4606      	mov	r6, r0
 8015556:	4688      	mov	r8, r1
 8015558:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801555c:	2700      	movs	r7, #0
 801555e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015562:	f1b9 0901 	subs.w	r9, r9, #1
 8015566:	d505      	bpl.n	8015574 <_fwalk_reent+0x24>
 8015568:	6824      	ldr	r4, [r4, #0]
 801556a:	2c00      	cmp	r4, #0
 801556c:	d1f7      	bne.n	801555e <_fwalk_reent+0xe>
 801556e:	4638      	mov	r0, r7
 8015570:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015574:	89ab      	ldrh	r3, [r5, #12]
 8015576:	2b01      	cmp	r3, #1
 8015578:	d907      	bls.n	801558a <_fwalk_reent+0x3a>
 801557a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801557e:	3301      	adds	r3, #1
 8015580:	d003      	beq.n	801558a <_fwalk_reent+0x3a>
 8015582:	4629      	mov	r1, r5
 8015584:	4630      	mov	r0, r6
 8015586:	47c0      	blx	r8
 8015588:	4307      	orrs	r7, r0
 801558a:	3568      	adds	r5, #104	; 0x68
 801558c:	e7e9      	b.n	8015562 <_fwalk_reent+0x12>

0801558e <__retarget_lock_init_recursive>:
 801558e:	4770      	bx	lr

08015590 <__retarget_lock_acquire_recursive>:
 8015590:	4770      	bx	lr

08015592 <__retarget_lock_release_recursive>:
 8015592:	4770      	bx	lr

08015594 <__swhatbuf_r>:
 8015594:	b570      	push	{r4, r5, r6, lr}
 8015596:	460e      	mov	r6, r1
 8015598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801559c:	2900      	cmp	r1, #0
 801559e:	b096      	sub	sp, #88	; 0x58
 80155a0:	4614      	mov	r4, r2
 80155a2:	461d      	mov	r5, r3
 80155a4:	da07      	bge.n	80155b6 <__swhatbuf_r+0x22>
 80155a6:	2300      	movs	r3, #0
 80155a8:	602b      	str	r3, [r5, #0]
 80155aa:	89b3      	ldrh	r3, [r6, #12]
 80155ac:	061a      	lsls	r2, r3, #24
 80155ae:	d410      	bmi.n	80155d2 <__swhatbuf_r+0x3e>
 80155b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80155b4:	e00e      	b.n	80155d4 <__swhatbuf_r+0x40>
 80155b6:	466a      	mov	r2, sp
 80155b8:	f000 fc6e 	bl	8015e98 <_fstat_r>
 80155bc:	2800      	cmp	r0, #0
 80155be:	dbf2      	blt.n	80155a6 <__swhatbuf_r+0x12>
 80155c0:	9a01      	ldr	r2, [sp, #4]
 80155c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80155c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80155ca:	425a      	negs	r2, r3
 80155cc:	415a      	adcs	r2, r3
 80155ce:	602a      	str	r2, [r5, #0]
 80155d0:	e7ee      	b.n	80155b0 <__swhatbuf_r+0x1c>
 80155d2:	2340      	movs	r3, #64	; 0x40
 80155d4:	2000      	movs	r0, #0
 80155d6:	6023      	str	r3, [r4, #0]
 80155d8:	b016      	add	sp, #88	; 0x58
 80155da:	bd70      	pop	{r4, r5, r6, pc}

080155dc <__smakebuf_r>:
 80155dc:	898b      	ldrh	r3, [r1, #12]
 80155de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80155e0:	079d      	lsls	r5, r3, #30
 80155e2:	4606      	mov	r6, r0
 80155e4:	460c      	mov	r4, r1
 80155e6:	d507      	bpl.n	80155f8 <__smakebuf_r+0x1c>
 80155e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80155ec:	6023      	str	r3, [r4, #0]
 80155ee:	6123      	str	r3, [r4, #16]
 80155f0:	2301      	movs	r3, #1
 80155f2:	6163      	str	r3, [r4, #20]
 80155f4:	b002      	add	sp, #8
 80155f6:	bd70      	pop	{r4, r5, r6, pc}
 80155f8:	ab01      	add	r3, sp, #4
 80155fa:	466a      	mov	r2, sp
 80155fc:	f7ff ffca 	bl	8015594 <__swhatbuf_r>
 8015600:	9900      	ldr	r1, [sp, #0]
 8015602:	4605      	mov	r5, r0
 8015604:	4630      	mov	r0, r6
 8015606:	f000 f881 	bl	801570c <_malloc_r>
 801560a:	b948      	cbnz	r0, 8015620 <__smakebuf_r+0x44>
 801560c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015610:	059a      	lsls	r2, r3, #22
 8015612:	d4ef      	bmi.n	80155f4 <__smakebuf_r+0x18>
 8015614:	f023 0303 	bic.w	r3, r3, #3
 8015618:	f043 0302 	orr.w	r3, r3, #2
 801561c:	81a3      	strh	r3, [r4, #12]
 801561e:	e7e3      	b.n	80155e8 <__smakebuf_r+0xc>
 8015620:	4b0d      	ldr	r3, [pc, #52]	; (8015658 <__smakebuf_r+0x7c>)
 8015622:	62b3      	str	r3, [r6, #40]	; 0x28
 8015624:	89a3      	ldrh	r3, [r4, #12]
 8015626:	6020      	str	r0, [r4, #0]
 8015628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801562c:	81a3      	strh	r3, [r4, #12]
 801562e:	9b00      	ldr	r3, [sp, #0]
 8015630:	6163      	str	r3, [r4, #20]
 8015632:	9b01      	ldr	r3, [sp, #4]
 8015634:	6120      	str	r0, [r4, #16]
 8015636:	b15b      	cbz	r3, 8015650 <__smakebuf_r+0x74>
 8015638:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801563c:	4630      	mov	r0, r6
 801563e:	f000 fc3d 	bl	8015ebc <_isatty_r>
 8015642:	b128      	cbz	r0, 8015650 <__smakebuf_r+0x74>
 8015644:	89a3      	ldrh	r3, [r4, #12]
 8015646:	f023 0303 	bic.w	r3, r3, #3
 801564a:	f043 0301 	orr.w	r3, r3, #1
 801564e:	81a3      	strh	r3, [r4, #12]
 8015650:	89a0      	ldrh	r0, [r4, #12]
 8015652:	4305      	orrs	r5, r0
 8015654:	81a5      	strh	r5, [r4, #12]
 8015656:	e7cd      	b.n	80155f4 <__smakebuf_r+0x18>
 8015658:	080153c9 	.word	0x080153c9

0801565c <malloc>:
 801565c:	4b02      	ldr	r3, [pc, #8]	; (8015668 <malloc+0xc>)
 801565e:	4601      	mov	r1, r0
 8015660:	6818      	ldr	r0, [r3, #0]
 8015662:	f000 b853 	b.w	801570c <_malloc_r>
 8015666:	bf00      	nop
 8015668:	2000001c 	.word	0x2000001c

0801566c <_free_r>:
 801566c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801566e:	2900      	cmp	r1, #0
 8015670:	d048      	beq.n	8015704 <_free_r+0x98>
 8015672:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015676:	9001      	str	r0, [sp, #4]
 8015678:	2b00      	cmp	r3, #0
 801567a:	f1a1 0404 	sub.w	r4, r1, #4
 801567e:	bfb8      	it	lt
 8015680:	18e4      	addlt	r4, r4, r3
 8015682:	f000 fc3d 	bl	8015f00 <__malloc_lock>
 8015686:	4a20      	ldr	r2, [pc, #128]	; (8015708 <_free_r+0x9c>)
 8015688:	9801      	ldr	r0, [sp, #4]
 801568a:	6813      	ldr	r3, [r2, #0]
 801568c:	4615      	mov	r5, r2
 801568e:	b933      	cbnz	r3, 801569e <_free_r+0x32>
 8015690:	6063      	str	r3, [r4, #4]
 8015692:	6014      	str	r4, [r2, #0]
 8015694:	b003      	add	sp, #12
 8015696:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801569a:	f000 bc37 	b.w	8015f0c <__malloc_unlock>
 801569e:	42a3      	cmp	r3, r4
 80156a0:	d90b      	bls.n	80156ba <_free_r+0x4e>
 80156a2:	6821      	ldr	r1, [r4, #0]
 80156a4:	1862      	adds	r2, r4, r1
 80156a6:	4293      	cmp	r3, r2
 80156a8:	bf04      	itt	eq
 80156aa:	681a      	ldreq	r2, [r3, #0]
 80156ac:	685b      	ldreq	r3, [r3, #4]
 80156ae:	6063      	str	r3, [r4, #4]
 80156b0:	bf04      	itt	eq
 80156b2:	1852      	addeq	r2, r2, r1
 80156b4:	6022      	streq	r2, [r4, #0]
 80156b6:	602c      	str	r4, [r5, #0]
 80156b8:	e7ec      	b.n	8015694 <_free_r+0x28>
 80156ba:	461a      	mov	r2, r3
 80156bc:	685b      	ldr	r3, [r3, #4]
 80156be:	b10b      	cbz	r3, 80156c4 <_free_r+0x58>
 80156c0:	42a3      	cmp	r3, r4
 80156c2:	d9fa      	bls.n	80156ba <_free_r+0x4e>
 80156c4:	6811      	ldr	r1, [r2, #0]
 80156c6:	1855      	adds	r5, r2, r1
 80156c8:	42a5      	cmp	r5, r4
 80156ca:	d10b      	bne.n	80156e4 <_free_r+0x78>
 80156cc:	6824      	ldr	r4, [r4, #0]
 80156ce:	4421      	add	r1, r4
 80156d0:	1854      	adds	r4, r2, r1
 80156d2:	42a3      	cmp	r3, r4
 80156d4:	6011      	str	r1, [r2, #0]
 80156d6:	d1dd      	bne.n	8015694 <_free_r+0x28>
 80156d8:	681c      	ldr	r4, [r3, #0]
 80156da:	685b      	ldr	r3, [r3, #4]
 80156dc:	6053      	str	r3, [r2, #4]
 80156de:	4421      	add	r1, r4
 80156e0:	6011      	str	r1, [r2, #0]
 80156e2:	e7d7      	b.n	8015694 <_free_r+0x28>
 80156e4:	d902      	bls.n	80156ec <_free_r+0x80>
 80156e6:	230c      	movs	r3, #12
 80156e8:	6003      	str	r3, [r0, #0]
 80156ea:	e7d3      	b.n	8015694 <_free_r+0x28>
 80156ec:	6825      	ldr	r5, [r4, #0]
 80156ee:	1961      	adds	r1, r4, r5
 80156f0:	428b      	cmp	r3, r1
 80156f2:	bf04      	itt	eq
 80156f4:	6819      	ldreq	r1, [r3, #0]
 80156f6:	685b      	ldreq	r3, [r3, #4]
 80156f8:	6063      	str	r3, [r4, #4]
 80156fa:	bf04      	itt	eq
 80156fc:	1949      	addeq	r1, r1, r5
 80156fe:	6021      	streq	r1, [r4, #0]
 8015700:	6054      	str	r4, [r2, #4]
 8015702:	e7c7      	b.n	8015694 <_free_r+0x28>
 8015704:	b003      	add	sp, #12
 8015706:	bd30      	pop	{r4, r5, pc}
 8015708:	200041dc 	.word	0x200041dc

0801570c <_malloc_r>:
 801570c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801570e:	1ccd      	adds	r5, r1, #3
 8015710:	f025 0503 	bic.w	r5, r5, #3
 8015714:	3508      	adds	r5, #8
 8015716:	2d0c      	cmp	r5, #12
 8015718:	bf38      	it	cc
 801571a:	250c      	movcc	r5, #12
 801571c:	2d00      	cmp	r5, #0
 801571e:	4606      	mov	r6, r0
 8015720:	db01      	blt.n	8015726 <_malloc_r+0x1a>
 8015722:	42a9      	cmp	r1, r5
 8015724:	d903      	bls.n	801572e <_malloc_r+0x22>
 8015726:	230c      	movs	r3, #12
 8015728:	6033      	str	r3, [r6, #0]
 801572a:	2000      	movs	r0, #0
 801572c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801572e:	f000 fbe7 	bl	8015f00 <__malloc_lock>
 8015732:	4921      	ldr	r1, [pc, #132]	; (80157b8 <_malloc_r+0xac>)
 8015734:	680a      	ldr	r2, [r1, #0]
 8015736:	4614      	mov	r4, r2
 8015738:	b99c      	cbnz	r4, 8015762 <_malloc_r+0x56>
 801573a:	4f20      	ldr	r7, [pc, #128]	; (80157bc <_malloc_r+0xb0>)
 801573c:	683b      	ldr	r3, [r7, #0]
 801573e:	b923      	cbnz	r3, 801574a <_malloc_r+0x3e>
 8015740:	4621      	mov	r1, r4
 8015742:	4630      	mov	r0, r6
 8015744:	f000 fb2a 	bl	8015d9c <_sbrk_r>
 8015748:	6038      	str	r0, [r7, #0]
 801574a:	4629      	mov	r1, r5
 801574c:	4630      	mov	r0, r6
 801574e:	f000 fb25 	bl	8015d9c <_sbrk_r>
 8015752:	1c43      	adds	r3, r0, #1
 8015754:	d123      	bne.n	801579e <_malloc_r+0x92>
 8015756:	230c      	movs	r3, #12
 8015758:	6033      	str	r3, [r6, #0]
 801575a:	4630      	mov	r0, r6
 801575c:	f000 fbd6 	bl	8015f0c <__malloc_unlock>
 8015760:	e7e3      	b.n	801572a <_malloc_r+0x1e>
 8015762:	6823      	ldr	r3, [r4, #0]
 8015764:	1b5b      	subs	r3, r3, r5
 8015766:	d417      	bmi.n	8015798 <_malloc_r+0x8c>
 8015768:	2b0b      	cmp	r3, #11
 801576a:	d903      	bls.n	8015774 <_malloc_r+0x68>
 801576c:	6023      	str	r3, [r4, #0]
 801576e:	441c      	add	r4, r3
 8015770:	6025      	str	r5, [r4, #0]
 8015772:	e004      	b.n	801577e <_malloc_r+0x72>
 8015774:	6863      	ldr	r3, [r4, #4]
 8015776:	42a2      	cmp	r2, r4
 8015778:	bf0c      	ite	eq
 801577a:	600b      	streq	r3, [r1, #0]
 801577c:	6053      	strne	r3, [r2, #4]
 801577e:	4630      	mov	r0, r6
 8015780:	f000 fbc4 	bl	8015f0c <__malloc_unlock>
 8015784:	f104 000b 	add.w	r0, r4, #11
 8015788:	1d23      	adds	r3, r4, #4
 801578a:	f020 0007 	bic.w	r0, r0, #7
 801578e:	1ac2      	subs	r2, r0, r3
 8015790:	d0cc      	beq.n	801572c <_malloc_r+0x20>
 8015792:	1a1b      	subs	r3, r3, r0
 8015794:	50a3      	str	r3, [r4, r2]
 8015796:	e7c9      	b.n	801572c <_malloc_r+0x20>
 8015798:	4622      	mov	r2, r4
 801579a:	6864      	ldr	r4, [r4, #4]
 801579c:	e7cc      	b.n	8015738 <_malloc_r+0x2c>
 801579e:	1cc4      	adds	r4, r0, #3
 80157a0:	f024 0403 	bic.w	r4, r4, #3
 80157a4:	42a0      	cmp	r0, r4
 80157a6:	d0e3      	beq.n	8015770 <_malloc_r+0x64>
 80157a8:	1a21      	subs	r1, r4, r0
 80157aa:	4630      	mov	r0, r6
 80157ac:	f000 faf6 	bl	8015d9c <_sbrk_r>
 80157b0:	3001      	adds	r0, #1
 80157b2:	d1dd      	bne.n	8015770 <_malloc_r+0x64>
 80157b4:	e7cf      	b.n	8015756 <_malloc_r+0x4a>
 80157b6:	bf00      	nop
 80157b8:	200041dc 	.word	0x200041dc
 80157bc:	200041e0 	.word	0x200041e0

080157c0 <__sfputc_r>:
 80157c0:	6893      	ldr	r3, [r2, #8]
 80157c2:	3b01      	subs	r3, #1
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	b410      	push	{r4}
 80157c8:	6093      	str	r3, [r2, #8]
 80157ca:	da08      	bge.n	80157de <__sfputc_r+0x1e>
 80157cc:	6994      	ldr	r4, [r2, #24]
 80157ce:	42a3      	cmp	r3, r4
 80157d0:	db01      	blt.n	80157d6 <__sfputc_r+0x16>
 80157d2:	290a      	cmp	r1, #10
 80157d4:	d103      	bne.n	80157de <__sfputc_r+0x1e>
 80157d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80157da:	f7ff bc31 	b.w	8015040 <__swbuf_r>
 80157de:	6813      	ldr	r3, [r2, #0]
 80157e0:	1c58      	adds	r0, r3, #1
 80157e2:	6010      	str	r0, [r2, #0]
 80157e4:	7019      	strb	r1, [r3, #0]
 80157e6:	4608      	mov	r0, r1
 80157e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80157ec:	4770      	bx	lr

080157ee <__sfputs_r>:
 80157ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157f0:	4606      	mov	r6, r0
 80157f2:	460f      	mov	r7, r1
 80157f4:	4614      	mov	r4, r2
 80157f6:	18d5      	adds	r5, r2, r3
 80157f8:	42ac      	cmp	r4, r5
 80157fa:	d101      	bne.n	8015800 <__sfputs_r+0x12>
 80157fc:	2000      	movs	r0, #0
 80157fe:	e007      	b.n	8015810 <__sfputs_r+0x22>
 8015800:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015804:	463a      	mov	r2, r7
 8015806:	4630      	mov	r0, r6
 8015808:	f7ff ffda 	bl	80157c0 <__sfputc_r>
 801580c:	1c43      	adds	r3, r0, #1
 801580e:	d1f3      	bne.n	80157f8 <__sfputs_r+0xa>
 8015810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015814 <_vfiprintf_r>:
 8015814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015818:	460d      	mov	r5, r1
 801581a:	b09d      	sub	sp, #116	; 0x74
 801581c:	4614      	mov	r4, r2
 801581e:	4698      	mov	r8, r3
 8015820:	4606      	mov	r6, r0
 8015822:	b118      	cbz	r0, 801582c <_vfiprintf_r+0x18>
 8015824:	6983      	ldr	r3, [r0, #24]
 8015826:	b90b      	cbnz	r3, 801582c <_vfiprintf_r+0x18>
 8015828:	f7ff fe02 	bl	8015430 <__sinit>
 801582c:	4b89      	ldr	r3, [pc, #548]	; (8015a54 <_vfiprintf_r+0x240>)
 801582e:	429d      	cmp	r5, r3
 8015830:	d11b      	bne.n	801586a <_vfiprintf_r+0x56>
 8015832:	6875      	ldr	r5, [r6, #4]
 8015834:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015836:	07d9      	lsls	r1, r3, #31
 8015838:	d405      	bmi.n	8015846 <_vfiprintf_r+0x32>
 801583a:	89ab      	ldrh	r3, [r5, #12]
 801583c:	059a      	lsls	r2, r3, #22
 801583e:	d402      	bmi.n	8015846 <_vfiprintf_r+0x32>
 8015840:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015842:	f7ff fea5 	bl	8015590 <__retarget_lock_acquire_recursive>
 8015846:	89ab      	ldrh	r3, [r5, #12]
 8015848:	071b      	lsls	r3, r3, #28
 801584a:	d501      	bpl.n	8015850 <_vfiprintf_r+0x3c>
 801584c:	692b      	ldr	r3, [r5, #16]
 801584e:	b9eb      	cbnz	r3, 801588c <_vfiprintf_r+0x78>
 8015850:	4629      	mov	r1, r5
 8015852:	4630      	mov	r0, r6
 8015854:	f7ff fc46 	bl	80150e4 <__swsetup_r>
 8015858:	b1c0      	cbz	r0, 801588c <_vfiprintf_r+0x78>
 801585a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801585c:	07dc      	lsls	r4, r3, #31
 801585e:	d50e      	bpl.n	801587e <_vfiprintf_r+0x6a>
 8015860:	f04f 30ff 	mov.w	r0, #4294967295
 8015864:	b01d      	add	sp, #116	; 0x74
 8015866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801586a:	4b7b      	ldr	r3, [pc, #492]	; (8015a58 <_vfiprintf_r+0x244>)
 801586c:	429d      	cmp	r5, r3
 801586e:	d101      	bne.n	8015874 <_vfiprintf_r+0x60>
 8015870:	68b5      	ldr	r5, [r6, #8]
 8015872:	e7df      	b.n	8015834 <_vfiprintf_r+0x20>
 8015874:	4b79      	ldr	r3, [pc, #484]	; (8015a5c <_vfiprintf_r+0x248>)
 8015876:	429d      	cmp	r5, r3
 8015878:	bf08      	it	eq
 801587a:	68f5      	ldreq	r5, [r6, #12]
 801587c:	e7da      	b.n	8015834 <_vfiprintf_r+0x20>
 801587e:	89ab      	ldrh	r3, [r5, #12]
 8015880:	0598      	lsls	r0, r3, #22
 8015882:	d4ed      	bmi.n	8015860 <_vfiprintf_r+0x4c>
 8015884:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015886:	f7ff fe84 	bl	8015592 <__retarget_lock_release_recursive>
 801588a:	e7e9      	b.n	8015860 <_vfiprintf_r+0x4c>
 801588c:	2300      	movs	r3, #0
 801588e:	9309      	str	r3, [sp, #36]	; 0x24
 8015890:	2320      	movs	r3, #32
 8015892:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015896:	f8cd 800c 	str.w	r8, [sp, #12]
 801589a:	2330      	movs	r3, #48	; 0x30
 801589c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015a60 <_vfiprintf_r+0x24c>
 80158a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80158a4:	f04f 0901 	mov.w	r9, #1
 80158a8:	4623      	mov	r3, r4
 80158aa:	469a      	mov	sl, r3
 80158ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80158b0:	b10a      	cbz	r2, 80158b6 <_vfiprintf_r+0xa2>
 80158b2:	2a25      	cmp	r2, #37	; 0x25
 80158b4:	d1f9      	bne.n	80158aa <_vfiprintf_r+0x96>
 80158b6:	ebba 0b04 	subs.w	fp, sl, r4
 80158ba:	d00b      	beq.n	80158d4 <_vfiprintf_r+0xc0>
 80158bc:	465b      	mov	r3, fp
 80158be:	4622      	mov	r2, r4
 80158c0:	4629      	mov	r1, r5
 80158c2:	4630      	mov	r0, r6
 80158c4:	f7ff ff93 	bl	80157ee <__sfputs_r>
 80158c8:	3001      	adds	r0, #1
 80158ca:	f000 80aa 	beq.w	8015a22 <_vfiprintf_r+0x20e>
 80158ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80158d0:	445a      	add	r2, fp
 80158d2:	9209      	str	r2, [sp, #36]	; 0x24
 80158d4:	f89a 3000 	ldrb.w	r3, [sl]
 80158d8:	2b00      	cmp	r3, #0
 80158da:	f000 80a2 	beq.w	8015a22 <_vfiprintf_r+0x20e>
 80158de:	2300      	movs	r3, #0
 80158e0:	f04f 32ff 	mov.w	r2, #4294967295
 80158e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80158e8:	f10a 0a01 	add.w	sl, sl, #1
 80158ec:	9304      	str	r3, [sp, #16]
 80158ee:	9307      	str	r3, [sp, #28]
 80158f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80158f4:	931a      	str	r3, [sp, #104]	; 0x68
 80158f6:	4654      	mov	r4, sl
 80158f8:	2205      	movs	r2, #5
 80158fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80158fe:	4858      	ldr	r0, [pc, #352]	; (8015a60 <_vfiprintf_r+0x24c>)
 8015900:	f7ea fcb6 	bl	8000270 <memchr>
 8015904:	9a04      	ldr	r2, [sp, #16]
 8015906:	b9d8      	cbnz	r0, 8015940 <_vfiprintf_r+0x12c>
 8015908:	06d1      	lsls	r1, r2, #27
 801590a:	bf44      	itt	mi
 801590c:	2320      	movmi	r3, #32
 801590e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015912:	0713      	lsls	r3, r2, #28
 8015914:	bf44      	itt	mi
 8015916:	232b      	movmi	r3, #43	; 0x2b
 8015918:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801591c:	f89a 3000 	ldrb.w	r3, [sl]
 8015920:	2b2a      	cmp	r3, #42	; 0x2a
 8015922:	d015      	beq.n	8015950 <_vfiprintf_r+0x13c>
 8015924:	9a07      	ldr	r2, [sp, #28]
 8015926:	4654      	mov	r4, sl
 8015928:	2000      	movs	r0, #0
 801592a:	f04f 0c0a 	mov.w	ip, #10
 801592e:	4621      	mov	r1, r4
 8015930:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015934:	3b30      	subs	r3, #48	; 0x30
 8015936:	2b09      	cmp	r3, #9
 8015938:	d94e      	bls.n	80159d8 <_vfiprintf_r+0x1c4>
 801593a:	b1b0      	cbz	r0, 801596a <_vfiprintf_r+0x156>
 801593c:	9207      	str	r2, [sp, #28]
 801593e:	e014      	b.n	801596a <_vfiprintf_r+0x156>
 8015940:	eba0 0308 	sub.w	r3, r0, r8
 8015944:	fa09 f303 	lsl.w	r3, r9, r3
 8015948:	4313      	orrs	r3, r2
 801594a:	9304      	str	r3, [sp, #16]
 801594c:	46a2      	mov	sl, r4
 801594e:	e7d2      	b.n	80158f6 <_vfiprintf_r+0xe2>
 8015950:	9b03      	ldr	r3, [sp, #12]
 8015952:	1d19      	adds	r1, r3, #4
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	9103      	str	r1, [sp, #12]
 8015958:	2b00      	cmp	r3, #0
 801595a:	bfbb      	ittet	lt
 801595c:	425b      	neglt	r3, r3
 801595e:	f042 0202 	orrlt.w	r2, r2, #2
 8015962:	9307      	strge	r3, [sp, #28]
 8015964:	9307      	strlt	r3, [sp, #28]
 8015966:	bfb8      	it	lt
 8015968:	9204      	strlt	r2, [sp, #16]
 801596a:	7823      	ldrb	r3, [r4, #0]
 801596c:	2b2e      	cmp	r3, #46	; 0x2e
 801596e:	d10c      	bne.n	801598a <_vfiprintf_r+0x176>
 8015970:	7863      	ldrb	r3, [r4, #1]
 8015972:	2b2a      	cmp	r3, #42	; 0x2a
 8015974:	d135      	bne.n	80159e2 <_vfiprintf_r+0x1ce>
 8015976:	9b03      	ldr	r3, [sp, #12]
 8015978:	1d1a      	adds	r2, r3, #4
 801597a:	681b      	ldr	r3, [r3, #0]
 801597c:	9203      	str	r2, [sp, #12]
 801597e:	2b00      	cmp	r3, #0
 8015980:	bfb8      	it	lt
 8015982:	f04f 33ff 	movlt.w	r3, #4294967295
 8015986:	3402      	adds	r4, #2
 8015988:	9305      	str	r3, [sp, #20]
 801598a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015a70 <_vfiprintf_r+0x25c>
 801598e:	7821      	ldrb	r1, [r4, #0]
 8015990:	2203      	movs	r2, #3
 8015992:	4650      	mov	r0, sl
 8015994:	f7ea fc6c 	bl	8000270 <memchr>
 8015998:	b140      	cbz	r0, 80159ac <_vfiprintf_r+0x198>
 801599a:	2340      	movs	r3, #64	; 0x40
 801599c:	eba0 000a 	sub.w	r0, r0, sl
 80159a0:	fa03 f000 	lsl.w	r0, r3, r0
 80159a4:	9b04      	ldr	r3, [sp, #16]
 80159a6:	4303      	orrs	r3, r0
 80159a8:	3401      	adds	r4, #1
 80159aa:	9304      	str	r3, [sp, #16]
 80159ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80159b0:	482c      	ldr	r0, [pc, #176]	; (8015a64 <_vfiprintf_r+0x250>)
 80159b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80159b6:	2206      	movs	r2, #6
 80159b8:	f7ea fc5a 	bl	8000270 <memchr>
 80159bc:	2800      	cmp	r0, #0
 80159be:	d03f      	beq.n	8015a40 <_vfiprintf_r+0x22c>
 80159c0:	4b29      	ldr	r3, [pc, #164]	; (8015a68 <_vfiprintf_r+0x254>)
 80159c2:	bb1b      	cbnz	r3, 8015a0c <_vfiprintf_r+0x1f8>
 80159c4:	9b03      	ldr	r3, [sp, #12]
 80159c6:	3307      	adds	r3, #7
 80159c8:	f023 0307 	bic.w	r3, r3, #7
 80159cc:	3308      	adds	r3, #8
 80159ce:	9303      	str	r3, [sp, #12]
 80159d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159d2:	443b      	add	r3, r7
 80159d4:	9309      	str	r3, [sp, #36]	; 0x24
 80159d6:	e767      	b.n	80158a8 <_vfiprintf_r+0x94>
 80159d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80159dc:	460c      	mov	r4, r1
 80159de:	2001      	movs	r0, #1
 80159e0:	e7a5      	b.n	801592e <_vfiprintf_r+0x11a>
 80159e2:	2300      	movs	r3, #0
 80159e4:	3401      	adds	r4, #1
 80159e6:	9305      	str	r3, [sp, #20]
 80159e8:	4619      	mov	r1, r3
 80159ea:	f04f 0c0a 	mov.w	ip, #10
 80159ee:	4620      	mov	r0, r4
 80159f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80159f4:	3a30      	subs	r2, #48	; 0x30
 80159f6:	2a09      	cmp	r2, #9
 80159f8:	d903      	bls.n	8015a02 <_vfiprintf_r+0x1ee>
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d0c5      	beq.n	801598a <_vfiprintf_r+0x176>
 80159fe:	9105      	str	r1, [sp, #20]
 8015a00:	e7c3      	b.n	801598a <_vfiprintf_r+0x176>
 8015a02:	fb0c 2101 	mla	r1, ip, r1, r2
 8015a06:	4604      	mov	r4, r0
 8015a08:	2301      	movs	r3, #1
 8015a0a:	e7f0      	b.n	80159ee <_vfiprintf_r+0x1da>
 8015a0c:	ab03      	add	r3, sp, #12
 8015a0e:	9300      	str	r3, [sp, #0]
 8015a10:	462a      	mov	r2, r5
 8015a12:	4b16      	ldr	r3, [pc, #88]	; (8015a6c <_vfiprintf_r+0x258>)
 8015a14:	a904      	add	r1, sp, #16
 8015a16:	4630      	mov	r0, r6
 8015a18:	f3af 8000 	nop.w
 8015a1c:	4607      	mov	r7, r0
 8015a1e:	1c78      	adds	r0, r7, #1
 8015a20:	d1d6      	bne.n	80159d0 <_vfiprintf_r+0x1bc>
 8015a22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015a24:	07d9      	lsls	r1, r3, #31
 8015a26:	d405      	bmi.n	8015a34 <_vfiprintf_r+0x220>
 8015a28:	89ab      	ldrh	r3, [r5, #12]
 8015a2a:	059a      	lsls	r2, r3, #22
 8015a2c:	d402      	bmi.n	8015a34 <_vfiprintf_r+0x220>
 8015a2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015a30:	f7ff fdaf 	bl	8015592 <__retarget_lock_release_recursive>
 8015a34:	89ab      	ldrh	r3, [r5, #12]
 8015a36:	065b      	lsls	r3, r3, #25
 8015a38:	f53f af12 	bmi.w	8015860 <_vfiprintf_r+0x4c>
 8015a3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015a3e:	e711      	b.n	8015864 <_vfiprintf_r+0x50>
 8015a40:	ab03      	add	r3, sp, #12
 8015a42:	9300      	str	r3, [sp, #0]
 8015a44:	462a      	mov	r2, r5
 8015a46:	4b09      	ldr	r3, [pc, #36]	; (8015a6c <_vfiprintf_r+0x258>)
 8015a48:	a904      	add	r1, sp, #16
 8015a4a:	4630      	mov	r0, r6
 8015a4c:	f000 f880 	bl	8015b50 <_printf_i>
 8015a50:	e7e4      	b.n	8015a1c <_vfiprintf_r+0x208>
 8015a52:	bf00      	nop
 8015a54:	08019844 	.word	0x08019844
 8015a58:	08019864 	.word	0x08019864
 8015a5c:	08019824 	.word	0x08019824
 8015a60:	08019884 	.word	0x08019884
 8015a64:	0801988e 	.word	0x0801988e
 8015a68:	00000000 	.word	0x00000000
 8015a6c:	080157ef 	.word	0x080157ef
 8015a70:	0801988a 	.word	0x0801988a

08015a74 <_printf_common>:
 8015a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a78:	4616      	mov	r6, r2
 8015a7a:	4699      	mov	r9, r3
 8015a7c:	688a      	ldr	r2, [r1, #8]
 8015a7e:	690b      	ldr	r3, [r1, #16]
 8015a80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015a84:	4293      	cmp	r3, r2
 8015a86:	bfb8      	it	lt
 8015a88:	4613      	movlt	r3, r2
 8015a8a:	6033      	str	r3, [r6, #0]
 8015a8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015a90:	4607      	mov	r7, r0
 8015a92:	460c      	mov	r4, r1
 8015a94:	b10a      	cbz	r2, 8015a9a <_printf_common+0x26>
 8015a96:	3301      	adds	r3, #1
 8015a98:	6033      	str	r3, [r6, #0]
 8015a9a:	6823      	ldr	r3, [r4, #0]
 8015a9c:	0699      	lsls	r1, r3, #26
 8015a9e:	bf42      	ittt	mi
 8015aa0:	6833      	ldrmi	r3, [r6, #0]
 8015aa2:	3302      	addmi	r3, #2
 8015aa4:	6033      	strmi	r3, [r6, #0]
 8015aa6:	6825      	ldr	r5, [r4, #0]
 8015aa8:	f015 0506 	ands.w	r5, r5, #6
 8015aac:	d106      	bne.n	8015abc <_printf_common+0x48>
 8015aae:	f104 0a19 	add.w	sl, r4, #25
 8015ab2:	68e3      	ldr	r3, [r4, #12]
 8015ab4:	6832      	ldr	r2, [r6, #0]
 8015ab6:	1a9b      	subs	r3, r3, r2
 8015ab8:	42ab      	cmp	r3, r5
 8015aba:	dc26      	bgt.n	8015b0a <_printf_common+0x96>
 8015abc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015ac0:	1e13      	subs	r3, r2, #0
 8015ac2:	6822      	ldr	r2, [r4, #0]
 8015ac4:	bf18      	it	ne
 8015ac6:	2301      	movne	r3, #1
 8015ac8:	0692      	lsls	r2, r2, #26
 8015aca:	d42b      	bmi.n	8015b24 <_printf_common+0xb0>
 8015acc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015ad0:	4649      	mov	r1, r9
 8015ad2:	4638      	mov	r0, r7
 8015ad4:	47c0      	blx	r8
 8015ad6:	3001      	adds	r0, #1
 8015ad8:	d01e      	beq.n	8015b18 <_printf_common+0xa4>
 8015ada:	6823      	ldr	r3, [r4, #0]
 8015adc:	68e5      	ldr	r5, [r4, #12]
 8015ade:	6832      	ldr	r2, [r6, #0]
 8015ae0:	f003 0306 	and.w	r3, r3, #6
 8015ae4:	2b04      	cmp	r3, #4
 8015ae6:	bf08      	it	eq
 8015ae8:	1aad      	subeq	r5, r5, r2
 8015aea:	68a3      	ldr	r3, [r4, #8]
 8015aec:	6922      	ldr	r2, [r4, #16]
 8015aee:	bf0c      	ite	eq
 8015af0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015af4:	2500      	movne	r5, #0
 8015af6:	4293      	cmp	r3, r2
 8015af8:	bfc4      	itt	gt
 8015afa:	1a9b      	subgt	r3, r3, r2
 8015afc:	18ed      	addgt	r5, r5, r3
 8015afe:	2600      	movs	r6, #0
 8015b00:	341a      	adds	r4, #26
 8015b02:	42b5      	cmp	r5, r6
 8015b04:	d11a      	bne.n	8015b3c <_printf_common+0xc8>
 8015b06:	2000      	movs	r0, #0
 8015b08:	e008      	b.n	8015b1c <_printf_common+0xa8>
 8015b0a:	2301      	movs	r3, #1
 8015b0c:	4652      	mov	r2, sl
 8015b0e:	4649      	mov	r1, r9
 8015b10:	4638      	mov	r0, r7
 8015b12:	47c0      	blx	r8
 8015b14:	3001      	adds	r0, #1
 8015b16:	d103      	bne.n	8015b20 <_printf_common+0xac>
 8015b18:	f04f 30ff 	mov.w	r0, #4294967295
 8015b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b20:	3501      	adds	r5, #1
 8015b22:	e7c6      	b.n	8015ab2 <_printf_common+0x3e>
 8015b24:	18e1      	adds	r1, r4, r3
 8015b26:	1c5a      	adds	r2, r3, #1
 8015b28:	2030      	movs	r0, #48	; 0x30
 8015b2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015b2e:	4422      	add	r2, r4
 8015b30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015b34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015b38:	3302      	adds	r3, #2
 8015b3a:	e7c7      	b.n	8015acc <_printf_common+0x58>
 8015b3c:	2301      	movs	r3, #1
 8015b3e:	4622      	mov	r2, r4
 8015b40:	4649      	mov	r1, r9
 8015b42:	4638      	mov	r0, r7
 8015b44:	47c0      	blx	r8
 8015b46:	3001      	adds	r0, #1
 8015b48:	d0e6      	beq.n	8015b18 <_printf_common+0xa4>
 8015b4a:	3601      	adds	r6, #1
 8015b4c:	e7d9      	b.n	8015b02 <_printf_common+0x8e>
	...

08015b50 <_printf_i>:
 8015b50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015b54:	460c      	mov	r4, r1
 8015b56:	4691      	mov	r9, r2
 8015b58:	7e27      	ldrb	r7, [r4, #24]
 8015b5a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015b5c:	2f78      	cmp	r7, #120	; 0x78
 8015b5e:	4680      	mov	r8, r0
 8015b60:	469a      	mov	sl, r3
 8015b62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015b66:	d807      	bhi.n	8015b78 <_printf_i+0x28>
 8015b68:	2f62      	cmp	r7, #98	; 0x62
 8015b6a:	d80a      	bhi.n	8015b82 <_printf_i+0x32>
 8015b6c:	2f00      	cmp	r7, #0
 8015b6e:	f000 80d8 	beq.w	8015d22 <_printf_i+0x1d2>
 8015b72:	2f58      	cmp	r7, #88	; 0x58
 8015b74:	f000 80a3 	beq.w	8015cbe <_printf_i+0x16e>
 8015b78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015b7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015b80:	e03a      	b.n	8015bf8 <_printf_i+0xa8>
 8015b82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015b86:	2b15      	cmp	r3, #21
 8015b88:	d8f6      	bhi.n	8015b78 <_printf_i+0x28>
 8015b8a:	a001      	add	r0, pc, #4	; (adr r0, 8015b90 <_printf_i+0x40>)
 8015b8c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8015b90:	08015be9 	.word	0x08015be9
 8015b94:	08015bfd 	.word	0x08015bfd
 8015b98:	08015b79 	.word	0x08015b79
 8015b9c:	08015b79 	.word	0x08015b79
 8015ba0:	08015b79 	.word	0x08015b79
 8015ba4:	08015b79 	.word	0x08015b79
 8015ba8:	08015bfd 	.word	0x08015bfd
 8015bac:	08015b79 	.word	0x08015b79
 8015bb0:	08015b79 	.word	0x08015b79
 8015bb4:	08015b79 	.word	0x08015b79
 8015bb8:	08015b79 	.word	0x08015b79
 8015bbc:	08015d09 	.word	0x08015d09
 8015bc0:	08015c2d 	.word	0x08015c2d
 8015bc4:	08015ceb 	.word	0x08015ceb
 8015bc8:	08015b79 	.word	0x08015b79
 8015bcc:	08015b79 	.word	0x08015b79
 8015bd0:	08015d2b 	.word	0x08015d2b
 8015bd4:	08015b79 	.word	0x08015b79
 8015bd8:	08015c2d 	.word	0x08015c2d
 8015bdc:	08015b79 	.word	0x08015b79
 8015be0:	08015b79 	.word	0x08015b79
 8015be4:	08015cf3 	.word	0x08015cf3
 8015be8:	680b      	ldr	r3, [r1, #0]
 8015bea:	1d1a      	adds	r2, r3, #4
 8015bec:	681b      	ldr	r3, [r3, #0]
 8015bee:	600a      	str	r2, [r1, #0]
 8015bf0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015bf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015bf8:	2301      	movs	r3, #1
 8015bfa:	e0a3      	b.n	8015d44 <_printf_i+0x1f4>
 8015bfc:	6825      	ldr	r5, [r4, #0]
 8015bfe:	6808      	ldr	r0, [r1, #0]
 8015c00:	062e      	lsls	r6, r5, #24
 8015c02:	f100 0304 	add.w	r3, r0, #4
 8015c06:	d50a      	bpl.n	8015c1e <_printf_i+0xce>
 8015c08:	6805      	ldr	r5, [r0, #0]
 8015c0a:	600b      	str	r3, [r1, #0]
 8015c0c:	2d00      	cmp	r5, #0
 8015c0e:	da03      	bge.n	8015c18 <_printf_i+0xc8>
 8015c10:	232d      	movs	r3, #45	; 0x2d
 8015c12:	426d      	negs	r5, r5
 8015c14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015c18:	485e      	ldr	r0, [pc, #376]	; (8015d94 <_printf_i+0x244>)
 8015c1a:	230a      	movs	r3, #10
 8015c1c:	e019      	b.n	8015c52 <_printf_i+0x102>
 8015c1e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8015c22:	6805      	ldr	r5, [r0, #0]
 8015c24:	600b      	str	r3, [r1, #0]
 8015c26:	bf18      	it	ne
 8015c28:	b22d      	sxthne	r5, r5
 8015c2a:	e7ef      	b.n	8015c0c <_printf_i+0xbc>
 8015c2c:	680b      	ldr	r3, [r1, #0]
 8015c2e:	6825      	ldr	r5, [r4, #0]
 8015c30:	1d18      	adds	r0, r3, #4
 8015c32:	6008      	str	r0, [r1, #0]
 8015c34:	0628      	lsls	r0, r5, #24
 8015c36:	d501      	bpl.n	8015c3c <_printf_i+0xec>
 8015c38:	681d      	ldr	r5, [r3, #0]
 8015c3a:	e002      	b.n	8015c42 <_printf_i+0xf2>
 8015c3c:	0669      	lsls	r1, r5, #25
 8015c3e:	d5fb      	bpl.n	8015c38 <_printf_i+0xe8>
 8015c40:	881d      	ldrh	r5, [r3, #0]
 8015c42:	4854      	ldr	r0, [pc, #336]	; (8015d94 <_printf_i+0x244>)
 8015c44:	2f6f      	cmp	r7, #111	; 0x6f
 8015c46:	bf0c      	ite	eq
 8015c48:	2308      	moveq	r3, #8
 8015c4a:	230a      	movne	r3, #10
 8015c4c:	2100      	movs	r1, #0
 8015c4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015c52:	6866      	ldr	r6, [r4, #4]
 8015c54:	60a6      	str	r6, [r4, #8]
 8015c56:	2e00      	cmp	r6, #0
 8015c58:	bfa2      	ittt	ge
 8015c5a:	6821      	ldrge	r1, [r4, #0]
 8015c5c:	f021 0104 	bicge.w	r1, r1, #4
 8015c60:	6021      	strge	r1, [r4, #0]
 8015c62:	b90d      	cbnz	r5, 8015c68 <_printf_i+0x118>
 8015c64:	2e00      	cmp	r6, #0
 8015c66:	d04d      	beq.n	8015d04 <_printf_i+0x1b4>
 8015c68:	4616      	mov	r6, r2
 8015c6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8015c6e:	fb03 5711 	mls	r7, r3, r1, r5
 8015c72:	5dc7      	ldrb	r7, [r0, r7]
 8015c74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015c78:	462f      	mov	r7, r5
 8015c7a:	42bb      	cmp	r3, r7
 8015c7c:	460d      	mov	r5, r1
 8015c7e:	d9f4      	bls.n	8015c6a <_printf_i+0x11a>
 8015c80:	2b08      	cmp	r3, #8
 8015c82:	d10b      	bne.n	8015c9c <_printf_i+0x14c>
 8015c84:	6823      	ldr	r3, [r4, #0]
 8015c86:	07df      	lsls	r7, r3, #31
 8015c88:	d508      	bpl.n	8015c9c <_printf_i+0x14c>
 8015c8a:	6923      	ldr	r3, [r4, #16]
 8015c8c:	6861      	ldr	r1, [r4, #4]
 8015c8e:	4299      	cmp	r1, r3
 8015c90:	bfde      	ittt	le
 8015c92:	2330      	movle	r3, #48	; 0x30
 8015c94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015c98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015c9c:	1b92      	subs	r2, r2, r6
 8015c9e:	6122      	str	r2, [r4, #16]
 8015ca0:	f8cd a000 	str.w	sl, [sp]
 8015ca4:	464b      	mov	r3, r9
 8015ca6:	aa03      	add	r2, sp, #12
 8015ca8:	4621      	mov	r1, r4
 8015caa:	4640      	mov	r0, r8
 8015cac:	f7ff fee2 	bl	8015a74 <_printf_common>
 8015cb0:	3001      	adds	r0, #1
 8015cb2:	d14c      	bne.n	8015d4e <_printf_i+0x1fe>
 8015cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8015cb8:	b004      	add	sp, #16
 8015cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015cbe:	4835      	ldr	r0, [pc, #212]	; (8015d94 <_printf_i+0x244>)
 8015cc0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015cc4:	6823      	ldr	r3, [r4, #0]
 8015cc6:	680e      	ldr	r6, [r1, #0]
 8015cc8:	061f      	lsls	r7, r3, #24
 8015cca:	f856 5b04 	ldr.w	r5, [r6], #4
 8015cce:	600e      	str	r6, [r1, #0]
 8015cd0:	d514      	bpl.n	8015cfc <_printf_i+0x1ac>
 8015cd2:	07d9      	lsls	r1, r3, #31
 8015cd4:	bf44      	itt	mi
 8015cd6:	f043 0320 	orrmi.w	r3, r3, #32
 8015cda:	6023      	strmi	r3, [r4, #0]
 8015cdc:	b91d      	cbnz	r5, 8015ce6 <_printf_i+0x196>
 8015cde:	6823      	ldr	r3, [r4, #0]
 8015ce0:	f023 0320 	bic.w	r3, r3, #32
 8015ce4:	6023      	str	r3, [r4, #0]
 8015ce6:	2310      	movs	r3, #16
 8015ce8:	e7b0      	b.n	8015c4c <_printf_i+0xfc>
 8015cea:	6823      	ldr	r3, [r4, #0]
 8015cec:	f043 0320 	orr.w	r3, r3, #32
 8015cf0:	6023      	str	r3, [r4, #0]
 8015cf2:	2378      	movs	r3, #120	; 0x78
 8015cf4:	4828      	ldr	r0, [pc, #160]	; (8015d98 <_printf_i+0x248>)
 8015cf6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015cfa:	e7e3      	b.n	8015cc4 <_printf_i+0x174>
 8015cfc:	065e      	lsls	r6, r3, #25
 8015cfe:	bf48      	it	mi
 8015d00:	b2ad      	uxthmi	r5, r5
 8015d02:	e7e6      	b.n	8015cd2 <_printf_i+0x182>
 8015d04:	4616      	mov	r6, r2
 8015d06:	e7bb      	b.n	8015c80 <_printf_i+0x130>
 8015d08:	680b      	ldr	r3, [r1, #0]
 8015d0a:	6826      	ldr	r6, [r4, #0]
 8015d0c:	6960      	ldr	r0, [r4, #20]
 8015d0e:	1d1d      	adds	r5, r3, #4
 8015d10:	600d      	str	r5, [r1, #0]
 8015d12:	0635      	lsls	r5, r6, #24
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	d501      	bpl.n	8015d1c <_printf_i+0x1cc>
 8015d18:	6018      	str	r0, [r3, #0]
 8015d1a:	e002      	b.n	8015d22 <_printf_i+0x1d2>
 8015d1c:	0671      	lsls	r1, r6, #25
 8015d1e:	d5fb      	bpl.n	8015d18 <_printf_i+0x1c8>
 8015d20:	8018      	strh	r0, [r3, #0]
 8015d22:	2300      	movs	r3, #0
 8015d24:	6123      	str	r3, [r4, #16]
 8015d26:	4616      	mov	r6, r2
 8015d28:	e7ba      	b.n	8015ca0 <_printf_i+0x150>
 8015d2a:	680b      	ldr	r3, [r1, #0]
 8015d2c:	1d1a      	adds	r2, r3, #4
 8015d2e:	600a      	str	r2, [r1, #0]
 8015d30:	681e      	ldr	r6, [r3, #0]
 8015d32:	6862      	ldr	r2, [r4, #4]
 8015d34:	2100      	movs	r1, #0
 8015d36:	4630      	mov	r0, r6
 8015d38:	f7ea fa9a 	bl	8000270 <memchr>
 8015d3c:	b108      	cbz	r0, 8015d42 <_printf_i+0x1f2>
 8015d3e:	1b80      	subs	r0, r0, r6
 8015d40:	6060      	str	r0, [r4, #4]
 8015d42:	6863      	ldr	r3, [r4, #4]
 8015d44:	6123      	str	r3, [r4, #16]
 8015d46:	2300      	movs	r3, #0
 8015d48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015d4c:	e7a8      	b.n	8015ca0 <_printf_i+0x150>
 8015d4e:	6923      	ldr	r3, [r4, #16]
 8015d50:	4632      	mov	r2, r6
 8015d52:	4649      	mov	r1, r9
 8015d54:	4640      	mov	r0, r8
 8015d56:	47d0      	blx	sl
 8015d58:	3001      	adds	r0, #1
 8015d5a:	d0ab      	beq.n	8015cb4 <_printf_i+0x164>
 8015d5c:	6823      	ldr	r3, [r4, #0]
 8015d5e:	079b      	lsls	r3, r3, #30
 8015d60:	d413      	bmi.n	8015d8a <_printf_i+0x23a>
 8015d62:	68e0      	ldr	r0, [r4, #12]
 8015d64:	9b03      	ldr	r3, [sp, #12]
 8015d66:	4298      	cmp	r0, r3
 8015d68:	bfb8      	it	lt
 8015d6a:	4618      	movlt	r0, r3
 8015d6c:	e7a4      	b.n	8015cb8 <_printf_i+0x168>
 8015d6e:	2301      	movs	r3, #1
 8015d70:	4632      	mov	r2, r6
 8015d72:	4649      	mov	r1, r9
 8015d74:	4640      	mov	r0, r8
 8015d76:	47d0      	blx	sl
 8015d78:	3001      	adds	r0, #1
 8015d7a:	d09b      	beq.n	8015cb4 <_printf_i+0x164>
 8015d7c:	3501      	adds	r5, #1
 8015d7e:	68e3      	ldr	r3, [r4, #12]
 8015d80:	9903      	ldr	r1, [sp, #12]
 8015d82:	1a5b      	subs	r3, r3, r1
 8015d84:	42ab      	cmp	r3, r5
 8015d86:	dcf2      	bgt.n	8015d6e <_printf_i+0x21e>
 8015d88:	e7eb      	b.n	8015d62 <_printf_i+0x212>
 8015d8a:	2500      	movs	r5, #0
 8015d8c:	f104 0619 	add.w	r6, r4, #25
 8015d90:	e7f5      	b.n	8015d7e <_printf_i+0x22e>
 8015d92:	bf00      	nop
 8015d94:	08019895 	.word	0x08019895
 8015d98:	080198a6 	.word	0x080198a6

08015d9c <_sbrk_r>:
 8015d9c:	b538      	push	{r3, r4, r5, lr}
 8015d9e:	4d06      	ldr	r5, [pc, #24]	; (8015db8 <_sbrk_r+0x1c>)
 8015da0:	2300      	movs	r3, #0
 8015da2:	4604      	mov	r4, r0
 8015da4:	4608      	mov	r0, r1
 8015da6:	602b      	str	r3, [r5, #0]
 8015da8:	f7eb f89a 	bl	8000ee0 <_sbrk>
 8015dac:	1c43      	adds	r3, r0, #1
 8015dae:	d102      	bne.n	8015db6 <_sbrk_r+0x1a>
 8015db0:	682b      	ldr	r3, [r5, #0]
 8015db2:	b103      	cbz	r3, 8015db6 <_sbrk_r+0x1a>
 8015db4:	6023      	str	r3, [r4, #0]
 8015db6:	bd38      	pop	{r3, r4, r5, pc}
 8015db8:	2000ab34 	.word	0x2000ab34

08015dbc <__sread>:
 8015dbc:	b510      	push	{r4, lr}
 8015dbe:	460c      	mov	r4, r1
 8015dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015dc4:	f000 f8a8 	bl	8015f18 <_read_r>
 8015dc8:	2800      	cmp	r0, #0
 8015dca:	bfab      	itete	ge
 8015dcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015dce:	89a3      	ldrhlt	r3, [r4, #12]
 8015dd0:	181b      	addge	r3, r3, r0
 8015dd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015dd6:	bfac      	ite	ge
 8015dd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8015dda:	81a3      	strhlt	r3, [r4, #12]
 8015ddc:	bd10      	pop	{r4, pc}

08015dde <__swrite>:
 8015dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015de2:	461f      	mov	r7, r3
 8015de4:	898b      	ldrh	r3, [r1, #12]
 8015de6:	05db      	lsls	r3, r3, #23
 8015de8:	4605      	mov	r5, r0
 8015dea:	460c      	mov	r4, r1
 8015dec:	4616      	mov	r6, r2
 8015dee:	d505      	bpl.n	8015dfc <__swrite+0x1e>
 8015df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015df4:	2302      	movs	r3, #2
 8015df6:	2200      	movs	r2, #0
 8015df8:	f000 f870 	bl	8015edc <_lseek_r>
 8015dfc:	89a3      	ldrh	r3, [r4, #12]
 8015dfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015e02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015e06:	81a3      	strh	r3, [r4, #12]
 8015e08:	4632      	mov	r2, r6
 8015e0a:	463b      	mov	r3, r7
 8015e0c:	4628      	mov	r0, r5
 8015e0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015e12:	f000 b817 	b.w	8015e44 <_write_r>

08015e16 <__sseek>:
 8015e16:	b510      	push	{r4, lr}
 8015e18:	460c      	mov	r4, r1
 8015e1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015e1e:	f000 f85d 	bl	8015edc <_lseek_r>
 8015e22:	1c43      	adds	r3, r0, #1
 8015e24:	89a3      	ldrh	r3, [r4, #12]
 8015e26:	bf15      	itete	ne
 8015e28:	6560      	strne	r0, [r4, #84]	; 0x54
 8015e2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015e2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015e32:	81a3      	strheq	r3, [r4, #12]
 8015e34:	bf18      	it	ne
 8015e36:	81a3      	strhne	r3, [r4, #12]
 8015e38:	bd10      	pop	{r4, pc}

08015e3a <__sclose>:
 8015e3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015e3e:	f000 b81b 	b.w	8015e78 <_close_r>
	...

08015e44 <_write_r>:
 8015e44:	b538      	push	{r3, r4, r5, lr}
 8015e46:	4d07      	ldr	r5, [pc, #28]	; (8015e64 <_write_r+0x20>)
 8015e48:	4604      	mov	r4, r0
 8015e4a:	4608      	mov	r0, r1
 8015e4c:	4611      	mov	r1, r2
 8015e4e:	2200      	movs	r2, #0
 8015e50:	602a      	str	r2, [r5, #0]
 8015e52:	461a      	mov	r2, r3
 8015e54:	f7ea fff3 	bl	8000e3e <_write>
 8015e58:	1c43      	adds	r3, r0, #1
 8015e5a:	d102      	bne.n	8015e62 <_write_r+0x1e>
 8015e5c:	682b      	ldr	r3, [r5, #0]
 8015e5e:	b103      	cbz	r3, 8015e62 <_write_r+0x1e>
 8015e60:	6023      	str	r3, [r4, #0]
 8015e62:	bd38      	pop	{r3, r4, r5, pc}
 8015e64:	2000ab34 	.word	0x2000ab34

08015e68 <abort>:
 8015e68:	b508      	push	{r3, lr}
 8015e6a:	2006      	movs	r0, #6
 8015e6c:	f000 f88e 	bl	8015f8c <raise>
 8015e70:	2001      	movs	r0, #1
 8015e72:	f7ea ffbd 	bl	8000df0 <_exit>
	...

08015e78 <_close_r>:
 8015e78:	b538      	push	{r3, r4, r5, lr}
 8015e7a:	4d06      	ldr	r5, [pc, #24]	; (8015e94 <_close_r+0x1c>)
 8015e7c:	2300      	movs	r3, #0
 8015e7e:	4604      	mov	r4, r0
 8015e80:	4608      	mov	r0, r1
 8015e82:	602b      	str	r3, [r5, #0]
 8015e84:	f7ea fff7 	bl	8000e76 <_close>
 8015e88:	1c43      	adds	r3, r0, #1
 8015e8a:	d102      	bne.n	8015e92 <_close_r+0x1a>
 8015e8c:	682b      	ldr	r3, [r5, #0]
 8015e8e:	b103      	cbz	r3, 8015e92 <_close_r+0x1a>
 8015e90:	6023      	str	r3, [r4, #0]
 8015e92:	bd38      	pop	{r3, r4, r5, pc}
 8015e94:	2000ab34 	.word	0x2000ab34

08015e98 <_fstat_r>:
 8015e98:	b538      	push	{r3, r4, r5, lr}
 8015e9a:	4d07      	ldr	r5, [pc, #28]	; (8015eb8 <_fstat_r+0x20>)
 8015e9c:	2300      	movs	r3, #0
 8015e9e:	4604      	mov	r4, r0
 8015ea0:	4608      	mov	r0, r1
 8015ea2:	4611      	mov	r1, r2
 8015ea4:	602b      	str	r3, [r5, #0]
 8015ea6:	f7ea fff2 	bl	8000e8e <_fstat>
 8015eaa:	1c43      	adds	r3, r0, #1
 8015eac:	d102      	bne.n	8015eb4 <_fstat_r+0x1c>
 8015eae:	682b      	ldr	r3, [r5, #0]
 8015eb0:	b103      	cbz	r3, 8015eb4 <_fstat_r+0x1c>
 8015eb2:	6023      	str	r3, [r4, #0]
 8015eb4:	bd38      	pop	{r3, r4, r5, pc}
 8015eb6:	bf00      	nop
 8015eb8:	2000ab34 	.word	0x2000ab34

08015ebc <_isatty_r>:
 8015ebc:	b538      	push	{r3, r4, r5, lr}
 8015ebe:	4d06      	ldr	r5, [pc, #24]	; (8015ed8 <_isatty_r+0x1c>)
 8015ec0:	2300      	movs	r3, #0
 8015ec2:	4604      	mov	r4, r0
 8015ec4:	4608      	mov	r0, r1
 8015ec6:	602b      	str	r3, [r5, #0]
 8015ec8:	f7ea fff1 	bl	8000eae <_isatty>
 8015ecc:	1c43      	adds	r3, r0, #1
 8015ece:	d102      	bne.n	8015ed6 <_isatty_r+0x1a>
 8015ed0:	682b      	ldr	r3, [r5, #0]
 8015ed2:	b103      	cbz	r3, 8015ed6 <_isatty_r+0x1a>
 8015ed4:	6023      	str	r3, [r4, #0]
 8015ed6:	bd38      	pop	{r3, r4, r5, pc}
 8015ed8:	2000ab34 	.word	0x2000ab34

08015edc <_lseek_r>:
 8015edc:	b538      	push	{r3, r4, r5, lr}
 8015ede:	4d07      	ldr	r5, [pc, #28]	; (8015efc <_lseek_r+0x20>)
 8015ee0:	4604      	mov	r4, r0
 8015ee2:	4608      	mov	r0, r1
 8015ee4:	4611      	mov	r1, r2
 8015ee6:	2200      	movs	r2, #0
 8015ee8:	602a      	str	r2, [r5, #0]
 8015eea:	461a      	mov	r2, r3
 8015eec:	f7ea ffea 	bl	8000ec4 <_lseek>
 8015ef0:	1c43      	adds	r3, r0, #1
 8015ef2:	d102      	bne.n	8015efa <_lseek_r+0x1e>
 8015ef4:	682b      	ldr	r3, [r5, #0]
 8015ef6:	b103      	cbz	r3, 8015efa <_lseek_r+0x1e>
 8015ef8:	6023      	str	r3, [r4, #0]
 8015efa:	bd38      	pop	{r3, r4, r5, pc}
 8015efc:	2000ab34 	.word	0x2000ab34

08015f00 <__malloc_lock>:
 8015f00:	4801      	ldr	r0, [pc, #4]	; (8015f08 <__malloc_lock+0x8>)
 8015f02:	f7ff bb45 	b.w	8015590 <__retarget_lock_acquire_recursive>
 8015f06:	bf00      	nop
 8015f08:	2000ab40 	.word	0x2000ab40

08015f0c <__malloc_unlock>:
 8015f0c:	4801      	ldr	r0, [pc, #4]	; (8015f14 <__malloc_unlock+0x8>)
 8015f0e:	f7ff bb40 	b.w	8015592 <__retarget_lock_release_recursive>
 8015f12:	bf00      	nop
 8015f14:	2000ab40 	.word	0x2000ab40

08015f18 <_read_r>:
 8015f18:	b538      	push	{r3, r4, r5, lr}
 8015f1a:	4d07      	ldr	r5, [pc, #28]	; (8015f38 <_read_r+0x20>)
 8015f1c:	4604      	mov	r4, r0
 8015f1e:	4608      	mov	r0, r1
 8015f20:	4611      	mov	r1, r2
 8015f22:	2200      	movs	r2, #0
 8015f24:	602a      	str	r2, [r5, #0]
 8015f26:	461a      	mov	r2, r3
 8015f28:	f7ea ff6c 	bl	8000e04 <_read>
 8015f2c:	1c43      	adds	r3, r0, #1
 8015f2e:	d102      	bne.n	8015f36 <_read_r+0x1e>
 8015f30:	682b      	ldr	r3, [r5, #0]
 8015f32:	b103      	cbz	r3, 8015f36 <_read_r+0x1e>
 8015f34:	6023      	str	r3, [r4, #0]
 8015f36:	bd38      	pop	{r3, r4, r5, pc}
 8015f38:	2000ab34 	.word	0x2000ab34

08015f3c <_raise_r>:
 8015f3c:	291f      	cmp	r1, #31
 8015f3e:	b538      	push	{r3, r4, r5, lr}
 8015f40:	4604      	mov	r4, r0
 8015f42:	460d      	mov	r5, r1
 8015f44:	d904      	bls.n	8015f50 <_raise_r+0x14>
 8015f46:	2316      	movs	r3, #22
 8015f48:	6003      	str	r3, [r0, #0]
 8015f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8015f4e:	bd38      	pop	{r3, r4, r5, pc}
 8015f50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015f52:	b112      	cbz	r2, 8015f5a <_raise_r+0x1e>
 8015f54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015f58:	b94b      	cbnz	r3, 8015f6e <_raise_r+0x32>
 8015f5a:	4620      	mov	r0, r4
 8015f5c:	f000 f830 	bl	8015fc0 <_getpid_r>
 8015f60:	462a      	mov	r2, r5
 8015f62:	4601      	mov	r1, r0
 8015f64:	4620      	mov	r0, r4
 8015f66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015f6a:	f000 b817 	b.w	8015f9c <_kill_r>
 8015f6e:	2b01      	cmp	r3, #1
 8015f70:	d00a      	beq.n	8015f88 <_raise_r+0x4c>
 8015f72:	1c59      	adds	r1, r3, #1
 8015f74:	d103      	bne.n	8015f7e <_raise_r+0x42>
 8015f76:	2316      	movs	r3, #22
 8015f78:	6003      	str	r3, [r0, #0]
 8015f7a:	2001      	movs	r0, #1
 8015f7c:	e7e7      	b.n	8015f4e <_raise_r+0x12>
 8015f7e:	2400      	movs	r4, #0
 8015f80:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015f84:	4628      	mov	r0, r5
 8015f86:	4798      	blx	r3
 8015f88:	2000      	movs	r0, #0
 8015f8a:	e7e0      	b.n	8015f4e <_raise_r+0x12>

08015f8c <raise>:
 8015f8c:	4b02      	ldr	r3, [pc, #8]	; (8015f98 <raise+0xc>)
 8015f8e:	4601      	mov	r1, r0
 8015f90:	6818      	ldr	r0, [r3, #0]
 8015f92:	f7ff bfd3 	b.w	8015f3c <_raise_r>
 8015f96:	bf00      	nop
 8015f98:	2000001c 	.word	0x2000001c

08015f9c <_kill_r>:
 8015f9c:	b538      	push	{r3, r4, r5, lr}
 8015f9e:	4d07      	ldr	r5, [pc, #28]	; (8015fbc <_kill_r+0x20>)
 8015fa0:	2300      	movs	r3, #0
 8015fa2:	4604      	mov	r4, r0
 8015fa4:	4608      	mov	r0, r1
 8015fa6:	4611      	mov	r1, r2
 8015fa8:	602b      	str	r3, [r5, #0]
 8015faa:	f7ea ff0f 	bl	8000dcc <_kill>
 8015fae:	1c43      	adds	r3, r0, #1
 8015fb0:	d102      	bne.n	8015fb8 <_kill_r+0x1c>
 8015fb2:	682b      	ldr	r3, [r5, #0]
 8015fb4:	b103      	cbz	r3, 8015fb8 <_kill_r+0x1c>
 8015fb6:	6023      	str	r3, [r4, #0]
 8015fb8:	bd38      	pop	{r3, r4, r5, pc}
 8015fba:	bf00      	nop
 8015fbc:	2000ab34 	.word	0x2000ab34

08015fc0 <_getpid_r>:
 8015fc0:	f7ea befc 	b.w	8000dbc <_getpid>

08015fc4 <_init>:
 8015fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fc6:	bf00      	nop
 8015fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015fca:	bc08      	pop	{r3}
 8015fcc:	469e      	mov	lr, r3
 8015fce:	4770      	bx	lr

08015fd0 <_fini>:
 8015fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fd2:	bf00      	nop
 8015fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015fd6:	bc08      	pop	{r3}
 8015fd8:	469e      	mov	lr, r3
 8015fda:	4770      	bx	lr
